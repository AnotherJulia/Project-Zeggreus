
Ground station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd24  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800bec8  0800bec8  0001bec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c298  0800c298  00020358  2**0
                  CONTENTS
  4 .ARM          00000008  0800c298  0800c298  0001c298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2a0  0800c2a0  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2a0  0800c2a0  0001c2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2a4  0800c2a4  0001c2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0800c2a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a80  20000358  0800c600  00020358  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001dd8  0800c600  00021dd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f264  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003da7  00000000  00000000  0003f5ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018d8  00000000  00000000  00043398  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001738  00000000  00000000  00044c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b60d  00000000  00000000  000463a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015665  00000000  00000000  000619b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a8c8  00000000  00000000  0007701a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001118e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074f4  00000000  00000000  00111960  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000358 	.word	0x20000358
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800beac 	.word	0x0800beac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000035c 	.word	0x2000035c
 80001dc:	0800beac 	.word	0x0800beac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <loraTelemetry>:
        }

    }
}

void loraTelemetry() {
 8000f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f5c:	b0f4      	sub	sp, #464	; 0x1d0
 8000f5e:	af08      	add	r7, sp, #32
    TLM_decoded TLM_dec;
    TLM_encoded TLM_enc;

    sx1280_custom radio;

    sxInit(&radio, &hspi3, LORA_NSS_GPIO_Port, LORA_NSS_Pin);
 8000f60:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8000f64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f68:	4a4b      	ldr	r2, [pc, #300]	; (8001098 <loraTelemetry+0x140>)
 8000f6a:	494c      	ldr	r1, [pc, #304]	; (800109c <loraTelemetry+0x144>)
 8000f6c:	f000 fd90 	bl	8001a90 <sxInit>
    sxSetDio1Pin(&radio, LORA_DIO1_GPIO_Port, LORA_DIO1_Pin);
 8000f70:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000f74:	2220      	movs	r2, #32
 8000f76:	494a      	ldr	r1, [pc, #296]	; (80010a0 <loraTelemetry+0x148>)
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 fde9 	bl	8001b50 <sxSetDio1Pin>

    char printBuffer[256];

    // rx mode
    SetDioIrqParams(&radio, 1 << 1, 1 << 1, 0, 0); //rxdone on gpio1
 8000f7e:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8000f82:	2300      	movs	r3, #0
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2300      	movs	r3, #0
 8000f88:	2202      	movs	r2, #2
 8000f8a:	2102      	movs	r1, #2
 8000f8c:	f000 fec8 	bl	8001d20 <SetDioIrqParams>
    HAL_Delay(1);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f001 f9a7 	bl	80022e4 <HAL_Delay>

    uint8_t rxStartBufferPointer = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
    TLM_dec.debug = 1337;
    TLM_dec.ranging = 15212;

     */

    float latitude = 52.394821;
 8000f9c:	4b41      	ldr	r3, [pc, #260]	; (80010a4 <loraTelemetry+0x14c>)
 8000f9e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    float longitude = 5.922696;
 8000fa2:	4b41      	ldr	r3, [pc, #260]	; (80010a8 <loraTelemetry+0x150>)
 8000fa4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0

    float acc_conversion = 0.0095712904;
 8000fa8:	4b40      	ldr	r3, [pc, #256]	; (80010ac <loraTelemetry+0x154>)
 8000faa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    float gyro_conversion = 0.070;
 8000fae:	4b40      	ldr	r3, [pc, #256]	; (80010b0 <loraTelemetry+0x158>)
 8000fb0:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198

    uint32_t pkt_count = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    //changeLed(0, 100, 0);
    uint8_t data[4];
    while (1) {

        //SetRx(0x00, 0xffff); // continous rx
        SetRx(&radio, 0x00, 0); // No timeout
 8000fba:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 ff01 	bl	8001dca <SetRx>
        //SetRx(0x02, 200); // 200 ms timeout
        HAL_Delay(1);
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f001 f98b 	bl	80022e4 <HAL_Delay>
        // wait for reception:
        while (!HAL_GPIO_ReadPin(LORA_DIO1_GPIO_Port, LORA_DIO1_Pin)) {
 8000fce:	bf00      	nop
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	4833      	ldr	r0, [pc, #204]	; (80010a0 <loraTelemetry+0x148>)
 8000fd4:	f001 feae 	bl	8002d34 <HAL_GPIO_ReadPin>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f8      	beq.n	8000fd0 <loraTelemetry+0x78>
        }

        pkt_count++;
 8000fde:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

        GetPacketStatusLora(&radio);
 8000fe8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 ff0b 	bl	8001e08 <GetPacketStatusLora>
        ClrIrqStatus(&radio, 1 << 1); // clear rxdone Irq
 8000ff2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 fecb 	bl	8001d94 <ClrIrqStatus>
        HAL_Delay(1);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f001 f970 	bl	80022e4 <HAL_Delay>
        //GetRxBufferStatus(); // TODO

        ReadBuffer(&radio, rxStartBufferPointer, sizeof(TLM_enc),(uint8_t*) &TLM_enc);
 8001004:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001008:	f897 11ab 	ldrb.w	r1, [r7, #427]	; 0x1ab
 800100c:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8001010:	221f      	movs	r2, #31
 8001012:	f000 fe50 	bl	8001cb6 <ReadBuffer>
        //ReadBuffer(&radio, rxStartBufferPointer, sizeof(data), (uint8_t*) data);
        decode_TLM(&TLM_enc, &TLM_dec);
 8001016:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 800101a:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f000 ff9d 	bl	8001f60 <decode_TLM>
        //        TLM_dec.pin_states,TLM_dec.servo_state, TLM_dec.vbat, TLM_dec.systick, TLM_dec.orientation_quat[0], TLM_dec.acc[2],TLM_dec.gyro[2],TLM_dec.baro, TLM_dec.temp, TLM_dec.vertical_velocity,
        //        TLM_dec.altitude, TLM_dec.ranging);

        //snprintf(printBuffer,256,"/*Project Zeggreus,%ld,%ld,%f,%f,%f,%f,%f,%f,%ld,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f*/\r\n", TLM_dec.systick, pkt_count, TLM_dec.vbat,TLM_dec.temp,TLM_dec.altitude,TLM_dec.baro/1000, TLM_dec.temp,0.0,TLM_dec.systick,
        //        longitude, latitude, TLM_dec.altitude,1.0,TLM_dec.acc[0]*acc_conversion,TLM_dec.acc[1]*acc_conversion,TLM_dec.acc[2]*acc_conversion, TLM_dec.gyro[0]*gyro_conversion,TLM_dec.gyro[1]*gyro_conversion,TLM_dec.gyro[2]*gyro_conversion);
        snprintf(printBuffer, 128, "Quaternion:%f, %f, %f, %f\r\n", TLM_dec.orientation_quat[0], TLM_dec.orientation_quat[1], TLM_dec.orientation_quat[2], TLM_dec.orientation_quat[3]);
 8001026:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fa94 	bl	8000558 <__aeabi_f2d>
 8001030:	4604      	mov	r4, r0
 8001032:	460d      	mov	r5, r1
 8001034:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fa8d 	bl	8000558 <__aeabi_f2d>
 800103e:	4680      	mov	r8, r0
 8001040:	4689      	mov	r9, r1
 8001042:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fa86 	bl	8000558 <__aeabi_f2d>
 800104c:	4682      	mov	sl, r0
 800104e:	468b      	mov	fp, r1
 8001050:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa7f 	bl	8000558 <__aeabi_f2d>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	1d38      	adds	r0, r7, #4
 8001060:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001064:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001068:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800106c:	e9cd 4500 	strd	r4, r5, [sp]
 8001070:	4a10      	ldr	r2, [pc, #64]	; (80010b4 <loraTelemetry+0x15c>)
 8001072:	2180      	movs	r1, #128	; 0x80
 8001074:	f009 fbf0 	bl	800a858 <sniprintf>
        //snprintf(printBuffer, 128,
        //       "Quaternion: %d, %d, %d, %d, RSSI: %f, SNR: %f\r\n",
        //       data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
        CDC_Transmit_FS((uint8_t*) printBuffer, strlen(printBuffer));
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff f8b0 	bl	80001e0 <strlen>
 8001080:	4603      	mov	r3, r0
 8001082:	b29a      	uxth	r2, r3
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f008 fa4b 	bl	8009524 <CDC_Transmit_FS>
        HAL_Delay(1);
 800108e:	2001      	movs	r0, #1
 8001090:	f001 f928 	bl	80022e4 <HAL_Delay>
        SetRx(&radio, 0x00, 0); // No timeout
 8001094:	e791      	b.n	8000fba <loraTelemetry+0x62>
 8001096:	bf00      	nop
 8001098:	40020000 	.word	0x40020000
 800109c:	200003d8 	.word	0x200003d8
 80010a0:	40020400 	.word	0x40020400
 80010a4:	4251944c 	.word	0x4251944c
 80010a8:	40bd86ba 	.word	0x40bd86ba
 80010ac:	3c1cd0e7 	.word	0x3c1cd0e7
 80010b0:	3d8f5c29 	.word	0x3d8f5c29
 80010b4:	0800bef8 	.word	0x0800bef8

080010b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0a0      	sub	sp, #128	; 0x80
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010be:	f001 f89f 	bl	8002200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c2:	f000 f835 	bl	8001130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c6:	f000 f9df 	bl	8001488 <MX_GPIO_Init>
  MX_ADC1_Init();
 80010ca:	f000 f899 	bl	8001200 <MX_ADC1_Init>
  MX_I2C1_Init();
 80010ce:	f000 f8e9 	bl	80012a4 <MX_I2C1_Init>
  MX_SPI3_Init();
 80010d2:	f000 f915 	bl	8001300 <MX_SPI3_Init>
  MX_TIM2_Init();
 80010d6:	f000 f949 	bl	800136c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80010da:	f000 f9ab 	bl	8001434 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80010de:	f008 f94f 	bl	8009380 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  loraTelemetry(0);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff ff38 	bl	8000f58 <loraTelemetry>

  HAL_Delay(200);
 80010e8:	20c8      	movs	r0, #200	; 0xc8
 80010ea:	f001 f8fb 	bl	80022e4 <HAL_Delay>
  char printBuffer[128];
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(printBuffer,"/*Project Zeggreus,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10*/");
 80010ee:	463b      	mov	r3, r7
 80010f0:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <main+0x70>)
 80010f2:	4618      	mov	r0, r3
 80010f4:	4611      	mov	r1, r2
 80010f6:	234e      	movs	r3, #78	; 0x4e
 80010f8:	461a      	mov	r2, r3
 80010fa:	f008 fe85 	bl	8009e08 <memcpy>
	  CDC_Transmit_FS((uint8_t*) printBuffer, strlen(printBuffer));
 80010fe:	463b      	mov	r3, r7
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f86d 	bl	80001e0 <strlen>
 8001106:	4603      	mov	r3, r0
 8001108:	b29a      	uxth	r2, r3
 800110a:	463b      	mov	r3, r7
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f008 fa08 	bl	8009524 <CDC_Transmit_FS>
	  HAL_Delay(500);
 8001114:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001118:	f001 f8e4 	bl	80022e4 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800111c:	2101      	movs	r1, #1
 800111e:	4803      	ldr	r0, [pc, #12]	; (800112c <main+0x74>)
 8001120:	f001 fe39 	bl	8002d96 <HAL_GPIO_TogglePin>
	  sprintf(printBuffer,"/*Project Zeggreus,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10*/");
 8001124:	e7e3      	b.n	80010ee <main+0x36>
 8001126:	bf00      	nop
 8001128:	0800bf14 	.word	0x0800bf14
 800112c:	40020000 	.word	0x40020000

08001130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b094      	sub	sp, #80	; 0x50
 8001134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	2230      	movs	r2, #48	; 0x30
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f008 fe6d 	bl	8009e1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <SystemClock_Config+0xc8>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	4a26      	ldr	r2, [pc, #152]	; (80011f8 <SystemClock_Config+0xc8>)
 800115e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001162:	6413      	str	r3, [r2, #64]	; 0x40
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <SystemClock_Config+0xc8>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	4b21      	ldr	r3, [pc, #132]	; (80011fc <SystemClock_Config+0xcc>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a20      	ldr	r2, [pc, #128]	; (80011fc <SystemClock_Config+0xcc>)
 800117a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <SystemClock_Config+0xcc>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800118c:	2301      	movs	r3, #1
 800118e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001196:	2302      	movs	r3, #2
 8001198:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800119e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011a0:	2304      	movs	r3, #4
 80011a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80011a4:	2348      	movs	r3, #72	; 0x48
 80011a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80011ac:	2303      	movs	r3, #3
 80011ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b0:	f107 0320 	add.w	r3, r7, #32
 80011b4:	4618      	mov	r0, r3
 80011b6:	f003 f8c5 	bl	8004344 <HAL_RCC_OscConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011c0:	f000 fa1c 	bl	80015fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c4:	230f      	movs	r3, #15
 80011c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c8:	2302      	movs	r3, #2
 80011ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	2102      	movs	r1, #2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f003 fb1f 	bl	8004824 <HAL_RCC_ClockConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011ec:	f000 fa06 	bl	80015fc <Error_Handler>
  }
}
 80011f0:	bf00      	nop
 80011f2:	3750      	adds	r7, #80	; 0x50
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40007000 	.word	0x40007000

08001200 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001206:	463b      	mov	r3, r7
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001212:	4b21      	ldr	r3, [pc, #132]	; (8001298 <MX_ADC1_Init+0x98>)
 8001214:	4a21      	ldr	r2, [pc, #132]	; (800129c <MX_ADC1_Init+0x9c>)
 8001216:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001218:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <MX_ADC1_Init+0x98>)
 800121a:	2200      	movs	r2, #0
 800121c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800121e:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <MX_ADC1_Init+0x98>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <MX_ADC1_Init+0x98>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800122a:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <MX_ADC1_Init+0x98>)
 800122c:	2200      	movs	r2, #0
 800122e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <MX_ADC1_Init+0x98>)
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001238:	4b17      	ldr	r3, [pc, #92]	; (8001298 <MX_ADC1_Init+0x98>)
 800123a:	2200      	movs	r2, #0
 800123c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800123e:	4b16      	ldr	r3, [pc, #88]	; (8001298 <MX_ADC1_Init+0x98>)
 8001240:	4a17      	ldr	r2, [pc, #92]	; (80012a0 <MX_ADC1_Init+0xa0>)
 8001242:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MX_ADC1_Init+0x98>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <MX_ADC1_Init+0x98>)
 800124c:	2201      	movs	r2, #1
 800124e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_ADC1_Init+0x98>)
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_ADC1_Init+0x98>)
 800125a:	2201      	movs	r2, #1
 800125c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800125e:	480e      	ldr	r0, [pc, #56]	; (8001298 <MX_ADC1_Init+0x98>)
 8001260:	f001 f862 	bl	8002328 <HAL_ADC_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800126a:	f000 f9c7 	bl	80015fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800126e:	230a      	movs	r3, #10
 8001270:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001272:	2301      	movs	r3, #1
 8001274:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	4619      	mov	r1, r3
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <MX_ADC1_Init+0x98>)
 8001280:	f001 f896 	bl	80023b0 <HAL_ADC_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800128a:	f000 f9b7 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000430 	.word	0x20000430
 800129c:	40012000 	.word	0x40012000
 80012a0:	0f000001 	.word	0x0f000001

080012a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012aa:	4a13      	ldr	r2, [pc, #76]	; (80012f8 <MX_I2C1_Init+0x54>)
 80012ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012b0:	4a12      	ldr	r2, [pc, #72]	; (80012fc <MX_I2C1_Init+0x58>)
 80012b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012e0:	4804      	ldr	r0, [pc, #16]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012e2:	f001 fd73 	bl	8002dcc <HAL_I2C_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012ec:	f000 f986 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000384 	.word	0x20000384
 80012f8:	40005400 	.word	0x40005400
 80012fc:	000186a0 	.word	0x000186a0

08001300 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001304:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_SPI3_Init+0x64>)
 8001306:	4a18      	ldr	r2, [pc, #96]	; (8001368 <MX_SPI3_Init+0x68>)
 8001308:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <MX_SPI3_Init+0x64>)
 800130c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001310:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_SPI3_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <MX_SPI3_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_SPI3_Init+0x64>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_SPI3_Init+0x64>)
 8001326:	2200      	movs	r2, #0
 8001328:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <MX_SPI3_Init+0x64>)
 800132c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001330:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_SPI3_Init+0x64>)
 8001334:	2200      	movs	r2, #0
 8001336:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <MX_SPI3_Init+0x64>)
 800133a:	2200      	movs	r2, #0
 800133c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_SPI3_Init+0x64>)
 8001340:	2200      	movs	r2, #0
 8001342:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <MX_SPI3_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_SPI3_Init+0x64>)
 800134c:	220a      	movs	r2, #10
 800134e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001350:	4804      	ldr	r0, [pc, #16]	; (8001364 <MX_SPI3_Init+0x64>)
 8001352:	f003 fc59 	bl	8004c08 <HAL_SPI_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800135c:	f000 f94e 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200003d8 	.word	0x200003d8
 8001368:	40003c00 	.word	0x40003c00

0800136c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001372:	f107 0320 	add.w	r3, r7, #32
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]
 800138a:	615a      	str	r2, [r3, #20]
 800138c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800138e:	4b28      	ldr	r3, [pc, #160]	; (8001430 <MX_TIM2_Init+0xc4>)
 8001390:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001394:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001396:	4b26      	ldr	r3, [pc, #152]	; (8001430 <MX_TIM2_Init+0xc4>)
 8001398:	2200      	movs	r2, #0
 800139a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139c:	4b24      	ldr	r3, [pc, #144]	; (8001430 <MX_TIM2_Init+0xc4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013a2:	4b23      	ldr	r3, [pc, #140]	; (8001430 <MX_TIM2_Init+0xc4>)
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295
 80013a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013aa:	4b21      	ldr	r3, [pc, #132]	; (8001430 <MX_TIM2_Init+0xc4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b0:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <MX_TIM2_Init+0xc4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013b6:	481e      	ldr	r0, [pc, #120]	; (8001430 <MX_TIM2_Init+0xc4>)
 80013b8:	f004 f97a 	bl	80056b0 <HAL_TIM_PWM_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80013c2:	f000 f91b 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ce:	f107 0320 	add.w	r3, r7, #32
 80013d2:	4619      	mov	r1, r3
 80013d4:	4816      	ldr	r0, [pc, #88]	; (8001430 <MX_TIM2_Init+0xc4>)
 80013d6:	f004 fc69 	bl	8005cac <HAL_TIMEx_MasterConfigSynchronization>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80013e0:	f000 f90c 	bl	80015fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e4:	2360      	movs	r3, #96	; 0x60
 80013e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	2204      	movs	r2, #4
 80013f8:	4619      	mov	r1, r3
 80013fa:	480d      	ldr	r0, [pc, #52]	; (8001430 <MX_TIM2_Init+0xc4>)
 80013fc:	f004 f984 	bl	8005708 <HAL_TIM_PWM_ConfigChannel>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001406:	f000 f8f9 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2208      	movs	r2, #8
 800140e:	4619      	mov	r1, r3
 8001410:	4807      	ldr	r0, [pc, #28]	; (8001430 <MX_TIM2_Init+0xc4>)
 8001412:	f004 f979 	bl	8005708 <HAL_TIM_PWM_ConfigChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800141c:	f000 f8ee 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001420:	4803      	ldr	r0, [pc, #12]	; (8001430 <MX_TIM2_Init+0xc4>)
 8001422:	f000 fa0b 	bl	800183c <HAL_TIM_MspPostInit>

}
 8001426:	bf00      	nop
 8001428:	3728      	adds	r7, #40	; 0x28
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000478 	.word	0x20000478

08001434 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 800143a:	4a12      	ldr	r2, [pc, #72]	; (8001484 <MX_USART2_UART_Init+0x50>)
 800143c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 8001440:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001444:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 800145a:	220c      	movs	r2, #12
 800145c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 800146c:	f004 fc8c 	bl	8005d88 <HAL_UART_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001476:	f000 f8c1 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200004b8 	.word	0x200004b8
 8001484:	40004400 	.word	0x40004400

08001488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	4b51      	ldr	r3, [pc, #324]	; (80015e8 <MX_GPIO_Init+0x160>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a50      	ldr	r2, [pc, #320]	; (80015e8 <MX_GPIO_Init+0x160>)
 80014a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b4e      	ldr	r3, [pc, #312]	; (80015e8 <MX_GPIO_Init+0x160>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b4a      	ldr	r3, [pc, #296]	; (80015e8 <MX_GPIO_Init+0x160>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a49      	ldr	r2, [pc, #292]	; (80015e8 <MX_GPIO_Init+0x160>)
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b47      	ldr	r3, [pc, #284]	; (80015e8 <MX_GPIO_Init+0x160>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	4b43      	ldr	r3, [pc, #268]	; (80015e8 <MX_GPIO_Init+0x160>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a42      	ldr	r2, [pc, #264]	; (80015e8 <MX_GPIO_Init+0x160>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b40      	ldr	r3, [pc, #256]	; (80015e8 <MX_GPIO_Init+0x160>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	4b3c      	ldr	r3, [pc, #240]	; (80015e8 <MX_GPIO_Init+0x160>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a3b      	ldr	r2, [pc, #236]	; (80015e8 <MX_GPIO_Init+0x160>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b39      	ldr	r3, [pc, #228]	; (80015e8 <MX_GPIO_Init+0x160>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	4b35      	ldr	r3, [pc, #212]	; (80015e8 <MX_GPIO_Init+0x160>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a34      	ldr	r2, [pc, #208]	; (80015e8 <MX_GPIO_Init+0x160>)
 8001518:	f043 0308 	orr.w	r3, r3, #8
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b32      	ldr	r3, [pc, #200]	; (80015e8 <MX_GPIO_Init+0x160>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|RXEN_Pin|TXEN_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	f248 6101 	movw	r1, #34305	; 0x8601
 8001530:	482e      	ldr	r0, [pc, #184]	; (80015ec <MX_GPIO_Init+0x164>)
 8001532:	f001 fc17 	bl	8002d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SWANT_GPIO_Port, SWANT_Pin, GPIO_PIN_SET);
 8001536:	2201      	movs	r2, #1
 8001538:	f44f 7100 	mov.w	r1, #512	; 0x200
 800153c:	482c      	ldr	r0, [pc, #176]	; (80015f0 <MX_GPIO_Init+0x168>)
 800153e:	f001 fc11 	bl	8002d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 8001542:	2201      	movs	r2, #1
 8001544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001548:	4828      	ldr	r0, [pc, #160]	; (80015ec <MX_GPIO_Init+0x164>)
 800154a:	f001 fc0b 	bl	8002d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	2180      	movs	r1, #128	; 0x80
 8001552:	4828      	ldr	r0, [pc, #160]	; (80015f4 <MX_GPIO_Init+0x16c>)
 8001554:	f001 fc06 	bl	8002d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin MODE_Pin RXEN_Pin TXEN_Pin
                           LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|MODE_Pin|RXEN_Pin|TXEN_Pin
 8001558:	f248 7301 	movw	r3, #34561	; 0x8701
 800155c:	617b      	str	r3, [r7, #20]
                          |LORA_NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155e:	2301      	movs	r3, #1
 8001560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	481e      	ldr	r0, [pc, #120]	; (80015ec <MX_GPIO_Init+0x164>)
 8001572:	f001 fa5d 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWANT_Pin */
  GPIO_InitStruct.Pin = SWANT_Pin;
 8001576:	f44f 7300 	mov.w	r3, #512	; 0x200
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SWANT_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	4818      	ldr	r0, [pc, #96]	; (80015f0 <MX_GPIO_Init+0x168>)
 8001590:	f001 fa4e 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO3_Pin */
  GPIO_InitStruct.Pin = DIO3_Pin;
 8001594:	2304      	movs	r3, #4
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001598:	2300      	movs	r3, #0
 800159a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO3_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	4814      	ldr	r0, [pc, #80]	; (80015f8 <MX_GPIO_Init+0x170>)
 80015a8:	f001 fa42 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO2_Pin LORA_DIO1_Pin LORA_BUSY_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin|LORA_DIO1_Pin|LORA_BUSY_Pin;
 80015ac:	2370      	movs	r3, #112	; 0x70
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	480d      	ldr	r0, [pc, #52]	; (80015f4 <MX_GPIO_Init+0x16c>)
 80015c0:	f001 fa36 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RESET_Pin */
  GPIO_InitStruct.Pin = LORA_RESET_Pin;
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LORA_RESET_GPIO_Port, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	4806      	ldr	r0, [pc, #24]	; (80015f4 <MX_GPIO_Init+0x16c>)
 80015dc:	f001 fa28 	bl	8002a30 <HAL_GPIO_Init>

}
 80015e0:	bf00      	nop
 80015e2:	3728      	adds	r7, #40	; 0x28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020000 	.word	0x40020000
 80015f0:	40020800 	.word	0x40020800
 80015f4:	40020400 	.word	0x40020400
 80015f8:	40020c00 	.word	0x40020c00

080015fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001600:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001602:	e7fe      	b.n	8001602 <Error_Handler+0x6>

08001604 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_MspInit+0x4c>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	4a0f      	ldr	r2, [pc, #60]	; (8001650 <HAL_MspInit+0x4c>)
 8001614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001618:	6453      	str	r3, [r2, #68]	; 0x44
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <HAL_MspInit+0x4c>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_MspInit+0x4c>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a08      	ldr	r2, [pc, #32]	; (8001650 <HAL_MspInit+0x4c>)
 8001630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_MspInit+0x4c>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800

08001654 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a17      	ldr	r2, [pc, #92]	; (80016d0 <HAL_ADC_MspInit+0x7c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d127      	bne.n	80016c6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <HAL_ADC_MspInit+0x80>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	4a15      	ldr	r2, [pc, #84]	; (80016d4 <HAL_ADC_MspInit+0x80>)
 8001680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001684:	6453      	str	r3, [r2, #68]	; 0x44
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <HAL_ADC_MspInit+0x80>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_ADC_MspInit+0x80>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <HAL_ADC_MspInit+0x80>)
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_ADC_MspInit+0x80>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = PDET_Pin;
 80016ae:	2301      	movs	r3, #1
 80016b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016b2:	2303      	movs	r3, #3
 80016b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PDET_GPIO_Port, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <HAL_ADC_MspInit+0x84>)
 80016c2:	f001 f9b5 	bl	8002a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016c6:	bf00      	nop
 80016c8:	3728      	adds	r7, #40	; 0x28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40012000 	.word	0x40012000
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020800 	.word	0x40020800

080016dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a19      	ldr	r2, [pc, #100]	; (8001760 <HAL_I2C_MspInit+0x84>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d12c      	bne.n	8001758 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <HAL_I2C_MspInit+0x88>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a17      	ldr	r2, [pc, #92]	; (8001764 <HAL_I2C_MspInit+0x88>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_I2C_MspInit+0x88>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800171a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800171e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001720:	2312      	movs	r3, #18
 8001722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001724:	2301      	movs	r3, #1
 8001726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800172c:	2304      	movs	r3, #4
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	480c      	ldr	r0, [pc, #48]	; (8001768 <HAL_I2C_MspInit+0x8c>)
 8001738:	f001 f97a 	bl	8002a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_I2C_MspInit+0x88>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <HAL_I2C_MspInit+0x88>)
 8001746:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800174a:	6413      	str	r3, [r2, #64]	; 0x40
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_I2C_MspInit+0x88>)
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001758:	bf00      	nop
 800175a:	3728      	adds	r7, #40	; 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40005400 	.word	0x40005400
 8001764:	40023800 	.word	0x40023800
 8001768:	40020400 	.word	0x40020400

0800176c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <HAL_SPI_MspInit+0x84>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d12c      	bne.n	80017e8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <HAL_SPI_MspInit+0x88>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	4a17      	ldr	r2, [pc, #92]	; (80017f4 <HAL_SPI_MspInit+0x88>)
 8001798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_SPI_MspInit+0x88>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_SPI_MspInit+0x88>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a10      	ldr	r2, [pc, #64]	; (80017f4 <HAL_SPI_MspInit+0x88>)
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_SPI_MspInit+0x88>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80017c6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d4:	2303      	movs	r3, #3
 80017d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017d8:	2306      	movs	r3, #6
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4619      	mov	r1, r3
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <HAL_SPI_MspInit+0x8c>)
 80017e4:	f001 f924 	bl	8002a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017e8:	bf00      	nop
 80017ea:	3728      	adds	r7, #40	; 0x28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40003c00 	.word	0x40003c00
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020800 	.word	0x40020800

080017fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800180c:	d10d      	bne.n	800182a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_TIM_PWM_MspInit+0x3c>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	4a08      	ldr	r2, [pc, #32]	; (8001838 <HAL_TIM_PWM_MspInit+0x3c>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6413      	str	r3, [r2, #64]	; 0x40
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_TIM_PWM_MspInit+0x3c>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800182a:	bf00      	nop
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800

0800183c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800185c:	d13c      	bne.n	80018d8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <HAL_TIM_MspPostInit+0xa4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a1e      	ldr	r2, [pc, #120]	; (80018e0 <HAL_TIM_MspPostInit+0xa4>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <HAL_TIM_MspPostInit+0xa4>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <HAL_TIM_MspPostInit+0xa4>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a17      	ldr	r2, [pc, #92]	; (80018e0 <HAL_TIM_MspPostInit+0xa4>)
 8001884:	f043 0302 	orr.w	r3, r3, #2
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_TIM_MspPostInit+0xa4>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = LED2_Pin;
 8001896:	2302      	movs	r3, #2
 8001898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018a6:	2301      	movs	r3, #1
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4619      	mov	r1, r3
 80018b0:	480c      	ldr	r0, [pc, #48]	; (80018e4 <HAL_TIM_MspPostInit+0xa8>)
 80018b2:	f001 f8bd 	bl	8002a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2300      	movs	r3, #0
 80018c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018c8:	2301      	movs	r3, #1
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	4619      	mov	r1, r3
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <HAL_TIM_MspPostInit+0xac>)
 80018d4:	f001 f8ac 	bl	8002a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018d8:	bf00      	nop
 80018da:	3728      	adds	r7, #40	; 0x28
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40020000 	.word	0x40020000
 80018e8:	40020400 	.word	0x40020400

080018ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a19      	ldr	r2, [pc, #100]	; (8001970 <HAL_UART_MspInit+0x84>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d12b      	bne.n	8001966 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	4b18      	ldr	r3, [pc, #96]	; (8001974 <HAL_UART_MspInit+0x88>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	4a17      	ldr	r2, [pc, #92]	; (8001974 <HAL_UART_MspInit+0x88>)
 8001918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800191c:	6413      	str	r3, [r2, #64]	; 0x40
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_UART_MspInit+0x88>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <HAL_UART_MspInit+0x88>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a10      	ldr	r2, [pc, #64]	; (8001974 <HAL_UART_MspInit+0x88>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <HAL_UART_MspInit+0x88>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001946:	230c      	movs	r3, #12
 8001948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001952:	2303      	movs	r3, #3
 8001954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001956:	2307      	movs	r3, #7
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	; (8001978 <HAL_UART_MspInit+0x8c>)
 8001962:	f001 f865 	bl	8002a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001966:	bf00      	nop
 8001968:	3728      	adds	r7, #40	; 0x28
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40004400 	.word	0x40004400
 8001974:	40023800 	.word	0x40023800
 8001978:	40020000 	.word	0x40020000

0800197c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <NMI_Handler+0x4>

08001982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001986:	e7fe      	b.n	8001986 <HardFault_Handler+0x4>

08001988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800198c:	e7fe      	b.n	800198c <MemManage_Handler+0x4>

0800198e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001992:	e7fe      	b.n	8001992 <BusFault_Handler+0x4>

08001994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <UsageFault_Handler+0x4>

0800199a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c8:	f000 fc6c 	bl	80022a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <OTG_FS_IRQHandler+0x10>)
 80019d6:	f001 fc81 	bl	80032dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200019cc 	.word	0x200019cc

080019e4 <sxSpiTransmit>:
#include "main.h"
#include "sx1280_custom.h"


void sxSpiTransmit(sx1280_custom *radio, uint8_t *txBuf, uint8_t size) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	4613      	mov	r3, r2
 80019f0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6858      	ldr	r0, [r3, #4]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	891b      	ldrh	r3, [r3, #8]
 80019fa:	2200      	movs	r2, #0
 80019fc:	4619      	mov	r1, r3
 80019fe:	f001 f9b1 	bl	8002d64 <HAL_GPIO_WritePin>
    radio->spi_return = HAL_SPI_Transmit(radio->spiHandle, txBuf, size, 1000);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0e:	68b9      	ldr	r1, [r7, #8]
 8001a10:	f003 f95e 	bl	8004cd0 <HAL_SPI_Transmit>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461a      	mov	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6858      	ldr	r0, [r3, #4]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	891b      	ldrh	r3, [r3, #8]
 8001a26:	2201      	movs	r2, #1
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f001 f99b 	bl	8002d64 <HAL_GPIO_WritePin>
}
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <sxSpiTransmitReceive>:
void sxSpiTransmitReceive(sx1280_custom *radio, uint8_t *txBuf, uint8_t *rxBuf, uint8_t size) {
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af02      	add	r7, sp, #8
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6858      	ldr	r0, [r3, #4]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	891b      	ldrh	r3, [r3, #8]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f001 f988 	bl	8002d64 <HAL_GPIO_WritePin>
    radio->spi_return = HAL_SPI_TransmitReceive(radio->spiHandle,txBuf,rxBuf,size,1000);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6818      	ldr	r0, [r3, #0]
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	4613      	mov	r3, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	68b9      	ldr	r1, [r7, #8]
 8001a68:	f003 fb6f 	bl	800514a <HAL_SPI_TransmitReceive>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6858      	ldr	r0, [r3, #4]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	891b      	ldrh	r3, [r3, #8]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4619      	mov	r1, r3
 8001a82:	f001 f96f 	bl	8002d64 <HAL_GPIO_WritePin>
}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <sxInit>:


void sxInit(sx1280_custom *radio, SPI_HandleTypeDef *spiHandle,
        GPIO_TypeDef *csPinBank, uint16_t csPin) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
 8001a9c:	807b      	strh	r3, [r7, #2]

    radio->spiHandle = spiHandle;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	601a      	str	r2, [r3, #0]
    radio->csPinBank = csPinBank;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	605a      	str	r2, [r3, #4]
    radio->csPin = csPin;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	887a      	ldrh	r2, [r7, #2]
 8001aae:	811a      	strh	r2, [r3, #8]


    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2180      	movs	r1, #128	; 0x80
 8001ab4:	4825      	ldr	r0, [pc, #148]	; (8001b4c <sxInit+0xbc>)
 8001ab6:	f001 f955 	bl	8002d64 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001aba:	2002      	movs	r0, #2
 8001abc:	f000 fc12 	bl	80022e4 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2180      	movs	r1, #128	; 0x80
 8001ac4:	4821      	ldr	r0, [pc, #132]	; (8001b4c <sxInit+0xbc>)
 8001ac6:	f001 f94d 	bl	8002d64 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001aca:	2002      	movs	r0, #2
 8001acc:	f000 fc0a 	bl	80022e4 <HAL_Delay>

    SetStandbyRC(radio);
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 f850 	bl	8001b76 <SetStandbyRC>
    HAL_Delay(3);
 8001ad6:	2003      	movs	r0, #3
 8001ad8:	f000 fc04 	bl	80022e4 <HAL_Delay>
    setPacketLora(radio);
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f000 f875 	bl	8001bcc <setPacketLora>
    HAL_Delay(2);
 8001ae2:	2002      	movs	r0, #2
 8001ae4:	f000 fbfe 	bl	80022e4 <HAL_Delay>
    SetRfFrequency2(radio);
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 f859 	bl	8001ba0 <SetRfFrequency2>
    HAL_Delay(2);
 8001aee:	2002      	movs	r0, #2
 8001af0:	f000 fbf8 	bl	80022e4 <HAL_Delay>

    SetBufferBaseAddresses(radio, 0, 0); // 127
 8001af4:	2200      	movs	r2, #0
 8001af6:	2100      	movs	r1, #0
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f000 f87d 	bl	8001bf8 <SetBufferBaseAddresses>
    HAL_Delay(1);
 8001afe:	2001      	movs	r0, #1
 8001b00:	f000 fbf0 	bl	80022e4 <HAL_Delay>
    //SetModulationParams(radio, 0x90, 0x0A, 0x01); // Spreading factor 9, 1600 BW (0x0A), CR 4/5. Sensitivity: -111
    SetModulationParams(radio, 0x80, 0x18, 0x01); // Spreading factor 8, 800 BW (0x0A), CR 4/5. Sensitivity: -115
 8001b04:	2301      	movs	r3, #1
 8001b06:	2218      	movs	r2, #24
 8001b08:	2180      	movs	r1, #128	; 0x80
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 f88e 	bl	8001c2c <SetModulationParams>
    HAL_Delay(1);
 8001b10:	2001      	movs	r0, #1
 8001b12:	f000 fbe7 	bl	80022e4 <HAL_Delay>

    WriteRegisterByte(radio, 0x925, 0x32); // must be used for SF9-12. Different for 5-8 (page 112)
 8001b16:	2232      	movs	r2, #50	; 0x32
 8001b18:	f640 1125 	movw	r1, #2341	; 0x925
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 f9b2 	bl	8001e86 <WriteRegisterByte>

    HAL_Delay(1);
 8001b22:	2001      	movs	r0, #1
 8001b24:	f000 fbde 	bl	80022e4 <HAL_Delay>
    SetPacketParamsLora(radio, 12, 0x80, 32, 0x20, 0x40); // 12 symbol preamble, implicit header, 32 byte payload, CRC enabled, Normal IQ
 8001b28:	2340      	movs	r3, #64	; 0x40
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	2320      	movs	r3, #32
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	2320      	movs	r3, #32
 8001b32:	2280      	movs	r2, #128	; 0x80
 8001b34:	210c      	movs	r1, #12
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 f899 	bl	8001c6e <SetPacketParamsLora>
    HAL_Delay(1);
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	f000 fbd1 	bl	80022e4 <HAL_Delay>
}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40020400 	.word	0x40020400

08001b50 <sxSetDio1Pin>:

void sxSetDio1Pin(sx1280_custom *radio, GPIO_TypeDef *Dio1PinBank, uint16_t Dio1Pin) {
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	80fb      	strh	r3, [r7, #6]
    radio->Dio1PinBank = Dio1PinBank;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	68ba      	ldr	r2, [r7, #8]
 8001b62:	60da      	str	r2, [r3, #12]
    radio->Dio1Pin = Dio1Pin;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	88fa      	ldrh	r2, [r7, #6]
 8001b68:	821a      	strh	r2, [r3, #16]
}
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <SetStandbyRC>:

void SetStandbyRC(sx1280_custom *radio) {
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b084      	sub	sp, #16
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[2];
    uint8_t loraTxBuf[] = { 0x80, 0x00 }; // Standby RC
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	723b      	strb	r3, [r7, #8]
 8001b82:	2300      	movs	r3, #0
 8001b84:	727b      	strb	r3, [r7, #9]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 2);
 8001b86:	f107 020c 	add.w	r2, r7, #12
 8001b8a:	f107 0108 	add.w	r1, r7, #8
 8001b8e:	2302      	movs	r3, #2
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ff50 	bl	8001a36 <sxSpiTransmitReceive>
}
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <SetRfFrequency2>:
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x86, 0xBD, 0x3B, 0x14 }; // SetRfFrequency
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 4);
}

void SetRfFrequency2(sx1280_custom *radio) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
    // 52e6/(2^18) multiples of
    // 2.46 = 2.46 * 10^9/(52e6/(2^18)) = 12401428 = 0xBD3B14
    // uint32_t rfFreq = 12401428;

    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x86, 0xBE, 0xC4, 0xEC }; // SetRfFrequency
 8001ba8:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <SetRfFrequency2+0x28>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	60bb      	str	r3, [r7, #8]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 4);
 8001bae:	f107 020c 	add.w	r2, r7, #12
 8001bb2:	f107 0108 	add.w	r1, r7, #8
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ff3c 	bl	8001a36 <sxSpiTransmitReceive>
}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	0800bf68 	.word	0x0800bf68

08001bcc <setPacketLora>:

void setPacketLora(sx1280_custom *radio) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[2];
    uint8_t loraTxBuf[] = { 0x8A, 0x01 }; // Set packet to lora
 8001bd4:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <setPacketLora+0x28>)
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	813b      	strh	r3, [r7, #8]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 2);
 8001bda:	f107 020c 	add.w	r2, r7, #12
 8001bde:	f107 0108 	add.w	r1, r7, #8
 8001be2:	2302      	movs	r3, #2
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff26 	bl	8001a36 <sxSpiTransmitReceive>
}
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	0800bf6c 	.word	0x0800bf6c

08001bf8 <SetBufferBaseAddresses>:
    // Set to -12 dBm = 0.06 mW
    uint8_t loraTxBuf[] = { 0x8E, power, rampTime };
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 3);
}

void SetBufferBaseAddresses(sx1280_custom *radio, uint8_t txBaseAddress, uint8_t rxBaseAddress) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	70fb      	strb	r3, [r7, #3]
 8001c04:	4613      	mov	r3, r2
 8001c06:	70bb      	strb	r3, [r7, #2]
    uint8_t loraRxBuf[3];
    uint8_t loraTxBuf[] = { 0x8F, txBaseAddress, rxBaseAddress };
 8001c08:	238f      	movs	r3, #143	; 0x8f
 8001c0a:	723b      	strb	r3, [r7, #8]
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	727b      	strb	r3, [r7, #9]
 8001c10:	78bb      	ldrb	r3, [r7, #2]
 8001c12:	72bb      	strb	r3, [r7, #10]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001c14:	f107 020c 	add.w	r2, r7, #12
 8001c18:	f107 0108 	add.w	r1, r7, #8
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ff09 	bl	8001a36 <sxSpiTransmitReceive>
}
 8001c24:	bf00      	nop
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <SetModulationParams>:

void SetModulationParams(sx1280_custom *radio, uint8_t modParam1, uint8_t modParam2,
        uint8_t modParam3) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	4608      	mov	r0, r1
 8001c36:	4611      	mov	r1, r2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	70fb      	strb	r3, [r7, #3]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	70bb      	strb	r3, [r7, #2]
 8001c42:	4613      	mov	r3, r2
 8001c44:	707b      	strb	r3, [r7, #1]
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x8B, modParam1, modParam2, modParam3 };
 8001c46:	238b      	movs	r3, #139	; 0x8b
 8001c48:	723b      	strb	r3, [r7, #8]
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	727b      	strb	r3, [r7, #9]
 8001c4e:	78bb      	ldrb	r3, [r7, #2]
 8001c50:	72bb      	strb	r3, [r7, #10]
 8001c52:	787b      	ldrb	r3, [r7, #1]
 8001c54:	72fb      	strb	r3, [r7, #11]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001c56:	f107 020c 	add.w	r2, r7, #12
 8001c5a:	f107 0108 	add.w	r1, r7, #8
 8001c5e:	2304      	movs	r3, #4
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff fee8 	bl	8001a36 <sxSpiTransmitReceive>
}
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <SetPacketParamsLora>:

void SetPacketParamsLora(sx1280_custom *radio, uint8_t param1, uint8_t param2, uint8_t param3,
        uint8_t param4, uint8_t param5) {
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b084      	sub	sp, #16
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	4608      	mov	r0, r1
 8001c78:	4611      	mov	r1, r2
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	70fb      	strb	r3, [r7, #3]
 8001c80:	460b      	mov	r3, r1
 8001c82:	70bb      	strb	r3, [r7, #2]
 8001c84:	4613      	mov	r3, r2
 8001c86:	707b      	strb	r3, [r7, #1]
    uint8_t loraTxBuf[] = { 0x8C, param1, param2, param3, param4, param5 };
 8001c88:	238c      	movs	r3, #140	; 0x8c
 8001c8a:	723b      	strb	r3, [r7, #8]
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	727b      	strb	r3, [r7, #9]
 8001c90:	78bb      	ldrb	r3, [r7, #2]
 8001c92:	72bb      	strb	r3, [r7, #10]
 8001c94:	787b      	ldrb	r3, [r7, #1]
 8001c96:	72fb      	strb	r3, [r7, #11]
 8001c98:	7e3b      	ldrb	r3, [r7, #24]
 8001c9a:	733b      	strb	r3, [r7, #12]
 8001c9c:	7f3b      	ldrb	r3, [r7, #28]
 8001c9e:	737b      	strb	r3, [r7, #13]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8001ca0:	f107 0308 	add.w	r3, r7, #8
 8001ca4:	2206      	movs	r2, #6
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff fe9b 	bl	80019e4 <sxSpiTransmit>
}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <ReadBuffer>:
    HAL_SPI_Transmit(radio->spiHandle, data, size, 1000);
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);

}

void ReadBuffer(sx1280_custom *radio, uint8_t offset, uint8_t size, uint8_t *data) {
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	72fb      	strb	r3, [r7, #11]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	72bb      	strb	r3, [r7, #10]
    uint8_t loraTxBuf[] = { 0x1B, offset, 0x00};
 8001cc8:	231b      	movs	r3, #27
 8001cca:	753b      	strb	r3, [r7, #20]
 8001ccc:	7afb      	ldrb	r3, [r7, #11]
 8001cce:	757b      	strb	r3, [r7, #21]
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	75bb      	strb	r3, [r7, #22]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6858      	ldr	r0, [r3, #4]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	891b      	ldrh	r3, [r3, #8]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f001 f840 	bl	8002d64 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(radio->spiHandle, loraTxBuf, sizeof(loraTxBuf), 1000);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	f107 0114 	add.w	r1, r7, #20
 8001cec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	f002 ffed 	bl	8004cd0 <HAL_SPI_Transmit>
    HAL_SPI_Receive(radio->spiHandle, data, size, 1000);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	7abb      	ldrb	r3, [r7, #10]
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	f003 f918 	bl	8004f38 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6858      	ldr	r0, [r3, #4]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	891b      	ldrh	r3, [r3, #8]
 8001d10:	2201      	movs	r2, #1
 8001d12:	4619      	mov	r1, r3
 8001d14:	f001 f826 	bl	8002d64 <HAL_GPIO_WritePin>
}
 8001d18:	bf00      	nop
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <SetDioIrqParams>:

void SetDioIrqParams(sx1280_custom *radio, uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask,
        uint16_t dio3Mask) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	4608      	mov	r0, r1
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4603      	mov	r3, r0
 8001d30:	817b      	strh	r3, [r7, #10]
 8001d32:	460b      	mov	r3, r1
 8001d34:	813b      	strh	r3, [r7, #8]
 8001d36:	4613      	mov	r3, r2
 8001d38:	80fb      	strh	r3, [r7, #6]
    uint8_t loraTxBuf[9];
    loraTxBuf[0] = 0x8D;
 8001d3a:	238d      	movs	r3, #141	; 0x8d
 8001d3c:	753b      	strb	r3, [r7, #20]
    loraTxBuf[1] = (uint8_t) ((irqMask >> 8) & 0x00FF);
 8001d3e:	897b      	ldrh	r3, [r7, #10]
 8001d40:	0a1b      	lsrs	r3, r3, #8
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	757b      	strb	r3, [r7, #21]
    loraTxBuf[2] = (uint8_t) (irqMask & 0x00FF);
 8001d48:	897b      	ldrh	r3, [r7, #10]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	75bb      	strb	r3, [r7, #22]
    loraTxBuf[3] = (uint8_t) ((dio1Mask >> 8) & 0x00FF);
 8001d4e:	893b      	ldrh	r3, [r7, #8]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	75fb      	strb	r3, [r7, #23]
    loraTxBuf[4] = (uint8_t) (dio1Mask & 0x00FF);
 8001d58:	893b      	ldrh	r3, [r7, #8]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	763b      	strb	r3, [r7, #24]
    loraTxBuf[5] = (uint8_t) ((dio2Mask >> 8) & 0x00FF);
 8001d5e:	88fb      	ldrh	r3, [r7, #6]
 8001d60:	0a1b      	lsrs	r3, r3, #8
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	767b      	strb	r3, [r7, #25]
    loraTxBuf[6] = (uint8_t) (dio2Mask & 0x00FF);
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	76bb      	strb	r3, [r7, #26]
    loraTxBuf[7] = (uint8_t) ((dio3Mask >> 8) & 0x00FF);
 8001d6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	76fb      	strb	r3, [r7, #27]
    loraTxBuf[8] = (uint8_t) (dio3Mask & 0x00FF);
 8001d78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	773b      	strb	r3, [r7, #28]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	2209      	movs	r2, #9
 8001d84:	4619      	mov	r1, r3
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f7ff fe2c 	bl	80019e4 <sxSpiTransmit>
}
 8001d8c:	bf00      	nop
 8001d8e:	3720      	adds	r7, #32
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <ClrIrqStatus>:

void ClrIrqStatus(sx1280_custom *radio, uint16_t irqMask) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
    uint8_t buf[3];
    buf[0] = 0X97;
 8001da0:	2397      	movs	r3, #151	; 0x97
 8001da2:	733b      	strb	r3, [r7, #12]
    buf[1] = (uint8_t) (((uint16_t) irqMask >> 8) & 0x00FF);
 8001da4:	887b      	ldrh	r3, [r7, #2]
 8001da6:	0a1b      	lsrs	r3, r3, #8
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) ((uint16_t) irqMask & 0x00FF);
 8001dae:	887b      	ldrh	r3, [r7, #2]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	73bb      	strb	r3, [r7, #14]
    sxSpiTransmit(radio, buf, sizeof(buf));
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	2203      	movs	r2, #3
 8001dba:	4619      	mov	r1, r3
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff fe11 	bl	80019e4 <sxSpiTransmit>
}
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <SetRx>:
    buf[2] = (uint8_t) (((uint16_t) periodBaseCount >> 8) & 0x00FF);
    buf[3] = (uint8_t) ((uint16_t) periodBaseCount & 0x00FF);
    sxSpiTransmit(radio, buf, sizeof(buf));
}

void SetRx(sx1280_custom *radio, uint8_t periodBase, uint16_t periodBaseCount) {
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b084      	sub	sp, #16
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	70fb      	strb	r3, [r7, #3]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	803b      	strh	r3, [r7, #0]
    uint8_t buf[4];
    buf[0] = 0X82;
 8001dda:	2382      	movs	r3, #130	; 0x82
 8001ddc:	733b      	strb	r3, [r7, #12]
    buf[1] = periodBase;
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) (((uint16_t) periodBaseCount >> 8) & 0x00FF);
 8001de2:	883b      	ldrh	r3, [r7, #0]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	73bb      	strb	r3, [r7, #14]
    buf[3] = (uint8_t) ((uint16_t) periodBaseCount & 0x00FF);
 8001dec:	883b      	ldrh	r3, [r7, #0]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, buf, sizeof(buf));
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	2204      	movs	r2, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff fdf2 	bl	80019e4 <sxSpiTransmit>
}
 8001e00:	bf00      	nop
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <GetPacketStatusLora>:

void GetPacketStatusLora(sx1280_custom *radio) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x1D, 0x00, 0x00, 0x00};
 8001e10:	231d      	movs	r3, #29
 8001e12:	723b      	strb	r3, [r7, #8]
 8001e14:	2300      	movs	r3, #0
 8001e16:	727b      	strb	r3, [r7, #9]
 8001e18:	2300      	movs	r3, #0
 8001e1a:	72bb      	strb	r3, [r7, #10]
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	72fb      	strb	r3, [r7, #11]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001e20:	f107 020c 	add.w	r2, r7, #12
 8001e24:	f107 0108 	add.w	r1, r7, #8
 8001e28:	2304      	movs	r3, #4
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff fe03 	bl	8001a36 <sxSpiTransmitReceive>

    radio->rssiSync = loraRxBuf[2];
 8001e30:	7bba      	ldrb	r2, [r7, #14]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    radio->rawSnr = loraRxBuf[3];
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	b25a      	sxtb	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    radio->rssi = -((float) radio->rssiSync)/2;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001e48:	ee07 3a90 	vmov	s15, r3
 8001e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e50:	eeb1 7a67 	vneg.f32	s14, s15
 8001e54:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001e58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    radio->snr = ((float) radio->rawSnr)/4;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8001e68:	ee07 3a90 	vmov	s15, r3
 8001e6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e70:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001e74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <WriteRegisterByte>:

void GetRxBufferStatus(sx1280_custom *radio) {

}

void WriteRegisterByte(sx1280_custom *radio, uint16_t address, uint8_t data) {
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	807b      	strh	r3, [r7, #2]
 8001e92:	4613      	mov	r3, r2
 8001e94:	707b      	strb	r3, [r7, #1]
    uint8_t loraTxBuf[4];
    loraTxBuf[0] = 0x18;
 8001e96:	2318      	movs	r3, #24
 8001e98:	733b      	strb	r3, [r7, #12]
    loraTxBuf[1] = (uint8_t) (((uint16_t) address >> 8) & 0x00FF);
 8001e9a:	887b      	ldrh	r3, [r7, #2]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	737b      	strb	r3, [r7, #13]
    loraTxBuf[2] = (uint8_t) ((uint16_t) address & 0x00FF);
 8001ea4:	887b      	ldrh	r3, [r7, #2]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	73bb      	strb	r3, [r7, #14]
    loraTxBuf[3] = data;
 8001eaa:	787b      	ldrb	r3, [r7, #1]
 8001eac:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8001eae:	f107 030c 	add.w	r3, r7, #12
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff fd94 	bl	80019e4 <sxSpiTransmit>
}
 8001ebc:	bf00      	nop
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ecc:	4a14      	ldr	r2, [pc, #80]	; (8001f20 <_sbrk+0x5c>)
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <_sbrk+0x60>)
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed8:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <_sbrk+0x64>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d102      	bne.n	8001ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <_sbrk+0x64>)
 8001ee2:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <_sbrk+0x68>)
 8001ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d207      	bcs.n	8001f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef4:	f007 ff4e 	bl	8009d94 <__errno>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	230c      	movs	r3, #12
 8001efc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295
 8001f02:	e009      	b.n	8001f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f04:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <_sbrk+0x64>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f0a:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <_sbrk+0x64>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	4a05      	ldr	r2, [pc, #20]	; (8001f28 <_sbrk+0x64>)
 8001f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f16:	68fb      	ldr	r3, [r7, #12]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20020000 	.word	0x20020000
 8001f24:	00000400 	.word	0x00000400
 8001f28:	20000374 	.word	0x20000374
 8001f2c:	20001dd8 	.word	0x20001dd8

08001f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <SystemInit+0x28>)
 8001f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3a:	4a07      	ldr	r2, [pc, #28]	; (8001f58 <SystemInit+0x28>)
 8001f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <SystemInit+0x28>)
 8001f46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f4a:	609a      	str	r2, [r3, #8]
#endif
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000ed00 	.word	0xe000ed00
 8001f5c:	00000000 	.word	0x00000000

08001f60 <decode_TLM>:
    else {
        enc->debug_ranging = dec->debug;
    }
}

void decode_TLM(TLM_encoded *enc, TLM_decoded *dec) {
 8001f60:	b590      	push	{r4, r7, lr}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
    dec->packet_type = enc->packet_state_bits & 1;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	701a      	strb	r2, [r3, #0]
    dec->flight_state = (enc->packet_state_bits >> 1) & 0b00011111;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	085b      	lsrs	r3, r3, #1
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	f003 031f 	and.w	r3, r3, #31
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	705a      	strb	r2, [r3, #1]
    dec->is_playing_music = (enc->packet_state_bits >> 6) & 1;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	099b      	lsrs	r3, r3, #6
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	709a      	strb	r2, [r3, #2]
    dec->is_data_logging = (enc->packet_state_bits >> 7) & 1;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	09db      	lsrs	r3, r3, #7
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	70da      	strb	r2, [r3, #3]

    dec->pin_states = (enc->pin_states_servo & 0b00111111);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	785b      	ldrb	r3, [r3, #1]
 8001fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	711a      	strb	r2, [r3, #4]
    dec->servo_state = (enc->pin_states_servo >> 6) & 0b00000011;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	785b      	ldrb	r3, [r3, #1]
 8001fba:	099b      	lsrs	r3, r3, #6
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	715a      	strb	r2, [r3, #5]

    dec->systick = (enc->systick[0] << 16) | (enc->systick[1] << 8) | (enc->systick[2]);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	789b      	ldrb	r3, [r3, #2]
 8001fc6:	041a      	lsls	r2, r3, #16
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	78db      	ldrb	r3, [r3, #3]
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	7912      	ldrb	r2, [r2, #4]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	609a      	str	r2, [r3, #8]

    dec->vbat = ((((uint16_t) enc->vbat_MSB) << 2) | ((uint16_t) enc->padding_vbat_LSB & 0b00000011 ) )*0.01;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	795b      	ldrb	r3, [r3, #5]
 8001fe0:	009a      	lsls	r2, r3, #2
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	799b      	ldrb	r3, [r3, #6]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	4313      	orrs	r3, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe faa1 	bl	8000534 <__aeabi_i2d>
 8001ff2:	a36c      	add	r3, pc, #432	; (adr r3, 80021a4 <decode_TLM+0x244>)
 8001ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff8:	f7fe fb06 	bl	8000608 <__aeabi_dmul>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	460c      	mov	r4, r1
 8002000:	4618      	mov	r0, r3
 8002002:	4621      	mov	r1, r4
 8002004:	f7fe fdd8 	bl	8000bb8 <__aeabi_d2f>
 8002008:	4602      	mov	r2, r0
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	60da      	str	r2, [r3, #12]

    dec->orientation_quat[0] = ((float) enc->orientation_quat[0])/127;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8002014:	ee07 3a90 	vmov	s15, r3
 8002018:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800201c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8002198 <decode_TLM+0x238>
 8002020:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	edc3 7a04 	vstr	s15, [r3, #16]
    dec->orientation_quat[1] = ((float) enc->orientation_quat[1])/127;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002030:	ee07 3a90 	vmov	s15, r3
 8002034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002038:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002198 <decode_TLM+0x238>
 800203c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	edc3 7a05 	vstr	s15, [r3, #20]
    dec->orientation_quat[2] = ((float) enc->orientation_quat[2])/127;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800204c:	ee07 3a90 	vmov	s15, r3
 8002050:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002054:	eddf 6a50 	vldr	s13, [pc, #320]	; 8002198 <decode_TLM+0x238>
 8002058:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	edc3 7a06 	vstr	s15, [r3, #24]
    dec->orientation_quat[3] = ((float) enc->orientation_quat[3])/127;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002068:	ee07 3a90 	vmov	s15, r3
 800206c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002070:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002198 <decode_TLM+0x238>
 8002074:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	edc3 7a07 	vstr	s15, [r3, #28]

    for (int i = 0; i < 3; i++) {
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	e01e      	b.n	80020c2 <decode_TLM+0x162>
        dec->acc[i] = enc->acc[i];
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	3304      	adds	r3, #4
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4413      	add	r3, r2
 800208e:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8002092:	b219      	sxth	r1, r3
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	3210      	adds	r2, #16
 800209a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        dec->gyro[i] = enc->gyro[i];
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	3308      	adds	r3, #8
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	4413      	add	r3, r2
 80020a8:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 80020ac:	b219      	sxth	r1, r3
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	3310      	adds	r3, #16
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4413      	add	r3, r2
 80020b8:	460a      	mov	r2, r1
 80020ba:	80da      	strh	r2, [r3, #6]
    for (int i = 0; i < 3; i++) {
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	3301      	adds	r3, #1
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	dddd      	ble.n	8002084 <decode_TLM+0x124>
    }

    dec->baro = (float) (enc->baro + 50000);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f8b3 3017 	ldrh.w	r3, [r3, #23]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 80020d4:	3350      	adds	r3, #80	; 0x50
 80020d6:	ee07 3a90 	vmov	s15, r3
 80020da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    dec->temp = ((float) enc->temp)/4;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	7e5b      	ldrb	r3, [r3, #25]
 80020e8:	ee07 3a90 	vmov	s15, r3
 80020ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020f0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80020f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    dec->altitude = ((float) enc->altitude) * 0.0625 - 48;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	8b5b      	ldrh	r3, [r3, #26]
 8002102:	b29b      	uxth	r3, r3
 8002104:	ee07 3a90 	vmov	s15, r3
 8002108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800210c:	ee17 0a90 	vmov	r0, s15
 8002110:	f7fe fa22 	bl	8000558 <__aeabi_f2d>
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	4b20      	ldr	r3, [pc, #128]	; (800219c <decode_TLM+0x23c>)
 800211a:	f7fe fa75 	bl	8000608 <__aeabi_dmul>
 800211e:	4603      	mov	r3, r0
 8002120:	460c      	mov	r4, r1
 8002122:	4618      	mov	r0, r3
 8002124:	4621      	mov	r1, r4
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <decode_TLM+0x240>)
 800212c:	f7fe f8b4 	bl	8000298 <__aeabi_dsub>
 8002130:	4603      	mov	r3, r0
 8002132:	460c      	mov	r4, r1
 8002134:	4618      	mov	r0, r3
 8002136:	4621      	mov	r1, r4
 8002138:	f7fe fd3e 	bl	8000bb8 <__aeabi_d2f>
 800213c:	4602      	mov	r2, r0
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	635a      	str	r2, [r3, #52]	; 0x34

    dec->vertical_velocity = (float) (enc->vertical_velocity - 80);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	7f1b      	ldrb	r3, [r3, #28]
 8002146:	3b50      	subs	r3, #80	; 0x50
 8002148:	ee07 3a90 	vmov	s15, r3
 800214c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    if (dec->packet_type == 1) {
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d10f      	bne.n	800217e <decode_TLM+0x21e>
        dec->ranging = ((float) enc->debug_ranging) * 0.25;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f8b3 301d 	ldrh.w	r3, [r3, #29]
 8002164:	b29b      	uxth	r3, r3
 8002166:	ee07 3a90 	vmov	s15, r3
 800216a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800216e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002172:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    }
    else {
        dec->debug = (uint16_t) enc->debug_ranging;
    }
}
 800217c:	e005      	b.n	800218a <decode_TLM+0x22a>
        dec->debug = (uint16_t) enc->debug_ranging;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f8b3 301d 	ldrh.w	r3, [r3, #29]
 8002184:	b29a      	uxth	r2, r3
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 800218a:	bf00      	nop
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	bd90      	pop	{r4, r7, pc}
 8002192:	bf00      	nop
 8002194:	f3af 8000 	nop.w
 8002198:	42fe0000 	.word	0x42fe0000
 800219c:	3fb00000 	.word	0x3fb00000
 80021a0:	40480000 	.word	0x40480000
 80021a4:	47ae147b 	.word	0x47ae147b
 80021a8:	3f847ae1 	.word	0x3f847ae1

080021ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80021b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80021b2:	e003      	b.n	80021bc <LoopCopyDataInit>

080021b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80021b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80021b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80021ba:	3104      	adds	r1, #4

080021bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80021bc:	480b      	ldr	r0, [pc, #44]	; (80021ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80021be:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80021c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80021c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80021c4:	d3f6      	bcc.n	80021b4 <CopyDataInit>
  ldr  r2, =_sbss
 80021c6:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80021c8:	e002      	b.n	80021d0 <LoopFillZerobss>

080021ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80021ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80021cc:	f842 3b04 	str.w	r3, [r2], #4

080021d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80021d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80021d4:	d3f9      	bcc.n	80021ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021d6:	f7ff feab 	bl	8001f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021da:	f007 fde1 	bl	8009da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021de:	f7fe ff6b 	bl	80010b8 <main>
  bx  lr    
 80021e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021e4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80021e8:	0800c2a8 	.word	0x0800c2a8
  ldr  r0, =_sdata
 80021ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80021f0:	20000358 	.word	0x20000358
  ldr  r2, =_sbss
 80021f4:	20000358 	.word	0x20000358
  ldr  r3, = _ebss
 80021f8:	20001dd8 	.word	0x20001dd8

080021fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021fc:	e7fe      	b.n	80021fc <ADC_IRQHandler>
	...

08002200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002204:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <HAL_Init+0x40>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0d      	ldr	r2, [pc, #52]	; (8002240 <HAL_Init+0x40>)
 800220a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800220e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_Init+0x40>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <HAL_Init+0x40>)
 8002216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800221a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_Init+0x40>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a07      	ldr	r2, [pc, #28]	; (8002240 <HAL_Init+0x40>)
 8002222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002228:	2003      	movs	r0, #3
 800222a:	f000 fbbf 	bl	80029ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800222e:	2000      	movs	r0, #0
 8002230:	f000 f808 	bl	8002244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002234:	f7ff f9e6 	bl	8001604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40023c00 	.word	0x40023c00

08002244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <HAL_InitTick+0x54>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_InitTick+0x58>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800225a:	fbb3 f3f1 	udiv	r3, r3, r1
 800225e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fbd7 	bl	8002a16 <HAL_SYSTICK_Config>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e00e      	b.n	8002290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b0f      	cmp	r3, #15
 8002276:	d80a      	bhi.n	800228e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002278:	2200      	movs	r2, #0
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	f04f 30ff 	mov.w	r0, #4294967295
 8002280:	f000 fb9f 	bl	80029c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002284:	4a06      	ldr	r2, [pc, #24]	; (80022a0 <HAL_InitTick+0x5c>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	e000      	b.n	8002290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20000000 	.word	0x20000000
 800229c:	20000008 	.word	0x20000008
 80022a0:	20000004 	.word	0x20000004

080022a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_IncTick+0x20>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_IncTick+0x24>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <HAL_IncTick+0x24>)
 80022b6:	6013      	str	r3, [r2, #0]
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	20000008 	.word	0x20000008
 80022c8:	200004f8 	.word	0x200004f8

080022cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return uwTick;
 80022d0:	4b03      	ldr	r3, [pc, #12]	; (80022e0 <HAL_GetTick+0x14>)
 80022d2:	681b      	ldr	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	200004f8 	.word	0x200004f8

080022e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022ec:	f7ff ffee 	bl	80022cc <HAL_GetTick>
 80022f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fc:	d005      	beq.n	800230a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_Delay+0x40>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4413      	add	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800230a:	bf00      	nop
 800230c:	f7ff ffde 	bl	80022cc <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	429a      	cmp	r2, r3
 800231a:	d8f7      	bhi.n	800230c <HAL_Delay+0x28>
  {
  }
}
 800231c:	bf00      	nop
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20000008 	.word	0x20000008

08002328 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e033      	b.n	80023a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	2b00      	cmp	r3, #0
 8002344:	d109      	bne.n	800235a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff f984 	bl	8001654 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f003 0310 	and.w	r3, r3, #16
 8002362:	2b00      	cmp	r3, #0
 8002364:	d118      	bne.n	8002398 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800236e:	f023 0302 	bic.w	r3, r3, #2
 8002372:	f043 0202 	orr.w	r2, r3, #2
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f94a 	bl	8002614 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f023 0303 	bic.w	r3, r3, #3
 800238e:	f043 0201 	orr.w	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	641a      	str	r2, [r3, #64]	; 0x40
 8002396:	e001      	b.n	800239c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x1c>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e113      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x244>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b09      	cmp	r3, #9
 80023da:	d925      	bls.n	8002428 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68d9      	ldr	r1, [r3, #12]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	4613      	mov	r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4413      	add	r3, r2
 80023f0:	3b1e      	subs	r3, #30
 80023f2:	2207      	movs	r2, #7
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43da      	mvns	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	400a      	ands	r2, r1
 8002400:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68d9      	ldr	r1, [r3, #12]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	b29b      	uxth	r3, r3
 8002412:	4618      	mov	r0, r3
 8002414:	4603      	mov	r3, r0
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	4403      	add	r3, r0
 800241a:	3b1e      	subs	r3, #30
 800241c:	409a      	lsls	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	60da      	str	r2, [r3, #12]
 8002426:	e022      	b.n	800246e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6919      	ldr	r1, [r3, #16]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	4613      	mov	r3, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4413      	add	r3, r2
 800243c:	2207      	movs	r2, #7
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43da      	mvns	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	400a      	ands	r2, r1
 800244a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6919      	ldr	r1, [r3, #16]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	b29b      	uxth	r3, r3
 800245c:	4618      	mov	r0, r3
 800245e:	4603      	mov	r3, r0
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4403      	add	r3, r0
 8002464:	409a      	lsls	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b06      	cmp	r3, #6
 8002474:	d824      	bhi.n	80024c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	3b05      	subs	r3, #5
 8002488:	221f      	movs	r2, #31
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43da      	mvns	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	400a      	ands	r2, r1
 8002496:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	4618      	mov	r0, r3
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	3b05      	subs	r3, #5
 80024b2:	fa00 f203 	lsl.w	r2, r0, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	635a      	str	r2, [r3, #52]	; 0x34
 80024be:	e04c      	b.n	800255a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b0c      	cmp	r3, #12
 80024c6:	d824      	bhi.n	8002512 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	3b23      	subs	r3, #35	; 0x23
 80024da:	221f      	movs	r2, #31
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43da      	mvns	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	400a      	ands	r2, r1
 80024e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	3b23      	subs	r3, #35	; 0x23
 8002504:	fa00 f203 	lsl.w	r2, r0, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	631a      	str	r2, [r3, #48]	; 0x30
 8002510:	e023      	b.n	800255a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	3b41      	subs	r3, #65	; 0x41
 8002524:	221f      	movs	r2, #31
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43da      	mvns	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	400a      	ands	r2, r1
 8002532:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	4618      	mov	r0, r3
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	3b41      	subs	r3, #65	; 0x41
 800254e:	fa00 f203 	lsl.w	r2, r0, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800255a:	4b29      	ldr	r3, [pc, #164]	; (8002600 <HAL_ADC_ConfigChannel+0x250>)
 800255c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a28      	ldr	r2, [pc, #160]	; (8002604 <HAL_ADC_ConfigChannel+0x254>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d10f      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x1d8>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b12      	cmp	r3, #18
 800256e:	d10b      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a1d      	ldr	r2, [pc, #116]	; (8002604 <HAL_ADC_ConfigChannel+0x254>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d12b      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x23a>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a1c      	ldr	r2, [pc, #112]	; (8002608 <HAL_ADC_ConfigChannel+0x258>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d003      	beq.n	80025a4 <HAL_ADC_ConfigChannel+0x1f4>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b11      	cmp	r3, #17
 80025a2:	d122      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a11      	ldr	r2, [pc, #68]	; (8002608 <HAL_ADC_ConfigChannel+0x258>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d111      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025c6:	4b11      	ldr	r3, [pc, #68]	; (800260c <HAL_ADC_ConfigChannel+0x25c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a11      	ldr	r2, [pc, #68]	; (8002610 <HAL_ADC_ConfigChannel+0x260>)
 80025cc:	fba2 2303 	umull	r2, r3, r2, r3
 80025d0:	0c9a      	lsrs	r2, r3, #18
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025dc:	e002      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	3b01      	subs	r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f9      	bne.n	80025de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	40012300 	.word	0x40012300
 8002604:	40012000 	.word	0x40012000
 8002608:	10000012 	.word	0x10000012
 800260c:	20000000 	.word	0x20000000
 8002610:	431bde83 	.word	0x431bde83

08002614 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800261c:	4b79      	ldr	r3, [pc, #484]	; (8002804 <ADC_Init+0x1f0>)
 800261e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	431a      	orrs	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002648:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6859      	ldr	r1, [r3, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	021a      	lsls	r2, r3, #8
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800266c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6859      	ldr	r1, [r3, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800268e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6899      	ldr	r1, [r3, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a6:	4a58      	ldr	r2, [pc, #352]	; (8002808 <ADC_Init+0x1f4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d022      	beq.n	80026f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6899      	ldr	r1, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6899      	ldr	r1, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	e00f      	b.n	8002712 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002700:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002710:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0202 	bic.w	r2, r2, #2
 8002720:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6899      	ldr	r1, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	7e1b      	ldrb	r3, [r3, #24]
 800272c:	005a      	lsls	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d01b      	beq.n	8002778 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800274e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800275e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6859      	ldr	r1, [r3, #4]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	3b01      	subs	r3, #1
 800276c:	035a      	lsls	r2, r3, #13
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	e007      	b.n	8002788 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002786:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	051a      	lsls	r2, r3, #20
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6899      	ldr	r1, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027ca:	025a      	lsls	r2, r3, #9
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6899      	ldr	r1, [r3, #8]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	029a      	lsls	r2, r3, #10
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	609a      	str	r2, [r3, #8]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	40012300 	.word	0x40012300
 8002808:	0f000001 	.word	0x0f000001

0800280c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002828:	4013      	ands	r3, r2
 800282a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800283c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283e:	4a04      	ldr	r2, [pc, #16]	; (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	60d3      	str	r3, [r2, #12]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <__NVIC_GetPriorityGrouping+0x18>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	0a1b      	lsrs	r3, r3, #8
 800285e:	f003 0307 	and.w	r3, r3, #7
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	2b00      	cmp	r3, #0
 8002880:	db0b      	blt.n	800289a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	4907      	ldr	r1, [pc, #28]	; (80028a8 <__NVIC_EnableIRQ+0x38>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	2001      	movs	r0, #1
 8002892:	fa00 f202 	lsl.w	r2, r0, r2
 8002896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	e000e100 	.word	0xe000e100

080028ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	6039      	str	r1, [r7, #0]
 80028b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	db0a      	blt.n	80028d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	490c      	ldr	r1, [pc, #48]	; (80028f8 <__NVIC_SetPriority+0x4c>)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	0112      	lsls	r2, r2, #4
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	440b      	add	r3, r1
 80028d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d4:	e00a      	b.n	80028ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	4908      	ldr	r1, [pc, #32]	; (80028fc <__NVIC_SetPriority+0x50>)
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	3b04      	subs	r3, #4
 80028e4:	0112      	lsls	r2, r2, #4
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	440b      	add	r3, r1
 80028ea:	761a      	strb	r2, [r3, #24]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000e100 	.word	0xe000e100
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	; 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f1c3 0307 	rsb	r3, r3, #7
 800291a:	2b04      	cmp	r3, #4
 800291c:	bf28      	it	cs
 800291e:	2304      	movcs	r3, #4
 8002920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3304      	adds	r3, #4
 8002926:	2b06      	cmp	r3, #6
 8002928:	d902      	bls.n	8002930 <NVIC_EncodePriority+0x30>
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3b03      	subs	r3, #3
 800292e:	e000      	b.n	8002932 <NVIC_EncodePriority+0x32>
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	f04f 32ff 	mov.w	r2, #4294967295
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43da      	mvns	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	401a      	ands	r2, r3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002948:	f04f 31ff 	mov.w	r1, #4294967295
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	fa01 f303 	lsl.w	r3, r1, r3
 8002952:	43d9      	mvns	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002958:	4313      	orrs	r3, r2
         );
}
 800295a:	4618      	mov	r0, r3
 800295c:	3724      	adds	r7, #36	; 0x24
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3b01      	subs	r3, #1
 8002974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002978:	d301      	bcc.n	800297e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800297a:	2301      	movs	r3, #1
 800297c:	e00f      	b.n	800299e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800297e:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <SysTick_Config+0x40>)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3b01      	subs	r3, #1
 8002984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002986:	210f      	movs	r1, #15
 8002988:	f04f 30ff 	mov.w	r0, #4294967295
 800298c:	f7ff ff8e 	bl	80028ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <SysTick_Config+0x40>)
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002996:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <SysTick_Config+0x40>)
 8002998:	2207      	movs	r2, #7
 800299a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	e000e010 	.word	0xe000e010

080029ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff ff29 	bl	800280c <__NVIC_SetPriorityGrouping>
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b086      	sub	sp, #24
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d4:	f7ff ff3e 	bl	8002854 <__NVIC_GetPriorityGrouping>
 80029d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	6978      	ldr	r0, [r7, #20]
 80029e0:	f7ff ff8e 	bl	8002900 <NVIC_EncodePriority>
 80029e4:	4602      	mov	r2, r0
 80029e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ea:	4611      	mov	r1, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff5d 	bl	80028ac <__NVIC_SetPriority>
}
 80029f2:	bf00      	nop
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff31 	bl	8002870 <__NVIC_EnableIRQ>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff ffa2 	bl	8002968 <SysTick_Config>
 8002a24:	4603      	mov	r3, r0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b089      	sub	sp, #36	; 0x24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	e159      	b.n	8002d00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	f040 8148 	bne.w	8002cfa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d00b      	beq.n	8002a8a <HAL_GPIO_Init+0x5a>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d007      	beq.n	8002a8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a7e:	2b11      	cmp	r3, #17
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b12      	cmp	r3, #18
 8002a88:	d130      	bne.n	8002aec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	2203      	movs	r2, #3
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	091b      	lsrs	r3, r3, #4
 8002ad6:	f003 0201 	and.w	r2, r3, #1
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	2203      	movs	r2, #3
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0xfc>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b12      	cmp	r3, #18
 8002b2a:	d123      	bne.n	8002b74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	08da      	lsrs	r2, r3, #3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3208      	adds	r2, #8
 8002b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	220f      	movs	r2, #15
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	08da      	lsrs	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3208      	adds	r2, #8
 8002b6e:	69b9      	ldr	r1, [r7, #24]
 8002b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	2203      	movs	r2, #3
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0203 	and.w	r2, r3, #3
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 80a2 	beq.w	8002cfa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	4b56      	ldr	r3, [pc, #344]	; (8002d14 <HAL_GPIO_Init+0x2e4>)
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	4a55      	ldr	r2, [pc, #340]	; (8002d14 <HAL_GPIO_Init+0x2e4>)
 8002bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc6:	4b53      	ldr	r3, [pc, #332]	; (8002d14 <HAL_GPIO_Init+0x2e4>)
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bd2:	4a51      	ldr	r2, [pc, #324]	; (8002d18 <HAL_GPIO_Init+0x2e8>)
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	089b      	lsrs	r3, r3, #2
 8002bd8:	3302      	adds	r3, #2
 8002bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	220f      	movs	r2, #15
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a48      	ldr	r2, [pc, #288]	; (8002d1c <HAL_GPIO_Init+0x2ec>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d019      	beq.n	8002c32 <HAL_GPIO_Init+0x202>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a47      	ldr	r2, [pc, #284]	; (8002d20 <HAL_GPIO_Init+0x2f0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d013      	beq.n	8002c2e <HAL_GPIO_Init+0x1fe>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a46      	ldr	r2, [pc, #280]	; (8002d24 <HAL_GPIO_Init+0x2f4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00d      	beq.n	8002c2a <HAL_GPIO_Init+0x1fa>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a45      	ldr	r2, [pc, #276]	; (8002d28 <HAL_GPIO_Init+0x2f8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d007      	beq.n	8002c26 <HAL_GPIO_Init+0x1f6>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a44      	ldr	r2, [pc, #272]	; (8002d2c <HAL_GPIO_Init+0x2fc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d101      	bne.n	8002c22 <HAL_GPIO_Init+0x1f2>
 8002c1e:	2304      	movs	r3, #4
 8002c20:	e008      	b.n	8002c34 <HAL_GPIO_Init+0x204>
 8002c22:	2307      	movs	r3, #7
 8002c24:	e006      	b.n	8002c34 <HAL_GPIO_Init+0x204>
 8002c26:	2303      	movs	r3, #3
 8002c28:	e004      	b.n	8002c34 <HAL_GPIO_Init+0x204>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e002      	b.n	8002c34 <HAL_GPIO_Init+0x204>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <HAL_GPIO_Init+0x204>
 8002c32:	2300      	movs	r3, #0
 8002c34:	69fa      	ldr	r2, [r7, #28]
 8002c36:	f002 0203 	and.w	r2, r2, #3
 8002c3a:	0092      	lsls	r2, r2, #2
 8002c3c:	4093      	lsls	r3, r2
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c44:	4934      	ldr	r1, [pc, #208]	; (8002d18 <HAL_GPIO_Init+0x2e8>)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	089b      	lsrs	r3, r3, #2
 8002c4a:	3302      	adds	r3, #2
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c52:	4b37      	ldr	r3, [pc, #220]	; (8002d30 <HAL_GPIO_Init+0x300>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c76:	4a2e      	ldr	r2, [pc, #184]	; (8002d30 <HAL_GPIO_Init+0x300>)
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c7c:	4b2c      	ldr	r3, [pc, #176]	; (8002d30 <HAL_GPIO_Init+0x300>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ca0:	4a23      	ldr	r2, [pc, #140]	; (8002d30 <HAL_GPIO_Init+0x300>)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ca6:	4b22      	ldr	r3, [pc, #136]	; (8002d30 <HAL_GPIO_Init+0x300>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cca:	4a19      	ldr	r2, [pc, #100]	; (8002d30 <HAL_GPIO_Init+0x300>)
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cd0:	4b17      	ldr	r3, [pc, #92]	; (8002d30 <HAL_GPIO_Init+0x300>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cf4:	4a0e      	ldr	r2, [pc, #56]	; (8002d30 <HAL_GPIO_Init+0x300>)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	61fb      	str	r3, [r7, #28]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	2b0f      	cmp	r3, #15
 8002d04:	f67f aea2 	bls.w	8002a4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d08:	bf00      	nop
 8002d0a:	3724      	adds	r7, #36	; 0x24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	40023800 	.word	0x40023800
 8002d18:	40013800 	.word	0x40013800
 8002d1c:	40020000 	.word	0x40020000
 8002d20:	40020400 	.word	0x40020400
 8002d24:	40020800 	.word	0x40020800
 8002d28:	40020c00 	.word	0x40020c00
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	40013c00 	.word	0x40013c00

08002d34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	887b      	ldrh	r3, [r7, #2]
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	73fb      	strb	r3, [r7, #15]
 8002d50:	e001      	b.n	8002d56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d52:	2300      	movs	r3, #0
 8002d54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	807b      	strh	r3, [r7, #2]
 8002d70:	4613      	mov	r3, r2
 8002d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d74:	787b      	ldrb	r3, [r7, #1]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d7a:	887a      	ldrh	r2, [r7, #2]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d80:	e003      	b.n	8002d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d82:	887b      	ldrh	r3, [r7, #2]
 8002d84:	041a      	lsls	r2, r3, #16
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	619a      	str	r2, [r3, #24]
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	887b      	ldrh	r3, [r7, #2]
 8002da8:	401a      	ands	r2, r3
 8002daa:	887b      	ldrh	r3, [r7, #2]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d104      	bne.n	8002dba <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002db0:	887b      	ldrh	r3, [r7, #2]
 8002db2:	041a      	lsls	r2, r3, #16
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002db8:	e002      	b.n	8002dc0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002dba:	887a      	ldrh	r2, [r7, #2]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	619a      	str	r2, [r3, #24]
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e11f      	b.n	800301e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fe fc72 	bl	80016dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2224      	movs	r2, #36	; 0x24
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0201 	bic.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e30:	f001 fec2 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 8002e34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	4a7b      	ldr	r2, [pc, #492]	; (8003028 <HAL_I2C_Init+0x25c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d807      	bhi.n	8002e50 <HAL_I2C_Init+0x84>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4a7a      	ldr	r2, [pc, #488]	; (800302c <HAL_I2C_Init+0x260>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	bf94      	ite	ls
 8002e48:	2301      	movls	r3, #1
 8002e4a:	2300      	movhi	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	e006      	b.n	8002e5e <HAL_I2C_Init+0x92>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4a77      	ldr	r2, [pc, #476]	; (8003030 <HAL_I2C_Init+0x264>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	bf94      	ite	ls
 8002e58:	2301      	movls	r3, #1
 8002e5a:	2300      	movhi	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e0db      	b.n	800301e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4a72      	ldr	r2, [pc, #456]	; (8003034 <HAL_I2C_Init+0x268>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	0c9b      	lsrs	r3, r3, #18
 8002e70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	4a64      	ldr	r2, [pc, #400]	; (8003028 <HAL_I2C_Init+0x25c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d802      	bhi.n	8002ea0 <HAL_I2C_Init+0xd4>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	e009      	b.n	8002eb4 <HAL_I2C_Init+0xe8>
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	4a63      	ldr	r2, [pc, #396]	; (8003038 <HAL_I2C_Init+0x26c>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	099b      	lsrs	r3, r3, #6
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ec6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	4956      	ldr	r1, [pc, #344]	; (8003028 <HAL_I2C_Init+0x25c>)
 8002ed0:	428b      	cmp	r3, r1
 8002ed2:	d80d      	bhi.n	8002ef0 <HAL_I2C_Init+0x124>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1e59      	subs	r1, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	bf38      	it	cc
 8002eec:	2304      	movcc	r3, #4
 8002eee:	e04f      	b.n	8002f90 <HAL_I2C_Init+0x1c4>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d111      	bne.n	8002f1c <HAL_I2C_Init+0x150>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1e58      	subs	r0, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	440b      	add	r3, r1
 8002f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e012      	b.n	8002f42 <HAL_I2C_Init+0x176>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1e58      	subs	r0, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	0099      	lsls	r1, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f32:	3301      	adds	r3, #1
 8002f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Init+0x17e>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e022      	b.n	8002f90 <HAL_I2C_Init+0x1c4>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10e      	bne.n	8002f70 <HAL_I2C_Init+0x1a4>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1e58      	subs	r0, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6859      	ldr	r1, [r3, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	440b      	add	r3, r1
 8002f60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f6e:	e00f      	b.n	8002f90 <HAL_I2C_Init+0x1c4>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1e58      	subs	r0, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6859      	ldr	r1, [r3, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	0099      	lsls	r1, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f86:	3301      	adds	r3, #1
 8002f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	6809      	ldr	r1, [r1, #0]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69da      	ldr	r2, [r3, #28]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6911      	ldr	r1, [r2, #16]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68d2      	ldr	r2, [r2, #12]
 8002fca:	4311      	orrs	r1, r2
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	000186a0 	.word	0x000186a0
 800302c:	001e847f 	.word	0x001e847f
 8003030:	003d08ff 	.word	0x003d08ff
 8003034:	431bde83 	.word	0x431bde83
 8003038:	10624dd3 	.word	0x10624dd3

0800303c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800303c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800303e:	b08f      	sub	sp, #60	; 0x3c
 8003040:	af0a      	add	r7, sp, #40	; 0x28
 8003042:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e10f      	b.n	800326e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d106      	bne.n	800306e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f006 fba1 	bl	80097b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2203      	movs	r2, #3
 8003072:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307e:	2b00      	cmp	r3, #0
 8003080:	d102      	bne.n	8003088 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f003 fb5a 	bl	8006746 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	687e      	ldr	r6, [r7, #4]
 800309a:	466d      	mov	r5, sp
 800309c:	f106 0410 	add.w	r4, r6, #16
 80030a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80030b0:	1d33      	adds	r3, r6, #4
 80030b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030b4:	6838      	ldr	r0, [r7, #0]
 80030b6:	f003 fa31 	bl	800651c <USB_CoreInit>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0d0      	b.n	800326e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2100      	movs	r1, #0
 80030d2:	4618      	mov	r0, r3
 80030d4:	f003 fb48 	bl	8006768 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030d8:	2300      	movs	r3, #0
 80030da:	73fb      	strb	r3, [r7, #15]
 80030dc:	e04a      	b.n	8003174 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030de:	7bfa      	ldrb	r2, [r7, #15]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	333d      	adds	r3, #61	; 0x3d
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030f2:	7bfa      	ldrb	r2, [r7, #15]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	333c      	adds	r3, #60	; 0x3c
 8003102:	7bfa      	ldrb	r2, [r7, #15]
 8003104:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003106:	7bfa      	ldrb	r2, [r7, #15]
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	b298      	uxth	r0, r3
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	3342      	adds	r3, #66	; 0x42
 800311a:	4602      	mov	r2, r0
 800311c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800311e:	7bfa      	ldrb	r2, [r7, #15]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	1a9b      	subs	r3, r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	333f      	adds	r3, #63	; 0x3f
 800312e:	2200      	movs	r2, #0
 8003130:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003132:	7bfa      	ldrb	r2, [r7, #15]
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	1a9b      	subs	r3, r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	3344      	adds	r3, #68	; 0x44
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003146:	7bfa      	ldrb	r2, [r7, #15]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	3348      	adds	r3, #72	; 0x48
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800315a:	7bfa      	ldrb	r2, [r7, #15]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	3350      	adds	r3, #80	; 0x50
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	3301      	adds	r3, #1
 8003172:	73fb      	strb	r3, [r7, #15]
 8003174:	7bfa      	ldrb	r2, [r7, #15]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	429a      	cmp	r2, r3
 800317c:	d3af      	bcc.n	80030de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800317e:	2300      	movs	r3, #0
 8003180:	73fb      	strb	r3, [r7, #15]
 8003182:	e044      	b.n	800320e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003184:	7bfa      	ldrb	r2, [r7, #15]
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	1a9b      	subs	r3, r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003196:	2200      	movs	r2, #0
 8003198:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800319a:	7bfa      	ldrb	r2, [r7, #15]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80031ac:	7bfa      	ldrb	r2, [r7, #15]
 80031ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031b0:	7bfa      	ldrb	r2, [r7, #15]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80031c2:	2200      	movs	r2, #0
 80031c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031c6:	7bfa      	ldrb	r2, [r7, #15]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031dc:	7bfa      	ldrb	r2, [r7, #15]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	1a9b      	subs	r3, r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031f2:	7bfa      	ldrb	r2, [r7, #15]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	3301      	adds	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	429a      	cmp	r2, r3
 8003216:	d3b5      	bcc.n	8003184 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	603b      	str	r3, [r7, #0]
 800321e:	687e      	ldr	r6, [r7, #4]
 8003220:	466d      	mov	r5, sp
 8003222:	f106 0410 	add.w	r4, r6, #16
 8003226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800322a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800322c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800322e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003232:	e885 0003 	stmia.w	r5, {r0, r1}
 8003236:	1d33      	adds	r3, r6, #4
 8003238:	cb0e      	ldmia	r3, {r1, r2, r3}
 800323a:	6838      	ldr	r0, [r7, #0]
 800323c:	f003 fabe 	bl	80067bc <USB_DevInit>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d005      	beq.n	8003252 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e00d      	b.n	800326e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f004 fb06 	bl	8007878 <USB_DevDisconnect>

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003276 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b084      	sub	sp, #16
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_PCD_Start+0x1c>
 800328e:	2302      	movs	r3, #2
 8003290:	e020      	b.n	80032d4 <HAL_PCD_Start+0x5e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d109      	bne.n	80032b6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d005      	beq.n	80032b6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f003 fa32 	bl	8006724 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f004 fab6 	bl	8007836 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032dc:	b590      	push	{r4, r7, lr}
 80032de:	b08d      	sub	sp, #52	; 0x34
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f004 fb74 	bl	80079e0 <USB_GetMode>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f040 839d 	bne.w	8003a3a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f004 fad8 	bl	80078ba <USB_ReadInterrupts>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 8393 	beq.w	8003a38 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f004 facf 	bl	80078ba <USB_ReadInterrupts>
 800331c:	4603      	mov	r3, r0
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b02      	cmp	r3, #2
 8003324:	d107      	bne.n	8003336 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695a      	ldr	r2, [r3, #20]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f002 0202 	and.w	r2, r2, #2
 8003334:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f004 fabd 	bl	80078ba <USB_ReadInterrupts>
 8003340:	4603      	mov	r3, r0
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	2b10      	cmp	r3, #16
 8003348:	d161      	bne.n	800340e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	699a      	ldr	r2, [r3, #24]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0210 	bic.w	r2, r2, #16
 8003358:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	f003 020f 	and.w	r2, r3, #15
 8003366:	4613      	mov	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	3304      	adds	r3, #4
 8003378:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	0c5b      	lsrs	r3, r3, #17
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	2b02      	cmp	r3, #2
 8003384:	d124      	bne.n	80033d0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800338c:	4013      	ands	r3, r2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d035      	beq.n	80033fe <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	091b      	lsrs	r3, r3, #4
 800339a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800339c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	6a38      	ldr	r0, [r7, #32]
 80033a6:	f004 f923 	bl	80075f0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	091b      	lsrs	r3, r3, #4
 80033b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033b6:	441a      	add	r2, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	699a      	ldr	r2, [r3, #24]
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	091b      	lsrs	r3, r3, #4
 80033c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033c8:	441a      	add	r2, r3
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	619a      	str	r2, [r3, #24]
 80033ce:	e016      	b.n	80033fe <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	0c5b      	lsrs	r3, r3, #17
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	2b06      	cmp	r3, #6
 80033da:	d110      	bne.n	80033fe <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033e2:	2208      	movs	r2, #8
 80033e4:	4619      	mov	r1, r3
 80033e6:	6a38      	ldr	r0, [r7, #32]
 80033e8:	f004 f902 	bl	80075f0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	699a      	ldr	r2, [r3, #24]
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	091b      	lsrs	r3, r3, #4
 80033f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033f8:	441a      	add	r2, r3
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0210 	orr.w	r2, r2, #16
 800340c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f004 fa51 	bl	80078ba <USB_ReadInterrupts>
 8003418:	4603      	mov	r3, r0
 800341a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800341e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003422:	d16e      	bne.n	8003502 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f004 fa57 	bl	80078e0 <USB_ReadDevAllOutEpInterrupt>
 8003432:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003434:	e062      	b.n	80034fc <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d057      	beq.n	80034f0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	4611      	mov	r1, r2
 800344a:	4618      	mov	r0, r3
 800344c:	f004 fa7c 	bl	8007948 <USB_ReadDevOutEPInterrupt>
 8003450:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00c      	beq.n	8003476 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	4413      	add	r3, r2
 8003464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003468:	461a      	mov	r2, r3
 800346a:	2301      	movs	r3, #1
 800346c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800346e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 fdb1 	bl	8003fd8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00c      	beq.n	800349a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	4413      	add	r3, r2
 8003488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348c:	461a      	mov	r2, r3
 800348e:	2308      	movs	r3, #8
 8003490:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003492:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 feab 	bl	80041f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f003 0310 	and.w	r3, r3, #16
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b0:	461a      	mov	r2, r3
 80034b2:	2310      	movs	r3, #16
 80034b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034cc:	461a      	mov	r2, r3
 80034ce:	2320      	movs	r3, #32
 80034d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d009      	beq.n	80034f0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e8:	461a      	mov	r2, r3
 80034ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034ee:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	3301      	adds	r3, #1
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f8:	085b      	lsrs	r3, r3, #1
 80034fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d199      	bne.n	8003436 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f004 f9d7 	bl	80078ba <USB_ReadInterrupts>
 800350c:	4603      	mov	r3, r0
 800350e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003512:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003516:	f040 80c0 	bne.w	800369a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f004 f9f8 	bl	8007914 <USB_ReadDevAllInEpInterrupt>
 8003524:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800352a:	e0b2      	b.n	8003692 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800352c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 80a7 	beq.w	8003686 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	4611      	mov	r1, r2
 8003542:	4618      	mov	r0, r3
 8003544:	f004 fa1e 	bl	8007984 <USB_ReadDevInEPInterrupt>
 8003548:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d057      	beq.n	8003604 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	2201      	movs	r2, #1
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	43db      	mvns	r3, r3
 800356e:	69f9      	ldr	r1, [r7, #28]
 8003570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003574:	4013      	ands	r3, r2
 8003576:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	4413      	add	r3, r2
 8003580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003584:	461a      	mov	r2, r3
 8003586:	2301      	movs	r3, #1
 8003588:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d132      	bne.n	80035f8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	3348      	adds	r3, #72	; 0x48
 80035a2:	6819      	ldr	r1, [r3, #0]
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a8:	4613      	mov	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4403      	add	r3, r0
 80035b2:	3344      	adds	r3, #68	; 0x44
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4419      	add	r1, r3
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4403      	add	r3, r0
 80035c6:	3348      	adds	r3, #72	; 0x48
 80035c8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d113      	bne.n	80035f8 <HAL_PCD_IRQHandler+0x31c>
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	3350      	adds	r3, #80	; 0x50
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d108      	bne.n	80035f8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6818      	ldr	r0, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035f0:	461a      	mov	r2, r3
 80035f2:	2101      	movs	r1, #1
 80035f4:	f004 fa26 	bl	8007a44 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	4619      	mov	r1, r3
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f006 f957 	bl	80098b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d008      	beq.n	8003620 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	4413      	add	r3, r2
 8003616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800361a:	461a      	mov	r2, r3
 800361c:	2308      	movs	r3, #8
 800361e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	f003 0310 	and.w	r3, r3, #16
 8003626:	2b00      	cmp	r3, #0
 8003628:	d008      	beq.n	800363c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	4413      	add	r3, r2
 8003632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003636:	461a      	mov	r2, r3
 8003638:	2310      	movs	r3, #16
 800363a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	d008      	beq.n	8003658 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	4413      	add	r3, r2
 800364e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003652:	461a      	mov	r2, r3
 8003654:	2340      	movs	r3, #64	; 0x40
 8003656:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d008      	beq.n	8003674 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	4413      	add	r3, r2
 800366a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366e:	461a      	mov	r2, r3
 8003670:	2302      	movs	r3, #2
 8003672:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800367e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fc1b 	bl	8003ebc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	3301      	adds	r3, #1
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800368c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368e:	085b      	lsrs	r3, r3, #1
 8003690:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003694:	2b00      	cmp	r3, #0
 8003696:	f47f af49 	bne.w	800352c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f004 f90b 	bl	80078ba <USB_ReadInterrupts>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036ae:	d122      	bne.n	80036f6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036be:	f023 0301 	bic.w	r3, r3, #1
 80036c2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d108      	bne.n	80036e0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80036d6:	2100      	movs	r1, #0
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fe27 	bl	800432c <HAL_PCDEx_LPM_Callback>
 80036de:	e002      	b.n	80036e6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f006 f953 	bl	800998c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695a      	ldr	r2, [r3, #20]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80036f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f004 f8dd 	bl	80078ba <USB_ReadInterrupts>
 8003700:	4603      	mov	r3, r0
 8003702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003706:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800370a:	d112      	bne.n	8003732 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b01      	cmp	r3, #1
 800371a:	d102      	bne.n	8003722 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f006 f90f 	bl	8009940 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003730:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f004 f8bf 	bl	80078ba <USB_ReadInterrupts>
 800373c:	4603      	mov	r3, r0
 800373e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003746:	f040 80c7 	bne.w	80038d8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	69fa      	ldr	r2, [r7, #28]
 8003754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2110      	movs	r1, #16
 8003764:	4618      	mov	r0, r3
 8003766:	f003 f98d 	bl	8006a84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800376a:	2300      	movs	r3, #0
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800376e:	e056      	b.n	800381e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800377c:	461a      	mov	r2, r3
 800377e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003782:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003794:	0151      	lsls	r1, r2, #5
 8003796:	69fa      	ldr	r2, [r7, #28]
 8003798:	440a      	add	r2, r1
 800379a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800379e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037a2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80037a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037b4:	0151      	lsls	r1, r2, #5
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	440a      	add	r2, r1
 80037ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80037c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80037c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d0:	461a      	mov	r2, r3
 80037d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037d6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e8:	0151      	lsls	r1, r2, #5
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	440a      	add	r2, r1
 80037ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003808:	0151      	lsls	r1, r2, #5
 800380a:	69fa      	ldr	r2, [r7, #28]
 800380c:	440a      	add	r2, r1
 800380e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003812:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003816:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381a:	3301      	adds	r3, #1
 800381c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003824:	429a      	cmp	r2, r3
 8003826:	d3a3      	bcc.n	8003770 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	69fa      	ldr	r2, [r7, #28]
 8003832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003836:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800383a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	2b00      	cmp	r3, #0
 8003842:	d016      	beq.n	8003872 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800384a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800384e:	69fa      	ldr	r2, [r7, #28]
 8003850:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003854:	f043 030b 	orr.w	r3, r3, #11
 8003858:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800386a:	f043 030b 	orr.w	r3, r3, #11
 800386e:	6453      	str	r3, [r2, #68]	; 0x44
 8003870:	e015      	b.n	800389e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	69fa      	ldr	r2, [r7, #28]
 800387c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003880:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003884:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003888:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	69fa      	ldr	r2, [r7, #28]
 8003894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003898:	f043 030b 	orr.w	r3, r3, #11
 800389c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69fa      	ldr	r2, [r7, #28]
 80038a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80038b0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6818      	ldr	r0, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038c2:	461a      	mov	r2, r3
 80038c4:	f004 f8be 	bl	8007a44 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80038d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f003 ffec 	bl	80078ba <USB_ReadInterrupts>
 80038e2:	4603      	mov	r3, r0
 80038e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ec:	d124      	bne.n	8003938 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f004 f882 	bl	80079fc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f003 f922 	bl	8006b46 <USB_GetDevSpeed>
 8003902:	4603      	mov	r3, r0
 8003904:	461a      	mov	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681c      	ldr	r4, [r3, #0]
 800390e:	f001 f947 	bl	8004ba0 <HAL_RCC_GetHCLKFreq>
 8003912:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003918:	b2db      	uxtb	r3, r3
 800391a:	461a      	mov	r2, r3
 800391c:	4620      	mov	r0, r4
 800391e:	f002 fe5f 	bl	80065e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f005 ffed 	bl	8009902 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695a      	ldr	r2, [r3, #20]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003936:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f003 ffbc 	bl	80078ba <USB_ReadInterrupts>
 8003942:	4603      	mov	r3, r0
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b08      	cmp	r3, #8
 800394a:	d10a      	bne.n	8003962 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f005 ffca 	bl	80098e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f002 0208 	and.w	r2, r2, #8
 8003960:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f003 ffa7 	bl	80078ba <USB_ReadInterrupts>
 800396c:	4603      	mov	r3, r0
 800396e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003972:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003976:	d10f      	bne.n	8003998 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	b2db      	uxtb	r3, r3
 8003980:	4619      	mov	r1, r3
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f006 f822 	bl	80099cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695a      	ldr	r2, [r3, #20]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003996:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f003 ff8c 	bl	80078ba <USB_ReadInterrupts>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039ac:	d10f      	bne.n	80039ce <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	4619      	mov	r1, r3
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f005 fff5 	bl	80099a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	695a      	ldr	r2, [r3, #20]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80039cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f003 ff71 	bl	80078ba <USB_ReadInterrupts>
 80039d8:	4603      	mov	r3, r0
 80039da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80039de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e2:	d10a      	bne.n	80039fa <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f006 f803 	bl	80099f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	695a      	ldr	r2, [r3, #20]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80039f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f003 ff5b 	bl	80078ba <USB_ReadInterrupts>
 8003a04:	4603      	mov	r3, r0
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d115      	bne.n	8003a3a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f005 fff3 	bl	8009a0c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6859      	ldr	r1, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	e000      	b.n	8003a3a <HAL_PCD_IRQHandler+0x75e>
      return;
 8003a38:	bf00      	nop
    }
  }
}
 8003a3a:	3734      	adds	r7, #52	; 0x34
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd90      	pop	{r4, r7, pc}

08003a40 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <HAL_PCD_SetAddress+0x1a>
 8003a56:	2302      	movs	r3, #2
 8003a58:	e013      	b.n	8003a82 <HAL_PCD_SetAddress+0x42>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	78fa      	ldrb	r2, [r7, #3]
 8003a70:	4611      	mov	r1, r2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f003 feb9 	bl	80077ea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	4608      	mov	r0, r1
 8003a94:	4611      	mov	r1, r2
 8003a96:	461a      	mov	r2, r3
 8003a98:	4603      	mov	r3, r0
 8003a9a:	70fb      	strb	r3, [r7, #3]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	803b      	strh	r3, [r7, #0]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003aa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	da0f      	bge.n	8003ad0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	f003 020f 	and.w	r2, r3, #15
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	3338      	adds	r3, #56	; 0x38
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2201      	movs	r2, #1
 8003acc:	705a      	strb	r2, [r3, #1]
 8003ace:	e00f      	b.n	8003af0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	f003 020f 	and.w	r2, r3, #15
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003af0:	78fb      	ldrb	r3, [r7, #3]
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003afc:	883a      	ldrh	r2, [r7, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	78ba      	ldrb	r2, [r7, #2]
 8003b06:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	785b      	ldrb	r3, [r3, #1]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d004      	beq.n	8003b1a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b1a:	78bb      	ldrb	r3, [r7, #2]
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d102      	bne.n	8003b26 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_PCD_EP_Open+0xaa>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e00e      	b.n	8003b52 <HAL_PCD_EP_Open+0xc8>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68f9      	ldr	r1, [r7, #12]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f003 f824 	bl	8006b90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003b50:	7afb      	ldrb	r3, [r7, #11]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	460b      	mov	r3, r1
 8003b64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	da0f      	bge.n	8003b8e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b6e:	78fb      	ldrb	r3, [r7, #3]
 8003b70:	f003 020f 	and.w	r2, r3, #15
 8003b74:	4613      	mov	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	3338      	adds	r3, #56	; 0x38
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	4413      	add	r3, r2
 8003b82:	3304      	adds	r3, #4
 8003b84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	705a      	strb	r2, [r3, #1]
 8003b8c:	e00f      	b.n	8003bae <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b8e:	78fb      	ldrb	r3, [r7, #3]
 8003b90:	f003 020f 	and.w	r2, r3, #15
 8003b94:	4613      	mov	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	1a9b      	subs	r3, r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003bae:	78fb      	ldrb	r3, [r7, #3]
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_PCD_EP_Close+0x6e>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	e00e      	b.n	8003be6 <HAL_PCD_EP_Close+0x8c>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68f9      	ldr	r1, [r7, #12]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f003 f862 	bl	8006ca0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b086      	sub	sp, #24
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bfe:	7afb      	ldrb	r3, [r7, #11]
 8003c00:	f003 020f 	and.w	r2, r3, #15
 8003c04:	4613      	mov	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4413      	add	r3, r2
 8003c14:	3304      	adds	r3, #4
 8003c16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	2200      	movs	r2, #0
 8003c28:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c30:	7afb      	ldrb	r3, [r7, #11]
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d102      	bne.n	8003c4a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c4a:	7afb      	ldrb	r3, [r7, #11]
 8003c4c:	f003 030f 	and.w	r3, r3, #15
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d109      	bne.n	8003c68 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6818      	ldr	r0, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	461a      	mov	r2, r3
 8003c60:	6979      	ldr	r1, [r7, #20]
 8003c62:	f003 fb3d 	bl	80072e0 <USB_EP0StartXfer>
 8003c66:	e008      	b.n	8003c7a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6818      	ldr	r0, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	461a      	mov	r2, r3
 8003c74:	6979      	ldr	r1, [r7, #20]
 8003c76:	f003 f8ef 	bl	8006e58 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	f003 020f 	and.w	r2, r3, #15
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003ca6:	681b      	ldr	r3, [r3, #0]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	607a      	str	r2, [r7, #4]
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cc4:	7afb      	ldrb	r3, [r7, #11]
 8003cc6:	f003 020f 	and.w	r2, r3, #15
 8003cca:	4613      	mov	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	1a9b      	subs	r3, r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	3338      	adds	r3, #56	; 0x38
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3304      	adds	r3, #4
 8003cda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2200      	movs	r2, #0
 8003cec:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cf4:	7afb      	ldrb	r3, [r7, #11]
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d102      	bne.n	8003d0e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d0e:	7afb      	ldrb	r3, [r7, #11]
 8003d10:	f003 030f 	and.w	r3, r3, #15
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d109      	bne.n	8003d2c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	461a      	mov	r2, r3
 8003d24:	6979      	ldr	r1, [r7, #20]
 8003d26:	f003 fadb 	bl	80072e0 <USB_EP0StartXfer>
 8003d2a:	e008      	b.n	8003d3e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6818      	ldr	r0, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	461a      	mov	r2, r3
 8003d38:	6979      	ldr	r1, [r7, #20]
 8003d3a:	f003 f88d 	bl	8006e58 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d54:	78fb      	ldrb	r3, [r7, #3]
 8003d56:	f003 020f 	and.w	r2, r3, #15
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d901      	bls.n	8003d66 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e050      	b.n	8003e08 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	da0f      	bge.n	8003d8e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d6e:	78fb      	ldrb	r3, [r7, #3]
 8003d70:	f003 020f 	and.w	r2, r3, #15
 8003d74:	4613      	mov	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	1a9b      	subs	r3, r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	3338      	adds	r3, #56	; 0x38
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	4413      	add	r3, r2
 8003d82:	3304      	adds	r3, #4
 8003d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	705a      	strb	r2, [r3, #1]
 8003d8c:	e00d      	b.n	8003daa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	4613      	mov	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	4413      	add	r3, r2
 8003da0:	3304      	adds	r3, #4
 8003da2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003db0:	78fb      	ldrb	r3, [r7, #3]
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_PCD_EP_SetStall+0x82>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e01e      	b.n	8003e08 <HAL_PCD_EP_SetStall+0xc0>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68f9      	ldr	r1, [r7, #12]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f003 fc32 	bl	8007642 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dde:	78fb      	ldrb	r3, [r7, #3]
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10a      	bne.n	8003dfe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	b2d9      	uxtb	r1, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003df8:	461a      	mov	r2, r3
 8003dfa:	f003 fe23 	bl	8007a44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e1c:	78fb      	ldrb	r3, [r7, #3]
 8003e1e:	f003 020f 	and.w	r2, r3, #15
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d901      	bls.n	8003e2e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e042      	b.n	8003eb4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	da0f      	bge.n	8003e56 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e36:	78fb      	ldrb	r3, [r7, #3]
 8003e38:	f003 020f 	and.w	r2, r3, #15
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	3338      	adds	r3, #56	; 0x38
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	4413      	add	r3, r2
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	705a      	strb	r2, [r3, #1]
 8003e54:	e00f      	b.n	8003e76 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e56:	78fb      	ldrb	r3, [r7, #3]
 8003e58:	f003 020f 	and.w	r2, r3, #15
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d101      	bne.n	8003e96 <HAL_PCD_EP_ClrStall+0x86>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e00e      	b.n	8003eb4 <HAL_PCD_EP_ClrStall+0xa4>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68f9      	ldr	r1, [r7, #12]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f003 fc3a 	bl	800771e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08a      	sub	sp, #40	; 0x28
 8003ec0:	af02      	add	r7, sp, #8
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	1a9b      	subs	r3, r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	3338      	adds	r3, #56	; 0x38
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	4413      	add	r3, r2
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	699a      	ldr	r2, [r3, #24]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d901      	bls.n	8003ef4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e06c      	b.n	8003fce <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	695a      	ldr	r2, [r3, #20]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d902      	bls.n	8003f10 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	3303      	adds	r3, #3
 8003f14:	089b      	lsrs	r3, r3, #2
 8003f16:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f18:	e02b      	b.n	8003f72 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	695a      	ldr	r2, [r3, #20]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	69fa      	ldr	r2, [r7, #28]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d902      	bls.n	8003f36 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	3303      	adds	r3, #3
 8003f3a:	089b      	lsrs	r3, r3, #2
 8003f3c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	68d9      	ldr	r1, [r3, #12]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	4603      	mov	r3, r0
 8003f54:	6978      	ldr	r0, [r7, #20]
 8003f56:	f003 fb16 	bl	8007586 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	441a      	add	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	699a      	ldr	r2, [r3, #24]
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	441a      	add	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d809      	bhi.n	8003f9c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	699a      	ldr	r2, [r3, #24]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d203      	bcs.n	8003f9c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1be      	bne.n	8003f1a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	695a      	ldr	r2, [r3, #20]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d811      	bhi.n	8003fcc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	2201      	movs	r2, #1
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	6939      	ldr	r1, [r7, #16]
 8003fc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fc8:	4013      	ands	r3, r2
 8003fca:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3720      	adds	r7, #32
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	333c      	adds	r3, #60	; 0x3c
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	2b01      	cmp	r3, #1
 800400c:	f040 80a0 	bne.w	8004150 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d015      	beq.n	8004046 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4a72      	ldr	r2, [pc, #456]	; (80041e8 <PCD_EP_OutXfrComplete_int+0x210>)
 800401e:	4293      	cmp	r3, r2
 8004020:	f240 80dd 	bls.w	80041de <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 80d7 	beq.w	80041de <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403c:	461a      	mov	r2, r3
 800403e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004042:	6093      	str	r3, [r2, #8]
 8004044:	e0cb      	b.n	80041de <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b00      	cmp	r3, #0
 800404e:	d009      	beq.n	8004064 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405c:	461a      	mov	r2, r3
 800405e:	2320      	movs	r3, #32
 8004060:	6093      	str	r3, [r2, #8]
 8004062:	e0bc      	b.n	80041de <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800406a:	2b00      	cmp	r3, #0
 800406c:	f040 80b7 	bne.w	80041de <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4a5d      	ldr	r2, [pc, #372]	; (80041e8 <PCD_EP_OutXfrComplete_int+0x210>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d90f      	bls.n	8004098 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	4413      	add	r3, r2
 800408a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408e:	461a      	mov	r2, r3
 8004090:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004094:	6093      	str	r3, [r2, #8]
 8004096:	e0a2      	b.n	80041de <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	4613      	mov	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	1a9b      	subs	r3, r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040aa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	0159      	lsls	r1, r3, #5
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	440b      	add	r3, r1
 80040b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80040be:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	4613      	mov	r3, r2
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	1a9b      	subs	r3, r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4403      	add	r3, r0
 80040ce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80040d2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	4613      	mov	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040e6:	6819      	ldr	r1, [r3, #0]
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	4613      	mov	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	1a9b      	subs	r3, r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4403      	add	r3, r0
 80040f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4419      	add	r1, r3
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	4613      	mov	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	1a9b      	subs	r3, r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4403      	add	r3, r0
 800410c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004110:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d114      	bne.n	8004142 <PCD_EP_OutXfrComplete_int+0x16a>
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d108      	bne.n	8004142 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800413a:	461a      	mov	r2, r3
 800413c:	2101      	movs	r1, #1
 800413e:	f003 fc81 	bl	8007a44 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	4619      	mov	r1, r3
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f005 fb97 	bl	800987c <HAL_PCD_DataOutStageCallback>
 800414e:	e046      	b.n	80041de <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4a26      	ldr	r2, [pc, #152]	; (80041ec <PCD_EP_OutXfrComplete_int+0x214>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d124      	bne.n	80041a2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416e:	461a      	mov	r2, r3
 8004170:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004174:	6093      	str	r3, [r2, #8]
 8004176:	e032      	b.n	80041de <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	d008      	beq.n	8004194 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418e:	461a      	mov	r2, r3
 8004190:	2320      	movs	r3, #32
 8004192:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	b2db      	uxtb	r3, r3
 8004198:	4619      	mov	r1, r3
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f005 fb6e 	bl	800987c <HAL_PCD_DataOutStageCallback>
 80041a0:	e01d      	b.n	80041de <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d114      	bne.n	80041d2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d108      	bne.n	80041d2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80041ca:	461a      	mov	r2, r3
 80041cc:	2100      	movs	r1, #0
 80041ce:	f003 fc39 	bl	8007a44 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	4619      	mov	r1, r3
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f005 fb4f 	bl	800987c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	4f54300a 	.word	0x4f54300a
 80041ec:	4f54310a 	.word	0x4f54310a

080041f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	333c      	adds	r3, #60	; 0x3c
 8004208:	3304      	adds	r3, #4
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4a15      	ldr	r2, [pc, #84]	; (8004278 <PCD_EP_OutSetupPacket_int+0x88>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d90e      	bls.n	8004244 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800422c:	2b00      	cmp	r3, #0
 800422e:	d009      	beq.n	8004244 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	4413      	add	r3, r2
 8004238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800423c:	461a      	mov	r2, r3
 800423e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004242:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f005 fb07 	bl	8009858 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4a0a      	ldr	r2, [pc, #40]	; (8004278 <PCD_EP_OutSetupPacket_int+0x88>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d90c      	bls.n	800426c <PCD_EP_OutSetupPacket_int+0x7c>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d108      	bne.n	800426c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6818      	ldr	r0, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004264:	461a      	mov	r2, r3
 8004266:	2101      	movs	r1, #1
 8004268:	f003 fbec 	bl	8007a44 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	4f54300a 	.word	0x4f54300a

0800427c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	70fb      	strb	r3, [r7, #3]
 8004288:	4613      	mov	r3, r2
 800428a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d107      	bne.n	80042aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800429a:	883b      	ldrh	r3, [r7, #0]
 800429c:	0419      	lsls	r1, r3, #16
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	629a      	str	r2, [r3, #40]	; 0x28
 80042a8:	e028      	b.n	80042fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b0:	0c1b      	lsrs	r3, r3, #16
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	4413      	add	r3, r2
 80042b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042b8:	2300      	movs	r3, #0
 80042ba:	73fb      	strb	r3, [r7, #15]
 80042bc:	e00d      	b.n	80042da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	3340      	adds	r3, #64	; 0x40
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	0c1b      	lsrs	r3, r3, #16
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	4413      	add	r3, r2
 80042d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	3301      	adds	r3, #1
 80042d8:	73fb      	strb	r3, [r7, #15]
 80042da:	7bfa      	ldrb	r2, [r7, #15]
 80042dc:	78fb      	ldrb	r3, [r7, #3]
 80042de:	3b01      	subs	r3, #1
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d3ec      	bcc.n	80042be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80042e4:	883b      	ldrh	r3, [r7, #0]
 80042e6:	0418      	lsls	r0, r3, #16
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6819      	ldr	r1, [r3, #0]
 80042ec:	78fb      	ldrb	r3, [r7, #3]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	4302      	orrs	r2, r0
 80042f4:	3340      	adds	r3, #64	; 0x40
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	460b      	mov	r3, r1
 8004314:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	887a      	ldrh	r2, [r7, #2]
 800431c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e25b      	b.n	800480e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d075      	beq.n	800444e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004362:	4ba3      	ldr	r3, [pc, #652]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 030c 	and.w	r3, r3, #12
 800436a:	2b04      	cmp	r3, #4
 800436c:	d00c      	beq.n	8004388 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800436e:	4ba0      	ldr	r3, [pc, #640]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004376:	2b08      	cmp	r3, #8
 8004378:	d112      	bne.n	80043a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800437a:	4b9d      	ldr	r3, [pc, #628]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004382:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004386:	d10b      	bne.n	80043a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004388:	4b99      	ldr	r3, [pc, #612]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d05b      	beq.n	800444c <HAL_RCC_OscConfig+0x108>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d157      	bne.n	800444c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e236      	b.n	800480e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a8:	d106      	bne.n	80043b8 <HAL_RCC_OscConfig+0x74>
 80043aa:	4b91      	ldr	r3, [pc, #580]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a90      	ldr	r2, [pc, #576]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	e01d      	b.n	80043f4 <HAL_RCC_OscConfig+0xb0>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043c0:	d10c      	bne.n	80043dc <HAL_RCC_OscConfig+0x98>
 80043c2:	4b8b      	ldr	r3, [pc, #556]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a8a      	ldr	r2, [pc, #552]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 80043c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	4b88      	ldr	r3, [pc, #544]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a87      	ldr	r2, [pc, #540]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	e00b      	b.n	80043f4 <HAL_RCC_OscConfig+0xb0>
 80043dc:	4b84      	ldr	r3, [pc, #528]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a83      	ldr	r2, [pc, #524]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 80043e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	4b81      	ldr	r3, [pc, #516]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a80      	ldr	r2, [pc, #512]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 80043ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d013      	beq.n	8004424 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fc:	f7fd ff66 	bl	80022cc <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004404:	f7fd ff62 	bl	80022cc <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b64      	cmp	r3, #100	; 0x64
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e1fb      	b.n	800480e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004416:	4b76      	ldr	r3, [pc, #472]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCC_OscConfig+0xc0>
 8004422:	e014      	b.n	800444e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004424:	f7fd ff52 	bl	80022cc <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800442c:	f7fd ff4e 	bl	80022cc <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b64      	cmp	r3, #100	; 0x64
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e1e7      	b.n	800480e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800443e:	4b6c      	ldr	r3, [pc, #432]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1f0      	bne.n	800442c <HAL_RCC_OscConfig+0xe8>
 800444a:	e000      	b.n	800444e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800444c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d063      	beq.n	8004522 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800445a:	4b65      	ldr	r3, [pc, #404]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 030c 	and.w	r3, r3, #12
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00b      	beq.n	800447e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004466:	4b62      	ldr	r3, [pc, #392]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800446e:	2b08      	cmp	r3, #8
 8004470:	d11c      	bne.n	80044ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004472:	4b5f      	ldr	r3, [pc, #380]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d116      	bne.n	80044ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447e:	4b5c      	ldr	r3, [pc, #368]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d005      	beq.n	8004496 <HAL_RCC_OscConfig+0x152>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d001      	beq.n	8004496 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e1bb      	b.n	800480e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004496:	4b56      	ldr	r3, [pc, #344]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4952      	ldr	r1, [pc, #328]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044aa:	e03a      	b.n	8004522 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d020      	beq.n	80044f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044b4:	4b4f      	ldr	r3, [pc, #316]	; (80045f4 <HAL_RCC_OscConfig+0x2b0>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ba:	f7fd ff07 	bl	80022cc <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044c2:	f7fd ff03 	bl	80022cc <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e19c      	b.n	800480e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d4:	4b46      	ldr	r3, [pc, #280]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e0:	4b43      	ldr	r3, [pc, #268]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	4940      	ldr	r1, [pc, #256]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	600b      	str	r3, [r1, #0]
 80044f4:	e015      	b.n	8004522 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044f6:	4b3f      	ldr	r3, [pc, #252]	; (80045f4 <HAL_RCC_OscConfig+0x2b0>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fc:	f7fd fee6 	bl	80022cc <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004504:	f7fd fee2 	bl	80022cc <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e17b      	b.n	800480e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004516:	4b36      	ldr	r3, [pc, #216]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f0      	bne.n	8004504 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d030      	beq.n	8004590 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d016      	beq.n	8004564 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004536:	4b30      	ldr	r3, [pc, #192]	; (80045f8 <HAL_RCC_OscConfig+0x2b4>)
 8004538:	2201      	movs	r2, #1
 800453a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453c:	f7fd fec6 	bl	80022cc <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004544:	f7fd fec2 	bl	80022cc <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e15b      	b.n	800480e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004556:	4b26      	ldr	r3, [pc, #152]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 8004558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0f0      	beq.n	8004544 <HAL_RCC_OscConfig+0x200>
 8004562:	e015      	b.n	8004590 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004564:	4b24      	ldr	r3, [pc, #144]	; (80045f8 <HAL_RCC_OscConfig+0x2b4>)
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800456a:	f7fd feaf 	bl	80022cc <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004572:	f7fd feab 	bl	80022cc <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e144      	b.n	800480e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004584:	4b1a      	ldr	r3, [pc, #104]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 8004586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1f0      	bne.n	8004572 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 80a0 	beq.w	80046de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800459e:	2300      	movs	r3, #0
 80045a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045a2:	4b13      	ldr	r3, [pc, #76]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10f      	bne.n	80045ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ae:	2300      	movs	r3, #0
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	4b0f      	ldr	r3, [pc, #60]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	4a0e      	ldr	r2, [pc, #56]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 80045b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045bc:	6413      	str	r3, [r2, #64]	; 0x40
 80045be:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c6:	60bb      	str	r3, [r7, #8]
 80045c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ca:	2301      	movs	r3, #1
 80045cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ce:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <HAL_RCC_OscConfig+0x2b8>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d121      	bne.n	800461e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045da:	4b08      	ldr	r3, [pc, #32]	; (80045fc <HAL_RCC_OscConfig+0x2b8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a07      	ldr	r2, [pc, #28]	; (80045fc <HAL_RCC_OscConfig+0x2b8>)
 80045e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045e6:	f7fd fe71 	bl	80022cc <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ec:	e011      	b.n	8004612 <HAL_RCC_OscConfig+0x2ce>
 80045ee:	bf00      	nop
 80045f0:	40023800 	.word	0x40023800
 80045f4:	42470000 	.word	0x42470000
 80045f8:	42470e80 	.word	0x42470e80
 80045fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004600:	f7fd fe64 	bl	80022cc <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e0fd      	b.n	800480e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004612:	4b81      	ldr	r3, [pc, #516]	; (8004818 <HAL_RCC_OscConfig+0x4d4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f0      	beq.n	8004600 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d106      	bne.n	8004634 <HAL_RCC_OscConfig+0x2f0>
 8004626:	4b7d      	ldr	r3, [pc, #500]	; (800481c <HAL_RCC_OscConfig+0x4d8>)
 8004628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462a:	4a7c      	ldr	r2, [pc, #496]	; (800481c <HAL_RCC_OscConfig+0x4d8>)
 800462c:	f043 0301 	orr.w	r3, r3, #1
 8004630:	6713      	str	r3, [r2, #112]	; 0x70
 8004632:	e01c      	b.n	800466e <HAL_RCC_OscConfig+0x32a>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b05      	cmp	r3, #5
 800463a:	d10c      	bne.n	8004656 <HAL_RCC_OscConfig+0x312>
 800463c:	4b77      	ldr	r3, [pc, #476]	; (800481c <HAL_RCC_OscConfig+0x4d8>)
 800463e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004640:	4a76      	ldr	r2, [pc, #472]	; (800481c <HAL_RCC_OscConfig+0x4d8>)
 8004642:	f043 0304 	orr.w	r3, r3, #4
 8004646:	6713      	str	r3, [r2, #112]	; 0x70
 8004648:	4b74      	ldr	r3, [pc, #464]	; (800481c <HAL_RCC_OscConfig+0x4d8>)
 800464a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464c:	4a73      	ldr	r2, [pc, #460]	; (800481c <HAL_RCC_OscConfig+0x4d8>)
 800464e:	f043 0301 	orr.w	r3, r3, #1
 8004652:	6713      	str	r3, [r2, #112]	; 0x70
 8004654:	e00b      	b.n	800466e <HAL_RCC_OscConfig+0x32a>
 8004656:	4b71      	ldr	r3, [pc, #452]	; (800481c <HAL_RCC_OscConfig+0x4d8>)
 8004658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465a:	4a70      	ldr	r2, [pc, #448]	; (800481c <HAL_RCC_OscConfig+0x4d8>)
 800465c:	f023 0301 	bic.w	r3, r3, #1
 8004660:	6713      	str	r3, [r2, #112]	; 0x70
 8004662:	4b6e      	ldr	r3, [pc, #440]	; (800481c <HAL_RCC_OscConfig+0x4d8>)
 8004664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004666:	4a6d      	ldr	r2, [pc, #436]	; (800481c <HAL_RCC_OscConfig+0x4d8>)
 8004668:	f023 0304 	bic.w	r3, r3, #4
 800466c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d015      	beq.n	80046a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004676:	f7fd fe29 	bl	80022cc <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467c:	e00a      	b.n	8004694 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800467e:	f7fd fe25 	bl	80022cc <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	f241 3288 	movw	r2, #5000	; 0x1388
 800468c:	4293      	cmp	r3, r2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e0bc      	b.n	800480e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004694:	4b61      	ldr	r3, [pc, #388]	; (800481c <HAL_RCC_OscConfig+0x4d8>)
 8004696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0ee      	beq.n	800467e <HAL_RCC_OscConfig+0x33a>
 80046a0:	e014      	b.n	80046cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a2:	f7fd fe13 	bl	80022cc <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a8:	e00a      	b.n	80046c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046aa:	f7fd fe0f 	bl	80022cc <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e0a6      	b.n	800480e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c0:	4b56      	ldr	r3, [pc, #344]	; (800481c <HAL_RCC_OscConfig+0x4d8>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1ee      	bne.n	80046aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046cc:	7dfb      	ldrb	r3, [r7, #23]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d105      	bne.n	80046de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d2:	4b52      	ldr	r3, [pc, #328]	; (800481c <HAL_RCC_OscConfig+0x4d8>)
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	4a51      	ldr	r2, [pc, #324]	; (800481c <HAL_RCC_OscConfig+0x4d8>)
 80046d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 8092 	beq.w	800480c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046e8:	4b4c      	ldr	r3, [pc, #304]	; (800481c <HAL_RCC_OscConfig+0x4d8>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 030c 	and.w	r3, r3, #12
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d05c      	beq.n	80047ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d141      	bne.n	8004780 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fc:	4b48      	ldr	r3, [pc, #288]	; (8004820 <HAL_RCC_OscConfig+0x4dc>)
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004702:	f7fd fde3 	bl	80022cc <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800470a:	f7fd fddf 	bl	80022cc <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e078      	b.n	800480e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471c:	4b3f      	ldr	r3, [pc, #252]	; (800481c <HAL_RCC_OscConfig+0x4d8>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f0      	bne.n	800470a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69da      	ldr	r2, [r3, #28]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	019b      	lsls	r3, r3, #6
 8004738:	431a      	orrs	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473e:	085b      	lsrs	r3, r3, #1
 8004740:	3b01      	subs	r3, #1
 8004742:	041b      	lsls	r3, r3, #16
 8004744:	431a      	orrs	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474a:	061b      	lsls	r3, r3, #24
 800474c:	4933      	ldr	r1, [pc, #204]	; (800481c <HAL_RCC_OscConfig+0x4d8>)
 800474e:	4313      	orrs	r3, r2
 8004750:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004752:	4b33      	ldr	r3, [pc, #204]	; (8004820 <HAL_RCC_OscConfig+0x4dc>)
 8004754:	2201      	movs	r2, #1
 8004756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004758:	f7fd fdb8 	bl	80022cc <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004760:	f7fd fdb4 	bl	80022cc <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e04d      	b.n	800480e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004772:	4b2a      	ldr	r3, [pc, #168]	; (800481c <HAL_RCC_OscConfig+0x4d8>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0f0      	beq.n	8004760 <HAL_RCC_OscConfig+0x41c>
 800477e:	e045      	b.n	800480c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004780:	4b27      	ldr	r3, [pc, #156]	; (8004820 <HAL_RCC_OscConfig+0x4dc>)
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004786:	f7fd fda1 	bl	80022cc <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800478e:	f7fd fd9d 	bl	80022cc <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e036      	b.n	800480e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a0:	4b1e      	ldr	r3, [pc, #120]	; (800481c <HAL_RCC_OscConfig+0x4d8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1f0      	bne.n	800478e <HAL_RCC_OscConfig+0x44a>
 80047ac:	e02e      	b.n	800480c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d101      	bne.n	80047ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e029      	b.n	800480e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047ba:	4b18      	ldr	r3, [pc, #96]	; (800481c <HAL_RCC_OscConfig+0x4d8>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d11c      	bne.n	8004808 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d8:	429a      	cmp	r2, r3
 80047da:	d115      	bne.n	8004808 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047e2:	4013      	ands	r3, r2
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d10d      	bne.n	8004808 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d106      	bne.n	8004808 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004804:	429a      	cmp	r2, r3
 8004806:	d001      	beq.n	800480c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40007000 	.word	0x40007000
 800481c:	40023800 	.word	0x40023800
 8004820:	42470060 	.word	0x42470060

08004824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e0cc      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004838:	4b68      	ldr	r3, [pc, #416]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 030f 	and.w	r3, r3, #15
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d90c      	bls.n	8004860 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004846:	4b65      	ldr	r3, [pc, #404]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800484e:	4b63      	ldr	r3, [pc, #396]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d001      	beq.n	8004860 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e0b8      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d020      	beq.n	80048ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004878:	4b59      	ldr	r3, [pc, #356]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	4a58      	ldr	r2, [pc, #352]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004882:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004890:	4b53      	ldr	r3, [pc, #332]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	4a52      	ldr	r2, [pc, #328]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800489a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800489c:	4b50      	ldr	r3, [pc, #320]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	494d      	ldr	r1, [pc, #308]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d044      	beq.n	8004944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d107      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c2:	4b47      	ldr	r3, [pc, #284]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d119      	bne.n	8004902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e07f      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d003      	beq.n	80048e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d107      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e2:	4b3f      	ldr	r3, [pc, #252]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d109      	bne.n	8004902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e06f      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f2:	4b3b      	ldr	r3, [pc, #236]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e067      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004902:	4b37      	ldr	r3, [pc, #220]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f023 0203 	bic.w	r2, r3, #3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	4934      	ldr	r1, [pc, #208]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004910:	4313      	orrs	r3, r2
 8004912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004914:	f7fd fcda 	bl	80022cc <HAL_GetTick>
 8004918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491a:	e00a      	b.n	8004932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800491c:	f7fd fcd6 	bl	80022cc <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f241 3288 	movw	r2, #5000	; 0x1388
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e04f      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004932:	4b2b      	ldr	r3, [pc, #172]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 020c 	and.w	r2, r3, #12
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	429a      	cmp	r2, r3
 8004942:	d1eb      	bne.n	800491c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004944:	4b25      	ldr	r3, [pc, #148]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d20c      	bcs.n	800496c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004952:	4b22      	ldr	r3, [pc, #136]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800495a:	4b20      	ldr	r3, [pc, #128]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d001      	beq.n	800496c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e032      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d008      	beq.n	800498a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004978:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	4916      	ldr	r1, [pc, #88]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	4313      	orrs	r3, r2
 8004988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004996:	4b12      	ldr	r3, [pc, #72]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	490e      	ldr	r1, [pc, #56]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049aa:	f000 f821 	bl	80049f0 <HAL_RCC_GetSysClockFreq>
 80049ae:	4601      	mov	r1, r0
 80049b0:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	091b      	lsrs	r3, r3, #4
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	4a0a      	ldr	r2, [pc, #40]	; (80049e4 <HAL_RCC_ClockConfig+0x1c0>)
 80049bc:	5cd3      	ldrb	r3, [r2, r3]
 80049be:	fa21 f303 	lsr.w	r3, r1, r3
 80049c2:	4a09      	ldr	r2, [pc, #36]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 80049c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049c6:	4b09      	ldr	r3, [pc, #36]	; (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fd fc3a 	bl	8002244 <HAL_InitTick>

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40023c00 	.word	0x40023c00
 80049e0:	40023800 	.word	0x40023800
 80049e4:	0800bfc0 	.word	0x0800bfc0
 80049e8:	20000000 	.word	0x20000000
 80049ec:	20000004 	.word	0x20000004

080049f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	607b      	str	r3, [r7, #4]
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	2300      	movs	r3, #0
 8004a00:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a06:	4b63      	ldr	r3, [pc, #396]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 030c 	and.w	r3, r3, #12
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d007      	beq.n	8004a22 <HAL_RCC_GetSysClockFreq+0x32>
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d008      	beq.n	8004a28 <HAL_RCC_GetSysClockFreq+0x38>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f040 80b4 	bne.w	8004b84 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a1c:	4b5e      	ldr	r3, [pc, #376]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a1e:	60bb      	str	r3, [r7, #8]
       break;
 8004a20:	e0b3      	b.n	8004b8a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a22:	4b5e      	ldr	r3, [pc, #376]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004a24:	60bb      	str	r3, [r7, #8]
      break;
 8004a26:	e0b0      	b.n	8004b8a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a28:	4b5a      	ldr	r3, [pc, #360]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a30:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a32:	4b58      	ldr	r3, [pc, #352]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d04a      	beq.n	8004ad4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a3e:	4b55      	ldr	r3, [pc, #340]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	099b      	lsrs	r3, r3, #6
 8004a44:	f04f 0400 	mov.w	r4, #0
 8004a48:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	ea03 0501 	and.w	r5, r3, r1
 8004a54:	ea04 0602 	and.w	r6, r4, r2
 8004a58:	4629      	mov	r1, r5
 8004a5a:	4632      	mov	r2, r6
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	f04f 0400 	mov.w	r4, #0
 8004a64:	0154      	lsls	r4, r2, #5
 8004a66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a6a:	014b      	lsls	r3, r1, #5
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4622      	mov	r2, r4
 8004a70:	1b49      	subs	r1, r1, r5
 8004a72:	eb62 0206 	sbc.w	r2, r2, r6
 8004a76:	f04f 0300 	mov.w	r3, #0
 8004a7a:	f04f 0400 	mov.w	r4, #0
 8004a7e:	0194      	lsls	r4, r2, #6
 8004a80:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a84:	018b      	lsls	r3, r1, #6
 8004a86:	1a5b      	subs	r3, r3, r1
 8004a88:	eb64 0402 	sbc.w	r4, r4, r2
 8004a8c:	f04f 0100 	mov.w	r1, #0
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	00e2      	lsls	r2, r4, #3
 8004a96:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a9a:	00d9      	lsls	r1, r3, #3
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4614      	mov	r4, r2
 8004aa0:	195b      	adds	r3, r3, r5
 8004aa2:	eb44 0406 	adc.w	r4, r4, r6
 8004aa6:	f04f 0100 	mov.w	r1, #0
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	0262      	lsls	r2, r4, #9
 8004ab0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004ab4:	0259      	lsls	r1, r3, #9
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4614      	mov	r4, r2
 8004aba:	4618      	mov	r0, r3
 8004abc:	4621      	mov	r1, r4
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f04f 0400 	mov.w	r4, #0
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	4623      	mov	r3, r4
 8004ac8:	f7fc f8c6 	bl	8000c58 <__aeabi_uldivmod>
 8004acc:	4603      	mov	r3, r0
 8004ace:	460c      	mov	r4, r1
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	e049      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ad4:	4b2f      	ldr	r3, [pc, #188]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	099b      	lsrs	r3, r3, #6
 8004ada:	f04f 0400 	mov.w	r4, #0
 8004ade:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	ea03 0501 	and.w	r5, r3, r1
 8004aea:	ea04 0602 	and.w	r6, r4, r2
 8004aee:	4629      	mov	r1, r5
 8004af0:	4632      	mov	r2, r6
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	f04f 0400 	mov.w	r4, #0
 8004afa:	0154      	lsls	r4, r2, #5
 8004afc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b00:	014b      	lsls	r3, r1, #5
 8004b02:	4619      	mov	r1, r3
 8004b04:	4622      	mov	r2, r4
 8004b06:	1b49      	subs	r1, r1, r5
 8004b08:	eb62 0206 	sbc.w	r2, r2, r6
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	f04f 0400 	mov.w	r4, #0
 8004b14:	0194      	lsls	r4, r2, #6
 8004b16:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b1a:	018b      	lsls	r3, r1, #6
 8004b1c:	1a5b      	subs	r3, r3, r1
 8004b1e:	eb64 0402 	sbc.w	r4, r4, r2
 8004b22:	f04f 0100 	mov.w	r1, #0
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	00e2      	lsls	r2, r4, #3
 8004b2c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b30:	00d9      	lsls	r1, r3, #3
 8004b32:	460b      	mov	r3, r1
 8004b34:	4614      	mov	r4, r2
 8004b36:	195b      	adds	r3, r3, r5
 8004b38:	eb44 0406 	adc.w	r4, r4, r6
 8004b3c:	f04f 0100 	mov.w	r1, #0
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	02a2      	lsls	r2, r4, #10
 8004b46:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b4a:	0299      	lsls	r1, r3, #10
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4614      	mov	r4, r2
 8004b50:	4618      	mov	r0, r3
 8004b52:	4621      	mov	r1, r4
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f04f 0400 	mov.w	r4, #0
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	4623      	mov	r3, r4
 8004b5e:	f7fc f87b 	bl	8000c58 <__aeabi_uldivmod>
 8004b62:	4603      	mov	r3, r0
 8004b64:	460c      	mov	r4, r1
 8004b66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b68:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	0c1b      	lsrs	r3, r3, #16
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	3301      	adds	r3, #1
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b80:	60bb      	str	r3, [r7, #8]
      break;
 8004b82:	e002      	b.n	8004b8a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b84:	4b04      	ldr	r3, [pc, #16]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b86:	60bb      	str	r3, [r7, #8]
      break;
 8004b88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b8a:	68bb      	ldr	r3, [r7, #8]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b94:	40023800 	.word	0x40023800
 8004b98:	00f42400 	.word	0x00f42400
 8004b9c:	007a1200 	.word	0x007a1200

08004ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ba4:	4b03      	ldr	r3, [pc, #12]	; (8004bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	20000000 	.word	0x20000000

08004bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bbc:	f7ff fff0 	bl	8004ba0 <HAL_RCC_GetHCLKFreq>
 8004bc0:	4601      	mov	r1, r0
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	0a9b      	lsrs	r3, r3, #10
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	4a03      	ldr	r2, [pc, #12]	; (8004bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bce:	5cd3      	ldrb	r3, [r2, r3]
 8004bd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	0800bfd0 	.word	0x0800bfd0

08004be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004be4:	f7ff ffdc 	bl	8004ba0 <HAL_RCC_GetHCLKFreq>
 8004be8:	4601      	mov	r1, r0
 8004bea:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	0b5b      	lsrs	r3, r3, #13
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	4a03      	ldr	r2, [pc, #12]	; (8004c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bf6:	5cd3      	ldrb	r3, [r2, r3]
 8004bf8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40023800 	.word	0x40023800
 8004c04:	0800bfd0 	.word	0x0800bfd0

08004c08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e056      	b.n	8004cc8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d106      	bne.n	8004c3a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7fc fd99 	bl	800176c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c50:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	ea42 0103 	orr.w	r1, r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	0c1b      	lsrs	r3, r3, #16
 8004c98:	f003 0104 	and.w	r1, r3, #4
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	69da      	ldr	r2, [r3, #28]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cb6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_SPI_Transmit+0x22>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e11e      	b.n	8004f30 <HAL_SPI_Transmit+0x260>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cfa:	f7fd fae7 	bl	80022cc <HAL_GetTick>
 8004cfe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d00:	88fb      	ldrh	r3, [r7, #6]
 8004d02:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d002      	beq.n	8004d16 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d10:	2302      	movs	r3, #2
 8004d12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d14:	e103      	b.n	8004f1e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <HAL_SPI_Transmit+0x52>
 8004d1c:	88fb      	ldrh	r3, [r7, #6]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d102      	bne.n	8004d28 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d26:	e0fa      	b.n	8004f1e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2203      	movs	r2, #3
 8004d2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	88fa      	ldrh	r2, [r7, #6]
 8004d40:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	88fa      	ldrh	r2, [r7, #6]
 8004d46:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d6e:	d107      	bne.n	8004d80 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d7e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8a:	2b40      	cmp	r3, #64	; 0x40
 8004d8c:	d007      	beq.n	8004d9e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004da6:	d14b      	bne.n	8004e40 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d002      	beq.n	8004db6 <HAL_SPI_Transmit+0xe6>
 8004db0:	8afb      	ldrh	r3, [r7, #22]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d13e      	bne.n	8004e34 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dba:	881a      	ldrh	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc6:	1c9a      	adds	r2, r3, #2
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004dda:	e02b      	b.n	8004e34 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d112      	bne.n	8004e10 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dee:	881a      	ldrh	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfa:	1c9a      	adds	r2, r3, #2
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e0e:	e011      	b.n	8004e34 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e10:	f7fd fa5c 	bl	80022cc <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d803      	bhi.n	8004e28 <HAL_SPI_Transmit+0x158>
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e26:	d102      	bne.n	8004e2e <HAL_SPI_Transmit+0x15e>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d102      	bne.n	8004e34 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e32:	e074      	b.n	8004f1e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1ce      	bne.n	8004ddc <HAL_SPI_Transmit+0x10c>
 8004e3e:	e04c      	b.n	8004eda <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <HAL_SPI_Transmit+0x17e>
 8004e48:	8afb      	ldrh	r3, [r7, #22]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d140      	bne.n	8004ed0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	330c      	adds	r3, #12
 8004e58:	7812      	ldrb	r2, [r2, #0]
 8004e5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e74:	e02c      	b.n	8004ed0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d113      	bne.n	8004eac <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	330c      	adds	r3, #12
 8004e8e:	7812      	ldrb	r2, [r2, #0]
 8004e90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	86da      	strh	r2, [r3, #54]	; 0x36
 8004eaa:	e011      	b.n	8004ed0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eac:	f7fd fa0e 	bl	80022cc <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d803      	bhi.n	8004ec4 <HAL_SPI_Transmit+0x1f4>
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec2:	d102      	bne.n	8004eca <HAL_SPI_Transmit+0x1fa>
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d102      	bne.n	8004ed0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ece:	e026      	b.n	8004f1e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1cd      	bne.n	8004e76 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	6839      	ldr	r1, [r7, #0]
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 fba4 	bl	800562c <SPI_EndRxTxTransaction>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2220      	movs	r2, #32
 8004eee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10a      	bne.n	8004f0e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ef8:	2300      	movs	r3, #0
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	613b      	str	r3, [r7, #16]
 8004f0c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	77fb      	strb	r3, [r7, #31]
 8004f1a:	e000      	b.n	8004f1e <HAL_SPI_Transmit+0x24e>
  }

error:
 8004f1c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3720      	adds	r7, #32
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b088      	sub	sp, #32
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	603b      	str	r3, [r7, #0]
 8004f44:	4613      	mov	r3, r2
 8004f46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f54:	d112      	bne.n	8004f7c <HAL_SPI_Receive+0x44>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10e      	bne.n	8004f7c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2204      	movs	r2, #4
 8004f62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004f66:	88fa      	ldrh	r2, [r7, #6]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	68b9      	ldr	r1, [r7, #8]
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 f8e9 	bl	800514a <HAL_SPI_TransmitReceive>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	e0e2      	b.n	8005142 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d101      	bne.n	8004f8a <HAL_SPI_Receive+0x52>
 8004f86:	2302      	movs	r3, #2
 8004f88:	e0db      	b.n	8005142 <HAL_SPI_Receive+0x20a>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f92:	f7fd f99b 	bl	80022cc <HAL_GetTick>
 8004f96:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d002      	beq.n	8004faa <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fa8:	e0c2      	b.n	8005130 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <HAL_SPI_Receive+0x7e>
 8004fb0:	88fb      	ldrh	r3, [r7, #6]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d102      	bne.n	8004fbc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fba:	e0b9      	b.n	8005130 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	88fa      	ldrh	r2, [r7, #6]
 8004fd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	88fa      	ldrh	r2, [r7, #6]
 8004fda:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005002:	d107      	bne.n	8005014 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005012:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501e:	2b40      	cmp	r3, #64	; 0x40
 8005020:	d007      	beq.n	8005032 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005030:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d162      	bne.n	8005100 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800503a:	e02e      	b.n	800509a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b01      	cmp	r3, #1
 8005048:	d115      	bne.n	8005076 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f103 020c 	add.w	r2, r3, #12
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	7812      	ldrb	r2, [r2, #0]
 8005058:	b2d2      	uxtb	r2, r2
 800505a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005060:	1c5a      	adds	r2, r3, #1
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800506a:	b29b      	uxth	r3, r3
 800506c:	3b01      	subs	r3, #1
 800506e:	b29a      	uxth	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005074:	e011      	b.n	800509a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005076:	f7fd f929 	bl	80022cc <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d803      	bhi.n	800508e <HAL_SPI_Receive+0x156>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508c:	d102      	bne.n	8005094 <HAL_SPI_Receive+0x15c>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d102      	bne.n	800509a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005098:	e04a      	b.n	8005130 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800509e:	b29b      	uxth	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1cb      	bne.n	800503c <HAL_SPI_Receive+0x104>
 80050a4:	e031      	b.n	800510a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d113      	bne.n	80050dc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050be:	b292      	uxth	r2, r2
 80050c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c6:	1c9a      	adds	r2, r3, #2
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050da:	e011      	b.n	8005100 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050dc:	f7fd f8f6 	bl	80022cc <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d803      	bhi.n	80050f4 <HAL_SPI_Receive+0x1bc>
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f2:	d102      	bne.n	80050fa <HAL_SPI_Receive+0x1c2>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d102      	bne.n	8005100 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80050fe:	e017      	b.n	8005130 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005104:	b29b      	uxth	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1cd      	bne.n	80050a6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	6839      	ldr	r1, [r7, #0]
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 fa27 	bl	8005562 <SPI_EndRxTransaction>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	75fb      	strb	r3, [r7, #23]
 800512c:	e000      	b.n	8005130 <HAL_SPI_Receive+0x1f8>
  }

error :
 800512e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005140:	7dfb      	ldrb	r3, [r7, #23]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b08c      	sub	sp, #48	; 0x30
 800514e:	af00      	add	r7, sp, #0
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	607a      	str	r2, [r7, #4]
 8005156:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005158:	2301      	movs	r3, #1
 800515a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800515c:	2300      	movs	r3, #0
 800515e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_SPI_TransmitReceive+0x26>
 800516c:	2302      	movs	r3, #2
 800516e:	e18a      	b.n	8005486 <HAL_SPI_TransmitReceive+0x33c>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005178:	f7fd f8a8 	bl	80022cc <HAL_GetTick>
 800517c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005184:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800518e:	887b      	ldrh	r3, [r7, #2]
 8005190:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005192:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005196:	2b01      	cmp	r3, #1
 8005198:	d00f      	beq.n	80051ba <HAL_SPI_TransmitReceive+0x70>
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051a0:	d107      	bne.n	80051b2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d103      	bne.n	80051b2 <HAL_SPI_TransmitReceive+0x68>
 80051aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d003      	beq.n	80051ba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80051b2:	2302      	movs	r3, #2
 80051b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80051b8:	e15b      	b.n	8005472 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d005      	beq.n	80051cc <HAL_SPI_TransmitReceive+0x82>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <HAL_SPI_TransmitReceive+0x82>
 80051c6:	887b      	ldrh	r3, [r7, #2]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d103      	bne.n	80051d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80051d2:	e14e      	b.n	8005472 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d003      	beq.n	80051e8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2205      	movs	r2, #5
 80051e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	887a      	ldrh	r2, [r7, #2]
 80051f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	887a      	ldrh	r2, [r7, #2]
 80051fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	887a      	ldrh	r2, [r7, #2]
 800520a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	887a      	ldrh	r2, [r7, #2]
 8005210:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005228:	2b40      	cmp	r3, #64	; 0x40
 800522a:	d007      	beq.n	800523c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800523a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005244:	d178      	bne.n	8005338 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <HAL_SPI_TransmitReceive+0x10a>
 800524e:	8b7b      	ldrh	r3, [r7, #26]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d166      	bne.n	8005322 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005258:	881a      	ldrh	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005264:	1c9a      	adds	r2, r3, #2
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005278:	e053      	b.n	8005322 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b02      	cmp	r3, #2
 8005286:	d11b      	bne.n	80052c0 <HAL_SPI_TransmitReceive+0x176>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d016      	beq.n	80052c0 <HAL_SPI_TransmitReceive+0x176>
 8005292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005294:	2b01      	cmp	r3, #1
 8005296:	d113      	bne.n	80052c0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529c:	881a      	ldrh	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a8:	1c9a      	adds	r2, r3, #2
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	3b01      	subs	r3, #1
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d119      	bne.n	8005302 <HAL_SPI_TransmitReceive+0x1b8>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d014      	beq.n	8005302 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	b292      	uxth	r2, r2
 80052e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ea:	1c9a      	adds	r2, r3, #2
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	3b01      	subs	r3, #1
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052fe:	2301      	movs	r3, #1
 8005300:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005302:	f7fc ffe3 	bl	80022cc <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800530e:	429a      	cmp	r2, r3
 8005310:	d807      	bhi.n	8005322 <HAL_SPI_TransmitReceive+0x1d8>
 8005312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005318:	d003      	beq.n	8005322 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005320:	e0a7      	b.n	8005472 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005326:	b29b      	uxth	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1a6      	bne.n	800527a <HAL_SPI_TransmitReceive+0x130>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005330:	b29b      	uxth	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1a1      	bne.n	800527a <HAL_SPI_TransmitReceive+0x130>
 8005336:	e07c      	b.n	8005432 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <HAL_SPI_TransmitReceive+0x1fc>
 8005340:	8b7b      	ldrh	r3, [r7, #26]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d16b      	bne.n	800541e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	330c      	adds	r3, #12
 8005350:	7812      	ldrb	r2, [r2, #0]
 8005352:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005358:	1c5a      	adds	r2, r3, #1
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005362:	b29b      	uxth	r3, r3
 8005364:	3b01      	subs	r3, #1
 8005366:	b29a      	uxth	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800536c:	e057      	b.n	800541e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b02      	cmp	r3, #2
 800537a:	d11c      	bne.n	80053b6 <HAL_SPI_TransmitReceive+0x26c>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d017      	beq.n	80053b6 <HAL_SPI_TransmitReceive+0x26c>
 8005386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005388:	2b01      	cmp	r3, #1
 800538a:	d114      	bne.n	80053b6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	330c      	adds	r3, #12
 8005396:	7812      	ldrb	r2, [r2, #0]
 8005398:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d119      	bne.n	80053f8 <HAL_SPI_TransmitReceive+0x2ae>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d014      	beq.n	80053f8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d8:	b2d2      	uxtb	r2, r2
 80053da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053f4:	2301      	movs	r3, #1
 80053f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053f8:	f7fc ff68 	bl	80022cc <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005404:	429a      	cmp	r2, r3
 8005406:	d803      	bhi.n	8005410 <HAL_SPI_TransmitReceive+0x2c6>
 8005408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540e:	d102      	bne.n	8005416 <HAL_SPI_TransmitReceive+0x2cc>
 8005410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005412:	2b00      	cmp	r3, #0
 8005414:	d103      	bne.n	800541e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800541c:	e029      	b.n	8005472 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005422:	b29b      	uxth	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1a2      	bne.n	800536e <HAL_SPI_TransmitReceive+0x224>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800542c:	b29b      	uxth	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d19d      	bne.n	800536e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005434:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 f8f8 	bl	800562c <SPI_EndRxTxTransaction>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d006      	beq.n	8005450 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2220      	movs	r2, #32
 800544c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800544e:	e010      	b.n	8005472 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10b      	bne.n	8005470 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005458:	2300      	movs	r3, #0
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	e000      	b.n	8005472 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005470:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005482:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005486:	4618      	mov	r0, r3
 8005488:	3730      	adds	r7, #48	; 0x30
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	603b      	str	r3, [r7, #0]
 800549a:	4613      	mov	r3, r2
 800549c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800549e:	e04c      	b.n	800553a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a6:	d048      	beq.n	800553a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80054a8:	f7fc ff10 	bl	80022cc <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d902      	bls.n	80054be <SPI_WaitFlagStateUntilTimeout+0x30>
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d13d      	bne.n	800553a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054d6:	d111      	bne.n	80054fc <SPI_WaitFlagStateUntilTimeout+0x6e>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054e0:	d004      	beq.n	80054ec <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ea:	d107      	bne.n	80054fc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005504:	d10f      	bne.n	8005526 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005524:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e00f      	b.n	800555a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4013      	ands	r3, r2
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	429a      	cmp	r2, r3
 8005548:	bf0c      	ite	eq
 800554a:	2301      	moveq	r3, #1
 800554c:	2300      	movne	r3, #0
 800554e:	b2db      	uxtb	r3, r3
 8005550:	461a      	mov	r2, r3
 8005552:	79fb      	ldrb	r3, [r7, #7]
 8005554:	429a      	cmp	r2, r3
 8005556:	d1a3      	bne.n	80054a0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b086      	sub	sp, #24
 8005566:	af02      	add	r7, sp, #8
 8005568:	60f8      	str	r0, [r7, #12]
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005576:	d111      	bne.n	800559c <SPI_EndRxTransaction+0x3a>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005580:	d004      	beq.n	800558c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800558a:	d107      	bne.n	800559c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800559a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055a4:	d12a      	bne.n	80055fc <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ae:	d012      	beq.n	80055d6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2200      	movs	r2, #0
 80055b8:	2180      	movs	r1, #128	; 0x80
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f7ff ff67 	bl	800548e <SPI_WaitFlagStateUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d02d      	beq.n	8005622 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ca:	f043 0220 	orr.w	r2, r3, #32
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e026      	b.n	8005624 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2200      	movs	r2, #0
 80055de:	2101      	movs	r1, #1
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f7ff ff54 	bl	800548e <SPI_WaitFlagStateUntilTimeout>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01a      	beq.n	8005622 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f0:	f043 0220 	orr.w	r2, r3, #32
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e013      	b.n	8005624 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2200      	movs	r2, #0
 8005604:	2101      	movs	r1, #1
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f7ff ff41 	bl	800548e <SPI_WaitFlagStateUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d007      	beq.n	8005622 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005616:	f043 0220 	orr.w	r2, r3, #32
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e000      	b.n	8005624 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af02      	add	r7, sp, #8
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005638:	4b1b      	ldr	r3, [pc, #108]	; (80056a8 <SPI_EndRxTxTransaction+0x7c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a1b      	ldr	r2, [pc, #108]	; (80056ac <SPI_EndRxTxTransaction+0x80>)
 800563e:	fba2 2303 	umull	r2, r3, r2, r3
 8005642:	0d5b      	lsrs	r3, r3, #21
 8005644:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005648:	fb02 f303 	mul.w	r3, r2, r3
 800564c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005656:	d112      	bne.n	800567e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2200      	movs	r2, #0
 8005660:	2180      	movs	r1, #128	; 0x80
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f7ff ff13 	bl	800548e <SPI_WaitFlagStateUntilTimeout>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d016      	beq.n	800569c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005672:	f043 0220 	orr.w	r2, r3, #32
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e00f      	b.n	800569e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00a      	beq.n	800569a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	3b01      	subs	r3, #1
 8005688:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005694:	2b80      	cmp	r3, #128	; 0x80
 8005696:	d0f2      	beq.n	800567e <SPI_EndRxTxTransaction+0x52>
 8005698:	e000      	b.n	800569c <SPI_EndRxTxTransaction+0x70>
        break;
 800569a:	bf00      	nop
  }

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	20000000 	.word	0x20000000
 80056ac:	165e9f81 	.word	0x165e9f81

080056b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e01d      	b.n	80056fe <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d106      	bne.n	80056dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fc f890 	bl	80017fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3304      	adds	r3, #4
 80056ec:	4619      	mov	r1, r3
 80056ee:	4610      	mov	r0, r2
 80056f0:	f000 f8d0 	bl	8005894 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800571e:	2302      	movs	r3, #2
 8005720:	e0b4      	b.n	800588c <HAL_TIM_PWM_ConfigChannel+0x184>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2202      	movs	r2, #2
 800572e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b0c      	cmp	r3, #12
 8005736:	f200 809f 	bhi.w	8005878 <HAL_TIM_PWM_ConfigChannel+0x170>
 800573a:	a201      	add	r2, pc, #4	; (adr r2, 8005740 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800573c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005740:	08005775 	.word	0x08005775
 8005744:	08005879 	.word	0x08005879
 8005748:	08005879 	.word	0x08005879
 800574c:	08005879 	.word	0x08005879
 8005750:	080057b5 	.word	0x080057b5
 8005754:	08005879 	.word	0x08005879
 8005758:	08005879 	.word	0x08005879
 800575c:	08005879 	.word	0x08005879
 8005760:	080057f7 	.word	0x080057f7
 8005764:	08005879 	.word	0x08005879
 8005768:	08005879 	.word	0x08005879
 800576c:	08005879 	.word	0x08005879
 8005770:	08005837 	.word	0x08005837
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	4618      	mov	r0, r3
 800577c:	f000 f90a 	bl	8005994 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	699a      	ldr	r2, [r3, #24]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0208 	orr.w	r2, r2, #8
 800578e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	699a      	ldr	r2, [r3, #24]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0204 	bic.w	r2, r2, #4
 800579e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6999      	ldr	r1, [r3, #24]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	691a      	ldr	r2, [r3, #16]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	619a      	str	r2, [r3, #24]
      break;
 80057b2:	e062      	b.n	800587a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68b9      	ldr	r1, [r7, #8]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 f950 	bl	8005a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699a      	ldr	r2, [r3, #24]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699a      	ldr	r2, [r3, #24]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6999      	ldr	r1, [r3, #24]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	021a      	lsls	r2, r3, #8
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	619a      	str	r2, [r3, #24]
      break;
 80057f4:	e041      	b.n	800587a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68b9      	ldr	r1, [r7, #8]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 f99b 	bl	8005b38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69da      	ldr	r2, [r3, #28]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f042 0208 	orr.w	r2, r2, #8
 8005810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69da      	ldr	r2, [r3, #28]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0204 	bic.w	r2, r2, #4
 8005820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69d9      	ldr	r1, [r3, #28]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	691a      	ldr	r2, [r3, #16]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	61da      	str	r2, [r3, #28]
      break;
 8005834:	e021      	b.n	800587a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68b9      	ldr	r1, [r7, #8]
 800583c:	4618      	mov	r0, r3
 800583e:	f000 f9e5 	bl	8005c0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	69da      	ldr	r2, [r3, #28]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69da      	ldr	r2, [r3, #28]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69d9      	ldr	r1, [r3, #28]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	021a      	lsls	r2, r3, #8
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	61da      	str	r2, [r3, #28]
      break;
 8005876:	e000      	b.n	800587a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005878:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a34      	ldr	r2, [pc, #208]	; (8005978 <TIM_Base_SetConfig+0xe4>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d00f      	beq.n	80058cc <TIM_Base_SetConfig+0x38>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b2:	d00b      	beq.n	80058cc <TIM_Base_SetConfig+0x38>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a31      	ldr	r2, [pc, #196]	; (800597c <TIM_Base_SetConfig+0xe8>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d007      	beq.n	80058cc <TIM_Base_SetConfig+0x38>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a30      	ldr	r2, [pc, #192]	; (8005980 <TIM_Base_SetConfig+0xec>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d003      	beq.n	80058cc <TIM_Base_SetConfig+0x38>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a2f      	ldr	r2, [pc, #188]	; (8005984 <TIM_Base_SetConfig+0xf0>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d108      	bne.n	80058de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a25      	ldr	r2, [pc, #148]	; (8005978 <TIM_Base_SetConfig+0xe4>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d01b      	beq.n	800591e <TIM_Base_SetConfig+0x8a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ec:	d017      	beq.n	800591e <TIM_Base_SetConfig+0x8a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a22      	ldr	r2, [pc, #136]	; (800597c <TIM_Base_SetConfig+0xe8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d013      	beq.n	800591e <TIM_Base_SetConfig+0x8a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a21      	ldr	r2, [pc, #132]	; (8005980 <TIM_Base_SetConfig+0xec>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00f      	beq.n	800591e <TIM_Base_SetConfig+0x8a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a20      	ldr	r2, [pc, #128]	; (8005984 <TIM_Base_SetConfig+0xf0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00b      	beq.n	800591e <TIM_Base_SetConfig+0x8a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a1f      	ldr	r2, [pc, #124]	; (8005988 <TIM_Base_SetConfig+0xf4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d007      	beq.n	800591e <TIM_Base_SetConfig+0x8a>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a1e      	ldr	r2, [pc, #120]	; (800598c <TIM_Base_SetConfig+0xf8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d003      	beq.n	800591e <TIM_Base_SetConfig+0x8a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a1d      	ldr	r2, [pc, #116]	; (8005990 <TIM_Base_SetConfig+0xfc>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d108      	bne.n	8005930 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a08      	ldr	r2, [pc, #32]	; (8005978 <TIM_Base_SetConfig+0xe4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d103      	bne.n	8005964 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	691a      	ldr	r2, [r3, #16]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	615a      	str	r2, [r3, #20]
}
 800596a:	bf00      	nop
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40010000 	.word	0x40010000
 800597c:	40000400 	.word	0x40000400
 8005980:	40000800 	.word	0x40000800
 8005984:	40000c00 	.word	0x40000c00
 8005988:	40014000 	.word	0x40014000
 800598c:	40014400 	.word	0x40014400
 8005990:	40014800 	.word	0x40014800

08005994 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	f023 0201 	bic.w	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0303 	bic.w	r3, r3, #3
 80059ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f023 0302 	bic.w	r3, r3, #2
 80059dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a1c      	ldr	r2, [pc, #112]	; (8005a5c <TIM_OC1_SetConfig+0xc8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d10c      	bne.n	8005a0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f023 0308 	bic.w	r3, r3, #8
 80059f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f023 0304 	bic.w	r3, r3, #4
 8005a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a13      	ldr	r2, [pc, #76]	; (8005a5c <TIM_OC1_SetConfig+0xc8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d111      	bne.n	8005a36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	621a      	str	r2, [r3, #32]
}
 8005a50:	bf00      	nop
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	40010000 	.word	0x40010000

08005a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f023 0210 	bic.w	r2, r3, #16
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f023 0320 	bic.w	r3, r3, #32
 8005aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a1e      	ldr	r2, [pc, #120]	; (8005b34 <TIM_OC2_SetConfig+0xd4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d10d      	bne.n	8005adc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	011b      	lsls	r3, r3, #4
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ada:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a15      	ldr	r2, [pc, #84]	; (8005b34 <TIM_OC2_SetConfig+0xd4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d113      	bne.n	8005b0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005af2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	621a      	str	r2, [r3, #32]
}
 8005b26:	bf00      	nop
 8005b28:	371c      	adds	r7, #28
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	40010000 	.word	0x40010000

08005b38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0303 	bic.w	r3, r3, #3
 8005b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	021b      	lsls	r3, r3, #8
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a1d      	ldr	r2, [pc, #116]	; (8005c08 <TIM_OC3_SetConfig+0xd0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d10d      	bne.n	8005bb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	021b      	lsls	r3, r3, #8
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a14      	ldr	r2, [pc, #80]	; (8005c08 <TIM_OC3_SetConfig+0xd0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d113      	bne.n	8005be2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	621a      	str	r2, [r3, #32]
}
 8005bfc:	bf00      	nop
 8005bfe:	371c      	adds	r7, #28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	40010000 	.word	0x40010000

08005c0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	021b      	lsls	r3, r3, #8
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	031b      	lsls	r3, r3, #12
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a10      	ldr	r2, [pc, #64]	; (8005ca8 <TIM_OC4_SetConfig+0x9c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d109      	bne.n	8005c80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	019b      	lsls	r3, r3, #6
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	621a      	str	r2, [r3, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40010000 	.word	0x40010000

08005cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e050      	b.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a1c      	ldr	r2, [pc, #112]	; (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d018      	beq.n	8005d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d10:	d013      	beq.n	8005d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a18      	ldr	r2, [pc, #96]	; (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d00e      	beq.n	8005d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a16      	ldr	r2, [pc, #88]	; (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d009      	beq.n	8005d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a15      	ldr	r2, [pc, #84]	; (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d004      	beq.n	8005d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a13      	ldr	r2, [pc, #76]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d10c      	bne.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40010000 	.word	0x40010000
 8005d78:	40000400 	.word	0x40000400
 8005d7c:	40000800 	.word	0x40000800
 8005d80:	40000c00 	.word	0x40000c00
 8005d84:	40014000 	.word	0x40014000

08005d88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e03f      	b.n	8005e1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d106      	bne.n	8005db4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7fb fd9c 	bl	80018ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2224      	movs	r2, #36	; 0x24
 8005db8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f829 	bl	8005e24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	691a      	ldr	r2, [r3, #16]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005de0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	695a      	ldr	r2, [r3, #20]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005df0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68da      	ldr	r2, [r3, #12]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2220      	movs	r2, #32
 8005e14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
	...

08005e24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e28:	b085      	sub	sp, #20
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689a      	ldr	r2, [r3, #8]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	431a      	orrs	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005e66:	f023 030c 	bic.w	r3, r3, #12
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	6812      	ldr	r2, [r2, #0]
 8005e6e:	68f9      	ldr	r1, [r7, #12]
 8005e70:	430b      	orrs	r3, r1
 8005e72:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699a      	ldr	r2, [r3, #24]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e92:	f040 818b 	bne.w	80061ac <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4ac1      	ldr	r2, [pc, #772]	; (80061a0 <UART_SetConfig+0x37c>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d005      	beq.n	8005eac <UART_SetConfig+0x88>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4abf      	ldr	r2, [pc, #764]	; (80061a4 <UART_SetConfig+0x380>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	f040 80bd 	bne.w	8006026 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005eac:	f7fe fe98 	bl	8004be0 <HAL_RCC_GetPCLK2Freq>
 8005eb0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	461d      	mov	r5, r3
 8005eb6:	f04f 0600 	mov.w	r6, #0
 8005eba:	46a8      	mov	r8, r5
 8005ebc:	46b1      	mov	r9, r6
 8005ebe:	eb18 0308 	adds.w	r3, r8, r8
 8005ec2:	eb49 0409 	adc.w	r4, r9, r9
 8005ec6:	4698      	mov	r8, r3
 8005ec8:	46a1      	mov	r9, r4
 8005eca:	eb18 0805 	adds.w	r8, r8, r5
 8005ece:	eb49 0906 	adc.w	r9, r9, r6
 8005ed2:	f04f 0100 	mov.w	r1, #0
 8005ed6:	f04f 0200 	mov.w	r2, #0
 8005eda:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ede:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ee2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ee6:	4688      	mov	r8, r1
 8005ee8:	4691      	mov	r9, r2
 8005eea:	eb18 0005 	adds.w	r0, r8, r5
 8005eee:	eb49 0106 	adc.w	r1, r9, r6
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	461d      	mov	r5, r3
 8005ef8:	f04f 0600 	mov.w	r6, #0
 8005efc:	196b      	adds	r3, r5, r5
 8005efe:	eb46 0406 	adc.w	r4, r6, r6
 8005f02:	461a      	mov	r2, r3
 8005f04:	4623      	mov	r3, r4
 8005f06:	f7fa fea7 	bl	8000c58 <__aeabi_uldivmod>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	460c      	mov	r4, r1
 8005f0e:	461a      	mov	r2, r3
 8005f10:	4ba5      	ldr	r3, [pc, #660]	; (80061a8 <UART_SetConfig+0x384>)
 8005f12:	fba3 2302 	umull	r2, r3, r3, r2
 8005f16:	095b      	lsrs	r3, r3, #5
 8005f18:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	461d      	mov	r5, r3
 8005f20:	f04f 0600 	mov.w	r6, #0
 8005f24:	46a9      	mov	r9, r5
 8005f26:	46b2      	mov	sl, r6
 8005f28:	eb19 0309 	adds.w	r3, r9, r9
 8005f2c:	eb4a 040a 	adc.w	r4, sl, sl
 8005f30:	4699      	mov	r9, r3
 8005f32:	46a2      	mov	sl, r4
 8005f34:	eb19 0905 	adds.w	r9, r9, r5
 8005f38:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f3c:	f04f 0100 	mov.w	r1, #0
 8005f40:	f04f 0200 	mov.w	r2, #0
 8005f44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f50:	4689      	mov	r9, r1
 8005f52:	4692      	mov	sl, r2
 8005f54:	eb19 0005 	adds.w	r0, r9, r5
 8005f58:	eb4a 0106 	adc.w	r1, sl, r6
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	461d      	mov	r5, r3
 8005f62:	f04f 0600 	mov.w	r6, #0
 8005f66:	196b      	adds	r3, r5, r5
 8005f68:	eb46 0406 	adc.w	r4, r6, r6
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	4623      	mov	r3, r4
 8005f70:	f7fa fe72 	bl	8000c58 <__aeabi_uldivmod>
 8005f74:	4603      	mov	r3, r0
 8005f76:	460c      	mov	r4, r1
 8005f78:	461a      	mov	r2, r3
 8005f7a:	4b8b      	ldr	r3, [pc, #556]	; (80061a8 <UART_SetConfig+0x384>)
 8005f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f80:	095b      	lsrs	r3, r3, #5
 8005f82:	2164      	movs	r1, #100	; 0x64
 8005f84:	fb01 f303 	mul.w	r3, r1, r3
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	3332      	adds	r3, #50	; 0x32
 8005f8e:	4a86      	ldr	r2, [pc, #536]	; (80061a8 <UART_SetConfig+0x384>)
 8005f90:	fba2 2303 	umull	r2, r3, r2, r3
 8005f94:	095b      	lsrs	r3, r3, #5
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f9c:	4498      	add	r8, r3
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	461d      	mov	r5, r3
 8005fa2:	f04f 0600 	mov.w	r6, #0
 8005fa6:	46a9      	mov	r9, r5
 8005fa8:	46b2      	mov	sl, r6
 8005faa:	eb19 0309 	adds.w	r3, r9, r9
 8005fae:	eb4a 040a 	adc.w	r4, sl, sl
 8005fb2:	4699      	mov	r9, r3
 8005fb4:	46a2      	mov	sl, r4
 8005fb6:	eb19 0905 	adds.w	r9, r9, r5
 8005fba:	eb4a 0a06 	adc.w	sl, sl, r6
 8005fbe:	f04f 0100 	mov.w	r1, #0
 8005fc2:	f04f 0200 	mov.w	r2, #0
 8005fc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fd2:	4689      	mov	r9, r1
 8005fd4:	4692      	mov	sl, r2
 8005fd6:	eb19 0005 	adds.w	r0, r9, r5
 8005fda:	eb4a 0106 	adc.w	r1, sl, r6
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	461d      	mov	r5, r3
 8005fe4:	f04f 0600 	mov.w	r6, #0
 8005fe8:	196b      	adds	r3, r5, r5
 8005fea:	eb46 0406 	adc.w	r4, r6, r6
 8005fee:	461a      	mov	r2, r3
 8005ff0:	4623      	mov	r3, r4
 8005ff2:	f7fa fe31 	bl	8000c58 <__aeabi_uldivmod>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	460c      	mov	r4, r1
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	4b6a      	ldr	r3, [pc, #424]	; (80061a8 <UART_SetConfig+0x384>)
 8005ffe:	fba3 1302 	umull	r1, r3, r3, r2
 8006002:	095b      	lsrs	r3, r3, #5
 8006004:	2164      	movs	r1, #100	; 0x64
 8006006:	fb01 f303 	mul.w	r3, r1, r3
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	3332      	adds	r3, #50	; 0x32
 8006010:	4a65      	ldr	r2, [pc, #404]	; (80061a8 <UART_SetConfig+0x384>)
 8006012:	fba2 2303 	umull	r2, r3, r2, r3
 8006016:	095b      	lsrs	r3, r3, #5
 8006018:	f003 0207 	and.w	r2, r3, #7
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4442      	add	r2, r8
 8006022:	609a      	str	r2, [r3, #8]
 8006024:	e26f      	b.n	8006506 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006026:	f7fe fdc7 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 800602a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	461d      	mov	r5, r3
 8006030:	f04f 0600 	mov.w	r6, #0
 8006034:	46a8      	mov	r8, r5
 8006036:	46b1      	mov	r9, r6
 8006038:	eb18 0308 	adds.w	r3, r8, r8
 800603c:	eb49 0409 	adc.w	r4, r9, r9
 8006040:	4698      	mov	r8, r3
 8006042:	46a1      	mov	r9, r4
 8006044:	eb18 0805 	adds.w	r8, r8, r5
 8006048:	eb49 0906 	adc.w	r9, r9, r6
 800604c:	f04f 0100 	mov.w	r1, #0
 8006050:	f04f 0200 	mov.w	r2, #0
 8006054:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006058:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800605c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006060:	4688      	mov	r8, r1
 8006062:	4691      	mov	r9, r2
 8006064:	eb18 0005 	adds.w	r0, r8, r5
 8006068:	eb49 0106 	adc.w	r1, r9, r6
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	461d      	mov	r5, r3
 8006072:	f04f 0600 	mov.w	r6, #0
 8006076:	196b      	adds	r3, r5, r5
 8006078:	eb46 0406 	adc.w	r4, r6, r6
 800607c:	461a      	mov	r2, r3
 800607e:	4623      	mov	r3, r4
 8006080:	f7fa fdea 	bl	8000c58 <__aeabi_uldivmod>
 8006084:	4603      	mov	r3, r0
 8006086:	460c      	mov	r4, r1
 8006088:	461a      	mov	r2, r3
 800608a:	4b47      	ldr	r3, [pc, #284]	; (80061a8 <UART_SetConfig+0x384>)
 800608c:	fba3 2302 	umull	r2, r3, r3, r2
 8006090:	095b      	lsrs	r3, r3, #5
 8006092:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	461d      	mov	r5, r3
 800609a:	f04f 0600 	mov.w	r6, #0
 800609e:	46a9      	mov	r9, r5
 80060a0:	46b2      	mov	sl, r6
 80060a2:	eb19 0309 	adds.w	r3, r9, r9
 80060a6:	eb4a 040a 	adc.w	r4, sl, sl
 80060aa:	4699      	mov	r9, r3
 80060ac:	46a2      	mov	sl, r4
 80060ae:	eb19 0905 	adds.w	r9, r9, r5
 80060b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80060b6:	f04f 0100 	mov.w	r1, #0
 80060ba:	f04f 0200 	mov.w	r2, #0
 80060be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060ca:	4689      	mov	r9, r1
 80060cc:	4692      	mov	sl, r2
 80060ce:	eb19 0005 	adds.w	r0, r9, r5
 80060d2:	eb4a 0106 	adc.w	r1, sl, r6
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	461d      	mov	r5, r3
 80060dc:	f04f 0600 	mov.w	r6, #0
 80060e0:	196b      	adds	r3, r5, r5
 80060e2:	eb46 0406 	adc.w	r4, r6, r6
 80060e6:	461a      	mov	r2, r3
 80060e8:	4623      	mov	r3, r4
 80060ea:	f7fa fdb5 	bl	8000c58 <__aeabi_uldivmod>
 80060ee:	4603      	mov	r3, r0
 80060f0:	460c      	mov	r4, r1
 80060f2:	461a      	mov	r2, r3
 80060f4:	4b2c      	ldr	r3, [pc, #176]	; (80061a8 <UART_SetConfig+0x384>)
 80060f6:	fba3 1302 	umull	r1, r3, r3, r2
 80060fa:	095b      	lsrs	r3, r3, #5
 80060fc:	2164      	movs	r1, #100	; 0x64
 80060fe:	fb01 f303 	mul.w	r3, r1, r3
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	00db      	lsls	r3, r3, #3
 8006106:	3332      	adds	r3, #50	; 0x32
 8006108:	4a27      	ldr	r2, [pc, #156]	; (80061a8 <UART_SetConfig+0x384>)
 800610a:	fba2 2303 	umull	r2, r3, r2, r3
 800610e:	095b      	lsrs	r3, r3, #5
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006116:	4498      	add	r8, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	461d      	mov	r5, r3
 800611c:	f04f 0600 	mov.w	r6, #0
 8006120:	46a9      	mov	r9, r5
 8006122:	46b2      	mov	sl, r6
 8006124:	eb19 0309 	adds.w	r3, r9, r9
 8006128:	eb4a 040a 	adc.w	r4, sl, sl
 800612c:	4699      	mov	r9, r3
 800612e:	46a2      	mov	sl, r4
 8006130:	eb19 0905 	adds.w	r9, r9, r5
 8006134:	eb4a 0a06 	adc.w	sl, sl, r6
 8006138:	f04f 0100 	mov.w	r1, #0
 800613c:	f04f 0200 	mov.w	r2, #0
 8006140:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006144:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006148:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800614c:	4689      	mov	r9, r1
 800614e:	4692      	mov	sl, r2
 8006150:	eb19 0005 	adds.w	r0, r9, r5
 8006154:	eb4a 0106 	adc.w	r1, sl, r6
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	461d      	mov	r5, r3
 800615e:	f04f 0600 	mov.w	r6, #0
 8006162:	196b      	adds	r3, r5, r5
 8006164:	eb46 0406 	adc.w	r4, r6, r6
 8006168:	461a      	mov	r2, r3
 800616a:	4623      	mov	r3, r4
 800616c:	f7fa fd74 	bl	8000c58 <__aeabi_uldivmod>
 8006170:	4603      	mov	r3, r0
 8006172:	460c      	mov	r4, r1
 8006174:	461a      	mov	r2, r3
 8006176:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <UART_SetConfig+0x384>)
 8006178:	fba3 1302 	umull	r1, r3, r3, r2
 800617c:	095b      	lsrs	r3, r3, #5
 800617e:	2164      	movs	r1, #100	; 0x64
 8006180:	fb01 f303 	mul.w	r3, r1, r3
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	00db      	lsls	r3, r3, #3
 8006188:	3332      	adds	r3, #50	; 0x32
 800618a:	4a07      	ldr	r2, [pc, #28]	; (80061a8 <UART_SetConfig+0x384>)
 800618c:	fba2 2303 	umull	r2, r3, r2, r3
 8006190:	095b      	lsrs	r3, r3, #5
 8006192:	f003 0207 	and.w	r2, r3, #7
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4442      	add	r2, r8
 800619c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800619e:	e1b2      	b.n	8006506 <UART_SetConfig+0x6e2>
 80061a0:	40011000 	.word	0x40011000
 80061a4:	40011400 	.word	0x40011400
 80061a8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4ad7      	ldr	r2, [pc, #860]	; (8006510 <UART_SetConfig+0x6ec>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d005      	beq.n	80061c2 <UART_SetConfig+0x39e>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4ad6      	ldr	r2, [pc, #856]	; (8006514 <UART_SetConfig+0x6f0>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	f040 80d1 	bne.w	8006364 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80061c2:	f7fe fd0d 	bl	8004be0 <HAL_RCC_GetPCLK2Freq>
 80061c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	469a      	mov	sl, r3
 80061cc:	f04f 0b00 	mov.w	fp, #0
 80061d0:	46d0      	mov	r8, sl
 80061d2:	46d9      	mov	r9, fp
 80061d4:	eb18 0308 	adds.w	r3, r8, r8
 80061d8:	eb49 0409 	adc.w	r4, r9, r9
 80061dc:	4698      	mov	r8, r3
 80061de:	46a1      	mov	r9, r4
 80061e0:	eb18 080a 	adds.w	r8, r8, sl
 80061e4:	eb49 090b 	adc.w	r9, r9, fp
 80061e8:	f04f 0100 	mov.w	r1, #0
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80061f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80061f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80061fc:	4688      	mov	r8, r1
 80061fe:	4691      	mov	r9, r2
 8006200:	eb1a 0508 	adds.w	r5, sl, r8
 8006204:	eb4b 0609 	adc.w	r6, fp, r9
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	4619      	mov	r1, r3
 800620e:	f04f 0200 	mov.w	r2, #0
 8006212:	f04f 0300 	mov.w	r3, #0
 8006216:	f04f 0400 	mov.w	r4, #0
 800621a:	0094      	lsls	r4, r2, #2
 800621c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006220:	008b      	lsls	r3, r1, #2
 8006222:	461a      	mov	r2, r3
 8006224:	4623      	mov	r3, r4
 8006226:	4628      	mov	r0, r5
 8006228:	4631      	mov	r1, r6
 800622a:	f7fa fd15 	bl	8000c58 <__aeabi_uldivmod>
 800622e:	4603      	mov	r3, r0
 8006230:	460c      	mov	r4, r1
 8006232:	461a      	mov	r2, r3
 8006234:	4bb8      	ldr	r3, [pc, #736]	; (8006518 <UART_SetConfig+0x6f4>)
 8006236:	fba3 2302 	umull	r2, r3, r3, r2
 800623a:	095b      	lsrs	r3, r3, #5
 800623c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	469b      	mov	fp, r3
 8006244:	f04f 0c00 	mov.w	ip, #0
 8006248:	46d9      	mov	r9, fp
 800624a:	46e2      	mov	sl, ip
 800624c:	eb19 0309 	adds.w	r3, r9, r9
 8006250:	eb4a 040a 	adc.w	r4, sl, sl
 8006254:	4699      	mov	r9, r3
 8006256:	46a2      	mov	sl, r4
 8006258:	eb19 090b 	adds.w	r9, r9, fp
 800625c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006260:	f04f 0100 	mov.w	r1, #0
 8006264:	f04f 0200 	mov.w	r2, #0
 8006268:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800626c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006270:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006274:	4689      	mov	r9, r1
 8006276:	4692      	mov	sl, r2
 8006278:	eb1b 0509 	adds.w	r5, fp, r9
 800627c:	eb4c 060a 	adc.w	r6, ip, sl
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	4619      	mov	r1, r3
 8006286:	f04f 0200 	mov.w	r2, #0
 800628a:	f04f 0300 	mov.w	r3, #0
 800628e:	f04f 0400 	mov.w	r4, #0
 8006292:	0094      	lsls	r4, r2, #2
 8006294:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006298:	008b      	lsls	r3, r1, #2
 800629a:	461a      	mov	r2, r3
 800629c:	4623      	mov	r3, r4
 800629e:	4628      	mov	r0, r5
 80062a0:	4631      	mov	r1, r6
 80062a2:	f7fa fcd9 	bl	8000c58 <__aeabi_uldivmod>
 80062a6:	4603      	mov	r3, r0
 80062a8:	460c      	mov	r4, r1
 80062aa:	461a      	mov	r2, r3
 80062ac:	4b9a      	ldr	r3, [pc, #616]	; (8006518 <UART_SetConfig+0x6f4>)
 80062ae:	fba3 1302 	umull	r1, r3, r3, r2
 80062b2:	095b      	lsrs	r3, r3, #5
 80062b4:	2164      	movs	r1, #100	; 0x64
 80062b6:	fb01 f303 	mul.w	r3, r1, r3
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	3332      	adds	r3, #50	; 0x32
 80062c0:	4a95      	ldr	r2, [pc, #596]	; (8006518 <UART_SetConfig+0x6f4>)
 80062c2:	fba2 2303 	umull	r2, r3, r2, r3
 80062c6:	095b      	lsrs	r3, r3, #5
 80062c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062cc:	4498      	add	r8, r3
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	469b      	mov	fp, r3
 80062d2:	f04f 0c00 	mov.w	ip, #0
 80062d6:	46d9      	mov	r9, fp
 80062d8:	46e2      	mov	sl, ip
 80062da:	eb19 0309 	adds.w	r3, r9, r9
 80062de:	eb4a 040a 	adc.w	r4, sl, sl
 80062e2:	4699      	mov	r9, r3
 80062e4:	46a2      	mov	sl, r4
 80062e6:	eb19 090b 	adds.w	r9, r9, fp
 80062ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062ee:	f04f 0100 	mov.w	r1, #0
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006302:	4689      	mov	r9, r1
 8006304:	4692      	mov	sl, r2
 8006306:	eb1b 0509 	adds.w	r5, fp, r9
 800630a:	eb4c 060a 	adc.w	r6, ip, sl
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	4619      	mov	r1, r3
 8006314:	f04f 0200 	mov.w	r2, #0
 8006318:	f04f 0300 	mov.w	r3, #0
 800631c:	f04f 0400 	mov.w	r4, #0
 8006320:	0094      	lsls	r4, r2, #2
 8006322:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006326:	008b      	lsls	r3, r1, #2
 8006328:	461a      	mov	r2, r3
 800632a:	4623      	mov	r3, r4
 800632c:	4628      	mov	r0, r5
 800632e:	4631      	mov	r1, r6
 8006330:	f7fa fc92 	bl	8000c58 <__aeabi_uldivmod>
 8006334:	4603      	mov	r3, r0
 8006336:	460c      	mov	r4, r1
 8006338:	461a      	mov	r2, r3
 800633a:	4b77      	ldr	r3, [pc, #476]	; (8006518 <UART_SetConfig+0x6f4>)
 800633c:	fba3 1302 	umull	r1, r3, r3, r2
 8006340:	095b      	lsrs	r3, r3, #5
 8006342:	2164      	movs	r1, #100	; 0x64
 8006344:	fb01 f303 	mul.w	r3, r1, r3
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	3332      	adds	r3, #50	; 0x32
 800634e:	4a72      	ldr	r2, [pc, #456]	; (8006518 <UART_SetConfig+0x6f4>)
 8006350:	fba2 2303 	umull	r2, r3, r2, r3
 8006354:	095b      	lsrs	r3, r3, #5
 8006356:	f003 020f 	and.w	r2, r3, #15
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4442      	add	r2, r8
 8006360:	609a      	str	r2, [r3, #8]
 8006362:	e0d0      	b.n	8006506 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006364:	f7fe fc28 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 8006368:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	469a      	mov	sl, r3
 800636e:	f04f 0b00 	mov.w	fp, #0
 8006372:	46d0      	mov	r8, sl
 8006374:	46d9      	mov	r9, fp
 8006376:	eb18 0308 	adds.w	r3, r8, r8
 800637a:	eb49 0409 	adc.w	r4, r9, r9
 800637e:	4698      	mov	r8, r3
 8006380:	46a1      	mov	r9, r4
 8006382:	eb18 080a 	adds.w	r8, r8, sl
 8006386:	eb49 090b 	adc.w	r9, r9, fp
 800638a:	f04f 0100 	mov.w	r1, #0
 800638e:	f04f 0200 	mov.w	r2, #0
 8006392:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006396:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800639a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800639e:	4688      	mov	r8, r1
 80063a0:	4691      	mov	r9, r2
 80063a2:	eb1a 0508 	adds.w	r5, sl, r8
 80063a6:	eb4b 0609 	adc.w	r6, fp, r9
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	4619      	mov	r1, r3
 80063b0:	f04f 0200 	mov.w	r2, #0
 80063b4:	f04f 0300 	mov.w	r3, #0
 80063b8:	f04f 0400 	mov.w	r4, #0
 80063bc:	0094      	lsls	r4, r2, #2
 80063be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063c2:	008b      	lsls	r3, r1, #2
 80063c4:	461a      	mov	r2, r3
 80063c6:	4623      	mov	r3, r4
 80063c8:	4628      	mov	r0, r5
 80063ca:	4631      	mov	r1, r6
 80063cc:	f7fa fc44 	bl	8000c58 <__aeabi_uldivmod>
 80063d0:	4603      	mov	r3, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	461a      	mov	r2, r3
 80063d6:	4b50      	ldr	r3, [pc, #320]	; (8006518 <UART_SetConfig+0x6f4>)
 80063d8:	fba3 2302 	umull	r2, r3, r3, r2
 80063dc:	095b      	lsrs	r3, r3, #5
 80063de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	469b      	mov	fp, r3
 80063e6:	f04f 0c00 	mov.w	ip, #0
 80063ea:	46d9      	mov	r9, fp
 80063ec:	46e2      	mov	sl, ip
 80063ee:	eb19 0309 	adds.w	r3, r9, r9
 80063f2:	eb4a 040a 	adc.w	r4, sl, sl
 80063f6:	4699      	mov	r9, r3
 80063f8:	46a2      	mov	sl, r4
 80063fa:	eb19 090b 	adds.w	r9, r9, fp
 80063fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006402:	f04f 0100 	mov.w	r1, #0
 8006406:	f04f 0200 	mov.w	r2, #0
 800640a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800640e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006412:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006416:	4689      	mov	r9, r1
 8006418:	4692      	mov	sl, r2
 800641a:	eb1b 0509 	adds.w	r5, fp, r9
 800641e:	eb4c 060a 	adc.w	r6, ip, sl
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	4619      	mov	r1, r3
 8006428:	f04f 0200 	mov.w	r2, #0
 800642c:	f04f 0300 	mov.w	r3, #0
 8006430:	f04f 0400 	mov.w	r4, #0
 8006434:	0094      	lsls	r4, r2, #2
 8006436:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800643a:	008b      	lsls	r3, r1, #2
 800643c:	461a      	mov	r2, r3
 800643e:	4623      	mov	r3, r4
 8006440:	4628      	mov	r0, r5
 8006442:	4631      	mov	r1, r6
 8006444:	f7fa fc08 	bl	8000c58 <__aeabi_uldivmod>
 8006448:	4603      	mov	r3, r0
 800644a:	460c      	mov	r4, r1
 800644c:	461a      	mov	r2, r3
 800644e:	4b32      	ldr	r3, [pc, #200]	; (8006518 <UART_SetConfig+0x6f4>)
 8006450:	fba3 1302 	umull	r1, r3, r3, r2
 8006454:	095b      	lsrs	r3, r3, #5
 8006456:	2164      	movs	r1, #100	; 0x64
 8006458:	fb01 f303 	mul.w	r3, r1, r3
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	011b      	lsls	r3, r3, #4
 8006460:	3332      	adds	r3, #50	; 0x32
 8006462:	4a2d      	ldr	r2, [pc, #180]	; (8006518 <UART_SetConfig+0x6f4>)
 8006464:	fba2 2303 	umull	r2, r3, r2, r3
 8006468:	095b      	lsrs	r3, r3, #5
 800646a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800646e:	4498      	add	r8, r3
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	469b      	mov	fp, r3
 8006474:	f04f 0c00 	mov.w	ip, #0
 8006478:	46d9      	mov	r9, fp
 800647a:	46e2      	mov	sl, ip
 800647c:	eb19 0309 	adds.w	r3, r9, r9
 8006480:	eb4a 040a 	adc.w	r4, sl, sl
 8006484:	4699      	mov	r9, r3
 8006486:	46a2      	mov	sl, r4
 8006488:	eb19 090b 	adds.w	r9, r9, fp
 800648c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006490:	f04f 0100 	mov.w	r1, #0
 8006494:	f04f 0200 	mov.w	r2, #0
 8006498:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800649c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064a4:	4689      	mov	r9, r1
 80064a6:	4692      	mov	sl, r2
 80064a8:	eb1b 0509 	adds.w	r5, fp, r9
 80064ac:	eb4c 060a 	adc.w	r6, ip, sl
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	4619      	mov	r1, r3
 80064b6:	f04f 0200 	mov.w	r2, #0
 80064ba:	f04f 0300 	mov.w	r3, #0
 80064be:	f04f 0400 	mov.w	r4, #0
 80064c2:	0094      	lsls	r4, r2, #2
 80064c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80064c8:	008b      	lsls	r3, r1, #2
 80064ca:	461a      	mov	r2, r3
 80064cc:	4623      	mov	r3, r4
 80064ce:	4628      	mov	r0, r5
 80064d0:	4631      	mov	r1, r6
 80064d2:	f7fa fbc1 	bl	8000c58 <__aeabi_uldivmod>
 80064d6:	4603      	mov	r3, r0
 80064d8:	460c      	mov	r4, r1
 80064da:	461a      	mov	r2, r3
 80064dc:	4b0e      	ldr	r3, [pc, #56]	; (8006518 <UART_SetConfig+0x6f4>)
 80064de:	fba3 1302 	umull	r1, r3, r3, r2
 80064e2:	095b      	lsrs	r3, r3, #5
 80064e4:	2164      	movs	r1, #100	; 0x64
 80064e6:	fb01 f303 	mul.w	r3, r1, r3
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	011b      	lsls	r3, r3, #4
 80064ee:	3332      	adds	r3, #50	; 0x32
 80064f0:	4a09      	ldr	r2, [pc, #36]	; (8006518 <UART_SetConfig+0x6f4>)
 80064f2:	fba2 2303 	umull	r2, r3, r2, r3
 80064f6:	095b      	lsrs	r3, r3, #5
 80064f8:	f003 020f 	and.w	r2, r3, #15
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4442      	add	r2, r8
 8006502:	609a      	str	r2, [r3, #8]
}
 8006504:	e7ff      	b.n	8006506 <UART_SetConfig+0x6e2>
 8006506:	bf00      	nop
 8006508:	3714      	adds	r7, #20
 800650a:	46bd      	mov	sp, r7
 800650c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006510:	40011000 	.word	0x40011000
 8006514:	40011400 	.word	0x40011400
 8006518:	51eb851f 	.word	0x51eb851f

0800651c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800651c:	b084      	sub	sp, #16
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	f107 001c 	add.w	r0, r7, #28
 800652a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	2b01      	cmp	r3, #1
 8006532:	d122      	bne.n	800657a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006538:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800655c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800655e:	2b01      	cmp	r3, #1
 8006560:	d105      	bne.n	800656e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f001 fac6 	bl	8007b00 <USB_CoreReset>
 8006574:	4603      	mov	r3, r0
 8006576:	73fb      	strb	r3, [r7, #15]
 8006578:	e01a      	b.n	80065b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f001 faba 	bl	8007b00 <USB_CoreReset>
 800658c:	4603      	mov	r3, r0
 800658e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006592:	2b00      	cmp	r3, #0
 8006594:	d106      	bne.n	80065a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	639a      	str	r2, [r3, #56]	; 0x38
 80065a2:	e005      	b.n	80065b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d10b      	bne.n	80065ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f043 0206 	orr.w	r2, r3, #6
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f043 0220 	orr.w	r2, r3, #32
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80065ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065da:	b004      	add	sp, #16
 80065dc:	4770      	bx	lr
	...

080065e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b087      	sub	sp, #28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	4613      	mov	r3, r2
 80065ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80065ee:	79fb      	ldrb	r3, [r7, #7]
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d165      	bne.n	80066c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	4a41      	ldr	r2, [pc, #260]	; (80066fc <USB_SetTurnaroundTime+0x11c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d906      	bls.n	800660a <USB_SetTurnaroundTime+0x2a>
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	4a40      	ldr	r2, [pc, #256]	; (8006700 <USB_SetTurnaroundTime+0x120>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d802      	bhi.n	800660a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006604:	230f      	movs	r3, #15
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	e062      	b.n	80066d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	4a3c      	ldr	r2, [pc, #240]	; (8006700 <USB_SetTurnaroundTime+0x120>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d906      	bls.n	8006620 <USB_SetTurnaroundTime+0x40>
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	4a3b      	ldr	r2, [pc, #236]	; (8006704 <USB_SetTurnaroundTime+0x124>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d802      	bhi.n	8006620 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800661a:	230e      	movs	r3, #14
 800661c:	617b      	str	r3, [r7, #20]
 800661e:	e057      	b.n	80066d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4a38      	ldr	r2, [pc, #224]	; (8006704 <USB_SetTurnaroundTime+0x124>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d906      	bls.n	8006636 <USB_SetTurnaroundTime+0x56>
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	4a37      	ldr	r2, [pc, #220]	; (8006708 <USB_SetTurnaroundTime+0x128>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d802      	bhi.n	8006636 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006630:	230d      	movs	r3, #13
 8006632:	617b      	str	r3, [r7, #20]
 8006634:	e04c      	b.n	80066d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	4a33      	ldr	r2, [pc, #204]	; (8006708 <USB_SetTurnaroundTime+0x128>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d906      	bls.n	800664c <USB_SetTurnaroundTime+0x6c>
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	4a32      	ldr	r2, [pc, #200]	; (800670c <USB_SetTurnaroundTime+0x12c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d802      	bhi.n	800664c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006646:	230c      	movs	r3, #12
 8006648:	617b      	str	r3, [r7, #20]
 800664a:	e041      	b.n	80066d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	4a2f      	ldr	r2, [pc, #188]	; (800670c <USB_SetTurnaroundTime+0x12c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d906      	bls.n	8006662 <USB_SetTurnaroundTime+0x82>
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	4a2e      	ldr	r2, [pc, #184]	; (8006710 <USB_SetTurnaroundTime+0x130>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d802      	bhi.n	8006662 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800665c:	230b      	movs	r3, #11
 800665e:	617b      	str	r3, [r7, #20]
 8006660:	e036      	b.n	80066d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	4a2a      	ldr	r2, [pc, #168]	; (8006710 <USB_SetTurnaroundTime+0x130>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d906      	bls.n	8006678 <USB_SetTurnaroundTime+0x98>
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	4a29      	ldr	r2, [pc, #164]	; (8006714 <USB_SetTurnaroundTime+0x134>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d802      	bhi.n	8006678 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006672:	230a      	movs	r3, #10
 8006674:	617b      	str	r3, [r7, #20]
 8006676:	e02b      	b.n	80066d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	4a26      	ldr	r2, [pc, #152]	; (8006714 <USB_SetTurnaroundTime+0x134>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d906      	bls.n	800668e <USB_SetTurnaroundTime+0xae>
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	4a25      	ldr	r2, [pc, #148]	; (8006718 <USB_SetTurnaroundTime+0x138>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d802      	bhi.n	800668e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006688:	2309      	movs	r3, #9
 800668a:	617b      	str	r3, [r7, #20]
 800668c:	e020      	b.n	80066d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	4a21      	ldr	r2, [pc, #132]	; (8006718 <USB_SetTurnaroundTime+0x138>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d906      	bls.n	80066a4 <USB_SetTurnaroundTime+0xc4>
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	4a20      	ldr	r2, [pc, #128]	; (800671c <USB_SetTurnaroundTime+0x13c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d802      	bhi.n	80066a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800669e:	2308      	movs	r3, #8
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	e015      	b.n	80066d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	4a1d      	ldr	r2, [pc, #116]	; (800671c <USB_SetTurnaroundTime+0x13c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d906      	bls.n	80066ba <USB_SetTurnaroundTime+0xda>
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	4a1c      	ldr	r2, [pc, #112]	; (8006720 <USB_SetTurnaroundTime+0x140>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d802      	bhi.n	80066ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80066b4:	2307      	movs	r3, #7
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	e00a      	b.n	80066d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80066ba:	2306      	movs	r3, #6
 80066bc:	617b      	str	r3, [r7, #20]
 80066be:	e007      	b.n	80066d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80066c0:	79fb      	ldrb	r3, [r7, #7]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d102      	bne.n	80066cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80066c6:	2309      	movs	r3, #9
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	e001      	b.n	80066d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80066cc:	2309      	movs	r3, #9
 80066ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	68da      	ldr	r2, [r3, #12]
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	029b      	lsls	r3, r3, #10
 80066e4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80066e8:	431a      	orrs	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	371c      	adds	r7, #28
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	00d8acbf 	.word	0x00d8acbf
 8006700:	00e4e1bf 	.word	0x00e4e1bf
 8006704:	00f423ff 	.word	0x00f423ff
 8006708:	0106737f 	.word	0x0106737f
 800670c:	011a499f 	.word	0x011a499f
 8006710:	01312cff 	.word	0x01312cff
 8006714:	014ca43f 	.word	0x014ca43f
 8006718:	016e35ff 	.word	0x016e35ff
 800671c:	01a6ab1f 	.word	0x01a6ab1f
 8006720:	01e847ff 	.word	0x01e847ff

08006724 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f043 0201 	orr.w	r2, r3, #1
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f023 0201 	bic.w	r2, r3, #1
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	460b      	mov	r3, r1
 8006772:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d106      	bne.n	8006794 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	60da      	str	r2, [r3, #12]
 8006792:	e00b      	b.n	80067ac <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006794:	78fb      	ldrb	r3, [r7, #3]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d106      	bne.n	80067a8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	60da      	str	r2, [r3, #12]
 80067a6:	e001      	b.n	80067ac <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e003      	b.n	80067b4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80067ac:	2032      	movs	r0, #50	; 0x32
 80067ae:	f7fb fd99 	bl	80022e4 <HAL_Delay>

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3708      	adds	r7, #8
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067bc:	b084      	sub	sp, #16
 80067be:	b580      	push	{r7, lr}
 80067c0:	b086      	sub	sp, #24
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80067ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80067d6:	2300      	movs	r3, #0
 80067d8:	613b      	str	r3, [r7, #16]
 80067da:	e009      	b.n	80067f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	3340      	adds	r3, #64	; 0x40
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	2200      	movs	r2, #0
 80067e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	3301      	adds	r3, #1
 80067ee:	613b      	str	r3, [r7, #16]
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	2b0e      	cmp	r3, #14
 80067f4:	d9f2      	bls.n	80067dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80067f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d11c      	bne.n	8006836 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800680a:	f043 0302 	orr.w	r3, r3, #2
 800680e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006814:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006820:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	639a      	str	r2, [r3, #56]	; 0x38
 8006834:	e00b      	b.n	800684e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006846:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006854:	461a      	mov	r2, r3
 8006856:	2300      	movs	r3, #0
 8006858:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006860:	4619      	mov	r1, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006868:	461a      	mov	r2, r3
 800686a:	680b      	ldr	r3, [r1, #0]
 800686c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800686e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006870:	2b01      	cmp	r3, #1
 8006872:	d10c      	bne.n	800688e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006876:	2b00      	cmp	r3, #0
 8006878:	d104      	bne.n	8006884 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800687a:	2100      	movs	r1, #0
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f949 	bl	8006b14 <USB_SetDevSpeed>
 8006882:	e008      	b.n	8006896 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006884:	2101      	movs	r1, #1
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f944 	bl	8006b14 <USB_SetDevSpeed>
 800688c:	e003      	b.n	8006896 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800688e:	2103      	movs	r1, #3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f93f 	bl	8006b14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006896:	2110      	movs	r1, #16
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 f8f3 	bl	8006a84 <USB_FlushTxFifo>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f911 	bl	8006ad0 <USB_FlushRxFifo>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d001      	beq.n	80068b8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068be:	461a      	mov	r2, r3
 80068c0:	2300      	movs	r3, #0
 80068c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ca:	461a      	mov	r2, r3
 80068cc:	2300      	movs	r3, #0
 80068ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d6:	461a      	mov	r2, r3
 80068d8:	2300      	movs	r3, #0
 80068da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068dc:	2300      	movs	r3, #0
 80068de:	613b      	str	r3, [r7, #16]
 80068e0:	e043      	b.n	800696a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068f8:	d118      	bne.n	800692c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10a      	bne.n	8006916 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690c:	461a      	mov	r2, r3
 800690e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006912:	6013      	str	r3, [r2, #0]
 8006914:	e013      	b.n	800693e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006922:	461a      	mov	r2, r3
 8006924:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006928:	6013      	str	r3, [r2, #0]
 800692a:	e008      	b.n	800693e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006938:	461a      	mov	r2, r3
 800693a:	2300      	movs	r3, #0
 800693c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694a:	461a      	mov	r2, r3
 800694c:	2300      	movs	r3, #0
 800694e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800695c:	461a      	mov	r2, r3
 800695e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006962:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	3301      	adds	r3, #1
 8006968:	613b      	str	r3, [r7, #16]
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	429a      	cmp	r2, r3
 8006970:	d3b7      	bcc.n	80068e2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006972:	2300      	movs	r3, #0
 8006974:	613b      	str	r3, [r7, #16]
 8006976:	e043      	b.n	8006a00 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800698a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800698e:	d118      	bne.n	80069c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10a      	bne.n	80069ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	4413      	add	r3, r2
 800699e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a2:	461a      	mov	r2, r3
 80069a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069a8:	6013      	str	r3, [r2, #0]
 80069aa:	e013      	b.n	80069d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b8:	461a      	mov	r2, r3
 80069ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069be:	6013      	str	r3, [r2, #0]
 80069c0:	e008      	b.n	80069d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ce:	461a      	mov	r2, r3
 80069d0:	2300      	movs	r3, #0
 80069d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e0:	461a      	mov	r2, r3
 80069e2:	2300      	movs	r3, #0
 80069e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f2:	461a      	mov	r2, r3
 80069f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	3301      	adds	r3, #1
 80069fe:	613b      	str	r3, [r7, #16]
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d3b7      	bcc.n	8006978 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006a28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d105      	bne.n	8006a3c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	f043 0210 	orr.w	r2, r3, #16
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	699a      	ldr	r2, [r3, #24]
 8006a40:	4b0f      	ldr	r3, [pc, #60]	; (8006a80 <USB_DevInit+0x2c4>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d005      	beq.n	8006a5a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	f043 0208 	orr.w	r2, r3, #8
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d107      	bne.n	8006a70 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a68:	f043 0304 	orr.w	r3, r3, #4
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a7c:	b004      	add	sp, #16
 8006a7e:	4770      	bx	lr
 8006a80:	803c3800 	.word	0x803c3800

08006a84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	019b      	lsls	r3, r3, #6
 8006a96:	f043 0220 	orr.w	r2, r3, #32
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	60fb      	str	r3, [r7, #12]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	4a09      	ldr	r2, [pc, #36]	; (8006acc <USB_FlushTxFifo+0x48>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d901      	bls.n	8006ab0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e006      	b.n	8006abe <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	f003 0320 	and.w	r3, r3, #32
 8006ab8:	2b20      	cmp	r3, #32
 8006aba:	d0f0      	beq.n	8006a9e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3714      	adds	r7, #20
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	00030d40 	.word	0x00030d40

08006ad0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2210      	movs	r2, #16
 8006ae0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4a09      	ldr	r2, [pc, #36]	; (8006b10 <USB_FlushRxFifo+0x40>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d901      	bls.n	8006af4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e006      	b.n	8006b02 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	f003 0310 	and.w	r3, r3, #16
 8006afc:	2b10      	cmp	r3, #16
 8006afe:	d0f0      	beq.n	8006ae2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	00030d40 	.word	0x00030d40

08006b14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	78fb      	ldrb	r3, [r7, #3]
 8006b2e:	68f9      	ldr	r1, [r7, #12]
 8006b30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b34:	4313      	orrs	r3, r2
 8006b36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b087      	sub	sp, #28
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f003 0306 	and.w	r3, r3, #6
 8006b5e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d102      	bne.n	8006b6c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006b66:	2300      	movs	r3, #0
 8006b68:	75fb      	strb	r3, [r7, #23]
 8006b6a:	e00a      	b.n	8006b82 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d002      	beq.n	8006b78 <USB_GetDevSpeed+0x32>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2b06      	cmp	r3, #6
 8006b76:	d102      	bne.n	8006b7e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006b78:	2302      	movs	r3, #2
 8006b7a:	75fb      	strb	r3, [r7, #23]
 8006b7c:	e001      	b.n	8006b82 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006b7e:	230f      	movs	r3, #15
 8006b80:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	371c      	adds	r7, #28
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	785b      	ldrb	r3, [r3, #1]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d13a      	bne.n	8006c22 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb2:	69da      	ldr	r2, [r3, #28]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	f003 030f 	and.w	r3, r3, #15
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	68f9      	ldr	r1, [r7, #12]
 8006bc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d155      	bne.n	8006c90 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	78db      	ldrb	r3, [r3, #3]
 8006bfe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	059b      	lsls	r3, r3, #22
 8006c06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	0151      	lsls	r1, r2, #5
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	440a      	add	r2, r1
 8006c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	e036      	b.n	8006c90 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c28:	69da      	ldr	r2, [r3, #28]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	f003 030f 	and.w	r3, r3, #15
 8006c32:	2101      	movs	r1, #1
 8006c34:	fa01 f303 	lsl.w	r3, r1, r3
 8006c38:	041b      	lsls	r3, r3, #16
 8006c3a:	68f9      	ldr	r1, [r7, #12]
 8006c3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c40:	4313      	orrs	r3, r2
 8006c42:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d11a      	bne.n	8006c90 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	78db      	ldrb	r3, [r3, #3]
 8006c74:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c76:	430b      	orrs	r3, r1
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	0151      	lsls	r1, r2, #5
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	440a      	add	r2, r1
 8006c82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c8e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
	...

08006ca0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	785b      	ldrb	r3, [r3, #1]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d161      	bne.n	8006d80 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cd2:	d11f      	bne.n	8006d14 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	0151      	lsls	r1, r2, #5
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	440a      	add	r2, r1
 8006cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006cf2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	0151      	lsls	r1, r2, #5
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	440a      	add	r2, r1
 8006d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	f003 030f 	and.w	r3, r3, #15
 8006d24:	2101      	movs	r1, #1
 8006d26:	fa01 f303 	lsl.w	r3, r1, r3
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	43db      	mvns	r3, r3
 8006d2e:	68f9      	ldr	r1, [r7, #12]
 8006d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d34:	4013      	ands	r3, r2
 8006d36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d3e:	69da      	ldr	r2, [r3, #28]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	f003 030f 	and.w	r3, r3, #15
 8006d48:	2101      	movs	r1, #1
 8006d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	43db      	mvns	r3, r3
 8006d52:	68f9      	ldr	r1, [r7, #12]
 8006d54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d58:	4013      	ands	r3, r2
 8006d5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	0159      	lsls	r1, r3, #5
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	440b      	add	r3, r1
 8006d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d76:	4619      	mov	r1, r3
 8006d78:	4b35      	ldr	r3, [pc, #212]	; (8006e50 <USB_DeactivateEndpoint+0x1b0>)
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	600b      	str	r3, [r1, #0]
 8006d7e:	e060      	b.n	8006e42 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d96:	d11f      	bne.n	8006dd8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	0151      	lsls	r1, r2, #5
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	440a      	add	r2, r1
 8006dae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006db2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006db6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	0151      	lsls	r1, r2, #5
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	440a      	add	r2, r1
 8006dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	f003 030f 	and.w	r3, r3, #15
 8006de8:	2101      	movs	r1, #1
 8006dea:	fa01 f303 	lsl.w	r3, r1, r3
 8006dee:	041b      	lsls	r3, r3, #16
 8006df0:	43db      	mvns	r3, r3
 8006df2:	68f9      	ldr	r1, [r7, #12]
 8006df4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006df8:	4013      	ands	r3, r2
 8006dfa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e02:	69da      	ldr	r2, [r3, #28]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	f003 030f 	and.w	r3, r3, #15
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e12:	041b      	lsls	r3, r3, #16
 8006e14:	43db      	mvns	r3, r3
 8006e16:	68f9      	ldr	r1, [r7, #12]
 8006e18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	0159      	lsls	r1, r3, #5
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	440b      	add	r3, r1
 8006e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	4b05      	ldr	r3, [pc, #20]	; (8006e54 <USB_DeactivateEndpoint+0x1b4>)
 8006e3e:	4013      	ands	r3, r2
 8006e40:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	ec337800 	.word	0xec337800
 8006e54:	eff37800 	.word	0xeff37800

08006e58 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b08a      	sub	sp, #40	; 0x28
 8006e5c:	af02      	add	r7, sp, #8
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	4613      	mov	r3, r2
 8006e64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	785b      	ldrb	r3, [r3, #1]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	f040 815c 	bne.w	8007132 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d132      	bne.n	8006ee8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	015a      	lsls	r2, r3, #5
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	0151      	lsls	r1, r2, #5
 8006e94:	69fa      	ldr	r2, [r7, #28]
 8006e96:	440a      	add	r2, r1
 8006e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ea0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ea4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	69ba      	ldr	r2, [r7, #24]
 8006eb6:	0151      	lsls	r1, r2, #5
 8006eb8:	69fa      	ldr	r2, [r7, #28]
 8006eba:	440a      	add	r2, r1
 8006ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ec0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ec4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	0151      	lsls	r1, r2, #5
 8006ed8:	69fa      	ldr	r2, [r7, #28]
 8006eda:	440a      	add	r2, r1
 8006edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ee0:	0cdb      	lsrs	r3, r3, #19
 8006ee2:	04db      	lsls	r3, r3, #19
 8006ee4:	6113      	str	r3, [r2, #16]
 8006ee6:	e074      	b.n	8006fd2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	0151      	lsls	r1, r2, #5
 8006efa:	69fa      	ldr	r2, [r7, #28]
 8006efc:	440a      	add	r2, r1
 8006efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f02:	0cdb      	lsrs	r3, r3, #19
 8006f04:	04db      	lsls	r3, r3, #19
 8006f06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	69ba      	ldr	r2, [r7, #24]
 8006f18:	0151      	lsls	r1, r2, #5
 8006f1a:	69fa      	ldr	r2, [r7, #28]
 8006f1c:	440a      	add	r2, r1
 8006f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f22:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f26:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	015a      	lsls	r2, r3, #5
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	4413      	add	r3, r2
 8006f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f38:	691a      	ldr	r2, [r3, #16]
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	6959      	ldr	r1, [r3, #20]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	440b      	add	r3, r1
 8006f44:	1e59      	subs	r1, r3, #1
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f4e:	04d9      	lsls	r1, r3, #19
 8006f50:	4b9d      	ldr	r3, [pc, #628]	; (80071c8 <USB_EPStartXfer+0x370>)
 8006f52:	400b      	ands	r3, r1
 8006f54:	69b9      	ldr	r1, [r7, #24]
 8006f56:	0148      	lsls	r0, r1, #5
 8006f58:	69f9      	ldr	r1, [r7, #28]
 8006f5a:	4401      	add	r1, r0
 8006f5c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006f60:	4313      	orrs	r3, r2
 8006f62:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f70:	691a      	ldr	r2, [r3, #16]
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f7a:	69b9      	ldr	r1, [r7, #24]
 8006f7c:	0148      	lsls	r0, r1, #5
 8006f7e:	69f9      	ldr	r1, [r7, #28]
 8006f80:	4401      	add	r1, r0
 8006f82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006f86:	4313      	orrs	r3, r2
 8006f88:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	78db      	ldrb	r3, [r3, #3]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d11f      	bne.n	8006fd2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	0151      	lsls	r1, r2, #5
 8006fa4:	69fa      	ldr	r2, [r7, #28]
 8006fa6:	440a      	add	r2, r1
 8006fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006fb0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	69ba      	ldr	r2, [r7, #24]
 8006fc2:	0151      	lsls	r1, r2, #5
 8006fc4:	69fa      	ldr	r2, [r7, #28]
 8006fc6:	440a      	add	r2, r1
 8006fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fd0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006fd2:	79fb      	ldrb	r3, [r7, #7]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d14b      	bne.n	8007070 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d009      	beq.n	8006ff4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fec:	461a      	mov	r2, r3
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	78db      	ldrb	r3, [r3, #3]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d128      	bne.n	800704e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007008:	2b00      	cmp	r3, #0
 800700a:	d110      	bne.n	800702e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	015a      	lsls	r2, r3, #5
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	4413      	add	r3, r2
 8007014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	69ba      	ldr	r2, [r7, #24]
 800701c:	0151      	lsls	r1, r2, #5
 800701e:	69fa      	ldr	r2, [r7, #28]
 8007020:	440a      	add	r2, r1
 8007022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007026:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800702a:	6013      	str	r3, [r2, #0]
 800702c:	e00f      	b.n	800704e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	015a      	lsls	r2, r3, #5
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	4413      	add	r3, r2
 8007036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	69ba      	ldr	r2, [r7, #24]
 800703e:	0151      	lsls	r1, r2, #5
 8007040:	69fa      	ldr	r2, [r7, #28]
 8007042:	440a      	add	r2, r1
 8007044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800704c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	015a      	lsls	r2, r3, #5
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	4413      	add	r3, r2
 8007056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	0151      	lsls	r1, r2, #5
 8007060:	69fa      	ldr	r2, [r7, #28]
 8007062:	440a      	add	r2, r1
 8007064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007068:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800706c:	6013      	str	r3, [r2, #0]
 800706e:	e12f      	b.n	80072d0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	0151      	lsls	r1, r2, #5
 8007082:	69fa      	ldr	r2, [r7, #28]
 8007084:	440a      	add	r2, r1
 8007086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800708a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800708e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	78db      	ldrb	r3, [r3, #3]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d015      	beq.n	80070c4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	695b      	ldr	r3, [r3, #20]
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 8117 	beq.w	80072d0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	2101      	movs	r1, #1
 80070b4:	fa01 f303 	lsl.w	r3, r1, r3
 80070b8:	69f9      	ldr	r1, [r7, #28]
 80070ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070be:	4313      	orrs	r3, r2
 80070c0:	634b      	str	r3, [r1, #52]	; 0x34
 80070c2:	e105      	b.n	80072d0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d110      	bne.n	80070f6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	69ba      	ldr	r2, [r7, #24]
 80070e4:	0151      	lsls	r1, r2, #5
 80070e6:	69fa      	ldr	r2, [r7, #28]
 80070e8:	440a      	add	r2, r1
 80070ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070f2:	6013      	str	r3, [r2, #0]
 80070f4:	e00f      	b.n	8007116 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	69ba      	ldr	r2, [r7, #24]
 8007106:	0151      	lsls	r1, r2, #5
 8007108:	69fa      	ldr	r2, [r7, #28]
 800710a:	440a      	add	r2, r1
 800710c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007114:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	68d9      	ldr	r1, [r3, #12]
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	781a      	ldrb	r2, [r3, #0]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	b298      	uxth	r0, r3
 8007124:	79fb      	ldrb	r3, [r7, #7]
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	4603      	mov	r3, r0
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 fa2b 	bl	8007586 <USB_WritePacket>
 8007130:	e0ce      	b.n	80072d0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	4413      	add	r3, r2
 800713a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	0151      	lsls	r1, r2, #5
 8007144:	69fa      	ldr	r2, [r7, #28]
 8007146:	440a      	add	r2, r1
 8007148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800714c:	0cdb      	lsrs	r3, r3, #19
 800714e:	04db      	lsls	r3, r3, #19
 8007150:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	4413      	add	r3, r2
 800715a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	0151      	lsls	r1, r2, #5
 8007164:	69fa      	ldr	r2, [r7, #28]
 8007166:	440a      	add	r2, r1
 8007168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800716c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007170:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007174:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d126      	bne.n	80071cc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	015a      	lsls	r2, r3, #5
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	4413      	add	r3, r2
 8007186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800718a:	691a      	ldr	r2, [r3, #16]
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007194:	69b9      	ldr	r1, [r7, #24]
 8007196:	0148      	lsls	r0, r1, #5
 8007198:	69f9      	ldr	r1, [r7, #28]
 800719a:	4401      	add	r1, r0
 800719c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071a0:	4313      	orrs	r3, r2
 80071a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	69ba      	ldr	r2, [r7, #24]
 80071b4:	0151      	lsls	r1, r2, #5
 80071b6:	69fa      	ldr	r2, [r7, #28]
 80071b8:	440a      	add	r2, r1
 80071ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071c2:	6113      	str	r3, [r2, #16]
 80071c4:	e036      	b.n	8007234 <USB_EPStartXfer+0x3dc>
 80071c6:	bf00      	nop
 80071c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	695a      	ldr	r2, [r3, #20]
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	4413      	add	r3, r2
 80071d6:	1e5a      	subs	r2, r3, #1
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ee:	691a      	ldr	r2, [r3, #16]
 80071f0:	8afb      	ldrh	r3, [r7, #22]
 80071f2:	04d9      	lsls	r1, r3, #19
 80071f4:	4b39      	ldr	r3, [pc, #228]	; (80072dc <USB_EPStartXfer+0x484>)
 80071f6:	400b      	ands	r3, r1
 80071f8:	69b9      	ldr	r1, [r7, #24]
 80071fa:	0148      	lsls	r0, r1, #5
 80071fc:	69f9      	ldr	r1, [r7, #28]
 80071fe:	4401      	add	r1, r0
 8007200:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007204:	4313      	orrs	r3, r2
 8007206:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	015a      	lsls	r2, r3, #5
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	4413      	add	r3, r2
 8007210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007214:	691a      	ldr	r2, [r3, #16]
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	8af9      	ldrh	r1, [r7, #22]
 800721c:	fb01 f303 	mul.w	r3, r1, r3
 8007220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007224:	69b9      	ldr	r1, [r7, #24]
 8007226:	0148      	lsls	r0, r1, #5
 8007228:	69f9      	ldr	r1, [r7, #28]
 800722a:	4401      	add	r1, r0
 800722c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007230:	4313      	orrs	r3, r2
 8007232:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007234:	79fb      	ldrb	r3, [r7, #7]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d10d      	bne.n	8007256 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d009      	beq.n	8007256 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	68d9      	ldr	r1, [r3, #12]
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	4413      	add	r3, r2
 800724e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007252:	460a      	mov	r2, r1
 8007254:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	78db      	ldrb	r3, [r3, #3]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d128      	bne.n	80072b0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800726a:	2b00      	cmp	r3, #0
 800726c:	d110      	bne.n	8007290 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	0151      	lsls	r1, r2, #5
 8007280:	69fa      	ldr	r2, [r7, #28]
 8007282:	440a      	add	r2, r1
 8007284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007288:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800728c:	6013      	str	r3, [r2, #0]
 800728e:	e00f      	b.n	80072b0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	4413      	add	r3, r2
 8007298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	69ba      	ldr	r2, [r7, #24]
 80072a0:	0151      	lsls	r1, r2, #5
 80072a2:	69fa      	ldr	r2, [r7, #28]
 80072a4:	440a      	add	r2, r1
 80072a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	69ba      	ldr	r2, [r7, #24]
 80072c0:	0151      	lsls	r1, r2, #5
 80072c2:	69fa      	ldr	r2, [r7, #28]
 80072c4:	440a      	add	r2, r1
 80072c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3720      	adds	r7, #32
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	1ff80000 	.word	0x1ff80000

080072e0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	4613      	mov	r3, r2
 80072ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	785b      	ldrb	r3, [r3, #1]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	f040 80cd 	bne.w	800749c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d132      	bne.n	8007370 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	4413      	add	r3, r2
 8007312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	0151      	lsls	r1, r2, #5
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	440a      	add	r2, r1
 8007320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007324:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007328:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800732c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	015a      	lsls	r2, r3, #5
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	4413      	add	r3, r2
 8007336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	0151      	lsls	r1, r2, #5
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	440a      	add	r2, r1
 8007344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007348:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800734c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	015a      	lsls	r2, r3, #5
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	4413      	add	r3, r2
 8007356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	0151      	lsls	r1, r2, #5
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	440a      	add	r2, r1
 8007364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007368:	0cdb      	lsrs	r3, r3, #19
 800736a:	04db      	lsls	r3, r3, #19
 800736c:	6113      	str	r3, [r2, #16]
 800736e:	e04e      	b.n	800740e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	4413      	add	r3, r2
 8007378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	0151      	lsls	r1, r2, #5
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	440a      	add	r2, r1
 8007386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800738a:	0cdb      	lsrs	r3, r3, #19
 800738c:	04db      	lsls	r3, r3, #19
 800738e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	4413      	add	r3, r2
 8007398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	0151      	lsls	r1, r2, #5
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	440a      	add	r2, r1
 80073a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073b2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	695a      	ldr	r2, [r3, #20]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d903      	bls.n	80073c8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	689a      	ldr	r2, [r3, #8]
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	0151      	lsls	r1, r2, #5
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	440a      	add	r2, r1
 80073de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	015a      	lsls	r2, r3, #5
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	4413      	add	r3, r2
 80073f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f4:	691a      	ldr	r2, [r3, #16]
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073fe:	6939      	ldr	r1, [r7, #16]
 8007400:	0148      	lsls	r0, r1, #5
 8007402:	6979      	ldr	r1, [r7, #20]
 8007404:	4401      	add	r1, r0
 8007406:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800740a:	4313      	orrs	r3, r2
 800740c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800740e:	79fb      	ldrb	r3, [r7, #7]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d11e      	bne.n	8007452 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d009      	beq.n	8007430 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	4413      	add	r3, r2
 8007424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007428:	461a      	mov	r2, r3
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	4413      	add	r3, r2
 8007438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	0151      	lsls	r1, r2, #5
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	440a      	add	r2, r1
 8007446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800744a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800744e:	6013      	str	r3, [r2, #0]
 8007450:	e092      	b.n	8007578 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	4413      	add	r3, r2
 800745a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	0151      	lsls	r1, r2, #5
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	440a      	add	r2, r1
 8007468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800746c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007470:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d07e      	beq.n	8007578 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	f003 030f 	and.w	r3, r3, #15
 800748a:	2101      	movs	r1, #1
 800748c:	fa01 f303 	lsl.w	r3, r1, r3
 8007490:	6979      	ldr	r1, [r7, #20]
 8007492:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007496:	4313      	orrs	r3, r2
 8007498:	634b      	str	r3, [r1, #52]	; 0x34
 800749a:	e06d      	b.n	8007578 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	015a      	lsls	r2, r3, #5
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	4413      	add	r3, r2
 80074a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	0151      	lsls	r1, r2, #5
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	440a      	add	r2, r1
 80074b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074b6:	0cdb      	lsrs	r3, r3, #19
 80074b8:	04db      	lsls	r3, r3, #19
 80074ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	015a      	lsls	r2, r3, #5
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	4413      	add	r3, r2
 80074c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	0151      	lsls	r1, r2, #5
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	440a      	add	r2, r1
 80074d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074de:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d003      	beq.n	80074f0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	689a      	ldr	r2, [r3, #8]
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	0151      	lsls	r1, r2, #5
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	440a      	add	r2, r1
 8007506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800750a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800750e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	015a      	lsls	r2, r3, #5
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	4413      	add	r3, r2
 8007518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800751c:	691a      	ldr	r2, [r3, #16]
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007526:	6939      	ldr	r1, [r7, #16]
 8007528:	0148      	lsls	r0, r1, #5
 800752a:	6979      	ldr	r1, [r7, #20]
 800752c:	4401      	add	r1, r0
 800752e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007532:	4313      	orrs	r3, r2
 8007534:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007536:	79fb      	ldrb	r3, [r7, #7]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d10d      	bne.n	8007558 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d009      	beq.n	8007558 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	68d9      	ldr	r1, [r3, #12]
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	015a      	lsls	r2, r3, #5
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	4413      	add	r3, r2
 8007550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007554:	460a      	mov	r2, r1
 8007556:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	015a      	lsls	r2, r3, #5
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	4413      	add	r3, r2
 8007560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	0151      	lsls	r1, r2, #5
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	440a      	add	r2, r1
 800756e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007572:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007576:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	371c      	adds	r7, #28
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007586:	b480      	push	{r7}
 8007588:	b089      	sub	sp, #36	; 0x24
 800758a:	af00      	add	r7, sp, #0
 800758c:	60f8      	str	r0, [r7, #12]
 800758e:	60b9      	str	r1, [r7, #8]
 8007590:	4611      	mov	r1, r2
 8007592:	461a      	mov	r2, r3
 8007594:	460b      	mov	r3, r1
 8007596:	71fb      	strb	r3, [r7, #7]
 8007598:	4613      	mov	r3, r2
 800759a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80075a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d11a      	bne.n	80075e2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80075ac:	88bb      	ldrh	r3, [r7, #4]
 80075ae:	3303      	adds	r3, #3
 80075b0:	089b      	lsrs	r3, r3, #2
 80075b2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80075b4:	2300      	movs	r3, #0
 80075b6:	61bb      	str	r3, [r7, #24]
 80075b8:	e00f      	b.n	80075da <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80075ba:	79fb      	ldrb	r3, [r7, #7]
 80075bc:	031a      	lsls	r2, r3, #12
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	4413      	add	r3, r2
 80075c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075c6:	461a      	mov	r2, r3
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	3304      	adds	r3, #4
 80075d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	3301      	adds	r3, #1
 80075d8:	61bb      	str	r3, [r7, #24]
 80075da:	69ba      	ldr	r2, [r7, #24]
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d3eb      	bcc.n	80075ba <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3724      	adds	r7, #36	; 0x24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b089      	sub	sp, #36	; 0x24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	4613      	mov	r3, r2
 80075fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007606:	88fb      	ldrh	r3, [r7, #6]
 8007608:	3303      	adds	r3, #3
 800760a:	089b      	lsrs	r3, r3, #2
 800760c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800760e:	2300      	movs	r3, #0
 8007610:	61bb      	str	r3, [r7, #24]
 8007612:	e00b      	b.n	800762c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	3304      	adds	r3, #4
 8007624:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	3301      	adds	r3, #1
 800762a:	61bb      	str	r3, [r7, #24]
 800762c:	69ba      	ldr	r2, [r7, #24]
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	429a      	cmp	r2, r3
 8007632:	d3ef      	bcc.n	8007614 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007634:	69fb      	ldr	r3, [r7, #28]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3724      	adds	r7, #36	; 0x24
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007642:	b480      	push	{r7}
 8007644:	b085      	sub	sp, #20
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	785b      	ldrb	r3, [r3, #1]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d12c      	bne.n	80076b8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	015a      	lsls	r2, r3, #5
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	4413      	add	r3, r2
 8007666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	db12      	blt.n	8007696 <USB_EPSetStall+0x54>
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00f      	beq.n	8007696 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	4413      	add	r3, r2
 800767e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	0151      	lsls	r1, r2, #5
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	440a      	add	r2, r1
 800768c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007690:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007694:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	015a      	lsls	r2, r3, #5
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	4413      	add	r3, r2
 800769e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	0151      	lsls	r1, r2, #5
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	440a      	add	r2, r1
 80076ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076b4:	6013      	str	r3, [r2, #0]
 80076b6:	e02b      	b.n	8007710 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	db12      	blt.n	80076f0 <USB_EPSetStall+0xae>
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00f      	beq.n	80076f0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	015a      	lsls	r2, r3, #5
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	0151      	lsls	r1, r2, #5
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	440a      	add	r2, r1
 80076e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076ee:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	015a      	lsls	r2, r3, #5
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	0151      	lsls	r1, r2, #5
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	440a      	add	r2, r1
 8007706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800770a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800770e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3714      	adds	r7, #20
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800771e:	b480      	push	{r7}
 8007720:	b085      	sub	sp, #20
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	785b      	ldrb	r3, [r3, #1]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d128      	bne.n	800778c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	0151      	lsls	r1, r2, #5
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	440a      	add	r2, r1
 8007750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007754:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007758:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	78db      	ldrb	r3, [r3, #3]
 800775e:	2b03      	cmp	r3, #3
 8007760:	d003      	beq.n	800776a <USB_EPClearStall+0x4c>
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	78db      	ldrb	r3, [r3, #3]
 8007766:	2b02      	cmp	r3, #2
 8007768:	d138      	bne.n	80077dc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	015a      	lsls	r2, r3, #5
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	4413      	add	r3, r2
 8007772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	0151      	lsls	r1, r2, #5
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	440a      	add	r2, r1
 8007780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007788:	6013      	str	r3, [r2, #0]
 800778a:	e027      	b.n	80077dc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	0151      	lsls	r1, r2, #5
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	440a      	add	r2, r1
 80077a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	78db      	ldrb	r3, [r3, #3]
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d003      	beq.n	80077bc <USB_EPClearStall+0x9e>
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	78db      	ldrb	r3, [r3, #3]
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d10f      	bne.n	80077dc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	015a      	lsls	r2, r3, #5
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	4413      	add	r3, r2
 80077c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	0151      	lsls	r1, r2, #5
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	440a      	add	r2, r1
 80077d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077da:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b085      	sub	sp, #20
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	460b      	mov	r3, r1
 80077f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007808:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800780c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	78fb      	ldrb	r3, [r7, #3]
 8007818:	011b      	lsls	r3, r3, #4
 800781a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800781e:	68f9      	ldr	r1, [r7, #12]
 8007820:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007824:	4313      	orrs	r3, r2
 8007826:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007836:	b480      	push	{r7}
 8007838:	b085      	sub	sp, #20
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007850:	f023 0303 	bic.w	r3, r3, #3
 8007854:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007864:	f023 0302 	bic.w	r3, r3, #2
 8007868:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007892:	f023 0303 	bic.w	r3, r3, #3
 8007896:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078a6:	f043 0302 	orr.w	r3, r3, #2
 80078aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b085      	sub	sp, #20
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	4013      	ands	r3, r2
 80078d0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80078d2:	68fb      	ldr	r3, [r7, #12]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	4013      	ands	r3, r2
 8007902:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	0c1b      	lsrs	r3, r3, #16
}
 8007908:	4618      	mov	r0, r3
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	4013      	ands	r3, r2
 8007936:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	b29b      	uxth	r3, r3
}
 800793c:	4618      	mov	r0, r3
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	460b      	mov	r3, r1
 8007952:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007958:	78fb      	ldrb	r3, [r7, #3]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	4413      	add	r3, r2
 8007960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	4013      	ands	r3, r2
 8007974:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007976:	68bb      	ldr	r3, [r7, #8]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007984:	b480      	push	{r7}
 8007986:	b087      	sub	sp, #28
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	460b      	mov	r3, r1
 800798e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80079a8:	78fb      	ldrb	r3, [r7, #3]
 80079aa:	f003 030f 	and.w	r3, r3, #15
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	fa22 f303 	lsr.w	r3, r2, r3
 80079b4:	01db      	lsls	r3, r3, #7
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80079be:	78fb      	ldrb	r3, [r7, #3]
 80079c0:	015a      	lsls	r2, r3, #5
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	4413      	add	r3, r2
 80079c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	4013      	ands	r3, r2
 80079d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80079d2:	68bb      	ldr	r3, [r7, #8]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	371c      	adds	r7, #28
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	f003 0301 	and.w	r3, r3, #1
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a16:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007a1a:	f023 0307 	bic.w	r3, r3, #7
 8007a1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
	...

08007a44 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b087      	sub	sp, #28
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	607a      	str	r2, [r7, #4]
 8007a50:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	333c      	adds	r3, #60	; 0x3c
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	4a26      	ldr	r2, [pc, #152]	; (8007afc <USB_EP0_OutStart+0xb8>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d90a      	bls.n	8007a7e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a78:	d101      	bne.n	8007a7e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	e037      	b.n	8007aee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a84:	461a      	mov	r2, r3
 8007a86:	2300      	movs	r3, #0
 8007a88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aac:	f043 0318 	orr.w	r3, r3, #24
 8007ab0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ac0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007ac4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007ac6:	7afb      	ldrb	r3, [r7, #11]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d10f      	bne.n	8007aec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ae6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007aea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	371c      	adds	r7, #28
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	4f54300a 	.word	0x4f54300a

08007b00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	60fb      	str	r3, [r7, #12]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	4a13      	ldr	r2, [pc, #76]	; (8007b64 <USB_CoreReset+0x64>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d901      	bls.n	8007b1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e01b      	b.n	8007b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	daf2      	bge.n	8007b0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	f043 0201 	orr.w	r2, r3, #1
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	60fb      	str	r3, [r7, #12]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	4a09      	ldr	r2, [pc, #36]	; (8007b64 <USB_CoreReset+0x64>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d901      	bls.n	8007b48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e006      	b.n	8007b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d0f0      	beq.n	8007b36 <USB_CoreReset+0x36>

  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3714      	adds	r7, #20
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	00030d40 	.word	0x00030d40

08007b68 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b74:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007b78:	f002 f936 	bl	8009de8 <malloc>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d105      	bne.n	8007b92 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007b8e:	2302      	movs	r3, #2
 8007b90:	e066      	b.n	8007c60 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	7c1b      	ldrb	r3, [r3, #16]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d119      	bne.n	8007bd6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	2181      	movs	r1, #129	; 0x81
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f001 ffa3 	bl	8009af6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007bb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bba:	2202      	movs	r2, #2
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f001 ff99 	bl	8009af6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2210      	movs	r2, #16
 8007bd0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007bd4:	e016      	b.n	8007c04 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007bd6:	2340      	movs	r3, #64	; 0x40
 8007bd8:	2202      	movs	r2, #2
 8007bda:	2181      	movs	r1, #129	; 0x81
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f001 ff8a 	bl	8009af6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2201      	movs	r2, #1
 8007be6:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007be8:	2340      	movs	r3, #64	; 0x40
 8007bea:	2202      	movs	r2, #2
 8007bec:	2101      	movs	r1, #1
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f001 ff81 	bl	8009af6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2210      	movs	r2, #16
 8007c00:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c04:	2308      	movs	r3, #8
 8007c06:	2203      	movs	r2, #3
 8007c08:	2182      	movs	r1, #130	; 0x82
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f001 ff73 	bl	8009af6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	7c1b      	ldrb	r3, [r3, #16]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d109      	bne.n	8007c4e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c44:	2101      	movs	r1, #1
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f002 f844 	bl	8009cd4 <USBD_LL_PrepareReceive>
 8007c4c:	e007      	b.n	8007c5e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c54:	2340      	movs	r3, #64	; 0x40
 8007c56:	2101      	movs	r1, #1
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f002 f83b 	bl	8009cd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007c74:	2300      	movs	r3, #0
 8007c76:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007c78:	2181      	movs	r1, #129	; 0x81
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f001 ff61 	bl	8009b42 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007c86:	2101      	movs	r1, #1
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f001 ff5a 	bl	8009b42 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007c96:	2182      	movs	r1, #130	; 0x82
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f001 ff52 	bl	8009b42 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00e      	beq.n	8007cd6 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f002 f895 	bl	8009df8 <free>
    pdev->pClassData = NULL;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cf0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d03a      	beq.n	8007d80 <USBD_CDC_Setup+0xa0>
 8007d0a:	2b20      	cmp	r3, #32
 8007d0c:	f040 8097 	bne.w	8007e3e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	88db      	ldrh	r3, [r3, #6]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d029      	beq.n	8007d6c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	b25b      	sxtb	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	da11      	bge.n	8007d46 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007d2e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d30:	683a      	ldr	r2, [r7, #0]
 8007d32:	88d2      	ldrh	r2, [r2, #6]
 8007d34:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007d36:	6939      	ldr	r1, [r7, #16]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	88db      	ldrh	r3, [r3, #6]
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f001 fa9d 	bl	800927e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007d44:	e082      	b.n	8007e4c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	785a      	ldrb	r2, [r3, #1]
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	88db      	ldrh	r3, [r3, #6]
 8007d54:	b2da      	uxtb	r2, r3
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007d5c:	6939      	ldr	r1, [r7, #16]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	88db      	ldrh	r3, [r3, #6]
 8007d62:	461a      	mov	r2, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f001 fab6 	bl	80092d6 <USBD_CtlPrepareRx>
    break;
 8007d6a:	e06f      	b.n	8007e4c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	683a      	ldr	r2, [r7, #0]
 8007d76:	7850      	ldrb	r0, [r2, #1]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	4798      	blx	r3
    break;
 8007d7e:	e065      	b.n	8007e4c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	785b      	ldrb	r3, [r3, #1]
 8007d84:	2b0b      	cmp	r3, #11
 8007d86:	d84f      	bhi.n	8007e28 <USBD_CDC_Setup+0x148>
 8007d88:	a201      	add	r2, pc, #4	; (adr r2, 8007d90 <USBD_CDC_Setup+0xb0>)
 8007d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8e:	bf00      	nop
 8007d90:	08007dc1 	.word	0x08007dc1
 8007d94:	08007e37 	.word	0x08007e37
 8007d98:	08007e29 	.word	0x08007e29
 8007d9c:	08007e29 	.word	0x08007e29
 8007da0:	08007e29 	.word	0x08007e29
 8007da4:	08007e29 	.word	0x08007e29
 8007da8:	08007e29 	.word	0x08007e29
 8007dac:	08007e29 	.word	0x08007e29
 8007db0:	08007e29 	.word	0x08007e29
 8007db4:	08007e29 	.word	0x08007e29
 8007db8:	08007de9 	.word	0x08007de9
 8007dbc:	08007e11 	.word	0x08007e11
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc6:	2b03      	cmp	r3, #3
 8007dc8:	d107      	bne.n	8007dda <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007dca:	f107 030c 	add.w	r3, r7, #12
 8007dce:	2202      	movs	r2, #2
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f001 fa53 	bl	800927e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007dd8:	e030      	b.n	8007e3c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f001 f9dd 	bl	800919c <USBD_CtlError>
        ret = USBD_FAIL;
 8007de2:	2303      	movs	r3, #3
 8007de4:	75fb      	strb	r3, [r7, #23]
      break;
 8007de6:	e029      	b.n	8007e3c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	d107      	bne.n	8007e02 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007df2:	f107 030f 	add.w	r3, r7, #15
 8007df6:	2201      	movs	r2, #1
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f001 fa3f 	bl	800927e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007e00:	e01c      	b.n	8007e3c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f001 f9c9 	bl	800919c <USBD_CtlError>
        ret = USBD_FAIL;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e0e:	e015      	b.n	8007e3c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	d00f      	beq.n	8007e3a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f001 f9bd 	bl	800919c <USBD_CtlError>
        ret = USBD_FAIL;
 8007e22:	2303      	movs	r3, #3
 8007e24:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007e26:	e008      	b.n	8007e3a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007e28:	6839      	ldr	r1, [r7, #0]
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f001 f9b6 	bl	800919c <USBD_CtlError>
      ret = USBD_FAIL;
 8007e30:	2303      	movs	r3, #3
 8007e32:	75fb      	strb	r3, [r7, #23]
      break;
 8007e34:	e002      	b.n	8007e3c <USBD_CDC_Setup+0x15c>
      break;
 8007e36:	bf00      	nop
 8007e38:	e008      	b.n	8007e4c <USBD_CDC_Setup+0x16c>
      break;
 8007e3a:	bf00      	nop
    }
    break;
 8007e3c:	e006      	b.n	8007e4c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f001 f9ab 	bl	800919c <USBD_CtlError>
    ret = USBD_FAIL;
 8007e46:	2303      	movs	r3, #3
 8007e48:	75fb      	strb	r3, [r7, #23]
    break;
 8007e4a:	bf00      	nop
  }

  return (uint8_t)ret;
 8007e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3718      	adds	r7, #24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop

08007e58 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	460b      	mov	r3, r1
 8007e62:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e6a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e049      	b.n	8007f0e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e80:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007e82:	78fa      	ldrb	r2, [r7, #3]
 8007e84:	6879      	ldr	r1, [r7, #4]
 8007e86:	4613      	mov	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	440b      	add	r3, r1
 8007e90:	3318      	adds	r3, #24
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d029      	beq.n	8007eec <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007e98:	78fa      	ldrb	r2, [r7, #3]
 8007e9a:	6879      	ldr	r1, [r7, #4]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	440b      	add	r3, r1
 8007ea6:	3318      	adds	r3, #24
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	78f9      	ldrb	r1, [r7, #3]
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	460b      	mov	r3, r1
 8007eb0:	00db      	lsls	r3, r3, #3
 8007eb2:	1a5b      	subs	r3, r3, r1
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4403      	add	r3, r0
 8007eb8:	3344      	adds	r3, #68	; 0x44
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ec0:	fb03 f301 	mul.w	r3, r3, r1
 8007ec4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d110      	bne.n	8007eec <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007eca:	78fa      	ldrb	r2, [r7, #3]
 8007ecc:	6879      	ldr	r1, [r7, #4]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4413      	add	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	440b      	add	r3, r1
 8007ed8:	3318      	adds	r3, #24
 8007eda:	2200      	movs	r2, #0
 8007edc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007ede:	78f9      	ldrb	r1, [r7, #3]
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f001 fed4 	bl	8009c92 <USBD_LL_Transmit>
 8007eea:	e00f      	b.n	8007f0c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007f08:	78fa      	ldrb	r2, [r7, #3]
 8007f0a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b084      	sub	sp, #16
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f28:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d101      	bne.n	8007f38 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f34:	2303      	movs	r3, #3
 8007f36:	e015      	b.n	8007f64 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f38:	78fb      	ldrb	r3, [r7, #3]
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f001 feea 	bl	8009d16 <USBD_LL_GetRxDataSize>
 8007f42:	4602      	mov	r2, r0
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007f5e:	4611      	mov	r1, r2
 8007f60:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f7a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d015      	beq.n	8007fb2 <USBD_CDC_EP0_RxReady+0x46>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007f8c:	2bff      	cmp	r3, #255	; 0xff
 8007f8e:	d010      	beq.n	8007fb2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007f9e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007fa6:	b292      	uxth	r2, r2
 8007fa8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	22ff      	movs	r2, #255	; 0xff
 8007fae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2243      	movs	r2, #67	; 0x43
 8007fc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007fca:	4b03      	ldr	r3, [pc, #12]	; (8007fd8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	20000094 	.word	0x20000094

08007fdc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2243      	movs	r2, #67	; 0x43
 8007fe8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007fea:	4b03      	ldr	r3, [pc, #12]	; (8007ff8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	20000050 	.word	0x20000050

08007ffc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2243      	movs	r2, #67	; 0x43
 8008008:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800800a:	4b03      	ldr	r3, [pc, #12]	; (8008018 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800800c:	4618      	mov	r0, r3
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	200000d8 	.word	0x200000d8

0800801c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	220a      	movs	r2, #10
 8008028:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800802a:	4b03      	ldr	r3, [pc, #12]	; (8008038 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800802c:	4618      	mov	r0, r3
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	2000000c 	.word	0x2000000c

0800803c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d101      	bne.n	8008050 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800804c:	2303      	movs	r3, #3
 800804e:	e004      	b.n	800805a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	370c      	adds	r7, #12
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008066:	b480      	push	{r7}
 8008068:	b087      	sub	sp, #28
 800806a:	af00      	add	r7, sp, #0
 800806c:	60f8      	str	r0, [r7, #12]
 800806e:	60b9      	str	r1, [r7, #8]
 8008070:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008078:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	371c      	adds	r7, #28
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080a8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	683a      	ldr	r2, [r7, #0]
 80080ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080ce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80080d0:	2301      	movs	r3, #1
 80080d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80080de:	2303      	movs	r3, #3
 80080e0:	e01a      	b.n	8008118 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d114      	bne.n	8008116 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800810a:	2181      	movs	r1, #129	; 0x81
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f001 fdc0 	bl	8009c92 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008112:	2300      	movs	r3, #0
 8008114:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008116:	7bfb      	ldrb	r3, [r7, #15]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800812e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800813a:	2303      	movs	r3, #3
 800813c:	e016      	b.n	800816c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	7c1b      	ldrb	r3, [r3, #16]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d109      	bne.n	800815a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800814c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008150:	2101      	movs	r1, #1
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f001 fdbe 	bl	8009cd4 <USBD_LL_PrepareReceive>
 8008158:	e007      	b.n	800816a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008160:	2340      	movs	r3, #64	; 0x40
 8008162:	2101      	movs	r1, #1
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f001 fdb5 	bl	8009cd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	4613      	mov	r3, r2
 8008180:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d101      	bne.n	800818c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008188:	2303      	movs	r3, #3
 800818a:	e025      	b.n	80081d8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008192:	2b00      	cmp	r3, #0
 8008194:	d003      	beq.n	800819e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d003      	beq.n	80081b0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	79fa      	ldrb	r2, [r7, #7]
 80081ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f001 fc2b 	bl	8009a28 <USBD_LL_Init>
 80081d2:	4603      	mov	r3, r0
 80081d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80081d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3718      	adds	r7, #24
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081ea:	2300      	movs	r3, #0
 80081ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d101      	bne.n	80081f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e010      	b.n	800821a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008208:	f107 020e 	add.w	r2, r7, #14
 800820c:	4610      	mov	r0, r2
 800820e:	4798      	blx	r3
 8008210:	4602      	mov	r2, r0
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b082      	sub	sp, #8
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f001 fc48 	bl	8009ac0 <USBD_LL_Start>
 8008230:	4603      	mov	r3, r0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800823a:	b480      	push	{r7}
 800823c:	b083      	sub	sp, #12
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	460b      	mov	r3, r1
 800825a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800825c:	2303      	movs	r3, #3
 800825e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008266:	2b00      	cmp	r3, #0
 8008268:	d009      	beq.n	800827e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	78fa      	ldrb	r2, [r7, #3]
 8008274:	4611      	mov	r1, r2
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	4798      	blx	r3
 800827a:	4603      	mov	r3, r0
 800827c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800827e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008280:	4618      	mov	r0, r3
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	460b      	mov	r3, r1
 8008292:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800829a:	2b00      	cmp	r3, #0
 800829c:	d007      	beq.n	80082ae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	78fa      	ldrb	r2, [r7, #3]
 80082a8:	4611      	mov	r1, r2
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	4798      	blx	r3
  }

  return USBD_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 ff2c 	bl	8009128 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80082de:	461a      	mov	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80082ec:	f003 031f 	and.w	r3, r3, #31
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d00e      	beq.n	8008312 <USBD_LL_SetupStage+0x5a>
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d302      	bcc.n	80082fe <USBD_LL_SetupStage+0x46>
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d014      	beq.n	8008326 <USBD_LL_SetupStage+0x6e>
 80082fc:	e01d      	b.n	800833a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008304:	4619      	mov	r1, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fa18 	bl	800873c <USBD_StdDevReq>
 800830c:	4603      	mov	r3, r0
 800830e:	73fb      	strb	r3, [r7, #15]
      break;
 8008310:	e020      	b.n	8008354 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008318:	4619      	mov	r1, r3
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fa7c 	bl	8008818 <USBD_StdItfReq>
 8008320:	4603      	mov	r3, r0
 8008322:	73fb      	strb	r3, [r7, #15]
      break;
 8008324:	e016      	b.n	8008354 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800832c:	4619      	mov	r1, r3
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fab8 	bl	80088a4 <USBD_StdEPReq>
 8008334:	4603      	mov	r3, r0
 8008336:	73fb      	strb	r3, [r7, #15]
      break;
 8008338:	e00c      	b.n	8008354 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008340:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008344:	b2db      	uxtb	r3, r3
 8008346:	4619      	mov	r1, r3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f001 fc19 	bl	8009b80 <USBD_LL_StallEP>
 800834e:	4603      	mov	r3, r0
 8008350:	73fb      	strb	r3, [r7, #15]
      break;
 8008352:	bf00      	nop
  }

  return ret;
 8008354:	7bfb      	ldrb	r3, [r7, #15]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b086      	sub	sp, #24
 8008362:	af00      	add	r7, sp, #0
 8008364:	60f8      	str	r0, [r7, #12]
 8008366:	460b      	mov	r3, r1
 8008368:	607a      	str	r2, [r7, #4]
 800836a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800836c:	7afb      	ldrb	r3, [r7, #11]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d137      	bne.n	80083e2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008378:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008380:	2b03      	cmp	r3, #3
 8008382:	d14a      	bne.n	800841a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	689a      	ldr	r2, [r3, #8]
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	429a      	cmp	r2, r3
 800838e:	d913      	bls.n	80083b8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	689a      	ldr	r2, [r3, #8]
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	1ad2      	subs	r2, r2, r3
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	68da      	ldr	r2, [r3, #12]
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	4293      	cmp	r3, r2
 80083a8:	bf28      	it	cs
 80083aa:	4613      	movcs	r3, r2
 80083ac:	461a      	mov	r2, r3
 80083ae:	6879      	ldr	r1, [r7, #4]
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f000 ffad 	bl	8009310 <USBD_CtlContinueRx>
 80083b6:	e030      	b.n	800841a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00a      	beq.n	80083da <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	d105      	bne.n	80083da <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f000 ffa9 	bl	8009332 <USBD_CtlSendStatus>
 80083e0:	e01b      	b.n	800841a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e8:	699b      	ldr	r3, [r3, #24]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d013      	beq.n	8008416 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80083f4:	2b03      	cmp	r3, #3
 80083f6:	d10e      	bne.n	8008416 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	7afa      	ldrb	r2, [r7, #11]
 8008402:	4611      	mov	r1, r2
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	4798      	blx	r3
 8008408:	4603      	mov	r3, r0
 800840a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800840c:	7dfb      	ldrb	r3, [r7, #23]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d003      	beq.n	800841a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008412:	7dfb      	ldrb	r3, [r7, #23]
 8008414:	e002      	b.n	800841c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008416:	2303      	movs	r3, #3
 8008418:	e000      	b.n	800841c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3718      	adds	r7, #24
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b086      	sub	sp, #24
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	460b      	mov	r3, r1
 800842e:	607a      	str	r2, [r7, #4]
 8008430:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008432:	7afb      	ldrb	r3, [r7, #11]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d16a      	bne.n	800850e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	3314      	adds	r3, #20
 800843c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008444:	2b02      	cmp	r3, #2
 8008446:	d155      	bne.n	80084f4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	689a      	ldr	r2, [r3, #8]
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	429a      	cmp	r2, r3
 8008452:	d914      	bls.n	800847e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	689a      	ldr	r2, [r3, #8]
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	1ad2      	subs	r2, r2, r3
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	461a      	mov	r2, r3
 8008468:	6879      	ldr	r1, [r7, #4]
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f000 ff22 	bl	80092b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008470:	2300      	movs	r3, #0
 8008472:	2200      	movs	r2, #0
 8008474:	2100      	movs	r1, #0
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f001 fc2c 	bl	8009cd4 <USBD_LL_PrepareReceive>
 800847c:	e03a      	b.n	80084f4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	68da      	ldr	r2, [r3, #12]
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	429a      	cmp	r2, r3
 8008488:	d11c      	bne.n	80084c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008492:	429a      	cmp	r2, r3
 8008494:	d316      	bcc.n	80084c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	685a      	ldr	r2, [r3, #4]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d20f      	bcs.n	80084c4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084a4:	2200      	movs	r2, #0
 80084a6:	2100      	movs	r1, #0
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 ff03 	bl	80092b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084b6:	2300      	movs	r3, #0
 80084b8:	2200      	movs	r2, #0
 80084ba:	2100      	movs	r1, #0
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f001 fc09 	bl	8009cd4 <USBD_LL_PrepareReceive>
 80084c2:	e017      	b.n	80084f4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00a      	beq.n	80084e6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80084d6:	2b03      	cmp	r3, #3
 80084d8:	d105      	bne.n	80084e6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80084e6:	2180      	movs	r1, #128	; 0x80
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f001 fb49 	bl	8009b80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f000 ff32 	bl	8009358 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d123      	bne.n	8008546 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f7ff fe9b 	bl	800823a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800850c:	e01b      	b.n	8008546 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d013      	beq.n	8008542 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008520:	2b03      	cmp	r3, #3
 8008522:	d10e      	bne.n	8008542 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800852a:	695b      	ldr	r3, [r3, #20]
 800852c:	7afa      	ldrb	r2, [r7, #11]
 800852e:	4611      	mov	r1, r2
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	4798      	blx	r3
 8008534:	4603      	mov	r3, r0
 8008536:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008538:	7dfb      	ldrb	r3, [r7, #23]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800853e:	7dfb      	ldrb	r3, [r7, #23]
 8008540:	e002      	b.n	8008548 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008542:	2303      	movs	r3, #3
 8008544:	e000      	b.n	8008548 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3718      	adds	r7, #24
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800857c:	2b00      	cmp	r3, #0
 800857e:	d009      	beq.n	8008594 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	6852      	ldr	r2, [r2, #4]
 800858c:	b2d2      	uxtb	r2, r2
 800858e:	4611      	mov	r1, r2
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008594:	2340      	movs	r3, #64	; 0x40
 8008596:	2200      	movs	r2, #0
 8008598:	2100      	movs	r1, #0
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f001 faab 	bl	8009af6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2240      	movs	r2, #64	; 0x40
 80085ac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085b0:	2340      	movs	r3, #64	; 0x40
 80085b2:	2200      	movs	r2, #0
 80085b4:	2180      	movs	r1, #128	; 0x80
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f001 fa9d 	bl	8009af6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2240      	movs	r2, #64	; 0x40
 80085c6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80085d2:	b480      	push	{r7}
 80085d4:	b083      	sub	sp, #12
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	460b      	mov	r3, r1
 80085dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	78fa      	ldrb	r2, [r7, #3]
 80085e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	370c      	adds	r7, #12
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr

080085f2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80085f2:	b480      	push	{r7}
 80085f4:	b083      	sub	sp, #12
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2204      	movs	r2, #4
 800860a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800862a:	2b04      	cmp	r3, #4
 800862c:	d105      	bne.n	800863a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008656:	2b03      	cmp	r3, #3
 8008658:	d10b      	bne.n	8008672 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008660:	69db      	ldr	r3, [r3, #28]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d005      	beq.n	8008672 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800866c:	69db      	ldr	r3, [r3, #28]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	460b      	mov	r3, r1
 8008686:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	370c      	adds	r7, #12
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008696:	b480      	push	{r7}
 8008698:	b083      	sub	sp, #12
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	460b      	mov	r3, r1
 80086a0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b082      	sub	sp, #8
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2201      	movs	r2, #1
 80086d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d009      	beq.n	80086f4 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	6852      	ldr	r2, [r2, #4]
 80086ec:	b2d2      	uxtb	r2, r2
 80086ee:	4611      	mov	r1, r2
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	4798      	blx	r3
  }

  return USBD_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80086fe:	b480      	push	{r7}
 8008700:	b087      	sub	sp, #28
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	3301      	adds	r3, #1
 8008714:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800871c:	8a3b      	ldrh	r3, [r7, #16]
 800871e:	021b      	lsls	r3, r3, #8
 8008720:	b21a      	sxth	r2, r3
 8008722:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008726:	4313      	orrs	r3, r2
 8008728:	b21b      	sxth	r3, r3
 800872a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800872c:	89fb      	ldrh	r3, [r7, #14]
}
 800872e:	4618      	mov	r0, r3
 8008730:	371c      	adds	r7, #28
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
	...

0800873c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008752:	2b20      	cmp	r3, #32
 8008754:	d004      	beq.n	8008760 <USBD_StdDevReq+0x24>
 8008756:	2b40      	cmp	r3, #64	; 0x40
 8008758:	d002      	beq.n	8008760 <USBD_StdDevReq+0x24>
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <USBD_StdDevReq+0x38>
 800875e:	e050      	b.n	8008802 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	6839      	ldr	r1, [r7, #0]
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	4798      	blx	r3
 800876e:	4603      	mov	r3, r0
 8008770:	73fb      	strb	r3, [r7, #15]
    break;
 8008772:	e04b      	b.n	800880c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	785b      	ldrb	r3, [r3, #1]
 8008778:	2b09      	cmp	r3, #9
 800877a:	d83c      	bhi.n	80087f6 <USBD_StdDevReq+0xba>
 800877c:	a201      	add	r2, pc, #4	; (adr r2, 8008784 <USBD_StdDevReq+0x48>)
 800877e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008782:	bf00      	nop
 8008784:	080087d9 	.word	0x080087d9
 8008788:	080087ed 	.word	0x080087ed
 800878c:	080087f7 	.word	0x080087f7
 8008790:	080087e3 	.word	0x080087e3
 8008794:	080087f7 	.word	0x080087f7
 8008798:	080087b7 	.word	0x080087b7
 800879c:	080087ad 	.word	0x080087ad
 80087a0:	080087f7 	.word	0x080087f7
 80087a4:	080087cf 	.word	0x080087cf
 80087a8:	080087c1 	.word	0x080087c1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f9ce 	bl	8008b50 <USBD_GetDescriptor>
      break;
 80087b4:	e024      	b.n	8008800 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fb33 	bl	8008e24 <USBD_SetAddress>
      break;
 80087be:	e01f      	b.n	8008800 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80087c0:	6839      	ldr	r1, [r7, #0]
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 fb70 	bl	8008ea8 <USBD_SetConfig>
 80087c8:	4603      	mov	r3, r0
 80087ca:	73fb      	strb	r3, [r7, #15]
      break;
 80087cc:	e018      	b.n	8008800 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fc0d 	bl	8008ff0 <USBD_GetConfig>
      break;
 80087d6:	e013      	b.n	8008800 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80087d8:	6839      	ldr	r1, [r7, #0]
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fc3c 	bl	8009058 <USBD_GetStatus>
      break;
 80087e0:	e00e      	b.n	8008800 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fc6a 	bl	80090be <USBD_SetFeature>
      break;
 80087ea:	e009      	b.n	8008800 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fc79 	bl	80090e6 <USBD_ClrFeature>
      break;
 80087f4:	e004      	b.n	8008800 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 fccf 	bl	800919c <USBD_CtlError>
      break;
 80087fe:	bf00      	nop
    }
    break;
 8008800:	e004      	b.n	800880c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fcc9 	bl	800919c <USBD_CtlError>
    break;
 800880a:	bf00      	nop
  }

  return ret;
 800880c:	7bfb      	ldrb	r3, [r7, #15]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop

08008818 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800882e:	2b20      	cmp	r3, #32
 8008830:	d003      	beq.n	800883a <USBD_StdItfReq+0x22>
 8008832:	2b40      	cmp	r3, #64	; 0x40
 8008834:	d001      	beq.n	800883a <USBD_StdItfReq+0x22>
 8008836:	2b00      	cmp	r3, #0
 8008838:	d12a      	bne.n	8008890 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008840:	3b01      	subs	r3, #1
 8008842:	2b02      	cmp	r3, #2
 8008844:	d81d      	bhi.n	8008882 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	889b      	ldrh	r3, [r3, #4]
 800884a:	b2db      	uxtb	r3, r3
 800884c:	2b01      	cmp	r3, #1
 800884e:	d813      	bhi.n	8008878 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	4798      	blx	r3
 800885e:	4603      	mov	r3, r0
 8008860:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	88db      	ldrh	r3, [r3, #6]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d110      	bne.n	800888c <USBD_StdItfReq+0x74>
 800886a:	7bfb      	ldrb	r3, [r7, #15]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10d      	bne.n	800888c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fd5e 	bl	8009332 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008876:	e009      	b.n	800888c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fc8e 	bl	800919c <USBD_CtlError>
      break;
 8008880:	e004      	b.n	800888c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fc89 	bl	800919c <USBD_CtlError>
      break;
 800888a:	e000      	b.n	800888e <USBD_StdItfReq+0x76>
      break;
 800888c:	bf00      	nop
    }
    break;
 800888e:	e004      	b.n	800889a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fc82 	bl	800919c <USBD_CtlError>
    break;
 8008898:	bf00      	nop
  }

  return ret;
 800889a:	7bfb      	ldrb	r3, [r7, #15]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80088ae:	2300      	movs	r3, #0
 80088b0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	889b      	ldrh	r3, [r3, #4]
 80088b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088c0:	2b20      	cmp	r3, #32
 80088c2:	d004      	beq.n	80088ce <USBD_StdEPReq+0x2a>
 80088c4:	2b40      	cmp	r3, #64	; 0x40
 80088c6:	d002      	beq.n	80088ce <USBD_StdEPReq+0x2a>
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00a      	beq.n	80088e2 <USBD_StdEPReq+0x3e>
 80088cc:	e135      	b.n	8008b3a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	6839      	ldr	r1, [r7, #0]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	4798      	blx	r3
 80088dc:	4603      	mov	r3, r0
 80088de:	73fb      	strb	r3, [r7, #15]
    break;
 80088e0:	e130      	b.n	8008b44 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	785b      	ldrb	r3, [r3, #1]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d03e      	beq.n	8008968 <USBD_StdEPReq+0xc4>
 80088ea:	2b03      	cmp	r3, #3
 80088ec:	d002      	beq.n	80088f4 <USBD_StdEPReq+0x50>
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d077      	beq.n	80089e2 <USBD_StdEPReq+0x13e>
 80088f2:	e11c      	b.n	8008b2e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d002      	beq.n	8008904 <USBD_StdEPReq+0x60>
 80088fe:	2b03      	cmp	r3, #3
 8008900:	d015      	beq.n	800892e <USBD_StdEPReq+0x8a>
 8008902:	e02b      	b.n	800895c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008904:	7bbb      	ldrb	r3, [r7, #14]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00c      	beq.n	8008924 <USBD_StdEPReq+0x80>
 800890a:	7bbb      	ldrb	r3, [r7, #14]
 800890c:	2b80      	cmp	r3, #128	; 0x80
 800890e:	d009      	beq.n	8008924 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008910:	7bbb      	ldrb	r3, [r7, #14]
 8008912:	4619      	mov	r1, r3
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f001 f933 	bl	8009b80 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800891a:	2180      	movs	r1, #128	; 0x80
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f001 f92f 	bl	8009b80 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008922:	e020      	b.n	8008966 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008924:	6839      	ldr	r1, [r7, #0]
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fc38 	bl	800919c <USBD_CtlError>
        break;
 800892c:	e01b      	b.n	8008966 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	885b      	ldrh	r3, [r3, #2]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10e      	bne.n	8008954 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008936:	7bbb      	ldrb	r3, [r7, #14]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00b      	beq.n	8008954 <USBD_StdEPReq+0xb0>
 800893c:	7bbb      	ldrb	r3, [r7, #14]
 800893e:	2b80      	cmp	r3, #128	; 0x80
 8008940:	d008      	beq.n	8008954 <USBD_StdEPReq+0xb0>
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	88db      	ldrh	r3, [r3, #6]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d104      	bne.n	8008954 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800894a:	7bbb      	ldrb	r3, [r7, #14]
 800894c:	4619      	mov	r1, r3
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f001 f916 	bl	8009b80 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 fcec 	bl	8009332 <USBD_CtlSendStatus>

        break;
 800895a:	e004      	b.n	8008966 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800895c:	6839      	ldr	r1, [r7, #0]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fc1c 	bl	800919c <USBD_CtlError>
        break;
 8008964:	bf00      	nop
      }
      break;
 8008966:	e0e7      	b.n	8008b38 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800896e:	2b02      	cmp	r3, #2
 8008970:	d002      	beq.n	8008978 <USBD_StdEPReq+0xd4>
 8008972:	2b03      	cmp	r3, #3
 8008974:	d015      	beq.n	80089a2 <USBD_StdEPReq+0xfe>
 8008976:	e02d      	b.n	80089d4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008978:	7bbb      	ldrb	r3, [r7, #14]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00c      	beq.n	8008998 <USBD_StdEPReq+0xf4>
 800897e:	7bbb      	ldrb	r3, [r7, #14]
 8008980:	2b80      	cmp	r3, #128	; 0x80
 8008982:	d009      	beq.n	8008998 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008984:	7bbb      	ldrb	r3, [r7, #14]
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f001 f8f9 	bl	8009b80 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800898e:	2180      	movs	r1, #128	; 0x80
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f001 f8f5 	bl	8009b80 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008996:	e023      	b.n	80089e0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008998:	6839      	ldr	r1, [r7, #0]
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fbfe 	bl	800919c <USBD_CtlError>
        break;
 80089a0:	e01e      	b.n	80089e0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	885b      	ldrh	r3, [r3, #2]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d119      	bne.n	80089de <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80089aa:	7bbb      	ldrb	r3, [r7, #14]
 80089ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d004      	beq.n	80089be <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80089b4:	7bbb      	ldrb	r3, [r7, #14]
 80089b6:	4619      	mov	r1, r3
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f001 f900 	bl	8009bbe <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fcb7 	bl	8009332 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	6839      	ldr	r1, [r7, #0]
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	4798      	blx	r3
        }
        break;
 80089d2:	e004      	b.n	80089de <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80089d4:	6839      	ldr	r1, [r7, #0]
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fbe0 	bl	800919c <USBD_CtlError>
        break;
 80089dc:	e000      	b.n	80089e0 <USBD_StdEPReq+0x13c>
        break;
 80089de:	bf00      	nop
      }
      break;
 80089e0:	e0aa      	b.n	8008b38 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d002      	beq.n	80089f2 <USBD_StdEPReq+0x14e>
 80089ec:	2b03      	cmp	r3, #3
 80089ee:	d032      	beq.n	8008a56 <USBD_StdEPReq+0x1b2>
 80089f0:	e097      	b.n	8008b22 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089f2:	7bbb      	ldrb	r3, [r7, #14]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d007      	beq.n	8008a08 <USBD_StdEPReq+0x164>
 80089f8:	7bbb      	ldrb	r3, [r7, #14]
 80089fa:	2b80      	cmp	r3, #128	; 0x80
 80089fc:	d004      	beq.n	8008a08 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fbcb 	bl	800919c <USBD_CtlError>
          break;
 8008a06:	e091      	b.n	8008b2c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	da0b      	bge.n	8008a28 <USBD_StdEPReq+0x184>
 8008a10:	7bbb      	ldrb	r3, [r7, #14]
 8008a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a16:	4613      	mov	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4413      	add	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	3310      	adds	r3, #16
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	4413      	add	r3, r2
 8008a24:	3304      	adds	r3, #4
 8008a26:	e00b      	b.n	8008a40 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008a28:	7bbb      	ldrb	r3, [r7, #14]
 8008a2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a2e:	4613      	mov	r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	3304      	adds	r3, #4
 8008a40:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	2200      	movs	r2, #0
 8008a46:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fc15 	bl	800927e <USBD_CtlSendData>
        break;
 8008a54:	e06a      	b.n	8008b2c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008a56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	da11      	bge.n	8008a82 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a5e:	7bbb      	ldrb	r3, [r7, #14]
 8008a60:	f003 020f 	and.w	r2, r3, #15
 8008a64:	6879      	ldr	r1, [r7, #4]
 8008a66:	4613      	mov	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	440b      	add	r3, r1
 8008a70:	3324      	adds	r3, #36	; 0x24
 8008a72:	881b      	ldrh	r3, [r3, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d117      	bne.n	8008aa8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fb8e 	bl	800919c <USBD_CtlError>
            break;
 8008a80:	e054      	b.n	8008b2c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a82:	7bbb      	ldrb	r3, [r7, #14]
 8008a84:	f003 020f 	and.w	r2, r3, #15
 8008a88:	6879      	ldr	r1, [r7, #4]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	440b      	add	r3, r1
 8008a94:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a98:	881b      	ldrh	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d104      	bne.n	8008aa8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fb7b 	bl	800919c <USBD_CtlError>
            break;
 8008aa6:	e041      	b.n	8008b2c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	da0b      	bge.n	8008ac8 <USBD_StdEPReq+0x224>
 8008ab0:	7bbb      	ldrb	r3, [r7, #14]
 8008ab2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	3310      	adds	r3, #16
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	e00b      	b.n	8008ae0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	4413      	add	r3, r2
 8008ade:	3304      	adds	r3, #4
 8008ae0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ae2:	7bbb      	ldrb	r3, [r7, #14]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d002      	beq.n	8008aee <USBD_StdEPReq+0x24a>
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
 8008aea:	2b80      	cmp	r3, #128	; 0x80
 8008aec:	d103      	bne.n	8008af6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2200      	movs	r2, #0
 8008af2:	601a      	str	r2, [r3, #0]
 8008af4:	e00e      	b.n	8008b14 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008af6:	7bbb      	ldrb	r3, [r7, #14]
 8008af8:	4619      	mov	r1, r3
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f001 f87e 	bl	8009bfc <USBD_LL_IsStallEP>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	601a      	str	r2, [r3, #0]
 8008b0c:	e002      	b.n	8008b14 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	2200      	movs	r2, #0
 8008b12:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	2202      	movs	r2, #2
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fbaf 	bl	800927e <USBD_CtlSendData>
          break;
 8008b20:	e004      	b.n	8008b2c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 fb39 	bl	800919c <USBD_CtlError>
        break;
 8008b2a:	bf00      	nop
      }
      break;
 8008b2c:	e004      	b.n	8008b38 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fb33 	bl	800919c <USBD_CtlError>
      break;
 8008b36:	bf00      	nop
    }
    break;
 8008b38:	e004      	b.n	8008b44 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fb2d 	bl	800919c <USBD_CtlError>
    break;
 8008b42:	bf00      	nop
  }

  return ret;
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
	...

08008b50 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	885b      	ldrh	r3, [r3, #2]
 8008b6a:	0a1b      	lsrs	r3, r3, #8
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	2b06      	cmp	r3, #6
 8008b72:	f200 8128 	bhi.w	8008dc6 <USBD_GetDescriptor+0x276>
 8008b76:	a201      	add	r2, pc, #4	; (adr r2, 8008b7c <USBD_GetDescriptor+0x2c>)
 8008b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7c:	08008b99 	.word	0x08008b99
 8008b80:	08008bb1 	.word	0x08008bb1
 8008b84:	08008bf1 	.word	0x08008bf1
 8008b88:	08008dc7 	.word	0x08008dc7
 8008b8c:	08008dc7 	.word	0x08008dc7
 8008b90:	08008d67 	.word	0x08008d67
 8008b94:	08008d93 	.word	0x08008d93
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	7c12      	ldrb	r2, [r2, #16]
 8008ba4:	f107 0108 	add.w	r1, r7, #8
 8008ba8:	4610      	mov	r0, r2
 8008baa:	4798      	blx	r3
 8008bac:	60f8      	str	r0, [r7, #12]
    break;
 8008bae:	e112      	b.n	8008dd6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	7c1b      	ldrb	r3, [r3, #16]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d10d      	bne.n	8008bd4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc0:	f107 0208 	add.w	r2, r7, #8
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	4798      	blx	r3
 8008bc8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	2202      	movs	r2, #2
 8008bd0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008bd2:	e100      	b.n	8008dd6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bdc:	f107 0208 	add.w	r2, r7, #8
 8008be0:	4610      	mov	r0, r2
 8008be2:	4798      	blx	r3
 8008be4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	3301      	adds	r3, #1
 8008bea:	2202      	movs	r2, #2
 8008bec:	701a      	strb	r2, [r3, #0]
    break;
 8008bee:	e0f2      	b.n	8008dd6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	885b      	ldrh	r3, [r3, #2]
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b05      	cmp	r3, #5
 8008bf8:	f200 80ac 	bhi.w	8008d54 <USBD_GetDescriptor+0x204>
 8008bfc:	a201      	add	r2, pc, #4	; (adr r2, 8008c04 <USBD_GetDescriptor+0xb4>)
 8008bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c02:	bf00      	nop
 8008c04:	08008c1d 	.word	0x08008c1d
 8008c08:	08008c51 	.word	0x08008c51
 8008c0c:	08008c85 	.word	0x08008c85
 8008c10:	08008cb9 	.word	0x08008cb9
 8008c14:	08008ced 	.word	0x08008ced
 8008c18:	08008d21 	.word	0x08008d21
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d00b      	beq.n	8008c40 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	7c12      	ldrb	r2, [r2, #16]
 8008c34:	f107 0108 	add.w	r1, r7, #8
 8008c38:	4610      	mov	r0, r2
 8008c3a:	4798      	blx	r3
 8008c3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c3e:	e091      	b.n	8008d64 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 faaa 	bl	800919c <USBD_CtlError>
        err++;
 8008c48:	7afb      	ldrb	r3, [r7, #11]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	72fb      	strb	r3, [r7, #11]
      break;
 8008c4e:	e089      	b.n	8008d64 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00b      	beq.n	8008c74 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	7c12      	ldrb	r2, [r2, #16]
 8008c68:	f107 0108 	add.w	r1, r7, #8
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	4798      	blx	r3
 8008c70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c72:	e077      	b.n	8008d64 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fa90 	bl	800919c <USBD_CtlError>
        err++;
 8008c7c:	7afb      	ldrb	r3, [r7, #11]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	72fb      	strb	r3, [r7, #11]
      break;
 8008c82:	e06f      	b.n	8008d64 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00b      	beq.n	8008ca8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	7c12      	ldrb	r2, [r2, #16]
 8008c9c:	f107 0108 	add.w	r1, r7, #8
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	4798      	blx	r3
 8008ca4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ca6:	e05d      	b.n	8008d64 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008ca8:	6839      	ldr	r1, [r7, #0]
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fa76 	bl	800919c <USBD_CtlError>
        err++;
 8008cb0:	7afb      	ldrb	r3, [r7, #11]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	72fb      	strb	r3, [r7, #11]
      break;
 8008cb6:	e055      	b.n	8008d64 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00b      	beq.n	8008cdc <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	7c12      	ldrb	r2, [r2, #16]
 8008cd0:	f107 0108 	add.w	r1, r7, #8
 8008cd4:	4610      	mov	r0, r2
 8008cd6:	4798      	blx	r3
 8008cd8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cda:	e043      	b.n	8008d64 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008cdc:	6839      	ldr	r1, [r7, #0]
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fa5c 	bl	800919c <USBD_CtlError>
        err++;
 8008ce4:	7afb      	ldrb	r3, [r7, #11]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	72fb      	strb	r3, [r7, #11]
      break;
 8008cea:	e03b      	b.n	8008d64 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cf2:	695b      	ldr	r3, [r3, #20]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00b      	beq.n	8008d10 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cfe:	695b      	ldr	r3, [r3, #20]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	7c12      	ldrb	r2, [r2, #16]
 8008d04:	f107 0108 	add.w	r1, r7, #8
 8008d08:	4610      	mov	r0, r2
 8008d0a:	4798      	blx	r3
 8008d0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d0e:	e029      	b.n	8008d64 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fa42 	bl	800919c <USBD_CtlError>
        err++;
 8008d18:	7afb      	ldrb	r3, [r7, #11]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	72fb      	strb	r3, [r7, #11]
      break;
 8008d1e:	e021      	b.n	8008d64 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00b      	beq.n	8008d44 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	7c12      	ldrb	r2, [r2, #16]
 8008d38:	f107 0108 	add.w	r1, r7, #8
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	4798      	blx	r3
 8008d40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d42:	e00f      	b.n	8008d64 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fa28 	bl	800919c <USBD_CtlError>
        err++;
 8008d4c:	7afb      	ldrb	r3, [r7, #11]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	72fb      	strb	r3, [r7, #11]
      break;
 8008d52:	e007      	b.n	8008d64 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fa20 	bl	800919c <USBD_CtlError>
      err++;
 8008d5c:	7afb      	ldrb	r3, [r7, #11]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008d62:	bf00      	nop
    }
    break;
 8008d64:	e037      	b.n	8008dd6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	7c1b      	ldrb	r3, [r3, #16]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d109      	bne.n	8008d82 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d76:	f107 0208 	add.w	r2, r7, #8
 8008d7a:	4610      	mov	r0, r2
 8008d7c:	4798      	blx	r3
 8008d7e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008d80:	e029      	b.n	8008dd6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fa09 	bl	800919c <USBD_CtlError>
      err++;
 8008d8a:	7afb      	ldrb	r3, [r7, #11]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	72fb      	strb	r3, [r7, #11]
    break;
 8008d90:	e021      	b.n	8008dd6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	7c1b      	ldrb	r3, [r3, #16]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10d      	bne.n	8008db6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da2:	f107 0208 	add.w	r2, r7, #8
 8008da6:	4610      	mov	r0, r2
 8008da8:	4798      	blx	r3
 8008daa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	3301      	adds	r3, #1
 8008db0:	2207      	movs	r2, #7
 8008db2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008db4:	e00f      	b.n	8008dd6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008db6:	6839      	ldr	r1, [r7, #0]
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 f9ef 	bl	800919c <USBD_CtlError>
      err++;
 8008dbe:	7afb      	ldrb	r3, [r7, #11]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	72fb      	strb	r3, [r7, #11]
    break;
 8008dc4:	e007      	b.n	8008dd6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f9e7 	bl	800919c <USBD_CtlError>
    err++;
 8008dce:	7afb      	ldrb	r3, [r7, #11]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	72fb      	strb	r3, [r7, #11]
    break;
 8008dd4:	bf00      	nop
  }

  if (err != 0U)
 8008dd6:	7afb      	ldrb	r3, [r7, #11]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d11e      	bne.n	8008e1a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	88db      	ldrh	r3, [r3, #6]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d016      	beq.n	8008e12 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008de4:	893b      	ldrh	r3, [r7, #8]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00e      	beq.n	8008e08 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	88da      	ldrh	r2, [r3, #6]
 8008dee:	893b      	ldrh	r3, [r7, #8]
 8008df0:	4293      	cmp	r3, r2
 8008df2:	bf28      	it	cs
 8008df4:	4613      	movcs	r3, r2
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008dfa:	893b      	ldrh	r3, [r7, #8]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	68f9      	ldr	r1, [r7, #12]
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fa3c 	bl	800927e <USBD_CtlSendData>
 8008e06:	e009      	b.n	8008e1c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008e08:	6839      	ldr	r1, [r7, #0]
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f9c6 	bl	800919c <USBD_CtlError>
 8008e10:	e004      	b.n	8008e1c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fa8d 	bl	8009332 <USBD_CtlSendStatus>
 8008e18:	e000      	b.n	8008e1c <USBD_GetDescriptor+0x2cc>
    return;
 8008e1a:	bf00      	nop
    }
  }
}
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop

08008e24 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	889b      	ldrh	r3, [r3, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d130      	bne.n	8008e98 <USBD_SetAddress+0x74>
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	88db      	ldrh	r3, [r3, #6]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d12c      	bne.n	8008e98 <USBD_SetAddress+0x74>
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	885b      	ldrh	r3, [r3, #2]
 8008e42:	2b7f      	cmp	r3, #127	; 0x7f
 8008e44:	d828      	bhi.n	8008e98 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	885b      	ldrh	r3, [r3, #2]
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e58:	2b03      	cmp	r3, #3
 8008e5a:	d104      	bne.n	8008e66 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 f99c 	bl	800919c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e64:	e01c      	b.n	8008ea0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	7bfa      	ldrb	r2, [r7, #15]
 8008e6a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
 8008e70:	4619      	mov	r1, r3
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 feee 	bl	8009c54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fa5a 	bl	8009332 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e7e:	7bfb      	ldrb	r3, [r7, #15]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d004      	beq.n	8008e8e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2202      	movs	r2, #2
 8008e88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e8c:	e008      	b.n	8008ea0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2201      	movs	r2, #1
 8008e92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e96:	e003      	b.n	8008ea0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e98:	6839      	ldr	r1, [r7, #0]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 f97e 	bl	800919c <USBD_CtlError>
  }
}
 8008ea0:	bf00      	nop
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	885b      	ldrh	r3, [r3, #2]
 8008eba:	b2da      	uxtb	r2, r3
 8008ebc:	4b4b      	ldr	r3, [pc, #300]	; (8008fec <USBD_SetConfig+0x144>)
 8008ebe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ec0:	4b4a      	ldr	r3, [pc, #296]	; (8008fec <USBD_SetConfig+0x144>)
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d905      	bls.n	8008ed4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ec8:	6839      	ldr	r1, [r7, #0]
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f966 	bl	800919c <USBD_CtlError>
    return USBD_FAIL;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	e087      	b.n	8008fe4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d002      	beq.n	8008ee4 <USBD_SetConfig+0x3c>
 8008ede:	2b03      	cmp	r3, #3
 8008ee0:	d025      	beq.n	8008f2e <USBD_SetConfig+0x86>
 8008ee2:	e071      	b.n	8008fc8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008ee4:	4b41      	ldr	r3, [pc, #260]	; (8008fec <USBD_SetConfig+0x144>)
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d01c      	beq.n	8008f26 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008eec:	4b3f      	ldr	r3, [pc, #252]	; (8008fec <USBD_SetConfig+0x144>)
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ef6:	4b3d      	ldr	r3, [pc, #244]	; (8008fec <USBD_SetConfig+0x144>)
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	4619      	mov	r1, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7ff f9a7 	bl	8008250 <USBD_SetClassConfig>
 8008f02:	4603      	mov	r3, r0
 8008f04:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d004      	beq.n	8008f16 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008f0c:	6839      	ldr	r1, [r7, #0]
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 f944 	bl	800919c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008f14:	e065      	b.n	8008fe2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fa0b 	bl	8009332 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2203      	movs	r2, #3
 8008f20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008f24:	e05d      	b.n	8008fe2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fa03 	bl	8009332 <USBD_CtlSendStatus>
    break;
 8008f2c:	e059      	b.n	8008fe2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008f2e:	4b2f      	ldr	r3, [pc, #188]	; (8008fec <USBD_SetConfig+0x144>)
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d112      	bne.n	8008f5c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2202      	movs	r2, #2
 8008f3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008f3e:	4b2b      	ldr	r3, [pc, #172]	; (8008fec <USBD_SetConfig+0x144>)
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	461a      	mov	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f48:	4b28      	ldr	r3, [pc, #160]	; (8008fec <USBD_SetConfig+0x144>)
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7ff f99a 	bl	8008288 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f9ec 	bl	8009332 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008f5a:	e042      	b.n	8008fe2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008f5c:	4b23      	ldr	r3, [pc, #140]	; (8008fec <USBD_SetConfig+0x144>)
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	461a      	mov	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d02a      	beq.n	8008fc0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	4619      	mov	r1, r3
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7ff f988 	bl	8008288 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008f78:	4b1c      	ldr	r3, [pc, #112]	; (8008fec <USBD_SetConfig+0x144>)
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f82:	4b1a      	ldr	r3, [pc, #104]	; (8008fec <USBD_SetConfig+0x144>)
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f7ff f961 	bl	8008250 <USBD_SetClassConfig>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008f92:	7bfb      	ldrb	r3, [r7, #15]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00f      	beq.n	8008fb8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008f98:	6839      	ldr	r1, [r7, #0]
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f8fe 	bl	800919c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f7ff f96d 	bl	8008288 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2202      	movs	r2, #2
 8008fb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008fb6:	e014      	b.n	8008fe2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 f9ba 	bl	8009332 <USBD_CtlSendStatus>
    break;
 8008fbe:	e010      	b.n	8008fe2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 f9b6 	bl	8009332 <USBD_CtlSendStatus>
    break;
 8008fc6:	e00c      	b.n	8008fe2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f8e6 	bl	800919c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fd0:	4b06      	ldr	r3, [pc, #24]	; (8008fec <USBD_SetConfig+0x144>)
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7ff f956 	bl	8008288 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	73fb      	strb	r3, [r7, #15]
    break;
 8008fe0:	bf00      	nop
  }

  return ret;
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	20000378 	.word	0x20000378

08008ff0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	88db      	ldrh	r3, [r3, #6]
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d004      	beq.n	800900c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009002:	6839      	ldr	r1, [r7, #0]
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f8c9 	bl	800919c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800900a:	e021      	b.n	8009050 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009012:	2b01      	cmp	r3, #1
 8009014:	db17      	blt.n	8009046 <USBD_GetConfig+0x56>
 8009016:	2b02      	cmp	r3, #2
 8009018:	dd02      	ble.n	8009020 <USBD_GetConfig+0x30>
 800901a:	2b03      	cmp	r3, #3
 800901c:	d00b      	beq.n	8009036 <USBD_GetConfig+0x46>
 800901e:	e012      	b.n	8009046 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	3308      	adds	r3, #8
 800902a:	2201      	movs	r2, #1
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f925 	bl	800927e <USBD_CtlSendData>
      break;
 8009034:	e00c      	b.n	8009050 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	3304      	adds	r3, #4
 800903a:	2201      	movs	r2, #1
 800903c:	4619      	mov	r1, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f91d 	bl	800927e <USBD_CtlSendData>
      break;
 8009044:	e004      	b.n	8009050 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8009046:	6839      	ldr	r1, [r7, #0]
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 f8a7 	bl	800919c <USBD_CtlError>
      break;
 800904e:	bf00      	nop
}
 8009050:	bf00      	nop
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009068:	3b01      	subs	r3, #1
 800906a:	2b02      	cmp	r3, #2
 800906c:	d81e      	bhi.n	80090ac <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	88db      	ldrh	r3, [r3, #6]
 8009072:	2b02      	cmp	r3, #2
 8009074:	d004      	beq.n	8009080 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009076:	6839      	ldr	r1, [r7, #0]
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f88f 	bl	800919c <USBD_CtlError>
      break;
 800907e:	e01a      	b.n	80090b6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800908c:	2b00      	cmp	r3, #0
 800908e:	d005      	beq.n	800909c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	f043 0202 	orr.w	r2, r3, #2
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	330c      	adds	r3, #12
 80090a0:	2202      	movs	r2, #2
 80090a2:	4619      	mov	r1, r3
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f8ea 	bl	800927e <USBD_CtlSendData>
    break;
 80090aa:	e004      	b.n	80090b6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80090ac:	6839      	ldr	r1, [r7, #0]
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f874 	bl	800919c <USBD_CtlError>
    break;
 80090b4:	bf00      	nop
  }
}
 80090b6:	bf00      	nop
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b082      	sub	sp, #8
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	885b      	ldrh	r3, [r3, #2]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d106      	bne.n	80090de <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f92a 	bl	8009332 <USBD_CtlSendStatus>
  }
}
 80090de:	bf00      	nop
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b082      	sub	sp, #8
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f6:	3b01      	subs	r3, #1
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d80b      	bhi.n	8009114 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	885b      	ldrh	r3, [r3, #2]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d10c      	bne.n	800911e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f910 	bl	8009332 <USBD_CtlSendStatus>
      }
      break;
 8009112:	e004      	b.n	800911e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009114:	6839      	ldr	r1, [r7, #0]
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f840 	bl	800919c <USBD_CtlError>
      break;
 800911c:	e000      	b.n	8009120 <USBD_ClrFeature+0x3a>
      break;
 800911e:	bf00      	nop
  }
}
 8009120:	bf00      	nop
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	781a      	ldrb	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	3301      	adds	r3, #1
 8009142:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	781a      	ldrb	r2, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	3301      	adds	r3, #1
 8009150:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f7ff fad3 	bl	80086fe <SWAPBYTE>
 8009158:	4603      	mov	r3, r0
 800915a:	461a      	mov	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	3301      	adds	r3, #1
 8009164:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	3301      	adds	r3, #1
 800916a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f7ff fac6 	bl	80086fe <SWAPBYTE>
 8009172:	4603      	mov	r3, r0
 8009174:	461a      	mov	r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	3301      	adds	r3, #1
 800917e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	3301      	adds	r3, #1
 8009184:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f7ff fab9 	bl	80086fe <SWAPBYTE>
 800918c:	4603      	mov	r3, r0
 800918e:	461a      	mov	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	80da      	strh	r2, [r3, #6]
}
 8009194:	bf00      	nop
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80091a6:	2180      	movs	r1, #128	; 0x80
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fce9 	bl	8009b80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80091ae:	2100      	movs	r1, #0
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fce5 	bl	8009b80 <USBD_LL_StallEP>
}
 80091b6:	bf00      	nop
 80091b8:	3708      	adds	r7, #8
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b086      	sub	sp, #24
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	60f8      	str	r0, [r7, #12]
 80091c6:	60b9      	str	r1, [r7, #8]
 80091c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091ca:	2300      	movs	r3, #0
 80091cc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d036      	beq.n	8009242 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80091d8:	6938      	ldr	r0, [r7, #16]
 80091da:	f000 f836 	bl	800924a <USBD_GetLen>
 80091de:	4603      	mov	r3, r0
 80091e0:	3301      	adds	r3, #1
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	005b      	lsls	r3, r3, #1
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80091ec:	7dfb      	ldrb	r3, [r7, #23]
 80091ee:	68ba      	ldr	r2, [r7, #8]
 80091f0:	4413      	add	r3, r2
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	7812      	ldrb	r2, [r2, #0]
 80091f6:	701a      	strb	r2, [r3, #0]
  idx++;
 80091f8:	7dfb      	ldrb	r3, [r7, #23]
 80091fa:	3301      	adds	r3, #1
 80091fc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80091fe:	7dfb      	ldrb	r3, [r7, #23]
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	4413      	add	r3, r2
 8009204:	2203      	movs	r2, #3
 8009206:	701a      	strb	r2, [r3, #0]
  idx++;
 8009208:	7dfb      	ldrb	r3, [r7, #23]
 800920a:	3301      	adds	r3, #1
 800920c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800920e:	e013      	b.n	8009238 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009210:	7dfb      	ldrb	r3, [r7, #23]
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	4413      	add	r3, r2
 8009216:	693a      	ldr	r2, [r7, #16]
 8009218:	7812      	ldrb	r2, [r2, #0]
 800921a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	3301      	adds	r3, #1
 8009220:	613b      	str	r3, [r7, #16]
    idx++;
 8009222:	7dfb      	ldrb	r3, [r7, #23]
 8009224:	3301      	adds	r3, #1
 8009226:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009228:	7dfb      	ldrb	r3, [r7, #23]
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	4413      	add	r3, r2
 800922e:	2200      	movs	r2, #0
 8009230:	701a      	strb	r2, [r3, #0]
    idx++;
 8009232:	7dfb      	ldrb	r3, [r7, #23]
 8009234:	3301      	adds	r3, #1
 8009236:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1e7      	bne.n	8009210 <USBD_GetString+0x52>
 8009240:	e000      	b.n	8009244 <USBD_GetString+0x86>
    return;
 8009242:	bf00      	nop
  }
}
 8009244:	3718      	adds	r7, #24
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800924a:	b480      	push	{r7}
 800924c:	b085      	sub	sp, #20
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009252:	2300      	movs	r3, #0
 8009254:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800925a:	e005      	b.n	8009268 <USBD_GetLen+0x1e>
  {
    len++;
 800925c:	7bfb      	ldrb	r3, [r7, #15]
 800925e:	3301      	adds	r3, #1
 8009260:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	3301      	adds	r3, #1
 8009266:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1f5      	bne.n	800925c <USBD_GetLen+0x12>
  }

  return len;
 8009270:	7bfb      	ldrb	r3, [r7, #15]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b084      	sub	sp, #16
 8009282:	af00      	add	r7, sp, #0
 8009284:	60f8      	str	r0, [r7, #12]
 8009286:	60b9      	str	r1, [r7, #8]
 8009288:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2202      	movs	r2, #2
 800928e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	68ba      	ldr	r2, [r7, #8]
 80092a2:	2100      	movs	r1, #0
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f000 fcf4 	bl	8009c92 <USBD_LL_Transmit>

  return USBD_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	68ba      	ldr	r2, [r7, #8]
 80092c4:	2100      	movs	r1, #0
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f000 fce3 	bl	8009c92 <USBD_LL_Transmit>

  return USBD_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3710      	adds	r7, #16
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b084      	sub	sp, #16
 80092da:	af00      	add	r7, sp, #0
 80092dc:	60f8      	str	r0, [r7, #12]
 80092de:	60b9      	str	r1, [r7, #8]
 80092e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2203      	movs	r2, #3
 80092e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	2100      	movs	r1, #0
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f000 fce7 	bl	8009cd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	2100      	movs	r1, #0
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f000 fcd6 	bl	8009cd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b082      	sub	sp, #8
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2204      	movs	r2, #4
 800933e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009342:	2300      	movs	r3, #0
 8009344:	2200      	movs	r2, #0
 8009346:	2100      	movs	r1, #0
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fca2 	bl	8009c92 <USBD_LL_Transmit>

  return USBD_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2205      	movs	r2, #5
 8009364:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009368:	2300      	movs	r3, #0
 800936a:	2200      	movs	r2, #0
 800936c:	2100      	movs	r1, #0
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fcb0 	bl	8009cd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
	...

08009380 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009384:	2200      	movs	r2, #0
 8009386:	4912      	ldr	r1, [pc, #72]	; (80093d0 <MX_USB_DEVICE_Init+0x50>)
 8009388:	4812      	ldr	r0, [pc, #72]	; (80093d4 <MX_USB_DEVICE_Init+0x54>)
 800938a:	f7fe fef3 	bl	8008174 <USBD_Init>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d001      	beq.n	8009398 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009394:	f7f8 f932 	bl	80015fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009398:	490f      	ldr	r1, [pc, #60]	; (80093d8 <MX_USB_DEVICE_Init+0x58>)
 800939a:	480e      	ldr	r0, [pc, #56]	; (80093d4 <MX_USB_DEVICE_Init+0x54>)
 800939c:	f7fe ff20 	bl	80081e0 <USBD_RegisterClass>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80093a6:	f7f8 f929 	bl	80015fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80093aa:	490c      	ldr	r1, [pc, #48]	; (80093dc <MX_USB_DEVICE_Init+0x5c>)
 80093ac:	4809      	ldr	r0, [pc, #36]	; (80093d4 <MX_USB_DEVICE_Init+0x54>)
 80093ae:	f7fe fe45 	bl	800803c <USBD_CDC_RegisterInterface>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d001      	beq.n	80093bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80093b8:	f7f8 f920 	bl	80015fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80093bc:	4805      	ldr	r0, [pc, #20]	; (80093d4 <MX_USB_DEVICE_Init+0x54>)
 80093be:	f7fe ff30 	bl	8008222 <USBD_Start>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80093c8:	f7f8 f918 	bl	80015fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80093cc:	bf00      	nop
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	20000138 	.word	0x20000138
 80093d4:	200004fc 	.word	0x200004fc
 80093d8:	20000018 	.word	0x20000018
 80093dc:	20000124 	.word	0x20000124

080093e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80093e4:	2200      	movs	r2, #0
 80093e6:	4905      	ldr	r1, [pc, #20]	; (80093fc <CDC_Init_FS+0x1c>)
 80093e8:	4805      	ldr	r0, [pc, #20]	; (8009400 <CDC_Init_FS+0x20>)
 80093ea:	f7fe fe3c 	bl	8008066 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80093ee:	4905      	ldr	r1, [pc, #20]	; (8009404 <CDC_Init_FS+0x24>)
 80093f0:	4803      	ldr	r0, [pc, #12]	; (8009400 <CDC_Init_FS+0x20>)
 80093f2:	f7fe fe51 	bl	8008098 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80093f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	20000fcc 	.word	0x20000fcc
 8009400:	200004fc 	.word	0x200004fc
 8009404:	200007cc 	.word	0x200007cc

08009408 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009408:	b480      	push	{r7}
 800940a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800940c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800940e:	4618      	mov	r0, r3
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	4603      	mov	r3, r0
 8009420:	6039      	str	r1, [r7, #0]
 8009422:	71fb      	strb	r3, [r7, #7]
 8009424:	4613      	mov	r3, r2
 8009426:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009428:	79fb      	ldrb	r3, [r7, #7]
 800942a:	2b23      	cmp	r3, #35	; 0x23
 800942c:	d85c      	bhi.n	80094e8 <CDC_Control_FS+0xd0>
 800942e:	a201      	add	r2, pc, #4	; (adr r2, 8009434 <CDC_Control_FS+0x1c>)
 8009430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009434:	080094e9 	.word	0x080094e9
 8009438:	080094e9 	.word	0x080094e9
 800943c:	080094e9 	.word	0x080094e9
 8009440:	080094e9 	.word	0x080094e9
 8009444:	080094e9 	.word	0x080094e9
 8009448:	080094e9 	.word	0x080094e9
 800944c:	080094e9 	.word	0x080094e9
 8009450:	080094e9 	.word	0x080094e9
 8009454:	080094e9 	.word	0x080094e9
 8009458:	080094e9 	.word	0x080094e9
 800945c:	080094e9 	.word	0x080094e9
 8009460:	080094e9 	.word	0x080094e9
 8009464:	080094e9 	.word	0x080094e9
 8009468:	080094e9 	.word	0x080094e9
 800946c:	080094e9 	.word	0x080094e9
 8009470:	080094e9 	.word	0x080094e9
 8009474:	080094e9 	.word	0x080094e9
 8009478:	080094e9 	.word	0x080094e9
 800947c:	080094e9 	.word	0x080094e9
 8009480:	080094e9 	.word	0x080094e9
 8009484:	080094e9 	.word	0x080094e9
 8009488:	080094e9 	.word	0x080094e9
 800948c:	080094e9 	.word	0x080094e9
 8009490:	080094e9 	.word	0x080094e9
 8009494:	080094e9 	.word	0x080094e9
 8009498:	080094e9 	.word	0x080094e9
 800949c:	080094e9 	.word	0x080094e9
 80094a0:	080094e9 	.word	0x080094e9
 80094a4:	080094e9 	.word	0x080094e9
 80094a8:	080094e9 	.word	0x080094e9
 80094ac:	080094e9 	.word	0x080094e9
 80094b0:	080094e9 	.word	0x080094e9
 80094b4:	080094c5 	.word	0x080094c5
 80094b8:	080094d7 	.word	0x080094d7
 80094bc:	080094e9 	.word	0x080094e9
 80094c0:	080094e9 	.word	0x080094e9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        memcpy(lineCoding, pbuf, sizeof(lineCoding));
 80094c4:	4b0c      	ldr	r3, [pc, #48]	; (80094f8 <CDC_Control_FS+0xe0>)
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	6810      	ldr	r0, [r2, #0]
 80094ca:	6018      	str	r0, [r3, #0]
 80094cc:	8891      	ldrh	r1, [r2, #4]
 80094ce:	7992      	ldrb	r2, [r2, #6]
 80094d0:	8099      	strh	r1, [r3, #4]
 80094d2:	719a      	strb	r2, [r3, #6]
    break;
 80094d4:	e009      	b.n	80094ea <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
        memcpy(pbuf, lineCoding, sizeof(lineCoding));
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	4a07      	ldr	r2, [pc, #28]	; (80094f8 <CDC_Control_FS+0xe0>)
 80094da:	6810      	ldr	r0, [r2, #0]
 80094dc:	6018      	str	r0, [r3, #0]
 80094de:	8891      	ldrh	r1, [r2, #4]
 80094e0:	7992      	ldrb	r2, [r2, #6]
 80094e2:	8099      	strh	r1, [r3, #4]
 80094e4:	719a      	strb	r2, [r3, #6]
    break;
 80094e6:	e000      	b.n	80094ea <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80094e8:	bf00      	nop
  }

  return (USBD_OK);
 80094ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr
 80094f8:	2000011c 	.word	0x2000011c

080094fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009506:	6879      	ldr	r1, [r7, #4]
 8009508:	4805      	ldr	r0, [pc, #20]	; (8009520 <CDC_Receive_FS+0x24>)
 800950a:	f7fe fdc5 	bl	8008098 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800950e:	4804      	ldr	r0, [pc, #16]	; (8009520 <CDC_Receive_FS+0x24>)
 8009510:	f7fe fe06 	bl	8008120 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009514:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009516:	4618      	mov	r0, r3
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	200004fc 	.word	0x200004fc

08009524 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	460b      	mov	r3, r1
 800952e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009534:	4b0d      	ldr	r3, [pc, #52]	; (800956c <CDC_Transmit_FS+0x48>)
 8009536:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800953a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009546:	2301      	movs	r3, #1
 8009548:	e00b      	b.n	8009562 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800954a:	887b      	ldrh	r3, [r7, #2]
 800954c:	461a      	mov	r2, r3
 800954e:	6879      	ldr	r1, [r7, #4]
 8009550:	4806      	ldr	r0, [pc, #24]	; (800956c <CDC_Transmit_FS+0x48>)
 8009552:	f7fe fd88 	bl	8008066 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009556:	4805      	ldr	r0, [pc, #20]	; (800956c <CDC_Transmit_FS+0x48>)
 8009558:	f7fe fdb2 	bl	80080c0 <USBD_CDC_TransmitPacket>
 800955c:	4603      	mov	r3, r0
 800955e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009560:	7bfb      	ldrb	r3, [r7, #15]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	200004fc 	.word	0x200004fc

08009570 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009570:	b480      	push	{r7}
 8009572:	b087      	sub	sp, #28
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	4613      	mov	r3, r2
 800957c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009582:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009586:	4618      	mov	r0, r3
 8009588:	371c      	adds	r7, #28
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
	...

08009594 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	4603      	mov	r3, r0
 800959c:	6039      	str	r1, [r7, #0]
 800959e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	2212      	movs	r2, #18
 80095a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80095a6:	4b03      	ldr	r3, [pc, #12]	; (80095b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr
 80095b4:	20000154 	.word	0x20000154

080095b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	4603      	mov	r3, r0
 80095c0:	6039      	str	r1, [r7, #0]
 80095c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	2204      	movs	r2, #4
 80095c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80095ca:	4b03      	ldr	r3, [pc, #12]	; (80095d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr
 80095d8:	20000168 	.word	0x20000168

080095dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	4603      	mov	r3, r0
 80095e4:	6039      	str	r1, [r7, #0]
 80095e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095e8:	79fb      	ldrb	r3, [r7, #7]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d105      	bne.n	80095fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095ee:	683a      	ldr	r2, [r7, #0]
 80095f0:	4907      	ldr	r1, [pc, #28]	; (8009610 <USBD_FS_ProductStrDescriptor+0x34>)
 80095f2:	4808      	ldr	r0, [pc, #32]	; (8009614 <USBD_FS_ProductStrDescriptor+0x38>)
 80095f4:	f7ff fde3 	bl	80091be <USBD_GetString>
 80095f8:	e004      	b.n	8009604 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095fa:	683a      	ldr	r2, [r7, #0]
 80095fc:	4904      	ldr	r1, [pc, #16]	; (8009610 <USBD_FS_ProductStrDescriptor+0x34>)
 80095fe:	4805      	ldr	r0, [pc, #20]	; (8009614 <USBD_FS_ProductStrDescriptor+0x38>)
 8009600:	f7ff fddd 	bl	80091be <USBD_GetString>
  }
  return USBD_StrDesc;
 8009604:	4b02      	ldr	r3, [pc, #8]	; (8009610 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009606:	4618      	mov	r0, r3
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	200017cc 	.word	0x200017cc
 8009614:	0800bf78 	.word	0x0800bf78

08009618 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	4603      	mov	r3, r0
 8009620:	6039      	str	r1, [r7, #0]
 8009622:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009624:	683a      	ldr	r2, [r7, #0]
 8009626:	4904      	ldr	r1, [pc, #16]	; (8009638 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009628:	4804      	ldr	r0, [pc, #16]	; (800963c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800962a:	f7ff fdc8 	bl	80091be <USBD_GetString>
  return USBD_StrDesc;
 800962e:	4b02      	ldr	r3, [pc, #8]	; (8009638 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009630:	4618      	mov	r0, r3
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	200017cc 	.word	0x200017cc
 800963c:	0800bf90 	.word	0x0800bf90

08009640 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	4603      	mov	r3, r0
 8009648:	6039      	str	r1, [r7, #0]
 800964a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	221a      	movs	r2, #26
 8009650:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009652:	f000 f843 	bl	80096dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009656:	4b02      	ldr	r3, [pc, #8]	; (8009660 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009658:	4618      	mov	r0, r3
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	2000016c 	.word	0x2000016c

08009664 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	4603      	mov	r3, r0
 800966c:	6039      	str	r1, [r7, #0]
 800966e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009670:	79fb      	ldrb	r3, [r7, #7]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d105      	bne.n	8009682 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009676:	683a      	ldr	r2, [r7, #0]
 8009678:	4907      	ldr	r1, [pc, #28]	; (8009698 <USBD_FS_ConfigStrDescriptor+0x34>)
 800967a:	4808      	ldr	r0, [pc, #32]	; (800969c <USBD_FS_ConfigStrDescriptor+0x38>)
 800967c:	f7ff fd9f 	bl	80091be <USBD_GetString>
 8009680:	e004      	b.n	800968c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	4904      	ldr	r1, [pc, #16]	; (8009698 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009686:	4805      	ldr	r0, [pc, #20]	; (800969c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009688:	f7ff fd99 	bl	80091be <USBD_GetString>
  }
  return USBD_StrDesc;
 800968c:	4b02      	ldr	r3, [pc, #8]	; (8009698 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800968e:	4618      	mov	r0, r3
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	200017cc 	.word	0x200017cc
 800969c:	0800bfa4 	.word	0x0800bfa4

080096a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	4603      	mov	r3, r0
 80096a8:	6039      	str	r1, [r7, #0]
 80096aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096ac:	79fb      	ldrb	r3, [r7, #7]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d105      	bne.n	80096be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	4907      	ldr	r1, [pc, #28]	; (80096d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096b6:	4808      	ldr	r0, [pc, #32]	; (80096d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096b8:	f7ff fd81 	bl	80091be <USBD_GetString>
 80096bc:	e004      	b.n	80096c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096be:	683a      	ldr	r2, [r7, #0]
 80096c0:	4904      	ldr	r1, [pc, #16]	; (80096d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096c2:	4805      	ldr	r0, [pc, #20]	; (80096d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096c4:	f7ff fd7b 	bl	80091be <USBD_GetString>
  }
  return USBD_StrDesc;
 80096c8:	4b02      	ldr	r3, [pc, #8]	; (80096d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3708      	adds	r7, #8
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	200017cc 	.word	0x200017cc
 80096d8:	0800bfb0 	.word	0x0800bfb0

080096dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096e2:	4b0f      	ldr	r3, [pc, #60]	; (8009720 <Get_SerialNum+0x44>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80096e8:	4b0e      	ldr	r3, [pc, #56]	; (8009724 <Get_SerialNum+0x48>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80096ee:	4b0e      	ldr	r3, [pc, #56]	; (8009728 <Get_SerialNum+0x4c>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4413      	add	r3, r2
 80096fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d009      	beq.n	8009716 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009702:	2208      	movs	r2, #8
 8009704:	4909      	ldr	r1, [pc, #36]	; (800972c <Get_SerialNum+0x50>)
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f000 f814 	bl	8009734 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800970c:	2204      	movs	r2, #4
 800970e:	4908      	ldr	r1, [pc, #32]	; (8009730 <Get_SerialNum+0x54>)
 8009710:	68b8      	ldr	r0, [r7, #8]
 8009712:	f000 f80f 	bl	8009734 <IntToUnicode>
  }
}
 8009716:	bf00      	nop
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	1fff7a10 	.word	0x1fff7a10
 8009724:	1fff7a14 	.word	0x1fff7a14
 8009728:	1fff7a18 	.word	0x1fff7a18
 800972c:	2000016e 	.word	0x2000016e
 8009730:	2000017e 	.word	0x2000017e

08009734 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009734:	b480      	push	{r7}
 8009736:	b087      	sub	sp, #28
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	4613      	mov	r3, r2
 8009740:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009746:	2300      	movs	r3, #0
 8009748:	75fb      	strb	r3, [r7, #23]
 800974a:	e027      	b.n	800979c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	0f1b      	lsrs	r3, r3, #28
 8009750:	2b09      	cmp	r3, #9
 8009752:	d80b      	bhi.n	800976c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	0f1b      	lsrs	r3, r3, #28
 8009758:	b2da      	uxtb	r2, r3
 800975a:	7dfb      	ldrb	r3, [r7, #23]
 800975c:	005b      	lsls	r3, r3, #1
 800975e:	4619      	mov	r1, r3
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	440b      	add	r3, r1
 8009764:	3230      	adds	r2, #48	; 0x30
 8009766:	b2d2      	uxtb	r2, r2
 8009768:	701a      	strb	r2, [r3, #0]
 800976a:	e00a      	b.n	8009782 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	0f1b      	lsrs	r3, r3, #28
 8009770:	b2da      	uxtb	r2, r3
 8009772:	7dfb      	ldrb	r3, [r7, #23]
 8009774:	005b      	lsls	r3, r3, #1
 8009776:	4619      	mov	r1, r3
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	440b      	add	r3, r1
 800977c:	3237      	adds	r2, #55	; 0x37
 800977e:	b2d2      	uxtb	r2, r2
 8009780:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	011b      	lsls	r3, r3, #4
 8009786:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009788:	7dfb      	ldrb	r3, [r7, #23]
 800978a:	005b      	lsls	r3, r3, #1
 800978c:	3301      	adds	r3, #1
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	4413      	add	r3, r2
 8009792:	2200      	movs	r2, #0
 8009794:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009796:	7dfb      	ldrb	r3, [r7, #23]
 8009798:	3301      	adds	r3, #1
 800979a:	75fb      	strb	r3, [r7, #23]
 800979c:	7dfa      	ldrb	r2, [r7, #23]
 800979e:	79fb      	ldrb	r3, [r7, #7]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d3d3      	bcc.n	800974c <IntToUnicode+0x18>
  }
}
 80097a4:	bf00      	nop
 80097a6:	371c      	adds	r7, #28
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b08a      	sub	sp, #40	; 0x28
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097b8:	f107 0314 	add.w	r3, r7, #20
 80097bc:	2200      	movs	r2, #0
 80097be:	601a      	str	r2, [r3, #0]
 80097c0:	605a      	str	r2, [r3, #4]
 80097c2:	609a      	str	r2, [r3, #8]
 80097c4:	60da      	str	r2, [r3, #12]
 80097c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097d0:	d13a      	bne.n	8009848 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097d2:	2300      	movs	r3, #0
 80097d4:	613b      	str	r3, [r7, #16]
 80097d6:	4b1e      	ldr	r3, [pc, #120]	; (8009850 <HAL_PCD_MspInit+0xa0>)
 80097d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097da:	4a1d      	ldr	r2, [pc, #116]	; (8009850 <HAL_PCD_MspInit+0xa0>)
 80097dc:	f043 0301 	orr.w	r3, r3, #1
 80097e0:	6313      	str	r3, [r2, #48]	; 0x30
 80097e2:	4b1b      	ldr	r3, [pc, #108]	; (8009850 <HAL_PCD_MspInit+0xa0>)
 80097e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e6:	f003 0301 	and.w	r3, r3, #1
 80097ea:	613b      	str	r3, [r7, #16]
 80097ec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80097ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80097f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097f4:	2302      	movs	r3, #2
 80097f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097f8:	2300      	movs	r3, #0
 80097fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097fc:	2303      	movs	r3, #3
 80097fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009800:	230a      	movs	r3, #10
 8009802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009804:	f107 0314 	add.w	r3, r7, #20
 8009808:	4619      	mov	r1, r3
 800980a:	4812      	ldr	r0, [pc, #72]	; (8009854 <HAL_PCD_MspInit+0xa4>)
 800980c:	f7f9 f910 	bl	8002a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009810:	4b0f      	ldr	r3, [pc, #60]	; (8009850 <HAL_PCD_MspInit+0xa0>)
 8009812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009814:	4a0e      	ldr	r2, [pc, #56]	; (8009850 <HAL_PCD_MspInit+0xa0>)
 8009816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800981a:	6353      	str	r3, [r2, #52]	; 0x34
 800981c:	2300      	movs	r3, #0
 800981e:	60fb      	str	r3, [r7, #12]
 8009820:	4b0b      	ldr	r3, [pc, #44]	; (8009850 <HAL_PCD_MspInit+0xa0>)
 8009822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009824:	4a0a      	ldr	r2, [pc, #40]	; (8009850 <HAL_PCD_MspInit+0xa0>)
 8009826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800982a:	6453      	str	r3, [r2, #68]	; 0x44
 800982c:	4b08      	ldr	r3, [pc, #32]	; (8009850 <HAL_PCD_MspInit+0xa0>)
 800982e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009834:	60fb      	str	r3, [r7, #12]
 8009836:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009838:	2200      	movs	r2, #0
 800983a:	2100      	movs	r1, #0
 800983c:	2043      	movs	r0, #67	; 0x43
 800983e:	f7f9 f8c0 	bl	80029c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009842:	2043      	movs	r0, #67	; 0x43
 8009844:	f7f9 f8d9 	bl	80029fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009848:	bf00      	nop
 800984a:	3728      	adds	r7, #40	; 0x28
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}
 8009850:	40023800 	.word	0x40023800
 8009854:	40020000 	.word	0x40020000

08009858 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800986c:	4619      	mov	r1, r3
 800986e:	4610      	mov	r0, r2
 8009870:	f7fe fd22 	bl	80082b8 <USBD_LL_SetupStage>
}
 8009874:	bf00      	nop
 8009876:	3708      	adds	r7, #8
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	460b      	mov	r3, r1
 8009886:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800988e:	78fa      	ldrb	r2, [r7, #3]
 8009890:	6879      	ldr	r1, [r7, #4]
 8009892:	4613      	mov	r3, r2
 8009894:	00db      	lsls	r3, r3, #3
 8009896:	1a9b      	subs	r3, r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	440b      	add	r3, r1
 800989c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	78fb      	ldrb	r3, [r7, #3]
 80098a4:	4619      	mov	r1, r3
 80098a6:	f7fe fd5a 	bl	800835e <USBD_LL_DataOutStage>
}
 80098aa:	bf00      	nop
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b082      	sub	sp, #8
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	460b      	mov	r3, r1
 80098bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80098c4:	78fa      	ldrb	r2, [r7, #3]
 80098c6:	6879      	ldr	r1, [r7, #4]
 80098c8:	4613      	mov	r3, r2
 80098ca:	00db      	lsls	r3, r3, #3
 80098cc:	1a9b      	subs	r3, r3, r2
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	440b      	add	r3, r1
 80098d2:	3348      	adds	r3, #72	; 0x48
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	78fb      	ldrb	r3, [r7, #3]
 80098d8:	4619      	mov	r1, r3
 80098da:	f7fe fda3 	bl	8008424 <USBD_LL_DataInStage>
}
 80098de:	bf00      	nop
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b082      	sub	sp, #8
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7fe fea7 	bl	8008648 <USBD_LL_SOF>
}
 80098fa:	bf00      	nop
 80098fc:	3708      	adds	r7, #8
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b084      	sub	sp, #16
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800990a:	2301      	movs	r3, #1
 800990c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	2b02      	cmp	r3, #2
 8009914:	d001      	beq.n	800991a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009916:	f7f7 fe71 	bl	80015fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009920:	7bfa      	ldrb	r2, [r7, #15]
 8009922:	4611      	mov	r1, r2
 8009924:	4618      	mov	r0, r3
 8009926:	f7fe fe54 	bl	80085d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009930:	4618      	mov	r0, r3
 8009932:	f7fe fe0d 	bl	8008550 <USBD_LL_Reset>
}
 8009936:	bf00      	nop
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
	...

08009940 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800994e:	4618      	mov	r0, r3
 8009950:	f7fe fe4f 	bl	80085f2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	6812      	ldr	r2, [r2, #0]
 8009962:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009966:	f043 0301 	orr.w	r3, r3, #1
 800996a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a1b      	ldr	r3, [r3, #32]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d005      	beq.n	8009980 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009974:	4b04      	ldr	r3, [pc, #16]	; (8009988 <HAL_PCD_SuspendCallback+0x48>)
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	4a03      	ldr	r2, [pc, #12]	; (8009988 <HAL_PCD_SuspendCallback+0x48>)
 800997a:	f043 0306 	orr.w	r3, r3, #6
 800997e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009980:	bf00      	nop
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	e000ed00 	.word	0xe000ed00

0800998c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800999a:	4618      	mov	r0, r3
 800999c:	f7fe fe3e 	bl	800861c <USBD_LL_Resume>
}
 80099a0:	bf00      	nop
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	460b      	mov	r3, r1
 80099b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099ba:	78fa      	ldrb	r2, [r7, #3]
 80099bc:	4611      	mov	r1, r2
 80099be:	4618      	mov	r0, r3
 80099c0:	f7fe fe69 	bl	8008696 <USBD_LL_IsoOUTIncomplete>
}
 80099c4:	bf00      	nop
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	460b      	mov	r3, r1
 80099d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099de:	78fa      	ldrb	r2, [r7, #3]
 80099e0:	4611      	mov	r1, r2
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fe fe4a 	bl	800867c <USBD_LL_IsoINIncomplete>
}
 80099e8:	bf00      	nop
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7fe fe56 	bl	80086b0 <USBD_LL_DevConnected>
}
 8009a04:	bf00      	nop
 8009a06:	3708      	adds	r7, #8
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fe fe53 	bl	80086c6 <USBD_LL_DevDisconnected>
}
 8009a20:	bf00      	nop
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d13c      	bne.n	8009ab2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009a38:	4a20      	ldr	r2, [pc, #128]	; (8009abc <USBD_LL_Init+0x94>)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4a1e      	ldr	r2, [pc, #120]	; (8009abc <USBD_LL_Init+0x94>)
 8009a44:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009a48:	4b1c      	ldr	r3, [pc, #112]	; (8009abc <USBD_LL_Init+0x94>)
 8009a4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009a4e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009a50:	4b1a      	ldr	r3, [pc, #104]	; (8009abc <USBD_LL_Init+0x94>)
 8009a52:	2204      	movs	r2, #4
 8009a54:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009a56:	4b19      	ldr	r3, [pc, #100]	; (8009abc <USBD_LL_Init+0x94>)
 8009a58:	2202      	movs	r2, #2
 8009a5a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009a5c:	4b17      	ldr	r3, [pc, #92]	; (8009abc <USBD_LL_Init+0x94>)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009a62:	4b16      	ldr	r3, [pc, #88]	; (8009abc <USBD_LL_Init+0x94>)
 8009a64:	2202      	movs	r2, #2
 8009a66:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009a68:	4b14      	ldr	r3, [pc, #80]	; (8009abc <USBD_LL_Init+0x94>)
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009a6e:	4b13      	ldr	r3, [pc, #76]	; (8009abc <USBD_LL_Init+0x94>)
 8009a70:	2200      	movs	r2, #0
 8009a72:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009a74:	4b11      	ldr	r3, [pc, #68]	; (8009abc <USBD_LL_Init+0x94>)
 8009a76:	2200      	movs	r2, #0
 8009a78:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009a7a:	4b10      	ldr	r3, [pc, #64]	; (8009abc <USBD_LL_Init+0x94>)
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009a80:	4b0e      	ldr	r3, [pc, #56]	; (8009abc <USBD_LL_Init+0x94>)
 8009a82:	2200      	movs	r2, #0
 8009a84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009a86:	480d      	ldr	r0, [pc, #52]	; (8009abc <USBD_LL_Init+0x94>)
 8009a88:	f7f9 fad8 	bl	800303c <HAL_PCD_Init>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d001      	beq.n	8009a96 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009a92:	f7f7 fdb3 	bl	80015fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009a96:	2180      	movs	r1, #128	; 0x80
 8009a98:	4808      	ldr	r0, [pc, #32]	; (8009abc <USBD_LL_Init+0x94>)
 8009a9a:	f7fa fc36 	bl	800430a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009a9e:	2240      	movs	r2, #64	; 0x40
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	4806      	ldr	r0, [pc, #24]	; (8009abc <USBD_LL_Init+0x94>)
 8009aa4:	f7fa fbea 	bl	800427c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009aa8:	2280      	movs	r2, #128	; 0x80
 8009aaa:	2101      	movs	r1, #1
 8009aac:	4803      	ldr	r0, [pc, #12]	; (8009abc <USBD_LL_Init+0x94>)
 8009aae:	f7fa fbe5 	bl	800427c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	200019cc 	.word	0x200019cc

08009ac0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009acc:	2300      	movs	r3, #0
 8009ace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7f9 fbcd 	bl	8003276 <HAL_PCD_Start>
 8009adc:	4603      	mov	r3, r0
 8009ade:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f000 f92a 	bl	8009d3c <USBD_Get_USB_Status>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aec:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b084      	sub	sp, #16
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
 8009afe:	4608      	mov	r0, r1
 8009b00:	4611      	mov	r1, r2
 8009b02:	461a      	mov	r2, r3
 8009b04:	4603      	mov	r3, r0
 8009b06:	70fb      	strb	r3, [r7, #3]
 8009b08:	460b      	mov	r3, r1
 8009b0a:	70bb      	strb	r3, [r7, #2]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b14:	2300      	movs	r3, #0
 8009b16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009b1e:	78bb      	ldrb	r3, [r7, #2]
 8009b20:	883a      	ldrh	r2, [r7, #0]
 8009b22:	78f9      	ldrb	r1, [r7, #3]
 8009b24:	f7f9 ffb1 	bl	8003a8a <HAL_PCD_EP_Open>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f000 f904 	bl	8009d3c <USBD_Get_USB_Status>
 8009b34:	4603      	mov	r3, r0
 8009b36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b084      	sub	sp, #16
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b52:	2300      	movs	r3, #0
 8009b54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b5c:	78fa      	ldrb	r2, [r7, #3]
 8009b5e:	4611      	mov	r1, r2
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7f9 fffa 	bl	8003b5a <HAL_PCD_EP_Close>
 8009b66:	4603      	mov	r3, r0
 8009b68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b6a:	7bfb      	ldrb	r3, [r7, #15]
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f000 f8e5 	bl	8009d3c <USBD_Get_USB_Status>
 8009b72:	4603      	mov	r3, r0
 8009b74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b76:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	460b      	mov	r3, r1
 8009b8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b90:	2300      	movs	r3, #0
 8009b92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b9a:	78fa      	ldrb	r2, [r7, #3]
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7fa f8d2 	bl	8003d48 <HAL_PCD_EP_SetStall>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ba8:	7bfb      	ldrb	r3, [r7, #15]
 8009baa:	4618      	mov	r0, r3
 8009bac:	f000 f8c6 	bl	8009d3c <USBD_Get_USB_Status>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3710      	adds	r7, #16
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b084      	sub	sp, #16
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bd8:	78fa      	ldrb	r2, [r7, #3]
 8009bda:	4611      	mov	r1, r2
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f7fa f917 	bl	8003e10 <HAL_PCD_EP_ClrStall>
 8009be2:	4603      	mov	r3, r0
 8009be4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 f8a7 	bl	8009d3c <USBD_Get_USB_Status>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bf2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	460b      	mov	r3, r1
 8009c06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	da0b      	bge.n	8009c30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c18:	78fb      	ldrb	r3, [r7, #3]
 8009c1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c1e:	68f9      	ldr	r1, [r7, #12]
 8009c20:	4613      	mov	r3, r2
 8009c22:	00db      	lsls	r3, r3, #3
 8009c24:	1a9b      	subs	r3, r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	440b      	add	r3, r1
 8009c2a:	333e      	adds	r3, #62	; 0x3e
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	e00b      	b.n	8009c48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009c30:	78fb      	ldrb	r3, [r7, #3]
 8009c32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c36:	68f9      	ldr	r1, [r7, #12]
 8009c38:	4613      	mov	r3, r2
 8009c3a:	00db      	lsls	r3, r3, #3
 8009c3c:	1a9b      	subs	r3, r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	440b      	add	r3, r1
 8009c42:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009c46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3714      	adds	r7, #20
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c60:	2300      	movs	r3, #0
 8009c62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c64:	2300      	movs	r3, #0
 8009c66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c6e:	78fa      	ldrb	r2, [r7, #3]
 8009c70:	4611      	mov	r1, r2
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7f9 fee4 	bl	8003a40 <HAL_PCD_SetAddress>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c7c:	7bfb      	ldrb	r3, [r7, #15]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f000 f85c 	bl	8009d3c <USBD_Get_USB_Status>
 8009c84:	4603      	mov	r3, r0
 8009c86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c88:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b086      	sub	sp, #24
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	60f8      	str	r0, [r7, #12]
 8009c9a:	607a      	str	r2, [r7, #4]
 8009c9c:	603b      	str	r3, [r7, #0]
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009cb0:	7af9      	ldrb	r1, [r7, #11]
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	f7f9 fffd 	bl	8003cb4 <HAL_PCD_EP_Transmit>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cbe:	7dfb      	ldrb	r3, [r7, #23]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f000 f83b 	bl	8009d3c <USBD_Get_USB_Status>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009cca:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3718      	adds	r7, #24
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	607a      	str	r2, [r7, #4]
 8009cde:	603b      	str	r3, [r7, #0]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009cf2:	7af9      	ldrb	r1, [r7, #11]
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	f7f9 ff79 	bl	8003bee <HAL_PCD_EP_Receive>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d00:	7dfb      	ldrb	r3, [r7, #23]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f000 f81a 	bl	8009d3c <USBD_Get_USB_Status>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3718      	adds	r7, #24
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b082      	sub	sp, #8
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
 8009d1e:	460b      	mov	r3, r1
 8009d20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d28:	78fa      	ldrb	r2, [r7, #3]
 8009d2a:	4611      	mov	r1, r2
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f7f9 ffa9 	bl	8003c84 <HAL_PCD_EP_GetRxCount>
 8009d32:	4603      	mov	r3, r0
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3708      	adds	r7, #8
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	4603      	mov	r3, r0
 8009d44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d46:	2300      	movs	r3, #0
 8009d48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d4a:	79fb      	ldrb	r3, [r7, #7]
 8009d4c:	2b03      	cmp	r3, #3
 8009d4e:	d817      	bhi.n	8009d80 <USBD_Get_USB_Status+0x44>
 8009d50:	a201      	add	r2, pc, #4	; (adr r2, 8009d58 <USBD_Get_USB_Status+0x1c>)
 8009d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d56:	bf00      	nop
 8009d58:	08009d69 	.word	0x08009d69
 8009d5c:	08009d6f 	.word	0x08009d6f
 8009d60:	08009d75 	.word	0x08009d75
 8009d64:	08009d7b 	.word	0x08009d7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8009d6c:	e00b      	b.n	8009d86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009d6e:	2303      	movs	r3, #3
 8009d70:	73fb      	strb	r3, [r7, #15]
    break;
 8009d72:	e008      	b.n	8009d86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d74:	2301      	movs	r3, #1
 8009d76:	73fb      	strb	r3, [r7, #15]
    break;
 8009d78:	e005      	b.n	8009d86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d7a:	2303      	movs	r3, #3
 8009d7c:	73fb      	strb	r3, [r7, #15]
    break;
 8009d7e:	e002      	b.n	8009d86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009d80:	2303      	movs	r3, #3
 8009d82:	73fb      	strb	r3, [r7, #15]
    break;
 8009d84:	bf00      	nop
  }
  return usb_status;
 8009d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3714      	adds	r7, #20
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <__errno>:
 8009d94:	4b01      	ldr	r3, [pc, #4]	; (8009d9c <__errno+0x8>)
 8009d96:	6818      	ldr	r0, [r3, #0]
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	20000188 	.word	0x20000188

08009da0 <__libc_init_array>:
 8009da0:	b570      	push	{r4, r5, r6, lr}
 8009da2:	4e0d      	ldr	r6, [pc, #52]	; (8009dd8 <__libc_init_array+0x38>)
 8009da4:	4c0d      	ldr	r4, [pc, #52]	; (8009ddc <__libc_init_array+0x3c>)
 8009da6:	1ba4      	subs	r4, r4, r6
 8009da8:	10a4      	asrs	r4, r4, #2
 8009daa:	2500      	movs	r5, #0
 8009dac:	42a5      	cmp	r5, r4
 8009dae:	d109      	bne.n	8009dc4 <__libc_init_array+0x24>
 8009db0:	4e0b      	ldr	r6, [pc, #44]	; (8009de0 <__libc_init_array+0x40>)
 8009db2:	4c0c      	ldr	r4, [pc, #48]	; (8009de4 <__libc_init_array+0x44>)
 8009db4:	f002 f87a 	bl	800beac <_init>
 8009db8:	1ba4      	subs	r4, r4, r6
 8009dba:	10a4      	asrs	r4, r4, #2
 8009dbc:	2500      	movs	r5, #0
 8009dbe:	42a5      	cmp	r5, r4
 8009dc0:	d105      	bne.n	8009dce <__libc_init_array+0x2e>
 8009dc2:	bd70      	pop	{r4, r5, r6, pc}
 8009dc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009dc8:	4798      	blx	r3
 8009dca:	3501      	adds	r5, #1
 8009dcc:	e7ee      	b.n	8009dac <__libc_init_array+0xc>
 8009dce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009dd2:	4798      	blx	r3
 8009dd4:	3501      	adds	r5, #1
 8009dd6:	e7f2      	b.n	8009dbe <__libc_init_array+0x1e>
 8009dd8:	0800c2a0 	.word	0x0800c2a0
 8009ddc:	0800c2a0 	.word	0x0800c2a0
 8009de0:	0800c2a0 	.word	0x0800c2a0
 8009de4:	0800c2a4 	.word	0x0800c2a4

08009de8 <malloc>:
 8009de8:	4b02      	ldr	r3, [pc, #8]	; (8009df4 <malloc+0xc>)
 8009dea:	4601      	mov	r1, r0
 8009dec:	6818      	ldr	r0, [r3, #0]
 8009dee:	f000 b86d 	b.w	8009ecc <_malloc_r>
 8009df2:	bf00      	nop
 8009df4:	20000188 	.word	0x20000188

08009df8 <free>:
 8009df8:	4b02      	ldr	r3, [pc, #8]	; (8009e04 <free+0xc>)
 8009dfa:	4601      	mov	r1, r0
 8009dfc:	6818      	ldr	r0, [r3, #0]
 8009dfe:	f000 b817 	b.w	8009e30 <_free_r>
 8009e02:	bf00      	nop
 8009e04:	20000188 	.word	0x20000188

08009e08 <memcpy>:
 8009e08:	b510      	push	{r4, lr}
 8009e0a:	1e43      	subs	r3, r0, #1
 8009e0c:	440a      	add	r2, r1
 8009e0e:	4291      	cmp	r1, r2
 8009e10:	d100      	bne.n	8009e14 <memcpy+0xc>
 8009e12:	bd10      	pop	{r4, pc}
 8009e14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e1c:	e7f7      	b.n	8009e0e <memcpy+0x6>

08009e1e <memset>:
 8009e1e:	4402      	add	r2, r0
 8009e20:	4603      	mov	r3, r0
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d100      	bne.n	8009e28 <memset+0xa>
 8009e26:	4770      	bx	lr
 8009e28:	f803 1b01 	strb.w	r1, [r3], #1
 8009e2c:	e7f9      	b.n	8009e22 <memset+0x4>
	...

08009e30 <_free_r>:
 8009e30:	b538      	push	{r3, r4, r5, lr}
 8009e32:	4605      	mov	r5, r0
 8009e34:	2900      	cmp	r1, #0
 8009e36:	d045      	beq.n	8009ec4 <_free_r+0x94>
 8009e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e3c:	1f0c      	subs	r4, r1, #4
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	bfb8      	it	lt
 8009e42:	18e4      	addlt	r4, r4, r3
 8009e44:	f001 fb8e 	bl	800b564 <__malloc_lock>
 8009e48:	4a1f      	ldr	r2, [pc, #124]	; (8009ec8 <_free_r+0x98>)
 8009e4a:	6813      	ldr	r3, [r2, #0]
 8009e4c:	4610      	mov	r0, r2
 8009e4e:	b933      	cbnz	r3, 8009e5e <_free_r+0x2e>
 8009e50:	6063      	str	r3, [r4, #4]
 8009e52:	6014      	str	r4, [r2, #0]
 8009e54:	4628      	mov	r0, r5
 8009e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e5a:	f001 bb84 	b.w	800b566 <__malloc_unlock>
 8009e5e:	42a3      	cmp	r3, r4
 8009e60:	d90c      	bls.n	8009e7c <_free_r+0x4c>
 8009e62:	6821      	ldr	r1, [r4, #0]
 8009e64:	1862      	adds	r2, r4, r1
 8009e66:	4293      	cmp	r3, r2
 8009e68:	bf04      	itt	eq
 8009e6a:	681a      	ldreq	r2, [r3, #0]
 8009e6c:	685b      	ldreq	r3, [r3, #4]
 8009e6e:	6063      	str	r3, [r4, #4]
 8009e70:	bf04      	itt	eq
 8009e72:	1852      	addeq	r2, r2, r1
 8009e74:	6022      	streq	r2, [r4, #0]
 8009e76:	6004      	str	r4, [r0, #0]
 8009e78:	e7ec      	b.n	8009e54 <_free_r+0x24>
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	685a      	ldr	r2, [r3, #4]
 8009e7e:	b10a      	cbz	r2, 8009e84 <_free_r+0x54>
 8009e80:	42a2      	cmp	r2, r4
 8009e82:	d9fa      	bls.n	8009e7a <_free_r+0x4a>
 8009e84:	6819      	ldr	r1, [r3, #0]
 8009e86:	1858      	adds	r0, r3, r1
 8009e88:	42a0      	cmp	r0, r4
 8009e8a:	d10b      	bne.n	8009ea4 <_free_r+0x74>
 8009e8c:	6820      	ldr	r0, [r4, #0]
 8009e8e:	4401      	add	r1, r0
 8009e90:	1858      	adds	r0, r3, r1
 8009e92:	4282      	cmp	r2, r0
 8009e94:	6019      	str	r1, [r3, #0]
 8009e96:	d1dd      	bne.n	8009e54 <_free_r+0x24>
 8009e98:	6810      	ldr	r0, [r2, #0]
 8009e9a:	6852      	ldr	r2, [r2, #4]
 8009e9c:	605a      	str	r2, [r3, #4]
 8009e9e:	4401      	add	r1, r0
 8009ea0:	6019      	str	r1, [r3, #0]
 8009ea2:	e7d7      	b.n	8009e54 <_free_r+0x24>
 8009ea4:	d902      	bls.n	8009eac <_free_r+0x7c>
 8009ea6:	230c      	movs	r3, #12
 8009ea8:	602b      	str	r3, [r5, #0]
 8009eaa:	e7d3      	b.n	8009e54 <_free_r+0x24>
 8009eac:	6820      	ldr	r0, [r4, #0]
 8009eae:	1821      	adds	r1, r4, r0
 8009eb0:	428a      	cmp	r2, r1
 8009eb2:	bf04      	itt	eq
 8009eb4:	6811      	ldreq	r1, [r2, #0]
 8009eb6:	6852      	ldreq	r2, [r2, #4]
 8009eb8:	6062      	str	r2, [r4, #4]
 8009eba:	bf04      	itt	eq
 8009ebc:	1809      	addeq	r1, r1, r0
 8009ebe:	6021      	streq	r1, [r4, #0]
 8009ec0:	605c      	str	r4, [r3, #4]
 8009ec2:	e7c7      	b.n	8009e54 <_free_r+0x24>
 8009ec4:	bd38      	pop	{r3, r4, r5, pc}
 8009ec6:	bf00      	nop
 8009ec8:	2000037c 	.word	0x2000037c

08009ecc <_malloc_r>:
 8009ecc:	b570      	push	{r4, r5, r6, lr}
 8009ece:	1ccd      	adds	r5, r1, #3
 8009ed0:	f025 0503 	bic.w	r5, r5, #3
 8009ed4:	3508      	adds	r5, #8
 8009ed6:	2d0c      	cmp	r5, #12
 8009ed8:	bf38      	it	cc
 8009eda:	250c      	movcc	r5, #12
 8009edc:	2d00      	cmp	r5, #0
 8009ede:	4606      	mov	r6, r0
 8009ee0:	db01      	blt.n	8009ee6 <_malloc_r+0x1a>
 8009ee2:	42a9      	cmp	r1, r5
 8009ee4:	d903      	bls.n	8009eee <_malloc_r+0x22>
 8009ee6:	230c      	movs	r3, #12
 8009ee8:	6033      	str	r3, [r6, #0]
 8009eea:	2000      	movs	r0, #0
 8009eec:	bd70      	pop	{r4, r5, r6, pc}
 8009eee:	f001 fb39 	bl	800b564 <__malloc_lock>
 8009ef2:	4a21      	ldr	r2, [pc, #132]	; (8009f78 <_malloc_r+0xac>)
 8009ef4:	6814      	ldr	r4, [r2, #0]
 8009ef6:	4621      	mov	r1, r4
 8009ef8:	b991      	cbnz	r1, 8009f20 <_malloc_r+0x54>
 8009efa:	4c20      	ldr	r4, [pc, #128]	; (8009f7c <_malloc_r+0xb0>)
 8009efc:	6823      	ldr	r3, [r4, #0]
 8009efe:	b91b      	cbnz	r3, 8009f08 <_malloc_r+0x3c>
 8009f00:	4630      	mov	r0, r6
 8009f02:	f000 fc99 	bl	800a838 <_sbrk_r>
 8009f06:	6020      	str	r0, [r4, #0]
 8009f08:	4629      	mov	r1, r5
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	f000 fc94 	bl	800a838 <_sbrk_r>
 8009f10:	1c43      	adds	r3, r0, #1
 8009f12:	d124      	bne.n	8009f5e <_malloc_r+0x92>
 8009f14:	230c      	movs	r3, #12
 8009f16:	6033      	str	r3, [r6, #0]
 8009f18:	4630      	mov	r0, r6
 8009f1a:	f001 fb24 	bl	800b566 <__malloc_unlock>
 8009f1e:	e7e4      	b.n	8009eea <_malloc_r+0x1e>
 8009f20:	680b      	ldr	r3, [r1, #0]
 8009f22:	1b5b      	subs	r3, r3, r5
 8009f24:	d418      	bmi.n	8009f58 <_malloc_r+0x8c>
 8009f26:	2b0b      	cmp	r3, #11
 8009f28:	d90f      	bls.n	8009f4a <_malloc_r+0x7e>
 8009f2a:	600b      	str	r3, [r1, #0]
 8009f2c:	50cd      	str	r5, [r1, r3]
 8009f2e:	18cc      	adds	r4, r1, r3
 8009f30:	4630      	mov	r0, r6
 8009f32:	f001 fb18 	bl	800b566 <__malloc_unlock>
 8009f36:	f104 000b 	add.w	r0, r4, #11
 8009f3a:	1d23      	adds	r3, r4, #4
 8009f3c:	f020 0007 	bic.w	r0, r0, #7
 8009f40:	1ac3      	subs	r3, r0, r3
 8009f42:	d0d3      	beq.n	8009eec <_malloc_r+0x20>
 8009f44:	425a      	negs	r2, r3
 8009f46:	50e2      	str	r2, [r4, r3]
 8009f48:	e7d0      	b.n	8009eec <_malloc_r+0x20>
 8009f4a:	428c      	cmp	r4, r1
 8009f4c:	684b      	ldr	r3, [r1, #4]
 8009f4e:	bf16      	itet	ne
 8009f50:	6063      	strne	r3, [r4, #4]
 8009f52:	6013      	streq	r3, [r2, #0]
 8009f54:	460c      	movne	r4, r1
 8009f56:	e7eb      	b.n	8009f30 <_malloc_r+0x64>
 8009f58:	460c      	mov	r4, r1
 8009f5a:	6849      	ldr	r1, [r1, #4]
 8009f5c:	e7cc      	b.n	8009ef8 <_malloc_r+0x2c>
 8009f5e:	1cc4      	adds	r4, r0, #3
 8009f60:	f024 0403 	bic.w	r4, r4, #3
 8009f64:	42a0      	cmp	r0, r4
 8009f66:	d005      	beq.n	8009f74 <_malloc_r+0xa8>
 8009f68:	1a21      	subs	r1, r4, r0
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	f000 fc64 	bl	800a838 <_sbrk_r>
 8009f70:	3001      	adds	r0, #1
 8009f72:	d0cf      	beq.n	8009f14 <_malloc_r+0x48>
 8009f74:	6025      	str	r5, [r4, #0]
 8009f76:	e7db      	b.n	8009f30 <_malloc_r+0x64>
 8009f78:	2000037c 	.word	0x2000037c
 8009f7c:	20000380 	.word	0x20000380

08009f80 <__cvt>:
 8009f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f84:	ec55 4b10 	vmov	r4, r5, d0
 8009f88:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009f8a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009f8e:	2d00      	cmp	r5, #0
 8009f90:	460e      	mov	r6, r1
 8009f92:	4691      	mov	r9, r2
 8009f94:	4619      	mov	r1, r3
 8009f96:	bfb8      	it	lt
 8009f98:	4622      	movlt	r2, r4
 8009f9a:	462b      	mov	r3, r5
 8009f9c:	f027 0720 	bic.w	r7, r7, #32
 8009fa0:	bfbb      	ittet	lt
 8009fa2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009fa6:	461d      	movlt	r5, r3
 8009fa8:	2300      	movge	r3, #0
 8009faa:	232d      	movlt	r3, #45	; 0x2d
 8009fac:	bfb8      	it	lt
 8009fae:	4614      	movlt	r4, r2
 8009fb0:	2f46      	cmp	r7, #70	; 0x46
 8009fb2:	700b      	strb	r3, [r1, #0]
 8009fb4:	d004      	beq.n	8009fc0 <__cvt+0x40>
 8009fb6:	2f45      	cmp	r7, #69	; 0x45
 8009fb8:	d100      	bne.n	8009fbc <__cvt+0x3c>
 8009fba:	3601      	adds	r6, #1
 8009fbc:	2102      	movs	r1, #2
 8009fbe:	e000      	b.n	8009fc2 <__cvt+0x42>
 8009fc0:	2103      	movs	r1, #3
 8009fc2:	ab03      	add	r3, sp, #12
 8009fc4:	9301      	str	r3, [sp, #4]
 8009fc6:	ab02      	add	r3, sp, #8
 8009fc8:	9300      	str	r3, [sp, #0]
 8009fca:	4632      	mov	r2, r6
 8009fcc:	4653      	mov	r3, sl
 8009fce:	ec45 4b10 	vmov	d0, r4, r5
 8009fd2:	f000 fd01 	bl	800a9d8 <_dtoa_r>
 8009fd6:	2f47      	cmp	r7, #71	; 0x47
 8009fd8:	4680      	mov	r8, r0
 8009fda:	d102      	bne.n	8009fe2 <__cvt+0x62>
 8009fdc:	f019 0f01 	tst.w	r9, #1
 8009fe0:	d026      	beq.n	800a030 <__cvt+0xb0>
 8009fe2:	2f46      	cmp	r7, #70	; 0x46
 8009fe4:	eb08 0906 	add.w	r9, r8, r6
 8009fe8:	d111      	bne.n	800a00e <__cvt+0x8e>
 8009fea:	f898 3000 	ldrb.w	r3, [r8]
 8009fee:	2b30      	cmp	r3, #48	; 0x30
 8009ff0:	d10a      	bne.n	800a008 <__cvt+0x88>
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	4629      	mov	r1, r5
 8009ffa:	f7f6 fd6d 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ffe:	b918      	cbnz	r0, 800a008 <__cvt+0x88>
 800a000:	f1c6 0601 	rsb	r6, r6, #1
 800a004:	f8ca 6000 	str.w	r6, [sl]
 800a008:	f8da 3000 	ldr.w	r3, [sl]
 800a00c:	4499      	add	r9, r3
 800a00e:	2200      	movs	r2, #0
 800a010:	2300      	movs	r3, #0
 800a012:	4620      	mov	r0, r4
 800a014:	4629      	mov	r1, r5
 800a016:	f7f6 fd5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a01a:	b938      	cbnz	r0, 800a02c <__cvt+0xac>
 800a01c:	2230      	movs	r2, #48	; 0x30
 800a01e:	9b03      	ldr	r3, [sp, #12]
 800a020:	454b      	cmp	r3, r9
 800a022:	d205      	bcs.n	800a030 <__cvt+0xb0>
 800a024:	1c59      	adds	r1, r3, #1
 800a026:	9103      	str	r1, [sp, #12]
 800a028:	701a      	strb	r2, [r3, #0]
 800a02a:	e7f8      	b.n	800a01e <__cvt+0x9e>
 800a02c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a030:	9b03      	ldr	r3, [sp, #12]
 800a032:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a034:	eba3 0308 	sub.w	r3, r3, r8
 800a038:	4640      	mov	r0, r8
 800a03a:	6013      	str	r3, [r2, #0]
 800a03c:	b004      	add	sp, #16
 800a03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a042 <__exponent>:
 800a042:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a044:	2900      	cmp	r1, #0
 800a046:	4604      	mov	r4, r0
 800a048:	bfba      	itte	lt
 800a04a:	4249      	neglt	r1, r1
 800a04c:	232d      	movlt	r3, #45	; 0x2d
 800a04e:	232b      	movge	r3, #43	; 0x2b
 800a050:	2909      	cmp	r1, #9
 800a052:	f804 2b02 	strb.w	r2, [r4], #2
 800a056:	7043      	strb	r3, [r0, #1]
 800a058:	dd20      	ble.n	800a09c <__exponent+0x5a>
 800a05a:	f10d 0307 	add.w	r3, sp, #7
 800a05e:	461f      	mov	r7, r3
 800a060:	260a      	movs	r6, #10
 800a062:	fb91 f5f6 	sdiv	r5, r1, r6
 800a066:	fb06 1115 	mls	r1, r6, r5, r1
 800a06a:	3130      	adds	r1, #48	; 0x30
 800a06c:	2d09      	cmp	r5, #9
 800a06e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a072:	f103 32ff 	add.w	r2, r3, #4294967295
 800a076:	4629      	mov	r1, r5
 800a078:	dc09      	bgt.n	800a08e <__exponent+0x4c>
 800a07a:	3130      	adds	r1, #48	; 0x30
 800a07c:	3b02      	subs	r3, #2
 800a07e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a082:	42bb      	cmp	r3, r7
 800a084:	4622      	mov	r2, r4
 800a086:	d304      	bcc.n	800a092 <__exponent+0x50>
 800a088:	1a10      	subs	r0, r2, r0
 800a08a:	b003      	add	sp, #12
 800a08c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a08e:	4613      	mov	r3, r2
 800a090:	e7e7      	b.n	800a062 <__exponent+0x20>
 800a092:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a096:	f804 2b01 	strb.w	r2, [r4], #1
 800a09a:	e7f2      	b.n	800a082 <__exponent+0x40>
 800a09c:	2330      	movs	r3, #48	; 0x30
 800a09e:	4419      	add	r1, r3
 800a0a0:	7083      	strb	r3, [r0, #2]
 800a0a2:	1d02      	adds	r2, r0, #4
 800a0a4:	70c1      	strb	r1, [r0, #3]
 800a0a6:	e7ef      	b.n	800a088 <__exponent+0x46>

0800a0a8 <_printf_float>:
 800a0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ac:	b08d      	sub	sp, #52	; 0x34
 800a0ae:	460c      	mov	r4, r1
 800a0b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a0b4:	4616      	mov	r6, r2
 800a0b6:	461f      	mov	r7, r3
 800a0b8:	4605      	mov	r5, r0
 800a0ba:	f001 fa45 	bl	800b548 <_localeconv_r>
 800a0be:	6803      	ldr	r3, [r0, #0]
 800a0c0:	9304      	str	r3, [sp, #16]
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7f6 f88c 	bl	80001e0 <strlen>
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	930a      	str	r3, [sp, #40]	; 0x28
 800a0cc:	f8d8 3000 	ldr.w	r3, [r8]
 800a0d0:	9005      	str	r0, [sp, #20]
 800a0d2:	3307      	adds	r3, #7
 800a0d4:	f023 0307 	bic.w	r3, r3, #7
 800a0d8:	f103 0208 	add.w	r2, r3, #8
 800a0dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a0e0:	f8d4 b000 	ldr.w	fp, [r4]
 800a0e4:	f8c8 2000 	str.w	r2, [r8]
 800a0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a0f0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a0f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a0f8:	9307      	str	r3, [sp, #28]
 800a0fa:	f8cd 8018 	str.w	r8, [sp, #24]
 800a0fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a102:	4ba7      	ldr	r3, [pc, #668]	; (800a3a0 <_printf_float+0x2f8>)
 800a104:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a108:	f7f6 fd18 	bl	8000b3c <__aeabi_dcmpun>
 800a10c:	bb70      	cbnz	r0, 800a16c <_printf_float+0xc4>
 800a10e:	f04f 32ff 	mov.w	r2, #4294967295
 800a112:	4ba3      	ldr	r3, [pc, #652]	; (800a3a0 <_printf_float+0x2f8>)
 800a114:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a118:	f7f6 fcf2 	bl	8000b00 <__aeabi_dcmple>
 800a11c:	bb30      	cbnz	r0, 800a16c <_printf_float+0xc4>
 800a11e:	2200      	movs	r2, #0
 800a120:	2300      	movs	r3, #0
 800a122:	4640      	mov	r0, r8
 800a124:	4649      	mov	r1, r9
 800a126:	f7f6 fce1 	bl	8000aec <__aeabi_dcmplt>
 800a12a:	b110      	cbz	r0, 800a132 <_printf_float+0x8a>
 800a12c:	232d      	movs	r3, #45	; 0x2d
 800a12e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a132:	4a9c      	ldr	r2, [pc, #624]	; (800a3a4 <_printf_float+0x2fc>)
 800a134:	4b9c      	ldr	r3, [pc, #624]	; (800a3a8 <_printf_float+0x300>)
 800a136:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a13a:	bf8c      	ite	hi
 800a13c:	4690      	movhi	r8, r2
 800a13e:	4698      	movls	r8, r3
 800a140:	2303      	movs	r3, #3
 800a142:	f02b 0204 	bic.w	r2, fp, #4
 800a146:	6123      	str	r3, [r4, #16]
 800a148:	6022      	str	r2, [r4, #0]
 800a14a:	f04f 0900 	mov.w	r9, #0
 800a14e:	9700      	str	r7, [sp, #0]
 800a150:	4633      	mov	r3, r6
 800a152:	aa0b      	add	r2, sp, #44	; 0x2c
 800a154:	4621      	mov	r1, r4
 800a156:	4628      	mov	r0, r5
 800a158:	f000 f9e6 	bl	800a528 <_printf_common>
 800a15c:	3001      	adds	r0, #1
 800a15e:	f040 808d 	bne.w	800a27c <_printf_float+0x1d4>
 800a162:	f04f 30ff 	mov.w	r0, #4294967295
 800a166:	b00d      	add	sp, #52	; 0x34
 800a168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a16c:	4642      	mov	r2, r8
 800a16e:	464b      	mov	r3, r9
 800a170:	4640      	mov	r0, r8
 800a172:	4649      	mov	r1, r9
 800a174:	f7f6 fce2 	bl	8000b3c <__aeabi_dcmpun>
 800a178:	b110      	cbz	r0, 800a180 <_printf_float+0xd8>
 800a17a:	4a8c      	ldr	r2, [pc, #560]	; (800a3ac <_printf_float+0x304>)
 800a17c:	4b8c      	ldr	r3, [pc, #560]	; (800a3b0 <_printf_float+0x308>)
 800a17e:	e7da      	b.n	800a136 <_printf_float+0x8e>
 800a180:	6861      	ldr	r1, [r4, #4]
 800a182:	1c4b      	adds	r3, r1, #1
 800a184:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a188:	a80a      	add	r0, sp, #40	; 0x28
 800a18a:	d13e      	bne.n	800a20a <_printf_float+0x162>
 800a18c:	2306      	movs	r3, #6
 800a18e:	6063      	str	r3, [r4, #4]
 800a190:	2300      	movs	r3, #0
 800a192:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a196:	ab09      	add	r3, sp, #36	; 0x24
 800a198:	9300      	str	r3, [sp, #0]
 800a19a:	ec49 8b10 	vmov	d0, r8, r9
 800a19e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a1a2:	6022      	str	r2, [r4, #0]
 800a1a4:	f8cd a004 	str.w	sl, [sp, #4]
 800a1a8:	6861      	ldr	r1, [r4, #4]
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	f7ff fee8 	bl	8009f80 <__cvt>
 800a1b0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a1b4:	2b47      	cmp	r3, #71	; 0x47
 800a1b6:	4680      	mov	r8, r0
 800a1b8:	d109      	bne.n	800a1ce <_printf_float+0x126>
 800a1ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1bc:	1cd8      	adds	r0, r3, #3
 800a1be:	db02      	blt.n	800a1c6 <_printf_float+0x11e>
 800a1c0:	6862      	ldr	r2, [r4, #4]
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	dd47      	ble.n	800a256 <_printf_float+0x1ae>
 800a1c6:	f1aa 0a02 	sub.w	sl, sl, #2
 800a1ca:	fa5f fa8a 	uxtb.w	sl, sl
 800a1ce:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a1d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1d4:	d824      	bhi.n	800a220 <_printf_float+0x178>
 800a1d6:	3901      	subs	r1, #1
 800a1d8:	4652      	mov	r2, sl
 800a1da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a1de:	9109      	str	r1, [sp, #36]	; 0x24
 800a1e0:	f7ff ff2f 	bl	800a042 <__exponent>
 800a1e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1e6:	1813      	adds	r3, r2, r0
 800a1e8:	2a01      	cmp	r2, #1
 800a1ea:	4681      	mov	r9, r0
 800a1ec:	6123      	str	r3, [r4, #16]
 800a1ee:	dc02      	bgt.n	800a1f6 <_printf_float+0x14e>
 800a1f0:	6822      	ldr	r2, [r4, #0]
 800a1f2:	07d1      	lsls	r1, r2, #31
 800a1f4:	d501      	bpl.n	800a1fa <_printf_float+0x152>
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	6123      	str	r3, [r4, #16]
 800a1fa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d0a5      	beq.n	800a14e <_printf_float+0xa6>
 800a202:	232d      	movs	r3, #45	; 0x2d
 800a204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a208:	e7a1      	b.n	800a14e <_printf_float+0xa6>
 800a20a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a20e:	f000 8177 	beq.w	800a500 <_printf_float+0x458>
 800a212:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a216:	d1bb      	bne.n	800a190 <_printf_float+0xe8>
 800a218:	2900      	cmp	r1, #0
 800a21a:	d1b9      	bne.n	800a190 <_printf_float+0xe8>
 800a21c:	2301      	movs	r3, #1
 800a21e:	e7b6      	b.n	800a18e <_printf_float+0xe6>
 800a220:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a224:	d119      	bne.n	800a25a <_printf_float+0x1b2>
 800a226:	2900      	cmp	r1, #0
 800a228:	6863      	ldr	r3, [r4, #4]
 800a22a:	dd0c      	ble.n	800a246 <_printf_float+0x19e>
 800a22c:	6121      	str	r1, [r4, #16]
 800a22e:	b913      	cbnz	r3, 800a236 <_printf_float+0x18e>
 800a230:	6822      	ldr	r2, [r4, #0]
 800a232:	07d2      	lsls	r2, r2, #31
 800a234:	d502      	bpl.n	800a23c <_printf_float+0x194>
 800a236:	3301      	adds	r3, #1
 800a238:	440b      	add	r3, r1
 800a23a:	6123      	str	r3, [r4, #16]
 800a23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a23e:	65a3      	str	r3, [r4, #88]	; 0x58
 800a240:	f04f 0900 	mov.w	r9, #0
 800a244:	e7d9      	b.n	800a1fa <_printf_float+0x152>
 800a246:	b913      	cbnz	r3, 800a24e <_printf_float+0x1a6>
 800a248:	6822      	ldr	r2, [r4, #0]
 800a24a:	07d0      	lsls	r0, r2, #31
 800a24c:	d501      	bpl.n	800a252 <_printf_float+0x1aa>
 800a24e:	3302      	adds	r3, #2
 800a250:	e7f3      	b.n	800a23a <_printf_float+0x192>
 800a252:	2301      	movs	r3, #1
 800a254:	e7f1      	b.n	800a23a <_printf_float+0x192>
 800a256:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a25a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a25e:	4293      	cmp	r3, r2
 800a260:	db05      	blt.n	800a26e <_printf_float+0x1c6>
 800a262:	6822      	ldr	r2, [r4, #0]
 800a264:	6123      	str	r3, [r4, #16]
 800a266:	07d1      	lsls	r1, r2, #31
 800a268:	d5e8      	bpl.n	800a23c <_printf_float+0x194>
 800a26a:	3301      	adds	r3, #1
 800a26c:	e7e5      	b.n	800a23a <_printf_float+0x192>
 800a26e:	2b00      	cmp	r3, #0
 800a270:	bfd4      	ite	le
 800a272:	f1c3 0302 	rsble	r3, r3, #2
 800a276:	2301      	movgt	r3, #1
 800a278:	4413      	add	r3, r2
 800a27a:	e7de      	b.n	800a23a <_printf_float+0x192>
 800a27c:	6823      	ldr	r3, [r4, #0]
 800a27e:	055a      	lsls	r2, r3, #21
 800a280:	d407      	bmi.n	800a292 <_printf_float+0x1ea>
 800a282:	6923      	ldr	r3, [r4, #16]
 800a284:	4642      	mov	r2, r8
 800a286:	4631      	mov	r1, r6
 800a288:	4628      	mov	r0, r5
 800a28a:	47b8      	blx	r7
 800a28c:	3001      	adds	r0, #1
 800a28e:	d12b      	bne.n	800a2e8 <_printf_float+0x240>
 800a290:	e767      	b.n	800a162 <_printf_float+0xba>
 800a292:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a296:	f240 80dc 	bls.w	800a452 <_printf_float+0x3aa>
 800a29a:	2200      	movs	r2, #0
 800a29c:	2300      	movs	r3, #0
 800a29e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a2a2:	f7f6 fc19 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	d033      	beq.n	800a312 <_printf_float+0x26a>
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	4a41      	ldr	r2, [pc, #260]	; (800a3b4 <_printf_float+0x30c>)
 800a2ae:	4631      	mov	r1, r6
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	47b8      	blx	r7
 800a2b4:	3001      	adds	r0, #1
 800a2b6:	f43f af54 	beq.w	800a162 <_printf_float+0xba>
 800a2ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	db02      	blt.n	800a2c8 <_printf_float+0x220>
 800a2c2:	6823      	ldr	r3, [r4, #0]
 800a2c4:	07d8      	lsls	r0, r3, #31
 800a2c6:	d50f      	bpl.n	800a2e8 <_printf_float+0x240>
 800a2c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2cc:	4631      	mov	r1, r6
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	47b8      	blx	r7
 800a2d2:	3001      	adds	r0, #1
 800a2d4:	f43f af45 	beq.w	800a162 <_printf_float+0xba>
 800a2d8:	f04f 0800 	mov.w	r8, #0
 800a2dc:	f104 091a 	add.w	r9, r4, #26
 800a2e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2e2:	3b01      	subs	r3, #1
 800a2e4:	4543      	cmp	r3, r8
 800a2e6:	dc09      	bgt.n	800a2fc <_printf_float+0x254>
 800a2e8:	6823      	ldr	r3, [r4, #0]
 800a2ea:	079b      	lsls	r3, r3, #30
 800a2ec:	f100 8103 	bmi.w	800a4f6 <_printf_float+0x44e>
 800a2f0:	68e0      	ldr	r0, [r4, #12]
 800a2f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2f4:	4298      	cmp	r0, r3
 800a2f6:	bfb8      	it	lt
 800a2f8:	4618      	movlt	r0, r3
 800a2fa:	e734      	b.n	800a166 <_printf_float+0xbe>
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	464a      	mov	r2, r9
 800a300:	4631      	mov	r1, r6
 800a302:	4628      	mov	r0, r5
 800a304:	47b8      	blx	r7
 800a306:	3001      	adds	r0, #1
 800a308:	f43f af2b 	beq.w	800a162 <_printf_float+0xba>
 800a30c:	f108 0801 	add.w	r8, r8, #1
 800a310:	e7e6      	b.n	800a2e0 <_printf_float+0x238>
 800a312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a314:	2b00      	cmp	r3, #0
 800a316:	dc2b      	bgt.n	800a370 <_printf_float+0x2c8>
 800a318:	2301      	movs	r3, #1
 800a31a:	4a26      	ldr	r2, [pc, #152]	; (800a3b4 <_printf_float+0x30c>)
 800a31c:	4631      	mov	r1, r6
 800a31e:	4628      	mov	r0, r5
 800a320:	47b8      	blx	r7
 800a322:	3001      	adds	r0, #1
 800a324:	f43f af1d 	beq.w	800a162 <_printf_float+0xba>
 800a328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a32a:	b923      	cbnz	r3, 800a336 <_printf_float+0x28e>
 800a32c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a32e:	b913      	cbnz	r3, 800a336 <_printf_float+0x28e>
 800a330:	6823      	ldr	r3, [r4, #0]
 800a332:	07d9      	lsls	r1, r3, #31
 800a334:	d5d8      	bpl.n	800a2e8 <_printf_float+0x240>
 800a336:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a33a:	4631      	mov	r1, r6
 800a33c:	4628      	mov	r0, r5
 800a33e:	47b8      	blx	r7
 800a340:	3001      	adds	r0, #1
 800a342:	f43f af0e 	beq.w	800a162 <_printf_float+0xba>
 800a346:	f04f 0900 	mov.w	r9, #0
 800a34a:	f104 0a1a 	add.w	sl, r4, #26
 800a34e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a350:	425b      	negs	r3, r3
 800a352:	454b      	cmp	r3, r9
 800a354:	dc01      	bgt.n	800a35a <_printf_float+0x2b2>
 800a356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a358:	e794      	b.n	800a284 <_printf_float+0x1dc>
 800a35a:	2301      	movs	r3, #1
 800a35c:	4652      	mov	r2, sl
 800a35e:	4631      	mov	r1, r6
 800a360:	4628      	mov	r0, r5
 800a362:	47b8      	blx	r7
 800a364:	3001      	adds	r0, #1
 800a366:	f43f aefc 	beq.w	800a162 <_printf_float+0xba>
 800a36a:	f109 0901 	add.w	r9, r9, #1
 800a36e:	e7ee      	b.n	800a34e <_printf_float+0x2a6>
 800a370:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a372:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a374:	429a      	cmp	r2, r3
 800a376:	bfa8      	it	ge
 800a378:	461a      	movge	r2, r3
 800a37a:	2a00      	cmp	r2, #0
 800a37c:	4691      	mov	r9, r2
 800a37e:	dd07      	ble.n	800a390 <_printf_float+0x2e8>
 800a380:	4613      	mov	r3, r2
 800a382:	4631      	mov	r1, r6
 800a384:	4642      	mov	r2, r8
 800a386:	4628      	mov	r0, r5
 800a388:	47b8      	blx	r7
 800a38a:	3001      	adds	r0, #1
 800a38c:	f43f aee9 	beq.w	800a162 <_printf_float+0xba>
 800a390:	f104 031a 	add.w	r3, r4, #26
 800a394:	f04f 0b00 	mov.w	fp, #0
 800a398:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a39c:	9306      	str	r3, [sp, #24]
 800a39e:	e015      	b.n	800a3cc <_printf_float+0x324>
 800a3a0:	7fefffff 	.word	0x7fefffff
 800a3a4:	0800bfdc 	.word	0x0800bfdc
 800a3a8:	0800bfd8 	.word	0x0800bfd8
 800a3ac:	0800bfe4 	.word	0x0800bfe4
 800a3b0:	0800bfe0 	.word	0x0800bfe0
 800a3b4:	0800bfe8 	.word	0x0800bfe8
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	9a06      	ldr	r2, [sp, #24]
 800a3bc:	4631      	mov	r1, r6
 800a3be:	4628      	mov	r0, r5
 800a3c0:	47b8      	blx	r7
 800a3c2:	3001      	adds	r0, #1
 800a3c4:	f43f aecd 	beq.w	800a162 <_printf_float+0xba>
 800a3c8:	f10b 0b01 	add.w	fp, fp, #1
 800a3cc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a3d0:	ebaa 0309 	sub.w	r3, sl, r9
 800a3d4:	455b      	cmp	r3, fp
 800a3d6:	dcef      	bgt.n	800a3b8 <_printf_float+0x310>
 800a3d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	44d0      	add	r8, sl
 800a3e0:	db15      	blt.n	800a40e <_printf_float+0x366>
 800a3e2:	6823      	ldr	r3, [r4, #0]
 800a3e4:	07da      	lsls	r2, r3, #31
 800a3e6:	d412      	bmi.n	800a40e <_printf_float+0x366>
 800a3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3ec:	eba3 020a 	sub.w	r2, r3, sl
 800a3f0:	eba3 0a01 	sub.w	sl, r3, r1
 800a3f4:	4592      	cmp	sl, r2
 800a3f6:	bfa8      	it	ge
 800a3f8:	4692      	movge	sl, r2
 800a3fa:	f1ba 0f00 	cmp.w	sl, #0
 800a3fe:	dc0e      	bgt.n	800a41e <_printf_float+0x376>
 800a400:	f04f 0800 	mov.w	r8, #0
 800a404:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a408:	f104 091a 	add.w	r9, r4, #26
 800a40c:	e019      	b.n	800a442 <_printf_float+0x39a>
 800a40e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a412:	4631      	mov	r1, r6
 800a414:	4628      	mov	r0, r5
 800a416:	47b8      	blx	r7
 800a418:	3001      	adds	r0, #1
 800a41a:	d1e5      	bne.n	800a3e8 <_printf_float+0x340>
 800a41c:	e6a1      	b.n	800a162 <_printf_float+0xba>
 800a41e:	4653      	mov	r3, sl
 800a420:	4642      	mov	r2, r8
 800a422:	4631      	mov	r1, r6
 800a424:	4628      	mov	r0, r5
 800a426:	47b8      	blx	r7
 800a428:	3001      	adds	r0, #1
 800a42a:	d1e9      	bne.n	800a400 <_printf_float+0x358>
 800a42c:	e699      	b.n	800a162 <_printf_float+0xba>
 800a42e:	2301      	movs	r3, #1
 800a430:	464a      	mov	r2, r9
 800a432:	4631      	mov	r1, r6
 800a434:	4628      	mov	r0, r5
 800a436:	47b8      	blx	r7
 800a438:	3001      	adds	r0, #1
 800a43a:	f43f ae92 	beq.w	800a162 <_printf_float+0xba>
 800a43e:	f108 0801 	add.w	r8, r8, #1
 800a442:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a446:	1a9b      	subs	r3, r3, r2
 800a448:	eba3 030a 	sub.w	r3, r3, sl
 800a44c:	4543      	cmp	r3, r8
 800a44e:	dcee      	bgt.n	800a42e <_printf_float+0x386>
 800a450:	e74a      	b.n	800a2e8 <_printf_float+0x240>
 800a452:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a454:	2a01      	cmp	r2, #1
 800a456:	dc01      	bgt.n	800a45c <_printf_float+0x3b4>
 800a458:	07db      	lsls	r3, r3, #31
 800a45a:	d53a      	bpl.n	800a4d2 <_printf_float+0x42a>
 800a45c:	2301      	movs	r3, #1
 800a45e:	4642      	mov	r2, r8
 800a460:	4631      	mov	r1, r6
 800a462:	4628      	mov	r0, r5
 800a464:	47b8      	blx	r7
 800a466:	3001      	adds	r0, #1
 800a468:	f43f ae7b 	beq.w	800a162 <_printf_float+0xba>
 800a46c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a470:	4631      	mov	r1, r6
 800a472:	4628      	mov	r0, r5
 800a474:	47b8      	blx	r7
 800a476:	3001      	adds	r0, #1
 800a478:	f108 0801 	add.w	r8, r8, #1
 800a47c:	f43f ae71 	beq.w	800a162 <_printf_float+0xba>
 800a480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a482:	2200      	movs	r2, #0
 800a484:	f103 3aff 	add.w	sl, r3, #4294967295
 800a488:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a48c:	2300      	movs	r3, #0
 800a48e:	f7f6 fb23 	bl	8000ad8 <__aeabi_dcmpeq>
 800a492:	b9c8      	cbnz	r0, 800a4c8 <_printf_float+0x420>
 800a494:	4653      	mov	r3, sl
 800a496:	4642      	mov	r2, r8
 800a498:	4631      	mov	r1, r6
 800a49a:	4628      	mov	r0, r5
 800a49c:	47b8      	blx	r7
 800a49e:	3001      	adds	r0, #1
 800a4a0:	d10e      	bne.n	800a4c0 <_printf_float+0x418>
 800a4a2:	e65e      	b.n	800a162 <_printf_float+0xba>
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	4652      	mov	r2, sl
 800a4a8:	4631      	mov	r1, r6
 800a4aa:	4628      	mov	r0, r5
 800a4ac:	47b8      	blx	r7
 800a4ae:	3001      	adds	r0, #1
 800a4b0:	f43f ae57 	beq.w	800a162 <_printf_float+0xba>
 800a4b4:	f108 0801 	add.w	r8, r8, #1
 800a4b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4ba:	3b01      	subs	r3, #1
 800a4bc:	4543      	cmp	r3, r8
 800a4be:	dcf1      	bgt.n	800a4a4 <_printf_float+0x3fc>
 800a4c0:	464b      	mov	r3, r9
 800a4c2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a4c6:	e6de      	b.n	800a286 <_printf_float+0x1de>
 800a4c8:	f04f 0800 	mov.w	r8, #0
 800a4cc:	f104 0a1a 	add.w	sl, r4, #26
 800a4d0:	e7f2      	b.n	800a4b8 <_printf_float+0x410>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e7df      	b.n	800a496 <_printf_float+0x3ee>
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	464a      	mov	r2, r9
 800a4da:	4631      	mov	r1, r6
 800a4dc:	4628      	mov	r0, r5
 800a4de:	47b8      	blx	r7
 800a4e0:	3001      	adds	r0, #1
 800a4e2:	f43f ae3e 	beq.w	800a162 <_printf_float+0xba>
 800a4e6:	f108 0801 	add.w	r8, r8, #1
 800a4ea:	68e3      	ldr	r3, [r4, #12]
 800a4ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a4ee:	1a9b      	subs	r3, r3, r2
 800a4f0:	4543      	cmp	r3, r8
 800a4f2:	dcf0      	bgt.n	800a4d6 <_printf_float+0x42e>
 800a4f4:	e6fc      	b.n	800a2f0 <_printf_float+0x248>
 800a4f6:	f04f 0800 	mov.w	r8, #0
 800a4fa:	f104 0919 	add.w	r9, r4, #25
 800a4fe:	e7f4      	b.n	800a4ea <_printf_float+0x442>
 800a500:	2900      	cmp	r1, #0
 800a502:	f43f ae8b 	beq.w	800a21c <_printf_float+0x174>
 800a506:	2300      	movs	r3, #0
 800a508:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a50c:	ab09      	add	r3, sp, #36	; 0x24
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	ec49 8b10 	vmov	d0, r8, r9
 800a514:	6022      	str	r2, [r4, #0]
 800a516:	f8cd a004 	str.w	sl, [sp, #4]
 800a51a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a51e:	4628      	mov	r0, r5
 800a520:	f7ff fd2e 	bl	8009f80 <__cvt>
 800a524:	4680      	mov	r8, r0
 800a526:	e648      	b.n	800a1ba <_printf_float+0x112>

0800a528 <_printf_common>:
 800a528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a52c:	4691      	mov	r9, r2
 800a52e:	461f      	mov	r7, r3
 800a530:	688a      	ldr	r2, [r1, #8]
 800a532:	690b      	ldr	r3, [r1, #16]
 800a534:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a538:	4293      	cmp	r3, r2
 800a53a:	bfb8      	it	lt
 800a53c:	4613      	movlt	r3, r2
 800a53e:	f8c9 3000 	str.w	r3, [r9]
 800a542:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a546:	4606      	mov	r6, r0
 800a548:	460c      	mov	r4, r1
 800a54a:	b112      	cbz	r2, 800a552 <_printf_common+0x2a>
 800a54c:	3301      	adds	r3, #1
 800a54e:	f8c9 3000 	str.w	r3, [r9]
 800a552:	6823      	ldr	r3, [r4, #0]
 800a554:	0699      	lsls	r1, r3, #26
 800a556:	bf42      	ittt	mi
 800a558:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a55c:	3302      	addmi	r3, #2
 800a55e:	f8c9 3000 	strmi.w	r3, [r9]
 800a562:	6825      	ldr	r5, [r4, #0]
 800a564:	f015 0506 	ands.w	r5, r5, #6
 800a568:	d107      	bne.n	800a57a <_printf_common+0x52>
 800a56a:	f104 0a19 	add.w	sl, r4, #25
 800a56e:	68e3      	ldr	r3, [r4, #12]
 800a570:	f8d9 2000 	ldr.w	r2, [r9]
 800a574:	1a9b      	subs	r3, r3, r2
 800a576:	42ab      	cmp	r3, r5
 800a578:	dc28      	bgt.n	800a5cc <_printf_common+0xa4>
 800a57a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a57e:	6822      	ldr	r2, [r4, #0]
 800a580:	3300      	adds	r3, #0
 800a582:	bf18      	it	ne
 800a584:	2301      	movne	r3, #1
 800a586:	0692      	lsls	r2, r2, #26
 800a588:	d42d      	bmi.n	800a5e6 <_printf_common+0xbe>
 800a58a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a58e:	4639      	mov	r1, r7
 800a590:	4630      	mov	r0, r6
 800a592:	47c0      	blx	r8
 800a594:	3001      	adds	r0, #1
 800a596:	d020      	beq.n	800a5da <_printf_common+0xb2>
 800a598:	6823      	ldr	r3, [r4, #0]
 800a59a:	68e5      	ldr	r5, [r4, #12]
 800a59c:	f8d9 2000 	ldr.w	r2, [r9]
 800a5a0:	f003 0306 	and.w	r3, r3, #6
 800a5a4:	2b04      	cmp	r3, #4
 800a5a6:	bf08      	it	eq
 800a5a8:	1aad      	subeq	r5, r5, r2
 800a5aa:	68a3      	ldr	r3, [r4, #8]
 800a5ac:	6922      	ldr	r2, [r4, #16]
 800a5ae:	bf0c      	ite	eq
 800a5b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5b4:	2500      	movne	r5, #0
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	bfc4      	itt	gt
 800a5ba:	1a9b      	subgt	r3, r3, r2
 800a5bc:	18ed      	addgt	r5, r5, r3
 800a5be:	f04f 0900 	mov.w	r9, #0
 800a5c2:	341a      	adds	r4, #26
 800a5c4:	454d      	cmp	r5, r9
 800a5c6:	d11a      	bne.n	800a5fe <_printf_common+0xd6>
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	e008      	b.n	800a5de <_printf_common+0xb6>
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	4652      	mov	r2, sl
 800a5d0:	4639      	mov	r1, r7
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	47c0      	blx	r8
 800a5d6:	3001      	adds	r0, #1
 800a5d8:	d103      	bne.n	800a5e2 <_printf_common+0xba>
 800a5da:	f04f 30ff 	mov.w	r0, #4294967295
 800a5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5e2:	3501      	adds	r5, #1
 800a5e4:	e7c3      	b.n	800a56e <_printf_common+0x46>
 800a5e6:	18e1      	adds	r1, r4, r3
 800a5e8:	1c5a      	adds	r2, r3, #1
 800a5ea:	2030      	movs	r0, #48	; 0x30
 800a5ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5f0:	4422      	add	r2, r4
 800a5f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5fa:	3302      	adds	r3, #2
 800a5fc:	e7c5      	b.n	800a58a <_printf_common+0x62>
 800a5fe:	2301      	movs	r3, #1
 800a600:	4622      	mov	r2, r4
 800a602:	4639      	mov	r1, r7
 800a604:	4630      	mov	r0, r6
 800a606:	47c0      	blx	r8
 800a608:	3001      	adds	r0, #1
 800a60a:	d0e6      	beq.n	800a5da <_printf_common+0xb2>
 800a60c:	f109 0901 	add.w	r9, r9, #1
 800a610:	e7d8      	b.n	800a5c4 <_printf_common+0x9c>
	...

0800a614 <_printf_i>:
 800a614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a618:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a61c:	460c      	mov	r4, r1
 800a61e:	7e09      	ldrb	r1, [r1, #24]
 800a620:	b085      	sub	sp, #20
 800a622:	296e      	cmp	r1, #110	; 0x6e
 800a624:	4617      	mov	r7, r2
 800a626:	4606      	mov	r6, r0
 800a628:	4698      	mov	r8, r3
 800a62a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a62c:	f000 80b3 	beq.w	800a796 <_printf_i+0x182>
 800a630:	d822      	bhi.n	800a678 <_printf_i+0x64>
 800a632:	2963      	cmp	r1, #99	; 0x63
 800a634:	d036      	beq.n	800a6a4 <_printf_i+0x90>
 800a636:	d80a      	bhi.n	800a64e <_printf_i+0x3a>
 800a638:	2900      	cmp	r1, #0
 800a63a:	f000 80b9 	beq.w	800a7b0 <_printf_i+0x19c>
 800a63e:	2958      	cmp	r1, #88	; 0x58
 800a640:	f000 8083 	beq.w	800a74a <_printf_i+0x136>
 800a644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a648:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a64c:	e032      	b.n	800a6b4 <_printf_i+0xa0>
 800a64e:	2964      	cmp	r1, #100	; 0x64
 800a650:	d001      	beq.n	800a656 <_printf_i+0x42>
 800a652:	2969      	cmp	r1, #105	; 0x69
 800a654:	d1f6      	bne.n	800a644 <_printf_i+0x30>
 800a656:	6820      	ldr	r0, [r4, #0]
 800a658:	6813      	ldr	r3, [r2, #0]
 800a65a:	0605      	lsls	r5, r0, #24
 800a65c:	f103 0104 	add.w	r1, r3, #4
 800a660:	d52a      	bpl.n	800a6b8 <_printf_i+0xa4>
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	6011      	str	r1, [r2, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	da03      	bge.n	800a672 <_printf_i+0x5e>
 800a66a:	222d      	movs	r2, #45	; 0x2d
 800a66c:	425b      	negs	r3, r3
 800a66e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a672:	486f      	ldr	r0, [pc, #444]	; (800a830 <_printf_i+0x21c>)
 800a674:	220a      	movs	r2, #10
 800a676:	e039      	b.n	800a6ec <_printf_i+0xd8>
 800a678:	2973      	cmp	r1, #115	; 0x73
 800a67a:	f000 809d 	beq.w	800a7b8 <_printf_i+0x1a4>
 800a67e:	d808      	bhi.n	800a692 <_printf_i+0x7e>
 800a680:	296f      	cmp	r1, #111	; 0x6f
 800a682:	d020      	beq.n	800a6c6 <_printf_i+0xb2>
 800a684:	2970      	cmp	r1, #112	; 0x70
 800a686:	d1dd      	bne.n	800a644 <_printf_i+0x30>
 800a688:	6823      	ldr	r3, [r4, #0]
 800a68a:	f043 0320 	orr.w	r3, r3, #32
 800a68e:	6023      	str	r3, [r4, #0]
 800a690:	e003      	b.n	800a69a <_printf_i+0x86>
 800a692:	2975      	cmp	r1, #117	; 0x75
 800a694:	d017      	beq.n	800a6c6 <_printf_i+0xb2>
 800a696:	2978      	cmp	r1, #120	; 0x78
 800a698:	d1d4      	bne.n	800a644 <_printf_i+0x30>
 800a69a:	2378      	movs	r3, #120	; 0x78
 800a69c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a6a0:	4864      	ldr	r0, [pc, #400]	; (800a834 <_printf_i+0x220>)
 800a6a2:	e055      	b.n	800a750 <_printf_i+0x13c>
 800a6a4:	6813      	ldr	r3, [r2, #0]
 800a6a6:	1d19      	adds	r1, r3, #4
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	6011      	str	r1, [r2, #0]
 800a6ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e08c      	b.n	800a7d2 <_printf_i+0x1be>
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	6011      	str	r1, [r2, #0]
 800a6bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a6c0:	bf18      	it	ne
 800a6c2:	b21b      	sxthne	r3, r3
 800a6c4:	e7cf      	b.n	800a666 <_printf_i+0x52>
 800a6c6:	6813      	ldr	r3, [r2, #0]
 800a6c8:	6825      	ldr	r5, [r4, #0]
 800a6ca:	1d18      	adds	r0, r3, #4
 800a6cc:	6010      	str	r0, [r2, #0]
 800a6ce:	0628      	lsls	r0, r5, #24
 800a6d0:	d501      	bpl.n	800a6d6 <_printf_i+0xc2>
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	e002      	b.n	800a6dc <_printf_i+0xc8>
 800a6d6:	0668      	lsls	r0, r5, #25
 800a6d8:	d5fb      	bpl.n	800a6d2 <_printf_i+0xbe>
 800a6da:	881b      	ldrh	r3, [r3, #0]
 800a6dc:	4854      	ldr	r0, [pc, #336]	; (800a830 <_printf_i+0x21c>)
 800a6de:	296f      	cmp	r1, #111	; 0x6f
 800a6e0:	bf14      	ite	ne
 800a6e2:	220a      	movne	r2, #10
 800a6e4:	2208      	moveq	r2, #8
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6ec:	6865      	ldr	r5, [r4, #4]
 800a6ee:	60a5      	str	r5, [r4, #8]
 800a6f0:	2d00      	cmp	r5, #0
 800a6f2:	f2c0 8095 	blt.w	800a820 <_printf_i+0x20c>
 800a6f6:	6821      	ldr	r1, [r4, #0]
 800a6f8:	f021 0104 	bic.w	r1, r1, #4
 800a6fc:	6021      	str	r1, [r4, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d13d      	bne.n	800a77e <_printf_i+0x16a>
 800a702:	2d00      	cmp	r5, #0
 800a704:	f040 808e 	bne.w	800a824 <_printf_i+0x210>
 800a708:	4665      	mov	r5, ip
 800a70a:	2a08      	cmp	r2, #8
 800a70c:	d10b      	bne.n	800a726 <_printf_i+0x112>
 800a70e:	6823      	ldr	r3, [r4, #0]
 800a710:	07db      	lsls	r3, r3, #31
 800a712:	d508      	bpl.n	800a726 <_printf_i+0x112>
 800a714:	6923      	ldr	r3, [r4, #16]
 800a716:	6862      	ldr	r2, [r4, #4]
 800a718:	429a      	cmp	r2, r3
 800a71a:	bfde      	ittt	le
 800a71c:	2330      	movle	r3, #48	; 0x30
 800a71e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a722:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a726:	ebac 0305 	sub.w	r3, ip, r5
 800a72a:	6123      	str	r3, [r4, #16]
 800a72c:	f8cd 8000 	str.w	r8, [sp]
 800a730:	463b      	mov	r3, r7
 800a732:	aa03      	add	r2, sp, #12
 800a734:	4621      	mov	r1, r4
 800a736:	4630      	mov	r0, r6
 800a738:	f7ff fef6 	bl	800a528 <_printf_common>
 800a73c:	3001      	adds	r0, #1
 800a73e:	d14d      	bne.n	800a7dc <_printf_i+0x1c8>
 800a740:	f04f 30ff 	mov.w	r0, #4294967295
 800a744:	b005      	add	sp, #20
 800a746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a74a:	4839      	ldr	r0, [pc, #228]	; (800a830 <_printf_i+0x21c>)
 800a74c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a750:	6813      	ldr	r3, [r2, #0]
 800a752:	6821      	ldr	r1, [r4, #0]
 800a754:	1d1d      	adds	r5, r3, #4
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	6015      	str	r5, [r2, #0]
 800a75a:	060a      	lsls	r2, r1, #24
 800a75c:	d50b      	bpl.n	800a776 <_printf_i+0x162>
 800a75e:	07ca      	lsls	r2, r1, #31
 800a760:	bf44      	itt	mi
 800a762:	f041 0120 	orrmi.w	r1, r1, #32
 800a766:	6021      	strmi	r1, [r4, #0]
 800a768:	b91b      	cbnz	r3, 800a772 <_printf_i+0x15e>
 800a76a:	6822      	ldr	r2, [r4, #0]
 800a76c:	f022 0220 	bic.w	r2, r2, #32
 800a770:	6022      	str	r2, [r4, #0]
 800a772:	2210      	movs	r2, #16
 800a774:	e7b7      	b.n	800a6e6 <_printf_i+0xd2>
 800a776:	064d      	lsls	r5, r1, #25
 800a778:	bf48      	it	mi
 800a77a:	b29b      	uxthmi	r3, r3
 800a77c:	e7ef      	b.n	800a75e <_printf_i+0x14a>
 800a77e:	4665      	mov	r5, ip
 800a780:	fbb3 f1f2 	udiv	r1, r3, r2
 800a784:	fb02 3311 	mls	r3, r2, r1, r3
 800a788:	5cc3      	ldrb	r3, [r0, r3]
 800a78a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a78e:	460b      	mov	r3, r1
 800a790:	2900      	cmp	r1, #0
 800a792:	d1f5      	bne.n	800a780 <_printf_i+0x16c>
 800a794:	e7b9      	b.n	800a70a <_printf_i+0xf6>
 800a796:	6813      	ldr	r3, [r2, #0]
 800a798:	6825      	ldr	r5, [r4, #0]
 800a79a:	6961      	ldr	r1, [r4, #20]
 800a79c:	1d18      	adds	r0, r3, #4
 800a79e:	6010      	str	r0, [r2, #0]
 800a7a0:	0628      	lsls	r0, r5, #24
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	d501      	bpl.n	800a7aa <_printf_i+0x196>
 800a7a6:	6019      	str	r1, [r3, #0]
 800a7a8:	e002      	b.n	800a7b0 <_printf_i+0x19c>
 800a7aa:	066a      	lsls	r2, r5, #25
 800a7ac:	d5fb      	bpl.n	800a7a6 <_printf_i+0x192>
 800a7ae:	8019      	strh	r1, [r3, #0]
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	6123      	str	r3, [r4, #16]
 800a7b4:	4665      	mov	r5, ip
 800a7b6:	e7b9      	b.n	800a72c <_printf_i+0x118>
 800a7b8:	6813      	ldr	r3, [r2, #0]
 800a7ba:	1d19      	adds	r1, r3, #4
 800a7bc:	6011      	str	r1, [r2, #0]
 800a7be:	681d      	ldr	r5, [r3, #0]
 800a7c0:	6862      	ldr	r2, [r4, #4]
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	4628      	mov	r0, r5
 800a7c6:	f7f5 fd13 	bl	80001f0 <memchr>
 800a7ca:	b108      	cbz	r0, 800a7d0 <_printf_i+0x1bc>
 800a7cc:	1b40      	subs	r0, r0, r5
 800a7ce:	6060      	str	r0, [r4, #4]
 800a7d0:	6863      	ldr	r3, [r4, #4]
 800a7d2:	6123      	str	r3, [r4, #16]
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7da:	e7a7      	b.n	800a72c <_printf_i+0x118>
 800a7dc:	6923      	ldr	r3, [r4, #16]
 800a7de:	462a      	mov	r2, r5
 800a7e0:	4639      	mov	r1, r7
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	47c0      	blx	r8
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	d0aa      	beq.n	800a740 <_printf_i+0x12c>
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	079b      	lsls	r3, r3, #30
 800a7ee:	d413      	bmi.n	800a818 <_printf_i+0x204>
 800a7f0:	68e0      	ldr	r0, [r4, #12]
 800a7f2:	9b03      	ldr	r3, [sp, #12]
 800a7f4:	4298      	cmp	r0, r3
 800a7f6:	bfb8      	it	lt
 800a7f8:	4618      	movlt	r0, r3
 800a7fa:	e7a3      	b.n	800a744 <_printf_i+0x130>
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	464a      	mov	r2, r9
 800a800:	4639      	mov	r1, r7
 800a802:	4630      	mov	r0, r6
 800a804:	47c0      	blx	r8
 800a806:	3001      	adds	r0, #1
 800a808:	d09a      	beq.n	800a740 <_printf_i+0x12c>
 800a80a:	3501      	adds	r5, #1
 800a80c:	68e3      	ldr	r3, [r4, #12]
 800a80e:	9a03      	ldr	r2, [sp, #12]
 800a810:	1a9b      	subs	r3, r3, r2
 800a812:	42ab      	cmp	r3, r5
 800a814:	dcf2      	bgt.n	800a7fc <_printf_i+0x1e8>
 800a816:	e7eb      	b.n	800a7f0 <_printf_i+0x1dc>
 800a818:	2500      	movs	r5, #0
 800a81a:	f104 0919 	add.w	r9, r4, #25
 800a81e:	e7f5      	b.n	800a80c <_printf_i+0x1f8>
 800a820:	2b00      	cmp	r3, #0
 800a822:	d1ac      	bne.n	800a77e <_printf_i+0x16a>
 800a824:	7803      	ldrb	r3, [r0, #0]
 800a826:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a82a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a82e:	e76c      	b.n	800a70a <_printf_i+0xf6>
 800a830:	0800bfea 	.word	0x0800bfea
 800a834:	0800bffb 	.word	0x0800bffb

0800a838 <_sbrk_r>:
 800a838:	b538      	push	{r3, r4, r5, lr}
 800a83a:	4c06      	ldr	r4, [pc, #24]	; (800a854 <_sbrk_r+0x1c>)
 800a83c:	2300      	movs	r3, #0
 800a83e:	4605      	mov	r5, r0
 800a840:	4608      	mov	r0, r1
 800a842:	6023      	str	r3, [r4, #0]
 800a844:	f7f7 fb3e 	bl	8001ec4 <_sbrk>
 800a848:	1c43      	adds	r3, r0, #1
 800a84a:	d102      	bne.n	800a852 <_sbrk_r+0x1a>
 800a84c:	6823      	ldr	r3, [r4, #0]
 800a84e:	b103      	cbz	r3, 800a852 <_sbrk_r+0x1a>
 800a850:	602b      	str	r3, [r5, #0]
 800a852:	bd38      	pop	{r3, r4, r5, pc}
 800a854:	20001dd4 	.word	0x20001dd4

0800a858 <sniprintf>:
 800a858:	b40c      	push	{r2, r3}
 800a85a:	b530      	push	{r4, r5, lr}
 800a85c:	4b17      	ldr	r3, [pc, #92]	; (800a8bc <sniprintf+0x64>)
 800a85e:	1e0c      	subs	r4, r1, #0
 800a860:	b09d      	sub	sp, #116	; 0x74
 800a862:	681d      	ldr	r5, [r3, #0]
 800a864:	da08      	bge.n	800a878 <sniprintf+0x20>
 800a866:	238b      	movs	r3, #139	; 0x8b
 800a868:	602b      	str	r3, [r5, #0]
 800a86a:	f04f 30ff 	mov.w	r0, #4294967295
 800a86e:	b01d      	add	sp, #116	; 0x74
 800a870:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a874:	b002      	add	sp, #8
 800a876:	4770      	bx	lr
 800a878:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a87c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a880:	bf14      	ite	ne
 800a882:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a886:	4623      	moveq	r3, r4
 800a888:	9304      	str	r3, [sp, #16]
 800a88a:	9307      	str	r3, [sp, #28]
 800a88c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a890:	9002      	str	r0, [sp, #8]
 800a892:	9006      	str	r0, [sp, #24]
 800a894:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a898:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a89a:	ab21      	add	r3, sp, #132	; 0x84
 800a89c:	a902      	add	r1, sp, #8
 800a89e:	4628      	mov	r0, r5
 800a8a0:	9301      	str	r3, [sp, #4]
 800a8a2:	f001 f9a5 	bl	800bbf0 <_svfiprintf_r>
 800a8a6:	1c43      	adds	r3, r0, #1
 800a8a8:	bfbc      	itt	lt
 800a8aa:	238b      	movlt	r3, #139	; 0x8b
 800a8ac:	602b      	strlt	r3, [r5, #0]
 800a8ae:	2c00      	cmp	r4, #0
 800a8b0:	d0dd      	beq.n	800a86e <sniprintf+0x16>
 800a8b2:	9b02      	ldr	r3, [sp, #8]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	701a      	strb	r2, [r3, #0]
 800a8b8:	e7d9      	b.n	800a86e <sniprintf+0x16>
 800a8ba:	bf00      	nop
 800a8bc:	20000188 	.word	0x20000188

0800a8c0 <quorem>:
 800a8c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c4:	6903      	ldr	r3, [r0, #16]
 800a8c6:	690c      	ldr	r4, [r1, #16]
 800a8c8:	42a3      	cmp	r3, r4
 800a8ca:	4680      	mov	r8, r0
 800a8cc:	f2c0 8082 	blt.w	800a9d4 <quorem+0x114>
 800a8d0:	3c01      	subs	r4, #1
 800a8d2:	f101 0714 	add.w	r7, r1, #20
 800a8d6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a8da:	f100 0614 	add.w	r6, r0, #20
 800a8de:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a8e2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a8e6:	eb06 030c 	add.w	r3, r6, ip
 800a8ea:	3501      	adds	r5, #1
 800a8ec:	eb07 090c 	add.w	r9, r7, ip
 800a8f0:	9301      	str	r3, [sp, #4]
 800a8f2:	fbb0 f5f5 	udiv	r5, r0, r5
 800a8f6:	b395      	cbz	r5, 800a95e <quorem+0x9e>
 800a8f8:	f04f 0a00 	mov.w	sl, #0
 800a8fc:	4638      	mov	r0, r7
 800a8fe:	46b6      	mov	lr, r6
 800a900:	46d3      	mov	fp, sl
 800a902:	f850 2b04 	ldr.w	r2, [r0], #4
 800a906:	b293      	uxth	r3, r2
 800a908:	fb05 a303 	mla	r3, r5, r3, sl
 800a90c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a910:	b29b      	uxth	r3, r3
 800a912:	ebab 0303 	sub.w	r3, fp, r3
 800a916:	0c12      	lsrs	r2, r2, #16
 800a918:	f8de b000 	ldr.w	fp, [lr]
 800a91c:	fb05 a202 	mla	r2, r5, r2, sl
 800a920:	fa13 f38b 	uxtah	r3, r3, fp
 800a924:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a928:	fa1f fb82 	uxth.w	fp, r2
 800a92c:	f8de 2000 	ldr.w	r2, [lr]
 800a930:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a934:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a938:	b29b      	uxth	r3, r3
 800a93a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a93e:	4581      	cmp	r9, r0
 800a940:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a944:	f84e 3b04 	str.w	r3, [lr], #4
 800a948:	d2db      	bcs.n	800a902 <quorem+0x42>
 800a94a:	f856 300c 	ldr.w	r3, [r6, ip]
 800a94e:	b933      	cbnz	r3, 800a95e <quorem+0x9e>
 800a950:	9b01      	ldr	r3, [sp, #4]
 800a952:	3b04      	subs	r3, #4
 800a954:	429e      	cmp	r6, r3
 800a956:	461a      	mov	r2, r3
 800a958:	d330      	bcc.n	800a9bc <quorem+0xfc>
 800a95a:	f8c8 4010 	str.w	r4, [r8, #16]
 800a95e:	4640      	mov	r0, r8
 800a960:	f001 f818 	bl	800b994 <__mcmp>
 800a964:	2800      	cmp	r0, #0
 800a966:	db25      	blt.n	800a9b4 <quorem+0xf4>
 800a968:	3501      	adds	r5, #1
 800a96a:	4630      	mov	r0, r6
 800a96c:	f04f 0c00 	mov.w	ip, #0
 800a970:	f857 2b04 	ldr.w	r2, [r7], #4
 800a974:	f8d0 e000 	ldr.w	lr, [r0]
 800a978:	b293      	uxth	r3, r2
 800a97a:	ebac 0303 	sub.w	r3, ip, r3
 800a97e:	0c12      	lsrs	r2, r2, #16
 800a980:	fa13 f38e 	uxtah	r3, r3, lr
 800a984:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a988:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a992:	45b9      	cmp	r9, r7
 800a994:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a998:	f840 3b04 	str.w	r3, [r0], #4
 800a99c:	d2e8      	bcs.n	800a970 <quorem+0xb0>
 800a99e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a9a2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a9a6:	b92a      	cbnz	r2, 800a9b4 <quorem+0xf4>
 800a9a8:	3b04      	subs	r3, #4
 800a9aa:	429e      	cmp	r6, r3
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	d30b      	bcc.n	800a9c8 <quorem+0x108>
 800a9b0:	f8c8 4010 	str.w	r4, [r8, #16]
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	b003      	add	sp, #12
 800a9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9bc:	6812      	ldr	r2, [r2, #0]
 800a9be:	3b04      	subs	r3, #4
 800a9c0:	2a00      	cmp	r2, #0
 800a9c2:	d1ca      	bne.n	800a95a <quorem+0x9a>
 800a9c4:	3c01      	subs	r4, #1
 800a9c6:	e7c5      	b.n	800a954 <quorem+0x94>
 800a9c8:	6812      	ldr	r2, [r2, #0]
 800a9ca:	3b04      	subs	r3, #4
 800a9cc:	2a00      	cmp	r2, #0
 800a9ce:	d1ef      	bne.n	800a9b0 <quorem+0xf0>
 800a9d0:	3c01      	subs	r4, #1
 800a9d2:	e7ea      	b.n	800a9aa <quorem+0xea>
 800a9d4:	2000      	movs	r0, #0
 800a9d6:	e7ee      	b.n	800a9b6 <quorem+0xf6>

0800a9d8 <_dtoa_r>:
 800a9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9dc:	ec57 6b10 	vmov	r6, r7, d0
 800a9e0:	b097      	sub	sp, #92	; 0x5c
 800a9e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a9e4:	9106      	str	r1, [sp, #24]
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	920b      	str	r2, [sp, #44]	; 0x2c
 800a9ea:	9312      	str	r3, [sp, #72]	; 0x48
 800a9ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a9f0:	e9cd 6700 	strd	r6, r7, [sp]
 800a9f4:	b93d      	cbnz	r5, 800aa06 <_dtoa_r+0x2e>
 800a9f6:	2010      	movs	r0, #16
 800a9f8:	f7ff f9f6 	bl	8009de8 <malloc>
 800a9fc:	6260      	str	r0, [r4, #36]	; 0x24
 800a9fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aa02:	6005      	str	r5, [r0, #0]
 800aa04:	60c5      	str	r5, [r0, #12]
 800aa06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa08:	6819      	ldr	r1, [r3, #0]
 800aa0a:	b151      	cbz	r1, 800aa22 <_dtoa_r+0x4a>
 800aa0c:	685a      	ldr	r2, [r3, #4]
 800aa0e:	604a      	str	r2, [r1, #4]
 800aa10:	2301      	movs	r3, #1
 800aa12:	4093      	lsls	r3, r2
 800aa14:	608b      	str	r3, [r1, #8]
 800aa16:	4620      	mov	r0, r4
 800aa18:	f000 fdda 	bl	800b5d0 <_Bfree>
 800aa1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa1e:	2200      	movs	r2, #0
 800aa20:	601a      	str	r2, [r3, #0]
 800aa22:	1e3b      	subs	r3, r7, #0
 800aa24:	bfbb      	ittet	lt
 800aa26:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aa2a:	9301      	strlt	r3, [sp, #4]
 800aa2c:	2300      	movge	r3, #0
 800aa2e:	2201      	movlt	r2, #1
 800aa30:	bfac      	ite	ge
 800aa32:	f8c8 3000 	strge.w	r3, [r8]
 800aa36:	f8c8 2000 	strlt.w	r2, [r8]
 800aa3a:	4baf      	ldr	r3, [pc, #700]	; (800acf8 <_dtoa_r+0x320>)
 800aa3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aa40:	ea33 0308 	bics.w	r3, r3, r8
 800aa44:	d114      	bne.n	800aa70 <_dtoa_r+0x98>
 800aa46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa48:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa4c:	6013      	str	r3, [r2, #0]
 800aa4e:	9b00      	ldr	r3, [sp, #0]
 800aa50:	b923      	cbnz	r3, 800aa5c <_dtoa_r+0x84>
 800aa52:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800aa56:	2800      	cmp	r0, #0
 800aa58:	f000 8542 	beq.w	800b4e0 <_dtoa_r+0xb08>
 800aa5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa5e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ad0c <_dtoa_r+0x334>
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f000 8544 	beq.w	800b4f0 <_dtoa_r+0xb18>
 800aa68:	f10b 0303 	add.w	r3, fp, #3
 800aa6c:	f000 bd3e 	b.w	800b4ec <_dtoa_r+0xb14>
 800aa70:	e9dd 6700 	ldrd	r6, r7, [sp]
 800aa74:	2200      	movs	r2, #0
 800aa76:	2300      	movs	r3, #0
 800aa78:	4630      	mov	r0, r6
 800aa7a:	4639      	mov	r1, r7
 800aa7c:	f7f6 f82c 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa80:	4681      	mov	r9, r0
 800aa82:	b168      	cbz	r0, 800aaa0 <_dtoa_r+0xc8>
 800aa84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa86:	2301      	movs	r3, #1
 800aa88:	6013      	str	r3, [r2, #0]
 800aa8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f000 8524 	beq.w	800b4da <_dtoa_r+0xb02>
 800aa92:	4b9a      	ldr	r3, [pc, #616]	; (800acfc <_dtoa_r+0x324>)
 800aa94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aa96:	f103 3bff 	add.w	fp, r3, #4294967295
 800aa9a:	6013      	str	r3, [r2, #0]
 800aa9c:	f000 bd28 	b.w	800b4f0 <_dtoa_r+0xb18>
 800aaa0:	aa14      	add	r2, sp, #80	; 0x50
 800aaa2:	a915      	add	r1, sp, #84	; 0x54
 800aaa4:	ec47 6b10 	vmov	d0, r6, r7
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f000 ffea 	bl	800ba82 <__d2b>
 800aaae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800aab2:	9004      	str	r0, [sp, #16]
 800aab4:	2d00      	cmp	r5, #0
 800aab6:	d07c      	beq.n	800abb2 <_dtoa_r+0x1da>
 800aab8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aabc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800aac0:	46b2      	mov	sl, r6
 800aac2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800aac6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aaca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800aace:	2200      	movs	r2, #0
 800aad0:	4b8b      	ldr	r3, [pc, #556]	; (800ad00 <_dtoa_r+0x328>)
 800aad2:	4650      	mov	r0, sl
 800aad4:	4659      	mov	r1, fp
 800aad6:	f7f5 fbdf 	bl	8000298 <__aeabi_dsub>
 800aada:	a381      	add	r3, pc, #516	; (adr r3, 800ace0 <_dtoa_r+0x308>)
 800aadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae0:	f7f5 fd92 	bl	8000608 <__aeabi_dmul>
 800aae4:	a380      	add	r3, pc, #512	; (adr r3, 800ace8 <_dtoa_r+0x310>)
 800aae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaea:	f7f5 fbd7 	bl	800029c <__adddf3>
 800aaee:	4606      	mov	r6, r0
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	460f      	mov	r7, r1
 800aaf4:	f7f5 fd1e 	bl	8000534 <__aeabi_i2d>
 800aaf8:	a37d      	add	r3, pc, #500	; (adr r3, 800acf0 <_dtoa_r+0x318>)
 800aafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafe:	f7f5 fd83 	bl	8000608 <__aeabi_dmul>
 800ab02:	4602      	mov	r2, r0
 800ab04:	460b      	mov	r3, r1
 800ab06:	4630      	mov	r0, r6
 800ab08:	4639      	mov	r1, r7
 800ab0a:	f7f5 fbc7 	bl	800029c <__adddf3>
 800ab0e:	4606      	mov	r6, r0
 800ab10:	460f      	mov	r7, r1
 800ab12:	f7f6 f829 	bl	8000b68 <__aeabi_d2iz>
 800ab16:	2200      	movs	r2, #0
 800ab18:	4682      	mov	sl, r0
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	4630      	mov	r0, r6
 800ab1e:	4639      	mov	r1, r7
 800ab20:	f7f5 ffe4 	bl	8000aec <__aeabi_dcmplt>
 800ab24:	b148      	cbz	r0, 800ab3a <_dtoa_r+0x162>
 800ab26:	4650      	mov	r0, sl
 800ab28:	f7f5 fd04 	bl	8000534 <__aeabi_i2d>
 800ab2c:	4632      	mov	r2, r6
 800ab2e:	463b      	mov	r3, r7
 800ab30:	f7f5 ffd2 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab34:	b908      	cbnz	r0, 800ab3a <_dtoa_r+0x162>
 800ab36:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab3a:	f1ba 0f16 	cmp.w	sl, #22
 800ab3e:	d859      	bhi.n	800abf4 <_dtoa_r+0x21c>
 800ab40:	4970      	ldr	r1, [pc, #448]	; (800ad04 <_dtoa_r+0x32c>)
 800ab42:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ab46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab4e:	f7f5 ffeb 	bl	8000b28 <__aeabi_dcmpgt>
 800ab52:	2800      	cmp	r0, #0
 800ab54:	d050      	beq.n	800abf8 <_dtoa_r+0x220>
 800ab56:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab60:	1b5d      	subs	r5, r3, r5
 800ab62:	f1b5 0801 	subs.w	r8, r5, #1
 800ab66:	bf49      	itett	mi
 800ab68:	f1c5 0301 	rsbmi	r3, r5, #1
 800ab6c:	2300      	movpl	r3, #0
 800ab6e:	9305      	strmi	r3, [sp, #20]
 800ab70:	f04f 0800 	movmi.w	r8, #0
 800ab74:	bf58      	it	pl
 800ab76:	9305      	strpl	r3, [sp, #20]
 800ab78:	f1ba 0f00 	cmp.w	sl, #0
 800ab7c:	db3e      	blt.n	800abfc <_dtoa_r+0x224>
 800ab7e:	2300      	movs	r3, #0
 800ab80:	44d0      	add	r8, sl
 800ab82:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ab86:	9307      	str	r3, [sp, #28]
 800ab88:	9b06      	ldr	r3, [sp, #24]
 800ab8a:	2b09      	cmp	r3, #9
 800ab8c:	f200 8090 	bhi.w	800acb0 <_dtoa_r+0x2d8>
 800ab90:	2b05      	cmp	r3, #5
 800ab92:	bfc4      	itt	gt
 800ab94:	3b04      	subgt	r3, #4
 800ab96:	9306      	strgt	r3, [sp, #24]
 800ab98:	9b06      	ldr	r3, [sp, #24]
 800ab9a:	f1a3 0302 	sub.w	r3, r3, #2
 800ab9e:	bfcc      	ite	gt
 800aba0:	2500      	movgt	r5, #0
 800aba2:	2501      	movle	r5, #1
 800aba4:	2b03      	cmp	r3, #3
 800aba6:	f200 808f 	bhi.w	800acc8 <_dtoa_r+0x2f0>
 800abaa:	e8df f003 	tbb	[pc, r3]
 800abae:	7f7d      	.short	0x7f7d
 800abb0:	7131      	.short	0x7131
 800abb2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800abb6:	441d      	add	r5, r3
 800abb8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800abbc:	2820      	cmp	r0, #32
 800abbe:	dd13      	ble.n	800abe8 <_dtoa_r+0x210>
 800abc0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800abc4:	9b00      	ldr	r3, [sp, #0]
 800abc6:	fa08 f800 	lsl.w	r8, r8, r0
 800abca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800abce:	fa23 f000 	lsr.w	r0, r3, r0
 800abd2:	ea48 0000 	orr.w	r0, r8, r0
 800abd6:	f7f5 fc9d 	bl	8000514 <__aeabi_ui2d>
 800abda:	2301      	movs	r3, #1
 800abdc:	4682      	mov	sl, r0
 800abde:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800abe2:	3d01      	subs	r5, #1
 800abe4:	9313      	str	r3, [sp, #76]	; 0x4c
 800abe6:	e772      	b.n	800aace <_dtoa_r+0xf6>
 800abe8:	9b00      	ldr	r3, [sp, #0]
 800abea:	f1c0 0020 	rsb	r0, r0, #32
 800abee:	fa03 f000 	lsl.w	r0, r3, r0
 800abf2:	e7f0      	b.n	800abd6 <_dtoa_r+0x1fe>
 800abf4:	2301      	movs	r3, #1
 800abf6:	e7b1      	b.n	800ab5c <_dtoa_r+0x184>
 800abf8:	900f      	str	r0, [sp, #60]	; 0x3c
 800abfa:	e7b0      	b.n	800ab5e <_dtoa_r+0x186>
 800abfc:	9b05      	ldr	r3, [sp, #20]
 800abfe:	eba3 030a 	sub.w	r3, r3, sl
 800ac02:	9305      	str	r3, [sp, #20]
 800ac04:	f1ca 0300 	rsb	r3, sl, #0
 800ac08:	9307      	str	r3, [sp, #28]
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	930e      	str	r3, [sp, #56]	; 0x38
 800ac0e:	e7bb      	b.n	800ab88 <_dtoa_r+0x1b0>
 800ac10:	2301      	movs	r3, #1
 800ac12:	930a      	str	r3, [sp, #40]	; 0x28
 800ac14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	dd59      	ble.n	800acce <_dtoa_r+0x2f6>
 800ac1a:	9302      	str	r3, [sp, #8]
 800ac1c:	4699      	mov	r9, r3
 800ac1e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ac20:	2200      	movs	r2, #0
 800ac22:	6072      	str	r2, [r6, #4]
 800ac24:	2204      	movs	r2, #4
 800ac26:	f102 0014 	add.w	r0, r2, #20
 800ac2a:	4298      	cmp	r0, r3
 800ac2c:	6871      	ldr	r1, [r6, #4]
 800ac2e:	d953      	bls.n	800acd8 <_dtoa_r+0x300>
 800ac30:	4620      	mov	r0, r4
 800ac32:	f000 fc99 	bl	800b568 <_Balloc>
 800ac36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac38:	6030      	str	r0, [r6, #0]
 800ac3a:	f1b9 0f0e 	cmp.w	r9, #14
 800ac3e:	f8d3 b000 	ldr.w	fp, [r3]
 800ac42:	f200 80e6 	bhi.w	800ae12 <_dtoa_r+0x43a>
 800ac46:	2d00      	cmp	r5, #0
 800ac48:	f000 80e3 	beq.w	800ae12 <_dtoa_r+0x43a>
 800ac4c:	ed9d 7b00 	vldr	d7, [sp]
 800ac50:	f1ba 0f00 	cmp.w	sl, #0
 800ac54:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ac58:	dd74      	ble.n	800ad44 <_dtoa_r+0x36c>
 800ac5a:	4a2a      	ldr	r2, [pc, #168]	; (800ad04 <_dtoa_r+0x32c>)
 800ac5c:	f00a 030f 	and.w	r3, sl, #15
 800ac60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ac64:	ed93 7b00 	vldr	d7, [r3]
 800ac68:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ac6c:	06f0      	lsls	r0, r6, #27
 800ac6e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ac72:	d565      	bpl.n	800ad40 <_dtoa_r+0x368>
 800ac74:	4b24      	ldr	r3, [pc, #144]	; (800ad08 <_dtoa_r+0x330>)
 800ac76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ac7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac7e:	f7f5 fded 	bl	800085c <__aeabi_ddiv>
 800ac82:	e9cd 0100 	strd	r0, r1, [sp]
 800ac86:	f006 060f 	and.w	r6, r6, #15
 800ac8a:	2503      	movs	r5, #3
 800ac8c:	4f1e      	ldr	r7, [pc, #120]	; (800ad08 <_dtoa_r+0x330>)
 800ac8e:	e04c      	b.n	800ad2a <_dtoa_r+0x352>
 800ac90:	2301      	movs	r3, #1
 800ac92:	930a      	str	r3, [sp, #40]	; 0x28
 800ac94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac96:	4453      	add	r3, sl
 800ac98:	f103 0901 	add.w	r9, r3, #1
 800ac9c:	9302      	str	r3, [sp, #8]
 800ac9e:	464b      	mov	r3, r9
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	bfb8      	it	lt
 800aca4:	2301      	movlt	r3, #1
 800aca6:	e7ba      	b.n	800ac1e <_dtoa_r+0x246>
 800aca8:	2300      	movs	r3, #0
 800acaa:	e7b2      	b.n	800ac12 <_dtoa_r+0x23a>
 800acac:	2300      	movs	r3, #0
 800acae:	e7f0      	b.n	800ac92 <_dtoa_r+0x2ba>
 800acb0:	2501      	movs	r5, #1
 800acb2:	2300      	movs	r3, #0
 800acb4:	9306      	str	r3, [sp, #24]
 800acb6:	950a      	str	r5, [sp, #40]	; 0x28
 800acb8:	f04f 33ff 	mov.w	r3, #4294967295
 800acbc:	9302      	str	r3, [sp, #8]
 800acbe:	4699      	mov	r9, r3
 800acc0:	2200      	movs	r2, #0
 800acc2:	2312      	movs	r3, #18
 800acc4:	920b      	str	r2, [sp, #44]	; 0x2c
 800acc6:	e7aa      	b.n	800ac1e <_dtoa_r+0x246>
 800acc8:	2301      	movs	r3, #1
 800acca:	930a      	str	r3, [sp, #40]	; 0x28
 800accc:	e7f4      	b.n	800acb8 <_dtoa_r+0x2e0>
 800acce:	2301      	movs	r3, #1
 800acd0:	9302      	str	r3, [sp, #8]
 800acd2:	4699      	mov	r9, r3
 800acd4:	461a      	mov	r2, r3
 800acd6:	e7f5      	b.n	800acc4 <_dtoa_r+0x2ec>
 800acd8:	3101      	adds	r1, #1
 800acda:	6071      	str	r1, [r6, #4]
 800acdc:	0052      	lsls	r2, r2, #1
 800acde:	e7a2      	b.n	800ac26 <_dtoa_r+0x24e>
 800ace0:	636f4361 	.word	0x636f4361
 800ace4:	3fd287a7 	.word	0x3fd287a7
 800ace8:	8b60c8b3 	.word	0x8b60c8b3
 800acec:	3fc68a28 	.word	0x3fc68a28
 800acf0:	509f79fb 	.word	0x509f79fb
 800acf4:	3fd34413 	.word	0x3fd34413
 800acf8:	7ff00000 	.word	0x7ff00000
 800acfc:	0800bfe9 	.word	0x0800bfe9
 800ad00:	3ff80000 	.word	0x3ff80000
 800ad04:	0800c0a8 	.word	0x0800c0a8
 800ad08:	0800c080 	.word	0x0800c080
 800ad0c:	0800c015 	.word	0x0800c015
 800ad10:	07f1      	lsls	r1, r6, #31
 800ad12:	d508      	bpl.n	800ad26 <_dtoa_r+0x34e>
 800ad14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ad18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad1c:	f7f5 fc74 	bl	8000608 <__aeabi_dmul>
 800ad20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ad24:	3501      	adds	r5, #1
 800ad26:	1076      	asrs	r6, r6, #1
 800ad28:	3708      	adds	r7, #8
 800ad2a:	2e00      	cmp	r6, #0
 800ad2c:	d1f0      	bne.n	800ad10 <_dtoa_r+0x338>
 800ad2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ad32:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad36:	f7f5 fd91 	bl	800085c <__aeabi_ddiv>
 800ad3a:	e9cd 0100 	strd	r0, r1, [sp]
 800ad3e:	e01a      	b.n	800ad76 <_dtoa_r+0x39e>
 800ad40:	2502      	movs	r5, #2
 800ad42:	e7a3      	b.n	800ac8c <_dtoa_r+0x2b4>
 800ad44:	f000 80a0 	beq.w	800ae88 <_dtoa_r+0x4b0>
 800ad48:	f1ca 0600 	rsb	r6, sl, #0
 800ad4c:	4b9f      	ldr	r3, [pc, #636]	; (800afcc <_dtoa_r+0x5f4>)
 800ad4e:	4fa0      	ldr	r7, [pc, #640]	; (800afd0 <_dtoa_r+0x5f8>)
 800ad50:	f006 020f 	and.w	r2, r6, #15
 800ad54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ad60:	f7f5 fc52 	bl	8000608 <__aeabi_dmul>
 800ad64:	e9cd 0100 	strd	r0, r1, [sp]
 800ad68:	1136      	asrs	r6, r6, #4
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	2502      	movs	r5, #2
 800ad6e:	2e00      	cmp	r6, #0
 800ad70:	d17f      	bne.n	800ae72 <_dtoa_r+0x49a>
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d1e1      	bne.n	800ad3a <_dtoa_r+0x362>
 800ad76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f000 8087 	beq.w	800ae8c <_dtoa_r+0x4b4>
 800ad7e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ad82:	2200      	movs	r2, #0
 800ad84:	4b93      	ldr	r3, [pc, #588]	; (800afd4 <_dtoa_r+0x5fc>)
 800ad86:	4630      	mov	r0, r6
 800ad88:	4639      	mov	r1, r7
 800ad8a:	f7f5 feaf 	bl	8000aec <__aeabi_dcmplt>
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	d07c      	beq.n	800ae8c <_dtoa_r+0x4b4>
 800ad92:	f1b9 0f00 	cmp.w	r9, #0
 800ad96:	d079      	beq.n	800ae8c <_dtoa_r+0x4b4>
 800ad98:	9b02      	ldr	r3, [sp, #8]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	dd35      	ble.n	800ae0a <_dtoa_r+0x432>
 800ad9e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ada2:	9308      	str	r3, [sp, #32]
 800ada4:	4639      	mov	r1, r7
 800ada6:	2200      	movs	r2, #0
 800ada8:	4b8b      	ldr	r3, [pc, #556]	; (800afd8 <_dtoa_r+0x600>)
 800adaa:	4630      	mov	r0, r6
 800adac:	f7f5 fc2c 	bl	8000608 <__aeabi_dmul>
 800adb0:	e9cd 0100 	strd	r0, r1, [sp]
 800adb4:	9f02      	ldr	r7, [sp, #8]
 800adb6:	3501      	adds	r5, #1
 800adb8:	4628      	mov	r0, r5
 800adba:	f7f5 fbbb 	bl	8000534 <__aeabi_i2d>
 800adbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adc2:	f7f5 fc21 	bl	8000608 <__aeabi_dmul>
 800adc6:	2200      	movs	r2, #0
 800adc8:	4b84      	ldr	r3, [pc, #528]	; (800afdc <_dtoa_r+0x604>)
 800adca:	f7f5 fa67 	bl	800029c <__adddf3>
 800adce:	4605      	mov	r5, r0
 800add0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800add4:	2f00      	cmp	r7, #0
 800add6:	d15d      	bne.n	800ae94 <_dtoa_r+0x4bc>
 800add8:	2200      	movs	r2, #0
 800adda:	4b81      	ldr	r3, [pc, #516]	; (800afe0 <_dtoa_r+0x608>)
 800addc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ade0:	f7f5 fa5a 	bl	8000298 <__aeabi_dsub>
 800ade4:	462a      	mov	r2, r5
 800ade6:	4633      	mov	r3, r6
 800ade8:	e9cd 0100 	strd	r0, r1, [sp]
 800adec:	f7f5 fe9c 	bl	8000b28 <__aeabi_dcmpgt>
 800adf0:	2800      	cmp	r0, #0
 800adf2:	f040 8288 	bne.w	800b306 <_dtoa_r+0x92e>
 800adf6:	462a      	mov	r2, r5
 800adf8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800adfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae00:	f7f5 fe74 	bl	8000aec <__aeabi_dcmplt>
 800ae04:	2800      	cmp	r0, #0
 800ae06:	f040 827c 	bne.w	800b302 <_dtoa_r+0x92a>
 800ae0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ae0e:	e9cd 2300 	strd	r2, r3, [sp]
 800ae12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f2c0 8150 	blt.w	800b0ba <_dtoa_r+0x6e2>
 800ae1a:	f1ba 0f0e 	cmp.w	sl, #14
 800ae1e:	f300 814c 	bgt.w	800b0ba <_dtoa_r+0x6e2>
 800ae22:	4b6a      	ldr	r3, [pc, #424]	; (800afcc <_dtoa_r+0x5f4>)
 800ae24:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ae28:	ed93 7b00 	vldr	d7, [r3]
 800ae2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ae34:	f280 80d8 	bge.w	800afe8 <_dtoa_r+0x610>
 800ae38:	f1b9 0f00 	cmp.w	r9, #0
 800ae3c:	f300 80d4 	bgt.w	800afe8 <_dtoa_r+0x610>
 800ae40:	f040 825e 	bne.w	800b300 <_dtoa_r+0x928>
 800ae44:	2200      	movs	r2, #0
 800ae46:	4b66      	ldr	r3, [pc, #408]	; (800afe0 <_dtoa_r+0x608>)
 800ae48:	ec51 0b17 	vmov	r0, r1, d7
 800ae4c:	f7f5 fbdc 	bl	8000608 <__aeabi_dmul>
 800ae50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae54:	f7f5 fe5e 	bl	8000b14 <__aeabi_dcmpge>
 800ae58:	464f      	mov	r7, r9
 800ae5a:	464e      	mov	r6, r9
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	f040 8234 	bne.w	800b2ca <_dtoa_r+0x8f2>
 800ae62:	2331      	movs	r3, #49	; 0x31
 800ae64:	f10b 0501 	add.w	r5, fp, #1
 800ae68:	f88b 3000 	strb.w	r3, [fp]
 800ae6c:	f10a 0a01 	add.w	sl, sl, #1
 800ae70:	e22f      	b.n	800b2d2 <_dtoa_r+0x8fa>
 800ae72:	07f2      	lsls	r2, r6, #31
 800ae74:	d505      	bpl.n	800ae82 <_dtoa_r+0x4aa>
 800ae76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae7a:	f7f5 fbc5 	bl	8000608 <__aeabi_dmul>
 800ae7e:	3501      	adds	r5, #1
 800ae80:	2301      	movs	r3, #1
 800ae82:	1076      	asrs	r6, r6, #1
 800ae84:	3708      	adds	r7, #8
 800ae86:	e772      	b.n	800ad6e <_dtoa_r+0x396>
 800ae88:	2502      	movs	r5, #2
 800ae8a:	e774      	b.n	800ad76 <_dtoa_r+0x39e>
 800ae8c:	f8cd a020 	str.w	sl, [sp, #32]
 800ae90:	464f      	mov	r7, r9
 800ae92:	e791      	b.n	800adb8 <_dtoa_r+0x3e0>
 800ae94:	4b4d      	ldr	r3, [pc, #308]	; (800afcc <_dtoa_r+0x5f4>)
 800ae96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ae9a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ae9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d047      	beq.n	800af34 <_dtoa_r+0x55c>
 800aea4:	4602      	mov	r2, r0
 800aea6:	460b      	mov	r3, r1
 800aea8:	2000      	movs	r0, #0
 800aeaa:	494e      	ldr	r1, [pc, #312]	; (800afe4 <_dtoa_r+0x60c>)
 800aeac:	f7f5 fcd6 	bl	800085c <__aeabi_ddiv>
 800aeb0:	462a      	mov	r2, r5
 800aeb2:	4633      	mov	r3, r6
 800aeb4:	f7f5 f9f0 	bl	8000298 <__aeabi_dsub>
 800aeb8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800aebc:	465d      	mov	r5, fp
 800aebe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aec2:	f7f5 fe51 	bl	8000b68 <__aeabi_d2iz>
 800aec6:	4606      	mov	r6, r0
 800aec8:	f7f5 fb34 	bl	8000534 <__aeabi_i2d>
 800aecc:	4602      	mov	r2, r0
 800aece:	460b      	mov	r3, r1
 800aed0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aed4:	f7f5 f9e0 	bl	8000298 <__aeabi_dsub>
 800aed8:	3630      	adds	r6, #48	; 0x30
 800aeda:	f805 6b01 	strb.w	r6, [r5], #1
 800aede:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aee2:	e9cd 0100 	strd	r0, r1, [sp]
 800aee6:	f7f5 fe01 	bl	8000aec <__aeabi_dcmplt>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	d163      	bne.n	800afb6 <_dtoa_r+0x5de>
 800aeee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aef2:	2000      	movs	r0, #0
 800aef4:	4937      	ldr	r1, [pc, #220]	; (800afd4 <_dtoa_r+0x5fc>)
 800aef6:	f7f5 f9cf 	bl	8000298 <__aeabi_dsub>
 800aefa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aefe:	f7f5 fdf5 	bl	8000aec <__aeabi_dcmplt>
 800af02:	2800      	cmp	r0, #0
 800af04:	f040 80b7 	bne.w	800b076 <_dtoa_r+0x69e>
 800af08:	eba5 030b 	sub.w	r3, r5, fp
 800af0c:	429f      	cmp	r7, r3
 800af0e:	f77f af7c 	ble.w	800ae0a <_dtoa_r+0x432>
 800af12:	2200      	movs	r2, #0
 800af14:	4b30      	ldr	r3, [pc, #192]	; (800afd8 <_dtoa_r+0x600>)
 800af16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af1a:	f7f5 fb75 	bl	8000608 <__aeabi_dmul>
 800af1e:	2200      	movs	r2, #0
 800af20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800af24:	4b2c      	ldr	r3, [pc, #176]	; (800afd8 <_dtoa_r+0x600>)
 800af26:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af2a:	f7f5 fb6d 	bl	8000608 <__aeabi_dmul>
 800af2e:	e9cd 0100 	strd	r0, r1, [sp]
 800af32:	e7c4      	b.n	800aebe <_dtoa_r+0x4e6>
 800af34:	462a      	mov	r2, r5
 800af36:	4633      	mov	r3, r6
 800af38:	f7f5 fb66 	bl	8000608 <__aeabi_dmul>
 800af3c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800af40:	eb0b 0507 	add.w	r5, fp, r7
 800af44:	465e      	mov	r6, fp
 800af46:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af4a:	f7f5 fe0d 	bl	8000b68 <__aeabi_d2iz>
 800af4e:	4607      	mov	r7, r0
 800af50:	f7f5 faf0 	bl	8000534 <__aeabi_i2d>
 800af54:	3730      	adds	r7, #48	; 0x30
 800af56:	4602      	mov	r2, r0
 800af58:	460b      	mov	r3, r1
 800af5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af5e:	f7f5 f99b 	bl	8000298 <__aeabi_dsub>
 800af62:	f806 7b01 	strb.w	r7, [r6], #1
 800af66:	42ae      	cmp	r6, r5
 800af68:	e9cd 0100 	strd	r0, r1, [sp]
 800af6c:	f04f 0200 	mov.w	r2, #0
 800af70:	d126      	bne.n	800afc0 <_dtoa_r+0x5e8>
 800af72:	4b1c      	ldr	r3, [pc, #112]	; (800afe4 <_dtoa_r+0x60c>)
 800af74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af78:	f7f5 f990 	bl	800029c <__adddf3>
 800af7c:	4602      	mov	r2, r0
 800af7e:	460b      	mov	r3, r1
 800af80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af84:	f7f5 fdd0 	bl	8000b28 <__aeabi_dcmpgt>
 800af88:	2800      	cmp	r0, #0
 800af8a:	d174      	bne.n	800b076 <_dtoa_r+0x69e>
 800af8c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800af90:	2000      	movs	r0, #0
 800af92:	4914      	ldr	r1, [pc, #80]	; (800afe4 <_dtoa_r+0x60c>)
 800af94:	f7f5 f980 	bl	8000298 <__aeabi_dsub>
 800af98:	4602      	mov	r2, r0
 800af9a:	460b      	mov	r3, r1
 800af9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afa0:	f7f5 fda4 	bl	8000aec <__aeabi_dcmplt>
 800afa4:	2800      	cmp	r0, #0
 800afa6:	f43f af30 	beq.w	800ae0a <_dtoa_r+0x432>
 800afaa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800afae:	2b30      	cmp	r3, #48	; 0x30
 800afb0:	f105 32ff 	add.w	r2, r5, #4294967295
 800afb4:	d002      	beq.n	800afbc <_dtoa_r+0x5e4>
 800afb6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800afba:	e04a      	b.n	800b052 <_dtoa_r+0x67a>
 800afbc:	4615      	mov	r5, r2
 800afbe:	e7f4      	b.n	800afaa <_dtoa_r+0x5d2>
 800afc0:	4b05      	ldr	r3, [pc, #20]	; (800afd8 <_dtoa_r+0x600>)
 800afc2:	f7f5 fb21 	bl	8000608 <__aeabi_dmul>
 800afc6:	e9cd 0100 	strd	r0, r1, [sp]
 800afca:	e7bc      	b.n	800af46 <_dtoa_r+0x56e>
 800afcc:	0800c0a8 	.word	0x0800c0a8
 800afd0:	0800c080 	.word	0x0800c080
 800afd4:	3ff00000 	.word	0x3ff00000
 800afd8:	40240000 	.word	0x40240000
 800afdc:	401c0000 	.word	0x401c0000
 800afe0:	40140000 	.word	0x40140000
 800afe4:	3fe00000 	.word	0x3fe00000
 800afe8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800afec:	465d      	mov	r5, fp
 800afee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aff2:	4630      	mov	r0, r6
 800aff4:	4639      	mov	r1, r7
 800aff6:	f7f5 fc31 	bl	800085c <__aeabi_ddiv>
 800affa:	f7f5 fdb5 	bl	8000b68 <__aeabi_d2iz>
 800affe:	4680      	mov	r8, r0
 800b000:	f7f5 fa98 	bl	8000534 <__aeabi_i2d>
 800b004:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b008:	f7f5 fafe 	bl	8000608 <__aeabi_dmul>
 800b00c:	4602      	mov	r2, r0
 800b00e:	460b      	mov	r3, r1
 800b010:	4630      	mov	r0, r6
 800b012:	4639      	mov	r1, r7
 800b014:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800b018:	f7f5 f93e 	bl	8000298 <__aeabi_dsub>
 800b01c:	f805 6b01 	strb.w	r6, [r5], #1
 800b020:	eba5 060b 	sub.w	r6, r5, fp
 800b024:	45b1      	cmp	r9, r6
 800b026:	4602      	mov	r2, r0
 800b028:	460b      	mov	r3, r1
 800b02a:	d139      	bne.n	800b0a0 <_dtoa_r+0x6c8>
 800b02c:	f7f5 f936 	bl	800029c <__adddf3>
 800b030:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b034:	4606      	mov	r6, r0
 800b036:	460f      	mov	r7, r1
 800b038:	f7f5 fd76 	bl	8000b28 <__aeabi_dcmpgt>
 800b03c:	b9c8      	cbnz	r0, 800b072 <_dtoa_r+0x69a>
 800b03e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b042:	4630      	mov	r0, r6
 800b044:	4639      	mov	r1, r7
 800b046:	f7f5 fd47 	bl	8000ad8 <__aeabi_dcmpeq>
 800b04a:	b110      	cbz	r0, 800b052 <_dtoa_r+0x67a>
 800b04c:	f018 0f01 	tst.w	r8, #1
 800b050:	d10f      	bne.n	800b072 <_dtoa_r+0x69a>
 800b052:	9904      	ldr	r1, [sp, #16]
 800b054:	4620      	mov	r0, r4
 800b056:	f000 fabb 	bl	800b5d0 <_Bfree>
 800b05a:	2300      	movs	r3, #0
 800b05c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b05e:	702b      	strb	r3, [r5, #0]
 800b060:	f10a 0301 	add.w	r3, sl, #1
 800b064:	6013      	str	r3, [r2, #0]
 800b066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b068:	2b00      	cmp	r3, #0
 800b06a:	f000 8241 	beq.w	800b4f0 <_dtoa_r+0xb18>
 800b06e:	601d      	str	r5, [r3, #0]
 800b070:	e23e      	b.n	800b4f0 <_dtoa_r+0xb18>
 800b072:	f8cd a020 	str.w	sl, [sp, #32]
 800b076:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b07a:	2a39      	cmp	r2, #57	; 0x39
 800b07c:	f105 33ff 	add.w	r3, r5, #4294967295
 800b080:	d108      	bne.n	800b094 <_dtoa_r+0x6bc>
 800b082:	459b      	cmp	fp, r3
 800b084:	d10a      	bne.n	800b09c <_dtoa_r+0x6c4>
 800b086:	9b08      	ldr	r3, [sp, #32]
 800b088:	3301      	adds	r3, #1
 800b08a:	9308      	str	r3, [sp, #32]
 800b08c:	2330      	movs	r3, #48	; 0x30
 800b08e:	f88b 3000 	strb.w	r3, [fp]
 800b092:	465b      	mov	r3, fp
 800b094:	781a      	ldrb	r2, [r3, #0]
 800b096:	3201      	adds	r2, #1
 800b098:	701a      	strb	r2, [r3, #0]
 800b09a:	e78c      	b.n	800afb6 <_dtoa_r+0x5de>
 800b09c:	461d      	mov	r5, r3
 800b09e:	e7ea      	b.n	800b076 <_dtoa_r+0x69e>
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	4b9b      	ldr	r3, [pc, #620]	; (800b310 <_dtoa_r+0x938>)
 800b0a4:	f7f5 fab0 	bl	8000608 <__aeabi_dmul>
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	4606      	mov	r6, r0
 800b0ae:	460f      	mov	r7, r1
 800b0b0:	f7f5 fd12 	bl	8000ad8 <__aeabi_dcmpeq>
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	d09a      	beq.n	800afee <_dtoa_r+0x616>
 800b0b8:	e7cb      	b.n	800b052 <_dtoa_r+0x67a>
 800b0ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0bc:	2a00      	cmp	r2, #0
 800b0be:	f000 808b 	beq.w	800b1d8 <_dtoa_r+0x800>
 800b0c2:	9a06      	ldr	r2, [sp, #24]
 800b0c4:	2a01      	cmp	r2, #1
 800b0c6:	dc6e      	bgt.n	800b1a6 <_dtoa_r+0x7ce>
 800b0c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b0ca:	2a00      	cmp	r2, #0
 800b0cc:	d067      	beq.n	800b19e <_dtoa_r+0x7c6>
 800b0ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b0d2:	9f07      	ldr	r7, [sp, #28]
 800b0d4:	9d05      	ldr	r5, [sp, #20]
 800b0d6:	9a05      	ldr	r2, [sp, #20]
 800b0d8:	2101      	movs	r1, #1
 800b0da:	441a      	add	r2, r3
 800b0dc:	4620      	mov	r0, r4
 800b0de:	9205      	str	r2, [sp, #20]
 800b0e0:	4498      	add	r8, r3
 800b0e2:	f000 fb15 	bl	800b710 <__i2b>
 800b0e6:	4606      	mov	r6, r0
 800b0e8:	2d00      	cmp	r5, #0
 800b0ea:	dd0c      	ble.n	800b106 <_dtoa_r+0x72e>
 800b0ec:	f1b8 0f00 	cmp.w	r8, #0
 800b0f0:	dd09      	ble.n	800b106 <_dtoa_r+0x72e>
 800b0f2:	4545      	cmp	r5, r8
 800b0f4:	9a05      	ldr	r2, [sp, #20]
 800b0f6:	462b      	mov	r3, r5
 800b0f8:	bfa8      	it	ge
 800b0fa:	4643      	movge	r3, r8
 800b0fc:	1ad2      	subs	r2, r2, r3
 800b0fe:	9205      	str	r2, [sp, #20]
 800b100:	1aed      	subs	r5, r5, r3
 800b102:	eba8 0803 	sub.w	r8, r8, r3
 800b106:	9b07      	ldr	r3, [sp, #28]
 800b108:	b1eb      	cbz	r3, 800b146 <_dtoa_r+0x76e>
 800b10a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d067      	beq.n	800b1e0 <_dtoa_r+0x808>
 800b110:	b18f      	cbz	r7, 800b136 <_dtoa_r+0x75e>
 800b112:	4631      	mov	r1, r6
 800b114:	463a      	mov	r2, r7
 800b116:	4620      	mov	r0, r4
 800b118:	f000 fb9a 	bl	800b850 <__pow5mult>
 800b11c:	9a04      	ldr	r2, [sp, #16]
 800b11e:	4601      	mov	r1, r0
 800b120:	4606      	mov	r6, r0
 800b122:	4620      	mov	r0, r4
 800b124:	f000 fafd 	bl	800b722 <__multiply>
 800b128:	9904      	ldr	r1, [sp, #16]
 800b12a:	9008      	str	r0, [sp, #32]
 800b12c:	4620      	mov	r0, r4
 800b12e:	f000 fa4f 	bl	800b5d0 <_Bfree>
 800b132:	9b08      	ldr	r3, [sp, #32]
 800b134:	9304      	str	r3, [sp, #16]
 800b136:	9b07      	ldr	r3, [sp, #28]
 800b138:	1bda      	subs	r2, r3, r7
 800b13a:	d004      	beq.n	800b146 <_dtoa_r+0x76e>
 800b13c:	9904      	ldr	r1, [sp, #16]
 800b13e:	4620      	mov	r0, r4
 800b140:	f000 fb86 	bl	800b850 <__pow5mult>
 800b144:	9004      	str	r0, [sp, #16]
 800b146:	2101      	movs	r1, #1
 800b148:	4620      	mov	r0, r4
 800b14a:	f000 fae1 	bl	800b710 <__i2b>
 800b14e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b150:	4607      	mov	r7, r0
 800b152:	2b00      	cmp	r3, #0
 800b154:	f000 81d0 	beq.w	800b4f8 <_dtoa_r+0xb20>
 800b158:	461a      	mov	r2, r3
 800b15a:	4601      	mov	r1, r0
 800b15c:	4620      	mov	r0, r4
 800b15e:	f000 fb77 	bl	800b850 <__pow5mult>
 800b162:	9b06      	ldr	r3, [sp, #24]
 800b164:	2b01      	cmp	r3, #1
 800b166:	4607      	mov	r7, r0
 800b168:	dc40      	bgt.n	800b1ec <_dtoa_r+0x814>
 800b16a:	9b00      	ldr	r3, [sp, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d139      	bne.n	800b1e4 <_dtoa_r+0x80c>
 800b170:	9b01      	ldr	r3, [sp, #4]
 800b172:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b176:	2b00      	cmp	r3, #0
 800b178:	d136      	bne.n	800b1e8 <_dtoa_r+0x810>
 800b17a:	9b01      	ldr	r3, [sp, #4]
 800b17c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b180:	0d1b      	lsrs	r3, r3, #20
 800b182:	051b      	lsls	r3, r3, #20
 800b184:	b12b      	cbz	r3, 800b192 <_dtoa_r+0x7ba>
 800b186:	9b05      	ldr	r3, [sp, #20]
 800b188:	3301      	adds	r3, #1
 800b18a:	9305      	str	r3, [sp, #20]
 800b18c:	f108 0801 	add.w	r8, r8, #1
 800b190:	2301      	movs	r3, #1
 800b192:	9307      	str	r3, [sp, #28]
 800b194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b196:	2b00      	cmp	r3, #0
 800b198:	d12a      	bne.n	800b1f0 <_dtoa_r+0x818>
 800b19a:	2001      	movs	r0, #1
 800b19c:	e030      	b.n	800b200 <_dtoa_r+0x828>
 800b19e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b1a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b1a4:	e795      	b.n	800b0d2 <_dtoa_r+0x6fa>
 800b1a6:	9b07      	ldr	r3, [sp, #28]
 800b1a8:	f109 37ff 	add.w	r7, r9, #4294967295
 800b1ac:	42bb      	cmp	r3, r7
 800b1ae:	bfbf      	itttt	lt
 800b1b0:	9b07      	ldrlt	r3, [sp, #28]
 800b1b2:	9707      	strlt	r7, [sp, #28]
 800b1b4:	1afa      	sublt	r2, r7, r3
 800b1b6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b1b8:	bfbb      	ittet	lt
 800b1ba:	189b      	addlt	r3, r3, r2
 800b1bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b1be:	1bdf      	subge	r7, r3, r7
 800b1c0:	2700      	movlt	r7, #0
 800b1c2:	f1b9 0f00 	cmp.w	r9, #0
 800b1c6:	bfb5      	itete	lt
 800b1c8:	9b05      	ldrlt	r3, [sp, #20]
 800b1ca:	9d05      	ldrge	r5, [sp, #20]
 800b1cc:	eba3 0509 	sublt.w	r5, r3, r9
 800b1d0:	464b      	movge	r3, r9
 800b1d2:	bfb8      	it	lt
 800b1d4:	2300      	movlt	r3, #0
 800b1d6:	e77e      	b.n	800b0d6 <_dtoa_r+0x6fe>
 800b1d8:	9f07      	ldr	r7, [sp, #28]
 800b1da:	9d05      	ldr	r5, [sp, #20]
 800b1dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b1de:	e783      	b.n	800b0e8 <_dtoa_r+0x710>
 800b1e0:	9a07      	ldr	r2, [sp, #28]
 800b1e2:	e7ab      	b.n	800b13c <_dtoa_r+0x764>
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	e7d4      	b.n	800b192 <_dtoa_r+0x7ba>
 800b1e8:	9b00      	ldr	r3, [sp, #0]
 800b1ea:	e7d2      	b.n	800b192 <_dtoa_r+0x7ba>
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	9307      	str	r3, [sp, #28]
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800b1f6:	6918      	ldr	r0, [r3, #16]
 800b1f8:	f000 fa3c 	bl	800b674 <__hi0bits>
 800b1fc:	f1c0 0020 	rsb	r0, r0, #32
 800b200:	4440      	add	r0, r8
 800b202:	f010 001f 	ands.w	r0, r0, #31
 800b206:	d047      	beq.n	800b298 <_dtoa_r+0x8c0>
 800b208:	f1c0 0320 	rsb	r3, r0, #32
 800b20c:	2b04      	cmp	r3, #4
 800b20e:	dd3b      	ble.n	800b288 <_dtoa_r+0x8b0>
 800b210:	9b05      	ldr	r3, [sp, #20]
 800b212:	f1c0 001c 	rsb	r0, r0, #28
 800b216:	4403      	add	r3, r0
 800b218:	9305      	str	r3, [sp, #20]
 800b21a:	4405      	add	r5, r0
 800b21c:	4480      	add	r8, r0
 800b21e:	9b05      	ldr	r3, [sp, #20]
 800b220:	2b00      	cmp	r3, #0
 800b222:	dd05      	ble.n	800b230 <_dtoa_r+0x858>
 800b224:	461a      	mov	r2, r3
 800b226:	9904      	ldr	r1, [sp, #16]
 800b228:	4620      	mov	r0, r4
 800b22a:	f000 fb5f 	bl	800b8ec <__lshift>
 800b22e:	9004      	str	r0, [sp, #16]
 800b230:	f1b8 0f00 	cmp.w	r8, #0
 800b234:	dd05      	ble.n	800b242 <_dtoa_r+0x86a>
 800b236:	4639      	mov	r1, r7
 800b238:	4642      	mov	r2, r8
 800b23a:	4620      	mov	r0, r4
 800b23c:	f000 fb56 	bl	800b8ec <__lshift>
 800b240:	4607      	mov	r7, r0
 800b242:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b244:	b353      	cbz	r3, 800b29c <_dtoa_r+0x8c4>
 800b246:	4639      	mov	r1, r7
 800b248:	9804      	ldr	r0, [sp, #16]
 800b24a:	f000 fba3 	bl	800b994 <__mcmp>
 800b24e:	2800      	cmp	r0, #0
 800b250:	da24      	bge.n	800b29c <_dtoa_r+0x8c4>
 800b252:	2300      	movs	r3, #0
 800b254:	220a      	movs	r2, #10
 800b256:	9904      	ldr	r1, [sp, #16]
 800b258:	4620      	mov	r0, r4
 800b25a:	f000 f9d0 	bl	800b5fe <__multadd>
 800b25e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b260:	9004      	str	r0, [sp, #16]
 800b262:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b266:	2b00      	cmp	r3, #0
 800b268:	f000 814d 	beq.w	800b506 <_dtoa_r+0xb2e>
 800b26c:	2300      	movs	r3, #0
 800b26e:	4631      	mov	r1, r6
 800b270:	220a      	movs	r2, #10
 800b272:	4620      	mov	r0, r4
 800b274:	f000 f9c3 	bl	800b5fe <__multadd>
 800b278:	9b02      	ldr	r3, [sp, #8]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	4606      	mov	r6, r0
 800b27e:	dc4f      	bgt.n	800b320 <_dtoa_r+0x948>
 800b280:	9b06      	ldr	r3, [sp, #24]
 800b282:	2b02      	cmp	r3, #2
 800b284:	dd4c      	ble.n	800b320 <_dtoa_r+0x948>
 800b286:	e011      	b.n	800b2ac <_dtoa_r+0x8d4>
 800b288:	d0c9      	beq.n	800b21e <_dtoa_r+0x846>
 800b28a:	9a05      	ldr	r2, [sp, #20]
 800b28c:	331c      	adds	r3, #28
 800b28e:	441a      	add	r2, r3
 800b290:	9205      	str	r2, [sp, #20]
 800b292:	441d      	add	r5, r3
 800b294:	4498      	add	r8, r3
 800b296:	e7c2      	b.n	800b21e <_dtoa_r+0x846>
 800b298:	4603      	mov	r3, r0
 800b29a:	e7f6      	b.n	800b28a <_dtoa_r+0x8b2>
 800b29c:	f1b9 0f00 	cmp.w	r9, #0
 800b2a0:	dc38      	bgt.n	800b314 <_dtoa_r+0x93c>
 800b2a2:	9b06      	ldr	r3, [sp, #24]
 800b2a4:	2b02      	cmp	r3, #2
 800b2a6:	dd35      	ble.n	800b314 <_dtoa_r+0x93c>
 800b2a8:	f8cd 9008 	str.w	r9, [sp, #8]
 800b2ac:	9b02      	ldr	r3, [sp, #8]
 800b2ae:	b963      	cbnz	r3, 800b2ca <_dtoa_r+0x8f2>
 800b2b0:	4639      	mov	r1, r7
 800b2b2:	2205      	movs	r2, #5
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	f000 f9a2 	bl	800b5fe <__multadd>
 800b2ba:	4601      	mov	r1, r0
 800b2bc:	4607      	mov	r7, r0
 800b2be:	9804      	ldr	r0, [sp, #16]
 800b2c0:	f000 fb68 	bl	800b994 <__mcmp>
 800b2c4:	2800      	cmp	r0, #0
 800b2c6:	f73f adcc 	bgt.w	800ae62 <_dtoa_r+0x48a>
 800b2ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2cc:	465d      	mov	r5, fp
 800b2ce:	ea6f 0a03 	mvn.w	sl, r3
 800b2d2:	f04f 0900 	mov.w	r9, #0
 800b2d6:	4639      	mov	r1, r7
 800b2d8:	4620      	mov	r0, r4
 800b2da:	f000 f979 	bl	800b5d0 <_Bfree>
 800b2de:	2e00      	cmp	r6, #0
 800b2e0:	f43f aeb7 	beq.w	800b052 <_dtoa_r+0x67a>
 800b2e4:	f1b9 0f00 	cmp.w	r9, #0
 800b2e8:	d005      	beq.n	800b2f6 <_dtoa_r+0x91e>
 800b2ea:	45b1      	cmp	r9, r6
 800b2ec:	d003      	beq.n	800b2f6 <_dtoa_r+0x91e>
 800b2ee:	4649      	mov	r1, r9
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	f000 f96d 	bl	800b5d0 <_Bfree>
 800b2f6:	4631      	mov	r1, r6
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	f000 f969 	bl	800b5d0 <_Bfree>
 800b2fe:	e6a8      	b.n	800b052 <_dtoa_r+0x67a>
 800b300:	2700      	movs	r7, #0
 800b302:	463e      	mov	r6, r7
 800b304:	e7e1      	b.n	800b2ca <_dtoa_r+0x8f2>
 800b306:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b30a:	463e      	mov	r6, r7
 800b30c:	e5a9      	b.n	800ae62 <_dtoa_r+0x48a>
 800b30e:	bf00      	nop
 800b310:	40240000 	.word	0x40240000
 800b314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b316:	f8cd 9008 	str.w	r9, [sp, #8]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	f000 80fa 	beq.w	800b514 <_dtoa_r+0xb3c>
 800b320:	2d00      	cmp	r5, #0
 800b322:	dd05      	ble.n	800b330 <_dtoa_r+0x958>
 800b324:	4631      	mov	r1, r6
 800b326:	462a      	mov	r2, r5
 800b328:	4620      	mov	r0, r4
 800b32a:	f000 fadf 	bl	800b8ec <__lshift>
 800b32e:	4606      	mov	r6, r0
 800b330:	9b07      	ldr	r3, [sp, #28]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d04c      	beq.n	800b3d0 <_dtoa_r+0x9f8>
 800b336:	6871      	ldr	r1, [r6, #4]
 800b338:	4620      	mov	r0, r4
 800b33a:	f000 f915 	bl	800b568 <_Balloc>
 800b33e:	6932      	ldr	r2, [r6, #16]
 800b340:	3202      	adds	r2, #2
 800b342:	4605      	mov	r5, r0
 800b344:	0092      	lsls	r2, r2, #2
 800b346:	f106 010c 	add.w	r1, r6, #12
 800b34a:	300c      	adds	r0, #12
 800b34c:	f7fe fd5c 	bl	8009e08 <memcpy>
 800b350:	2201      	movs	r2, #1
 800b352:	4629      	mov	r1, r5
 800b354:	4620      	mov	r0, r4
 800b356:	f000 fac9 	bl	800b8ec <__lshift>
 800b35a:	9b00      	ldr	r3, [sp, #0]
 800b35c:	f8cd b014 	str.w	fp, [sp, #20]
 800b360:	f003 0301 	and.w	r3, r3, #1
 800b364:	46b1      	mov	r9, r6
 800b366:	9307      	str	r3, [sp, #28]
 800b368:	4606      	mov	r6, r0
 800b36a:	4639      	mov	r1, r7
 800b36c:	9804      	ldr	r0, [sp, #16]
 800b36e:	f7ff faa7 	bl	800a8c0 <quorem>
 800b372:	4649      	mov	r1, r9
 800b374:	4605      	mov	r5, r0
 800b376:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b37a:	9804      	ldr	r0, [sp, #16]
 800b37c:	f000 fb0a 	bl	800b994 <__mcmp>
 800b380:	4632      	mov	r2, r6
 800b382:	9000      	str	r0, [sp, #0]
 800b384:	4639      	mov	r1, r7
 800b386:	4620      	mov	r0, r4
 800b388:	f000 fb1e 	bl	800b9c8 <__mdiff>
 800b38c:	68c3      	ldr	r3, [r0, #12]
 800b38e:	4602      	mov	r2, r0
 800b390:	bb03      	cbnz	r3, 800b3d4 <_dtoa_r+0x9fc>
 800b392:	4601      	mov	r1, r0
 800b394:	9008      	str	r0, [sp, #32]
 800b396:	9804      	ldr	r0, [sp, #16]
 800b398:	f000 fafc 	bl	800b994 <__mcmp>
 800b39c:	9a08      	ldr	r2, [sp, #32]
 800b39e:	4603      	mov	r3, r0
 800b3a0:	4611      	mov	r1, r2
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	9308      	str	r3, [sp, #32]
 800b3a6:	f000 f913 	bl	800b5d0 <_Bfree>
 800b3aa:	9b08      	ldr	r3, [sp, #32]
 800b3ac:	b9a3      	cbnz	r3, 800b3d8 <_dtoa_r+0xa00>
 800b3ae:	9a06      	ldr	r2, [sp, #24]
 800b3b0:	b992      	cbnz	r2, 800b3d8 <_dtoa_r+0xa00>
 800b3b2:	9a07      	ldr	r2, [sp, #28]
 800b3b4:	b982      	cbnz	r2, 800b3d8 <_dtoa_r+0xa00>
 800b3b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b3ba:	d029      	beq.n	800b410 <_dtoa_r+0xa38>
 800b3bc:	9b00      	ldr	r3, [sp, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	dd01      	ble.n	800b3c6 <_dtoa_r+0x9ee>
 800b3c2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b3c6:	9b05      	ldr	r3, [sp, #20]
 800b3c8:	1c5d      	adds	r5, r3, #1
 800b3ca:	f883 8000 	strb.w	r8, [r3]
 800b3ce:	e782      	b.n	800b2d6 <_dtoa_r+0x8fe>
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	e7c2      	b.n	800b35a <_dtoa_r+0x982>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e7e3      	b.n	800b3a0 <_dtoa_r+0x9c8>
 800b3d8:	9a00      	ldr	r2, [sp, #0]
 800b3da:	2a00      	cmp	r2, #0
 800b3dc:	db04      	blt.n	800b3e8 <_dtoa_r+0xa10>
 800b3de:	d125      	bne.n	800b42c <_dtoa_r+0xa54>
 800b3e0:	9a06      	ldr	r2, [sp, #24]
 800b3e2:	bb1a      	cbnz	r2, 800b42c <_dtoa_r+0xa54>
 800b3e4:	9a07      	ldr	r2, [sp, #28]
 800b3e6:	bb0a      	cbnz	r2, 800b42c <_dtoa_r+0xa54>
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	ddec      	ble.n	800b3c6 <_dtoa_r+0x9ee>
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	9904      	ldr	r1, [sp, #16]
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	f000 fa7b 	bl	800b8ec <__lshift>
 800b3f6:	4639      	mov	r1, r7
 800b3f8:	9004      	str	r0, [sp, #16]
 800b3fa:	f000 facb 	bl	800b994 <__mcmp>
 800b3fe:	2800      	cmp	r0, #0
 800b400:	dc03      	bgt.n	800b40a <_dtoa_r+0xa32>
 800b402:	d1e0      	bne.n	800b3c6 <_dtoa_r+0x9ee>
 800b404:	f018 0f01 	tst.w	r8, #1
 800b408:	d0dd      	beq.n	800b3c6 <_dtoa_r+0x9ee>
 800b40a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b40e:	d1d8      	bne.n	800b3c2 <_dtoa_r+0x9ea>
 800b410:	9b05      	ldr	r3, [sp, #20]
 800b412:	9a05      	ldr	r2, [sp, #20]
 800b414:	1c5d      	adds	r5, r3, #1
 800b416:	2339      	movs	r3, #57	; 0x39
 800b418:	7013      	strb	r3, [r2, #0]
 800b41a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b41e:	2b39      	cmp	r3, #57	; 0x39
 800b420:	f105 32ff 	add.w	r2, r5, #4294967295
 800b424:	d04f      	beq.n	800b4c6 <_dtoa_r+0xaee>
 800b426:	3301      	adds	r3, #1
 800b428:	7013      	strb	r3, [r2, #0]
 800b42a:	e754      	b.n	800b2d6 <_dtoa_r+0x8fe>
 800b42c:	9a05      	ldr	r2, [sp, #20]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f102 0501 	add.w	r5, r2, #1
 800b434:	dd06      	ble.n	800b444 <_dtoa_r+0xa6c>
 800b436:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b43a:	d0e9      	beq.n	800b410 <_dtoa_r+0xa38>
 800b43c:	f108 0801 	add.w	r8, r8, #1
 800b440:	9b05      	ldr	r3, [sp, #20]
 800b442:	e7c2      	b.n	800b3ca <_dtoa_r+0x9f2>
 800b444:	9a02      	ldr	r2, [sp, #8]
 800b446:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b44a:	eba5 030b 	sub.w	r3, r5, fp
 800b44e:	4293      	cmp	r3, r2
 800b450:	d021      	beq.n	800b496 <_dtoa_r+0xabe>
 800b452:	2300      	movs	r3, #0
 800b454:	220a      	movs	r2, #10
 800b456:	9904      	ldr	r1, [sp, #16]
 800b458:	4620      	mov	r0, r4
 800b45a:	f000 f8d0 	bl	800b5fe <__multadd>
 800b45e:	45b1      	cmp	r9, r6
 800b460:	9004      	str	r0, [sp, #16]
 800b462:	f04f 0300 	mov.w	r3, #0
 800b466:	f04f 020a 	mov.w	r2, #10
 800b46a:	4649      	mov	r1, r9
 800b46c:	4620      	mov	r0, r4
 800b46e:	d105      	bne.n	800b47c <_dtoa_r+0xaa4>
 800b470:	f000 f8c5 	bl	800b5fe <__multadd>
 800b474:	4681      	mov	r9, r0
 800b476:	4606      	mov	r6, r0
 800b478:	9505      	str	r5, [sp, #20]
 800b47a:	e776      	b.n	800b36a <_dtoa_r+0x992>
 800b47c:	f000 f8bf 	bl	800b5fe <__multadd>
 800b480:	4631      	mov	r1, r6
 800b482:	4681      	mov	r9, r0
 800b484:	2300      	movs	r3, #0
 800b486:	220a      	movs	r2, #10
 800b488:	4620      	mov	r0, r4
 800b48a:	f000 f8b8 	bl	800b5fe <__multadd>
 800b48e:	4606      	mov	r6, r0
 800b490:	e7f2      	b.n	800b478 <_dtoa_r+0xaa0>
 800b492:	f04f 0900 	mov.w	r9, #0
 800b496:	2201      	movs	r2, #1
 800b498:	9904      	ldr	r1, [sp, #16]
 800b49a:	4620      	mov	r0, r4
 800b49c:	f000 fa26 	bl	800b8ec <__lshift>
 800b4a0:	4639      	mov	r1, r7
 800b4a2:	9004      	str	r0, [sp, #16]
 800b4a4:	f000 fa76 	bl	800b994 <__mcmp>
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	dcb6      	bgt.n	800b41a <_dtoa_r+0xa42>
 800b4ac:	d102      	bne.n	800b4b4 <_dtoa_r+0xadc>
 800b4ae:	f018 0f01 	tst.w	r8, #1
 800b4b2:	d1b2      	bne.n	800b41a <_dtoa_r+0xa42>
 800b4b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b4b8:	2b30      	cmp	r3, #48	; 0x30
 800b4ba:	f105 32ff 	add.w	r2, r5, #4294967295
 800b4be:	f47f af0a 	bne.w	800b2d6 <_dtoa_r+0x8fe>
 800b4c2:	4615      	mov	r5, r2
 800b4c4:	e7f6      	b.n	800b4b4 <_dtoa_r+0xadc>
 800b4c6:	4593      	cmp	fp, r2
 800b4c8:	d105      	bne.n	800b4d6 <_dtoa_r+0xafe>
 800b4ca:	2331      	movs	r3, #49	; 0x31
 800b4cc:	f10a 0a01 	add.w	sl, sl, #1
 800b4d0:	f88b 3000 	strb.w	r3, [fp]
 800b4d4:	e6ff      	b.n	800b2d6 <_dtoa_r+0x8fe>
 800b4d6:	4615      	mov	r5, r2
 800b4d8:	e79f      	b.n	800b41a <_dtoa_r+0xa42>
 800b4da:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b540 <_dtoa_r+0xb68>
 800b4de:	e007      	b.n	800b4f0 <_dtoa_r+0xb18>
 800b4e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4e2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b544 <_dtoa_r+0xb6c>
 800b4e6:	b11b      	cbz	r3, 800b4f0 <_dtoa_r+0xb18>
 800b4e8:	f10b 0308 	add.w	r3, fp, #8
 800b4ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b4ee:	6013      	str	r3, [r2, #0]
 800b4f0:	4658      	mov	r0, fp
 800b4f2:	b017      	add	sp, #92	; 0x5c
 800b4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4f8:	9b06      	ldr	r3, [sp, #24]
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	f77f ae35 	ble.w	800b16a <_dtoa_r+0x792>
 800b500:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b502:	9307      	str	r3, [sp, #28]
 800b504:	e649      	b.n	800b19a <_dtoa_r+0x7c2>
 800b506:	9b02      	ldr	r3, [sp, #8]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	dc03      	bgt.n	800b514 <_dtoa_r+0xb3c>
 800b50c:	9b06      	ldr	r3, [sp, #24]
 800b50e:	2b02      	cmp	r3, #2
 800b510:	f73f aecc 	bgt.w	800b2ac <_dtoa_r+0x8d4>
 800b514:	465d      	mov	r5, fp
 800b516:	4639      	mov	r1, r7
 800b518:	9804      	ldr	r0, [sp, #16]
 800b51a:	f7ff f9d1 	bl	800a8c0 <quorem>
 800b51e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b522:	f805 8b01 	strb.w	r8, [r5], #1
 800b526:	9a02      	ldr	r2, [sp, #8]
 800b528:	eba5 030b 	sub.w	r3, r5, fp
 800b52c:	429a      	cmp	r2, r3
 800b52e:	ddb0      	ble.n	800b492 <_dtoa_r+0xaba>
 800b530:	2300      	movs	r3, #0
 800b532:	220a      	movs	r2, #10
 800b534:	9904      	ldr	r1, [sp, #16]
 800b536:	4620      	mov	r0, r4
 800b538:	f000 f861 	bl	800b5fe <__multadd>
 800b53c:	9004      	str	r0, [sp, #16]
 800b53e:	e7ea      	b.n	800b516 <_dtoa_r+0xb3e>
 800b540:	0800bfe8 	.word	0x0800bfe8
 800b544:	0800c00c 	.word	0x0800c00c

0800b548 <_localeconv_r>:
 800b548:	4b04      	ldr	r3, [pc, #16]	; (800b55c <_localeconv_r+0x14>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	6a18      	ldr	r0, [r3, #32]
 800b54e:	4b04      	ldr	r3, [pc, #16]	; (800b560 <_localeconv_r+0x18>)
 800b550:	2800      	cmp	r0, #0
 800b552:	bf08      	it	eq
 800b554:	4618      	moveq	r0, r3
 800b556:	30f0      	adds	r0, #240	; 0xf0
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop
 800b55c:	20000188 	.word	0x20000188
 800b560:	200001ec 	.word	0x200001ec

0800b564 <__malloc_lock>:
 800b564:	4770      	bx	lr

0800b566 <__malloc_unlock>:
 800b566:	4770      	bx	lr

0800b568 <_Balloc>:
 800b568:	b570      	push	{r4, r5, r6, lr}
 800b56a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b56c:	4604      	mov	r4, r0
 800b56e:	460e      	mov	r6, r1
 800b570:	b93d      	cbnz	r5, 800b582 <_Balloc+0x1a>
 800b572:	2010      	movs	r0, #16
 800b574:	f7fe fc38 	bl	8009de8 <malloc>
 800b578:	6260      	str	r0, [r4, #36]	; 0x24
 800b57a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b57e:	6005      	str	r5, [r0, #0]
 800b580:	60c5      	str	r5, [r0, #12]
 800b582:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b584:	68eb      	ldr	r3, [r5, #12]
 800b586:	b183      	cbz	r3, 800b5aa <_Balloc+0x42>
 800b588:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b590:	b9b8      	cbnz	r0, 800b5c2 <_Balloc+0x5a>
 800b592:	2101      	movs	r1, #1
 800b594:	fa01 f506 	lsl.w	r5, r1, r6
 800b598:	1d6a      	adds	r2, r5, #5
 800b59a:	0092      	lsls	r2, r2, #2
 800b59c:	4620      	mov	r0, r4
 800b59e:	f000 fabf 	bl	800bb20 <_calloc_r>
 800b5a2:	b160      	cbz	r0, 800b5be <_Balloc+0x56>
 800b5a4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b5a8:	e00e      	b.n	800b5c8 <_Balloc+0x60>
 800b5aa:	2221      	movs	r2, #33	; 0x21
 800b5ac:	2104      	movs	r1, #4
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	f000 fab6 	bl	800bb20 <_calloc_r>
 800b5b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5b6:	60e8      	str	r0, [r5, #12]
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1e4      	bne.n	800b588 <_Balloc+0x20>
 800b5be:	2000      	movs	r0, #0
 800b5c0:	bd70      	pop	{r4, r5, r6, pc}
 800b5c2:	6802      	ldr	r2, [r0, #0]
 800b5c4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5ce:	e7f7      	b.n	800b5c0 <_Balloc+0x58>

0800b5d0 <_Bfree>:
 800b5d0:	b570      	push	{r4, r5, r6, lr}
 800b5d2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b5d4:	4606      	mov	r6, r0
 800b5d6:	460d      	mov	r5, r1
 800b5d8:	b93c      	cbnz	r4, 800b5ea <_Bfree+0x1a>
 800b5da:	2010      	movs	r0, #16
 800b5dc:	f7fe fc04 	bl	8009de8 <malloc>
 800b5e0:	6270      	str	r0, [r6, #36]	; 0x24
 800b5e2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5e6:	6004      	str	r4, [r0, #0]
 800b5e8:	60c4      	str	r4, [r0, #12]
 800b5ea:	b13d      	cbz	r5, 800b5fc <_Bfree+0x2c>
 800b5ec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b5ee:	686a      	ldr	r2, [r5, #4]
 800b5f0:	68db      	ldr	r3, [r3, #12]
 800b5f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b5f6:	6029      	str	r1, [r5, #0]
 800b5f8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b5fc:	bd70      	pop	{r4, r5, r6, pc}

0800b5fe <__multadd>:
 800b5fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b602:	690d      	ldr	r5, [r1, #16]
 800b604:	461f      	mov	r7, r3
 800b606:	4606      	mov	r6, r0
 800b608:	460c      	mov	r4, r1
 800b60a:	f101 0c14 	add.w	ip, r1, #20
 800b60e:	2300      	movs	r3, #0
 800b610:	f8dc 0000 	ldr.w	r0, [ip]
 800b614:	b281      	uxth	r1, r0
 800b616:	fb02 7101 	mla	r1, r2, r1, r7
 800b61a:	0c0f      	lsrs	r7, r1, #16
 800b61c:	0c00      	lsrs	r0, r0, #16
 800b61e:	fb02 7000 	mla	r0, r2, r0, r7
 800b622:	b289      	uxth	r1, r1
 800b624:	3301      	adds	r3, #1
 800b626:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b62a:	429d      	cmp	r5, r3
 800b62c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b630:	f84c 1b04 	str.w	r1, [ip], #4
 800b634:	dcec      	bgt.n	800b610 <__multadd+0x12>
 800b636:	b1d7      	cbz	r7, 800b66e <__multadd+0x70>
 800b638:	68a3      	ldr	r3, [r4, #8]
 800b63a:	42ab      	cmp	r3, r5
 800b63c:	dc12      	bgt.n	800b664 <__multadd+0x66>
 800b63e:	6861      	ldr	r1, [r4, #4]
 800b640:	4630      	mov	r0, r6
 800b642:	3101      	adds	r1, #1
 800b644:	f7ff ff90 	bl	800b568 <_Balloc>
 800b648:	6922      	ldr	r2, [r4, #16]
 800b64a:	3202      	adds	r2, #2
 800b64c:	f104 010c 	add.w	r1, r4, #12
 800b650:	4680      	mov	r8, r0
 800b652:	0092      	lsls	r2, r2, #2
 800b654:	300c      	adds	r0, #12
 800b656:	f7fe fbd7 	bl	8009e08 <memcpy>
 800b65a:	4621      	mov	r1, r4
 800b65c:	4630      	mov	r0, r6
 800b65e:	f7ff ffb7 	bl	800b5d0 <_Bfree>
 800b662:	4644      	mov	r4, r8
 800b664:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b668:	3501      	adds	r5, #1
 800b66a:	615f      	str	r7, [r3, #20]
 800b66c:	6125      	str	r5, [r4, #16]
 800b66e:	4620      	mov	r0, r4
 800b670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b674 <__hi0bits>:
 800b674:	0c02      	lsrs	r2, r0, #16
 800b676:	0412      	lsls	r2, r2, #16
 800b678:	4603      	mov	r3, r0
 800b67a:	b9b2      	cbnz	r2, 800b6aa <__hi0bits+0x36>
 800b67c:	0403      	lsls	r3, r0, #16
 800b67e:	2010      	movs	r0, #16
 800b680:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b684:	bf04      	itt	eq
 800b686:	021b      	lsleq	r3, r3, #8
 800b688:	3008      	addeq	r0, #8
 800b68a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b68e:	bf04      	itt	eq
 800b690:	011b      	lsleq	r3, r3, #4
 800b692:	3004      	addeq	r0, #4
 800b694:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b698:	bf04      	itt	eq
 800b69a:	009b      	lsleq	r3, r3, #2
 800b69c:	3002      	addeq	r0, #2
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	db06      	blt.n	800b6b0 <__hi0bits+0x3c>
 800b6a2:	005b      	lsls	r3, r3, #1
 800b6a4:	d503      	bpl.n	800b6ae <__hi0bits+0x3a>
 800b6a6:	3001      	adds	r0, #1
 800b6a8:	4770      	bx	lr
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	e7e8      	b.n	800b680 <__hi0bits+0xc>
 800b6ae:	2020      	movs	r0, #32
 800b6b0:	4770      	bx	lr

0800b6b2 <__lo0bits>:
 800b6b2:	6803      	ldr	r3, [r0, #0]
 800b6b4:	f013 0207 	ands.w	r2, r3, #7
 800b6b8:	4601      	mov	r1, r0
 800b6ba:	d00b      	beq.n	800b6d4 <__lo0bits+0x22>
 800b6bc:	07da      	lsls	r2, r3, #31
 800b6be:	d423      	bmi.n	800b708 <__lo0bits+0x56>
 800b6c0:	0798      	lsls	r0, r3, #30
 800b6c2:	bf49      	itett	mi
 800b6c4:	085b      	lsrmi	r3, r3, #1
 800b6c6:	089b      	lsrpl	r3, r3, #2
 800b6c8:	2001      	movmi	r0, #1
 800b6ca:	600b      	strmi	r3, [r1, #0]
 800b6cc:	bf5c      	itt	pl
 800b6ce:	600b      	strpl	r3, [r1, #0]
 800b6d0:	2002      	movpl	r0, #2
 800b6d2:	4770      	bx	lr
 800b6d4:	b298      	uxth	r0, r3
 800b6d6:	b9a8      	cbnz	r0, 800b704 <__lo0bits+0x52>
 800b6d8:	0c1b      	lsrs	r3, r3, #16
 800b6da:	2010      	movs	r0, #16
 800b6dc:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b6e0:	bf04      	itt	eq
 800b6e2:	0a1b      	lsreq	r3, r3, #8
 800b6e4:	3008      	addeq	r0, #8
 800b6e6:	071a      	lsls	r2, r3, #28
 800b6e8:	bf04      	itt	eq
 800b6ea:	091b      	lsreq	r3, r3, #4
 800b6ec:	3004      	addeq	r0, #4
 800b6ee:	079a      	lsls	r2, r3, #30
 800b6f0:	bf04      	itt	eq
 800b6f2:	089b      	lsreq	r3, r3, #2
 800b6f4:	3002      	addeq	r0, #2
 800b6f6:	07da      	lsls	r2, r3, #31
 800b6f8:	d402      	bmi.n	800b700 <__lo0bits+0x4e>
 800b6fa:	085b      	lsrs	r3, r3, #1
 800b6fc:	d006      	beq.n	800b70c <__lo0bits+0x5a>
 800b6fe:	3001      	adds	r0, #1
 800b700:	600b      	str	r3, [r1, #0]
 800b702:	4770      	bx	lr
 800b704:	4610      	mov	r0, r2
 800b706:	e7e9      	b.n	800b6dc <__lo0bits+0x2a>
 800b708:	2000      	movs	r0, #0
 800b70a:	4770      	bx	lr
 800b70c:	2020      	movs	r0, #32
 800b70e:	4770      	bx	lr

0800b710 <__i2b>:
 800b710:	b510      	push	{r4, lr}
 800b712:	460c      	mov	r4, r1
 800b714:	2101      	movs	r1, #1
 800b716:	f7ff ff27 	bl	800b568 <_Balloc>
 800b71a:	2201      	movs	r2, #1
 800b71c:	6144      	str	r4, [r0, #20]
 800b71e:	6102      	str	r2, [r0, #16]
 800b720:	bd10      	pop	{r4, pc}

0800b722 <__multiply>:
 800b722:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b726:	4614      	mov	r4, r2
 800b728:	690a      	ldr	r2, [r1, #16]
 800b72a:	6923      	ldr	r3, [r4, #16]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	bfb8      	it	lt
 800b730:	460b      	movlt	r3, r1
 800b732:	4688      	mov	r8, r1
 800b734:	bfbc      	itt	lt
 800b736:	46a0      	movlt	r8, r4
 800b738:	461c      	movlt	r4, r3
 800b73a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b73e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b742:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b746:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b74a:	eb07 0609 	add.w	r6, r7, r9
 800b74e:	42b3      	cmp	r3, r6
 800b750:	bfb8      	it	lt
 800b752:	3101      	addlt	r1, #1
 800b754:	f7ff ff08 	bl	800b568 <_Balloc>
 800b758:	f100 0514 	add.w	r5, r0, #20
 800b75c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b760:	462b      	mov	r3, r5
 800b762:	2200      	movs	r2, #0
 800b764:	4573      	cmp	r3, lr
 800b766:	d316      	bcc.n	800b796 <__multiply+0x74>
 800b768:	f104 0214 	add.w	r2, r4, #20
 800b76c:	f108 0114 	add.w	r1, r8, #20
 800b770:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b774:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b778:	9300      	str	r3, [sp, #0]
 800b77a:	9b00      	ldr	r3, [sp, #0]
 800b77c:	9201      	str	r2, [sp, #4]
 800b77e:	4293      	cmp	r3, r2
 800b780:	d80c      	bhi.n	800b79c <__multiply+0x7a>
 800b782:	2e00      	cmp	r6, #0
 800b784:	dd03      	ble.n	800b78e <__multiply+0x6c>
 800b786:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d05d      	beq.n	800b84a <__multiply+0x128>
 800b78e:	6106      	str	r6, [r0, #16]
 800b790:	b003      	add	sp, #12
 800b792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b796:	f843 2b04 	str.w	r2, [r3], #4
 800b79a:	e7e3      	b.n	800b764 <__multiply+0x42>
 800b79c:	f8b2 b000 	ldrh.w	fp, [r2]
 800b7a0:	f1bb 0f00 	cmp.w	fp, #0
 800b7a4:	d023      	beq.n	800b7ee <__multiply+0xcc>
 800b7a6:	4689      	mov	r9, r1
 800b7a8:	46ac      	mov	ip, r5
 800b7aa:	f04f 0800 	mov.w	r8, #0
 800b7ae:	f859 4b04 	ldr.w	r4, [r9], #4
 800b7b2:	f8dc a000 	ldr.w	sl, [ip]
 800b7b6:	b2a3      	uxth	r3, r4
 800b7b8:	fa1f fa8a 	uxth.w	sl, sl
 800b7bc:	fb0b a303 	mla	r3, fp, r3, sl
 800b7c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b7c4:	f8dc 4000 	ldr.w	r4, [ip]
 800b7c8:	4443      	add	r3, r8
 800b7ca:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b7ce:	fb0b 840a 	mla	r4, fp, sl, r8
 800b7d2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b7d6:	46e2      	mov	sl, ip
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b7de:	454f      	cmp	r7, r9
 800b7e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b7e4:	f84a 3b04 	str.w	r3, [sl], #4
 800b7e8:	d82b      	bhi.n	800b842 <__multiply+0x120>
 800b7ea:	f8cc 8004 	str.w	r8, [ip, #4]
 800b7ee:	9b01      	ldr	r3, [sp, #4]
 800b7f0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b7f4:	3204      	adds	r2, #4
 800b7f6:	f1ba 0f00 	cmp.w	sl, #0
 800b7fa:	d020      	beq.n	800b83e <__multiply+0x11c>
 800b7fc:	682b      	ldr	r3, [r5, #0]
 800b7fe:	4689      	mov	r9, r1
 800b800:	46a8      	mov	r8, r5
 800b802:	f04f 0b00 	mov.w	fp, #0
 800b806:	f8b9 c000 	ldrh.w	ip, [r9]
 800b80a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b80e:	fb0a 440c 	mla	r4, sl, ip, r4
 800b812:	445c      	add	r4, fp
 800b814:	46c4      	mov	ip, r8
 800b816:	b29b      	uxth	r3, r3
 800b818:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b81c:	f84c 3b04 	str.w	r3, [ip], #4
 800b820:	f859 3b04 	ldr.w	r3, [r9], #4
 800b824:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b828:	0c1b      	lsrs	r3, r3, #16
 800b82a:	fb0a b303 	mla	r3, sl, r3, fp
 800b82e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b832:	454f      	cmp	r7, r9
 800b834:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b838:	d805      	bhi.n	800b846 <__multiply+0x124>
 800b83a:	f8c8 3004 	str.w	r3, [r8, #4]
 800b83e:	3504      	adds	r5, #4
 800b840:	e79b      	b.n	800b77a <__multiply+0x58>
 800b842:	46d4      	mov	ip, sl
 800b844:	e7b3      	b.n	800b7ae <__multiply+0x8c>
 800b846:	46e0      	mov	r8, ip
 800b848:	e7dd      	b.n	800b806 <__multiply+0xe4>
 800b84a:	3e01      	subs	r6, #1
 800b84c:	e799      	b.n	800b782 <__multiply+0x60>
	...

0800b850 <__pow5mult>:
 800b850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b854:	4615      	mov	r5, r2
 800b856:	f012 0203 	ands.w	r2, r2, #3
 800b85a:	4606      	mov	r6, r0
 800b85c:	460f      	mov	r7, r1
 800b85e:	d007      	beq.n	800b870 <__pow5mult+0x20>
 800b860:	3a01      	subs	r2, #1
 800b862:	4c21      	ldr	r4, [pc, #132]	; (800b8e8 <__pow5mult+0x98>)
 800b864:	2300      	movs	r3, #0
 800b866:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b86a:	f7ff fec8 	bl	800b5fe <__multadd>
 800b86e:	4607      	mov	r7, r0
 800b870:	10ad      	asrs	r5, r5, #2
 800b872:	d035      	beq.n	800b8e0 <__pow5mult+0x90>
 800b874:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b876:	b93c      	cbnz	r4, 800b888 <__pow5mult+0x38>
 800b878:	2010      	movs	r0, #16
 800b87a:	f7fe fab5 	bl	8009de8 <malloc>
 800b87e:	6270      	str	r0, [r6, #36]	; 0x24
 800b880:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b884:	6004      	str	r4, [r0, #0]
 800b886:	60c4      	str	r4, [r0, #12]
 800b888:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b88c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b890:	b94c      	cbnz	r4, 800b8a6 <__pow5mult+0x56>
 800b892:	f240 2171 	movw	r1, #625	; 0x271
 800b896:	4630      	mov	r0, r6
 800b898:	f7ff ff3a 	bl	800b710 <__i2b>
 800b89c:	2300      	movs	r3, #0
 800b89e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b8a2:	4604      	mov	r4, r0
 800b8a4:	6003      	str	r3, [r0, #0]
 800b8a6:	f04f 0800 	mov.w	r8, #0
 800b8aa:	07eb      	lsls	r3, r5, #31
 800b8ac:	d50a      	bpl.n	800b8c4 <__pow5mult+0x74>
 800b8ae:	4639      	mov	r1, r7
 800b8b0:	4622      	mov	r2, r4
 800b8b2:	4630      	mov	r0, r6
 800b8b4:	f7ff ff35 	bl	800b722 <__multiply>
 800b8b8:	4639      	mov	r1, r7
 800b8ba:	4681      	mov	r9, r0
 800b8bc:	4630      	mov	r0, r6
 800b8be:	f7ff fe87 	bl	800b5d0 <_Bfree>
 800b8c2:	464f      	mov	r7, r9
 800b8c4:	106d      	asrs	r5, r5, #1
 800b8c6:	d00b      	beq.n	800b8e0 <__pow5mult+0x90>
 800b8c8:	6820      	ldr	r0, [r4, #0]
 800b8ca:	b938      	cbnz	r0, 800b8dc <__pow5mult+0x8c>
 800b8cc:	4622      	mov	r2, r4
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	f7ff ff26 	bl	800b722 <__multiply>
 800b8d6:	6020      	str	r0, [r4, #0]
 800b8d8:	f8c0 8000 	str.w	r8, [r0]
 800b8dc:	4604      	mov	r4, r0
 800b8de:	e7e4      	b.n	800b8aa <__pow5mult+0x5a>
 800b8e0:	4638      	mov	r0, r7
 800b8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8e6:	bf00      	nop
 800b8e8:	0800c170 	.word	0x0800c170

0800b8ec <__lshift>:
 800b8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8f0:	460c      	mov	r4, r1
 800b8f2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b8f6:	6923      	ldr	r3, [r4, #16]
 800b8f8:	6849      	ldr	r1, [r1, #4]
 800b8fa:	eb0a 0903 	add.w	r9, sl, r3
 800b8fe:	68a3      	ldr	r3, [r4, #8]
 800b900:	4607      	mov	r7, r0
 800b902:	4616      	mov	r6, r2
 800b904:	f109 0501 	add.w	r5, r9, #1
 800b908:	42ab      	cmp	r3, r5
 800b90a:	db32      	blt.n	800b972 <__lshift+0x86>
 800b90c:	4638      	mov	r0, r7
 800b90e:	f7ff fe2b 	bl	800b568 <_Balloc>
 800b912:	2300      	movs	r3, #0
 800b914:	4680      	mov	r8, r0
 800b916:	f100 0114 	add.w	r1, r0, #20
 800b91a:	461a      	mov	r2, r3
 800b91c:	4553      	cmp	r3, sl
 800b91e:	db2b      	blt.n	800b978 <__lshift+0x8c>
 800b920:	6920      	ldr	r0, [r4, #16]
 800b922:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b926:	f104 0314 	add.w	r3, r4, #20
 800b92a:	f016 021f 	ands.w	r2, r6, #31
 800b92e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b932:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b936:	d025      	beq.n	800b984 <__lshift+0x98>
 800b938:	f1c2 0e20 	rsb	lr, r2, #32
 800b93c:	2000      	movs	r0, #0
 800b93e:	681e      	ldr	r6, [r3, #0]
 800b940:	468a      	mov	sl, r1
 800b942:	4096      	lsls	r6, r2
 800b944:	4330      	orrs	r0, r6
 800b946:	f84a 0b04 	str.w	r0, [sl], #4
 800b94a:	f853 0b04 	ldr.w	r0, [r3], #4
 800b94e:	459c      	cmp	ip, r3
 800b950:	fa20 f00e 	lsr.w	r0, r0, lr
 800b954:	d814      	bhi.n	800b980 <__lshift+0x94>
 800b956:	6048      	str	r0, [r1, #4]
 800b958:	b108      	cbz	r0, 800b95e <__lshift+0x72>
 800b95a:	f109 0502 	add.w	r5, r9, #2
 800b95e:	3d01      	subs	r5, #1
 800b960:	4638      	mov	r0, r7
 800b962:	f8c8 5010 	str.w	r5, [r8, #16]
 800b966:	4621      	mov	r1, r4
 800b968:	f7ff fe32 	bl	800b5d0 <_Bfree>
 800b96c:	4640      	mov	r0, r8
 800b96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b972:	3101      	adds	r1, #1
 800b974:	005b      	lsls	r3, r3, #1
 800b976:	e7c7      	b.n	800b908 <__lshift+0x1c>
 800b978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b97c:	3301      	adds	r3, #1
 800b97e:	e7cd      	b.n	800b91c <__lshift+0x30>
 800b980:	4651      	mov	r1, sl
 800b982:	e7dc      	b.n	800b93e <__lshift+0x52>
 800b984:	3904      	subs	r1, #4
 800b986:	f853 2b04 	ldr.w	r2, [r3], #4
 800b98a:	f841 2f04 	str.w	r2, [r1, #4]!
 800b98e:	459c      	cmp	ip, r3
 800b990:	d8f9      	bhi.n	800b986 <__lshift+0x9a>
 800b992:	e7e4      	b.n	800b95e <__lshift+0x72>

0800b994 <__mcmp>:
 800b994:	6903      	ldr	r3, [r0, #16]
 800b996:	690a      	ldr	r2, [r1, #16]
 800b998:	1a9b      	subs	r3, r3, r2
 800b99a:	b530      	push	{r4, r5, lr}
 800b99c:	d10c      	bne.n	800b9b8 <__mcmp+0x24>
 800b99e:	0092      	lsls	r2, r2, #2
 800b9a0:	3014      	adds	r0, #20
 800b9a2:	3114      	adds	r1, #20
 800b9a4:	1884      	adds	r4, r0, r2
 800b9a6:	4411      	add	r1, r2
 800b9a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b9ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b9b0:	4295      	cmp	r5, r2
 800b9b2:	d003      	beq.n	800b9bc <__mcmp+0x28>
 800b9b4:	d305      	bcc.n	800b9c2 <__mcmp+0x2e>
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	bd30      	pop	{r4, r5, pc}
 800b9bc:	42a0      	cmp	r0, r4
 800b9be:	d3f3      	bcc.n	800b9a8 <__mcmp+0x14>
 800b9c0:	e7fa      	b.n	800b9b8 <__mcmp+0x24>
 800b9c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c6:	e7f7      	b.n	800b9b8 <__mcmp+0x24>

0800b9c8 <__mdiff>:
 800b9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9cc:	460d      	mov	r5, r1
 800b9ce:	4607      	mov	r7, r0
 800b9d0:	4611      	mov	r1, r2
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	4614      	mov	r4, r2
 800b9d6:	f7ff ffdd 	bl	800b994 <__mcmp>
 800b9da:	1e06      	subs	r6, r0, #0
 800b9dc:	d108      	bne.n	800b9f0 <__mdiff+0x28>
 800b9de:	4631      	mov	r1, r6
 800b9e0:	4638      	mov	r0, r7
 800b9e2:	f7ff fdc1 	bl	800b568 <_Balloc>
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b9ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9f0:	bfa4      	itt	ge
 800b9f2:	4623      	movge	r3, r4
 800b9f4:	462c      	movge	r4, r5
 800b9f6:	4638      	mov	r0, r7
 800b9f8:	6861      	ldr	r1, [r4, #4]
 800b9fa:	bfa6      	itte	ge
 800b9fc:	461d      	movge	r5, r3
 800b9fe:	2600      	movge	r6, #0
 800ba00:	2601      	movlt	r6, #1
 800ba02:	f7ff fdb1 	bl	800b568 <_Balloc>
 800ba06:	692b      	ldr	r3, [r5, #16]
 800ba08:	60c6      	str	r6, [r0, #12]
 800ba0a:	6926      	ldr	r6, [r4, #16]
 800ba0c:	f105 0914 	add.w	r9, r5, #20
 800ba10:	f104 0214 	add.w	r2, r4, #20
 800ba14:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ba18:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ba1c:	f100 0514 	add.w	r5, r0, #20
 800ba20:	f04f 0e00 	mov.w	lr, #0
 800ba24:	f852 ab04 	ldr.w	sl, [r2], #4
 800ba28:	f859 4b04 	ldr.w	r4, [r9], #4
 800ba2c:	fa1e f18a 	uxtah	r1, lr, sl
 800ba30:	b2a3      	uxth	r3, r4
 800ba32:	1ac9      	subs	r1, r1, r3
 800ba34:	0c23      	lsrs	r3, r4, #16
 800ba36:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ba3a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ba3e:	b289      	uxth	r1, r1
 800ba40:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ba44:	45c8      	cmp	r8, r9
 800ba46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ba4a:	4694      	mov	ip, r2
 800ba4c:	f845 3b04 	str.w	r3, [r5], #4
 800ba50:	d8e8      	bhi.n	800ba24 <__mdiff+0x5c>
 800ba52:	45bc      	cmp	ip, r7
 800ba54:	d304      	bcc.n	800ba60 <__mdiff+0x98>
 800ba56:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ba5a:	b183      	cbz	r3, 800ba7e <__mdiff+0xb6>
 800ba5c:	6106      	str	r6, [r0, #16]
 800ba5e:	e7c5      	b.n	800b9ec <__mdiff+0x24>
 800ba60:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ba64:	fa1e f381 	uxtah	r3, lr, r1
 800ba68:	141a      	asrs	r2, r3, #16
 800ba6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba74:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ba78:	f845 3b04 	str.w	r3, [r5], #4
 800ba7c:	e7e9      	b.n	800ba52 <__mdiff+0x8a>
 800ba7e:	3e01      	subs	r6, #1
 800ba80:	e7e9      	b.n	800ba56 <__mdiff+0x8e>

0800ba82 <__d2b>:
 800ba82:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba86:	460e      	mov	r6, r1
 800ba88:	2101      	movs	r1, #1
 800ba8a:	ec59 8b10 	vmov	r8, r9, d0
 800ba8e:	4615      	mov	r5, r2
 800ba90:	f7ff fd6a 	bl	800b568 <_Balloc>
 800ba94:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ba98:	4607      	mov	r7, r0
 800ba9a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba9e:	bb34      	cbnz	r4, 800baee <__d2b+0x6c>
 800baa0:	9301      	str	r3, [sp, #4]
 800baa2:	f1b8 0300 	subs.w	r3, r8, #0
 800baa6:	d027      	beq.n	800baf8 <__d2b+0x76>
 800baa8:	a802      	add	r0, sp, #8
 800baaa:	f840 3d08 	str.w	r3, [r0, #-8]!
 800baae:	f7ff fe00 	bl	800b6b2 <__lo0bits>
 800bab2:	9900      	ldr	r1, [sp, #0]
 800bab4:	b1f0      	cbz	r0, 800baf4 <__d2b+0x72>
 800bab6:	9a01      	ldr	r2, [sp, #4]
 800bab8:	f1c0 0320 	rsb	r3, r0, #32
 800babc:	fa02 f303 	lsl.w	r3, r2, r3
 800bac0:	430b      	orrs	r3, r1
 800bac2:	40c2      	lsrs	r2, r0
 800bac4:	617b      	str	r3, [r7, #20]
 800bac6:	9201      	str	r2, [sp, #4]
 800bac8:	9b01      	ldr	r3, [sp, #4]
 800baca:	61bb      	str	r3, [r7, #24]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	bf14      	ite	ne
 800bad0:	2102      	movne	r1, #2
 800bad2:	2101      	moveq	r1, #1
 800bad4:	6139      	str	r1, [r7, #16]
 800bad6:	b1c4      	cbz	r4, 800bb0a <__d2b+0x88>
 800bad8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800badc:	4404      	add	r4, r0
 800bade:	6034      	str	r4, [r6, #0]
 800bae0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bae4:	6028      	str	r0, [r5, #0]
 800bae6:	4638      	mov	r0, r7
 800bae8:	b003      	add	sp, #12
 800baea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800baf2:	e7d5      	b.n	800baa0 <__d2b+0x1e>
 800baf4:	6179      	str	r1, [r7, #20]
 800baf6:	e7e7      	b.n	800bac8 <__d2b+0x46>
 800baf8:	a801      	add	r0, sp, #4
 800bafa:	f7ff fdda 	bl	800b6b2 <__lo0bits>
 800bafe:	9b01      	ldr	r3, [sp, #4]
 800bb00:	617b      	str	r3, [r7, #20]
 800bb02:	2101      	movs	r1, #1
 800bb04:	6139      	str	r1, [r7, #16]
 800bb06:	3020      	adds	r0, #32
 800bb08:	e7e5      	b.n	800bad6 <__d2b+0x54>
 800bb0a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bb0e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bb12:	6030      	str	r0, [r6, #0]
 800bb14:	6918      	ldr	r0, [r3, #16]
 800bb16:	f7ff fdad 	bl	800b674 <__hi0bits>
 800bb1a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bb1e:	e7e1      	b.n	800bae4 <__d2b+0x62>

0800bb20 <_calloc_r>:
 800bb20:	b538      	push	{r3, r4, r5, lr}
 800bb22:	fb02 f401 	mul.w	r4, r2, r1
 800bb26:	4621      	mov	r1, r4
 800bb28:	f7fe f9d0 	bl	8009ecc <_malloc_r>
 800bb2c:	4605      	mov	r5, r0
 800bb2e:	b118      	cbz	r0, 800bb38 <_calloc_r+0x18>
 800bb30:	4622      	mov	r2, r4
 800bb32:	2100      	movs	r1, #0
 800bb34:	f7fe f973 	bl	8009e1e <memset>
 800bb38:	4628      	mov	r0, r5
 800bb3a:	bd38      	pop	{r3, r4, r5, pc}

0800bb3c <__ssputs_r>:
 800bb3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb40:	688e      	ldr	r6, [r1, #8]
 800bb42:	429e      	cmp	r6, r3
 800bb44:	4682      	mov	sl, r0
 800bb46:	460c      	mov	r4, r1
 800bb48:	4690      	mov	r8, r2
 800bb4a:	4699      	mov	r9, r3
 800bb4c:	d837      	bhi.n	800bbbe <__ssputs_r+0x82>
 800bb4e:	898a      	ldrh	r2, [r1, #12]
 800bb50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb54:	d031      	beq.n	800bbba <__ssputs_r+0x7e>
 800bb56:	6825      	ldr	r5, [r4, #0]
 800bb58:	6909      	ldr	r1, [r1, #16]
 800bb5a:	1a6f      	subs	r7, r5, r1
 800bb5c:	6965      	ldr	r5, [r4, #20]
 800bb5e:	2302      	movs	r3, #2
 800bb60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb64:	fb95 f5f3 	sdiv	r5, r5, r3
 800bb68:	f109 0301 	add.w	r3, r9, #1
 800bb6c:	443b      	add	r3, r7
 800bb6e:	429d      	cmp	r5, r3
 800bb70:	bf38      	it	cc
 800bb72:	461d      	movcc	r5, r3
 800bb74:	0553      	lsls	r3, r2, #21
 800bb76:	d530      	bpl.n	800bbda <__ssputs_r+0x9e>
 800bb78:	4629      	mov	r1, r5
 800bb7a:	f7fe f9a7 	bl	8009ecc <_malloc_r>
 800bb7e:	4606      	mov	r6, r0
 800bb80:	b950      	cbnz	r0, 800bb98 <__ssputs_r+0x5c>
 800bb82:	230c      	movs	r3, #12
 800bb84:	f8ca 3000 	str.w	r3, [sl]
 800bb88:	89a3      	ldrh	r3, [r4, #12]
 800bb8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb8e:	81a3      	strh	r3, [r4, #12]
 800bb90:	f04f 30ff 	mov.w	r0, #4294967295
 800bb94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb98:	463a      	mov	r2, r7
 800bb9a:	6921      	ldr	r1, [r4, #16]
 800bb9c:	f7fe f934 	bl	8009e08 <memcpy>
 800bba0:	89a3      	ldrh	r3, [r4, #12]
 800bba2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbaa:	81a3      	strh	r3, [r4, #12]
 800bbac:	6126      	str	r6, [r4, #16]
 800bbae:	6165      	str	r5, [r4, #20]
 800bbb0:	443e      	add	r6, r7
 800bbb2:	1bed      	subs	r5, r5, r7
 800bbb4:	6026      	str	r6, [r4, #0]
 800bbb6:	60a5      	str	r5, [r4, #8]
 800bbb8:	464e      	mov	r6, r9
 800bbba:	454e      	cmp	r6, r9
 800bbbc:	d900      	bls.n	800bbc0 <__ssputs_r+0x84>
 800bbbe:	464e      	mov	r6, r9
 800bbc0:	4632      	mov	r2, r6
 800bbc2:	4641      	mov	r1, r8
 800bbc4:	6820      	ldr	r0, [r4, #0]
 800bbc6:	f000 f91d 	bl	800be04 <memmove>
 800bbca:	68a3      	ldr	r3, [r4, #8]
 800bbcc:	1b9b      	subs	r3, r3, r6
 800bbce:	60a3      	str	r3, [r4, #8]
 800bbd0:	6823      	ldr	r3, [r4, #0]
 800bbd2:	441e      	add	r6, r3
 800bbd4:	6026      	str	r6, [r4, #0]
 800bbd6:	2000      	movs	r0, #0
 800bbd8:	e7dc      	b.n	800bb94 <__ssputs_r+0x58>
 800bbda:	462a      	mov	r2, r5
 800bbdc:	f000 f92b 	bl	800be36 <_realloc_r>
 800bbe0:	4606      	mov	r6, r0
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	d1e2      	bne.n	800bbac <__ssputs_r+0x70>
 800bbe6:	6921      	ldr	r1, [r4, #16]
 800bbe8:	4650      	mov	r0, sl
 800bbea:	f7fe f921 	bl	8009e30 <_free_r>
 800bbee:	e7c8      	b.n	800bb82 <__ssputs_r+0x46>

0800bbf0 <_svfiprintf_r>:
 800bbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf4:	461d      	mov	r5, r3
 800bbf6:	898b      	ldrh	r3, [r1, #12]
 800bbf8:	061f      	lsls	r7, r3, #24
 800bbfa:	b09d      	sub	sp, #116	; 0x74
 800bbfc:	4680      	mov	r8, r0
 800bbfe:	460c      	mov	r4, r1
 800bc00:	4616      	mov	r6, r2
 800bc02:	d50f      	bpl.n	800bc24 <_svfiprintf_r+0x34>
 800bc04:	690b      	ldr	r3, [r1, #16]
 800bc06:	b96b      	cbnz	r3, 800bc24 <_svfiprintf_r+0x34>
 800bc08:	2140      	movs	r1, #64	; 0x40
 800bc0a:	f7fe f95f 	bl	8009ecc <_malloc_r>
 800bc0e:	6020      	str	r0, [r4, #0]
 800bc10:	6120      	str	r0, [r4, #16]
 800bc12:	b928      	cbnz	r0, 800bc20 <_svfiprintf_r+0x30>
 800bc14:	230c      	movs	r3, #12
 800bc16:	f8c8 3000 	str.w	r3, [r8]
 800bc1a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc1e:	e0c8      	b.n	800bdb2 <_svfiprintf_r+0x1c2>
 800bc20:	2340      	movs	r3, #64	; 0x40
 800bc22:	6163      	str	r3, [r4, #20]
 800bc24:	2300      	movs	r3, #0
 800bc26:	9309      	str	r3, [sp, #36]	; 0x24
 800bc28:	2320      	movs	r3, #32
 800bc2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc2e:	2330      	movs	r3, #48	; 0x30
 800bc30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc34:	9503      	str	r5, [sp, #12]
 800bc36:	f04f 0b01 	mov.w	fp, #1
 800bc3a:	4637      	mov	r7, r6
 800bc3c:	463d      	mov	r5, r7
 800bc3e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bc42:	b10b      	cbz	r3, 800bc48 <_svfiprintf_r+0x58>
 800bc44:	2b25      	cmp	r3, #37	; 0x25
 800bc46:	d13e      	bne.n	800bcc6 <_svfiprintf_r+0xd6>
 800bc48:	ebb7 0a06 	subs.w	sl, r7, r6
 800bc4c:	d00b      	beq.n	800bc66 <_svfiprintf_r+0x76>
 800bc4e:	4653      	mov	r3, sl
 800bc50:	4632      	mov	r2, r6
 800bc52:	4621      	mov	r1, r4
 800bc54:	4640      	mov	r0, r8
 800bc56:	f7ff ff71 	bl	800bb3c <__ssputs_r>
 800bc5a:	3001      	adds	r0, #1
 800bc5c:	f000 80a4 	beq.w	800bda8 <_svfiprintf_r+0x1b8>
 800bc60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc62:	4453      	add	r3, sl
 800bc64:	9309      	str	r3, [sp, #36]	; 0x24
 800bc66:	783b      	ldrb	r3, [r7, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	f000 809d 	beq.w	800bda8 <_svfiprintf_r+0x1b8>
 800bc6e:	2300      	movs	r3, #0
 800bc70:	f04f 32ff 	mov.w	r2, #4294967295
 800bc74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc78:	9304      	str	r3, [sp, #16]
 800bc7a:	9307      	str	r3, [sp, #28]
 800bc7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc80:	931a      	str	r3, [sp, #104]	; 0x68
 800bc82:	462f      	mov	r7, r5
 800bc84:	2205      	movs	r2, #5
 800bc86:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bc8a:	4850      	ldr	r0, [pc, #320]	; (800bdcc <_svfiprintf_r+0x1dc>)
 800bc8c:	f7f4 fab0 	bl	80001f0 <memchr>
 800bc90:	9b04      	ldr	r3, [sp, #16]
 800bc92:	b9d0      	cbnz	r0, 800bcca <_svfiprintf_r+0xda>
 800bc94:	06d9      	lsls	r1, r3, #27
 800bc96:	bf44      	itt	mi
 800bc98:	2220      	movmi	r2, #32
 800bc9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bc9e:	071a      	lsls	r2, r3, #28
 800bca0:	bf44      	itt	mi
 800bca2:	222b      	movmi	r2, #43	; 0x2b
 800bca4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bca8:	782a      	ldrb	r2, [r5, #0]
 800bcaa:	2a2a      	cmp	r2, #42	; 0x2a
 800bcac:	d015      	beq.n	800bcda <_svfiprintf_r+0xea>
 800bcae:	9a07      	ldr	r2, [sp, #28]
 800bcb0:	462f      	mov	r7, r5
 800bcb2:	2000      	movs	r0, #0
 800bcb4:	250a      	movs	r5, #10
 800bcb6:	4639      	mov	r1, r7
 800bcb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcbc:	3b30      	subs	r3, #48	; 0x30
 800bcbe:	2b09      	cmp	r3, #9
 800bcc0:	d94d      	bls.n	800bd5e <_svfiprintf_r+0x16e>
 800bcc2:	b1b8      	cbz	r0, 800bcf4 <_svfiprintf_r+0x104>
 800bcc4:	e00f      	b.n	800bce6 <_svfiprintf_r+0xf6>
 800bcc6:	462f      	mov	r7, r5
 800bcc8:	e7b8      	b.n	800bc3c <_svfiprintf_r+0x4c>
 800bcca:	4a40      	ldr	r2, [pc, #256]	; (800bdcc <_svfiprintf_r+0x1dc>)
 800bccc:	1a80      	subs	r0, r0, r2
 800bcce:	fa0b f000 	lsl.w	r0, fp, r0
 800bcd2:	4318      	orrs	r0, r3
 800bcd4:	9004      	str	r0, [sp, #16]
 800bcd6:	463d      	mov	r5, r7
 800bcd8:	e7d3      	b.n	800bc82 <_svfiprintf_r+0x92>
 800bcda:	9a03      	ldr	r2, [sp, #12]
 800bcdc:	1d11      	adds	r1, r2, #4
 800bcde:	6812      	ldr	r2, [r2, #0]
 800bce0:	9103      	str	r1, [sp, #12]
 800bce2:	2a00      	cmp	r2, #0
 800bce4:	db01      	blt.n	800bcea <_svfiprintf_r+0xfa>
 800bce6:	9207      	str	r2, [sp, #28]
 800bce8:	e004      	b.n	800bcf4 <_svfiprintf_r+0x104>
 800bcea:	4252      	negs	r2, r2
 800bcec:	f043 0302 	orr.w	r3, r3, #2
 800bcf0:	9207      	str	r2, [sp, #28]
 800bcf2:	9304      	str	r3, [sp, #16]
 800bcf4:	783b      	ldrb	r3, [r7, #0]
 800bcf6:	2b2e      	cmp	r3, #46	; 0x2e
 800bcf8:	d10c      	bne.n	800bd14 <_svfiprintf_r+0x124>
 800bcfa:	787b      	ldrb	r3, [r7, #1]
 800bcfc:	2b2a      	cmp	r3, #42	; 0x2a
 800bcfe:	d133      	bne.n	800bd68 <_svfiprintf_r+0x178>
 800bd00:	9b03      	ldr	r3, [sp, #12]
 800bd02:	1d1a      	adds	r2, r3, #4
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	9203      	str	r2, [sp, #12]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	bfb8      	it	lt
 800bd0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd10:	3702      	adds	r7, #2
 800bd12:	9305      	str	r3, [sp, #20]
 800bd14:	4d2e      	ldr	r5, [pc, #184]	; (800bdd0 <_svfiprintf_r+0x1e0>)
 800bd16:	7839      	ldrb	r1, [r7, #0]
 800bd18:	2203      	movs	r2, #3
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	f7f4 fa68 	bl	80001f0 <memchr>
 800bd20:	b138      	cbz	r0, 800bd32 <_svfiprintf_r+0x142>
 800bd22:	2340      	movs	r3, #64	; 0x40
 800bd24:	1b40      	subs	r0, r0, r5
 800bd26:	fa03 f000 	lsl.w	r0, r3, r0
 800bd2a:	9b04      	ldr	r3, [sp, #16]
 800bd2c:	4303      	orrs	r3, r0
 800bd2e:	3701      	adds	r7, #1
 800bd30:	9304      	str	r3, [sp, #16]
 800bd32:	7839      	ldrb	r1, [r7, #0]
 800bd34:	4827      	ldr	r0, [pc, #156]	; (800bdd4 <_svfiprintf_r+0x1e4>)
 800bd36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd3a:	2206      	movs	r2, #6
 800bd3c:	1c7e      	adds	r6, r7, #1
 800bd3e:	f7f4 fa57 	bl	80001f0 <memchr>
 800bd42:	2800      	cmp	r0, #0
 800bd44:	d038      	beq.n	800bdb8 <_svfiprintf_r+0x1c8>
 800bd46:	4b24      	ldr	r3, [pc, #144]	; (800bdd8 <_svfiprintf_r+0x1e8>)
 800bd48:	bb13      	cbnz	r3, 800bd90 <_svfiprintf_r+0x1a0>
 800bd4a:	9b03      	ldr	r3, [sp, #12]
 800bd4c:	3307      	adds	r3, #7
 800bd4e:	f023 0307 	bic.w	r3, r3, #7
 800bd52:	3308      	adds	r3, #8
 800bd54:	9303      	str	r3, [sp, #12]
 800bd56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd58:	444b      	add	r3, r9
 800bd5a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd5c:	e76d      	b.n	800bc3a <_svfiprintf_r+0x4a>
 800bd5e:	fb05 3202 	mla	r2, r5, r2, r3
 800bd62:	2001      	movs	r0, #1
 800bd64:	460f      	mov	r7, r1
 800bd66:	e7a6      	b.n	800bcb6 <_svfiprintf_r+0xc6>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	3701      	adds	r7, #1
 800bd6c:	9305      	str	r3, [sp, #20]
 800bd6e:	4619      	mov	r1, r3
 800bd70:	250a      	movs	r5, #10
 800bd72:	4638      	mov	r0, r7
 800bd74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd78:	3a30      	subs	r2, #48	; 0x30
 800bd7a:	2a09      	cmp	r2, #9
 800bd7c:	d903      	bls.n	800bd86 <_svfiprintf_r+0x196>
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d0c8      	beq.n	800bd14 <_svfiprintf_r+0x124>
 800bd82:	9105      	str	r1, [sp, #20]
 800bd84:	e7c6      	b.n	800bd14 <_svfiprintf_r+0x124>
 800bd86:	fb05 2101 	mla	r1, r5, r1, r2
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	4607      	mov	r7, r0
 800bd8e:	e7f0      	b.n	800bd72 <_svfiprintf_r+0x182>
 800bd90:	ab03      	add	r3, sp, #12
 800bd92:	9300      	str	r3, [sp, #0]
 800bd94:	4622      	mov	r2, r4
 800bd96:	4b11      	ldr	r3, [pc, #68]	; (800bddc <_svfiprintf_r+0x1ec>)
 800bd98:	a904      	add	r1, sp, #16
 800bd9a:	4640      	mov	r0, r8
 800bd9c:	f7fe f984 	bl	800a0a8 <_printf_float>
 800bda0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bda4:	4681      	mov	r9, r0
 800bda6:	d1d6      	bne.n	800bd56 <_svfiprintf_r+0x166>
 800bda8:	89a3      	ldrh	r3, [r4, #12]
 800bdaa:	065b      	lsls	r3, r3, #25
 800bdac:	f53f af35 	bmi.w	800bc1a <_svfiprintf_r+0x2a>
 800bdb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdb2:	b01d      	add	sp, #116	; 0x74
 800bdb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb8:	ab03      	add	r3, sp, #12
 800bdba:	9300      	str	r3, [sp, #0]
 800bdbc:	4622      	mov	r2, r4
 800bdbe:	4b07      	ldr	r3, [pc, #28]	; (800bddc <_svfiprintf_r+0x1ec>)
 800bdc0:	a904      	add	r1, sp, #16
 800bdc2:	4640      	mov	r0, r8
 800bdc4:	f7fe fc26 	bl	800a614 <_printf_i>
 800bdc8:	e7ea      	b.n	800bda0 <_svfiprintf_r+0x1b0>
 800bdca:	bf00      	nop
 800bdcc:	0800c17c 	.word	0x0800c17c
 800bdd0:	0800c182 	.word	0x0800c182
 800bdd4:	0800c186 	.word	0x0800c186
 800bdd8:	0800a0a9 	.word	0x0800a0a9
 800bddc:	0800bb3d 	.word	0x0800bb3d

0800bde0 <__ascii_mbtowc>:
 800bde0:	b082      	sub	sp, #8
 800bde2:	b901      	cbnz	r1, 800bde6 <__ascii_mbtowc+0x6>
 800bde4:	a901      	add	r1, sp, #4
 800bde6:	b142      	cbz	r2, 800bdfa <__ascii_mbtowc+0x1a>
 800bde8:	b14b      	cbz	r3, 800bdfe <__ascii_mbtowc+0x1e>
 800bdea:	7813      	ldrb	r3, [r2, #0]
 800bdec:	600b      	str	r3, [r1, #0]
 800bdee:	7812      	ldrb	r2, [r2, #0]
 800bdf0:	1c10      	adds	r0, r2, #0
 800bdf2:	bf18      	it	ne
 800bdf4:	2001      	movne	r0, #1
 800bdf6:	b002      	add	sp, #8
 800bdf8:	4770      	bx	lr
 800bdfa:	4610      	mov	r0, r2
 800bdfc:	e7fb      	b.n	800bdf6 <__ascii_mbtowc+0x16>
 800bdfe:	f06f 0001 	mvn.w	r0, #1
 800be02:	e7f8      	b.n	800bdf6 <__ascii_mbtowc+0x16>

0800be04 <memmove>:
 800be04:	4288      	cmp	r0, r1
 800be06:	b510      	push	{r4, lr}
 800be08:	eb01 0302 	add.w	r3, r1, r2
 800be0c:	d807      	bhi.n	800be1e <memmove+0x1a>
 800be0e:	1e42      	subs	r2, r0, #1
 800be10:	4299      	cmp	r1, r3
 800be12:	d00a      	beq.n	800be2a <memmove+0x26>
 800be14:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be18:	f802 4f01 	strb.w	r4, [r2, #1]!
 800be1c:	e7f8      	b.n	800be10 <memmove+0xc>
 800be1e:	4283      	cmp	r3, r0
 800be20:	d9f5      	bls.n	800be0e <memmove+0xa>
 800be22:	1881      	adds	r1, r0, r2
 800be24:	1ad2      	subs	r2, r2, r3
 800be26:	42d3      	cmn	r3, r2
 800be28:	d100      	bne.n	800be2c <memmove+0x28>
 800be2a:	bd10      	pop	{r4, pc}
 800be2c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be30:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800be34:	e7f7      	b.n	800be26 <memmove+0x22>

0800be36 <_realloc_r>:
 800be36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be38:	4607      	mov	r7, r0
 800be3a:	4614      	mov	r4, r2
 800be3c:	460e      	mov	r6, r1
 800be3e:	b921      	cbnz	r1, 800be4a <_realloc_r+0x14>
 800be40:	4611      	mov	r1, r2
 800be42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800be46:	f7fe b841 	b.w	8009ecc <_malloc_r>
 800be4a:	b922      	cbnz	r2, 800be56 <_realloc_r+0x20>
 800be4c:	f7fd fff0 	bl	8009e30 <_free_r>
 800be50:	4625      	mov	r5, r4
 800be52:	4628      	mov	r0, r5
 800be54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be56:	f000 f821 	bl	800be9c <_malloc_usable_size_r>
 800be5a:	42a0      	cmp	r0, r4
 800be5c:	d20f      	bcs.n	800be7e <_realloc_r+0x48>
 800be5e:	4621      	mov	r1, r4
 800be60:	4638      	mov	r0, r7
 800be62:	f7fe f833 	bl	8009ecc <_malloc_r>
 800be66:	4605      	mov	r5, r0
 800be68:	2800      	cmp	r0, #0
 800be6a:	d0f2      	beq.n	800be52 <_realloc_r+0x1c>
 800be6c:	4631      	mov	r1, r6
 800be6e:	4622      	mov	r2, r4
 800be70:	f7fd ffca 	bl	8009e08 <memcpy>
 800be74:	4631      	mov	r1, r6
 800be76:	4638      	mov	r0, r7
 800be78:	f7fd ffda 	bl	8009e30 <_free_r>
 800be7c:	e7e9      	b.n	800be52 <_realloc_r+0x1c>
 800be7e:	4635      	mov	r5, r6
 800be80:	e7e7      	b.n	800be52 <_realloc_r+0x1c>

0800be82 <__ascii_wctomb>:
 800be82:	b149      	cbz	r1, 800be98 <__ascii_wctomb+0x16>
 800be84:	2aff      	cmp	r2, #255	; 0xff
 800be86:	bf85      	ittet	hi
 800be88:	238a      	movhi	r3, #138	; 0x8a
 800be8a:	6003      	strhi	r3, [r0, #0]
 800be8c:	700a      	strbls	r2, [r1, #0]
 800be8e:	f04f 30ff 	movhi.w	r0, #4294967295
 800be92:	bf98      	it	ls
 800be94:	2001      	movls	r0, #1
 800be96:	4770      	bx	lr
 800be98:	4608      	mov	r0, r1
 800be9a:	4770      	bx	lr

0800be9c <_malloc_usable_size_r>:
 800be9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bea0:	1f18      	subs	r0, r3, #4
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	bfbc      	itt	lt
 800bea6:	580b      	ldrlt	r3, [r1, r0]
 800bea8:	18c0      	addlt	r0, r0, r3
 800beaa:	4770      	bx	lr

0800beac <_init>:
 800beac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beae:	bf00      	nop
 800beb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beb2:	bc08      	pop	{r3}
 800beb4:	469e      	mov	lr, r3
 800beb6:	4770      	bx	lr

0800beb8 <_fini>:
 800beb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beba:	bf00      	nop
 800bebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bebe:	bc08      	pop	{r3}
 800bec0:	469e      	mov	lr, r3
 800bec2:	4770      	bx	lr
