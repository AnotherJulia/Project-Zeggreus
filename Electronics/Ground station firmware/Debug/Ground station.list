
Ground station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080f4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800828c  0800828c  0001828c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800831c  0800831c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800831c  0800831c  0001831c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008324  08008324  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008324  08008324  00018324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008328  08008328  00018328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800832c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a80  200001ec  08008518  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c6c  08008518  00021c6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d756  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039c1  00000000  00000000  0003d972  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001848  00000000  00000000  00041338  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016c8  00000000  00000000  00042b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001aede  00000000  00000000  00044248  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014457  00000000  00000000  0005f126  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099d7d  00000000  00000000  0007357d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010d2fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006900  00000000  00000000  0010d378  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001ec 	.word	0x200001ec
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008274 	.word	0x08008274

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001f0 	.word	0x200001f0
 80001d4:	08008274 	.word	0x08008274

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	4688      	mov	r8, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14b      	bne.n	80002be <__udivmoddi4+0xa6>
 8000226:	428a      	cmp	r2, r1
 8000228:	4615      	mov	r5, r2
 800022a:	d967      	bls.n	80002fc <__udivmoddi4+0xe4>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0720 	rsb	r7, r2, #32
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	fa20 f707 	lsr.w	r7, r0, r7
 800023e:	4095      	lsls	r5, r2
 8000240:	ea47 0803 	orr.w	r8, r7, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000250:	fa1f fc85 	uxth.w	ip, r5
 8000254:	fb0e 8817 	mls	r8, lr, r7, r8
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	fb07 f10c 	mul.w	r1, r7, ip
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18eb      	adds	r3, r5, r3
 8000266:	f107 30ff 	add.w	r0, r7, #4294967295
 800026a:	f080 811b 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8118 	bls.w	80004a4 <__udivmoddi4+0x28c>
 8000274:	3f02      	subs	r7, #2
 8000276:	442b      	add	r3, r5
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000280:	fb0e 3310 	mls	r3, lr, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fc0c 	mul.w	ip, r0, ip
 800028c:	45a4      	cmp	ip, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	192c      	adds	r4, r5, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x290>
 800029a:	45a4      	cmp	ip, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x290>
 80002a0:	3802      	subs	r0, #2
 80002a2:	442c      	add	r4, r5
 80002a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a8:	eba4 040c 	sub.w	r4, r4, ip
 80002ac:	2700      	movs	r7, #0
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xbe>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80eb 	beq.w	800049e <__udivmoddi4+0x286>
 80002c8:	2700      	movs	r7, #0
 80002ca:	e9c6 0100 	strd	r0, r1, [r6]
 80002ce:	4638      	mov	r0, r7
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f783 	clz	r7, r3
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d147      	bne.n	800036e <__udivmoddi4+0x156>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd0>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fa 	bhi.w	80004dc <__udivmoddi4+0x2c4>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa0>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa0>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xe8>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 808f 	bne.w	8000428 <__udivmoddi4+0x210>
 800030a:	1b49      	subs	r1, r1, r5
 800030c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000310:	fa1f f885 	uxth.w	r8, r5
 8000314:	2701      	movs	r7, #1
 8000316:	fbb1 fcfe 	udiv	ip, r1, lr
 800031a:	0c23      	lsrs	r3, r4, #16
 800031c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb08 f10c 	mul.w	r1, r8, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x124>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4299      	cmp	r1, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033a:	4684      	mov	ip, r0
 800033c:	1a59      	subs	r1, r3, r1
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1410 	mls	r4, lr, r0, r1
 8000348:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x14c>
 8000354:	192c      	adds	r4, r5, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x14a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80b6 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e79f      	b.n	80002ae <__udivmoddi4+0x96>
 800036e:	f1c7 0c20 	rsb	ip, r7, #32
 8000372:	40bb      	lsls	r3, r7
 8000374:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000378:	ea4e 0e03 	orr.w	lr, lr, r3
 800037c:	fa01 f407 	lsl.w	r4, r1, r7
 8000380:	fa20 f50c 	lsr.w	r5, r0, ip
 8000384:	fa21 f30c 	lsr.w	r3, r1, ip
 8000388:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800038c:	4325      	orrs	r5, r4
 800038e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000392:	0c2c      	lsrs	r4, r5, #16
 8000394:	fb08 3319 	mls	r3, r8, r9, r3
 8000398:	fa1f fa8e 	uxth.w	sl, lr
 800039c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a0:	fb09 f40a 	mul.w	r4, r9, sl
 80003a4:	429c      	cmp	r4, r3
 80003a6:	fa02 f207 	lsl.w	r2, r2, r7
 80003aa:	fa00 f107 	lsl.w	r1, r0, r7
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1e 0303 	adds.w	r3, lr, r3
 80003b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a9 0902 	sub.w	r9, r9, #2
 80003c6:	4473      	add	r3, lr
 80003c8:	1b1b      	subs	r3, r3, r4
 80003ca:	b2ad      	uxth	r5, r5
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3310 	mls	r3, r8, r0, r3
 80003d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003dc:	45a2      	cmp	sl, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1e 0404 	adds.w	r4, lr, r4
 80003e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a2      	cmp	sl, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4474      	add	r4, lr
 80003f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f6:	fba0 8902 	umull	r8, r9, r0, r2
 80003fa:	eba4 040a 	sub.w	r4, r4, sl
 80003fe:	454c      	cmp	r4, r9
 8000400:	46c2      	mov	sl, r8
 8000402:	464b      	mov	r3, r9
 8000404:	d354      	bcc.n	80004b0 <__udivmoddi4+0x298>
 8000406:	d051      	beq.n	80004ac <__udivmoddi4+0x294>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2c8>
 800040c:	ebb1 050a 	subs.w	r5, r1, sl
 8000410:	eb64 0403 	sbc.w	r4, r4, r3
 8000414:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000418:	40fd      	lsrs	r5, r7
 800041a:	40fc      	lsrs	r4, r7
 800041c:	ea4c 0505 	orr.w	r5, ip, r5
 8000420:	e9c6 5400 	strd	r5, r4, [r6]
 8000424:	2700      	movs	r7, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f703 	lsr.w	r7, r0, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	fa21 f303 	lsr.w	r3, r1, r3
 800043a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043e:	4338      	orrs	r0, r7
 8000440:	0c01      	lsrs	r1, r0, #16
 8000442:	fbb3 f7fe 	udiv	r7, r3, lr
 8000446:	fa1f f885 	uxth.w	r8, r5
 800044a:	fb0e 3317 	mls	r3, lr, r7, r3
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb07 f308 	mul.w	r3, r7, r8
 8000456:	428b      	cmp	r3, r1
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x256>
 800045e:	1869      	adds	r1, r5, r1
 8000460:	f107 3cff 	add.w	ip, r7, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428b      	cmp	r3, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3f02      	subs	r7, #2
 800046c:	4429      	add	r1, r5
 800046e:	1acb      	subs	r3, r1, r3
 8000470:	b281      	uxth	r1, r0
 8000472:	fbb3 f0fe 	udiv	r0, r3, lr
 8000476:	fb0e 3310 	mls	r3, lr, r0, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb00 f308 	mul.w	r3, r0, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x27e>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f100 3cff 	add.w	ip, r0, #4294967295
 800048c:	d217      	bcs.n	80004be <__udivmoddi4+0x2a6>
 800048e:	428b      	cmp	r3, r1
 8000490:	d915      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000492:	3802      	subs	r0, #2
 8000494:	4429      	add	r1, r5
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800049c:	e73b      	b.n	8000316 <__udivmoddi4+0xfe>
 800049e:	4637      	mov	r7, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e709      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e6e7      	b.n	8000278 <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004ac:	4541      	cmp	r1, r8
 80004ae:	d2ab      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b4:	eb69 020e 	sbc.w	r2, r9, lr
 80004b8:	3801      	subs	r0, #1
 80004ba:	4613      	mov	r3, r2
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4660      	mov	r0, ip
 80004c0:	e7e9      	b.n	8000496 <__udivmoddi4+0x27e>
 80004c2:	4618      	mov	r0, r3
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4667      	mov	r7, ip
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3802      	subs	r0, #2
 80004d0:	442c      	add	r4, r5
 80004d2:	e747      	b.n	8000364 <__udivmoddi4+0x14c>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	442b      	add	r3, r5
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x124>
 80004dc:	4638      	mov	r0, r7
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xda>
 80004e0:	4637      	mov	r7, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa0>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b590      	push	{r4, r7, lr}
 80004ea:	b0a1      	sub	sp, #132	; 0x84
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 fd03 	bl	8000ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f831 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 f9db 	bl	80008b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004fa:	f000 f895 	bl	8000628 <MX_ADC1_Init>
  MX_I2C1_Init();
 80004fe:	f000 f8e5 	bl	80006cc <MX_I2C1_Init>
  MX_SPI3_Init();
 8000502:	f000 f911 	bl	8000728 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000506:	f000 f945 	bl	8000794 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800050a:	f000 f9a7 	bl	800085c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800050e:	f007 f8ab 	bl	8007668 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  //loraTesting(1);


  char printBuffer[128];
  HAL_Delay(200);
 8000512:	20c8      	movs	r0, #200	; 0xc8
 8000514:	f000 fd62 	bl	8000fdc <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    sprintf(printBuffer, "SD CARD TEST!\r\n");
 8000518:	463b      	mov	r3, r7
 800051a:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <main+0x68>)
 800051c:	461c      	mov	r4, r3
 800051e:	4613      	mov	r3, r2
 8000520:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000522:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    CDC_Transmit_FS((uint8_t*) printBuffer, strlen(printBuffer));
 8000526:	463b      	mov	r3, r7
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff fe55 	bl	80001d8 <strlen>
 800052e:	4603      	mov	r3, r0
 8000530:	b29a      	uxth	r2, r3
 8000532:	463b      	mov	r3, r7
 8000534:	4611      	mov	r1, r2
 8000536:	4618      	mov	r0, r3
 8000538:	f007 f968 	bl	800780c <CDC_Transmit_FS>
    HAL_Delay(500);
 800053c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000540:	f000 fd4c 	bl	8000fdc <HAL_Delay>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000544:	2101      	movs	r1, #1
 8000546:	4803      	ldr	r0, [pc, #12]	; (8000554 <main+0x6c>)
 8000548:	f001 fa89 	bl	8001a5e <HAL_GPIO_TogglePin>
    sprintf(printBuffer, "SD CARD TEST!\r\n");
 800054c:	e7e4      	b.n	8000518 <main+0x30>
 800054e:	bf00      	nop
 8000550:	080082ac 	.word	0x080082ac
 8000554:	40020000 	.word	0x40020000

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	; 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f007 fdc2 	bl	80080f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b27      	ldr	r3, [pc, #156]	; (8000620 <SystemClock_Config+0xc8>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a26      	ldr	r2, [pc, #152]	; (8000620 <SystemClock_Config+0xc8>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b24      	ldr	r3, [pc, #144]	; (8000620 <SystemClock_Config+0xc8>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b21      	ldr	r3, [pc, #132]	; (8000624 <SystemClock_Config+0xcc>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a20      	ldr	r2, [pc, #128]	; (8000624 <SystemClock_Config+0xcc>)
 80005a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <SystemClock_Config+0xcc>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b4:	2301      	movs	r3, #1
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c8:	2304      	movs	r3, #4
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005cc:	2348      	movs	r3, #72	; 0x48
 80005ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005d4:	2303      	movs	r3, #3
 80005d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0320 	add.w	r3, r7, #32
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 fd15 	bl	800300c <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e8:	f000 fa1c 	bl	8000a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2302      	movs	r3, #2
 80005f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	2102      	movs	r1, #2
 8000608:	4618      	mov	r0, r3
 800060a:	f002 ff6f 	bl	80034ec <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000614:	f000 fa06 	bl	8000a24 <Error_Handler>
  }
}
 8000618:	bf00      	nop
 800061a:	3750      	adds	r7, #80	; 0x50
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800062e:	463b      	mov	r3, r7
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800063a:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <MX_ADC1_Init+0x98>)
 800063c:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <MX_ADC1_Init+0x9c>)
 800063e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000642:	2200      	movs	r2, #0
 8000644:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000646:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800064c:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <MX_ADC1_Init+0x98>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000652:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_ADC1_Init+0x98>)
 800065a:	2200      	movs	r2, #0
 800065c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000660:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000668:	4a17      	ldr	r2, [pc, #92]	; (80006c8 <MX_ADC1_Init+0xa0>)
 800066a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_ADC1_Init+0x98>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000674:	2201      	movs	r2, #1
 8000676:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_ADC1_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000682:	2201      	movs	r2, #1
 8000684:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000686:	480e      	ldr	r0, [pc, #56]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000688:	f000 fcca 	bl	8001020 <HAL_ADC_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000692:	f000 f9c7 	bl	8000a24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000696:	230a      	movs	r3, #10
 8000698:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800069a:	2301      	movs	r3, #1
 800069c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a2:	463b      	mov	r3, r7
 80006a4:	4619      	mov	r1, r3
 80006a6:	4806      	ldr	r0, [pc, #24]	; (80006c0 <MX_ADC1_Init+0x98>)
 80006a8:	f000 fcfe 	bl	80010a8 <HAL_ADC_ConfigChannel>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006b2:	f000 f9b7 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200002c4 	.word	0x200002c4
 80006c4:	40012000 	.word	0x40012000
 80006c8:	0f000001 	.word	0x0f000001

080006cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_I2C1_Init+0x50>)
 80006d2:	4a13      	ldr	r2, [pc, #76]	; (8000720 <MX_I2C1_Init+0x54>)
 80006d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_I2C1_Init+0x50>)
 80006d8:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_I2C1_Init+0x58>)
 80006da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_I2C1_Init+0x50>)
 80006ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_I2C1_Init+0x50>)
 800070a:	f001 f9c3 	bl	8001a94 <HAL_I2C_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000714:	f000 f986 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000218 	.word	0x20000218
 8000720:	40005400 	.word	0x40005400
 8000724:	000186a0 	.word	0x000186a0

08000728 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_SPI3_Init+0x64>)
 800072e:	4a18      	ldr	r2, [pc, #96]	; (8000790 <MX_SPI3_Init+0x68>)
 8000730:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_SPI3_Init+0x64>)
 8000734:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000738:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_SPI3_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_SPI3_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_SPI3_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_SPI3_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_SPI3_Init+0x64>)
 8000754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000758:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_SPI3_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_SPI3_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_SPI3_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_SPI3_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_SPI3_Init+0x64>)
 8000774:	220a      	movs	r2, #10
 8000776:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_SPI3_Init+0x64>)
 800077a:	f003 f8a9 	bl	80038d0 <HAL_SPI_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000784:	f000 f94e 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000026c 	.word	0x2000026c
 8000790:	40003c00 	.word	0x40003c00

08000794 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]
 80007b2:	615a      	str	r2, [r3, #20]
 80007b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007b6:	4b28      	ldr	r3, [pc, #160]	; (8000858 <MX_TIM2_Init+0xc4>)
 80007b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007be:	4b26      	ldr	r3, [pc, #152]	; (8000858 <MX_TIM2_Init+0xc4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c4:	4b24      	ldr	r3, [pc, #144]	; (8000858 <MX_TIM2_Init+0xc4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007ca:	4b23      	ldr	r3, [pc, #140]	; (8000858 <MX_TIM2_Init+0xc4>)
 80007cc:	f04f 32ff 	mov.w	r2, #4294967295
 80007d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d2:	4b21      	ldr	r3, [pc, #132]	; (8000858 <MX_TIM2_Init+0xc4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d8:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <MX_TIM2_Init+0xc4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007de:	481e      	ldr	r0, [pc, #120]	; (8000858 <MX_TIM2_Init+0xc4>)
 80007e0:	f003 f8da 	bl	8003998 <HAL_TIM_PWM_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80007ea:	f000 f91b 	bl	8000a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007f6:	f107 0320 	add.w	r3, r7, #32
 80007fa:	4619      	mov	r1, r3
 80007fc:	4816      	ldr	r0, [pc, #88]	; (8000858 <MX_TIM2_Init+0xc4>)
 80007fe:	f003 fbc9 	bl	8003f94 <HAL_TIMEx_MasterConfigSynchronization>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000808:	f000 f90c 	bl	8000a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800080c:	2360      	movs	r3, #96	; 0x60
 800080e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2204      	movs	r2, #4
 8000820:	4619      	mov	r1, r3
 8000822:	480d      	ldr	r0, [pc, #52]	; (8000858 <MX_TIM2_Init+0xc4>)
 8000824:	f003 f8e4 	bl	80039f0 <HAL_TIM_PWM_ConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800082e:	f000 f8f9 	bl	8000a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2208      	movs	r2, #8
 8000836:	4619      	mov	r1, r3
 8000838:	4807      	ldr	r0, [pc, #28]	; (8000858 <MX_TIM2_Init+0xc4>)
 800083a:	f003 f8d9 	bl	80039f0 <HAL_TIM_PWM_ConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000844:	f000 f8ee 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000848:	4803      	ldr	r0, [pc, #12]	; (8000858 <MX_TIM2_Init+0xc4>)
 800084a:	f000 fa0b 	bl	8000c64 <HAL_TIM_MspPostInit>

}
 800084e:	bf00      	nop
 8000850:	3728      	adds	r7, #40	; 0x28
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	2000030c 	.word	0x2000030c

0800085c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000862:	4a12      	ldr	r2, [pc, #72]	; (80008ac <MX_USART2_UART_Init+0x50>)
 8000864:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_USART2_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000894:	f003 fbec 	bl	8004070 <HAL_UART_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800089e:	f000 f8c1 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	2000034c 	.word	0x2000034c
 80008ac:	40004400 	.word	0x40004400

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	4b51      	ldr	r3, [pc, #324]	; (8000a10 <MX_GPIO_Init+0x160>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a50      	ldr	r2, [pc, #320]	; (8000a10 <MX_GPIO_Init+0x160>)
 80008d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b4e      	ldr	r3, [pc, #312]	; (8000a10 <MX_GPIO_Init+0x160>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b4a      	ldr	r3, [pc, #296]	; (8000a10 <MX_GPIO_Init+0x160>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a49      	ldr	r2, [pc, #292]	; (8000a10 <MX_GPIO_Init+0x160>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b47      	ldr	r3, [pc, #284]	; (8000a10 <MX_GPIO_Init+0x160>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	4b43      	ldr	r3, [pc, #268]	; (8000a10 <MX_GPIO_Init+0x160>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a42      	ldr	r2, [pc, #264]	; (8000a10 <MX_GPIO_Init+0x160>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b40      	ldr	r3, [pc, #256]	; (8000a10 <MX_GPIO_Init+0x160>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b3c      	ldr	r3, [pc, #240]	; (8000a10 <MX_GPIO_Init+0x160>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a3b      	ldr	r2, [pc, #236]	; (8000a10 <MX_GPIO_Init+0x160>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b39      	ldr	r3, [pc, #228]	; (8000a10 <MX_GPIO_Init+0x160>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b35      	ldr	r3, [pc, #212]	; (8000a10 <MX_GPIO_Init+0x160>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a34      	ldr	r2, [pc, #208]	; (8000a10 <MX_GPIO_Init+0x160>)
 8000940:	f043 0308 	orr.w	r3, r3, #8
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b32      	ldr	r3, [pc, #200]	; (8000a10 <MX_GPIO_Init+0x160>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0308 	and.w	r3, r3, #8
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|RXEN_Pin|TXEN_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f248 6101 	movw	r1, #34305	; 0x8601
 8000958:	482e      	ldr	r0, [pc, #184]	; (8000a14 <MX_GPIO_Init+0x164>)
 800095a:	f001 f867 	bl	8001a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SWANT_GPIO_Port, SWANT_Pin, GPIO_PIN_SET);
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000964:	482c      	ldr	r0, [pc, #176]	; (8000a18 <MX_GPIO_Init+0x168>)
 8000966:	f001 f861 	bl	8001a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000970:	4828      	ldr	r0, [pc, #160]	; (8000a14 <MX_GPIO_Init+0x164>)
 8000972:	f001 f85b 	bl	8001a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2180      	movs	r1, #128	; 0x80
 800097a:	4828      	ldr	r0, [pc, #160]	; (8000a1c <MX_GPIO_Init+0x16c>)
 800097c:	f001 f856 	bl	8001a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin MODE_Pin RXEN_Pin TXEN_Pin
                           LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|MODE_Pin|RXEN_Pin|TXEN_Pin
 8000980:	f248 7301 	movw	r3, #34561	; 0x8701
 8000984:	617b      	str	r3, [r7, #20]
                          |LORA_NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	481e      	ldr	r0, [pc, #120]	; (8000a14 <MX_GPIO_Init+0x164>)
 800099a:	f000 fec5 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWANT_Pin */
  GPIO_InitStruct.Pin = SWANT_Pin;
 800099e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SWANT_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	4818      	ldr	r0, [pc, #96]	; (8000a18 <MX_GPIO_Init+0x168>)
 80009b8:	f000 feb6 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO3_Pin */
  GPIO_InitStruct.Pin = DIO3_Pin;
 80009bc:	2304      	movs	r3, #4
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO3_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	4814      	ldr	r0, [pc, #80]	; (8000a20 <MX_GPIO_Init+0x170>)
 80009d0:	f000 feaa 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO2_Pin LORA_DIO1_Pin LORA_BUSY_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin|LORA_DIO1_Pin|LORA_BUSY_Pin;
 80009d4:	2370      	movs	r3, #112	; 0x70
 80009d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	480d      	ldr	r0, [pc, #52]	; (8000a1c <MX_GPIO_Init+0x16c>)
 80009e8:	f000 fe9e 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RESET_Pin */
  GPIO_InitStruct.Pin = LORA_RESET_Pin;
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LORA_RESET_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	4806      	ldr	r0, [pc, #24]	; (8000a1c <MX_GPIO_Init+0x16c>)
 8000a04:	f000 fe90 	bl	8001728 <HAL_GPIO_Init>

}
 8000a08:	bf00      	nop
 8000a0a:	3728      	adds	r7, #40	; 0x28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	40020400 	.word	0x40020400
 8000a20:	40020c00 	.word	0x40020c00

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <Error_Handler+0x6>

08000a2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800

08000a7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a17      	ldr	r2, [pc, #92]	; (8000af8 <HAL_ADC_MspInit+0x7c>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d127      	bne.n	8000aee <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <HAL_ADC_MspInit+0x80>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	4a15      	ldr	r2, [pc, #84]	; (8000afc <HAL_ADC_MspInit+0x80>)
 8000aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aac:	6453      	str	r3, [r2, #68]	; 0x44
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <HAL_ADC_MspInit+0x80>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <HAL_ADC_MspInit+0x80>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <HAL_ADC_MspInit+0x80>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <HAL_ADC_MspInit+0x80>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = PDET_Pin;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ada:	2303      	movs	r3, #3
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PDET_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4805      	ldr	r0, [pc, #20]	; (8000b00 <HAL_ADC_MspInit+0x84>)
 8000aea:	f000 fe1d 	bl	8001728 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aee:	bf00      	nop
 8000af0:	3728      	adds	r7, #40	; 0x28
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40012000 	.word	0x40012000
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020800 	.word	0x40020800

08000b04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <HAL_I2C_MspInit+0x84>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d12c      	bne.n	8000b80 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b48:	2312      	movs	r3, #18
 8000b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b54:	2304      	movs	r3, #4
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480c      	ldr	r0, [pc, #48]	; (8000b90 <HAL_I2C_MspInit+0x8c>)
 8000b60:	f000 fde2 	bl	8001728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b72:	6413      	str	r3, [r2, #64]	; 0x40
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b80:	bf00      	nop
 8000b82:	3728      	adds	r7, #40	; 0x28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40005400 	.word	0x40005400
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020400 	.word	0x40020400

08000b94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a19      	ldr	r2, [pc, #100]	; (8000c18 <HAL_SPI_MspInit+0x84>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d12c      	bne.n	8000c10 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_SPI_MspInit+0x88>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <HAL_SPI_MspInit+0x88>)
 8000bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_SPI_MspInit+0x88>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_SPI_MspInit+0x88>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <HAL_SPI_MspInit+0x88>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_SPI_MspInit+0x88>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000bee:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c00:	2306      	movs	r3, #6
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <HAL_SPI_MspInit+0x8c>)
 8000c0c:	f000 fd8c 	bl	8001728 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	; 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40003c00 	.word	0x40003c00
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020800 	.word	0x40020800

08000c24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c34:	d10d      	bne.n	8000c52 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c52:	bf00      	nop
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800

08000c64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	; 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c84:	d13c      	bne.n	8000d00 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <HAL_TIM_MspPostInit+0xa4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a1e      	ldr	r2, [pc, #120]	; (8000d08 <HAL_TIM_MspPostInit+0xa4>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <HAL_TIM_MspPostInit+0xa4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <HAL_TIM_MspPostInit+0xa4>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <HAL_TIM_MspPostInit+0xa4>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_TIM_MspPostInit+0xa4>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = LED2_Pin;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <HAL_TIM_MspPostInit+0xa8>)
 8000cda:	f000 fd25 	bl	8001728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <HAL_TIM_MspPostInit+0xac>)
 8000cfc:	f000 fd14 	bl	8001728 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	; 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	40020400 	.word	0x40020400

08000d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a19      	ldr	r2, [pc, #100]	; (8000d98 <HAL_UART_MspInit+0x84>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d12b      	bne.n	8000d8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <HAL_UART_MspInit+0x88>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	4a17      	ldr	r2, [pc, #92]	; (8000d9c <HAL_UART_MspInit+0x88>)
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	6413      	str	r3, [r2, #64]	; 0x40
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <HAL_UART_MspInit+0x88>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <HAL_UART_MspInit+0x88>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <HAL_UART_MspInit+0x88>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_UART_MspInit+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d6e:	230c      	movs	r3, #12
 8000d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d7e:	2307      	movs	r3, #7
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <HAL_UART_MspInit+0x8c>)
 8000d8a:	f000 fccd 	bl	8001728 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	; 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40004400 	.word	0x40004400
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020000 	.word	0x40020000

08000da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <NMI_Handler+0x4>

08000daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <HardFault_Handler+0x4>

08000db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <MemManage_Handler+0x4>

08000db6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <BusFault_Handler+0x4>

08000dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <UsageFault_Handler+0x4>

08000dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df0:	f000 f8d4 	bl	8000f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <OTG_FS_IRQHandler+0x10>)
 8000dfe:	f001 f8d1 	bl	8001fa4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20001860 	.word	0x20001860

08000e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e14:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <_sbrk+0x5c>)
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <_sbrk+0x60>)
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <_sbrk+0x64>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <_sbrk+0x68>)
 8000e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d207      	bcs.n	8000e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e3c:	f007 f91e 	bl	800807c <__errno>
 8000e40:	4602      	mov	r2, r0
 8000e42:	230c      	movs	r3, #12
 8000e44:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	e009      	b.n	8000e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <_sbrk+0x64>)
 8000e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20020000 	.word	0x20020000
 8000e6c:	00000400 	.word	0x00000400
 8000e70:	20000208 	.word	0x20000208
 8000e74:	20001c70 	.word	0x20001c70

08000e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <SystemInit+0x28>)
 8000e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e82:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <SystemInit+0x28>)
 8000e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <SystemInit+0x28>)
 8000e8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e92:	609a      	str	r2, [r3, #8]
#endif
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000edc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ea8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000eaa:	e003      	b.n	8000eb4 <LoopCopyDataInit>

08000eac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000eae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000eb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000eb2:	3104      	adds	r1, #4

08000eb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000eb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000eba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ebc:	d3f6      	bcc.n	8000eac <CopyDataInit>
  ldr  r2, =_sbss
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ec0:	e002      	b.n	8000ec8 <LoopFillZerobss>

08000ec2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ec2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ec4:	f842 3b04 	str.w	r3, [r2], #4

08000ec8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000eca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ecc:	d3f9      	bcc.n	8000ec2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ece:	f7ff ffd3 	bl	8000e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ed2:	f007 f8d9 	bl	8008088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed6:	f7ff fb07 	bl	80004e8 <main>
  bx  lr    
 8000eda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000edc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ee0:	0800832c 	.word	0x0800832c
  ldr  r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ee8:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8000eec:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8000ef0:	20001c6c 	.word	0x20001c6c

08000ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC_IRQHandler>
	...

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <HAL_Init+0x40>)
 8000f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <HAL_Init+0x40>)
 8000f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_Init+0x40>)
 8000f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 fbbf 	bl	80016a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 f808 	bl	8000f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2c:	f7ff fd7e 	bl	8000a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023c00 	.word	0x40023c00

08000f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_InitTick+0x54>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x58>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 fbd7 	bl	800170e <HAL_SYSTICK_Config>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00e      	b.n	8000f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	d80a      	bhi.n	8000f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f000 fb9f 	bl	80016ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f7c:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <HAL_InitTick+0x5c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e000      	b.n	8000f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000000 	.word	0x20000000
 8000f94:	20000008 	.word	0x20000008
 8000f98:	20000004 	.word	0x20000004

08000f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x20>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x24>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <HAL_IncTick+0x24>)
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	2000038c 	.word	0x2000038c

08000fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <HAL_GetTick+0x14>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	2000038c 	.word	0x2000038c

08000fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe4:	f7ff ffee 	bl	8000fc4 <HAL_GetTick>
 8000fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff4:	d005      	beq.n	8001002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_Delay+0x40>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001002:	bf00      	nop
 8001004:	f7ff ffde 	bl	8000fc4 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	429a      	cmp	r2, r3
 8001012:	d8f7      	bhi.n	8001004 <HAL_Delay+0x28>
  {
  }
}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000008 	.word	0x20000008

08001020 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e033      	b.n	800109e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	d109      	bne.n	8001052 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff fd1c 	bl	8000a7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	2b00      	cmp	r3, #0
 800105c:	d118      	bne.n	8001090 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001066:	f023 0302 	bic.w	r3, r3, #2
 800106a:	f043 0202 	orr.w	r2, r3, #2
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f94a 	bl	800130c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f023 0303 	bic.w	r3, r3, #3
 8001086:	f043 0201 	orr.w	r2, r3, #1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	641a      	str	r2, [r3, #64]	; 0x40
 800108e:	e001      	b.n	8001094 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d101      	bne.n	80010c4 <HAL_ADC_ConfigChannel+0x1c>
 80010c0:	2302      	movs	r3, #2
 80010c2:	e113      	b.n	80012ec <HAL_ADC_ConfigChannel+0x244>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b09      	cmp	r3, #9
 80010d2:	d925      	bls.n	8001120 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68d9      	ldr	r1, [r3, #12]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	3b1e      	subs	r3, #30
 80010ea:	2207      	movs	r2, #7
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43da      	mvns	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	400a      	ands	r2, r1
 80010f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68d9      	ldr	r1, [r3, #12]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	b29b      	uxth	r3, r3
 800110a:	4618      	mov	r0, r3
 800110c:	4603      	mov	r3, r0
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4403      	add	r3, r0
 8001112:	3b1e      	subs	r3, #30
 8001114:	409a      	lsls	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	430a      	orrs	r2, r1
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	e022      	b.n	8001166 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6919      	ldr	r1, [r3, #16]
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	b29b      	uxth	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	4613      	mov	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	2207      	movs	r2, #7
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	400a      	ands	r2, r1
 8001142:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6919      	ldr	r1, [r3, #16]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	b29b      	uxth	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	4603      	mov	r3, r0
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4403      	add	r3, r0
 800115c:	409a      	lsls	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	430a      	orrs	r2, r1
 8001164:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b06      	cmp	r3, #6
 800116c:	d824      	bhi.n	80011b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	4613      	mov	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	3b05      	subs	r3, #5
 8001180:	221f      	movs	r2, #31
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	400a      	ands	r2, r1
 800118e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4618      	mov	r0, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	3b05      	subs	r3, #5
 80011aa:	fa00 f203 	lsl.w	r2, r0, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	635a      	str	r2, [r3, #52]	; 0x34
 80011b6:	e04c      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b0c      	cmp	r3, #12
 80011be:	d824      	bhi.n	800120a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	3b23      	subs	r3, #35	; 0x23
 80011d2:	221f      	movs	r2, #31
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43da      	mvns	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	400a      	ands	r2, r1
 80011e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	3b23      	subs	r3, #35	; 0x23
 80011fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	631a      	str	r2, [r3, #48]	; 0x30
 8001208:	e023      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	3b41      	subs	r3, #65	; 0x41
 800121c:	221f      	movs	r2, #31
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43da      	mvns	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	400a      	ands	r2, r1
 800122a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	b29b      	uxth	r3, r3
 8001238:	4618      	mov	r0, r3
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	3b41      	subs	r3, #65	; 0x41
 8001246:	fa00 f203 	lsl.w	r2, r0, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001252:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <HAL_ADC_ConfigChannel+0x250>)
 8001254:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a28      	ldr	r2, [pc, #160]	; (80012fc <HAL_ADC_ConfigChannel+0x254>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d10f      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x1d8>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b12      	cmp	r3, #18
 8001266:	d10b      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a1d      	ldr	r2, [pc, #116]	; (80012fc <HAL_ADC_ConfigChannel+0x254>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d12b      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x23a>
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a1c      	ldr	r2, [pc, #112]	; (8001300 <HAL_ADC_ConfigChannel+0x258>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d003      	beq.n	800129c <HAL_ADC_ConfigChannel+0x1f4>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b11      	cmp	r3, #17
 800129a:	d122      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a11      	ldr	r2, [pc, #68]	; (8001300 <HAL_ADC_ConfigChannel+0x258>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d111      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_ADC_ConfigChannel+0x25c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a11      	ldr	r2, [pc, #68]	; (8001308 <HAL_ADC_ConfigChannel+0x260>)
 80012c4:	fba2 2303 	umull	r2, r3, r2, r3
 80012c8:	0c9a      	lsrs	r2, r3, #18
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012d4:	e002      	b.n	80012dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	3b01      	subs	r3, #1
 80012da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f9      	bne.n	80012d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	40012300 	.word	0x40012300
 80012fc:	40012000 	.word	0x40012000
 8001300:	10000012 	.word	0x10000012
 8001304:	20000000 	.word	0x20000000
 8001308:	431bde83 	.word	0x431bde83

0800130c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001314:	4b79      	ldr	r3, [pc, #484]	; (80014fc <ADC_Init+0x1f0>)
 8001316:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	431a      	orrs	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001340:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6859      	ldr	r1, [r3, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	021a      	lsls	r2, r3, #8
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001364:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6859      	ldr	r1, [r3, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001386:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6899      	ldr	r1, [r3, #8]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139e:	4a58      	ldr	r2, [pc, #352]	; (8001500 <ADC_Init+0x1f4>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d022      	beq.n	80013ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6899      	ldr	r1, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6899      	ldr	r1, [r3, #8]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	e00f      	b.n	800140a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001408:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 0202 	bic.w	r2, r2, #2
 8001418:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6899      	ldr	r1, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7e1b      	ldrb	r3, [r3, #24]
 8001424:	005a      	lsls	r2, r3, #1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d01b      	beq.n	8001470 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001446:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001456:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6859      	ldr	r1, [r3, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001462:	3b01      	subs	r3, #1
 8001464:	035a      	lsls	r2, r3, #13
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	e007      	b.n	8001480 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800147e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	3b01      	subs	r3, #1
 800149c:	051a      	lsls	r2, r3, #20
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6899      	ldr	r1, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014c2:	025a      	lsls	r2, r3, #9
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6899      	ldr	r1, [r3, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	029a      	lsls	r2, r3, #10
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	609a      	str	r2, [r3, #8]
}
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	40012300 	.word	0x40012300
 8001500:	0f000001 	.word	0x0f000001

08001504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001520:	4013      	ands	r3, r2
 8001522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800152c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001536:	4a04      	ldr	r2, [pc, #16]	; (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	60d3      	str	r3, [r2, #12]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <__NVIC_GetPriorityGrouping+0x18>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	0a1b      	lsrs	r3, r3, #8
 8001556:	f003 0307 	and.w	r3, r3, #7
}
 800155a:	4618      	mov	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	2b00      	cmp	r3, #0
 8001578:	db0b      	blt.n	8001592 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	f003 021f 	and.w	r2, r3, #31
 8001580:	4907      	ldr	r1, [pc, #28]	; (80015a0 <__NVIC_EnableIRQ+0x38>)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	095b      	lsrs	r3, r3, #5
 8001588:	2001      	movs	r0, #1
 800158a:	fa00 f202 	lsl.w	r2, r0, r2
 800158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000e100 	.word	0xe000e100

080015a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	6039      	str	r1, [r7, #0]
 80015ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	db0a      	blt.n	80015ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	490c      	ldr	r1, [pc, #48]	; (80015f0 <__NVIC_SetPriority+0x4c>)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	0112      	lsls	r2, r2, #4
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	440b      	add	r3, r1
 80015c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015cc:	e00a      	b.n	80015e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	4908      	ldr	r1, [pc, #32]	; (80015f4 <__NVIC_SetPriority+0x50>)
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	f003 030f 	and.w	r3, r3, #15
 80015da:	3b04      	subs	r3, #4
 80015dc:	0112      	lsls	r2, r2, #4
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	440b      	add	r3, r1
 80015e2:	761a      	strb	r2, [r3, #24]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000e100 	.word	0xe000e100
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b089      	sub	sp, #36	; 0x24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f1c3 0307 	rsb	r3, r3, #7
 8001612:	2b04      	cmp	r3, #4
 8001614:	bf28      	it	cs
 8001616:	2304      	movcs	r3, #4
 8001618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3304      	adds	r3, #4
 800161e:	2b06      	cmp	r3, #6
 8001620:	d902      	bls.n	8001628 <NVIC_EncodePriority+0x30>
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3b03      	subs	r3, #3
 8001626:	e000      	b.n	800162a <NVIC_EncodePriority+0x32>
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	f04f 32ff 	mov.w	r2, #4294967295
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43da      	mvns	r2, r3
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	401a      	ands	r2, r3
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001640:	f04f 31ff 	mov.w	r1, #4294967295
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	fa01 f303 	lsl.w	r3, r1, r3
 800164a:	43d9      	mvns	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	4313      	orrs	r3, r2
         );
}
 8001652:	4618      	mov	r0, r3
 8001654:	3724      	adds	r7, #36	; 0x24
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001670:	d301      	bcc.n	8001676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001672:	2301      	movs	r3, #1
 8001674:	e00f      	b.n	8001696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <SysTick_Config+0x40>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167e:	210f      	movs	r1, #15
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f7ff ff8e 	bl	80015a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <SysTick_Config+0x40>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168e:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <SysTick_Config+0x40>)
 8001690:	2207      	movs	r2, #7
 8001692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	e000e010 	.word	0xe000e010

080016a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ff29 	bl	8001504 <__NVIC_SetPriorityGrouping>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b086      	sub	sp, #24
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016cc:	f7ff ff3e 	bl	800154c <__NVIC_GetPriorityGrouping>
 80016d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	6978      	ldr	r0, [r7, #20]
 80016d8:	f7ff ff8e 	bl	80015f8 <NVIC_EncodePriority>
 80016dc:	4602      	mov	r2, r0
 80016de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff5d 	bl	80015a4 <__NVIC_SetPriority>
}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff31 	bl	8001568 <__NVIC_EnableIRQ>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ffa2 	bl	8001660 <SysTick_Config>
 800171c:	4603      	mov	r3, r0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	; 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
 8001742:	e159      	b.n	80019f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001744:	2201      	movs	r2, #1
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	429a      	cmp	r2, r3
 800175e:	f040 8148 	bne.w	80019f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d00b      	beq.n	8001782 <HAL_GPIO_Init+0x5a>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d007      	beq.n	8001782 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001776:	2b11      	cmp	r3, #17
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b12      	cmp	r3, #18
 8001780:	d130      	bne.n	80017e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	2203      	movs	r2, #3
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b8:	2201      	movs	r2, #1
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	091b      	lsrs	r3, r3, #4
 80017ce:	f003 0201 	and.w	r2, r3, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0xfc>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b12      	cmp	r3, #18
 8001822:	d123      	bne.n	800186c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	08da      	lsrs	r2, r3, #3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3208      	adds	r2, #8
 800182c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	220f      	movs	r2, #15
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	691a      	ldr	r2, [r3, #16]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	08da      	lsrs	r2, r3, #3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3208      	adds	r2, #8
 8001866:	69b9      	ldr	r1, [r7, #24]
 8001868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	2203      	movs	r2, #3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0203 	and.w	r2, r3, #3
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 80a2 	beq.w	80019f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	4b56      	ldr	r3, [pc, #344]	; (8001a0c <HAL_GPIO_Init+0x2e4>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	4a55      	ldr	r2, [pc, #340]	; (8001a0c <HAL_GPIO_Init+0x2e4>)
 80018b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018bc:	6453      	str	r3, [r2, #68]	; 0x44
 80018be:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <HAL_GPIO_Init+0x2e4>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ca:	4a51      	ldr	r2, [pc, #324]	; (8001a10 <HAL_GPIO_Init+0x2e8>)
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	3302      	adds	r3, #2
 80018d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	220f      	movs	r2, #15
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a48      	ldr	r2, [pc, #288]	; (8001a14 <HAL_GPIO_Init+0x2ec>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d019      	beq.n	800192a <HAL_GPIO_Init+0x202>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a47      	ldr	r2, [pc, #284]	; (8001a18 <HAL_GPIO_Init+0x2f0>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d013      	beq.n	8001926 <HAL_GPIO_Init+0x1fe>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a46      	ldr	r2, [pc, #280]	; (8001a1c <HAL_GPIO_Init+0x2f4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00d      	beq.n	8001922 <HAL_GPIO_Init+0x1fa>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a45      	ldr	r2, [pc, #276]	; (8001a20 <HAL_GPIO_Init+0x2f8>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d007      	beq.n	800191e <HAL_GPIO_Init+0x1f6>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a44      	ldr	r2, [pc, #272]	; (8001a24 <HAL_GPIO_Init+0x2fc>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d101      	bne.n	800191a <HAL_GPIO_Init+0x1f2>
 8001916:	2304      	movs	r3, #4
 8001918:	e008      	b.n	800192c <HAL_GPIO_Init+0x204>
 800191a:	2307      	movs	r3, #7
 800191c:	e006      	b.n	800192c <HAL_GPIO_Init+0x204>
 800191e:	2303      	movs	r3, #3
 8001920:	e004      	b.n	800192c <HAL_GPIO_Init+0x204>
 8001922:	2302      	movs	r3, #2
 8001924:	e002      	b.n	800192c <HAL_GPIO_Init+0x204>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <HAL_GPIO_Init+0x204>
 800192a:	2300      	movs	r3, #0
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	f002 0203 	and.w	r2, r2, #3
 8001932:	0092      	lsls	r2, r2, #2
 8001934:	4093      	lsls	r3, r2
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4313      	orrs	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800193c:	4934      	ldr	r1, [pc, #208]	; (8001a10 <HAL_GPIO_Init+0x2e8>)
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	089b      	lsrs	r3, r3, #2
 8001942:	3302      	adds	r3, #2
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800194a:	4b37      	ldr	r3, [pc, #220]	; (8001a28 <HAL_GPIO_Init+0x300>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800196e:	4a2e      	ldr	r2, [pc, #184]	; (8001a28 <HAL_GPIO_Init+0x300>)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001974:	4b2c      	ldr	r3, [pc, #176]	; (8001a28 <HAL_GPIO_Init+0x300>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001998:	4a23      	ldr	r2, [pc, #140]	; (8001a28 <HAL_GPIO_Init+0x300>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800199e:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <HAL_GPIO_Init+0x300>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019c2:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <HAL_GPIO_Init+0x300>)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019c8:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <HAL_GPIO_Init+0x300>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019ec:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <HAL_GPIO_Init+0x300>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3301      	adds	r3, #1
 80019f6:	61fb      	str	r3, [r7, #28]
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	2b0f      	cmp	r3, #15
 80019fc:	f67f aea2 	bls.w	8001744 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a00:	bf00      	nop
 8001a02:	3724      	adds	r7, #36	; 0x24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40013800 	.word	0x40013800
 8001a14:	40020000 	.word	0x40020000
 8001a18:	40020400 	.word	0x40020400
 8001a1c:	40020800 	.word	0x40020800
 8001a20:	40020c00 	.word	0x40020c00
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40013c00 	.word	0x40013c00

08001a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	807b      	strh	r3, [r7, #2]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a3c:	787b      	ldrb	r3, [r7, #1]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a42:	887a      	ldrh	r2, [r7, #2]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a48:	e003      	b.n	8001a52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a4a:	887b      	ldrh	r3, [r7, #2]
 8001a4c:	041a      	lsls	r2, r3, #16
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	619a      	str	r2, [r3, #24]
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	460b      	mov	r3, r1
 8001a68:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695a      	ldr	r2, [r3, #20]
 8001a6e:	887b      	ldrh	r3, [r7, #2]
 8001a70:	401a      	ands	r2, r3
 8001a72:	887b      	ldrh	r3, [r7, #2]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d104      	bne.n	8001a82 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a78:	887b      	ldrh	r3, [r7, #2]
 8001a7a:	041a      	lsls	r2, r3, #16
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001a82:	887a      	ldrh	r2, [r7, #2]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	619a      	str	r2, [r3, #24]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e11f      	b.n	8001ce6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d106      	bne.n	8001ac0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff f822 	bl	8000b04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2224      	movs	r2, #36	; 0x24
 8001ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0201 	bic.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ae6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001af6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001af8:	f001 fec2 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 8001afc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4a7b      	ldr	r2, [pc, #492]	; (8001cf0 <HAL_I2C_Init+0x25c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d807      	bhi.n	8001b18 <HAL_I2C_Init+0x84>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4a7a      	ldr	r2, [pc, #488]	; (8001cf4 <HAL_I2C_Init+0x260>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	bf94      	ite	ls
 8001b10:	2301      	movls	r3, #1
 8001b12:	2300      	movhi	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	e006      	b.n	8001b26 <HAL_I2C_Init+0x92>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4a77      	ldr	r2, [pc, #476]	; (8001cf8 <HAL_I2C_Init+0x264>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	bf94      	ite	ls
 8001b20:	2301      	movls	r3, #1
 8001b22:	2300      	movhi	r3, #0
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e0db      	b.n	8001ce6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4a72      	ldr	r2, [pc, #456]	; (8001cfc <HAL_I2C_Init+0x268>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	0c9b      	lsrs	r3, r3, #18
 8001b38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	4a64      	ldr	r2, [pc, #400]	; (8001cf0 <HAL_I2C_Init+0x25c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d802      	bhi.n	8001b68 <HAL_I2C_Init+0xd4>
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	3301      	adds	r3, #1
 8001b66:	e009      	b.n	8001b7c <HAL_I2C_Init+0xe8>
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b6e:	fb02 f303 	mul.w	r3, r2, r3
 8001b72:	4a63      	ldr	r2, [pc, #396]	; (8001d00 <HAL_I2C_Init+0x26c>)
 8001b74:	fba2 2303 	umull	r2, r3, r2, r3
 8001b78:	099b      	lsrs	r3, r3, #6
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	430b      	orrs	r3, r1
 8001b82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4956      	ldr	r1, [pc, #344]	; (8001cf0 <HAL_I2C_Init+0x25c>)
 8001b98:	428b      	cmp	r3, r1
 8001b9a:	d80d      	bhi.n	8001bb8 <HAL_I2C_Init+0x124>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1e59      	subs	r1, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001baa:	3301      	adds	r3, #1
 8001bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	bf38      	it	cc
 8001bb4:	2304      	movcc	r3, #4
 8001bb6:	e04f      	b.n	8001c58 <HAL_I2C_Init+0x1c4>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d111      	bne.n	8001be4 <HAL_I2C_Init+0x150>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	1e58      	subs	r0, r3, #1
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6859      	ldr	r1, [r3, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	440b      	add	r3, r1
 8001bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	bf0c      	ite	eq
 8001bdc:	2301      	moveq	r3, #1
 8001bde:	2300      	movne	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	e012      	b.n	8001c0a <HAL_I2C_Init+0x176>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1e58      	subs	r0, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6859      	ldr	r1, [r3, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	0099      	lsls	r1, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	bf0c      	ite	eq
 8001c04:	2301      	moveq	r3, #1
 8001c06:	2300      	movne	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_I2C_Init+0x17e>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e022      	b.n	8001c58 <HAL_I2C_Init+0x1c4>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10e      	bne.n	8001c38 <HAL_I2C_Init+0x1a4>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1e58      	subs	r0, r3, #1
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6859      	ldr	r1, [r3, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	440b      	add	r3, r1
 8001c28:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c36:	e00f      	b.n	8001c58 <HAL_I2C_Init+0x1c4>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1e58      	subs	r0, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6859      	ldr	r1, [r3, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	0099      	lsls	r1, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c4e:	3301      	adds	r3, #1
 8001c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	6809      	ldr	r1, [r1, #0]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69da      	ldr	r2, [r3, #28]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6911      	ldr	r1, [r2, #16]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	68d2      	ldr	r2, [r2, #12]
 8001c92:	4311      	orrs	r1, r2
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	430b      	orrs	r3, r1
 8001c9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695a      	ldr	r2, [r3, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0201 	orr.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	000186a0 	.word	0x000186a0
 8001cf4:	001e847f 	.word	0x001e847f
 8001cf8:	003d08ff 	.word	0x003d08ff
 8001cfc:	431bde83 	.word	0x431bde83
 8001d00:	10624dd3 	.word	0x10624dd3

08001d04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d06:	b08f      	sub	sp, #60	; 0x3c
 8001d08:	af0a      	add	r7, sp, #40	; 0x28
 8001d0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e10f      	b.n	8001f36 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d106      	bne.n	8001d36 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f005 feb1 	bl	8007a98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2203      	movs	r2, #3
 8001d3a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d102      	bne.n	8001d50 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f002 fe6a 	bl	8004a2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	687e      	ldr	r6, [r7, #4]
 8001d62:	466d      	mov	r5, sp
 8001d64:	f106 0410 	add.w	r4, r6, #16
 8001d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d74:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d78:	1d33      	adds	r3, r6, #4
 8001d7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d7c:	6838      	ldr	r0, [r7, #0]
 8001d7e:	f002 fd41 	bl	8004804 <USB_CoreInit>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0d0      	b.n	8001f36 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f002 fe58 	bl	8004a50 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da0:	2300      	movs	r3, #0
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	e04a      	b.n	8001e3c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	1a9b      	subs	r3, r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	333d      	adds	r3, #61	; 0x3d
 8001db6:	2201      	movs	r2, #1
 8001db8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	1a9b      	subs	r3, r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	333c      	adds	r3, #60	; 0x3c
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	b298      	uxth	r0, r3
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	1a9b      	subs	r3, r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	440b      	add	r3, r1
 8001de0:	3342      	adds	r3, #66	; 0x42
 8001de2:	4602      	mov	r2, r0
 8001de4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001de6:	7bfa      	ldrb	r2, [r7, #15]
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	1a9b      	subs	r3, r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	440b      	add	r3, r1
 8001df4:	333f      	adds	r3, #63	; 0x3f
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	1a9b      	subs	r3, r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	440b      	add	r3, r1
 8001e08:	3344      	adds	r3, #68	; 0x44
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e0e:	7bfa      	ldrb	r2, [r7, #15]
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	1a9b      	subs	r3, r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	3348      	adds	r3, #72	; 0x48
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e22:	7bfa      	ldrb	r2, [r7, #15]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	1a9b      	subs	r3, r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	3350      	adds	r3, #80	; 0x50
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
 8001e3c:	7bfa      	ldrb	r2, [r7, #15]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d3af      	bcc.n	8001da6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	73fb      	strb	r3, [r7, #15]
 8001e4a:	e044      	b.n	8001ed6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e4c:	7bfa      	ldrb	r2, [r7, #15]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	1a9b      	subs	r3, r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e62:	7bfa      	ldrb	r2, [r7, #15]
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	1a9b      	subs	r3, r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001e74:	7bfa      	ldrb	r2, [r7, #15]
 8001e76:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	1a9b      	subs	r3, r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	1a9b      	subs	r3, r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	73fb      	strb	r3, [r7, #15]
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d3b5      	bcc.n	8001e4c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	603b      	str	r3, [r7, #0]
 8001ee6:	687e      	ldr	r6, [r7, #4]
 8001ee8:	466d      	mov	r5, sp
 8001eea:	f106 0410 	add.w	r4, r6, #16
 8001eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001efa:	e885 0003 	stmia.w	r5, {r0, r1}
 8001efe:	1d33      	adds	r3, r6, #4
 8001f00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f02:	6838      	ldr	r0, [r7, #0]
 8001f04:	f002 fdce 	bl	8004aa4 <USB_DevInit>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2202      	movs	r2, #2
 8001f12:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00d      	b.n	8001f36 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f003 fe16 	bl	8005b60 <USB_DevDisconnect>

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f3e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_PCD_Start+0x1c>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e020      	b.n	8001f9c <HAL_PCD_Start+0x5e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d109      	bne.n	8001f7e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d005      	beq.n	8001f7e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f002 fd42 	bl	8004a0c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f003 fdc6 	bl	8005b1e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b08d      	sub	sp, #52	; 0x34
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f003 fe84 	bl	8005cc8 <USB_GetMode>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f040 839d 	bne.w	8002702 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f003 fde8 	bl	8005ba2 <USB_ReadInterrupts>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 8393 	beq.w	8002700 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f003 fddf 	bl	8005ba2 <USB_ReadInterrupts>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d107      	bne.n	8001ffe <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695a      	ldr	r2, [r3, #20]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f002 0202 	and.w	r2, r2, #2
 8001ffc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f003 fdcd 	bl	8005ba2 <USB_ReadInterrupts>
 8002008:	4603      	mov	r3, r0
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b10      	cmp	r3, #16
 8002010:	d161      	bne.n	80020d6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699a      	ldr	r2, [r3, #24]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0210 	bic.w	r2, r2, #16
 8002020:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	f003 020f 	and.w	r2, r3, #15
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	3304      	adds	r3, #4
 8002040:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	0c5b      	lsrs	r3, r3, #17
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	2b02      	cmp	r3, #2
 800204c:	d124      	bne.n	8002098 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002054:	4013      	ands	r3, r2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d035      	beq.n	80020c6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002064:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002068:	b29b      	uxth	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	6a38      	ldr	r0, [r7, #32]
 800206e:	f003 fc33 	bl	80058d8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800207e:	441a      	add	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	699a      	ldr	r2, [r3, #24]
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	091b      	lsrs	r3, r3, #4
 800208c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002090:	441a      	add	r2, r3
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	619a      	str	r2, [r3, #24]
 8002096:	e016      	b.n	80020c6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	0c5b      	lsrs	r3, r3, #17
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	2b06      	cmp	r3, #6
 80020a2:	d110      	bne.n	80020c6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020aa:	2208      	movs	r2, #8
 80020ac:	4619      	mov	r1, r3
 80020ae:	6a38      	ldr	r0, [r7, #32]
 80020b0:	f003 fc12 	bl	80058d8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	699a      	ldr	r2, [r3, #24]
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020c0:	441a      	add	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699a      	ldr	r2, [r3, #24]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0210 	orr.w	r2, r2, #16
 80020d4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f003 fd61 	bl	8005ba2 <USB_ReadInterrupts>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020ea:	d16e      	bne.n	80021ca <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f003 fd67 	bl	8005bc8 <USB_ReadDevAllOutEpInterrupt>
 80020fa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80020fc:	e062      	b.n	80021c4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80020fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d057      	beq.n	80021b8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	4611      	mov	r1, r2
 8002112:	4618      	mov	r0, r3
 8002114:	f003 fd8c 	bl	8005c30 <USB_ReadDevOutEPInterrupt>
 8002118:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00c      	beq.n	800213e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	4413      	add	r3, r2
 800212c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002130:	461a      	mov	r2, r3
 8002132:	2301      	movs	r3, #1
 8002134:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002136:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 fdb1 	bl	8002ca0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00c      	beq.n	8002162 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	015a      	lsls	r2, r3, #5
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	4413      	add	r3, r2
 8002150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002154:	461a      	mov	r2, r3
 8002156:	2308      	movs	r3, #8
 8002158:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800215a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 feab 	bl	8002eb8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	015a      	lsls	r2, r3, #5
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	4413      	add	r3, r2
 8002174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002178:	461a      	mov	r2, r3
 800217a:	2310      	movs	r3, #16
 800217c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	4413      	add	r3, r2
 8002190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002194:	461a      	mov	r2, r3
 8002196:	2320      	movs	r3, #32
 8002198:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d009      	beq.n	80021b8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b0:	461a      	mov	r2, r3
 80021b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021b6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	3301      	adds	r3, #1
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c0:	085b      	lsrs	r3, r3, #1
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d199      	bne.n	80020fe <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f003 fce7 	bl	8005ba2 <USB_ReadInterrupts>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021de:	f040 80c0 	bne.w	8002362 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f003 fd08 	bl	8005bfc <USB_ReadDevAllInEpInterrupt>
 80021ec:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80021f2:	e0b2      	b.n	800235a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80021f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 80a7 	beq.w	800234e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f003 fd2e 	bl	8005c6c <USB_ReadDevInEPInterrupt>
 8002210:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d057      	beq.n	80022cc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	2201      	movs	r2, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	43db      	mvns	r3, r3
 8002236:	69f9      	ldr	r1, [r7, #28]
 8002238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800223c:	4013      	ands	r3, r2
 800223e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	4413      	add	r3, r2
 8002248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800224c:	461a      	mov	r2, r3
 800224e:	2301      	movs	r3, #1
 8002250:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d132      	bne.n	80022c0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225e:	4613      	mov	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	1a9b      	subs	r3, r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	3348      	adds	r3, #72	; 0x48
 800226a:	6819      	ldr	r1, [r3, #0]
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4403      	add	r3, r0
 800227a:	3344      	adds	r3, #68	; 0x44
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4419      	add	r1, r3
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4403      	add	r3, r0
 800228e:	3348      	adds	r3, #72	; 0x48
 8002290:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	2b00      	cmp	r3, #0
 8002296:	d113      	bne.n	80022c0 <HAL_PCD_IRQHandler+0x31c>
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	1a9b      	subs	r3, r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	3350      	adds	r3, #80	; 0x50
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d108      	bne.n	80022c0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022b8:	461a      	mov	r2, r3
 80022ba:	2101      	movs	r1, #1
 80022bc:	f003 fd36 	bl	8005d2c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	4619      	mov	r1, r3
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f005 fc67 	bl	8007b9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d008      	beq.n	80022e8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022e2:	461a      	mov	r2, r3
 80022e4:	2308      	movs	r3, #8
 80022e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d008      	beq.n	8002304 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022fe:	461a      	mov	r2, r3
 8002300:	2310      	movs	r3, #16
 8002302:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230a:	2b00      	cmp	r3, #0
 800230c:	d008      	beq.n	8002320 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	4413      	add	r3, r2
 8002316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800231a:	461a      	mov	r2, r3
 800231c:	2340      	movs	r3, #64	; 0x40
 800231e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d008      	beq.n	800233c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	4413      	add	r3, r2
 8002332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002336:	461a      	mov	r2, r3
 8002338:	2302      	movs	r3, #2
 800233a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002346:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 fc1b 	bl	8002b84 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	3301      	adds	r3, #1
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002356:	085b      	lsrs	r3, r3, #1
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800235a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235c:	2b00      	cmp	r3, #0
 800235e:	f47f af49 	bne.w	80021f4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f003 fc1b 	bl	8005ba2 <USB_ReadInterrupts>
 800236c:	4603      	mov	r3, r0
 800236e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002372:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002376:	d122      	bne.n	80023be <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	69fa      	ldr	r2, [r7, #28]
 8002382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002386:	f023 0301 	bic.w	r3, r3, #1
 800238a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002392:	2b01      	cmp	r3, #1
 8002394:	d108      	bne.n	80023a8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800239e:	2100      	movs	r1, #0
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 fe27 	bl	8002ff4 <HAL_PCDEx_LPM_Callback>
 80023a6:	e002      	b.n	80023ae <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f005 fc63 	bl	8007c74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695a      	ldr	r2, [r3, #20]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80023bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f003 fbed 	bl	8005ba2 <USB_ReadInterrupts>
 80023c8:	4603      	mov	r3, r0
 80023ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023d2:	d112      	bne.n	80023fa <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d102      	bne.n	80023ea <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f005 fc1f 	bl	8007c28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695a      	ldr	r2, [r3, #20]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80023f8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f003 fbcf 	bl	8005ba2 <USB_ReadInterrupts>
 8002404:	4603      	mov	r3, r0
 8002406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800240a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800240e:	f040 80c7 	bne.w	80025a0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	69fa      	ldr	r2, [r7, #28]
 800241c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002420:	f023 0301 	bic.w	r3, r3, #1
 8002424:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2110      	movs	r1, #16
 800242c:	4618      	mov	r0, r3
 800242e:	f002 fc9d 	bl	8004d6c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002432:	2300      	movs	r3, #0
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002436:	e056      	b.n	80024e6 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	4413      	add	r3, r2
 8002440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002444:	461a      	mov	r2, r3
 8002446:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800244a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800244c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	4413      	add	r3, r2
 8002454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800245c:	0151      	lsls	r1, r2, #5
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	440a      	add	r2, r1
 8002462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002466:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800246a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	4413      	add	r3, r2
 8002474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800247c:	0151      	lsls	r1, r2, #5
 800247e:	69fa      	ldr	r2, [r7, #28]
 8002480:	440a      	add	r2, r1
 8002482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002486:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800248a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800248c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	4413      	add	r3, r2
 8002494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002498:	461a      	mov	r2, r3
 800249a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800249e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b0:	0151      	lsls	r1, r2, #5
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	440a      	add	r2, r1
 80024b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80024c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024d0:	0151      	lsls	r1, r2, #5
 80024d2:	69fa      	ldr	r2, [r7, #28]
 80024d4:	440a      	add	r2, r1
 80024d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024de:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e2:	3301      	adds	r3, #1
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d3a3      	bcc.n	8002438 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	69fa      	ldr	r2, [r7, #28]
 80024fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024fe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002502:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	2b00      	cmp	r3, #0
 800250a:	d016      	beq.n	800253a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800251c:	f043 030b 	orr.w	r3, r3, #11
 8002520:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800252a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252c:	69fa      	ldr	r2, [r7, #28]
 800252e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002532:	f043 030b 	orr.w	r3, r3, #11
 8002536:	6453      	str	r3, [r2, #68]	; 0x44
 8002538:	e015      	b.n	8002566 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	69fa      	ldr	r2, [r7, #28]
 8002544:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002548:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800254c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002550:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	69fa      	ldr	r2, [r7, #28]
 800255c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002560:	f043 030b 	orr.w	r3, r3, #11
 8002564:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002574:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002578:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800258a:	461a      	mov	r2, r3
 800258c:	f003 fbce 	bl	8005d2c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695a      	ldr	r2, [r3, #20]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800259e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f003 fafc 	bl	8005ba2 <USB_ReadInterrupts>
 80025aa:	4603      	mov	r3, r0
 80025ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025b4:	d124      	bne.n	8002600 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f003 fb92 	bl	8005ce4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f002 fc32 	bl	8004e2e <USB_GetDevSpeed>
 80025ca:	4603      	mov	r3, r0
 80025cc:	461a      	mov	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681c      	ldr	r4, [r3, #0]
 80025d6:	f001 f947 	bl	8003868 <HAL_RCC_GetHCLKFreq>
 80025da:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	4620      	mov	r0, r4
 80025e6:	f002 f96f 	bl	80048c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f005 fafd 	bl	8007bea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695a      	ldr	r2, [r3, #20]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80025fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f003 facc 	bl	8005ba2 <USB_ReadInterrupts>
 800260a:	4603      	mov	r3, r0
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b08      	cmp	r3, #8
 8002612:	d10a      	bne.n	800262a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f005 fada 	bl	8007bce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695a      	ldr	r2, [r3, #20]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f002 0208 	and.w	r2, r2, #8
 8002628:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f003 fab7 	bl	8005ba2 <USB_ReadInterrupts>
 8002634:	4603      	mov	r3, r0
 8002636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800263a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800263e:	d10f      	bne.n	8002660 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4619      	mov	r1, r3
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f005 fb32 	bl	8007cb4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800265e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f003 fa9c 	bl	8005ba2 <USB_ReadInterrupts>
 800266a:	4603      	mov	r3, r0
 800266c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002670:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002674:	d10f      	bne.n	8002696 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	b2db      	uxtb	r3, r3
 800267e:	4619      	mov	r1, r3
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f005 fb05 	bl	8007c90 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002694:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f003 fa81 	bl	8005ba2 <USB_ReadInterrupts>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80026a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026aa:	d10a      	bne.n	80026c2 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f005 fb13 	bl	8007cd8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80026c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f003 fa6b 	bl	8005ba2 <USB_ReadInterrupts>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d115      	bne.n	8002702 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f005 fb03 	bl	8007cf4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6859      	ldr	r1, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	e000      	b.n	8002702 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002700:	bf00      	nop
    }
  }
}
 8002702:	3734      	adds	r7, #52	; 0x34
 8002704:	46bd      	mov	sp, r7
 8002706:	bd90      	pop	{r4, r7, pc}

08002708 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_PCD_SetAddress+0x1a>
 800271e:	2302      	movs	r3, #2
 8002720:	e013      	b.n	800274a <HAL_PCD_SetAddress+0x42>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	78fa      	ldrb	r2, [r7, #3]
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f003 f9c9 	bl	8005ad2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	4608      	mov	r0, r1
 800275c:	4611      	mov	r1, r2
 800275e:	461a      	mov	r2, r3
 8002760:	4603      	mov	r3, r0
 8002762:	70fb      	strb	r3, [r7, #3]
 8002764:	460b      	mov	r3, r1
 8002766:	803b      	strh	r3, [r7, #0]
 8002768:	4613      	mov	r3, r2
 800276a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002774:	2b00      	cmp	r3, #0
 8002776:	da0f      	bge.n	8002798 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	f003 020f 	and.w	r2, r3, #15
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	1a9b      	subs	r3, r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	3338      	adds	r3, #56	; 0x38
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	4413      	add	r3, r2
 800278c:	3304      	adds	r3, #4
 800278e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2201      	movs	r2, #1
 8002794:	705a      	strb	r2, [r3, #1]
 8002796:	e00f      	b.n	80027b8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	f003 020f 	and.w	r2, r3, #15
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	3304      	adds	r3, #4
 80027b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027c4:	883a      	ldrh	r2, [r7, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	78ba      	ldrb	r2, [r7, #2]
 80027ce:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	785b      	ldrb	r3, [r3, #1]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d004      	beq.n	80027e2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027e2:	78bb      	ldrb	r3, [r7, #2]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d102      	bne.n	80027ee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_PCD_EP_Open+0xaa>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e00e      	b.n	800281a <HAL_PCD_EP_Open+0xc8>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68f9      	ldr	r1, [r7, #12]
 800280a:	4618      	mov	r0, r3
 800280c:	f002 fb34 	bl	8004e78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002818:	7afb      	ldrb	r3, [r7, #11]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	460b      	mov	r3, r1
 800282c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800282e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002832:	2b00      	cmp	r3, #0
 8002834:	da0f      	bge.n	8002856 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002836:	78fb      	ldrb	r3, [r7, #3]
 8002838:	f003 020f 	and.w	r2, r3, #15
 800283c:	4613      	mov	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	1a9b      	subs	r3, r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	3338      	adds	r3, #56	; 0x38
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	3304      	adds	r3, #4
 800284c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2201      	movs	r2, #1
 8002852:	705a      	strb	r2, [r3, #1]
 8002854:	e00f      	b.n	8002876 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	f003 020f 	and.w	r2, r3, #15
 800285c:	4613      	mov	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	4413      	add	r3, r2
 800286c:	3304      	adds	r3, #4
 800286e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002876:	78fb      	ldrb	r3, [r7, #3]
 8002878:	f003 030f 	and.w	r3, r3, #15
 800287c:	b2da      	uxtb	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002888:	2b01      	cmp	r3, #1
 800288a:	d101      	bne.n	8002890 <HAL_PCD_EP_Close+0x6e>
 800288c:	2302      	movs	r3, #2
 800288e:	e00e      	b.n	80028ae <HAL_PCD_EP_Close+0x8c>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68f9      	ldr	r1, [r7, #12]
 800289e:	4618      	mov	r0, r3
 80028a0:	f002 fb72 	bl	8004f88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b086      	sub	sp, #24
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	607a      	str	r2, [r7, #4]
 80028c0:	603b      	str	r3, [r7, #0]
 80028c2:	460b      	mov	r3, r1
 80028c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028c6:	7afb      	ldrb	r3, [r7, #11]
 80028c8:	f003 020f 	and.w	r2, r3, #15
 80028cc:	4613      	mov	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4413      	add	r3, r2
 80028dc:	3304      	adds	r3, #4
 80028de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	2200      	movs	r2, #0
 80028f0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2200      	movs	r2, #0
 80028f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028f8:	7afb      	ldrb	r3, [r7, #11]
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d102      	bne.n	8002912 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002912:	7afb      	ldrb	r3, [r7, #11]
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	2b00      	cmp	r3, #0
 800291a:	d109      	bne.n	8002930 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6818      	ldr	r0, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	461a      	mov	r2, r3
 8002928:	6979      	ldr	r1, [r7, #20]
 800292a:	f002 fe4d 	bl	80055c8 <USB_EP0StartXfer>
 800292e:	e008      	b.n	8002942 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	6979      	ldr	r1, [r7, #20]
 800293e:	f002 fbff 	bl	8005140 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	f003 020f 	and.w	r2, r3, #15
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800296e:	681b      	ldr	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	460b      	mov	r3, r1
 800298a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800298c:	7afb      	ldrb	r3, [r7, #11]
 800298e:	f003 020f 	and.w	r2, r3, #15
 8002992:	4613      	mov	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	3338      	adds	r3, #56	; 0x38
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4413      	add	r3, r2
 80029a0:	3304      	adds	r3, #4
 80029a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2200      	movs	r2, #0
 80029b4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2201      	movs	r2, #1
 80029ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029bc:	7afb      	ldrb	r3, [r7, #11]
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d102      	bne.n	80029d6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029d6:	7afb      	ldrb	r3, [r7, #11]
 80029d8:	f003 030f 	and.w	r3, r3, #15
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d109      	bne.n	80029f4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	461a      	mov	r2, r3
 80029ec:	6979      	ldr	r1, [r7, #20]
 80029ee:	f002 fdeb 	bl	80055c8 <USB_EP0StartXfer>
 80029f2:	e008      	b.n	8002a06 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	6979      	ldr	r1, [r7, #20]
 8002a02:	f002 fb9d 	bl	8005140 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	f003 020f 	and.w	r2, r3, #15
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d901      	bls.n	8002a2e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e050      	b.n	8002ad0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	da0f      	bge.n	8002a56 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	f003 020f 	and.w	r2, r3, #15
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	3338      	adds	r3, #56	; 0x38
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	4413      	add	r3, r2
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2201      	movs	r2, #1
 8002a52:	705a      	strb	r2, [r3, #1]
 8002a54:	e00d      	b.n	8002a72 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	4413      	add	r3, r2
 8002a68:	3304      	adds	r3, #4
 8002a6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2201      	movs	r2, #1
 8002a76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a78:	78fb      	ldrb	r3, [r7, #3]
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_PCD_EP_SetStall+0x82>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e01e      	b.n	8002ad0 <HAL_PCD_EP_SetStall+0xc0>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68f9      	ldr	r1, [r7, #12]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f002 ff42 	bl	800592a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aa6:	78fb      	ldrb	r3, [r7, #3]
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10a      	bne.n	8002ac6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	b2d9      	uxtb	r1, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	f003 f933 	bl	8005d2c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	f003 020f 	and.w	r2, r3, #15
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d901      	bls.n	8002af6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e042      	b.n	8002b7c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002af6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	da0f      	bge.n	8002b1e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002afe:	78fb      	ldrb	r3, [r7, #3]
 8002b00:	f003 020f 	and.w	r2, r3, #15
 8002b04:	4613      	mov	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	3338      	adds	r3, #56	; 0x38
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	3304      	adds	r3, #4
 8002b14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	705a      	strb	r2, [r3, #1]
 8002b1c:	e00f      	b.n	8002b3e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b1e:	78fb      	ldrb	r3, [r7, #3]
 8002b20:	f003 020f 	and.w	r2, r3, #15
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	4413      	add	r3, r2
 8002b34:	3304      	adds	r3, #4
 8002b36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b44:	78fb      	ldrb	r3, [r7, #3]
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_PCD_EP_ClrStall+0x86>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e00e      	b.n	8002b7c <HAL_PCD_EP_ClrStall+0xa4>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68f9      	ldr	r1, [r7, #12]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f002 ff4a 	bl	8005a06 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	; 0x28
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	1a9b      	subs	r3, r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	3338      	adds	r3, #56	; 0x38
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3304      	adds	r3, #4
 8002baa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	699a      	ldr	r2, [r3, #24]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d901      	bls.n	8002bbc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e06c      	b.n	8002c96 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d902      	bls.n	8002bd8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	3303      	adds	r3, #3
 8002bdc:	089b      	lsrs	r3, r3, #2
 8002bde:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002be0:	e02b      	b.n	8002c3a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d902      	bls.n	8002bfe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3303      	adds	r3, #3
 8002c02:	089b      	lsrs	r3, r3, #2
 8002c04:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	68d9      	ldr	r1, [r3, #12]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	6978      	ldr	r0, [r7, #20]
 8002c1e:	f002 fe26 	bl	800586e <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	441a      	add	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	699a      	ldr	r2, [r3, #24]
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	441a      	add	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d809      	bhi.n	8002c64 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	699a      	ldr	r2, [r3, #24]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d203      	bcs.n	8002c64 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1be      	bne.n	8002be2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d811      	bhi.n	8002c94 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	2201      	movs	r2, #1
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	6939      	ldr	r1, [r7, #16]
 8002c8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c90:	4013      	ands	r3, r2
 8002c92:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3720      	adds	r7, #32
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	333c      	adds	r3, #60	; 0x3c
 8002cb8:	3304      	adds	r3, #4
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	f040 80a0 	bne.w	8002e18 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d015      	beq.n	8002d0e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4a72      	ldr	r2, [pc, #456]	; (8002eb0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	f240 80dd 	bls.w	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 80d7 	beq.w	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d04:	461a      	mov	r2, r3
 8002d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d0a:	6093      	str	r3, [r2, #8]
 8002d0c:	e0cb      	b.n	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d009      	beq.n	8002d2c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d24:	461a      	mov	r2, r3
 8002d26:	2320      	movs	r3, #32
 8002d28:	6093      	str	r3, [r2, #8]
 8002d2a:	e0bc      	b.n	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f040 80b7 	bne.w	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4a5d      	ldr	r2, [pc, #372]	; (8002eb0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d90f      	bls.n	8002d60 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d56:	461a      	mov	r2, r3
 8002d58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d5c:	6093      	str	r3, [r2, #8]
 8002d5e:	e0a2      	b.n	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d72:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	0159      	lsls	r1, r3, #5
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	440b      	add	r3, r1
 8002d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002d86:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4403      	add	r3, r0
 8002d96:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002d9a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002dae:	6819      	ldr	r1, [r3, #0]
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	4613      	mov	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4403      	add	r3, r0
 8002dbe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4419      	add	r1, r3
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4403      	add	r3, r0
 8002dd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002dd8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d114      	bne.n	8002e0a <PCD_EP_OutXfrComplete_int+0x16a>
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	4613      	mov	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d108      	bne.n	8002e0a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6818      	ldr	r0, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e02:	461a      	mov	r2, r3
 8002e04:	2101      	movs	r1, #1
 8002e06:	f002 ff91 	bl	8005d2c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	4619      	mov	r1, r3
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f004 fea7 	bl	8007b64 <HAL_PCD_DataOutStageCallback>
 8002e16:	e046      	b.n	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4a26      	ldr	r2, [pc, #152]	; (8002eb4 <PCD_EP_OutXfrComplete_int+0x214>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d124      	bne.n	8002e6a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00a      	beq.n	8002e40 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e36:	461a      	mov	r2, r3
 8002e38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e3c:	6093      	str	r3, [r2, #8]
 8002e3e:	e032      	b.n	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f003 0320 	and.w	r3, r3, #32
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d008      	beq.n	8002e5c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e56:	461a      	mov	r2, r3
 8002e58:	2320      	movs	r3, #32
 8002e5a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	4619      	mov	r1, r3
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f004 fe7e 	bl	8007b64 <HAL_PCD_DataOutStageCallback>
 8002e68:	e01d      	b.n	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d114      	bne.n	8002e9a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	4613      	mov	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d108      	bne.n	8002e9a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e92:	461a      	mov	r2, r3
 8002e94:	2100      	movs	r1, #0
 8002e96:	f002 ff49 	bl	8005d2c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f004 fe5f 	bl	8007b64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	4f54300a 	.word	0x4f54300a
 8002eb4:	4f54310a 	.word	0x4f54310a

08002eb8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	333c      	adds	r3, #60	; 0x3c
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4a15      	ldr	r2, [pc, #84]	; (8002f40 <PCD_EP_OutSetupPacket_int+0x88>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d90e      	bls.n	8002f0c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d009      	beq.n	8002f0c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f04:	461a      	mov	r2, r3
 8002f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f0a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f004 fe17 	bl	8007b40 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d90c      	bls.n	8002f34 <PCD_EP_OutSetupPacket_int+0x7c>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d108      	bne.n	8002f34 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2101      	movs	r1, #1
 8002f30:	f002 fefc 	bl	8005d2c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	4f54300a 	.word	0x4f54300a

08002f44 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	70fb      	strb	r3, [r7, #3]
 8002f50:	4613      	mov	r3, r2
 8002f52:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d107      	bne.n	8002f72 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f62:	883b      	ldrh	r3, [r7, #0]
 8002f64:	0419      	lsls	r1, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f70:	e028      	b.n	8002fc4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	0c1b      	lsrs	r3, r3, #16
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f80:	2300      	movs	r3, #0
 8002f82:	73fb      	strb	r3, [r7, #15]
 8002f84:	e00d      	b.n	8002fa2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	3340      	adds	r3, #64	; 0x40
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	4413      	add	r3, r2
 8002f9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
 8002fa2:	7bfa      	ldrb	r2, [r7, #15]
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d3ec      	bcc.n	8002f86 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002fac:	883b      	ldrh	r3, [r7, #0]
 8002fae:	0418      	lsls	r0, r3, #16
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6819      	ldr	r1, [r3, #0]
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	4302      	orrs	r2, r0
 8002fbc:	3340      	adds	r3, #64	; 0x40
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	887a      	ldrh	r2, [r7, #2]
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e25b      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d075      	beq.n	8003116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800302a:	4ba3      	ldr	r3, [pc, #652]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b04      	cmp	r3, #4
 8003034:	d00c      	beq.n	8003050 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003036:	4ba0      	ldr	r3, [pc, #640]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800303e:	2b08      	cmp	r3, #8
 8003040:	d112      	bne.n	8003068 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003042:	4b9d      	ldr	r3, [pc, #628]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800304e:	d10b      	bne.n	8003068 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	4b99      	ldr	r3, [pc, #612]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d05b      	beq.n	8003114 <HAL_RCC_OscConfig+0x108>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d157      	bne.n	8003114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e236      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003070:	d106      	bne.n	8003080 <HAL_RCC_OscConfig+0x74>
 8003072:	4b91      	ldr	r3, [pc, #580]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a90      	ldr	r2, [pc, #576]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e01d      	b.n	80030bc <HAL_RCC_OscConfig+0xb0>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x98>
 800308a:	4b8b      	ldr	r3, [pc, #556]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a8a      	ldr	r2, [pc, #552]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4b88      	ldr	r3, [pc, #544]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a87      	ldr	r2, [pc, #540]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800309c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e00b      	b.n	80030bc <HAL_RCC_OscConfig+0xb0>
 80030a4:	4b84      	ldr	r3, [pc, #528]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a83      	ldr	r2, [pc, #524]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80030aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4b81      	ldr	r3, [pc, #516]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a80      	ldr	r2, [pc, #512]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80030b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d013      	beq.n	80030ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7fd ff7e 	bl	8000fc4 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030cc:	f7fd ff7a 	bl	8000fc4 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e1fb      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	4b76      	ldr	r3, [pc, #472]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0xc0>
 80030ea:	e014      	b.n	8003116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7fd ff6a 	bl	8000fc4 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f4:	f7fd ff66 	bl	8000fc4 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	; 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e1e7      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003106:	4b6c      	ldr	r3, [pc, #432]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0xe8>
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d063      	beq.n	80031ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003122:	4b65      	ldr	r3, [pc, #404]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800312e:	4b62      	ldr	r3, [pc, #392]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003136:	2b08      	cmp	r3, #8
 8003138:	d11c      	bne.n	8003174 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313a:	4b5f      	ldr	r3, [pc, #380]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d116      	bne.n	8003174 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003146:	4b5c      	ldr	r3, [pc, #368]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_RCC_OscConfig+0x152>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d001      	beq.n	800315e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e1bb      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315e:	4b56      	ldr	r3, [pc, #344]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4952      	ldr	r1, [pc, #328]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003172:	e03a      	b.n	80031ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d020      	beq.n	80031be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800317c:	4b4f      	ldr	r3, [pc, #316]	; (80032bc <HAL_RCC_OscConfig+0x2b0>)
 800317e:	2201      	movs	r2, #1
 8003180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003182:	f7fd ff1f 	bl	8000fc4 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800318a:	f7fd ff1b 	bl	8000fc4 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e19c      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319c:	4b46      	ldr	r3, [pc, #280]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a8:	4b43      	ldr	r3, [pc, #268]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4940      	ldr	r1, [pc, #256]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	600b      	str	r3, [r1, #0]
 80031bc:	e015      	b.n	80031ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031be:	4b3f      	ldr	r3, [pc, #252]	; (80032bc <HAL_RCC_OscConfig+0x2b0>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7fd fefe 	bl	8000fc4 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031cc:	f7fd fefa 	bl	8000fc4 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e17b      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031de:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d030      	beq.n	8003258 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d016      	beq.n	800322c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fe:	4b30      	ldr	r3, [pc, #192]	; (80032c0 <HAL_RCC_OscConfig+0x2b4>)
 8003200:	2201      	movs	r2, #1
 8003202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7fd fede 	bl	8000fc4 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800320c:	f7fd feda 	bl	8000fc4 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e15b      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321e:	4b26      	ldr	r3, [pc, #152]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x200>
 800322a:	e015      	b.n	8003258 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800322c:	4b24      	ldr	r3, [pc, #144]	; (80032c0 <HAL_RCC_OscConfig+0x2b4>)
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003232:	f7fd fec7 	bl	8000fc4 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800323a:	f7fd fec3 	bl	8000fc4 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e144      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800324c:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800324e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f0      	bne.n	800323a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80a0 	beq.w	80033a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003266:	2300      	movs	r3, #0
 8003268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800326a:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10f      	bne.n	8003296 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	4a0e      	ldr	r2, [pc, #56]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003284:	6413      	str	r3, [r2, #64]	; 0x40
 8003286:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003292:	2301      	movs	r3, #1
 8003294:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003296:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <HAL_RCC_OscConfig+0x2b8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d121      	bne.n	80032e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a2:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <HAL_RCC_OscConfig+0x2b8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a07      	ldr	r2, [pc, #28]	; (80032c4 <HAL_RCC_OscConfig+0x2b8>)
 80032a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ae:	f7fd fe89 	bl	8000fc4 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b4:	e011      	b.n	80032da <HAL_RCC_OscConfig+0x2ce>
 80032b6:	bf00      	nop
 80032b8:	40023800 	.word	0x40023800
 80032bc:	42470000 	.word	0x42470000
 80032c0:	42470e80 	.word	0x42470e80
 80032c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c8:	f7fd fe7c 	bl	8000fc4 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e0fd      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032da:	4b81      	ldr	r3, [pc, #516]	; (80034e0 <HAL_RCC_OscConfig+0x4d4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d106      	bne.n	80032fc <HAL_RCC_OscConfig+0x2f0>
 80032ee:	4b7d      	ldr	r3, [pc, #500]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f2:	4a7c      	ldr	r2, [pc, #496]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	6713      	str	r3, [r2, #112]	; 0x70
 80032fa:	e01c      	b.n	8003336 <HAL_RCC_OscConfig+0x32a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b05      	cmp	r3, #5
 8003302:	d10c      	bne.n	800331e <HAL_RCC_OscConfig+0x312>
 8003304:	4b77      	ldr	r3, [pc, #476]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	4a76      	ldr	r2, [pc, #472]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 800330a:	f043 0304 	orr.w	r3, r3, #4
 800330e:	6713      	str	r3, [r2, #112]	; 0x70
 8003310:	4b74      	ldr	r3, [pc, #464]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003314:	4a73      	ldr	r2, [pc, #460]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	6713      	str	r3, [r2, #112]	; 0x70
 800331c:	e00b      	b.n	8003336 <HAL_RCC_OscConfig+0x32a>
 800331e:	4b71      	ldr	r3, [pc, #452]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	4a70      	ldr	r2, [pc, #448]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	6713      	str	r3, [r2, #112]	; 0x70
 800332a:	4b6e      	ldr	r3, [pc, #440]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	4a6d      	ldr	r2, [pc, #436]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 8003330:	f023 0304 	bic.w	r3, r3, #4
 8003334:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d015      	beq.n	800336a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333e:	f7fd fe41 	bl	8000fc4 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003344:	e00a      	b.n	800335c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003346:	f7fd fe3d 	bl	8000fc4 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f241 3288 	movw	r2, #5000	; 0x1388
 8003354:	4293      	cmp	r3, r2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e0bc      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335c:	4b61      	ldr	r3, [pc, #388]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0ee      	beq.n	8003346 <HAL_RCC_OscConfig+0x33a>
 8003368:	e014      	b.n	8003394 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336a:	f7fd fe2b 	bl	8000fc4 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003370:	e00a      	b.n	8003388 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003372:	f7fd fe27 	bl	8000fc4 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003380:	4293      	cmp	r3, r2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e0a6      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003388:	4b56      	ldr	r3, [pc, #344]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1ee      	bne.n	8003372 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003394:	7dfb      	ldrb	r3, [r7, #23]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d105      	bne.n	80033a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800339a:	4b52      	ldr	r3, [pc, #328]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	4a51      	ldr	r2, [pc, #324]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 80033a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 8092 	beq.w	80034d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033b0:	4b4c      	ldr	r3, [pc, #304]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 030c 	and.w	r3, r3, #12
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d05c      	beq.n	8003476 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d141      	bne.n	8003448 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c4:	4b48      	ldr	r3, [pc, #288]	; (80034e8 <HAL_RCC_OscConfig+0x4dc>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ca:	f7fd fdfb 	bl	8000fc4 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d2:	f7fd fdf7 	bl	8000fc4 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e078      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e4:	4b3f      	ldr	r3, [pc, #252]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1f0      	bne.n	80033d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69da      	ldr	r2, [r3, #28]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	019b      	lsls	r3, r3, #6
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	085b      	lsrs	r3, r3, #1
 8003408:	3b01      	subs	r3, #1
 800340a:	041b      	lsls	r3, r3, #16
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	061b      	lsls	r3, r3, #24
 8003414:	4933      	ldr	r1, [pc, #204]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 8003416:	4313      	orrs	r3, r2
 8003418:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800341a:	4b33      	ldr	r3, [pc, #204]	; (80034e8 <HAL_RCC_OscConfig+0x4dc>)
 800341c:	2201      	movs	r2, #1
 800341e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7fd fdd0 	bl	8000fc4 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003428:	f7fd fdcc 	bl	8000fc4 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e04d      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343a:	4b2a      	ldr	r3, [pc, #168]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0x41c>
 8003446:	e045      	b.n	80034d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003448:	4b27      	ldr	r3, [pc, #156]	; (80034e8 <HAL_RCC_OscConfig+0x4dc>)
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344e:	f7fd fdb9 	bl	8000fc4 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003456:	f7fd fdb5 	bl	8000fc4 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e036      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003468:	4b1e      	ldr	r3, [pc, #120]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1f0      	bne.n	8003456 <HAL_RCC_OscConfig+0x44a>
 8003474:	e02e      	b.n	80034d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e029      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003482:	4b18      	ldr	r3, [pc, #96]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	429a      	cmp	r2, r3
 8003494:	d11c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d115      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034aa:	4013      	ands	r3, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d10d      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034be:	429a      	cmp	r2, r3
 80034c0:	d106      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d001      	beq.n	80034d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40007000 	.word	0x40007000
 80034e4:	40023800 	.word	0x40023800
 80034e8:	42470060 	.word	0x42470060

080034ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0cc      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003500:	4b68      	ldr	r3, [pc, #416]	; (80036a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d90c      	bls.n	8003528 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350e:	4b65      	ldr	r3, [pc, #404]	; (80036a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003516:	4b63      	ldr	r3, [pc, #396]	; (80036a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0b8      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d020      	beq.n	8003576 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003540:	4b59      	ldr	r3, [pc, #356]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	4a58      	ldr	r2, [pc, #352]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800354a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003558:	4b53      	ldr	r3, [pc, #332]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	4a52      	ldr	r2, [pc, #328]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003562:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003564:	4b50      	ldr	r3, [pc, #320]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	494d      	ldr	r1, [pc, #308]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d044      	beq.n	800360c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d107      	bne.n	800359a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358a:	4b47      	ldr	r3, [pc, #284]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d119      	bne.n	80035ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e07f      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d003      	beq.n	80035aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d107      	bne.n	80035ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035aa:	4b3f      	ldr	r3, [pc, #252]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e06f      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ba:	4b3b      	ldr	r3, [pc, #236]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e067      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ca:	4b37      	ldr	r3, [pc, #220]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f023 0203 	bic.w	r2, r3, #3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	4934      	ldr	r1, [pc, #208]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035dc:	f7fd fcf2 	bl	8000fc4 <HAL_GetTick>
 80035e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e2:	e00a      	b.n	80035fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e4:	f7fd fcee 	bl	8000fc4 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e04f      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fa:	4b2b      	ldr	r3, [pc, #172]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 020c 	and.w	r2, r3, #12
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	429a      	cmp	r2, r3
 800360a:	d1eb      	bne.n	80035e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800360c:	4b25      	ldr	r3, [pc, #148]	; (80036a4 <HAL_RCC_ClockConfig+0x1b8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 030f 	and.w	r3, r3, #15
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d20c      	bcs.n	8003634 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361a:	4b22      	ldr	r3, [pc, #136]	; (80036a4 <HAL_RCC_ClockConfig+0x1b8>)
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003622:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d001      	beq.n	8003634 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e032      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003640:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4916      	ldr	r1, [pc, #88]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	4313      	orrs	r3, r2
 8003650:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d009      	beq.n	8003672 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800365e:	4b12      	ldr	r3, [pc, #72]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	490e      	ldr	r1, [pc, #56]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	4313      	orrs	r3, r2
 8003670:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003672:	f000 f821 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 8003676:	4601      	mov	r1, r0
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	091b      	lsrs	r3, r3, #4
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	4a0a      	ldr	r2, [pc, #40]	; (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 8003684:	5cd3      	ldrb	r3, [r2, r3]
 8003686:	fa21 f303 	lsr.w	r3, r1, r3
 800368a:	4a09      	ldr	r2, [pc, #36]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 800368c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800368e:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fd fc52 	bl	8000f3c <HAL_InitTick>

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40023c00 	.word	0x40023c00
 80036a8:	40023800 	.word	0x40023800
 80036ac:	08008304 	.word	0x08008304
 80036b0:	20000000 	.word	0x20000000
 80036b4:	20000004 	.word	0x20000004

080036b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	607b      	str	r3, [r7, #4]
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	2300      	movs	r3, #0
 80036c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ce:	4b63      	ldr	r3, [pc, #396]	; (800385c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d007      	beq.n	80036ea <HAL_RCC_GetSysClockFreq+0x32>
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d008      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0x38>
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f040 80b4 	bne.w	800384c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036e4:	4b5e      	ldr	r3, [pc, #376]	; (8003860 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036e6:	60bb      	str	r3, [r7, #8]
       break;
 80036e8:	e0b3      	b.n	8003852 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ea:	4b5e      	ldr	r3, [pc, #376]	; (8003864 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80036ec:	60bb      	str	r3, [r7, #8]
      break;
 80036ee:	e0b0      	b.n	8003852 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036f0:	4b5a      	ldr	r3, [pc, #360]	; (800385c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036fa:	4b58      	ldr	r3, [pc, #352]	; (800385c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d04a      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003706:	4b55      	ldr	r3, [pc, #340]	; (800385c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	099b      	lsrs	r3, r3, #6
 800370c:	f04f 0400 	mov.w	r4, #0
 8003710:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	ea03 0501 	and.w	r5, r3, r1
 800371c:	ea04 0602 	and.w	r6, r4, r2
 8003720:	4629      	mov	r1, r5
 8003722:	4632      	mov	r2, r6
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	f04f 0400 	mov.w	r4, #0
 800372c:	0154      	lsls	r4, r2, #5
 800372e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003732:	014b      	lsls	r3, r1, #5
 8003734:	4619      	mov	r1, r3
 8003736:	4622      	mov	r2, r4
 8003738:	1b49      	subs	r1, r1, r5
 800373a:	eb62 0206 	sbc.w	r2, r2, r6
 800373e:	f04f 0300 	mov.w	r3, #0
 8003742:	f04f 0400 	mov.w	r4, #0
 8003746:	0194      	lsls	r4, r2, #6
 8003748:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800374c:	018b      	lsls	r3, r1, #6
 800374e:	1a5b      	subs	r3, r3, r1
 8003750:	eb64 0402 	sbc.w	r4, r4, r2
 8003754:	f04f 0100 	mov.w	r1, #0
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	00e2      	lsls	r2, r4, #3
 800375e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003762:	00d9      	lsls	r1, r3, #3
 8003764:	460b      	mov	r3, r1
 8003766:	4614      	mov	r4, r2
 8003768:	195b      	adds	r3, r3, r5
 800376a:	eb44 0406 	adc.w	r4, r4, r6
 800376e:	f04f 0100 	mov.w	r1, #0
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	0262      	lsls	r2, r4, #9
 8003778:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800377c:	0259      	lsls	r1, r3, #9
 800377e:	460b      	mov	r3, r1
 8003780:	4614      	mov	r4, r2
 8003782:	4618      	mov	r0, r3
 8003784:	4621      	mov	r1, r4
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f04f 0400 	mov.w	r4, #0
 800378c:	461a      	mov	r2, r3
 800378e:	4623      	mov	r3, r4
 8003790:	f7fc fd2a 	bl	80001e8 <__aeabi_uldivmod>
 8003794:	4603      	mov	r3, r0
 8003796:	460c      	mov	r4, r1
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	e049      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800379c:	4b2f      	ldr	r3, [pc, #188]	; (800385c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	099b      	lsrs	r3, r3, #6
 80037a2:	f04f 0400 	mov.w	r4, #0
 80037a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	ea03 0501 	and.w	r5, r3, r1
 80037b2:	ea04 0602 	and.w	r6, r4, r2
 80037b6:	4629      	mov	r1, r5
 80037b8:	4632      	mov	r2, r6
 80037ba:	f04f 0300 	mov.w	r3, #0
 80037be:	f04f 0400 	mov.w	r4, #0
 80037c2:	0154      	lsls	r4, r2, #5
 80037c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037c8:	014b      	lsls	r3, r1, #5
 80037ca:	4619      	mov	r1, r3
 80037cc:	4622      	mov	r2, r4
 80037ce:	1b49      	subs	r1, r1, r5
 80037d0:	eb62 0206 	sbc.w	r2, r2, r6
 80037d4:	f04f 0300 	mov.w	r3, #0
 80037d8:	f04f 0400 	mov.w	r4, #0
 80037dc:	0194      	lsls	r4, r2, #6
 80037de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037e2:	018b      	lsls	r3, r1, #6
 80037e4:	1a5b      	subs	r3, r3, r1
 80037e6:	eb64 0402 	sbc.w	r4, r4, r2
 80037ea:	f04f 0100 	mov.w	r1, #0
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	00e2      	lsls	r2, r4, #3
 80037f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037f8:	00d9      	lsls	r1, r3, #3
 80037fa:	460b      	mov	r3, r1
 80037fc:	4614      	mov	r4, r2
 80037fe:	195b      	adds	r3, r3, r5
 8003800:	eb44 0406 	adc.w	r4, r4, r6
 8003804:	f04f 0100 	mov.w	r1, #0
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	02a2      	lsls	r2, r4, #10
 800380e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003812:	0299      	lsls	r1, r3, #10
 8003814:	460b      	mov	r3, r1
 8003816:	4614      	mov	r4, r2
 8003818:	4618      	mov	r0, r3
 800381a:	4621      	mov	r1, r4
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f04f 0400 	mov.w	r4, #0
 8003822:	461a      	mov	r2, r3
 8003824:	4623      	mov	r3, r4
 8003826:	f7fc fcdf 	bl	80001e8 <__aeabi_uldivmod>
 800382a:	4603      	mov	r3, r0
 800382c:	460c      	mov	r4, r1
 800382e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003830:	4b0a      	ldr	r3, [pc, #40]	; (800385c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	0c1b      	lsrs	r3, r3, #16
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	3301      	adds	r3, #1
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	fbb2 f3f3 	udiv	r3, r2, r3
 8003848:	60bb      	str	r3, [r7, #8]
      break;
 800384a:	e002      	b.n	8003852 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800384c:	4b04      	ldr	r3, [pc, #16]	; (8003860 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800384e:	60bb      	str	r3, [r7, #8]
      break;
 8003850:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003852:	68bb      	ldr	r3, [r7, #8]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800385c:	40023800 	.word	0x40023800
 8003860:	00f42400 	.word	0x00f42400
 8003864:	007a1200 	.word	0x007a1200

08003868 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800386c:	4b03      	ldr	r3, [pc, #12]	; (800387c <HAL_RCC_GetHCLKFreq+0x14>)
 800386e:	681b      	ldr	r3, [r3, #0]
}
 8003870:	4618      	mov	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	20000000 	.word	0x20000000

08003880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003884:	f7ff fff0 	bl	8003868 <HAL_RCC_GetHCLKFreq>
 8003888:	4601      	mov	r1, r0
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	0a9b      	lsrs	r3, r3, #10
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	4a03      	ldr	r2, [pc, #12]	; (80038a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003896:	5cd3      	ldrb	r3, [r2, r3]
 8003898:	fa21 f303 	lsr.w	r3, r1, r3
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40023800 	.word	0x40023800
 80038a4:	08008314 	.word	0x08008314

080038a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038ac:	f7ff ffdc 	bl	8003868 <HAL_RCC_GetHCLKFreq>
 80038b0:	4601      	mov	r1, r0
 80038b2:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	0b5b      	lsrs	r3, r3, #13
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	4a03      	ldr	r2, [pc, #12]	; (80038cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038be:	5cd3      	ldrb	r3, [r2, r3]
 80038c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40023800 	.word	0x40023800
 80038cc:	08008314 	.word	0x08008314

080038d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e056      	b.n	8003990 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d106      	bne.n	8003902 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7fd f949 	bl	8000b94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2202      	movs	r2, #2
 8003906:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003918:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	431a      	orrs	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	ea42 0103 	orr.w	r1, r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	0c1b      	lsrs	r3, r3, #16
 8003960:	f003 0104 	and.w	r1, r3, #4
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69da      	ldr	r2, [r3, #28]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800397e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e01d      	b.n	80039e6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fd f930 	bl	8000c24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
 80039d4:	4619      	mov	r1, r3
 80039d6:	4610      	mov	r0, r2
 80039d8:	f000 f8d0 	bl	8003b7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e0b4      	b.n	8003b74 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2202      	movs	r2, #2
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b0c      	cmp	r3, #12
 8003a1e:	f200 809f 	bhi.w	8003b60 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003a22:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a28:	08003a5d 	.word	0x08003a5d
 8003a2c:	08003b61 	.word	0x08003b61
 8003a30:	08003b61 	.word	0x08003b61
 8003a34:	08003b61 	.word	0x08003b61
 8003a38:	08003a9d 	.word	0x08003a9d
 8003a3c:	08003b61 	.word	0x08003b61
 8003a40:	08003b61 	.word	0x08003b61
 8003a44:	08003b61 	.word	0x08003b61
 8003a48:	08003adf 	.word	0x08003adf
 8003a4c:	08003b61 	.word	0x08003b61
 8003a50:	08003b61 	.word	0x08003b61
 8003a54:	08003b61 	.word	0x08003b61
 8003a58:	08003b1f 	.word	0x08003b1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68b9      	ldr	r1, [r7, #8]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 f90a 	bl	8003c7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0208 	orr.w	r2, r2, #8
 8003a76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0204 	bic.w	r2, r2, #4
 8003a86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6999      	ldr	r1, [r3, #24]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	619a      	str	r2, [r3, #24]
      break;
 8003a9a:	e062      	b.n	8003b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 f950 	bl	8003d48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699a      	ldr	r2, [r3, #24]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6999      	ldr	r1, [r3, #24]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	021a      	lsls	r2, r3, #8
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	619a      	str	r2, [r3, #24]
      break;
 8003adc:	e041      	b.n	8003b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68b9      	ldr	r1, [r7, #8]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 f99b 	bl	8003e20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69da      	ldr	r2, [r3, #28]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0208 	orr.w	r2, r2, #8
 8003af8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0204 	bic.w	r2, r2, #4
 8003b08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69d9      	ldr	r1, [r3, #28]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	61da      	str	r2, [r3, #28]
      break;
 8003b1c:	e021      	b.n	8003b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 f9e5 	bl	8003ef4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69da      	ldr	r2, [r3, #28]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69da      	ldr	r2, [r3, #28]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69d9      	ldr	r1, [r3, #28]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	021a      	lsls	r2, r3, #8
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	61da      	str	r2, [r3, #28]
      break;
 8003b5e:	e000      	b.n	8003b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003b60:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a34      	ldr	r2, [pc, #208]	; (8003c60 <TIM_Base_SetConfig+0xe4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00f      	beq.n	8003bb4 <TIM_Base_SetConfig+0x38>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9a:	d00b      	beq.n	8003bb4 <TIM_Base_SetConfig+0x38>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a31      	ldr	r2, [pc, #196]	; (8003c64 <TIM_Base_SetConfig+0xe8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d007      	beq.n	8003bb4 <TIM_Base_SetConfig+0x38>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a30      	ldr	r2, [pc, #192]	; (8003c68 <TIM_Base_SetConfig+0xec>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d003      	beq.n	8003bb4 <TIM_Base_SetConfig+0x38>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a2f      	ldr	r2, [pc, #188]	; (8003c6c <TIM_Base_SetConfig+0xf0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d108      	bne.n	8003bc6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a25      	ldr	r2, [pc, #148]	; (8003c60 <TIM_Base_SetConfig+0xe4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d01b      	beq.n	8003c06 <TIM_Base_SetConfig+0x8a>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd4:	d017      	beq.n	8003c06 <TIM_Base_SetConfig+0x8a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a22      	ldr	r2, [pc, #136]	; (8003c64 <TIM_Base_SetConfig+0xe8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d013      	beq.n	8003c06 <TIM_Base_SetConfig+0x8a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a21      	ldr	r2, [pc, #132]	; (8003c68 <TIM_Base_SetConfig+0xec>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00f      	beq.n	8003c06 <TIM_Base_SetConfig+0x8a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a20      	ldr	r2, [pc, #128]	; (8003c6c <TIM_Base_SetConfig+0xf0>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00b      	beq.n	8003c06 <TIM_Base_SetConfig+0x8a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a1f      	ldr	r2, [pc, #124]	; (8003c70 <TIM_Base_SetConfig+0xf4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d007      	beq.n	8003c06 <TIM_Base_SetConfig+0x8a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a1e      	ldr	r2, [pc, #120]	; (8003c74 <TIM_Base_SetConfig+0xf8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d003      	beq.n	8003c06 <TIM_Base_SetConfig+0x8a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a1d      	ldr	r2, [pc, #116]	; (8003c78 <TIM_Base_SetConfig+0xfc>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d108      	bne.n	8003c18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a08      	ldr	r2, [pc, #32]	; (8003c60 <TIM_Base_SetConfig+0xe4>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d103      	bne.n	8003c4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	615a      	str	r2, [r3, #20]
}
 8003c52:	bf00      	nop
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40010000 	.word	0x40010000
 8003c64:	40000400 	.word	0x40000400
 8003c68:	40000800 	.word	0x40000800
 8003c6c:	40000c00 	.word	0x40000c00
 8003c70:	40014000 	.word	0x40014000
 8003c74:	40014400 	.word	0x40014400
 8003c78:	40014800 	.word	0x40014800

08003c7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	f023 0201 	bic.w	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0303 	bic.w	r3, r3, #3
 8003cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f023 0302 	bic.w	r3, r3, #2
 8003cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a1c      	ldr	r2, [pc, #112]	; (8003d44 <TIM_OC1_SetConfig+0xc8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d10c      	bne.n	8003cf2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f023 0308 	bic.w	r3, r3, #8
 8003cde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f023 0304 	bic.w	r3, r3, #4
 8003cf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a13      	ldr	r2, [pc, #76]	; (8003d44 <TIM_OC1_SetConfig+0xc8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d111      	bne.n	8003d1e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	621a      	str	r2, [r3, #32]
}
 8003d38:	bf00      	nop
 8003d3a:	371c      	adds	r7, #28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	40010000 	.word	0x40010000

08003d48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	f023 0210 	bic.w	r2, r3, #16
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	021b      	lsls	r3, r3, #8
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f023 0320 	bic.w	r3, r3, #32
 8003d92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a1e      	ldr	r2, [pc, #120]	; (8003e1c <TIM_OC2_SetConfig+0xd4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d10d      	bne.n	8003dc4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a15      	ldr	r2, [pc, #84]	; (8003e1c <TIM_OC2_SetConfig+0xd4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d113      	bne.n	8003df4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	621a      	str	r2, [r3, #32]
}
 8003e0e:	bf00      	nop
 8003e10:	371c      	adds	r7, #28
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40010000 	.word	0x40010000

08003e20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0303 	bic.w	r3, r3, #3
 8003e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	021b      	lsls	r3, r3, #8
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a1d      	ldr	r2, [pc, #116]	; (8003ef0 <TIM_OC3_SetConfig+0xd0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d10d      	bne.n	8003e9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	021b      	lsls	r3, r3, #8
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a14      	ldr	r2, [pc, #80]	; (8003ef0 <TIM_OC3_SetConfig+0xd0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d113      	bne.n	8003eca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	621a      	str	r2, [r3, #32]
}
 8003ee4:	bf00      	nop
 8003ee6:	371c      	adds	r7, #28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	40010000 	.word	0x40010000

08003ef4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	021b      	lsls	r3, r3, #8
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	031b      	lsls	r3, r3, #12
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a10      	ldr	r2, [pc, #64]	; (8003f90 <TIM_OC4_SetConfig+0x9c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d109      	bne.n	8003f68 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	019b      	lsls	r3, r3, #6
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	621a      	str	r2, [r3, #32]
}
 8003f82:	bf00      	nop
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40010000 	.word	0x40010000

08003f94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e050      	b.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a1c      	ldr	r2, [pc, #112]	; (800405c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d018      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff8:	d013      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a18      	ldr	r2, [pc, #96]	; (8004060 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00e      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a16      	ldr	r2, [pc, #88]	; (8004064 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d009      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a15      	ldr	r2, [pc, #84]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d004      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a13      	ldr	r2, [pc, #76]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d10c      	bne.n	800403c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004028:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	4313      	orrs	r3, r2
 8004032:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40010000 	.word	0x40010000
 8004060:	40000400 	.word	0x40000400
 8004064:	40000800 	.word	0x40000800
 8004068:	40000c00 	.word	0x40000c00
 800406c:	40014000 	.word	0x40014000

08004070 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e03f      	b.n	8004102 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fc fe3c 	bl	8000d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2224      	movs	r2, #36	; 0x24
 80040a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f829 	bl	800410c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695a      	ldr	r2, [r3, #20]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800410c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004110:	b085      	sub	sp, #20
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	4313      	orrs	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800414e:	f023 030c 	bic.w	r3, r3, #12
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6812      	ldr	r2, [r2, #0]
 8004156:	68f9      	ldr	r1, [r7, #12]
 8004158:	430b      	orrs	r3, r1
 800415a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800417a:	f040 818b 	bne.w	8004494 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4ac1      	ldr	r2, [pc, #772]	; (8004488 <UART_SetConfig+0x37c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d005      	beq.n	8004194 <UART_SetConfig+0x88>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4abf      	ldr	r2, [pc, #764]	; (800448c <UART_SetConfig+0x380>)
 800418e:	4293      	cmp	r3, r2
 8004190:	f040 80bd 	bne.w	800430e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004194:	f7ff fb88 	bl	80038a8 <HAL_RCC_GetPCLK2Freq>
 8004198:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	461d      	mov	r5, r3
 800419e:	f04f 0600 	mov.w	r6, #0
 80041a2:	46a8      	mov	r8, r5
 80041a4:	46b1      	mov	r9, r6
 80041a6:	eb18 0308 	adds.w	r3, r8, r8
 80041aa:	eb49 0409 	adc.w	r4, r9, r9
 80041ae:	4698      	mov	r8, r3
 80041b0:	46a1      	mov	r9, r4
 80041b2:	eb18 0805 	adds.w	r8, r8, r5
 80041b6:	eb49 0906 	adc.w	r9, r9, r6
 80041ba:	f04f 0100 	mov.w	r1, #0
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80041c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80041ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80041ce:	4688      	mov	r8, r1
 80041d0:	4691      	mov	r9, r2
 80041d2:	eb18 0005 	adds.w	r0, r8, r5
 80041d6:	eb49 0106 	adc.w	r1, r9, r6
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	461d      	mov	r5, r3
 80041e0:	f04f 0600 	mov.w	r6, #0
 80041e4:	196b      	adds	r3, r5, r5
 80041e6:	eb46 0406 	adc.w	r4, r6, r6
 80041ea:	461a      	mov	r2, r3
 80041ec:	4623      	mov	r3, r4
 80041ee:	f7fb fffb 	bl	80001e8 <__aeabi_uldivmod>
 80041f2:	4603      	mov	r3, r0
 80041f4:	460c      	mov	r4, r1
 80041f6:	461a      	mov	r2, r3
 80041f8:	4ba5      	ldr	r3, [pc, #660]	; (8004490 <UART_SetConfig+0x384>)
 80041fa:	fba3 2302 	umull	r2, r3, r3, r2
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	461d      	mov	r5, r3
 8004208:	f04f 0600 	mov.w	r6, #0
 800420c:	46a9      	mov	r9, r5
 800420e:	46b2      	mov	sl, r6
 8004210:	eb19 0309 	adds.w	r3, r9, r9
 8004214:	eb4a 040a 	adc.w	r4, sl, sl
 8004218:	4699      	mov	r9, r3
 800421a:	46a2      	mov	sl, r4
 800421c:	eb19 0905 	adds.w	r9, r9, r5
 8004220:	eb4a 0a06 	adc.w	sl, sl, r6
 8004224:	f04f 0100 	mov.w	r1, #0
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004230:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004234:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004238:	4689      	mov	r9, r1
 800423a:	4692      	mov	sl, r2
 800423c:	eb19 0005 	adds.w	r0, r9, r5
 8004240:	eb4a 0106 	adc.w	r1, sl, r6
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	461d      	mov	r5, r3
 800424a:	f04f 0600 	mov.w	r6, #0
 800424e:	196b      	adds	r3, r5, r5
 8004250:	eb46 0406 	adc.w	r4, r6, r6
 8004254:	461a      	mov	r2, r3
 8004256:	4623      	mov	r3, r4
 8004258:	f7fb ffc6 	bl	80001e8 <__aeabi_uldivmod>
 800425c:	4603      	mov	r3, r0
 800425e:	460c      	mov	r4, r1
 8004260:	461a      	mov	r2, r3
 8004262:	4b8b      	ldr	r3, [pc, #556]	; (8004490 <UART_SetConfig+0x384>)
 8004264:	fba3 1302 	umull	r1, r3, r3, r2
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	2164      	movs	r1, #100	; 0x64
 800426c:	fb01 f303 	mul.w	r3, r1, r3
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	3332      	adds	r3, #50	; 0x32
 8004276:	4a86      	ldr	r2, [pc, #536]	; (8004490 <UART_SetConfig+0x384>)
 8004278:	fba2 2303 	umull	r2, r3, r2, r3
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004284:	4498      	add	r8, r3
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	461d      	mov	r5, r3
 800428a:	f04f 0600 	mov.w	r6, #0
 800428e:	46a9      	mov	r9, r5
 8004290:	46b2      	mov	sl, r6
 8004292:	eb19 0309 	adds.w	r3, r9, r9
 8004296:	eb4a 040a 	adc.w	r4, sl, sl
 800429a:	4699      	mov	r9, r3
 800429c:	46a2      	mov	sl, r4
 800429e:	eb19 0905 	adds.w	r9, r9, r5
 80042a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80042a6:	f04f 0100 	mov.w	r1, #0
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042ba:	4689      	mov	r9, r1
 80042bc:	4692      	mov	sl, r2
 80042be:	eb19 0005 	adds.w	r0, r9, r5
 80042c2:	eb4a 0106 	adc.w	r1, sl, r6
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	461d      	mov	r5, r3
 80042cc:	f04f 0600 	mov.w	r6, #0
 80042d0:	196b      	adds	r3, r5, r5
 80042d2:	eb46 0406 	adc.w	r4, r6, r6
 80042d6:	461a      	mov	r2, r3
 80042d8:	4623      	mov	r3, r4
 80042da:	f7fb ff85 	bl	80001e8 <__aeabi_uldivmod>
 80042de:	4603      	mov	r3, r0
 80042e0:	460c      	mov	r4, r1
 80042e2:	461a      	mov	r2, r3
 80042e4:	4b6a      	ldr	r3, [pc, #424]	; (8004490 <UART_SetConfig+0x384>)
 80042e6:	fba3 1302 	umull	r1, r3, r3, r2
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	2164      	movs	r1, #100	; 0x64
 80042ee:	fb01 f303 	mul.w	r3, r1, r3
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	3332      	adds	r3, #50	; 0x32
 80042f8:	4a65      	ldr	r2, [pc, #404]	; (8004490 <UART_SetConfig+0x384>)
 80042fa:	fba2 2303 	umull	r2, r3, r2, r3
 80042fe:	095b      	lsrs	r3, r3, #5
 8004300:	f003 0207 	and.w	r2, r3, #7
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4442      	add	r2, r8
 800430a:	609a      	str	r2, [r3, #8]
 800430c:	e26f      	b.n	80047ee <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800430e:	f7ff fab7 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 8004312:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	461d      	mov	r5, r3
 8004318:	f04f 0600 	mov.w	r6, #0
 800431c:	46a8      	mov	r8, r5
 800431e:	46b1      	mov	r9, r6
 8004320:	eb18 0308 	adds.w	r3, r8, r8
 8004324:	eb49 0409 	adc.w	r4, r9, r9
 8004328:	4698      	mov	r8, r3
 800432a:	46a1      	mov	r9, r4
 800432c:	eb18 0805 	adds.w	r8, r8, r5
 8004330:	eb49 0906 	adc.w	r9, r9, r6
 8004334:	f04f 0100 	mov.w	r1, #0
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004340:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004344:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004348:	4688      	mov	r8, r1
 800434a:	4691      	mov	r9, r2
 800434c:	eb18 0005 	adds.w	r0, r8, r5
 8004350:	eb49 0106 	adc.w	r1, r9, r6
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	461d      	mov	r5, r3
 800435a:	f04f 0600 	mov.w	r6, #0
 800435e:	196b      	adds	r3, r5, r5
 8004360:	eb46 0406 	adc.w	r4, r6, r6
 8004364:	461a      	mov	r2, r3
 8004366:	4623      	mov	r3, r4
 8004368:	f7fb ff3e 	bl	80001e8 <__aeabi_uldivmod>
 800436c:	4603      	mov	r3, r0
 800436e:	460c      	mov	r4, r1
 8004370:	461a      	mov	r2, r3
 8004372:	4b47      	ldr	r3, [pc, #284]	; (8004490 <UART_SetConfig+0x384>)
 8004374:	fba3 2302 	umull	r2, r3, r3, r2
 8004378:	095b      	lsrs	r3, r3, #5
 800437a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	461d      	mov	r5, r3
 8004382:	f04f 0600 	mov.w	r6, #0
 8004386:	46a9      	mov	r9, r5
 8004388:	46b2      	mov	sl, r6
 800438a:	eb19 0309 	adds.w	r3, r9, r9
 800438e:	eb4a 040a 	adc.w	r4, sl, sl
 8004392:	4699      	mov	r9, r3
 8004394:	46a2      	mov	sl, r4
 8004396:	eb19 0905 	adds.w	r9, r9, r5
 800439a:	eb4a 0a06 	adc.w	sl, sl, r6
 800439e:	f04f 0100 	mov.w	r1, #0
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043b2:	4689      	mov	r9, r1
 80043b4:	4692      	mov	sl, r2
 80043b6:	eb19 0005 	adds.w	r0, r9, r5
 80043ba:	eb4a 0106 	adc.w	r1, sl, r6
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	461d      	mov	r5, r3
 80043c4:	f04f 0600 	mov.w	r6, #0
 80043c8:	196b      	adds	r3, r5, r5
 80043ca:	eb46 0406 	adc.w	r4, r6, r6
 80043ce:	461a      	mov	r2, r3
 80043d0:	4623      	mov	r3, r4
 80043d2:	f7fb ff09 	bl	80001e8 <__aeabi_uldivmod>
 80043d6:	4603      	mov	r3, r0
 80043d8:	460c      	mov	r4, r1
 80043da:	461a      	mov	r2, r3
 80043dc:	4b2c      	ldr	r3, [pc, #176]	; (8004490 <UART_SetConfig+0x384>)
 80043de:	fba3 1302 	umull	r1, r3, r3, r2
 80043e2:	095b      	lsrs	r3, r3, #5
 80043e4:	2164      	movs	r1, #100	; 0x64
 80043e6:	fb01 f303 	mul.w	r3, r1, r3
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	3332      	adds	r3, #50	; 0x32
 80043f0:	4a27      	ldr	r2, [pc, #156]	; (8004490 <UART_SetConfig+0x384>)
 80043f2:	fba2 2303 	umull	r2, r3, r2, r3
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043fe:	4498      	add	r8, r3
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	461d      	mov	r5, r3
 8004404:	f04f 0600 	mov.w	r6, #0
 8004408:	46a9      	mov	r9, r5
 800440a:	46b2      	mov	sl, r6
 800440c:	eb19 0309 	adds.w	r3, r9, r9
 8004410:	eb4a 040a 	adc.w	r4, sl, sl
 8004414:	4699      	mov	r9, r3
 8004416:	46a2      	mov	sl, r4
 8004418:	eb19 0905 	adds.w	r9, r9, r5
 800441c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004420:	f04f 0100 	mov.w	r1, #0
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800442c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004430:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004434:	4689      	mov	r9, r1
 8004436:	4692      	mov	sl, r2
 8004438:	eb19 0005 	adds.w	r0, r9, r5
 800443c:	eb4a 0106 	adc.w	r1, sl, r6
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	461d      	mov	r5, r3
 8004446:	f04f 0600 	mov.w	r6, #0
 800444a:	196b      	adds	r3, r5, r5
 800444c:	eb46 0406 	adc.w	r4, r6, r6
 8004450:	461a      	mov	r2, r3
 8004452:	4623      	mov	r3, r4
 8004454:	f7fb fec8 	bl	80001e8 <__aeabi_uldivmod>
 8004458:	4603      	mov	r3, r0
 800445a:	460c      	mov	r4, r1
 800445c:	461a      	mov	r2, r3
 800445e:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <UART_SetConfig+0x384>)
 8004460:	fba3 1302 	umull	r1, r3, r3, r2
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	2164      	movs	r1, #100	; 0x64
 8004468:	fb01 f303 	mul.w	r3, r1, r3
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	3332      	adds	r3, #50	; 0x32
 8004472:	4a07      	ldr	r2, [pc, #28]	; (8004490 <UART_SetConfig+0x384>)
 8004474:	fba2 2303 	umull	r2, r3, r2, r3
 8004478:	095b      	lsrs	r3, r3, #5
 800447a:	f003 0207 	and.w	r2, r3, #7
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4442      	add	r2, r8
 8004484:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004486:	e1b2      	b.n	80047ee <UART_SetConfig+0x6e2>
 8004488:	40011000 	.word	0x40011000
 800448c:	40011400 	.word	0x40011400
 8004490:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4ad7      	ldr	r2, [pc, #860]	; (80047f8 <UART_SetConfig+0x6ec>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d005      	beq.n	80044aa <UART_SetConfig+0x39e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4ad6      	ldr	r2, [pc, #856]	; (80047fc <UART_SetConfig+0x6f0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	f040 80d1 	bne.w	800464c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80044aa:	f7ff f9fd 	bl	80038a8 <HAL_RCC_GetPCLK2Freq>
 80044ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	469a      	mov	sl, r3
 80044b4:	f04f 0b00 	mov.w	fp, #0
 80044b8:	46d0      	mov	r8, sl
 80044ba:	46d9      	mov	r9, fp
 80044bc:	eb18 0308 	adds.w	r3, r8, r8
 80044c0:	eb49 0409 	adc.w	r4, r9, r9
 80044c4:	4698      	mov	r8, r3
 80044c6:	46a1      	mov	r9, r4
 80044c8:	eb18 080a 	adds.w	r8, r8, sl
 80044cc:	eb49 090b 	adc.w	r9, r9, fp
 80044d0:	f04f 0100 	mov.w	r1, #0
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80044dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80044e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80044e4:	4688      	mov	r8, r1
 80044e6:	4691      	mov	r9, r2
 80044e8:	eb1a 0508 	adds.w	r5, sl, r8
 80044ec:	eb4b 0609 	adc.w	r6, fp, r9
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	4619      	mov	r1, r3
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	f04f 0400 	mov.w	r4, #0
 8004502:	0094      	lsls	r4, r2, #2
 8004504:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004508:	008b      	lsls	r3, r1, #2
 800450a:	461a      	mov	r2, r3
 800450c:	4623      	mov	r3, r4
 800450e:	4628      	mov	r0, r5
 8004510:	4631      	mov	r1, r6
 8004512:	f7fb fe69 	bl	80001e8 <__aeabi_uldivmod>
 8004516:	4603      	mov	r3, r0
 8004518:	460c      	mov	r4, r1
 800451a:	461a      	mov	r2, r3
 800451c:	4bb8      	ldr	r3, [pc, #736]	; (8004800 <UART_SetConfig+0x6f4>)
 800451e:	fba3 2302 	umull	r2, r3, r3, r2
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	469b      	mov	fp, r3
 800452c:	f04f 0c00 	mov.w	ip, #0
 8004530:	46d9      	mov	r9, fp
 8004532:	46e2      	mov	sl, ip
 8004534:	eb19 0309 	adds.w	r3, r9, r9
 8004538:	eb4a 040a 	adc.w	r4, sl, sl
 800453c:	4699      	mov	r9, r3
 800453e:	46a2      	mov	sl, r4
 8004540:	eb19 090b 	adds.w	r9, r9, fp
 8004544:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004548:	f04f 0100 	mov.w	r1, #0
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004554:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004558:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800455c:	4689      	mov	r9, r1
 800455e:	4692      	mov	sl, r2
 8004560:	eb1b 0509 	adds.w	r5, fp, r9
 8004564:	eb4c 060a 	adc.w	r6, ip, sl
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	4619      	mov	r1, r3
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	f04f 0400 	mov.w	r4, #0
 800457a:	0094      	lsls	r4, r2, #2
 800457c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004580:	008b      	lsls	r3, r1, #2
 8004582:	461a      	mov	r2, r3
 8004584:	4623      	mov	r3, r4
 8004586:	4628      	mov	r0, r5
 8004588:	4631      	mov	r1, r6
 800458a:	f7fb fe2d 	bl	80001e8 <__aeabi_uldivmod>
 800458e:	4603      	mov	r3, r0
 8004590:	460c      	mov	r4, r1
 8004592:	461a      	mov	r2, r3
 8004594:	4b9a      	ldr	r3, [pc, #616]	; (8004800 <UART_SetConfig+0x6f4>)
 8004596:	fba3 1302 	umull	r1, r3, r3, r2
 800459a:	095b      	lsrs	r3, r3, #5
 800459c:	2164      	movs	r1, #100	; 0x64
 800459e:	fb01 f303 	mul.w	r3, r1, r3
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	3332      	adds	r3, #50	; 0x32
 80045a8:	4a95      	ldr	r2, [pc, #596]	; (8004800 <UART_SetConfig+0x6f4>)
 80045aa:	fba2 2303 	umull	r2, r3, r2, r3
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045b4:	4498      	add	r8, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	469b      	mov	fp, r3
 80045ba:	f04f 0c00 	mov.w	ip, #0
 80045be:	46d9      	mov	r9, fp
 80045c0:	46e2      	mov	sl, ip
 80045c2:	eb19 0309 	adds.w	r3, r9, r9
 80045c6:	eb4a 040a 	adc.w	r4, sl, sl
 80045ca:	4699      	mov	r9, r3
 80045cc:	46a2      	mov	sl, r4
 80045ce:	eb19 090b 	adds.w	r9, r9, fp
 80045d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80045d6:	f04f 0100 	mov.w	r1, #0
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045ea:	4689      	mov	r9, r1
 80045ec:	4692      	mov	sl, r2
 80045ee:	eb1b 0509 	adds.w	r5, fp, r9
 80045f2:	eb4c 060a 	adc.w	r6, ip, sl
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	4619      	mov	r1, r3
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	f04f 0400 	mov.w	r4, #0
 8004608:	0094      	lsls	r4, r2, #2
 800460a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800460e:	008b      	lsls	r3, r1, #2
 8004610:	461a      	mov	r2, r3
 8004612:	4623      	mov	r3, r4
 8004614:	4628      	mov	r0, r5
 8004616:	4631      	mov	r1, r6
 8004618:	f7fb fde6 	bl	80001e8 <__aeabi_uldivmod>
 800461c:	4603      	mov	r3, r0
 800461e:	460c      	mov	r4, r1
 8004620:	461a      	mov	r2, r3
 8004622:	4b77      	ldr	r3, [pc, #476]	; (8004800 <UART_SetConfig+0x6f4>)
 8004624:	fba3 1302 	umull	r1, r3, r3, r2
 8004628:	095b      	lsrs	r3, r3, #5
 800462a:	2164      	movs	r1, #100	; 0x64
 800462c:	fb01 f303 	mul.w	r3, r1, r3
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	3332      	adds	r3, #50	; 0x32
 8004636:	4a72      	ldr	r2, [pc, #456]	; (8004800 <UART_SetConfig+0x6f4>)
 8004638:	fba2 2303 	umull	r2, r3, r2, r3
 800463c:	095b      	lsrs	r3, r3, #5
 800463e:	f003 020f 	and.w	r2, r3, #15
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4442      	add	r2, r8
 8004648:	609a      	str	r2, [r3, #8]
 800464a:	e0d0      	b.n	80047ee <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800464c:	f7ff f918 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 8004650:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	469a      	mov	sl, r3
 8004656:	f04f 0b00 	mov.w	fp, #0
 800465a:	46d0      	mov	r8, sl
 800465c:	46d9      	mov	r9, fp
 800465e:	eb18 0308 	adds.w	r3, r8, r8
 8004662:	eb49 0409 	adc.w	r4, r9, r9
 8004666:	4698      	mov	r8, r3
 8004668:	46a1      	mov	r9, r4
 800466a:	eb18 080a 	adds.w	r8, r8, sl
 800466e:	eb49 090b 	adc.w	r9, r9, fp
 8004672:	f04f 0100 	mov.w	r1, #0
 8004676:	f04f 0200 	mov.w	r2, #0
 800467a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800467e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004682:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004686:	4688      	mov	r8, r1
 8004688:	4691      	mov	r9, r2
 800468a:	eb1a 0508 	adds.w	r5, sl, r8
 800468e:	eb4b 0609 	adc.w	r6, fp, r9
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	4619      	mov	r1, r3
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	f04f 0400 	mov.w	r4, #0
 80046a4:	0094      	lsls	r4, r2, #2
 80046a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046aa:	008b      	lsls	r3, r1, #2
 80046ac:	461a      	mov	r2, r3
 80046ae:	4623      	mov	r3, r4
 80046b0:	4628      	mov	r0, r5
 80046b2:	4631      	mov	r1, r6
 80046b4:	f7fb fd98 	bl	80001e8 <__aeabi_uldivmod>
 80046b8:	4603      	mov	r3, r0
 80046ba:	460c      	mov	r4, r1
 80046bc:	461a      	mov	r2, r3
 80046be:	4b50      	ldr	r3, [pc, #320]	; (8004800 <UART_SetConfig+0x6f4>)
 80046c0:	fba3 2302 	umull	r2, r3, r3, r2
 80046c4:	095b      	lsrs	r3, r3, #5
 80046c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	469b      	mov	fp, r3
 80046ce:	f04f 0c00 	mov.w	ip, #0
 80046d2:	46d9      	mov	r9, fp
 80046d4:	46e2      	mov	sl, ip
 80046d6:	eb19 0309 	adds.w	r3, r9, r9
 80046da:	eb4a 040a 	adc.w	r4, sl, sl
 80046de:	4699      	mov	r9, r3
 80046e0:	46a2      	mov	sl, r4
 80046e2:	eb19 090b 	adds.w	r9, r9, fp
 80046e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046ea:	f04f 0100 	mov.w	r1, #0
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046fe:	4689      	mov	r9, r1
 8004700:	4692      	mov	sl, r2
 8004702:	eb1b 0509 	adds.w	r5, fp, r9
 8004706:	eb4c 060a 	adc.w	r6, ip, sl
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	4619      	mov	r1, r3
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	f04f 0400 	mov.w	r4, #0
 800471c:	0094      	lsls	r4, r2, #2
 800471e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004722:	008b      	lsls	r3, r1, #2
 8004724:	461a      	mov	r2, r3
 8004726:	4623      	mov	r3, r4
 8004728:	4628      	mov	r0, r5
 800472a:	4631      	mov	r1, r6
 800472c:	f7fb fd5c 	bl	80001e8 <__aeabi_uldivmod>
 8004730:	4603      	mov	r3, r0
 8004732:	460c      	mov	r4, r1
 8004734:	461a      	mov	r2, r3
 8004736:	4b32      	ldr	r3, [pc, #200]	; (8004800 <UART_SetConfig+0x6f4>)
 8004738:	fba3 1302 	umull	r1, r3, r3, r2
 800473c:	095b      	lsrs	r3, r3, #5
 800473e:	2164      	movs	r1, #100	; 0x64
 8004740:	fb01 f303 	mul.w	r3, r1, r3
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	3332      	adds	r3, #50	; 0x32
 800474a:	4a2d      	ldr	r2, [pc, #180]	; (8004800 <UART_SetConfig+0x6f4>)
 800474c:	fba2 2303 	umull	r2, r3, r2, r3
 8004750:	095b      	lsrs	r3, r3, #5
 8004752:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004756:	4498      	add	r8, r3
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	469b      	mov	fp, r3
 800475c:	f04f 0c00 	mov.w	ip, #0
 8004760:	46d9      	mov	r9, fp
 8004762:	46e2      	mov	sl, ip
 8004764:	eb19 0309 	adds.w	r3, r9, r9
 8004768:	eb4a 040a 	adc.w	r4, sl, sl
 800476c:	4699      	mov	r9, r3
 800476e:	46a2      	mov	sl, r4
 8004770:	eb19 090b 	adds.w	r9, r9, fp
 8004774:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004778:	f04f 0100 	mov.w	r1, #0
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004784:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004788:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800478c:	4689      	mov	r9, r1
 800478e:	4692      	mov	sl, r2
 8004790:	eb1b 0509 	adds.w	r5, fp, r9
 8004794:	eb4c 060a 	adc.w	r6, ip, sl
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	4619      	mov	r1, r3
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	f04f 0300 	mov.w	r3, #0
 80047a6:	f04f 0400 	mov.w	r4, #0
 80047aa:	0094      	lsls	r4, r2, #2
 80047ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047b0:	008b      	lsls	r3, r1, #2
 80047b2:	461a      	mov	r2, r3
 80047b4:	4623      	mov	r3, r4
 80047b6:	4628      	mov	r0, r5
 80047b8:	4631      	mov	r1, r6
 80047ba:	f7fb fd15 	bl	80001e8 <__aeabi_uldivmod>
 80047be:	4603      	mov	r3, r0
 80047c0:	460c      	mov	r4, r1
 80047c2:	461a      	mov	r2, r3
 80047c4:	4b0e      	ldr	r3, [pc, #56]	; (8004800 <UART_SetConfig+0x6f4>)
 80047c6:	fba3 1302 	umull	r1, r3, r3, r2
 80047ca:	095b      	lsrs	r3, r3, #5
 80047cc:	2164      	movs	r1, #100	; 0x64
 80047ce:	fb01 f303 	mul.w	r3, r1, r3
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	3332      	adds	r3, #50	; 0x32
 80047d8:	4a09      	ldr	r2, [pc, #36]	; (8004800 <UART_SetConfig+0x6f4>)
 80047da:	fba2 2303 	umull	r2, r3, r2, r3
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	f003 020f 	and.w	r2, r3, #15
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4442      	add	r2, r8
 80047ea:	609a      	str	r2, [r3, #8]
}
 80047ec:	e7ff      	b.n	80047ee <UART_SetConfig+0x6e2>
 80047ee:	bf00      	nop
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047f8:	40011000 	.word	0x40011000
 80047fc:	40011400 	.word	0x40011400
 8004800:	51eb851f 	.word	0x51eb851f

08004804 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004804:	b084      	sub	sp, #16
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	f107 001c 	add.w	r0, r7, #28
 8004812:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004818:	2b01      	cmp	r3, #1
 800481a:	d122      	bne.n	8004862 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004846:	2b01      	cmp	r3, #1
 8004848:	d105      	bne.n	8004856 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f001 fac6 	bl	8005de8 <USB_CoreReset>
 800485c:	4603      	mov	r3, r0
 800485e:	73fb      	strb	r3, [r7, #15]
 8004860:	e01a      	b.n	8004898 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f001 faba 	bl	8005de8 <USB_CoreReset>
 8004874:	4603      	mov	r3, r0
 8004876:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	d106      	bne.n	800488c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004882:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	639a      	str	r2, [r3, #56]	; 0x38
 800488a:	e005      	b.n	8004898 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004890:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	2b01      	cmp	r3, #1
 800489c:	d10b      	bne.n	80048b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f043 0206 	orr.w	r2, r3, #6
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f043 0220 	orr.w	r2, r3, #32
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048c2:	b004      	add	sp, #16
 80048c4:	4770      	bx	lr
	...

080048c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	4613      	mov	r3, r2
 80048d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d165      	bne.n	80049a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4a41      	ldr	r2, [pc, #260]	; (80049e4 <USB_SetTurnaroundTime+0x11c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d906      	bls.n	80048f2 <USB_SetTurnaroundTime+0x2a>
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4a40      	ldr	r2, [pc, #256]	; (80049e8 <USB_SetTurnaroundTime+0x120>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d802      	bhi.n	80048f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80048ec:	230f      	movs	r3, #15
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	e062      	b.n	80049b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	4a3c      	ldr	r2, [pc, #240]	; (80049e8 <USB_SetTurnaroundTime+0x120>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d906      	bls.n	8004908 <USB_SetTurnaroundTime+0x40>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	4a3b      	ldr	r2, [pc, #236]	; (80049ec <USB_SetTurnaroundTime+0x124>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d802      	bhi.n	8004908 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004902:	230e      	movs	r3, #14
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	e057      	b.n	80049b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	4a38      	ldr	r2, [pc, #224]	; (80049ec <USB_SetTurnaroundTime+0x124>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d906      	bls.n	800491e <USB_SetTurnaroundTime+0x56>
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4a37      	ldr	r2, [pc, #220]	; (80049f0 <USB_SetTurnaroundTime+0x128>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d802      	bhi.n	800491e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004918:	230d      	movs	r3, #13
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	e04c      	b.n	80049b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	4a33      	ldr	r2, [pc, #204]	; (80049f0 <USB_SetTurnaroundTime+0x128>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d906      	bls.n	8004934 <USB_SetTurnaroundTime+0x6c>
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	4a32      	ldr	r2, [pc, #200]	; (80049f4 <USB_SetTurnaroundTime+0x12c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d802      	bhi.n	8004934 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800492e:	230c      	movs	r3, #12
 8004930:	617b      	str	r3, [r7, #20]
 8004932:	e041      	b.n	80049b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	4a2f      	ldr	r2, [pc, #188]	; (80049f4 <USB_SetTurnaroundTime+0x12c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d906      	bls.n	800494a <USB_SetTurnaroundTime+0x82>
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4a2e      	ldr	r2, [pc, #184]	; (80049f8 <USB_SetTurnaroundTime+0x130>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d802      	bhi.n	800494a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004944:	230b      	movs	r3, #11
 8004946:	617b      	str	r3, [r7, #20]
 8004948:	e036      	b.n	80049b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	4a2a      	ldr	r2, [pc, #168]	; (80049f8 <USB_SetTurnaroundTime+0x130>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d906      	bls.n	8004960 <USB_SetTurnaroundTime+0x98>
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	4a29      	ldr	r2, [pc, #164]	; (80049fc <USB_SetTurnaroundTime+0x134>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d802      	bhi.n	8004960 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800495a:	230a      	movs	r3, #10
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	e02b      	b.n	80049b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	4a26      	ldr	r2, [pc, #152]	; (80049fc <USB_SetTurnaroundTime+0x134>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d906      	bls.n	8004976 <USB_SetTurnaroundTime+0xae>
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4a25      	ldr	r2, [pc, #148]	; (8004a00 <USB_SetTurnaroundTime+0x138>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d802      	bhi.n	8004976 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004970:	2309      	movs	r3, #9
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	e020      	b.n	80049b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	4a21      	ldr	r2, [pc, #132]	; (8004a00 <USB_SetTurnaroundTime+0x138>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d906      	bls.n	800498c <USB_SetTurnaroundTime+0xc4>
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	4a20      	ldr	r2, [pc, #128]	; (8004a04 <USB_SetTurnaroundTime+0x13c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d802      	bhi.n	800498c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004986:	2308      	movs	r3, #8
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	e015      	b.n	80049b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4a1d      	ldr	r2, [pc, #116]	; (8004a04 <USB_SetTurnaroundTime+0x13c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d906      	bls.n	80049a2 <USB_SetTurnaroundTime+0xda>
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	4a1c      	ldr	r2, [pc, #112]	; (8004a08 <USB_SetTurnaroundTime+0x140>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d802      	bhi.n	80049a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800499c:	2307      	movs	r3, #7
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	e00a      	b.n	80049b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80049a2:	2306      	movs	r3, #6
 80049a4:	617b      	str	r3, [r7, #20]
 80049a6:	e007      	b.n	80049b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80049a8:	79fb      	ldrb	r3, [r7, #7]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d102      	bne.n	80049b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80049ae:	2309      	movs	r3, #9
 80049b0:	617b      	str	r3, [r7, #20]
 80049b2:	e001      	b.n	80049b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80049b4:	2309      	movs	r3, #9
 80049b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	029b      	lsls	r3, r3, #10
 80049cc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80049d0:	431a      	orrs	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	371c      	adds	r7, #28
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	00d8acbf 	.word	0x00d8acbf
 80049e8:	00e4e1bf 	.word	0x00e4e1bf
 80049ec:	00f423ff 	.word	0x00f423ff
 80049f0:	0106737f 	.word	0x0106737f
 80049f4:	011a499f 	.word	0x011a499f
 80049f8:	01312cff 	.word	0x01312cff
 80049fc:	014ca43f 	.word	0x014ca43f
 8004a00:	016e35ff 	.word	0x016e35ff
 8004a04:	01a6ab1f 	.word	0x01a6ab1f
 8004a08:	01e847ff 	.word	0x01e847ff

08004a0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f043 0201 	orr.w	r2, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f023 0201 	bic.w	r2, r3, #1
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a68:	78fb      	ldrb	r3, [r7, #3]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d106      	bne.n	8004a7c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	60da      	str	r2, [r3, #12]
 8004a7a:	e00b      	b.n	8004a94 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a7c:	78fb      	ldrb	r3, [r7, #3]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	60da      	str	r2, [r3, #12]
 8004a8e:	e001      	b.n	8004a94 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e003      	b.n	8004a9c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004a94:	2032      	movs	r0, #50	; 0x32
 8004a96:	f7fc faa1 	bl	8000fdc <HAL_Delay>

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004aa4:	b084      	sub	sp, #16
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b086      	sub	sp, #24
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ab2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004abe:	2300      	movs	r3, #0
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	e009      	b.n	8004ad8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	3340      	adds	r3, #64	; 0x40
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	2200      	movs	r2, #0
 8004ad0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	613b      	str	r3, [r7, #16]
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	2b0e      	cmp	r3, #14
 8004adc:	d9f2      	bls.n	8004ac4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d11c      	bne.n	8004b1e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004af2:	f043 0302 	orr.w	r3, r3, #2
 8004af6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	639a      	str	r2, [r3, #56]	; 0x38
 8004b1c:	e00b      	b.n	8004b36 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b22:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	2300      	movs	r3, #0
 8004b40:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b48:	4619      	mov	r1, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b50:	461a      	mov	r2, r3
 8004b52:	680b      	ldr	r3, [r1, #0]
 8004b54:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d10c      	bne.n	8004b76 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d104      	bne.n	8004b6c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b62:	2100      	movs	r1, #0
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f949 	bl	8004dfc <USB_SetDevSpeed>
 8004b6a:	e008      	b.n	8004b7e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f944 	bl	8004dfc <USB_SetDevSpeed>
 8004b74:	e003      	b.n	8004b7e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b76:	2103      	movs	r1, #3
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f93f 	bl	8004dfc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b7e:	2110      	movs	r1, #16
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f8f3 	bl	8004d6c <USB_FlushTxFifo>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f911 	bl	8004db8 <USB_FlushRxFifo>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	2300      	movs	r3, #0
 8004baa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	e043      	b.n	8004c52 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004be0:	d118      	bne.n	8004c14 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10a      	bne.n	8004bfe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	e013      	b.n	8004c26 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	e008      	b.n	8004c26 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c20:	461a      	mov	r2, r3
 8004c22:	2300      	movs	r3, #0
 8004c24:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c32:	461a      	mov	r2, r3
 8004c34:	2300      	movs	r3, #0
 8004c36:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c44:	461a      	mov	r2, r3
 8004c46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d3b7      	bcc.n	8004bca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	e043      	b.n	8004ce8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c76:	d118      	bne.n	8004caa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10a      	bne.n	8004c94 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	e013      	b.n	8004cbc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	e008      	b.n	8004cbc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	2300      	movs	r3, #0
 8004cba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc8:	461a      	mov	r2, r3
 8004cca:	2300      	movs	r3, #0
 8004ccc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ce0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	613b      	str	r3, [r7, #16]
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d3b7      	bcc.n	8004c60 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d02:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d10:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d105      	bne.n	8004d24 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	f043 0210 	orr.w	r2, r3, #16
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699a      	ldr	r2, [r3, #24]
 8004d28:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <USB_DevInit+0x2c4>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	f043 0208 	orr.w	r2, r3, #8
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d107      	bne.n	8004d58 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d50:	f043 0304 	orr.w	r3, r3, #4
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d64:	b004      	add	sp, #16
 8004d66:	4770      	bx	lr
 8004d68:	803c3800 	.word	0x803c3800

08004d6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	019b      	lsls	r3, r3, #6
 8004d7e:	f043 0220 	orr.w	r2, r3, #32
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4a09      	ldr	r2, [pc, #36]	; (8004db4 <USB_FlushTxFifo+0x48>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d901      	bls.n	8004d98 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e006      	b.n	8004da6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	f003 0320 	and.w	r3, r3, #32
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d0f0      	beq.n	8004d86 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	00030d40 	.word	0x00030d40

08004db8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2210      	movs	r2, #16
 8004dc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4a09      	ldr	r2, [pc, #36]	; (8004df8 <USB_FlushRxFifo+0x40>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d901      	bls.n	8004ddc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e006      	b.n	8004dea <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	f003 0310 	and.w	r3, r3, #16
 8004de4:	2b10      	cmp	r3, #16
 8004de6:	d0f0      	beq.n	8004dca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	00030d40 	.word	0x00030d40

08004dfc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	460b      	mov	r3, r1
 8004e06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	78fb      	ldrb	r3, [r7, #3]
 8004e16:	68f9      	ldr	r1, [r7, #12]
 8004e18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b087      	sub	sp, #28
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 0306 	and.w	r3, r3, #6
 8004e46:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d102      	bne.n	8004e54 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	75fb      	strb	r3, [r7, #23]
 8004e52:	e00a      	b.n	8004e6a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d002      	beq.n	8004e60 <USB_GetDevSpeed+0x32>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2b06      	cmp	r3, #6
 8004e5e:	d102      	bne.n	8004e66 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004e60:	2302      	movs	r3, #2
 8004e62:	75fb      	strb	r3, [r7, #23]
 8004e64:	e001      	b.n	8004e6a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004e66:	230f      	movs	r3, #15
 8004e68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	371c      	adds	r7, #28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	785b      	ldrb	r3, [r3, #1]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d13a      	bne.n	8004f0a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9a:	69da      	ldr	r2, [r3, #28]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	f003 030f 	and.w	r3, r3, #15
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	68f9      	ldr	r1, [r7, #12]
 8004eae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d155      	bne.n	8004f78 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	78db      	ldrb	r3, [r3, #3]
 8004ee6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ee8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	059b      	lsls	r3, r3, #22
 8004eee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	0151      	lsls	r1, r2, #5
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	440a      	add	r2, r1
 8004efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	e036      	b.n	8004f78 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f10:	69da      	ldr	r2, [r3, #28]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f20:	041b      	lsls	r3, r3, #16
 8004f22:	68f9      	ldr	r1, [r7, #12]
 8004f24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d11a      	bne.n	8004f78 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	78db      	ldrb	r3, [r3, #3]
 8004f5c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f5e:	430b      	orrs	r3, r1
 8004f60:	4313      	orrs	r3, r2
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	0151      	lsls	r1, r2, #5
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	440a      	add	r2, r1
 8004f6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f76:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
	...

08004f88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	785b      	ldrb	r3, [r3, #1]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d161      	bne.n	8005068 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fba:	d11f      	bne.n	8004ffc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	0151      	lsls	r1, r2, #5
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	440a      	add	r2, r1
 8004fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fda:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	0151      	lsls	r1, r2, #5
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	440a      	add	r2, r1
 8004ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ffa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005002:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	f003 030f 	and.w	r3, r3, #15
 800500c:	2101      	movs	r1, #1
 800500e:	fa01 f303 	lsl.w	r3, r1, r3
 8005012:	b29b      	uxth	r3, r3
 8005014:	43db      	mvns	r3, r3
 8005016:	68f9      	ldr	r1, [r7, #12]
 8005018:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800501c:	4013      	ands	r3, r2
 800501e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005026:	69da      	ldr	r2, [r3, #28]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	f003 030f 	and.w	r3, r3, #15
 8005030:	2101      	movs	r1, #1
 8005032:	fa01 f303 	lsl.w	r3, r1, r3
 8005036:	b29b      	uxth	r3, r3
 8005038:	43db      	mvns	r3, r3
 800503a:	68f9      	ldr	r1, [r7, #12]
 800503c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005040:	4013      	ands	r3, r2
 8005042:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	0159      	lsls	r1, r3, #5
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	440b      	add	r3, r1
 800505a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505e:	4619      	mov	r1, r3
 8005060:	4b35      	ldr	r3, [pc, #212]	; (8005138 <USB_DeactivateEndpoint+0x1b0>)
 8005062:	4013      	ands	r3, r2
 8005064:	600b      	str	r3, [r1, #0]
 8005066:	e060      	b.n	800512a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800507a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800507e:	d11f      	bne.n	80050c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	0151      	lsls	r1, r2, #5
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	440a      	add	r2, r1
 8005096:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800509a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800509e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	0151      	lsls	r1, r2, #5
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	440a      	add	r2, r1
 80050b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	f003 030f 	and.w	r3, r3, #15
 80050d0:	2101      	movs	r1, #1
 80050d2:	fa01 f303 	lsl.w	r3, r1, r3
 80050d6:	041b      	lsls	r3, r3, #16
 80050d8:	43db      	mvns	r3, r3
 80050da:	68f9      	ldr	r1, [r7, #12]
 80050dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050e0:	4013      	ands	r3, r2
 80050e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ea:	69da      	ldr	r2, [r3, #28]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	2101      	movs	r1, #1
 80050f6:	fa01 f303 	lsl.w	r3, r1, r3
 80050fa:	041b      	lsls	r3, r3, #16
 80050fc:	43db      	mvns	r3, r3
 80050fe:	68f9      	ldr	r1, [r7, #12]
 8005100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005104:	4013      	ands	r3, r2
 8005106:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	0159      	lsls	r1, r3, #5
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	440b      	add	r3, r1
 800511e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005122:	4619      	mov	r1, r3
 8005124:	4b05      	ldr	r3, [pc, #20]	; (800513c <USB_DeactivateEndpoint+0x1b4>)
 8005126:	4013      	ands	r3, r2
 8005128:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	ec337800 	.word	0xec337800
 800513c:	eff37800 	.word	0xeff37800

08005140 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b08a      	sub	sp, #40	; 0x28
 8005144:	af02      	add	r7, sp, #8
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	4613      	mov	r3, r2
 800514c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	785b      	ldrb	r3, [r3, #1]
 800515c:	2b01      	cmp	r3, #1
 800515e:	f040 815c 	bne.w	800541a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d132      	bne.n	80051d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	0151      	lsls	r1, r2, #5
 800517c:	69fa      	ldr	r2, [r7, #28]
 800517e:	440a      	add	r2, r1
 8005180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005184:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005188:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800518c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	0151      	lsls	r1, r2, #5
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	440a      	add	r2, r1
 80051a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	0151      	lsls	r1, r2, #5
 80051c0:	69fa      	ldr	r2, [r7, #28]
 80051c2:	440a      	add	r2, r1
 80051c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c8:	0cdb      	lsrs	r3, r3, #19
 80051ca:	04db      	lsls	r3, r3, #19
 80051cc:	6113      	str	r3, [r2, #16]
 80051ce:	e074      	b.n	80052ba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	0151      	lsls	r1, r2, #5
 80051e2:	69fa      	ldr	r2, [r7, #28]
 80051e4:	440a      	add	r2, r1
 80051e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ea:	0cdb      	lsrs	r3, r3, #19
 80051ec:	04db      	lsls	r3, r3, #19
 80051ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	0151      	lsls	r1, r2, #5
 8005202:	69fa      	ldr	r2, [r7, #28]
 8005204:	440a      	add	r2, r1
 8005206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800520a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800520e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005212:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005220:	691a      	ldr	r2, [r3, #16]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	6959      	ldr	r1, [r3, #20]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	440b      	add	r3, r1
 800522c:	1e59      	subs	r1, r3, #1
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	fbb1 f3f3 	udiv	r3, r1, r3
 8005236:	04d9      	lsls	r1, r3, #19
 8005238:	4b9d      	ldr	r3, [pc, #628]	; (80054b0 <USB_EPStartXfer+0x370>)
 800523a:	400b      	ands	r3, r1
 800523c:	69b9      	ldr	r1, [r7, #24]
 800523e:	0148      	lsls	r0, r1, #5
 8005240:	69f9      	ldr	r1, [r7, #28]
 8005242:	4401      	add	r1, r0
 8005244:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005248:	4313      	orrs	r3, r2
 800524a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005258:	691a      	ldr	r2, [r3, #16]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005262:	69b9      	ldr	r1, [r7, #24]
 8005264:	0148      	lsls	r0, r1, #5
 8005266:	69f9      	ldr	r1, [r7, #28]
 8005268:	4401      	add	r1, r0
 800526a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800526e:	4313      	orrs	r3, r2
 8005270:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	78db      	ldrb	r3, [r3, #3]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d11f      	bne.n	80052ba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	0151      	lsls	r1, r2, #5
 800528c:	69fa      	ldr	r2, [r7, #28]
 800528e:	440a      	add	r2, r1
 8005290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005294:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005298:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	0151      	lsls	r1, r2, #5
 80052ac:	69fa      	ldr	r2, [r7, #28]
 80052ae:	440a      	add	r2, r1
 80052b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052b8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80052ba:	79fb      	ldrb	r3, [r7, #7]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d14b      	bne.n	8005358 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d009      	beq.n	80052dc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d4:	461a      	mov	r2, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	78db      	ldrb	r3, [r3, #3]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d128      	bne.n	8005336 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d110      	bne.n	8005316 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	0151      	lsls	r1, r2, #5
 8005306:	69fa      	ldr	r2, [r7, #28]
 8005308:	440a      	add	r2, r1
 800530a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800530e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	e00f      	b.n	8005336 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	0151      	lsls	r1, r2, #5
 8005328:	69fa      	ldr	r2, [r7, #28]
 800532a:	440a      	add	r2, r1
 800532c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005334:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	4413      	add	r3, r2
 800533e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	0151      	lsls	r1, r2, #5
 8005348:	69fa      	ldr	r2, [r7, #28]
 800534a:	440a      	add	r2, r1
 800534c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005350:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	e12f      	b.n	80055b8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	0151      	lsls	r1, r2, #5
 800536a:	69fa      	ldr	r2, [r7, #28]
 800536c:	440a      	add	r2, r1
 800536e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005372:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005376:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	78db      	ldrb	r3, [r3, #3]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d015      	beq.n	80053ac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 8117 	beq.w	80055b8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	f003 030f 	and.w	r3, r3, #15
 800539a:	2101      	movs	r1, #1
 800539c:	fa01 f303 	lsl.w	r3, r1, r3
 80053a0:	69f9      	ldr	r1, [r7, #28]
 80053a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053a6:	4313      	orrs	r3, r2
 80053a8:	634b      	str	r3, [r1, #52]	; 0x34
 80053aa:	e105      	b.n	80055b8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d110      	bne.n	80053de <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	0151      	lsls	r1, r2, #5
 80053ce:	69fa      	ldr	r2, [r7, #28]
 80053d0:	440a      	add	r2, r1
 80053d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053da:	6013      	str	r3, [r2, #0]
 80053dc:	e00f      	b.n	80053fe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	0151      	lsls	r1, r2, #5
 80053f0:	69fa      	ldr	r2, [r7, #28]
 80053f2:	440a      	add	r2, r1
 80053f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053fc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	68d9      	ldr	r1, [r3, #12]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	781a      	ldrb	r2, [r3, #0]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	b298      	uxth	r0, r3
 800540c:	79fb      	ldrb	r3, [r7, #7]
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	4603      	mov	r3, r0
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 fa2b 	bl	800586e <USB_WritePacket>
 8005418:	e0ce      	b.n	80055b8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	0151      	lsls	r1, r2, #5
 800542c:	69fa      	ldr	r2, [r7, #28]
 800542e:	440a      	add	r2, r1
 8005430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005434:	0cdb      	lsrs	r3, r3, #19
 8005436:	04db      	lsls	r3, r3, #19
 8005438:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	4413      	add	r3, r2
 8005442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	0151      	lsls	r1, r2, #5
 800544c:	69fa      	ldr	r2, [r7, #28]
 800544e:	440a      	add	r2, r1
 8005450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005454:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005458:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800545c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d126      	bne.n	80054b4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005472:	691a      	ldr	r2, [r3, #16]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800547c:	69b9      	ldr	r1, [r7, #24]
 800547e:	0148      	lsls	r0, r1, #5
 8005480:	69f9      	ldr	r1, [r7, #28]
 8005482:	4401      	add	r1, r0
 8005484:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005488:	4313      	orrs	r3, r2
 800548a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	4413      	add	r3, r2
 8005494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	0151      	lsls	r1, r2, #5
 800549e:	69fa      	ldr	r2, [r7, #28]
 80054a0:	440a      	add	r2, r1
 80054a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054aa:	6113      	str	r3, [r2, #16]
 80054ac:	e036      	b.n	800551c <USB_EPStartXfer+0x3dc>
 80054ae:	bf00      	nop
 80054b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	695a      	ldr	r2, [r3, #20]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	4413      	add	r3, r2
 80054be:	1e5a      	subs	r2, r3, #1
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	8afb      	ldrh	r3, [r7, #22]
 80054da:	04d9      	lsls	r1, r3, #19
 80054dc:	4b39      	ldr	r3, [pc, #228]	; (80055c4 <USB_EPStartXfer+0x484>)
 80054de:	400b      	ands	r3, r1
 80054e0:	69b9      	ldr	r1, [r7, #24]
 80054e2:	0148      	lsls	r0, r1, #5
 80054e4:	69f9      	ldr	r1, [r7, #28]
 80054e6:	4401      	add	r1, r0
 80054e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054ec:	4313      	orrs	r3, r2
 80054ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fc:	691a      	ldr	r2, [r3, #16]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	8af9      	ldrh	r1, [r7, #22]
 8005504:	fb01 f303 	mul.w	r3, r1, r3
 8005508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800550c:	69b9      	ldr	r1, [r7, #24]
 800550e:	0148      	lsls	r0, r1, #5
 8005510:	69f9      	ldr	r1, [r7, #28]
 8005512:	4401      	add	r1, r0
 8005514:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005518:	4313      	orrs	r3, r2
 800551a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800551c:	79fb      	ldrb	r3, [r7, #7]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d10d      	bne.n	800553e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d009      	beq.n	800553e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	68d9      	ldr	r1, [r3, #12]
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553a:	460a      	mov	r2, r1
 800553c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	78db      	ldrb	r3, [r3, #3]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d128      	bne.n	8005598 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005552:	2b00      	cmp	r3, #0
 8005554:	d110      	bne.n	8005578 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	0151      	lsls	r1, r2, #5
 8005568:	69fa      	ldr	r2, [r7, #28]
 800556a:	440a      	add	r2, r1
 800556c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005570:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	e00f      	b.n	8005598 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	0151      	lsls	r1, r2, #5
 800558a:	69fa      	ldr	r2, [r7, #28]
 800558c:	440a      	add	r2, r1
 800558e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005596:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	0151      	lsls	r1, r2, #5
 80055aa:	69fa      	ldr	r2, [r7, #28]
 80055ac:	440a      	add	r2, r1
 80055ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3720      	adds	r7, #32
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	1ff80000 	.word	0x1ff80000

080055c8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	4613      	mov	r3, r2
 80055d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	785b      	ldrb	r3, [r3, #1]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	f040 80cd 	bne.w	8005784 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d132      	bne.n	8005658 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	0151      	lsls	r1, r2, #5
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	440a      	add	r2, r1
 8005608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800560c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005610:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005614:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	4413      	add	r3, r2
 800561e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	0151      	lsls	r1, r2, #5
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	440a      	add	r2, r1
 800562c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005630:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005634:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	0151      	lsls	r1, r2, #5
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	440a      	add	r2, r1
 800564c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005650:	0cdb      	lsrs	r3, r3, #19
 8005652:	04db      	lsls	r3, r3, #19
 8005654:	6113      	str	r3, [r2, #16]
 8005656:	e04e      	b.n	80056f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	0151      	lsls	r1, r2, #5
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	440a      	add	r2, r1
 800566e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005672:	0cdb      	lsrs	r3, r3, #19
 8005674:	04db      	lsls	r3, r3, #19
 8005676:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	0151      	lsls	r1, r2, #5
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	440a      	add	r2, r1
 800568e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005692:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005696:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800569a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	695a      	ldr	r2, [r3, #20]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d903      	bls.n	80056b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	0151      	lsls	r1, r2, #5
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	440a      	add	r2, r1
 80056c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056dc:	691a      	ldr	r2, [r3, #16]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e6:	6939      	ldr	r1, [r7, #16]
 80056e8:	0148      	lsls	r0, r1, #5
 80056ea:	6979      	ldr	r1, [r7, #20]
 80056ec:	4401      	add	r1, r0
 80056ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056f2:	4313      	orrs	r3, r2
 80056f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80056f6:	79fb      	ldrb	r3, [r7, #7]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d11e      	bne.n	800573a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d009      	beq.n	8005718 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	4413      	add	r3, r2
 800570c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005710:	461a      	mov	r2, r3
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	0151      	lsls	r1, r2, #5
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	440a      	add	r2, r1
 800572e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005732:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	e092      	b.n	8005860 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	0151      	lsls	r1, r2, #5
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	440a      	add	r2, r1
 8005750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005754:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005758:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d07e      	beq.n	8005860 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	2101      	movs	r1, #1
 8005774:	fa01 f303 	lsl.w	r3, r1, r3
 8005778:	6979      	ldr	r1, [r7, #20]
 800577a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800577e:	4313      	orrs	r3, r2
 8005780:	634b      	str	r3, [r1, #52]	; 0x34
 8005782:	e06d      	b.n	8005860 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	0151      	lsls	r1, r2, #5
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	440a      	add	r2, r1
 800579a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800579e:	0cdb      	lsrs	r3, r3, #19
 80057a0:	04db      	lsls	r3, r3, #19
 80057a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	0151      	lsls	r1, r2, #5
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	440a      	add	r2, r1
 80057ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057c6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	0151      	lsls	r1, r2, #5
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	440a      	add	r2, r1
 80057ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005804:	691a      	ldr	r2, [r3, #16]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800580e:	6939      	ldr	r1, [r7, #16]
 8005810:	0148      	lsls	r0, r1, #5
 8005812:	6979      	ldr	r1, [r7, #20]
 8005814:	4401      	add	r1, r0
 8005816:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800581a:	4313      	orrs	r3, r2
 800581c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800581e:	79fb      	ldrb	r3, [r7, #7]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d10d      	bne.n	8005840 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d009      	beq.n	8005840 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	68d9      	ldr	r1, [r3, #12]
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	4413      	add	r3, r2
 8005838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583c:	460a      	mov	r2, r1
 800583e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	0151      	lsls	r1, r2, #5
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	440a      	add	r2, r1
 8005856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800585a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800585e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	371c      	adds	r7, #28
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800586e:	b480      	push	{r7}
 8005870:	b089      	sub	sp, #36	; 0x24
 8005872:	af00      	add	r7, sp, #0
 8005874:	60f8      	str	r0, [r7, #12]
 8005876:	60b9      	str	r1, [r7, #8]
 8005878:	4611      	mov	r1, r2
 800587a:	461a      	mov	r2, r3
 800587c:	460b      	mov	r3, r1
 800587e:	71fb      	strb	r3, [r7, #7]
 8005880:	4613      	mov	r3, r2
 8005882:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800588c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005890:	2b00      	cmp	r3, #0
 8005892:	d11a      	bne.n	80058ca <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005894:	88bb      	ldrh	r3, [r7, #4]
 8005896:	3303      	adds	r3, #3
 8005898:	089b      	lsrs	r3, r3, #2
 800589a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800589c:	2300      	movs	r3, #0
 800589e:	61bb      	str	r3, [r7, #24]
 80058a0:	e00f      	b.n	80058c2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058a2:	79fb      	ldrb	r3, [r7, #7]
 80058a4:	031a      	lsls	r2, r3, #12
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ae:	461a      	mov	r2, r3
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	3304      	adds	r3, #4
 80058ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	3301      	adds	r3, #1
 80058c0:	61bb      	str	r3, [r7, #24]
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d3eb      	bcc.n	80058a2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3724      	adds	r7, #36	; 0x24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058d8:	b480      	push	{r7}
 80058da:	b089      	sub	sp, #36	; 0x24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	4613      	mov	r3, r2
 80058e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80058ee:	88fb      	ldrh	r3, [r7, #6]
 80058f0:	3303      	adds	r3, #3
 80058f2:	089b      	lsrs	r3, r3, #2
 80058f4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80058f6:	2300      	movs	r3, #0
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	e00b      	b.n	8005914 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	601a      	str	r2, [r3, #0]
    pDest++;
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	3304      	adds	r3, #4
 800590c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	3301      	adds	r3, #1
 8005912:	61bb      	str	r3, [r7, #24]
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	429a      	cmp	r2, r3
 800591a:	d3ef      	bcc.n	80058fc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800591c:	69fb      	ldr	r3, [r7, #28]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3724      	adds	r7, #36	; 0x24
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800592a:	b480      	push	{r7}
 800592c:	b085      	sub	sp, #20
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
 8005932:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	785b      	ldrb	r3, [r3, #1]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d12c      	bne.n	80059a0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	db12      	blt.n	800597e <USB_EPSetStall+0x54>
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00f      	beq.n	800597e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4413      	add	r3, r2
 8005966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	0151      	lsls	r1, r2, #5
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	440a      	add	r2, r1
 8005974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005978:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800597c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	0151      	lsls	r1, r2, #5
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	440a      	add	r2, r1
 8005994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005998:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	e02b      	b.n	80059f8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	db12      	blt.n	80059d8 <USB_EPSetStall+0xae>
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00f      	beq.n	80059d8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	0151      	lsls	r1, r2, #5
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	440a      	add	r2, r1
 80059ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059d6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	0151      	lsls	r1, r2, #5
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	440a      	add	r2, r1
 80059ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b085      	sub	sp, #20
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	785b      	ldrb	r3, [r3, #1]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d128      	bne.n	8005a74 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	015a      	lsls	r2, r3, #5
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	4413      	add	r3, r2
 8005a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	0151      	lsls	r1, r2, #5
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	440a      	add	r2, r1
 8005a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a40:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	78db      	ldrb	r3, [r3, #3]
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d003      	beq.n	8005a52 <USB_EPClearStall+0x4c>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	78db      	ldrb	r3, [r3, #3]
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d138      	bne.n	8005ac4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	0151      	lsls	r1, r2, #5
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	440a      	add	r2, r1
 8005a68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	e027      	b.n	8005ac4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	0151      	lsls	r1, r2, #5
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	440a      	add	r2, r1
 8005a8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	78db      	ldrb	r3, [r3, #3]
 8005a98:	2b03      	cmp	r3, #3
 8005a9a:	d003      	beq.n	8005aa4 <USB_EPClearStall+0x9e>
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	78db      	ldrb	r3, [r3, #3]
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d10f      	bne.n	8005ac4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	0151      	lsls	r1, r2, #5
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	440a      	add	r2, r1
 8005aba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ac2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b085      	sub	sp, #20
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	460b      	mov	r3, r1
 8005adc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005af0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005af4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	78fb      	ldrb	r3, [r7, #3]
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005b06:	68f9      	ldr	r1, [r7, #12]
 8005b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b085      	sub	sp, #20
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b38:	f023 0303 	bic.w	r3, r3, #3
 8005b3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b4c:	f023 0302 	bic.w	r3, r3, #2
 8005b50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b7a:	f023 0303 	bic.w	r3, r3, #3
 8005b7e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b8e:	f043 0302 	orr.w	r3, r3, #2
 8005b92:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b085      	sub	sp, #20
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005bba:	68fb      	ldr	r3, [r7, #12]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	4013      	ands	r3, r2
 8005bea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	0c1b      	lsrs	r3, r3, #16
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	b29b      	uxth	r3, r3
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c5e:	68bb      	ldr	r3, [r7, #8]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	460b      	mov	r3, r1
 8005c76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c8e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	f003 030f 	and.w	r3, r3, #15
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	fa22 f303 	lsr.w	r3, r2, r3
 8005c9c:	01db      	lsls	r3, r3, #7
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005ca6:	78fb      	ldrb	r3, [r7, #3]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cba:	68bb      	ldr	r3, [r7, #8]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	371c      	adds	r7, #28
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	f003 0301 	and.w	r3, r3, #1
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cfe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005d02:	f023 0307 	bic.w	r3, r3, #7
 8005d06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
	...

08005d2c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	460b      	mov	r3, r1
 8005d36:	607a      	str	r2, [r7, #4]
 8005d38:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	333c      	adds	r3, #60	; 0x3c
 8005d42:	3304      	adds	r3, #4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	4a26      	ldr	r2, [pc, #152]	; (8005de4 <USB_EP0_OutStart+0xb8>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d90a      	bls.n	8005d66 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d60:	d101      	bne.n	8005d66 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005d62:	2300      	movs	r3, #0
 8005d64:	e037      	b.n	8005dd6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	2300      	movs	r3, #0
 8005d70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d94:	f043 0318 	orr.w	r3, r3, #24
 8005d98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005da8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005dac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005dae:	7afb      	ldrb	r3, [r7, #11]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d10f      	bne.n	8005dd4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dba:	461a      	mov	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005dd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	371c      	adds	r7, #28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	4f54300a 	.word	0x4f54300a

08005de8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	3301      	adds	r3, #1
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4a13      	ldr	r2, [pc, #76]	; (8005e4c <USB_CoreReset+0x64>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d901      	bls.n	8005e06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e01b      	b.n	8005e3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	daf2      	bge.n	8005df4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	f043 0201 	orr.w	r2, r3, #1
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3301      	adds	r3, #1
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4a09      	ldr	r2, [pc, #36]	; (8005e4c <USB_CoreReset+0x64>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d901      	bls.n	8005e30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e006      	b.n	8005e3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d0f0      	beq.n	8005e1e <USB_CoreReset+0x36>

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	00030d40 	.word	0x00030d40

08005e50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e5c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005e60:	f002 f936 	bl	80080d0 <malloc>
 8005e64:	4603      	mov	r3, r0
 8005e66:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d105      	bne.n	8005e7a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005e76:	2302      	movs	r3, #2
 8005e78:	e066      	b.n	8005f48 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	7c1b      	ldrb	r3, [r3, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d119      	bne.n	8005ebe <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e8e:	2202      	movs	r2, #2
 8005e90:	2181      	movs	r1, #129	; 0x81
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f001 ffa3 	bl	8007dde <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f001 ff99 	bl	8007dde <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2210      	movs	r2, #16
 8005eb8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005ebc:	e016      	b.n	8005eec <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ebe:	2340      	movs	r3, #64	; 0x40
 8005ec0:	2202      	movs	r2, #2
 8005ec2:	2181      	movs	r1, #129	; 0x81
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f001 ff8a 	bl	8007dde <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ed0:	2340      	movs	r3, #64	; 0x40
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	2101      	movs	r1, #1
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f001 ff81 	bl	8007dde <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2210      	movs	r2, #16
 8005ee8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005eec:	2308      	movs	r3, #8
 8005eee:	2203      	movs	r2, #3
 8005ef0:	2182      	movs	r1, #130	; 0x82
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f001 ff73 	bl	8007dde <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	7c1b      	ldrb	r3, [r3, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d109      	bne.n	8005f36 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f002 f844 	bl	8007fbc <USBD_LL_PrepareReceive>
 8005f34:	e007      	b.n	8005f46 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f3c:	2340      	movs	r3, #64	; 0x40
 8005f3e:	2101      	movs	r1, #1
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f002 f83b 	bl	8007fbc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005f60:	2181      	movs	r1, #129	; 0x81
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f001 ff61 	bl	8007e2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005f6e:	2101      	movs	r1, #1
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f001 ff5a 	bl	8007e2a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005f7e:	2182      	movs	r1, #130	; 0x82
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f001 ff52 	bl	8007e2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00e      	beq.n	8005fbe <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f002 f895 	bl	80080e0 <free>
    pdev->pClassData = NULL;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fd8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d03a      	beq.n	8006068 <USBD_CDC_Setup+0xa0>
 8005ff2:	2b20      	cmp	r3, #32
 8005ff4:	f040 8097 	bne.w	8006126 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	88db      	ldrh	r3, [r3, #6]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d029      	beq.n	8006054 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	b25b      	sxtb	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	da11      	bge.n	800602e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006016:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	88d2      	ldrh	r2, [r2, #6]
 800601c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800601e:	6939      	ldr	r1, [r7, #16]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	88db      	ldrh	r3, [r3, #6]
 8006024:	461a      	mov	r2, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f001 fa9d 	bl	8007566 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800602c:	e082      	b.n	8006134 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	785a      	ldrb	r2, [r3, #1]
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	88db      	ldrh	r3, [r3, #6]
 800603c:	b2da      	uxtb	r2, r3
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006044:	6939      	ldr	r1, [r7, #16]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	88db      	ldrh	r3, [r3, #6]
 800604a:	461a      	mov	r2, r3
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f001 fab6 	bl	80075be <USBD_CtlPrepareRx>
    break;
 8006052:	e06f      	b.n	8006134 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	7850      	ldrb	r0, [r2, #1]
 8006060:	2200      	movs	r2, #0
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	4798      	blx	r3
    break;
 8006066:	e065      	b.n	8006134 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	785b      	ldrb	r3, [r3, #1]
 800606c:	2b0b      	cmp	r3, #11
 800606e:	d84f      	bhi.n	8006110 <USBD_CDC_Setup+0x148>
 8006070:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <USBD_CDC_Setup+0xb0>)
 8006072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006076:	bf00      	nop
 8006078:	080060a9 	.word	0x080060a9
 800607c:	0800611f 	.word	0x0800611f
 8006080:	08006111 	.word	0x08006111
 8006084:	08006111 	.word	0x08006111
 8006088:	08006111 	.word	0x08006111
 800608c:	08006111 	.word	0x08006111
 8006090:	08006111 	.word	0x08006111
 8006094:	08006111 	.word	0x08006111
 8006098:	08006111 	.word	0x08006111
 800609c:	08006111 	.word	0x08006111
 80060a0:	080060d1 	.word	0x080060d1
 80060a4:	080060f9 	.word	0x080060f9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d107      	bne.n	80060c2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80060b2:	f107 030c 	add.w	r3, r7, #12
 80060b6:	2202      	movs	r2, #2
 80060b8:	4619      	mov	r1, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f001 fa53 	bl	8007566 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80060c0:	e030      	b.n	8006124 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80060c2:	6839      	ldr	r1, [r7, #0]
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f001 f9dd 	bl	8007484 <USBD_CtlError>
        ret = USBD_FAIL;
 80060ca:	2303      	movs	r3, #3
 80060cc:	75fb      	strb	r3, [r7, #23]
      break;
 80060ce:	e029      	b.n	8006124 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d107      	bne.n	80060ea <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80060da:	f107 030f 	add.w	r3, r7, #15
 80060de:	2201      	movs	r2, #1
 80060e0:	4619      	mov	r1, r3
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f001 fa3f 	bl	8007566 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80060e8:	e01c      	b.n	8006124 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80060ea:	6839      	ldr	r1, [r7, #0]
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f001 f9c9 	bl	8007484 <USBD_CtlError>
        ret = USBD_FAIL;
 80060f2:	2303      	movs	r3, #3
 80060f4:	75fb      	strb	r3, [r7, #23]
      break;
 80060f6:	e015      	b.n	8006124 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d00f      	beq.n	8006122 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006102:	6839      	ldr	r1, [r7, #0]
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f001 f9bd 	bl	8007484 <USBD_CtlError>
        ret = USBD_FAIL;
 800610a:	2303      	movs	r3, #3
 800610c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800610e:	e008      	b.n	8006122 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006110:	6839      	ldr	r1, [r7, #0]
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f001 f9b6 	bl	8007484 <USBD_CtlError>
      ret = USBD_FAIL;
 8006118:	2303      	movs	r3, #3
 800611a:	75fb      	strb	r3, [r7, #23]
      break;
 800611c:	e002      	b.n	8006124 <USBD_CDC_Setup+0x15c>
      break;
 800611e:	bf00      	nop
 8006120:	e008      	b.n	8006134 <USBD_CDC_Setup+0x16c>
      break;
 8006122:	bf00      	nop
    }
    break;
 8006124:	e006      	b.n	8006134 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006126:	6839      	ldr	r1, [r7, #0]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f001 f9ab 	bl	8007484 <USBD_CtlError>
    ret = USBD_FAIL;
 800612e:	2303      	movs	r3, #3
 8006130:	75fb      	strb	r3, [r7, #23]
    break;
 8006132:	bf00      	nop
  }

  return (uint8_t)ret;
 8006134:	7dfb      	ldrb	r3, [r7, #23]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3718      	adds	r7, #24
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop

08006140 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	460b      	mov	r3, r1
 800614a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006152:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800615e:	2303      	movs	r3, #3
 8006160:	e049      	b.n	80061f6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006168:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800616a:	78fa      	ldrb	r2, [r7, #3]
 800616c:	6879      	ldr	r1, [r7, #4]
 800616e:	4613      	mov	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	440b      	add	r3, r1
 8006178:	3318      	adds	r3, #24
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d029      	beq.n	80061d4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006180:	78fa      	ldrb	r2, [r7, #3]
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	4613      	mov	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	440b      	add	r3, r1
 800618e:	3318      	adds	r3, #24
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	78f9      	ldrb	r1, [r7, #3]
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	460b      	mov	r3, r1
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	1a5b      	subs	r3, r3, r1
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4403      	add	r3, r0
 80061a0:	3344      	adds	r3, #68	; 0x44
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80061a8:	fb03 f301 	mul.w	r3, r3, r1
 80061ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d110      	bne.n	80061d4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80061b2:	78fa      	ldrb	r2, [r7, #3]
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	4613      	mov	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	440b      	add	r3, r1
 80061c0:	3318      	adds	r3, #24
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80061c6:	78f9      	ldrb	r1, [r7, #3]
 80061c8:	2300      	movs	r3, #0
 80061ca:	2200      	movs	r2, #0
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f001 fed4 	bl	8007f7a <USBD_LL_Transmit>
 80061d2:	e00f      	b.n	80061f4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80061f0:	78fa      	ldrb	r2, [r7, #3]
 80061f2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	460b      	mov	r3, r1
 8006208:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006210:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800621c:	2303      	movs	r3, #3
 800621e:	e015      	b.n	800624c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006220:	78fb      	ldrb	r3, [r7, #3]
 8006222:	4619      	mov	r1, r3
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f001 feea 	bl	8007ffe <USBD_LL_GetRxDataSize>
 800622a:	4602      	mov	r2, r0
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006246:	4611      	mov	r1, r2
 8006248:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006262:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d015      	beq.n	800629a <USBD_CDC_EP0_RxReady+0x46>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006274:	2bff      	cmp	r3, #255	; 0xff
 8006276:	d010      	beq.n	800629a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006286:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800628e:	b292      	uxth	r2, r2
 8006290:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	22ff      	movs	r2, #255	; 0xff
 8006296:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2243      	movs	r2, #67	; 0x43
 80062b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80062b2:	4b03      	ldr	r3, [pc, #12]	; (80062c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	20000094 	.word	0x20000094

080062c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2243      	movs	r2, #67	; 0x43
 80062d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80062d2:	4b03      	ldr	r3, [pc, #12]	; (80062e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	20000050 	.word	0x20000050

080062e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2243      	movs	r2, #67	; 0x43
 80062f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80062f2:	4b03      	ldr	r3, [pc, #12]	; (8006300 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	200000d8 	.word	0x200000d8

08006304 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	220a      	movs	r2, #10
 8006310:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006312:	4b03      	ldr	r3, [pc, #12]	; (8006320 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006314:	4618      	mov	r0, r3
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	2000000c 	.word	0x2000000c

08006324 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006334:	2303      	movs	r3, #3
 8006336:	e004      	b.n	8006342 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800634e:	b480      	push	{r7}
 8006350:	b087      	sub	sp, #28
 8006352:	af00      	add	r7, sp, #0
 8006354:	60f8      	str	r0, [r7, #12]
 8006356:	60b9      	str	r1, [r7, #8]
 8006358:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006360:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	371c      	adds	r7, #28
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006390:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063b6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80063b8:	2301      	movs	r3, #1
 80063ba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e01a      	b.n	8006400 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d114      	bne.n	80063fe <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80063f2:	2181      	movs	r1, #129	; 0x81
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 fdc0 	bl	8007f7a <USBD_LL_Transmit>

    ret = USBD_OK;
 80063fa:	2300      	movs	r3, #0
 80063fc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006416:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006422:	2303      	movs	r3, #3
 8006424:	e016      	b.n	8006454 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	7c1b      	ldrb	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d109      	bne.n	8006442 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006434:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006438:	2101      	movs	r1, #1
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f001 fdbe 	bl	8007fbc <USBD_LL_PrepareReceive>
 8006440:	e007      	b.n	8006452 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006448:	2340      	movs	r3, #64	; 0x40
 800644a:	2101      	movs	r1, #1
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f001 fdb5 	bl	8007fbc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	4613      	mov	r3, r2
 8006468:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006470:	2303      	movs	r3, #3
 8006472:	e025      	b.n	80064c0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800648c:	2b00      	cmp	r3, #0
 800648e:	d003      	beq.n	8006498 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	79fa      	ldrb	r2, [r7, #7]
 80064b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f001 fc2b 	bl	8007d10 <USBD_LL_Init>
 80064ba:	4603      	mov	r3, r0
 80064bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80064be:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80064d2:	2300      	movs	r3, #0
 80064d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80064dc:	2303      	movs	r3, #3
 80064de:	e010      	b.n	8006502 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f0:	f107 020e 	add.w	r2, r7, #14
 80064f4:	4610      	mov	r0, r2
 80064f6:	4798      	blx	r3
 80064f8:	4602      	mov	r2, r0
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b082      	sub	sp, #8
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f001 fc48 	bl	8007da8 <USBD_LL_Start>
 8006518:	4603      	mov	r3, r0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006522:	b480      	push	{r7}
 8006524:	b083      	sub	sp, #12
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	460b      	mov	r3, r1
 8006542:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006544:	2303      	movs	r3, #3
 8006546:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800654e:	2b00      	cmp	r3, #0
 8006550:	d009      	beq.n	8006566 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	78fa      	ldrb	r2, [r7, #3]
 800655c:	4611      	mov	r1, r2
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	4798      	blx	r3
 8006562:	4603      	mov	r3, r0
 8006564:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006566:	7bfb      	ldrb	r3, [r7, #15]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	460b      	mov	r3, r1
 800657a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006582:	2b00      	cmp	r3, #0
 8006584:	d007      	beq.n	8006596 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	78fa      	ldrb	r2, [r7, #3]
 8006590:	4611      	mov	r1, r2
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	4798      	blx	r3
  }

  return USBD_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 ff2c 	bl	8007410 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80065c6:	461a      	mov	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80065d4:	f003 031f 	and.w	r3, r3, #31
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d00e      	beq.n	80065fa <USBD_LL_SetupStage+0x5a>
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d302      	bcc.n	80065e6 <USBD_LL_SetupStage+0x46>
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d014      	beq.n	800660e <USBD_LL_SetupStage+0x6e>
 80065e4:	e01d      	b.n	8006622 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fa18 	bl	8006a24 <USBD_StdDevReq>
 80065f4:	4603      	mov	r3, r0
 80065f6:	73fb      	strb	r3, [r7, #15]
      break;
 80065f8:	e020      	b.n	800663c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fa7c 	bl	8006b00 <USBD_StdItfReq>
 8006608:	4603      	mov	r3, r0
 800660a:	73fb      	strb	r3, [r7, #15]
      break;
 800660c:	e016      	b.n	800663c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006614:	4619      	mov	r1, r3
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fab8 	bl	8006b8c <USBD_StdEPReq>
 800661c:	4603      	mov	r3, r0
 800661e:	73fb      	strb	r3, [r7, #15]
      break;
 8006620:	e00c      	b.n	800663c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006628:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800662c:	b2db      	uxtb	r3, r3
 800662e:	4619      	mov	r1, r3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 fc19 	bl	8007e68 <USBD_LL_StallEP>
 8006636:	4603      	mov	r3, r0
 8006638:	73fb      	strb	r3, [r7, #15]
      break;
 800663a:	bf00      	nop
  }

  return ret;
 800663c:	7bfb      	ldrb	r3, [r7, #15]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b086      	sub	sp, #24
 800664a:	af00      	add	r7, sp, #0
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	460b      	mov	r3, r1
 8006650:	607a      	str	r2, [r7, #4]
 8006652:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006654:	7afb      	ldrb	r3, [r7, #11]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d137      	bne.n	80066ca <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006660:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006668:	2b03      	cmp	r3, #3
 800666a:	d14a      	bne.n	8006702 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	429a      	cmp	r2, r3
 8006676:	d913      	bls.n	80066a0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	1ad2      	subs	r2, r2, r3
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	68da      	ldr	r2, [r3, #12]
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	4293      	cmp	r3, r2
 8006690:	bf28      	it	cs
 8006692:	4613      	movcs	r3, r2
 8006694:	461a      	mov	r2, r3
 8006696:	6879      	ldr	r1, [r7, #4]
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 ffad 	bl	80075f8 <USBD_CtlContinueRx>
 800669e:	e030      	b.n	8006702 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00a      	beq.n	80066c2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80066b2:	2b03      	cmp	r3, #3
 80066b4:	d105      	bne.n	80066c2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 ffa9 	bl	800761a <USBD_CtlSendStatus>
 80066c8:	e01b      	b.n	8006702 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d013      	beq.n	80066fe <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80066dc:	2b03      	cmp	r3, #3
 80066de:	d10e      	bne.n	80066fe <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	7afa      	ldrb	r2, [r7, #11]
 80066ea:	4611      	mov	r1, r2
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	4798      	blx	r3
 80066f0:	4603      	mov	r3, r0
 80066f2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80066f4:	7dfb      	ldrb	r3, [r7, #23]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80066fa:	7dfb      	ldrb	r3, [r7, #23]
 80066fc:	e002      	b.n	8006704 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80066fe:	2303      	movs	r3, #3
 8006700:	e000      	b.n	8006704 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	460b      	mov	r3, r1
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800671a:	7afb      	ldrb	r3, [r7, #11]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d16a      	bne.n	80067f6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3314      	adds	r3, #20
 8006724:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800672c:	2b02      	cmp	r3, #2
 800672e:	d155      	bne.n	80067dc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	429a      	cmp	r2, r3
 800673a:	d914      	bls.n	8006766 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	1ad2      	subs	r2, r2, r3
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	461a      	mov	r2, r3
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 ff22 	bl	800759c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006758:	2300      	movs	r3, #0
 800675a:	2200      	movs	r2, #0
 800675c:	2100      	movs	r1, #0
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f001 fc2c 	bl	8007fbc <USBD_LL_PrepareReceive>
 8006764:	e03a      	b.n	80067dc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	68da      	ldr	r2, [r3, #12]
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	429a      	cmp	r2, r3
 8006770:	d11c      	bne.n	80067ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800677a:	429a      	cmp	r2, r3
 800677c:	d316      	bcc.n	80067ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006788:	429a      	cmp	r2, r3
 800678a:	d20f      	bcs.n	80067ac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800678c:	2200      	movs	r2, #0
 800678e:	2100      	movs	r1, #0
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 ff03 	bl	800759c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800679e:	2300      	movs	r3, #0
 80067a0:	2200      	movs	r2, #0
 80067a2:	2100      	movs	r1, #0
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f001 fc09 	bl	8007fbc <USBD_LL_PrepareReceive>
 80067aa:	e017      	b.n	80067dc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00a      	beq.n	80067ce <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d105      	bne.n	80067ce <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80067ce:	2180      	movs	r1, #128	; 0x80
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f001 fb49 	bl	8007e68 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 ff32 	bl	8007640 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d123      	bne.n	800682e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f7ff fe9b 	bl	8006522 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80067f4:	e01b      	b.n	800682e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d013      	beq.n	800682a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006808:	2b03      	cmp	r3, #3
 800680a:	d10e      	bne.n	800682a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	7afa      	ldrb	r2, [r7, #11]
 8006816:	4611      	mov	r1, r2
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	4798      	blx	r3
 800681c:	4603      	mov	r3, r0
 800681e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006820:	7dfb      	ldrb	r3, [r7, #23]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006826:	7dfb      	ldrb	r3, [r7, #23]
 8006828:	e002      	b.n	8006830 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800682a:	2303      	movs	r3, #3
 800682c:	e000      	b.n	8006830 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3718      	adds	r7, #24
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006864:	2b00      	cmp	r3, #0
 8006866:	d009      	beq.n	800687c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	6852      	ldr	r2, [r2, #4]
 8006874:	b2d2      	uxtb	r2, r2
 8006876:	4611      	mov	r1, r2
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800687c:	2340      	movs	r3, #64	; 0x40
 800687e:	2200      	movs	r2, #0
 8006880:	2100      	movs	r1, #0
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f001 faab 	bl	8007dde <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2240      	movs	r2, #64	; 0x40
 8006894:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006898:	2340      	movs	r3, #64	; 0x40
 800689a:	2200      	movs	r2, #0
 800689c:	2180      	movs	r1, #128	; 0x80
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f001 fa9d 	bl	8007dde <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2240      	movs	r2, #64	; 0x40
 80068ae:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	460b      	mov	r3, r1
 80068c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	78fa      	ldrb	r2, [r7, #3]
 80068ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2204      	movs	r2, #4
 80068f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006912:	2b04      	cmp	r3, #4
 8006914:	d105      	bne.n	8006922 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800693e:	2b03      	cmp	r3, #3
 8006940:	d10b      	bne.n	800695a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d005      	beq.n	800695a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	460b      	mov	r3, r1
 8006988:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b082      	sub	sp, #8
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d009      	beq.n	80069dc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	6852      	ldr	r2, [r2, #4]
 80069d4:	b2d2      	uxtb	r2, r2
 80069d6:	4611      	mov	r1, r2
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	4798      	blx	r3
  }

  return USBD_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b087      	sub	sp, #28
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	3301      	adds	r3, #1
 80069fc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006a04:	8a3b      	ldrh	r3, [r7, #16]
 8006a06:	021b      	lsls	r3, r3, #8
 8006a08:	b21a      	sxth	r2, r3
 8006a0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	b21b      	sxth	r3, r3
 8006a12:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006a14:	89fb      	ldrh	r3, [r7, #14]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	371c      	adds	r7, #28
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
	...

08006a24 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a3a:	2b20      	cmp	r3, #32
 8006a3c:	d004      	beq.n	8006a48 <USBD_StdDevReq+0x24>
 8006a3e:	2b40      	cmp	r3, #64	; 0x40
 8006a40:	d002      	beq.n	8006a48 <USBD_StdDevReq+0x24>
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <USBD_StdDevReq+0x38>
 8006a46:	e050      	b.n	8006aea <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	4798      	blx	r3
 8006a56:	4603      	mov	r3, r0
 8006a58:	73fb      	strb	r3, [r7, #15]
    break;
 8006a5a:	e04b      	b.n	8006af4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	785b      	ldrb	r3, [r3, #1]
 8006a60:	2b09      	cmp	r3, #9
 8006a62:	d83c      	bhi.n	8006ade <USBD_StdDevReq+0xba>
 8006a64:	a201      	add	r2, pc, #4	; (adr r2, 8006a6c <USBD_StdDevReq+0x48>)
 8006a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6a:	bf00      	nop
 8006a6c:	08006ac1 	.word	0x08006ac1
 8006a70:	08006ad5 	.word	0x08006ad5
 8006a74:	08006adf 	.word	0x08006adf
 8006a78:	08006acb 	.word	0x08006acb
 8006a7c:	08006adf 	.word	0x08006adf
 8006a80:	08006a9f 	.word	0x08006a9f
 8006a84:	08006a95 	.word	0x08006a95
 8006a88:	08006adf 	.word	0x08006adf
 8006a8c:	08006ab7 	.word	0x08006ab7
 8006a90:	08006aa9 	.word	0x08006aa9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f9ce 	bl	8006e38 <USBD_GetDescriptor>
      break;
 8006a9c:	e024      	b.n	8006ae8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fb33 	bl	800710c <USBD_SetAddress>
      break;
 8006aa6:	e01f      	b.n	8006ae8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fb70 	bl	8007190 <USBD_SetConfig>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ab4:	e018      	b.n	8006ae8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 fc0d 	bl	80072d8 <USBD_GetConfig>
      break;
 8006abe:	e013      	b.n	8006ae8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fc3c 	bl	8007340 <USBD_GetStatus>
      break;
 8006ac8:	e00e      	b.n	8006ae8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fc6a 	bl	80073a6 <USBD_SetFeature>
      break;
 8006ad2:	e009      	b.n	8006ae8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fc79 	bl	80073ce <USBD_ClrFeature>
      break;
 8006adc:	e004      	b.n	8006ae8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 fccf 	bl	8007484 <USBD_CtlError>
      break;
 8006ae6:	bf00      	nop
    }
    break;
 8006ae8:	e004      	b.n	8006af4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fcc9 	bl	8007484 <USBD_CtlError>
    break;
 8006af2:	bf00      	nop
  }

  return ret;
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop

08006b00 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	d003      	beq.n	8006b22 <USBD_StdItfReq+0x22>
 8006b1a:	2b40      	cmp	r3, #64	; 0x40
 8006b1c:	d001      	beq.n	8006b22 <USBD_StdItfReq+0x22>
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d12a      	bne.n	8006b78 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d81d      	bhi.n	8006b6a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	889b      	ldrh	r3, [r3, #4]
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d813      	bhi.n	8006b60 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	4798      	blx	r3
 8006b46:	4603      	mov	r3, r0
 8006b48:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	88db      	ldrh	r3, [r3, #6]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d110      	bne.n	8006b74 <USBD_StdItfReq+0x74>
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10d      	bne.n	8006b74 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fd5e 	bl	800761a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006b5e:	e009      	b.n	8006b74 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fc8e 	bl	8007484 <USBD_CtlError>
      break;
 8006b68:	e004      	b.n	8006b74 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fc89 	bl	8007484 <USBD_CtlError>
      break;
 8006b72:	e000      	b.n	8006b76 <USBD_StdItfReq+0x76>
      break;
 8006b74:	bf00      	nop
    }
    break;
 8006b76:	e004      	b.n	8006b82 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fc82 	bl	8007484 <USBD_CtlError>
    break;
 8006b80:	bf00      	nop
  }

  return ret;
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	889b      	ldrh	r3, [r3, #4]
 8006b9e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ba8:	2b20      	cmp	r3, #32
 8006baa:	d004      	beq.n	8006bb6 <USBD_StdEPReq+0x2a>
 8006bac:	2b40      	cmp	r3, #64	; 0x40
 8006bae:	d002      	beq.n	8006bb6 <USBD_StdEPReq+0x2a>
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00a      	beq.n	8006bca <USBD_StdEPReq+0x3e>
 8006bb4:	e135      	b.n	8006e22 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	4798      	blx	r3
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	73fb      	strb	r3, [r7, #15]
    break;
 8006bc8:	e130      	b.n	8006e2c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	785b      	ldrb	r3, [r3, #1]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d03e      	beq.n	8006c50 <USBD_StdEPReq+0xc4>
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d002      	beq.n	8006bdc <USBD_StdEPReq+0x50>
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d077      	beq.n	8006cca <USBD_StdEPReq+0x13e>
 8006bda:	e11c      	b.n	8006e16 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d002      	beq.n	8006bec <USBD_StdEPReq+0x60>
 8006be6:	2b03      	cmp	r3, #3
 8006be8:	d015      	beq.n	8006c16 <USBD_StdEPReq+0x8a>
 8006bea:	e02b      	b.n	8006c44 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bec:	7bbb      	ldrb	r3, [r7, #14]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00c      	beq.n	8006c0c <USBD_StdEPReq+0x80>
 8006bf2:	7bbb      	ldrb	r3, [r7, #14]
 8006bf4:	2b80      	cmp	r3, #128	; 0x80
 8006bf6:	d009      	beq.n	8006c0c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bf8:	7bbb      	ldrb	r3, [r7, #14]
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f001 f933 	bl	8007e68 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c02:	2180      	movs	r1, #128	; 0x80
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f001 f92f 	bl	8007e68 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006c0a:	e020      	b.n	8006c4e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fc38 	bl	8007484 <USBD_CtlError>
        break;
 8006c14:	e01b      	b.n	8006c4e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	885b      	ldrh	r3, [r3, #2]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10e      	bne.n	8006c3c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c1e:	7bbb      	ldrb	r3, [r7, #14]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00b      	beq.n	8006c3c <USBD_StdEPReq+0xb0>
 8006c24:	7bbb      	ldrb	r3, [r7, #14]
 8006c26:	2b80      	cmp	r3, #128	; 0x80
 8006c28:	d008      	beq.n	8006c3c <USBD_StdEPReq+0xb0>
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	88db      	ldrh	r3, [r3, #6]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d104      	bne.n	8006c3c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c32:	7bbb      	ldrb	r3, [r7, #14]
 8006c34:	4619      	mov	r1, r3
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f001 f916 	bl	8007e68 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fcec 	bl	800761a <USBD_CtlSendStatus>

        break;
 8006c42:	e004      	b.n	8006c4e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006c44:	6839      	ldr	r1, [r7, #0]
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fc1c 	bl	8007484 <USBD_CtlError>
        break;
 8006c4c:	bf00      	nop
      }
      break;
 8006c4e:	e0e7      	b.n	8006e20 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d002      	beq.n	8006c60 <USBD_StdEPReq+0xd4>
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d015      	beq.n	8006c8a <USBD_StdEPReq+0xfe>
 8006c5e:	e02d      	b.n	8006cbc <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c60:	7bbb      	ldrb	r3, [r7, #14]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00c      	beq.n	8006c80 <USBD_StdEPReq+0xf4>
 8006c66:	7bbb      	ldrb	r3, [r7, #14]
 8006c68:	2b80      	cmp	r3, #128	; 0x80
 8006c6a:	d009      	beq.n	8006c80 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c6c:	7bbb      	ldrb	r3, [r7, #14]
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f001 f8f9 	bl	8007e68 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c76:	2180      	movs	r1, #128	; 0x80
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f001 f8f5 	bl	8007e68 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006c7e:	e023      	b.n	8006cc8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fbfe 	bl	8007484 <USBD_CtlError>
        break;
 8006c88:	e01e      	b.n	8006cc8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	885b      	ldrh	r3, [r3, #2]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d119      	bne.n	8006cc6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006c92:	7bbb      	ldrb	r3, [r7, #14]
 8006c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d004      	beq.n	8006ca6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c9c:	7bbb      	ldrb	r3, [r7, #14]
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f001 f900 	bl	8007ea6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fcb7 	bl	800761a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	4798      	blx	r3
        }
        break;
 8006cba:	e004      	b.n	8006cc6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fbe0 	bl	8007484 <USBD_CtlError>
        break;
 8006cc4:	e000      	b.n	8006cc8 <USBD_StdEPReq+0x13c>
        break;
 8006cc6:	bf00      	nop
      }
      break;
 8006cc8:	e0aa      	b.n	8006e20 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d002      	beq.n	8006cda <USBD_StdEPReq+0x14e>
 8006cd4:	2b03      	cmp	r3, #3
 8006cd6:	d032      	beq.n	8006d3e <USBD_StdEPReq+0x1b2>
 8006cd8:	e097      	b.n	8006e0a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cda:	7bbb      	ldrb	r3, [r7, #14]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d007      	beq.n	8006cf0 <USBD_StdEPReq+0x164>
 8006ce0:	7bbb      	ldrb	r3, [r7, #14]
 8006ce2:	2b80      	cmp	r3, #128	; 0x80
 8006ce4:	d004      	beq.n	8006cf0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fbcb 	bl	8007484 <USBD_CtlError>
          break;
 8006cee:	e091      	b.n	8006e14 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	da0b      	bge.n	8006d10 <USBD_StdEPReq+0x184>
 8006cf8:	7bbb      	ldrb	r3, [r7, #14]
 8006cfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cfe:	4613      	mov	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	3310      	adds	r3, #16
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	e00b      	b.n	8006d28 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006d10:	7bbb      	ldrb	r3, [r7, #14]
 8006d12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d16:	4613      	mov	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	4413      	add	r3, r2
 8006d26:	3304      	adds	r3, #4
 8006d28:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	2202      	movs	r2, #2
 8006d34:	4619      	mov	r1, r3
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fc15 	bl	8007566 <USBD_CtlSendData>
        break;
 8006d3c:	e06a      	b.n	8006e14 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006d3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	da11      	bge.n	8006d6a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d46:	7bbb      	ldrb	r3, [r7, #14]
 8006d48:	f003 020f 	and.w	r2, r3, #15
 8006d4c:	6879      	ldr	r1, [r7, #4]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	440b      	add	r3, r1
 8006d58:	3324      	adds	r3, #36	; 0x24
 8006d5a:	881b      	ldrh	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d117      	bne.n	8006d90 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fb8e 	bl	8007484 <USBD_CtlError>
            break;
 8006d68:	e054      	b.n	8006e14 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d6a:	7bbb      	ldrb	r3, [r7, #14]
 8006d6c:	f003 020f 	and.w	r2, r3, #15
 8006d70:	6879      	ldr	r1, [r7, #4]
 8006d72:	4613      	mov	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	440b      	add	r3, r1
 8006d7c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d80:	881b      	ldrh	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d104      	bne.n	8006d90 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fb7b 	bl	8007484 <USBD_CtlError>
            break;
 8006d8e:	e041      	b.n	8006e14 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	da0b      	bge.n	8006db0 <USBD_StdEPReq+0x224>
 8006d98:	7bbb      	ldrb	r3, [r7, #14]
 8006d9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d9e:	4613      	mov	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	3310      	adds	r3, #16
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	4413      	add	r3, r2
 8006dac:	3304      	adds	r3, #4
 8006dae:	e00b      	b.n	8006dc8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006db0:	7bbb      	ldrb	r3, [r7, #14]
 8006db2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006db6:	4613      	mov	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	3304      	adds	r3, #4
 8006dc8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006dca:	7bbb      	ldrb	r3, [r7, #14]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <USBD_StdEPReq+0x24a>
 8006dd0:	7bbb      	ldrb	r3, [r7, #14]
 8006dd2:	2b80      	cmp	r3, #128	; 0x80
 8006dd4:	d103      	bne.n	8006dde <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	601a      	str	r2, [r3, #0]
 8006ddc:	e00e      	b.n	8006dfc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006dde:	7bbb      	ldrb	r3, [r7, #14]
 8006de0:	4619      	mov	r1, r3
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f001 f87e 	bl	8007ee4 <USBD_LL_IsStallEP>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	2201      	movs	r2, #1
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	e002      	b.n	8006dfc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2202      	movs	r2, #2
 8006e00:	4619      	mov	r1, r3
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fbaf 	bl	8007566 <USBD_CtlSendData>
          break;
 8006e08:	e004      	b.n	8006e14 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fb39 	bl	8007484 <USBD_CtlError>
        break;
 8006e12:	bf00      	nop
      }
      break;
 8006e14:	e004      	b.n	8006e20 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fb33 	bl	8007484 <USBD_CtlError>
      break;
 8006e1e:	bf00      	nop
    }
    break;
 8006e20:	e004      	b.n	8006e2c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fb2d 	bl	8007484 <USBD_CtlError>
    break;
 8006e2a:	bf00      	nop
  }

  return ret;
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
	...

08006e38 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e42:	2300      	movs	r3, #0
 8006e44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006e46:	2300      	movs	r3, #0
 8006e48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	885b      	ldrh	r3, [r3, #2]
 8006e52:	0a1b      	lsrs	r3, r3, #8
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	3b01      	subs	r3, #1
 8006e58:	2b06      	cmp	r3, #6
 8006e5a:	f200 8128 	bhi.w	80070ae <USBD_GetDescriptor+0x276>
 8006e5e:	a201      	add	r2, pc, #4	; (adr r2, 8006e64 <USBD_GetDescriptor+0x2c>)
 8006e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e64:	08006e81 	.word	0x08006e81
 8006e68:	08006e99 	.word	0x08006e99
 8006e6c:	08006ed9 	.word	0x08006ed9
 8006e70:	080070af 	.word	0x080070af
 8006e74:	080070af 	.word	0x080070af
 8006e78:	0800704f 	.word	0x0800704f
 8006e7c:	0800707b 	.word	0x0800707b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	7c12      	ldrb	r2, [r2, #16]
 8006e8c:	f107 0108 	add.w	r1, r7, #8
 8006e90:	4610      	mov	r0, r2
 8006e92:	4798      	blx	r3
 8006e94:	60f8      	str	r0, [r7, #12]
    break;
 8006e96:	e112      	b.n	80070be <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	7c1b      	ldrb	r3, [r3, #16]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10d      	bne.n	8006ebc <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea8:	f107 0208 	add.w	r2, r7, #8
 8006eac:	4610      	mov	r0, r2
 8006eae:	4798      	blx	r3
 8006eb0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006eba:	e100      	b.n	80070be <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec4:	f107 0208 	add.w	r2, r7, #8
 8006ec8:	4610      	mov	r0, r2
 8006eca:	4798      	blx	r3
 8006ecc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	701a      	strb	r2, [r3, #0]
    break;
 8006ed6:	e0f2      	b.n	80070be <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	885b      	ldrh	r3, [r3, #2]
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b05      	cmp	r3, #5
 8006ee0:	f200 80ac 	bhi.w	800703c <USBD_GetDescriptor+0x204>
 8006ee4:	a201      	add	r2, pc, #4	; (adr r2, 8006eec <USBD_GetDescriptor+0xb4>)
 8006ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eea:	bf00      	nop
 8006eec:	08006f05 	.word	0x08006f05
 8006ef0:	08006f39 	.word	0x08006f39
 8006ef4:	08006f6d 	.word	0x08006f6d
 8006ef8:	08006fa1 	.word	0x08006fa1
 8006efc:	08006fd5 	.word	0x08006fd5
 8006f00:	08007009 	.word	0x08007009
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00b      	beq.n	8006f28 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	7c12      	ldrb	r2, [r2, #16]
 8006f1c:	f107 0108 	add.w	r1, r7, #8
 8006f20:	4610      	mov	r0, r2
 8006f22:	4798      	blx	r3
 8006f24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f26:	e091      	b.n	800704c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006f28:	6839      	ldr	r1, [r7, #0]
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 faaa 	bl	8007484 <USBD_CtlError>
        err++;
 8006f30:	7afb      	ldrb	r3, [r7, #11]
 8006f32:	3301      	adds	r3, #1
 8006f34:	72fb      	strb	r3, [r7, #11]
      break;
 8006f36:	e089      	b.n	800704c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00b      	beq.n	8006f5c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	7c12      	ldrb	r2, [r2, #16]
 8006f50:	f107 0108 	add.w	r1, r7, #8
 8006f54:	4610      	mov	r0, r2
 8006f56:	4798      	blx	r3
 8006f58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f5a:	e077      	b.n	800704c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fa90 	bl	8007484 <USBD_CtlError>
        err++;
 8006f64:	7afb      	ldrb	r3, [r7, #11]
 8006f66:	3301      	adds	r3, #1
 8006f68:	72fb      	strb	r3, [r7, #11]
      break;
 8006f6a:	e06f      	b.n	800704c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00b      	beq.n	8006f90 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	7c12      	ldrb	r2, [r2, #16]
 8006f84:	f107 0108 	add.w	r1, r7, #8
 8006f88:	4610      	mov	r0, r2
 8006f8a:	4798      	blx	r3
 8006f8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f8e:	e05d      	b.n	800704c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006f90:	6839      	ldr	r1, [r7, #0]
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fa76 	bl	8007484 <USBD_CtlError>
        err++;
 8006f98:	7afb      	ldrb	r3, [r7, #11]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	72fb      	strb	r3, [r7, #11]
      break;
 8006f9e:	e055      	b.n	800704c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00b      	beq.n	8006fc4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	7c12      	ldrb	r2, [r2, #16]
 8006fb8:	f107 0108 	add.w	r1, r7, #8
 8006fbc:	4610      	mov	r0, r2
 8006fbe:	4798      	blx	r3
 8006fc0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fc2:	e043      	b.n	800704c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fa5c 	bl	8007484 <USBD_CtlError>
        err++;
 8006fcc:	7afb      	ldrb	r3, [r7, #11]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	72fb      	strb	r3, [r7, #11]
      break;
 8006fd2:	e03b      	b.n	800704c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00b      	beq.n	8006ff8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fe6:	695b      	ldr	r3, [r3, #20]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	7c12      	ldrb	r2, [r2, #16]
 8006fec:	f107 0108 	add.w	r1, r7, #8
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	4798      	blx	r3
 8006ff4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ff6:	e029      	b.n	800704c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fa42 	bl	8007484 <USBD_CtlError>
        err++;
 8007000:	7afb      	ldrb	r3, [r7, #11]
 8007002:	3301      	adds	r3, #1
 8007004:	72fb      	strb	r3, [r7, #11]
      break;
 8007006:	e021      	b.n	800704c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00b      	beq.n	800702c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	7c12      	ldrb	r2, [r2, #16]
 8007020:	f107 0108 	add.w	r1, r7, #8
 8007024:	4610      	mov	r0, r2
 8007026:	4798      	blx	r3
 8007028:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800702a:	e00f      	b.n	800704c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800702c:	6839      	ldr	r1, [r7, #0]
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fa28 	bl	8007484 <USBD_CtlError>
        err++;
 8007034:	7afb      	ldrb	r3, [r7, #11]
 8007036:	3301      	adds	r3, #1
 8007038:	72fb      	strb	r3, [r7, #11]
      break;
 800703a:	e007      	b.n	800704c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800703c:	6839      	ldr	r1, [r7, #0]
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fa20 	bl	8007484 <USBD_CtlError>
      err++;
 8007044:	7afb      	ldrb	r3, [r7, #11]
 8007046:	3301      	adds	r3, #1
 8007048:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800704a:	bf00      	nop
    }
    break;
 800704c:	e037      	b.n	80070be <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	7c1b      	ldrb	r3, [r3, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d109      	bne.n	800706a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800705c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705e:	f107 0208 	add.w	r2, r7, #8
 8007062:	4610      	mov	r0, r2
 8007064:	4798      	blx	r3
 8007066:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007068:	e029      	b.n	80070be <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fa09 	bl	8007484 <USBD_CtlError>
      err++;
 8007072:	7afb      	ldrb	r3, [r7, #11]
 8007074:	3301      	adds	r3, #1
 8007076:	72fb      	strb	r3, [r7, #11]
    break;
 8007078:	e021      	b.n	80070be <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	7c1b      	ldrb	r3, [r3, #16]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10d      	bne.n	800709e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708a:	f107 0208 	add.w	r2, r7, #8
 800708e:	4610      	mov	r0, r2
 8007090:	4798      	blx	r3
 8007092:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	3301      	adds	r3, #1
 8007098:	2207      	movs	r2, #7
 800709a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800709c:	e00f      	b.n	80070be <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f9ef 	bl	8007484 <USBD_CtlError>
      err++;
 80070a6:	7afb      	ldrb	r3, [r7, #11]
 80070a8:	3301      	adds	r3, #1
 80070aa:	72fb      	strb	r3, [r7, #11]
    break;
 80070ac:	e007      	b.n	80070be <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f9e7 	bl	8007484 <USBD_CtlError>
    err++;
 80070b6:	7afb      	ldrb	r3, [r7, #11]
 80070b8:	3301      	adds	r3, #1
 80070ba:	72fb      	strb	r3, [r7, #11]
    break;
 80070bc:	bf00      	nop
  }

  if (err != 0U)
 80070be:	7afb      	ldrb	r3, [r7, #11]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d11e      	bne.n	8007102 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	88db      	ldrh	r3, [r3, #6]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d016      	beq.n	80070fa <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80070cc:	893b      	ldrh	r3, [r7, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00e      	beq.n	80070f0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	88da      	ldrh	r2, [r3, #6]
 80070d6:	893b      	ldrh	r3, [r7, #8]
 80070d8:	4293      	cmp	r3, r2
 80070da:	bf28      	it	cs
 80070dc:	4613      	movcs	r3, r2
 80070de:	b29b      	uxth	r3, r3
 80070e0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80070e2:	893b      	ldrh	r3, [r7, #8]
 80070e4:	461a      	mov	r2, r3
 80070e6:	68f9      	ldr	r1, [r7, #12]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fa3c 	bl	8007566 <USBD_CtlSendData>
 80070ee:	e009      	b.n	8007104 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f9c6 	bl	8007484 <USBD_CtlError>
 80070f8:	e004      	b.n	8007104 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fa8d 	bl	800761a <USBD_CtlSendStatus>
 8007100:	e000      	b.n	8007104 <USBD_GetDescriptor+0x2cc>
    return;
 8007102:	bf00      	nop
    }
  }
}
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop

0800710c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	889b      	ldrh	r3, [r3, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d130      	bne.n	8007180 <USBD_SetAddress+0x74>
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	88db      	ldrh	r3, [r3, #6]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d12c      	bne.n	8007180 <USBD_SetAddress+0x74>
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	885b      	ldrh	r3, [r3, #2]
 800712a:	2b7f      	cmp	r3, #127	; 0x7f
 800712c:	d828      	bhi.n	8007180 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	885b      	ldrh	r3, [r3, #2]
 8007132:	b2db      	uxtb	r3, r3
 8007134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007138:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007140:	2b03      	cmp	r3, #3
 8007142:	d104      	bne.n	800714e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007144:	6839      	ldr	r1, [r7, #0]
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f99c 	bl	8007484 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800714c:	e01c      	b.n	8007188 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	7bfa      	ldrb	r2, [r7, #15]
 8007152:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007156:	7bfb      	ldrb	r3, [r7, #15]
 8007158:	4619      	mov	r1, r3
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 feee 	bl	8007f3c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fa5a 	bl	800761a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007166:	7bfb      	ldrb	r3, [r7, #15]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d004      	beq.n	8007176 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007174:	e008      	b.n	8007188 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800717e:	e003      	b.n	8007188 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007180:	6839      	ldr	r1, [r7, #0]
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f97e 	bl	8007484 <USBD_CtlError>
  }
}
 8007188:	bf00      	nop
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	885b      	ldrh	r3, [r3, #2]
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	4b4b      	ldr	r3, [pc, #300]	; (80072d4 <USBD_SetConfig+0x144>)
 80071a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80071a8:	4b4a      	ldr	r3, [pc, #296]	; (80072d4 <USBD_SetConfig+0x144>)
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d905      	bls.n	80071bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f966 	bl	8007484 <USBD_CtlError>
    return USBD_FAIL;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e087      	b.n	80072cc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d002      	beq.n	80071cc <USBD_SetConfig+0x3c>
 80071c6:	2b03      	cmp	r3, #3
 80071c8:	d025      	beq.n	8007216 <USBD_SetConfig+0x86>
 80071ca:	e071      	b.n	80072b0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80071cc:	4b41      	ldr	r3, [pc, #260]	; (80072d4 <USBD_SetConfig+0x144>)
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d01c      	beq.n	800720e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80071d4:	4b3f      	ldr	r3, [pc, #252]	; (80072d4 <USBD_SetConfig+0x144>)
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	461a      	mov	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80071de:	4b3d      	ldr	r3, [pc, #244]	; (80072d4 <USBD_SetConfig+0x144>)
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	4619      	mov	r1, r3
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7ff f9a7 	bl	8006538 <USBD_SetClassConfig>
 80071ea:	4603      	mov	r3, r0
 80071ec:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d004      	beq.n	80071fe <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80071f4:	6839      	ldr	r1, [r7, #0]
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f944 	bl	8007484 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80071fc:	e065      	b.n	80072ca <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fa0b 	bl	800761a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2203      	movs	r2, #3
 8007208:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800720c:	e05d      	b.n	80072ca <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fa03 	bl	800761a <USBD_CtlSendStatus>
    break;
 8007214:	e059      	b.n	80072ca <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007216:	4b2f      	ldr	r3, [pc, #188]	; (80072d4 <USBD_SetConfig+0x144>)
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d112      	bne.n	8007244 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2202      	movs	r2, #2
 8007222:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007226:	4b2b      	ldr	r3, [pc, #172]	; (80072d4 <USBD_SetConfig+0x144>)
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007230:	4b28      	ldr	r3, [pc, #160]	; (80072d4 <USBD_SetConfig+0x144>)
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7ff f99a 	bl	8006570 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f9ec 	bl	800761a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007242:	e042      	b.n	80072ca <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007244:	4b23      	ldr	r3, [pc, #140]	; (80072d4 <USBD_SetConfig+0x144>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	461a      	mov	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	429a      	cmp	r2, r3
 8007250:	d02a      	beq.n	80072a8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	b2db      	uxtb	r3, r3
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7ff f988 	bl	8006570 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007260:	4b1c      	ldr	r3, [pc, #112]	; (80072d4 <USBD_SetConfig+0x144>)
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	461a      	mov	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800726a:	4b1a      	ldr	r3, [pc, #104]	; (80072d4 <USBD_SetConfig+0x144>)
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	4619      	mov	r1, r3
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7ff f961 	bl	8006538 <USBD_SetClassConfig>
 8007276:	4603      	mov	r3, r0
 8007278:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800727a:	7bfb      	ldrb	r3, [r7, #15]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00f      	beq.n	80072a0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007280:	6839      	ldr	r1, [r7, #0]
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f8fe 	bl	8007484 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	b2db      	uxtb	r3, r3
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7ff f96d 	bl	8006570 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2202      	movs	r2, #2
 800729a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800729e:	e014      	b.n	80072ca <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f9ba 	bl	800761a <USBD_CtlSendStatus>
    break;
 80072a6:	e010      	b.n	80072ca <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f9b6 	bl	800761a <USBD_CtlSendStatus>
    break;
 80072ae:	e00c      	b.n	80072ca <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f8e6 	bl	8007484 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072b8:	4b06      	ldr	r3, [pc, #24]	; (80072d4 <USBD_SetConfig+0x144>)
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	4619      	mov	r1, r3
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7ff f956 	bl	8006570 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80072c4:	2303      	movs	r3, #3
 80072c6:	73fb      	strb	r3, [r7, #15]
    break;
 80072c8:	bf00      	nop
  }

  return ret;
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	2000020c 	.word	0x2000020c

080072d8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	88db      	ldrh	r3, [r3, #6]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d004      	beq.n	80072f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f8c9 	bl	8007484 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80072f2:	e021      	b.n	8007338 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	db17      	blt.n	800732e <USBD_GetConfig+0x56>
 80072fe:	2b02      	cmp	r3, #2
 8007300:	dd02      	ble.n	8007308 <USBD_GetConfig+0x30>
 8007302:	2b03      	cmp	r3, #3
 8007304:	d00b      	beq.n	800731e <USBD_GetConfig+0x46>
 8007306:	e012      	b.n	800732e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	3308      	adds	r3, #8
 8007312:	2201      	movs	r2, #1
 8007314:	4619      	mov	r1, r3
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f925 	bl	8007566 <USBD_CtlSendData>
      break;
 800731c:	e00c      	b.n	8007338 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	3304      	adds	r3, #4
 8007322:	2201      	movs	r2, #1
 8007324:	4619      	mov	r1, r3
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f91d 	bl	8007566 <USBD_CtlSendData>
      break;
 800732c:	e004      	b.n	8007338 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800732e:	6839      	ldr	r1, [r7, #0]
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f8a7 	bl	8007484 <USBD_CtlError>
      break;
 8007336:	bf00      	nop
}
 8007338:	bf00      	nop
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007350:	3b01      	subs	r3, #1
 8007352:	2b02      	cmp	r3, #2
 8007354:	d81e      	bhi.n	8007394 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	88db      	ldrh	r3, [r3, #6]
 800735a:	2b02      	cmp	r3, #2
 800735c:	d004      	beq.n	8007368 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f88f 	bl	8007484 <USBD_CtlError>
      break;
 8007366:	e01a      	b.n	800739e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007374:	2b00      	cmp	r3, #0
 8007376:	d005      	beq.n	8007384 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	f043 0202 	orr.w	r2, r3, #2
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	330c      	adds	r3, #12
 8007388:	2202      	movs	r2, #2
 800738a:	4619      	mov	r1, r3
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f8ea 	bl	8007566 <USBD_CtlSendData>
    break;
 8007392:	e004      	b.n	800739e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f874 	bl	8007484 <USBD_CtlError>
    break;
 800739c:	bf00      	nop
  }
}
 800739e:	bf00      	nop
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b082      	sub	sp, #8
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	885b      	ldrh	r3, [r3, #2]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d106      	bne.n	80073c6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f92a 	bl	800761a <USBD_CtlSendStatus>
  }
}
 80073c6:	bf00      	nop
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b082      	sub	sp, #8
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073de:	3b01      	subs	r3, #1
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d80b      	bhi.n	80073fc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	885b      	ldrh	r3, [r3, #2]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d10c      	bne.n	8007406 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f910 	bl	800761a <USBD_CtlSendStatus>
      }
      break;
 80073fa:	e004      	b.n	8007406 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f840 	bl	8007484 <USBD_CtlError>
      break;
 8007404:	e000      	b.n	8007408 <USBD_ClrFeature+0x3a>
      break;
 8007406:	bf00      	nop
  }
}
 8007408:	bf00      	nop
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	781a      	ldrb	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	3301      	adds	r3, #1
 800742a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	781a      	ldrb	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	3301      	adds	r3, #1
 8007438:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f7ff fad3 	bl	80069e6 <SWAPBYTE>
 8007440:	4603      	mov	r3, r0
 8007442:	461a      	mov	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3301      	adds	r3, #1
 800744c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3301      	adds	r3, #1
 8007452:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f7ff fac6 	bl	80069e6 <SWAPBYTE>
 800745a:	4603      	mov	r3, r0
 800745c:	461a      	mov	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3301      	adds	r3, #1
 8007466:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3301      	adds	r3, #1
 800746c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f7ff fab9 	bl	80069e6 <SWAPBYTE>
 8007474:	4603      	mov	r3, r0
 8007476:	461a      	mov	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	80da      	strh	r2, [r3, #6]
}
 800747c:	bf00      	nop
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800748e:	2180      	movs	r1, #128	; 0x80
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fce9 	bl	8007e68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007496:	2100      	movs	r1, #0
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fce5 	bl	8007e68 <USBD_LL_StallEP>
}
 800749e:	bf00      	nop
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b086      	sub	sp, #24
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d036      	beq.n	800752a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80074c0:	6938      	ldr	r0, [r7, #16]
 80074c2:	f000 f836 	bl	8007532 <USBD_GetLen>
 80074c6:	4603      	mov	r3, r0
 80074c8:	3301      	adds	r3, #1
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	005b      	lsls	r3, r3, #1
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80074d4:	7dfb      	ldrb	r3, [r7, #23]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	4413      	add	r3, r2
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	7812      	ldrb	r2, [r2, #0]
 80074de:	701a      	strb	r2, [r3, #0]
  idx++;
 80074e0:	7dfb      	ldrb	r3, [r7, #23]
 80074e2:	3301      	adds	r3, #1
 80074e4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	4413      	add	r3, r2
 80074ec:	2203      	movs	r2, #3
 80074ee:	701a      	strb	r2, [r3, #0]
  idx++;
 80074f0:	7dfb      	ldrb	r3, [r7, #23]
 80074f2:	3301      	adds	r3, #1
 80074f4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80074f6:	e013      	b.n	8007520 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80074f8:	7dfb      	ldrb	r3, [r7, #23]
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	4413      	add	r3, r2
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	7812      	ldrb	r2, [r2, #0]
 8007502:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	3301      	adds	r3, #1
 8007508:	613b      	str	r3, [r7, #16]
    idx++;
 800750a:	7dfb      	ldrb	r3, [r7, #23]
 800750c:	3301      	adds	r3, #1
 800750e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007510:	7dfb      	ldrb	r3, [r7, #23]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	4413      	add	r3, r2
 8007516:	2200      	movs	r2, #0
 8007518:	701a      	strb	r2, [r3, #0]
    idx++;
 800751a:	7dfb      	ldrb	r3, [r7, #23]
 800751c:	3301      	adds	r3, #1
 800751e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1e7      	bne.n	80074f8 <USBD_GetString+0x52>
 8007528:	e000      	b.n	800752c <USBD_GetString+0x86>
    return;
 800752a:	bf00      	nop
  }
}
 800752c:	3718      	adds	r7, #24
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007532:	b480      	push	{r7}
 8007534:	b085      	sub	sp, #20
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800753a:	2300      	movs	r3, #0
 800753c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007542:	e005      	b.n	8007550 <USBD_GetLen+0x1e>
  {
    len++;
 8007544:	7bfb      	ldrb	r3, [r7, #15]
 8007546:	3301      	adds	r3, #1
 8007548:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	3301      	adds	r3, #1
 800754e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1f5      	bne.n	8007544 <USBD_GetLen+0x12>
  }

  return len;
 8007558:	7bfb      	ldrb	r3, [r7, #15]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3714      	adds	r7, #20
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b084      	sub	sp, #16
 800756a:	af00      	add	r7, sp, #0
 800756c:	60f8      	str	r0, [r7, #12]
 800756e:	60b9      	str	r1, [r7, #8]
 8007570:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2202      	movs	r2, #2
 8007576:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	2100      	movs	r1, #0
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f000 fcf4 	bl	8007f7a <USBD_LL_Transmit>

  return USBD_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	2100      	movs	r1, #0
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f000 fce3 	bl	8007f7a <USBD_LL_Transmit>

  return USBD_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b084      	sub	sp, #16
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	60b9      	str	r1, [r7, #8]
 80075c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2203      	movs	r2, #3
 80075ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	2100      	movs	r1, #0
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f000 fce7 	bl	8007fbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	2100      	movs	r1, #0
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 fcd6 	bl	8007fbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b082      	sub	sp, #8
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2204      	movs	r2, #4
 8007626:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800762a:	2300      	movs	r3, #0
 800762c:	2200      	movs	r2, #0
 800762e:	2100      	movs	r1, #0
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 fca2 	bl	8007f7a <USBD_LL_Transmit>

  return USBD_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2205      	movs	r2, #5
 800764c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007650:	2300      	movs	r3, #0
 8007652:	2200      	movs	r2, #0
 8007654:	2100      	movs	r1, #0
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fcb0 	bl	8007fbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
	...

08007668 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800766c:	2200      	movs	r2, #0
 800766e:	4912      	ldr	r1, [pc, #72]	; (80076b8 <MX_USB_DEVICE_Init+0x50>)
 8007670:	4812      	ldr	r0, [pc, #72]	; (80076bc <MX_USB_DEVICE_Init+0x54>)
 8007672:	f7fe fef3 	bl	800645c <USBD_Init>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800767c:	f7f9 f9d2 	bl	8000a24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007680:	490f      	ldr	r1, [pc, #60]	; (80076c0 <MX_USB_DEVICE_Init+0x58>)
 8007682:	480e      	ldr	r0, [pc, #56]	; (80076bc <MX_USB_DEVICE_Init+0x54>)
 8007684:	f7fe ff20 	bl	80064c8 <USBD_RegisterClass>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800768e:	f7f9 f9c9 	bl	8000a24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007692:	490c      	ldr	r1, [pc, #48]	; (80076c4 <MX_USB_DEVICE_Init+0x5c>)
 8007694:	4809      	ldr	r0, [pc, #36]	; (80076bc <MX_USB_DEVICE_Init+0x54>)
 8007696:	f7fe fe45 	bl	8006324 <USBD_CDC_RegisterInterface>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80076a0:	f7f9 f9c0 	bl	8000a24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80076a4:	4805      	ldr	r0, [pc, #20]	; (80076bc <MX_USB_DEVICE_Init+0x54>)
 80076a6:	f7fe ff30 	bl	800650a <USBD_Start>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80076b0:	f7f9 f9b8 	bl	8000a24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80076b4:	bf00      	nop
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	20000138 	.word	0x20000138
 80076bc:	20000390 	.word	0x20000390
 80076c0:	20000018 	.word	0x20000018
 80076c4:	20000124 	.word	0x20000124

080076c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80076cc:	2200      	movs	r2, #0
 80076ce:	4905      	ldr	r1, [pc, #20]	; (80076e4 <CDC_Init_FS+0x1c>)
 80076d0:	4805      	ldr	r0, [pc, #20]	; (80076e8 <CDC_Init_FS+0x20>)
 80076d2:	f7fe fe3c 	bl	800634e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80076d6:	4905      	ldr	r1, [pc, #20]	; (80076ec <CDC_Init_FS+0x24>)
 80076d8:	4803      	ldr	r0, [pc, #12]	; (80076e8 <CDC_Init_FS+0x20>)
 80076da:	f7fe fe51 	bl	8006380 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80076de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	20000e60 	.word	0x20000e60
 80076e8:	20000390 	.word	0x20000390
 80076ec:	20000660 	.word	0x20000660

080076f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80076f0:	b480      	push	{r7}
 80076f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80076f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	4603      	mov	r3, r0
 8007708:	6039      	str	r1, [r7, #0]
 800770a:	71fb      	strb	r3, [r7, #7]
 800770c:	4613      	mov	r3, r2
 800770e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007710:	79fb      	ldrb	r3, [r7, #7]
 8007712:	2b23      	cmp	r3, #35	; 0x23
 8007714:	d85c      	bhi.n	80077d0 <CDC_Control_FS+0xd0>
 8007716:	a201      	add	r2, pc, #4	; (adr r2, 800771c <CDC_Control_FS+0x1c>)
 8007718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771c:	080077d1 	.word	0x080077d1
 8007720:	080077d1 	.word	0x080077d1
 8007724:	080077d1 	.word	0x080077d1
 8007728:	080077d1 	.word	0x080077d1
 800772c:	080077d1 	.word	0x080077d1
 8007730:	080077d1 	.word	0x080077d1
 8007734:	080077d1 	.word	0x080077d1
 8007738:	080077d1 	.word	0x080077d1
 800773c:	080077d1 	.word	0x080077d1
 8007740:	080077d1 	.word	0x080077d1
 8007744:	080077d1 	.word	0x080077d1
 8007748:	080077d1 	.word	0x080077d1
 800774c:	080077d1 	.word	0x080077d1
 8007750:	080077d1 	.word	0x080077d1
 8007754:	080077d1 	.word	0x080077d1
 8007758:	080077d1 	.word	0x080077d1
 800775c:	080077d1 	.word	0x080077d1
 8007760:	080077d1 	.word	0x080077d1
 8007764:	080077d1 	.word	0x080077d1
 8007768:	080077d1 	.word	0x080077d1
 800776c:	080077d1 	.word	0x080077d1
 8007770:	080077d1 	.word	0x080077d1
 8007774:	080077d1 	.word	0x080077d1
 8007778:	080077d1 	.word	0x080077d1
 800777c:	080077d1 	.word	0x080077d1
 8007780:	080077d1 	.word	0x080077d1
 8007784:	080077d1 	.word	0x080077d1
 8007788:	080077d1 	.word	0x080077d1
 800778c:	080077d1 	.word	0x080077d1
 8007790:	080077d1 	.word	0x080077d1
 8007794:	080077d1 	.word	0x080077d1
 8007798:	080077d1 	.word	0x080077d1
 800779c:	080077ad 	.word	0x080077ad
 80077a0:	080077bf 	.word	0x080077bf
 80077a4:	080077d1 	.word	0x080077d1
 80077a8:	080077d1 	.word	0x080077d1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        memcpy(lineCoding, pbuf, sizeof(lineCoding));
 80077ac:	4b0c      	ldr	r3, [pc, #48]	; (80077e0 <CDC_Control_FS+0xe0>)
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	6810      	ldr	r0, [r2, #0]
 80077b2:	6018      	str	r0, [r3, #0]
 80077b4:	8891      	ldrh	r1, [r2, #4]
 80077b6:	7992      	ldrb	r2, [r2, #6]
 80077b8:	8099      	strh	r1, [r3, #4]
 80077ba:	719a      	strb	r2, [r3, #6]
    break;
 80077bc:	e009      	b.n	80077d2 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
        memcpy(pbuf, lineCoding, sizeof(lineCoding));
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	4a07      	ldr	r2, [pc, #28]	; (80077e0 <CDC_Control_FS+0xe0>)
 80077c2:	6810      	ldr	r0, [r2, #0]
 80077c4:	6018      	str	r0, [r3, #0]
 80077c6:	8891      	ldrh	r1, [r2, #4]
 80077c8:	7992      	ldrb	r2, [r2, #6]
 80077ca:	8099      	strh	r1, [r3, #4]
 80077cc:	719a      	strb	r2, [r3, #6]
    break;
 80077ce:	e000      	b.n	80077d2 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80077d0:	bf00      	nop
  }

  return (USBD_OK);
 80077d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	2000011c 	.word	0x2000011c

080077e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	4805      	ldr	r0, [pc, #20]	; (8007808 <CDC_Receive_FS+0x24>)
 80077f2:	f7fe fdc5 	bl	8006380 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80077f6:	4804      	ldr	r0, [pc, #16]	; (8007808 <CDC_Receive_FS+0x24>)
 80077f8:	f7fe fe06 	bl	8006408 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80077fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	20000390 	.word	0x20000390

0800780c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	460b      	mov	r3, r1
 8007816:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800781c:	4b0d      	ldr	r3, [pc, #52]	; (8007854 <CDC_Transmit_FS+0x48>)
 800781e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007822:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800782e:	2301      	movs	r3, #1
 8007830:	e00b      	b.n	800784a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007832:	887b      	ldrh	r3, [r7, #2]
 8007834:	461a      	mov	r2, r3
 8007836:	6879      	ldr	r1, [r7, #4]
 8007838:	4806      	ldr	r0, [pc, #24]	; (8007854 <CDC_Transmit_FS+0x48>)
 800783a:	f7fe fd88 	bl	800634e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800783e:	4805      	ldr	r0, [pc, #20]	; (8007854 <CDC_Transmit_FS+0x48>)
 8007840:	f7fe fdb2 	bl	80063a8 <USBD_CDC_TransmitPacket>
 8007844:	4603      	mov	r3, r0
 8007846:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007848:	7bfb      	ldrb	r3, [r7, #15]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	20000390 	.word	0x20000390

08007858 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007858:	b480      	push	{r7}
 800785a:	b087      	sub	sp, #28
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	4613      	mov	r3, r2
 8007864:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800786a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800786e:	4618      	mov	r0, r3
 8007870:	371c      	adds	r7, #28
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
	...

0800787c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	4603      	mov	r3, r0
 8007884:	6039      	str	r1, [r7, #0]
 8007886:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2212      	movs	r2, #18
 800788c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800788e:	4b03      	ldr	r3, [pc, #12]	; (800789c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007890:	4618      	mov	r0, r3
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	20000154 	.word	0x20000154

080078a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	4603      	mov	r3, r0
 80078a8:	6039      	str	r1, [r7, #0]
 80078aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	2204      	movs	r2, #4
 80078b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078b2:	4b03      	ldr	r3, [pc, #12]	; (80078c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	20000168 	.word	0x20000168

080078c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	4603      	mov	r3, r0
 80078cc:	6039      	str	r1, [r7, #0]
 80078ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078d0:	79fb      	ldrb	r3, [r7, #7]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d105      	bne.n	80078e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078d6:	683a      	ldr	r2, [r7, #0]
 80078d8:	4907      	ldr	r1, [pc, #28]	; (80078f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80078da:	4808      	ldr	r0, [pc, #32]	; (80078fc <USBD_FS_ProductStrDescriptor+0x38>)
 80078dc:	f7ff fde3 	bl	80074a6 <USBD_GetString>
 80078e0:	e004      	b.n	80078ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	4904      	ldr	r1, [pc, #16]	; (80078f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80078e6:	4805      	ldr	r0, [pc, #20]	; (80078fc <USBD_FS_ProductStrDescriptor+0x38>)
 80078e8:	f7ff fddd 	bl	80074a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078ec:	4b02      	ldr	r3, [pc, #8]	; (80078f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	20001660 	.word	0x20001660
 80078fc:	080082bc 	.word	0x080082bc

08007900 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	4603      	mov	r3, r0
 8007908:	6039      	str	r1, [r7, #0]
 800790a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800790c:	683a      	ldr	r2, [r7, #0]
 800790e:	4904      	ldr	r1, [pc, #16]	; (8007920 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007910:	4804      	ldr	r0, [pc, #16]	; (8007924 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007912:	f7ff fdc8 	bl	80074a6 <USBD_GetString>
  return USBD_StrDesc;
 8007916:	4b02      	ldr	r3, [pc, #8]	; (8007920 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007918:	4618      	mov	r0, r3
 800791a:	3708      	adds	r7, #8
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	20001660 	.word	0x20001660
 8007924:	080082d4 	.word	0x080082d4

08007928 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	4603      	mov	r3, r0
 8007930:	6039      	str	r1, [r7, #0]
 8007932:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	221a      	movs	r2, #26
 8007938:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800793a:	f000 f843 	bl	80079c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800793e:	4b02      	ldr	r3, [pc, #8]	; (8007948 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007940:	4618      	mov	r0, r3
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	2000016c 	.word	0x2000016c

0800794c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	4603      	mov	r3, r0
 8007954:	6039      	str	r1, [r7, #0]
 8007956:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007958:	79fb      	ldrb	r3, [r7, #7]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d105      	bne.n	800796a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	4907      	ldr	r1, [pc, #28]	; (8007980 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007962:	4808      	ldr	r0, [pc, #32]	; (8007984 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007964:	f7ff fd9f 	bl	80074a6 <USBD_GetString>
 8007968:	e004      	b.n	8007974 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800796a:	683a      	ldr	r2, [r7, #0]
 800796c:	4904      	ldr	r1, [pc, #16]	; (8007980 <USBD_FS_ConfigStrDescriptor+0x34>)
 800796e:	4805      	ldr	r0, [pc, #20]	; (8007984 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007970:	f7ff fd99 	bl	80074a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007974:	4b02      	ldr	r3, [pc, #8]	; (8007980 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007976:	4618      	mov	r0, r3
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	20001660 	.word	0x20001660
 8007984:	080082e8 	.word	0x080082e8

08007988 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	4603      	mov	r3, r0
 8007990:	6039      	str	r1, [r7, #0]
 8007992:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007994:	79fb      	ldrb	r3, [r7, #7]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d105      	bne.n	80079a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	4907      	ldr	r1, [pc, #28]	; (80079bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800799e:	4808      	ldr	r0, [pc, #32]	; (80079c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079a0:	f7ff fd81 	bl	80074a6 <USBD_GetString>
 80079a4:	e004      	b.n	80079b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	4904      	ldr	r1, [pc, #16]	; (80079bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079aa:	4805      	ldr	r0, [pc, #20]	; (80079c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079ac:	f7ff fd7b 	bl	80074a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079b0:	4b02      	ldr	r3, [pc, #8]	; (80079bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	20001660 	.word	0x20001660
 80079c0:	080082f4 	.word	0x080082f4

080079c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079ca:	4b0f      	ldr	r3, [pc, #60]	; (8007a08 <Get_SerialNum+0x44>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079d0:	4b0e      	ldr	r3, [pc, #56]	; (8007a0c <Get_SerialNum+0x48>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079d6:	4b0e      	ldr	r3, [pc, #56]	; (8007a10 <Get_SerialNum+0x4c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4413      	add	r3, r2
 80079e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d009      	beq.n	80079fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079ea:	2208      	movs	r2, #8
 80079ec:	4909      	ldr	r1, [pc, #36]	; (8007a14 <Get_SerialNum+0x50>)
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f000 f814 	bl	8007a1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80079f4:	2204      	movs	r2, #4
 80079f6:	4908      	ldr	r1, [pc, #32]	; (8007a18 <Get_SerialNum+0x54>)
 80079f8:	68b8      	ldr	r0, [r7, #8]
 80079fa:	f000 f80f 	bl	8007a1c <IntToUnicode>
  }
}
 80079fe:	bf00      	nop
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	1fff7a10 	.word	0x1fff7a10
 8007a0c:	1fff7a14 	.word	0x1fff7a14
 8007a10:	1fff7a18 	.word	0x1fff7a18
 8007a14:	2000016e 	.word	0x2000016e
 8007a18:	2000017e 	.word	0x2000017e

08007a1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	4613      	mov	r3, r2
 8007a28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a2e:	2300      	movs	r3, #0
 8007a30:	75fb      	strb	r3, [r7, #23]
 8007a32:	e027      	b.n	8007a84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	0f1b      	lsrs	r3, r3, #28
 8007a38:	2b09      	cmp	r3, #9
 8007a3a:	d80b      	bhi.n	8007a54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	0f1b      	lsrs	r3, r3, #28
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	7dfb      	ldrb	r3, [r7, #23]
 8007a44:	005b      	lsls	r3, r3, #1
 8007a46:	4619      	mov	r1, r3
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	440b      	add	r3, r1
 8007a4c:	3230      	adds	r2, #48	; 0x30
 8007a4e:	b2d2      	uxtb	r2, r2
 8007a50:	701a      	strb	r2, [r3, #0]
 8007a52:	e00a      	b.n	8007a6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	0f1b      	lsrs	r3, r3, #28
 8007a58:	b2da      	uxtb	r2, r3
 8007a5a:	7dfb      	ldrb	r3, [r7, #23]
 8007a5c:	005b      	lsls	r3, r3, #1
 8007a5e:	4619      	mov	r1, r3
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	440b      	add	r3, r1
 8007a64:	3237      	adds	r2, #55	; 0x37
 8007a66:	b2d2      	uxtb	r2, r2
 8007a68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	011b      	lsls	r3, r3, #4
 8007a6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a70:	7dfb      	ldrb	r3, [r7, #23]
 8007a72:	005b      	lsls	r3, r3, #1
 8007a74:	3301      	adds	r3, #1
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	4413      	add	r3, r2
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a7e:	7dfb      	ldrb	r3, [r7, #23]
 8007a80:	3301      	adds	r3, #1
 8007a82:	75fb      	strb	r3, [r7, #23]
 8007a84:	7dfa      	ldrb	r2, [r7, #23]
 8007a86:	79fb      	ldrb	r3, [r7, #7]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d3d3      	bcc.n	8007a34 <IntToUnicode+0x18>
  }
}
 8007a8c:	bf00      	nop
 8007a8e:	371c      	adds	r7, #28
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b08a      	sub	sp, #40	; 0x28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007aa0:	f107 0314 	add.w	r3, r7, #20
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	605a      	str	r2, [r3, #4]
 8007aaa:	609a      	str	r2, [r3, #8]
 8007aac:	60da      	str	r2, [r3, #12]
 8007aae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ab8:	d13a      	bne.n	8007b30 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007aba:	2300      	movs	r3, #0
 8007abc:	613b      	str	r3, [r7, #16]
 8007abe:	4b1e      	ldr	r3, [pc, #120]	; (8007b38 <HAL_PCD_MspInit+0xa0>)
 8007ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac2:	4a1d      	ldr	r2, [pc, #116]	; (8007b38 <HAL_PCD_MspInit+0xa0>)
 8007ac4:	f043 0301 	orr.w	r3, r3, #1
 8007ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8007aca:	4b1b      	ldr	r3, [pc, #108]	; (8007b38 <HAL_PCD_MspInit+0xa0>)
 8007acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	613b      	str	r3, [r7, #16]
 8007ad4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007ad6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007adc:	2302      	movs	r3, #2
 8007ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ae8:	230a      	movs	r3, #10
 8007aea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007aec:	f107 0314 	add.w	r3, r7, #20
 8007af0:	4619      	mov	r1, r3
 8007af2:	4812      	ldr	r0, [pc, #72]	; (8007b3c <HAL_PCD_MspInit+0xa4>)
 8007af4:	f7f9 fe18 	bl	8001728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007af8:	4b0f      	ldr	r3, [pc, #60]	; (8007b38 <HAL_PCD_MspInit+0xa0>)
 8007afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afc:	4a0e      	ldr	r2, [pc, #56]	; (8007b38 <HAL_PCD_MspInit+0xa0>)
 8007afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b02:	6353      	str	r3, [r2, #52]	; 0x34
 8007b04:	2300      	movs	r3, #0
 8007b06:	60fb      	str	r3, [r7, #12]
 8007b08:	4b0b      	ldr	r3, [pc, #44]	; (8007b38 <HAL_PCD_MspInit+0xa0>)
 8007b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b0c:	4a0a      	ldr	r2, [pc, #40]	; (8007b38 <HAL_PCD_MspInit+0xa0>)
 8007b0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b12:	6453      	str	r3, [r2, #68]	; 0x44
 8007b14:	4b08      	ldr	r3, [pc, #32]	; (8007b38 <HAL_PCD_MspInit+0xa0>)
 8007b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b1c:	60fb      	str	r3, [r7, #12]
 8007b1e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b20:	2200      	movs	r2, #0
 8007b22:	2100      	movs	r1, #0
 8007b24:	2043      	movs	r0, #67	; 0x43
 8007b26:	f7f9 fdc8 	bl	80016ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b2a:	2043      	movs	r0, #67	; 0x43
 8007b2c:	f7f9 fde1 	bl	80016f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007b30:	bf00      	nop
 8007b32:	3728      	adds	r7, #40	; 0x28
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	40023800 	.word	0x40023800
 8007b3c:	40020000 	.word	0x40020000

08007b40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007b54:	4619      	mov	r1, r3
 8007b56:	4610      	mov	r0, r2
 8007b58:	f7fe fd22 	bl	80065a0 <USBD_LL_SetupStage>
}
 8007b5c:	bf00      	nop
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007b76:	78fa      	ldrb	r2, [r7, #3]
 8007b78:	6879      	ldr	r1, [r7, #4]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	00db      	lsls	r3, r3, #3
 8007b7e:	1a9b      	subs	r3, r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	440b      	add	r3, r1
 8007b84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	78fb      	ldrb	r3, [r7, #3]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	f7fe fd5a 	bl	8006646 <USBD_LL_DataOutStage>
}
 8007b92:	bf00      	nop
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b082      	sub	sp, #8
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007bac:	78fa      	ldrb	r2, [r7, #3]
 8007bae:	6879      	ldr	r1, [r7, #4]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	00db      	lsls	r3, r3, #3
 8007bb4:	1a9b      	subs	r3, r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	440b      	add	r3, r1
 8007bba:	3348      	adds	r3, #72	; 0x48
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	78fb      	ldrb	r3, [r7, #3]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	f7fe fda3 	bl	800670c <USBD_LL_DataInStage>
}
 8007bc6:	bf00      	nop
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b082      	sub	sp, #8
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7fe fea7 	bl	8006930 <USBD_LL_SOF>
}
 8007be2:	bf00      	nop
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b084      	sub	sp, #16
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d001      	beq.n	8007c02 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007bfe:	f7f8 ff11 	bl	8000a24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c08:	7bfa      	ldrb	r2, [r7, #15]
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7fe fe54 	bl	80068ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fe fe0d 	bl	8006838 <USBD_LL_Reset>
}
 8007c1e:	bf00      	nop
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
	...

08007c28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fe fe4f 	bl	80068da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	6812      	ldr	r2, [r2, #0]
 8007c4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c4e:	f043 0301 	orr.w	r3, r3, #1
 8007c52:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a1b      	ldr	r3, [r3, #32]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d005      	beq.n	8007c68 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c5c:	4b04      	ldr	r3, [pc, #16]	; (8007c70 <HAL_PCD_SuspendCallback+0x48>)
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	4a03      	ldr	r2, [pc, #12]	; (8007c70 <HAL_PCD_SuspendCallback+0x48>)
 8007c62:	f043 0306 	orr.w	r3, r3, #6
 8007c66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007c68:	bf00      	nop
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	e000ed00 	.word	0xe000ed00

08007c74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fe fe3e 	bl	8006904 <USBD_LL_Resume>
}
 8007c88:	bf00      	nop
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ca2:	78fa      	ldrb	r2, [r7, #3]
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fe fe69 	bl	800697e <USBD_LL_IsoOUTIncomplete>
}
 8007cac:	bf00      	nop
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cc6:	78fa      	ldrb	r2, [r7, #3]
 8007cc8:	4611      	mov	r1, r2
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fe fe4a 	bl	8006964 <USBD_LL_IsoINIncomplete>
}
 8007cd0:	bf00      	nop
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fe fe56 	bl	8006998 <USBD_LL_DevConnected>
}
 8007cec:	bf00      	nop
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fe fe53 	bl	80069ae <USBD_LL_DevDisconnected>
}
 8007d08:	bf00      	nop
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d13c      	bne.n	8007d9a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007d20:	4a20      	ldr	r2, [pc, #128]	; (8007da4 <USBD_LL_Init+0x94>)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a1e      	ldr	r2, [pc, #120]	; (8007da4 <USBD_LL_Init+0x94>)
 8007d2c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d30:	4b1c      	ldr	r3, [pc, #112]	; (8007da4 <USBD_LL_Init+0x94>)
 8007d32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007d36:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007d38:	4b1a      	ldr	r3, [pc, #104]	; (8007da4 <USBD_LL_Init+0x94>)
 8007d3a:	2204      	movs	r2, #4
 8007d3c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007d3e:	4b19      	ldr	r3, [pc, #100]	; (8007da4 <USBD_LL_Init+0x94>)
 8007d40:	2202      	movs	r2, #2
 8007d42:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d44:	4b17      	ldr	r3, [pc, #92]	; (8007da4 <USBD_LL_Init+0x94>)
 8007d46:	2200      	movs	r2, #0
 8007d48:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d4a:	4b16      	ldr	r3, [pc, #88]	; (8007da4 <USBD_LL_Init+0x94>)
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d50:	4b14      	ldr	r3, [pc, #80]	; (8007da4 <USBD_LL_Init+0x94>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007d56:	4b13      	ldr	r3, [pc, #76]	; (8007da4 <USBD_LL_Init+0x94>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007d5c:	4b11      	ldr	r3, [pc, #68]	; (8007da4 <USBD_LL_Init+0x94>)
 8007d5e:	2200      	movs	r2, #0
 8007d60:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007d62:	4b10      	ldr	r3, [pc, #64]	; (8007da4 <USBD_LL_Init+0x94>)
 8007d64:	2200      	movs	r2, #0
 8007d66:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007d68:	4b0e      	ldr	r3, [pc, #56]	; (8007da4 <USBD_LL_Init+0x94>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007d6e:	480d      	ldr	r0, [pc, #52]	; (8007da4 <USBD_LL_Init+0x94>)
 8007d70:	f7f9 ffc8 	bl	8001d04 <HAL_PCD_Init>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007d7a:	f7f8 fe53 	bl	8000a24 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007d7e:	2180      	movs	r1, #128	; 0x80
 8007d80:	4808      	ldr	r0, [pc, #32]	; (8007da4 <USBD_LL_Init+0x94>)
 8007d82:	f7fb f926 	bl	8002fd2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007d86:	2240      	movs	r2, #64	; 0x40
 8007d88:	2100      	movs	r1, #0
 8007d8a:	4806      	ldr	r0, [pc, #24]	; (8007da4 <USBD_LL_Init+0x94>)
 8007d8c:	f7fb f8da 	bl	8002f44 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007d90:	2280      	movs	r2, #128	; 0x80
 8007d92:	2101      	movs	r1, #1
 8007d94:	4803      	ldr	r0, [pc, #12]	; (8007da4 <USBD_LL_Init+0x94>)
 8007d96:	f7fb f8d5 	bl	8002f44 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	20001860 	.word	0x20001860

08007da8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007db4:	2300      	movs	r3, #0
 8007db6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fa f8bd 	bl	8001f3e <HAL_PCD_Start>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f000 f92a 	bl	8008024 <USBD_Get_USB_Status>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b084      	sub	sp, #16
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	4608      	mov	r0, r1
 8007de8:	4611      	mov	r1, r2
 8007dea:	461a      	mov	r2, r3
 8007dec:	4603      	mov	r3, r0
 8007dee:	70fb      	strb	r3, [r7, #3]
 8007df0:	460b      	mov	r3, r1
 8007df2:	70bb      	strb	r3, [r7, #2]
 8007df4:	4613      	mov	r3, r2
 8007df6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e06:	78bb      	ldrb	r3, [r7, #2]
 8007e08:	883a      	ldrh	r2, [r7, #0]
 8007e0a:	78f9      	ldrb	r1, [r7, #3]
 8007e0c:	f7fa fca1 	bl	8002752 <HAL_PCD_EP_Open>
 8007e10:	4603      	mov	r3, r0
 8007e12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 f904 	bl	8008024 <USBD_Get_USB_Status>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e20:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b084      	sub	sp, #16
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	460b      	mov	r3, r1
 8007e34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e36:	2300      	movs	r3, #0
 8007e38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e44:	78fa      	ldrb	r2, [r7, #3]
 8007e46:	4611      	mov	r1, r2
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fa fcea 	bl	8002822 <HAL_PCD_EP_Close>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 f8e5 	bl	8008024 <USBD_Get_USB_Status>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	460b      	mov	r3, r1
 8007e72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e82:	78fa      	ldrb	r2, [r7, #3]
 8007e84:	4611      	mov	r1, r2
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fa fdc2 	bl	8002a10 <HAL_PCD_EP_SetStall>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e90:	7bfb      	ldrb	r3, [r7, #15]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 f8c6 	bl	8008024 <USBD_Get_USB_Status>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b084      	sub	sp, #16
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	460b      	mov	r3, r1
 8007eb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ec0:	78fa      	ldrb	r2, [r7, #3]
 8007ec2:	4611      	mov	r1, r2
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7fa fe07 	bl	8002ad8 <HAL_PCD_EP_ClrStall>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ece:	7bfb      	ldrb	r3, [r7, #15]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 f8a7 	bl	8008024 <USBD_Get_USB_Status>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eda:	7bbb      	ldrb	r3, [r7, #14]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ef6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007ef8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	da0b      	bge.n	8007f18 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f00:	78fb      	ldrb	r3, [r7, #3]
 8007f02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f06:	68f9      	ldr	r1, [r7, #12]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	00db      	lsls	r3, r3, #3
 8007f0c:	1a9b      	subs	r3, r3, r2
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	440b      	add	r3, r1
 8007f12:	333e      	adds	r3, #62	; 0x3e
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	e00b      	b.n	8007f30 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f18:	78fb      	ldrb	r3, [r7, #3]
 8007f1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f1e:	68f9      	ldr	r1, [r7, #12]
 8007f20:	4613      	mov	r3, r2
 8007f22:	00db      	lsls	r3, r3, #3
 8007f24:	1a9b      	subs	r3, r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	440b      	add	r3, r1
 8007f2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007f2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	460b      	mov	r3, r1
 8007f46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f56:	78fa      	ldrb	r2, [r7, #3]
 8007f58:	4611      	mov	r1, r2
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7fa fbd4 	bl	8002708 <HAL_PCD_SetAddress>
 8007f60:	4603      	mov	r3, r0
 8007f62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
 8007f66:	4618      	mov	r0, r3
 8007f68:	f000 f85c 	bl	8008024 <USBD_Get_USB_Status>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f70:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b086      	sub	sp, #24
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	60f8      	str	r0, [r7, #12]
 8007f82:	607a      	str	r2, [r7, #4]
 8007f84:	603b      	str	r3, [r7, #0]
 8007f86:	460b      	mov	r3, r1
 8007f88:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f98:	7af9      	ldrb	r1, [r7, #11]
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	f7fa fced 	bl	800297c <HAL_PCD_EP_Transmit>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fa6:	7dfb      	ldrb	r3, [r7, #23]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f000 f83b 	bl	8008024 <USBD_Get_USB_Status>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007fb2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3718      	adds	r7, #24
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	607a      	str	r2, [r7, #4]
 8007fc6:	603b      	str	r3, [r7, #0]
 8007fc8:	460b      	mov	r3, r1
 8007fca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007fda:	7af9      	ldrb	r1, [r7, #11]
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	f7fa fc69 	bl	80028b6 <HAL_PCD_EP_Receive>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fe8:	7dfb      	ldrb	r3, [r7, #23]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f000 f81a 	bl	8008024 <USBD_Get_USB_Status>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ff4:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3718      	adds	r7, #24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b082      	sub	sp, #8
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	460b      	mov	r3, r1
 8008008:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008010:	78fa      	ldrb	r2, [r7, #3]
 8008012:	4611      	mov	r1, r2
 8008014:	4618      	mov	r0, r3
 8008016:	f7fa fc99 	bl	800294c <HAL_PCD_EP_GetRxCount>
 800801a:	4603      	mov	r3, r0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	4603      	mov	r3, r0
 800802c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008032:	79fb      	ldrb	r3, [r7, #7]
 8008034:	2b03      	cmp	r3, #3
 8008036:	d817      	bhi.n	8008068 <USBD_Get_USB_Status+0x44>
 8008038:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <USBD_Get_USB_Status+0x1c>)
 800803a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803e:	bf00      	nop
 8008040:	08008051 	.word	0x08008051
 8008044:	08008057 	.word	0x08008057
 8008048:	0800805d 	.word	0x0800805d
 800804c:	08008063 	.word	0x08008063
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	73fb      	strb	r3, [r7, #15]
    break;
 8008054:	e00b      	b.n	800806e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008056:	2303      	movs	r3, #3
 8008058:	73fb      	strb	r3, [r7, #15]
    break;
 800805a:	e008      	b.n	800806e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800805c:	2301      	movs	r3, #1
 800805e:	73fb      	strb	r3, [r7, #15]
    break;
 8008060:	e005      	b.n	800806e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008062:	2303      	movs	r3, #3
 8008064:	73fb      	strb	r3, [r7, #15]
    break;
 8008066:	e002      	b.n	800806e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008068:	2303      	movs	r3, #3
 800806a:	73fb      	strb	r3, [r7, #15]
    break;
 800806c:	bf00      	nop
  }
  return usb_status;
 800806e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <__errno>:
 800807c:	4b01      	ldr	r3, [pc, #4]	; (8008084 <__errno+0x8>)
 800807e:	6818      	ldr	r0, [r3, #0]
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	20000188 	.word	0x20000188

08008088 <__libc_init_array>:
 8008088:	b570      	push	{r4, r5, r6, lr}
 800808a:	4e0d      	ldr	r6, [pc, #52]	; (80080c0 <__libc_init_array+0x38>)
 800808c:	4c0d      	ldr	r4, [pc, #52]	; (80080c4 <__libc_init_array+0x3c>)
 800808e:	1ba4      	subs	r4, r4, r6
 8008090:	10a4      	asrs	r4, r4, #2
 8008092:	2500      	movs	r5, #0
 8008094:	42a5      	cmp	r5, r4
 8008096:	d109      	bne.n	80080ac <__libc_init_array+0x24>
 8008098:	4e0b      	ldr	r6, [pc, #44]	; (80080c8 <__libc_init_array+0x40>)
 800809a:	4c0c      	ldr	r4, [pc, #48]	; (80080cc <__libc_init_array+0x44>)
 800809c:	f000 f8ea 	bl	8008274 <_init>
 80080a0:	1ba4      	subs	r4, r4, r6
 80080a2:	10a4      	asrs	r4, r4, #2
 80080a4:	2500      	movs	r5, #0
 80080a6:	42a5      	cmp	r5, r4
 80080a8:	d105      	bne.n	80080b6 <__libc_init_array+0x2e>
 80080aa:	bd70      	pop	{r4, r5, r6, pc}
 80080ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080b0:	4798      	blx	r3
 80080b2:	3501      	adds	r5, #1
 80080b4:	e7ee      	b.n	8008094 <__libc_init_array+0xc>
 80080b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080ba:	4798      	blx	r3
 80080bc:	3501      	adds	r5, #1
 80080be:	e7f2      	b.n	80080a6 <__libc_init_array+0x1e>
 80080c0:	08008324 	.word	0x08008324
 80080c4:	08008324 	.word	0x08008324
 80080c8:	08008324 	.word	0x08008324
 80080cc:	08008328 	.word	0x08008328

080080d0 <malloc>:
 80080d0:	4b02      	ldr	r3, [pc, #8]	; (80080dc <malloc+0xc>)
 80080d2:	4601      	mov	r1, r0
 80080d4:	6818      	ldr	r0, [r3, #0]
 80080d6:	f000 b861 	b.w	800819c <_malloc_r>
 80080da:	bf00      	nop
 80080dc:	20000188 	.word	0x20000188

080080e0 <free>:
 80080e0:	4b02      	ldr	r3, [pc, #8]	; (80080ec <free+0xc>)
 80080e2:	4601      	mov	r1, r0
 80080e4:	6818      	ldr	r0, [r3, #0]
 80080e6:	f000 b80b 	b.w	8008100 <_free_r>
 80080ea:	bf00      	nop
 80080ec:	20000188 	.word	0x20000188

080080f0 <memset>:
 80080f0:	4402      	add	r2, r0
 80080f2:	4603      	mov	r3, r0
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d100      	bne.n	80080fa <memset+0xa>
 80080f8:	4770      	bx	lr
 80080fa:	f803 1b01 	strb.w	r1, [r3], #1
 80080fe:	e7f9      	b.n	80080f4 <memset+0x4>

08008100 <_free_r>:
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	4605      	mov	r5, r0
 8008104:	2900      	cmp	r1, #0
 8008106:	d045      	beq.n	8008194 <_free_r+0x94>
 8008108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800810c:	1f0c      	subs	r4, r1, #4
 800810e:	2b00      	cmp	r3, #0
 8008110:	bfb8      	it	lt
 8008112:	18e4      	addlt	r4, r4, r3
 8008114:	f000 f8ac 	bl	8008270 <__malloc_lock>
 8008118:	4a1f      	ldr	r2, [pc, #124]	; (8008198 <_free_r+0x98>)
 800811a:	6813      	ldr	r3, [r2, #0]
 800811c:	4610      	mov	r0, r2
 800811e:	b933      	cbnz	r3, 800812e <_free_r+0x2e>
 8008120:	6063      	str	r3, [r4, #4]
 8008122:	6014      	str	r4, [r2, #0]
 8008124:	4628      	mov	r0, r5
 8008126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800812a:	f000 b8a2 	b.w	8008272 <__malloc_unlock>
 800812e:	42a3      	cmp	r3, r4
 8008130:	d90c      	bls.n	800814c <_free_r+0x4c>
 8008132:	6821      	ldr	r1, [r4, #0]
 8008134:	1862      	adds	r2, r4, r1
 8008136:	4293      	cmp	r3, r2
 8008138:	bf04      	itt	eq
 800813a:	681a      	ldreq	r2, [r3, #0]
 800813c:	685b      	ldreq	r3, [r3, #4]
 800813e:	6063      	str	r3, [r4, #4]
 8008140:	bf04      	itt	eq
 8008142:	1852      	addeq	r2, r2, r1
 8008144:	6022      	streq	r2, [r4, #0]
 8008146:	6004      	str	r4, [r0, #0]
 8008148:	e7ec      	b.n	8008124 <_free_r+0x24>
 800814a:	4613      	mov	r3, r2
 800814c:	685a      	ldr	r2, [r3, #4]
 800814e:	b10a      	cbz	r2, 8008154 <_free_r+0x54>
 8008150:	42a2      	cmp	r2, r4
 8008152:	d9fa      	bls.n	800814a <_free_r+0x4a>
 8008154:	6819      	ldr	r1, [r3, #0]
 8008156:	1858      	adds	r0, r3, r1
 8008158:	42a0      	cmp	r0, r4
 800815a:	d10b      	bne.n	8008174 <_free_r+0x74>
 800815c:	6820      	ldr	r0, [r4, #0]
 800815e:	4401      	add	r1, r0
 8008160:	1858      	adds	r0, r3, r1
 8008162:	4282      	cmp	r2, r0
 8008164:	6019      	str	r1, [r3, #0]
 8008166:	d1dd      	bne.n	8008124 <_free_r+0x24>
 8008168:	6810      	ldr	r0, [r2, #0]
 800816a:	6852      	ldr	r2, [r2, #4]
 800816c:	605a      	str	r2, [r3, #4]
 800816e:	4401      	add	r1, r0
 8008170:	6019      	str	r1, [r3, #0]
 8008172:	e7d7      	b.n	8008124 <_free_r+0x24>
 8008174:	d902      	bls.n	800817c <_free_r+0x7c>
 8008176:	230c      	movs	r3, #12
 8008178:	602b      	str	r3, [r5, #0]
 800817a:	e7d3      	b.n	8008124 <_free_r+0x24>
 800817c:	6820      	ldr	r0, [r4, #0]
 800817e:	1821      	adds	r1, r4, r0
 8008180:	428a      	cmp	r2, r1
 8008182:	bf04      	itt	eq
 8008184:	6811      	ldreq	r1, [r2, #0]
 8008186:	6852      	ldreq	r2, [r2, #4]
 8008188:	6062      	str	r2, [r4, #4]
 800818a:	bf04      	itt	eq
 800818c:	1809      	addeq	r1, r1, r0
 800818e:	6021      	streq	r1, [r4, #0]
 8008190:	605c      	str	r4, [r3, #4]
 8008192:	e7c7      	b.n	8008124 <_free_r+0x24>
 8008194:	bd38      	pop	{r3, r4, r5, pc}
 8008196:	bf00      	nop
 8008198:	20000210 	.word	0x20000210

0800819c <_malloc_r>:
 800819c:	b570      	push	{r4, r5, r6, lr}
 800819e:	1ccd      	adds	r5, r1, #3
 80081a0:	f025 0503 	bic.w	r5, r5, #3
 80081a4:	3508      	adds	r5, #8
 80081a6:	2d0c      	cmp	r5, #12
 80081a8:	bf38      	it	cc
 80081aa:	250c      	movcc	r5, #12
 80081ac:	2d00      	cmp	r5, #0
 80081ae:	4606      	mov	r6, r0
 80081b0:	db01      	blt.n	80081b6 <_malloc_r+0x1a>
 80081b2:	42a9      	cmp	r1, r5
 80081b4:	d903      	bls.n	80081be <_malloc_r+0x22>
 80081b6:	230c      	movs	r3, #12
 80081b8:	6033      	str	r3, [r6, #0]
 80081ba:	2000      	movs	r0, #0
 80081bc:	bd70      	pop	{r4, r5, r6, pc}
 80081be:	f000 f857 	bl	8008270 <__malloc_lock>
 80081c2:	4a21      	ldr	r2, [pc, #132]	; (8008248 <_malloc_r+0xac>)
 80081c4:	6814      	ldr	r4, [r2, #0]
 80081c6:	4621      	mov	r1, r4
 80081c8:	b991      	cbnz	r1, 80081f0 <_malloc_r+0x54>
 80081ca:	4c20      	ldr	r4, [pc, #128]	; (800824c <_malloc_r+0xb0>)
 80081cc:	6823      	ldr	r3, [r4, #0]
 80081ce:	b91b      	cbnz	r3, 80081d8 <_malloc_r+0x3c>
 80081d0:	4630      	mov	r0, r6
 80081d2:	f000 f83d 	bl	8008250 <_sbrk_r>
 80081d6:	6020      	str	r0, [r4, #0]
 80081d8:	4629      	mov	r1, r5
 80081da:	4630      	mov	r0, r6
 80081dc:	f000 f838 	bl	8008250 <_sbrk_r>
 80081e0:	1c43      	adds	r3, r0, #1
 80081e2:	d124      	bne.n	800822e <_malloc_r+0x92>
 80081e4:	230c      	movs	r3, #12
 80081e6:	6033      	str	r3, [r6, #0]
 80081e8:	4630      	mov	r0, r6
 80081ea:	f000 f842 	bl	8008272 <__malloc_unlock>
 80081ee:	e7e4      	b.n	80081ba <_malloc_r+0x1e>
 80081f0:	680b      	ldr	r3, [r1, #0]
 80081f2:	1b5b      	subs	r3, r3, r5
 80081f4:	d418      	bmi.n	8008228 <_malloc_r+0x8c>
 80081f6:	2b0b      	cmp	r3, #11
 80081f8:	d90f      	bls.n	800821a <_malloc_r+0x7e>
 80081fa:	600b      	str	r3, [r1, #0]
 80081fc:	50cd      	str	r5, [r1, r3]
 80081fe:	18cc      	adds	r4, r1, r3
 8008200:	4630      	mov	r0, r6
 8008202:	f000 f836 	bl	8008272 <__malloc_unlock>
 8008206:	f104 000b 	add.w	r0, r4, #11
 800820a:	1d23      	adds	r3, r4, #4
 800820c:	f020 0007 	bic.w	r0, r0, #7
 8008210:	1ac3      	subs	r3, r0, r3
 8008212:	d0d3      	beq.n	80081bc <_malloc_r+0x20>
 8008214:	425a      	negs	r2, r3
 8008216:	50e2      	str	r2, [r4, r3]
 8008218:	e7d0      	b.n	80081bc <_malloc_r+0x20>
 800821a:	428c      	cmp	r4, r1
 800821c:	684b      	ldr	r3, [r1, #4]
 800821e:	bf16      	itet	ne
 8008220:	6063      	strne	r3, [r4, #4]
 8008222:	6013      	streq	r3, [r2, #0]
 8008224:	460c      	movne	r4, r1
 8008226:	e7eb      	b.n	8008200 <_malloc_r+0x64>
 8008228:	460c      	mov	r4, r1
 800822a:	6849      	ldr	r1, [r1, #4]
 800822c:	e7cc      	b.n	80081c8 <_malloc_r+0x2c>
 800822e:	1cc4      	adds	r4, r0, #3
 8008230:	f024 0403 	bic.w	r4, r4, #3
 8008234:	42a0      	cmp	r0, r4
 8008236:	d005      	beq.n	8008244 <_malloc_r+0xa8>
 8008238:	1a21      	subs	r1, r4, r0
 800823a:	4630      	mov	r0, r6
 800823c:	f000 f808 	bl	8008250 <_sbrk_r>
 8008240:	3001      	adds	r0, #1
 8008242:	d0cf      	beq.n	80081e4 <_malloc_r+0x48>
 8008244:	6025      	str	r5, [r4, #0]
 8008246:	e7db      	b.n	8008200 <_malloc_r+0x64>
 8008248:	20000210 	.word	0x20000210
 800824c:	20000214 	.word	0x20000214

08008250 <_sbrk_r>:
 8008250:	b538      	push	{r3, r4, r5, lr}
 8008252:	4c06      	ldr	r4, [pc, #24]	; (800826c <_sbrk_r+0x1c>)
 8008254:	2300      	movs	r3, #0
 8008256:	4605      	mov	r5, r0
 8008258:	4608      	mov	r0, r1
 800825a:	6023      	str	r3, [r4, #0]
 800825c:	f7f8 fdd6 	bl	8000e0c <_sbrk>
 8008260:	1c43      	adds	r3, r0, #1
 8008262:	d102      	bne.n	800826a <_sbrk_r+0x1a>
 8008264:	6823      	ldr	r3, [r4, #0]
 8008266:	b103      	cbz	r3, 800826a <_sbrk_r+0x1a>
 8008268:	602b      	str	r3, [r5, #0]
 800826a:	bd38      	pop	{r3, r4, r5, pc}
 800826c:	20001c68 	.word	0x20001c68

08008270 <__malloc_lock>:
 8008270:	4770      	bx	lr

08008272 <__malloc_unlock>:
 8008272:	4770      	bx	lr

08008274 <_init>:
 8008274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008276:	bf00      	nop
 8008278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800827a:	bc08      	pop	{r3}
 800827c:	469e      	mov	lr, r3
 800827e:	4770      	bx	lr

08008280 <_fini>:
 8008280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008282:	bf00      	nop
 8008284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008286:	bc08      	pop	{r3}
 8008288:	469e      	mov	lr, r3
 800828a:	4770      	bx	lr
