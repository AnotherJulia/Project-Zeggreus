
Ground station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  0800bf18  0800bf18  0001bf18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2f8  0800c2f8  00020358  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2f8  0800c2f8  0001c2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c300  0800c300  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c300  0800c300  0001c300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c304  0800c304  0001c304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0800c308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a80  20000358  0800c660  00020358  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001dd8  0800c660  00021dd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e8e3  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003cac  00000000  00000000  0003ec6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018c0  00000000  00000000  00042918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001720  00000000  00000000  000441d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b38e  00000000  00000000  000458f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015506  00000000  00000000  00060c86  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099fce  00000000  00000000  0007618c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011015a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000748c  00000000  00000000  001101d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000358 	.word	0x20000358
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800befc 	.word	0x0800befc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000035c 	.word	0x2000035c
 80001dc:	0800befc 	.word	0x0800befc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <loraTelemetry>:
        }

    }
}

void loraTelemetry() {
 8000f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f5c:	b0f1      	sub	sp, #452	; 0x1c4
 8000f5e:	af18      	add	r7, sp, #96	; 0x60
    TLM_decoded TLM_dec;
    TLM_encoded TLM_enc;

    sx1280_custom radio;

    sxInit(&radio, &hspi3, LORA_NSS_GPIO_Port, LORA_NSS_Pin);
 8000f60:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8000f64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f68:	4a69      	ldr	r2, [pc, #420]	; (8001110 <loraTelemetry+0x1b8>)
 8000f6a:	496a      	ldr	r1, [pc, #424]	; (8001114 <loraTelemetry+0x1bc>)
 8000f6c:	f000 fdc4 	bl	8001af8 <sxInit>
    sxSetDio1Pin(&radio, LORA_DIO1_GPIO_Port, LORA_DIO1_Pin);
 8000f70:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f74:	2220      	movs	r2, #32
 8000f76:	4968      	ldr	r1, [pc, #416]	; (8001118 <loraTelemetry+0x1c0>)
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 fe1d 	bl	8001bb8 <sxSetDio1Pin>

    char printBuffer[128];

    // rx mode
    SetDioIrqParams(&radio, 1 << 1, 1 << 1, 0, 0); //rxdone on gpio1
 8000f7e:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8000f82:	2300      	movs	r3, #0
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2300      	movs	r3, #0
 8000f88:	2202      	movs	r2, #2
 8000f8a:	2102      	movs	r1, #2
 8000f8c:	f000 fefc 	bl	8001d88 <SetDioIrqParams>
    HAL_Delay(1);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f001 f9cf 	bl	8002334 <HAL_Delay>

    uint8_t rxStartBufferPointer = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
    //changeLed(0, 100, 0);
    uint8_t data[4];
    while (1) {

        //SetRx(0x00, 0xffff); // continous rx
        SetRx(&radio, 0x00, 0); // No timeout
 8000f9c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 ff44 	bl	8001e32 <SetRx>
        //SetRx(0x02, 200); // 200 ms timeout
        HAL_Delay(1);
 8000faa:	2001      	movs	r0, #1
 8000fac:	f001 f9c2 	bl	8002334 <HAL_Delay>
        // wait for reception:
        while (!HAL_GPIO_ReadPin(LORA_DIO1_GPIO_Port, LORA_DIO1_Pin)) {
 8000fb0:	bf00      	nop
 8000fb2:	2120      	movs	r1, #32
 8000fb4:	4858      	ldr	r0, [pc, #352]	; (8001118 <loraTelemetry+0x1c0>)
 8000fb6:	f001 fee5 	bl	8002d84 <HAL_GPIO_ReadPin>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0f8      	beq.n	8000fb2 <loraTelemetry+0x5a>
        }

        GetPacketStatusLora(&radio);
 8000fc0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 ff53 	bl	8001e70 <GetPacketStatusLora>
        ClrIrqStatus(&radio, 1 << 1); // clear rxdone Irq
 8000fca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fce:	2102      	movs	r1, #2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 ff13 	bl	8001dfc <ClrIrqStatus>
        HAL_Delay(1);
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f001 f9ac 	bl	8002334 <HAL_Delay>
        //GetRxBufferStatus(); // TODO

        ReadBuffer(&radio, rxStartBufferPointer, sizeof(TLM_enc),(uint8_t*) &TLM_enc);
 8000fdc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000fe0:	f897 115f 	ldrb.w	r1, [r7, #351]	; 0x15f
 8000fe4:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8000fe8:	2220      	movs	r2, #32
 8000fea:	f000 fe98 	bl	8001d1e <ReadBuffer>
        //ReadBuffer(&radio, rxStartBufferPointer, sizeof(data), (uint8_t*) data);
        decode_TLM(&TLM_enc, &TLM_dec);
 8000fee:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000ff2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 ffe5 	bl	8001fc8 <decode_TLM>
        snprintf(printBuffer, 128, "%d,%d,%d,%d,%d,%d,%f,%d,%f,%d,%d,%f,%f,%f,%f,%f\r\n", TLM_dec.packet_type,TLM_dec.flight_state,TLM_dec.is_playing_music,TLM_dec.is_data_logging,
 8000ffe:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 8001002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001004:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8001008:	63bb      	str	r3, [r7, #56]	; 0x38
 800100a:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 800100e:	637b      	str	r3, [r7, #52]	; 0x34
 8001010:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8001014:	633b      	str	r3, [r7, #48]	; 0x30
                TLM_dec.pin_states,TLM_dec.servo_state, TLM_dec.vbat, TLM_dec.systick, TLM_dec.orientation_quat[0], TLM_dec.acc[2],TLM_dec.gyro[2],TLM_dec.baro, TLM_dec.temp, TLM_dec.vertical_velocity,
 8001016:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
        snprintf(printBuffer, 128, "%d,%d,%d,%d,%d,%d,%f,%d,%f,%d,%d,%f,%f,%f,%f,%f\r\n", TLM_dec.packet_type,TLM_dec.flight_state,TLM_dec.is_playing_music,TLM_dec.is_data_logging,
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
                TLM_dec.pin_states,TLM_dec.servo_state, TLM_dec.vbat, TLM_dec.systick, TLM_dec.orientation_quat[0], TLM_dec.acc[2],TLM_dec.gyro[2],TLM_dec.baro, TLM_dec.temp, TLM_dec.vertical_velocity,
 800101c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
        snprintf(printBuffer, 128, "%d,%d,%d,%d,%d,%d,%f,%d,%f,%d,%d,%f,%f,%f,%f,%f\r\n", TLM_dec.packet_type,TLM_dec.flight_state,TLM_dec.is_playing_music,TLM_dec.is_data_logging,
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
                TLM_dec.pin_states,TLM_dec.servo_state, TLM_dec.vbat, TLM_dec.systick, TLM_dec.orientation_quat[0], TLM_dec.acc[2],TLM_dec.gyro[2],TLM_dec.baro, TLM_dec.temp, TLM_dec.vertical_velocity,
 8001022:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
        snprintf(printBuffer, 128, "%d,%d,%d,%d,%d,%d,%f,%d,%f,%d,%d,%f,%f,%f,%f,%f\r\n", TLM_dec.packet_type,TLM_dec.flight_state,TLM_dec.is_playing_music,TLM_dec.is_data_logging,
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fa96 	bl	8000558 <__aeabi_f2d>
 800102c:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001030:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001034:	61fa      	str	r2, [r7, #28]
                TLM_dec.pin_states,TLM_dec.servo_state, TLM_dec.vbat, TLM_dec.systick, TLM_dec.orientation_quat[0], TLM_dec.acc[2],TLM_dec.gyro[2],TLM_dec.baro, TLM_dec.temp, TLM_dec.vertical_velocity,
 8001036:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
        snprintf(printBuffer, 128, "%d,%d,%d,%d,%d,%d,%f,%d,%f,%d,%d,%f,%f,%f,%f,%f\r\n", TLM_dec.packet_type,TLM_dec.flight_state,TLM_dec.is_playing_music,TLM_dec.is_data_logging,
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fa8c 	bl	8000558 <__aeabi_f2d>
 8001040:	e9c7 0104 	strd	r0, r1, [r7, #16]
                TLM_dec.pin_states,TLM_dec.servo_state, TLM_dec.vbat, TLM_dec.systick, TLM_dec.orientation_quat[0], TLM_dec.acc[2],TLM_dec.gyro[2],TLM_dec.baro, TLM_dec.temp, TLM_dec.vertical_velocity,
 8001044:	f9b7 313c 	ldrsh.w	r3, [r7, #316]	; 0x13c
        snprintf(printBuffer, 128, "%d,%d,%d,%d,%d,%d,%f,%d,%f,%d,%d,%f,%f,%f,%f,%f\r\n", TLM_dec.packet_type,TLM_dec.flight_state,TLM_dec.is_playing_music,TLM_dec.is_data_logging,
 8001048:	61bb      	str	r3, [r7, #24]
                TLM_dec.pin_states,TLM_dec.servo_state, TLM_dec.vbat, TLM_dec.systick, TLM_dec.orientation_quat[0], TLM_dec.acc[2],TLM_dec.gyro[2],TLM_dec.baro, TLM_dec.temp, TLM_dec.vertical_velocity,
 800104a:	f9b7 3142 	ldrsh.w	r3, [r7, #322]	; 0x142
        snprintf(printBuffer, 128, "%d,%d,%d,%d,%d,%d,%f,%d,%f,%d,%d,%f,%f,%f,%f,%f\r\n", TLM_dec.packet_type,TLM_dec.flight_state,TLM_dec.is_playing_music,TLM_dec.is_data_logging,
 800104e:	60fb      	str	r3, [r7, #12]
                TLM_dec.pin_states,TLM_dec.servo_state, TLM_dec.vbat, TLM_dec.systick, TLM_dec.orientation_quat[0], TLM_dec.acc[2],TLM_dec.gyro[2],TLM_dec.baro, TLM_dec.temp, TLM_dec.vertical_velocity,
 8001050:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
        snprintf(printBuffer, 128, "%d,%d,%d,%d,%d,%d,%f,%d,%f,%d,%d,%f,%f,%f,%f,%f\r\n", TLM_dec.packet_type,TLM_dec.flight_state,TLM_dec.is_playing_music,TLM_dec.is_data_logging,
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa7f 	bl	8000558 <__aeabi_f2d>
 800105a:	e9c7 0100 	strd	r0, r1, [r7]
                TLM_dec.pin_states,TLM_dec.servo_state, TLM_dec.vbat, TLM_dec.systick, TLM_dec.orientation_quat[0], TLM_dec.acc[2],TLM_dec.gyro[2],TLM_dec.baro, TLM_dec.temp, TLM_dec.vertical_velocity,
 800105e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
        snprintf(printBuffer, 128, "%d,%d,%d,%d,%d,%d,%f,%d,%f,%d,%d,%f,%f,%f,%f,%f\r\n", TLM_dec.packet_type,TLM_dec.flight_state,TLM_dec.is_playing_music,TLM_dec.is_data_logging,
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fa78 	bl	8000558 <__aeabi_f2d>
 8001068:	4682      	mov	sl, r0
 800106a:	468b      	mov	fp, r1
                TLM_dec.pin_states,TLM_dec.servo_state, TLM_dec.vbat, TLM_dec.systick, TLM_dec.orientation_quat[0], TLM_dec.acc[2],TLM_dec.gyro[2],TLM_dec.baro, TLM_dec.temp, TLM_dec.vertical_velocity,
 800106c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
        snprintf(printBuffer, 128, "%d,%d,%d,%d,%d,%d,%f,%d,%f,%d,%d,%f,%f,%f,%f,%f\r\n", TLM_dec.packet_type,TLM_dec.flight_state,TLM_dec.is_playing_music,TLM_dec.is_data_logging,
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fa71 	bl	8000558 <__aeabi_f2d>
 8001076:	4680      	mov	r8, r0
 8001078:	4689      	mov	r9, r1
                TLM_dec.altitude, TLM_dec.ranging);
 800107a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
        snprintf(printBuffer, 128, "%d,%d,%d,%d,%d,%d,%f,%d,%f,%d,%d,%f,%f,%f,%f,%f\r\n", TLM_dec.packet_type,TLM_dec.flight_state,TLM_dec.is_playing_music,TLM_dec.is_data_logging,
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fa6a 	bl	8000558 <__aeabi_f2d>
 8001084:	4605      	mov	r5, r0
 8001086:	460e      	mov	r6, r1
                TLM_dec.altitude, TLM_dec.ranging);
 8001088:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
        snprintf(printBuffer, 128, "%d,%d,%d,%d,%d,%d,%f,%d,%f,%d,%d,%f,%f,%f,%f,%f\r\n", TLM_dec.packet_type,TLM_dec.flight_state,TLM_dec.is_playing_music,TLM_dec.is_data_logging,
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fa63 	bl	8000558 <__aeabi_f2d>
 8001092:	4603      	mov	r3, r0
 8001094:	460c      	mov	r4, r1
 8001096:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800109a:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
 800109e:	e9cd 5614 	strd	r5, r6, [sp, #80]	; 0x50
 80010a2:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80010a6:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 80010aa:	ed97 7b00 	vldr	d7, [r7]
 80010ae:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80010b2:	68f9      	ldr	r1, [r7, #12]
 80010b4:	910d      	str	r1, [sp, #52]	; 0x34
 80010b6:	69b9      	ldr	r1, [r7, #24]
 80010b8:	910c      	str	r1, [sp, #48]	; 0x30
 80010ba:	ed97 7b04 	vldr	d7, [r7, #16]
 80010be:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80010c2:	69fa      	ldr	r2, [r7, #28]
 80010c4:	9208      	str	r2, [sp, #32]
 80010c6:	ed97 7b08 	vldr	d7, [r7, #32]
 80010ca:	ed8d 7b06 	vstr	d7, [sp, #24]
 80010ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010d0:	9204      	str	r2, [sp, #16]
 80010d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010d4:	9203      	str	r2, [sp, #12]
 80010d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010d8:	9202      	str	r2, [sp, #8]
 80010da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010dc:	9201      	str	r2, [sp, #4]
 80010de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010e0:	9200      	str	r2, [sp, #0]
 80010e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010e4:	4a0d      	ldr	r2, [pc, #52]	; (800111c <loraTelemetry+0x1c4>)
 80010e6:	2180      	movs	r1, #128	; 0x80
 80010e8:	f009 fbde 	bl	800a8a8 <sniprintf>
        //snprintf(printBuffer, 128,
        //       "Quaternion: %d, %d, %d, %d, RSSI: %f, SNR: %f\r\n",
        //       data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
        CDC_Transmit_FS((uint8_t*) printBuffer, strlen(printBuffer));
 80010ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff f875 	bl	80001e0 <strlen>
 80010f6:	4603      	mov	r3, r0
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f008 fa37 	bl	8009574 <CDC_Transmit_FS>
        HAL_Delay(1);
 8001106:	2001      	movs	r0, #1
 8001108:	f001 f914 	bl	8002334 <HAL_Delay>
        SetRx(&radio, 0x00, 0); // No timeout
 800110c:	e746      	b.n	8000f9c <loraTelemetry+0x44>
 800110e:	bf00      	nop
 8001110:	40020000 	.word	0x40020000
 8001114:	200003d8 	.word	0x200003d8
 8001118:	40020400 	.word	0x40020400
 800111c:	0800bf48 	.word	0x0800bf48

08001120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b0a0      	sub	sp, #128	; 0x80
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001126:	f001 f893 	bl	8002250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112a:	f000 f835 	bl	8001198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112e:	f000 f9df 	bl	80014f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001132:	f000 f899 	bl	8001268 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001136:	f000 f8e9 	bl	800130c <MX_I2C1_Init>
  MX_SPI3_Init();
 800113a:	f000 f915 	bl	8001368 <MX_SPI3_Init>
  MX_TIM2_Init();
 800113e:	f000 f949 	bl	80013d4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001142:	f000 f9ab 	bl	800149c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001146:	f008 f943 	bl	80093d0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  loraTelemetry(0);
 800114a:	2000      	movs	r0, #0
 800114c:	f7ff ff04 	bl	8000f58 <loraTelemetry>

  HAL_Delay(200);
 8001150:	20c8      	movs	r0, #200	; 0xc8
 8001152:	f001 f8ef 	bl	8002334 <HAL_Delay>
  char printBuffer[128];
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(printBuffer,"/*Project Zeggreus,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10*/");
 8001156:	463b      	mov	r3, r7
 8001158:	4a0d      	ldr	r2, [pc, #52]	; (8001190 <main+0x70>)
 800115a:	4618      	mov	r0, r3
 800115c:	4611      	mov	r1, r2
 800115e:	234e      	movs	r3, #78	; 0x4e
 8001160:	461a      	mov	r2, r3
 8001162:	f008 fe79 	bl	8009e58 <memcpy>
	  CDC_Transmit_FS((uint8_t*) printBuffer, strlen(printBuffer));
 8001166:	463b      	mov	r3, r7
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f839 	bl	80001e0 <strlen>
 800116e:	4603      	mov	r3, r0
 8001170:	b29a      	uxth	r2, r3
 8001172:	463b      	mov	r3, r7
 8001174:	4611      	mov	r1, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f008 f9fc 	bl	8009574 <CDC_Transmit_FS>
	  HAL_Delay(500);
 800117c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001180:	f001 f8d8 	bl	8002334 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001184:	2101      	movs	r1, #1
 8001186:	4803      	ldr	r0, [pc, #12]	; (8001194 <main+0x74>)
 8001188:	f001 fe2d 	bl	8002de6 <HAL_GPIO_TogglePin>
	  sprintf(printBuffer,"/*Project Zeggreus,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10*/");
 800118c:	e7e3      	b.n	8001156 <main+0x36>
 800118e:	bf00      	nop
 8001190:	0800bf7c 	.word	0x0800bf7c
 8001194:	40020000 	.word	0x40020000

08001198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b094      	sub	sp, #80	; 0x50
 800119c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	f107 0320 	add.w	r3, r7, #32
 80011a2:	2230      	movs	r2, #48	; 0x30
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f008 fe61 	bl	8009e6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	4b27      	ldr	r3, [pc, #156]	; (8001260 <SystemClock_Config+0xc8>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	4a26      	ldr	r2, [pc, #152]	; (8001260 <SystemClock_Config+0xc8>)
 80011c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ca:	6413      	str	r3, [r2, #64]	; 0x40
 80011cc:	4b24      	ldr	r3, [pc, #144]	; (8001260 <SystemClock_Config+0xc8>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <SystemClock_Config+0xcc>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a20      	ldr	r2, [pc, #128]	; (8001264 <SystemClock_Config+0xcc>)
 80011e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <SystemClock_Config+0xcc>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f4:	2301      	movs	r3, #1
 80011f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fe:	2302      	movs	r3, #2
 8001200:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001202:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001206:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001208:	2304      	movs	r3, #4
 800120a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800120c:	2348      	movs	r3, #72	; 0x48
 800120e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001210:	2302      	movs	r3, #2
 8001212:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001214:	2303      	movs	r3, #3
 8001216:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001218:	f107 0320 	add.w	r3, r7, #32
 800121c:	4618      	mov	r0, r3
 800121e:	f003 f8b9 	bl	8004394 <HAL_RCC_OscConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001228:	f000 fa1c 	bl	8001664 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122c:	230f      	movs	r3, #15
 800122e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001230:	2302      	movs	r3, #2
 8001232:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	2102      	movs	r1, #2
 8001248:	4618      	mov	r0, r3
 800124a:	f003 fb13 	bl	8004874 <HAL_RCC_ClockConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001254:	f000 fa06 	bl	8001664 <Error_Handler>
  }
}
 8001258:	bf00      	nop
 800125a:	3750      	adds	r7, #80	; 0x50
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40023800 	.word	0x40023800
 8001264:	40007000 	.word	0x40007000

08001268 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800126e:	463b      	mov	r3, r7
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800127a:	4b21      	ldr	r3, [pc, #132]	; (8001300 <MX_ADC1_Init+0x98>)
 800127c:	4a21      	ldr	r2, [pc, #132]	; (8001304 <MX_ADC1_Init+0x9c>)
 800127e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <MX_ADC1_Init+0x98>)
 8001282:	2200      	movs	r2, #0
 8001284:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <MX_ADC1_Init+0x98>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800128c:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <MX_ADC1_Init+0x98>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <MX_ADC1_Init+0x98>)
 8001294:	2200      	movs	r2, #0
 8001296:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <MX_ADC1_Init+0x98>)
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012a0:	4b17      	ldr	r3, [pc, #92]	; (8001300 <MX_ADC1_Init+0x98>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012a6:	4b16      	ldr	r3, [pc, #88]	; (8001300 <MX_ADC1_Init+0x98>)
 80012a8:	4a17      	ldr	r2, [pc, #92]	; (8001308 <MX_ADC1_Init+0xa0>)
 80012aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <MX_ADC1_Init+0x98>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <MX_ADC1_Init+0x98>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_ADC1_Init+0x98>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MX_ADC1_Init+0x98>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012c6:	480e      	ldr	r0, [pc, #56]	; (8001300 <MX_ADC1_Init+0x98>)
 80012c8:	f001 f856 	bl	8002378 <HAL_ADC_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012d2:	f000 f9c7 	bl	8001664 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012d6:	230a      	movs	r3, #10
 80012d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012da:	2301      	movs	r3, #1
 80012dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e2:	463b      	mov	r3, r7
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	; (8001300 <MX_ADC1_Init+0x98>)
 80012e8:	f001 f88a 	bl	8002400 <HAL_ADC_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80012f2:	f000 f9b7 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000430 	.word	0x20000430
 8001304:	40012000 	.word	0x40012000
 8001308:	0f000001 	.word	0x0f000001

0800130c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <MX_I2C1_Init+0x50>)
 8001312:	4a13      	ldr	r2, [pc, #76]	; (8001360 <MX_I2C1_Init+0x54>)
 8001314:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_I2C1_Init+0x50>)
 8001318:	4a12      	ldr	r2, [pc, #72]	; (8001364 <MX_I2C1_Init+0x58>)
 800131a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_I2C1_Init+0x50>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_I2C1_Init+0x50>)
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_I2C1_Init+0x50>)
 800132a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800132e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <MX_I2C1_Init+0x50>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_I2C1_Init+0x50>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <MX_I2C1_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_I2C1_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001348:	4804      	ldr	r0, [pc, #16]	; (800135c <MX_I2C1_Init+0x50>)
 800134a:	f001 fd67 	bl	8002e1c <HAL_I2C_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001354:	f000 f986 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000384 	.word	0x20000384
 8001360:	40005400 	.word	0x40005400
 8001364:	000186a0 	.word	0x000186a0

08001368 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <MX_SPI3_Init+0x64>)
 800136e:	4a18      	ldr	r2, [pc, #96]	; (80013d0 <MX_SPI3_Init+0x68>)
 8001370:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_SPI3_Init+0x64>)
 8001374:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001378:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800137a:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_SPI3_Init+0x64>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <MX_SPI3_Init+0x64>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_SPI3_Init+0x64>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_SPI3_Init+0x64>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_SPI3_Init+0x64>)
 8001394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001398:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_SPI3_Init+0x64>)
 800139c:	2200      	movs	r2, #0
 800139e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <MX_SPI3_Init+0x64>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_SPI3_Init+0x64>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <MX_SPI3_Init+0x64>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_SPI3_Init+0x64>)
 80013b4:	220a      	movs	r2, #10
 80013b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <MX_SPI3_Init+0x64>)
 80013ba:	f003 fc4d 	bl	8004c58 <HAL_SPI_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80013c4:	f000 f94e 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200003d8 	.word	0x200003d8
 80013d0:	40003c00 	.word	0x40003c00

080013d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013da:	f107 0320 	add.w	r3, r7, #32
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]
 80013f2:	615a      	str	r2, [r3, #20]
 80013f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013f6:	4b28      	ldr	r3, [pc, #160]	; (8001498 <MX_TIM2_Init+0xc4>)
 80013f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013fe:	4b26      	ldr	r3, [pc, #152]	; (8001498 <MX_TIM2_Init+0xc4>)
 8001400:	2200      	movs	r2, #0
 8001402:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001404:	4b24      	ldr	r3, [pc, #144]	; (8001498 <MX_TIM2_Init+0xc4>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800140a:	4b23      	ldr	r3, [pc, #140]	; (8001498 <MX_TIM2_Init+0xc4>)
 800140c:	f04f 32ff 	mov.w	r2, #4294967295
 8001410:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001412:	4b21      	ldr	r3, [pc, #132]	; (8001498 <MX_TIM2_Init+0xc4>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001418:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <MX_TIM2_Init+0xc4>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800141e:	481e      	ldr	r0, [pc, #120]	; (8001498 <MX_TIM2_Init+0xc4>)
 8001420:	f004 f96e 	bl	8005700 <HAL_TIM_PWM_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800142a:	f000 f91b 	bl	8001664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001436:	f107 0320 	add.w	r3, r7, #32
 800143a:	4619      	mov	r1, r3
 800143c:	4816      	ldr	r0, [pc, #88]	; (8001498 <MX_TIM2_Init+0xc4>)
 800143e:	f004 fc5d 	bl	8005cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001448:	f000 f90c 	bl	8001664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800144c:	2360      	movs	r3, #96	; 0x60
 800144e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2204      	movs	r2, #4
 8001460:	4619      	mov	r1, r3
 8001462:	480d      	ldr	r0, [pc, #52]	; (8001498 <MX_TIM2_Init+0xc4>)
 8001464:	f004 f978 	bl	8005758 <HAL_TIM_PWM_ConfigChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800146e:	f000 f8f9 	bl	8001664 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	2208      	movs	r2, #8
 8001476:	4619      	mov	r1, r3
 8001478:	4807      	ldr	r0, [pc, #28]	; (8001498 <MX_TIM2_Init+0xc4>)
 800147a:	f004 f96d 	bl	8005758 <HAL_TIM_PWM_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001484:	f000 f8ee 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001488:	4803      	ldr	r0, [pc, #12]	; (8001498 <MX_TIM2_Init+0xc4>)
 800148a:	f000 fa0b 	bl	80018a4 <HAL_TIM_MspPostInit>

}
 800148e:	bf00      	nop
 8001490:	3728      	adds	r7, #40	; 0x28
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000478 	.word	0x20000478

0800149c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	; (80014ec <MX_USART2_UART_Init+0x50>)
 80014a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014c2:	220c      	movs	r2, #12
 80014c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014d4:	f004 fc80 	bl	8005dd8 <HAL_UART_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014de:	f000 f8c1 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200004b8 	.word	0x200004b8
 80014ec:	40004400 	.word	0x40004400

080014f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	4b51      	ldr	r3, [pc, #324]	; (8001650 <MX_GPIO_Init+0x160>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a50      	ldr	r2, [pc, #320]	; (8001650 <MX_GPIO_Init+0x160>)
 8001510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b4e      	ldr	r3, [pc, #312]	; (8001650 <MX_GPIO_Init+0x160>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b4a      	ldr	r3, [pc, #296]	; (8001650 <MX_GPIO_Init+0x160>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a49      	ldr	r2, [pc, #292]	; (8001650 <MX_GPIO_Init+0x160>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b47      	ldr	r3, [pc, #284]	; (8001650 <MX_GPIO_Init+0x160>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	4b43      	ldr	r3, [pc, #268]	; (8001650 <MX_GPIO_Init+0x160>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a42      	ldr	r2, [pc, #264]	; (8001650 <MX_GPIO_Init+0x160>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b40      	ldr	r3, [pc, #256]	; (8001650 <MX_GPIO_Init+0x160>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <MX_GPIO_Init+0x160>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a3b      	ldr	r2, [pc, #236]	; (8001650 <MX_GPIO_Init+0x160>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b39      	ldr	r3, [pc, #228]	; (8001650 <MX_GPIO_Init+0x160>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	603b      	str	r3, [r7, #0]
 800157a:	4b35      	ldr	r3, [pc, #212]	; (8001650 <MX_GPIO_Init+0x160>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a34      	ldr	r2, [pc, #208]	; (8001650 <MX_GPIO_Init+0x160>)
 8001580:	f043 0308 	orr.w	r3, r3, #8
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b32      	ldr	r3, [pc, #200]	; (8001650 <MX_GPIO_Init+0x160>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|RXEN_Pin|TXEN_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	f248 6101 	movw	r1, #34305	; 0x8601
 8001598:	482e      	ldr	r0, [pc, #184]	; (8001654 <MX_GPIO_Init+0x164>)
 800159a:	f001 fc0b 	bl	8002db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SWANT_GPIO_Port, SWANT_Pin, GPIO_PIN_SET);
 800159e:	2201      	movs	r2, #1
 80015a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015a4:	482c      	ldr	r0, [pc, #176]	; (8001658 <MX_GPIO_Init+0x168>)
 80015a6:	f001 fc05 	bl	8002db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 80015aa:	2201      	movs	r2, #1
 80015ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b0:	4828      	ldr	r0, [pc, #160]	; (8001654 <MX_GPIO_Init+0x164>)
 80015b2:	f001 fbff 	bl	8002db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2180      	movs	r1, #128	; 0x80
 80015ba:	4828      	ldr	r0, [pc, #160]	; (800165c <MX_GPIO_Init+0x16c>)
 80015bc:	f001 fbfa 	bl	8002db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin MODE_Pin RXEN_Pin TXEN_Pin
                           LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|MODE_Pin|RXEN_Pin|TXEN_Pin
 80015c0:	f248 7301 	movw	r3, #34561	; 0x8701
 80015c4:	617b      	str	r3, [r7, #20]
                          |LORA_NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	481e      	ldr	r0, [pc, #120]	; (8001654 <MX_GPIO_Init+0x164>)
 80015da:	f001 fa51 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWANT_Pin */
  GPIO_InitStruct.Pin = SWANT_Pin;
 80015de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SWANT_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	4818      	ldr	r0, [pc, #96]	; (8001658 <MX_GPIO_Init+0x168>)
 80015f8:	f001 fa42 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO3_Pin */
  GPIO_InitStruct.Pin = DIO3_Pin;
 80015fc:	2304      	movs	r3, #4
 80015fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001600:	2300      	movs	r3, #0
 8001602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO3_GPIO_Port, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	4814      	ldr	r0, [pc, #80]	; (8001660 <MX_GPIO_Init+0x170>)
 8001610:	f001 fa36 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO2_Pin LORA_DIO1_Pin LORA_BUSY_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin|LORA_DIO1_Pin|LORA_BUSY_Pin;
 8001614:	2370      	movs	r3, #112	; 0x70
 8001616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001618:	2300      	movs	r3, #0
 800161a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	480d      	ldr	r0, [pc, #52]	; (800165c <MX_GPIO_Init+0x16c>)
 8001628:	f001 fa2a 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RESET_Pin */
  GPIO_InitStruct.Pin = LORA_RESET_Pin;
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	2301      	movs	r3, #1
 8001632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LORA_RESET_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	4806      	ldr	r0, [pc, #24]	; (800165c <MX_GPIO_Init+0x16c>)
 8001644:	f001 fa1c 	bl	8002a80 <HAL_GPIO_Init>

}
 8001648:	bf00      	nop
 800164a:	3728      	adds	r7, #40	; 0x28
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40023800 	.word	0x40023800
 8001654:	40020000 	.word	0x40020000
 8001658:	40020800 	.word	0x40020800
 800165c:	40020400 	.word	0x40020400
 8001660:	40020c00 	.word	0x40020c00

08001664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001668:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800166a:	e7fe      	b.n	800166a <Error_Handler+0x6>

0800166c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <HAL_MspInit+0x4c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <HAL_MspInit+0x4c>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <HAL_MspInit+0x4c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_MspInit+0x4c>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	4a08      	ldr	r2, [pc, #32]	; (80016b8 <HAL_MspInit+0x4c>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169c:	6413      	str	r3, [r2, #64]	; 0x40
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_MspInit+0x4c>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800

080016bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a17      	ldr	r2, [pc, #92]	; (8001738 <HAL_ADC_MspInit+0x7c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d127      	bne.n	800172e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	4b16      	ldr	r3, [pc, #88]	; (800173c <HAL_ADC_MspInit+0x80>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	4a15      	ldr	r2, [pc, #84]	; (800173c <HAL_ADC_MspInit+0x80>)
 80016e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ec:	6453      	str	r3, [r2, #68]	; 0x44
 80016ee:	4b13      	ldr	r3, [pc, #76]	; (800173c <HAL_ADC_MspInit+0x80>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <HAL_ADC_MspInit+0x80>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a0e      	ldr	r2, [pc, #56]	; (800173c <HAL_ADC_MspInit+0x80>)
 8001704:	f043 0304 	orr.w	r3, r3, #4
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <HAL_ADC_MspInit+0x80>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = PDET_Pin;
 8001716:	2301      	movs	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800171a:	2303      	movs	r3, #3
 800171c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PDET_GPIO_Port, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	4805      	ldr	r0, [pc, #20]	; (8001740 <HAL_ADC_MspInit+0x84>)
 800172a:	f001 f9a9 	bl	8002a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800172e:	bf00      	nop
 8001730:	3728      	adds	r7, #40	; 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40012000 	.word	0x40012000
 800173c:	40023800 	.word	0x40023800
 8001740:	40020800 	.word	0x40020800

08001744 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	; 0x28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a19      	ldr	r2, [pc, #100]	; (80017c8 <HAL_I2C_MspInit+0x84>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d12c      	bne.n	80017c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <HAL_I2C_MspInit+0x88>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a17      	ldr	r2, [pc, #92]	; (80017cc <HAL_I2C_MspInit+0x88>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_I2C_MspInit+0x88>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001782:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001788:	2312      	movs	r3, #18
 800178a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800178c:	2301      	movs	r3, #1
 800178e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001790:	2303      	movs	r3, #3
 8001792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001794:	2304      	movs	r3, #4
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	480c      	ldr	r0, [pc, #48]	; (80017d0 <HAL_I2C_MspInit+0x8c>)
 80017a0:	f001 f96e 	bl	8002a80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <HAL_I2C_MspInit+0x88>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	4a07      	ldr	r2, [pc, #28]	; (80017cc <HAL_I2C_MspInit+0x88>)
 80017ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017b2:	6413      	str	r3, [r2, #64]	; 0x40
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <HAL_I2C_MspInit+0x88>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017c0:	bf00      	nop
 80017c2:	3728      	adds	r7, #40	; 0x28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40005400 	.word	0x40005400
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020400 	.word	0x40020400

080017d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a19      	ldr	r2, [pc, #100]	; (8001858 <HAL_SPI_MspInit+0x84>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d12c      	bne.n	8001850 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <HAL_SPI_MspInit+0x88>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a17      	ldr	r2, [pc, #92]	; (800185c <HAL_SPI_MspInit+0x88>)
 8001800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001804:	6413      	str	r3, [r2, #64]	; 0x40
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_SPI_MspInit+0x88>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <HAL_SPI_MspInit+0x88>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a10      	ldr	r2, [pc, #64]	; (800185c <HAL_SPI_MspInit+0x88>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <HAL_SPI_MspInit+0x88>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800182e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183c:	2303      	movs	r3, #3
 800183e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001840:	2306      	movs	r3, #6
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4619      	mov	r1, r3
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <HAL_SPI_MspInit+0x8c>)
 800184c:	f001 f918 	bl	8002a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001850:	bf00      	nop
 8001852:	3728      	adds	r7, #40	; 0x28
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40003c00 	.word	0x40003c00
 800185c:	40023800 	.word	0x40023800
 8001860:	40020800 	.word	0x40020800

08001864 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001874:	d10d      	bne.n	8001892 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_TIM_PWM_MspInit+0x3c>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a08      	ldr	r2, [pc, #32]	; (80018a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800

080018a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c4:	d13c      	bne.n	8001940 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <HAL_TIM_MspPostInit+0xa4>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a1e      	ldr	r2, [pc, #120]	; (8001948 <HAL_TIM_MspPostInit+0xa4>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <HAL_TIM_MspPostInit+0xa4>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b18      	ldr	r3, [pc, #96]	; (8001948 <HAL_TIM_MspPostInit+0xa4>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a17      	ldr	r2, [pc, #92]	; (8001948 <HAL_TIM_MspPostInit+0xa4>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_TIM_MspPostInit+0xa4>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = LED2_Pin;
 80018fe:	2302      	movs	r3, #2
 8001900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800190e:	2301      	movs	r3, #1
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	480c      	ldr	r0, [pc, #48]	; (800194c <HAL_TIM_MspPostInit+0xa8>)
 800191a:	f001 f8b1 	bl	8002a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800191e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001930:	2301      	movs	r3, #1
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	4805      	ldr	r0, [pc, #20]	; (8001950 <HAL_TIM_MspPostInit+0xac>)
 800193c:	f001 f8a0 	bl	8002a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001940:	bf00      	nop
 8001942:	3728      	adds	r7, #40	; 0x28
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800
 800194c:	40020000 	.word	0x40020000
 8001950:	40020400 	.word	0x40020400

08001954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a19      	ldr	r2, [pc, #100]	; (80019d8 <HAL_UART_MspInit+0x84>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d12b      	bne.n	80019ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_UART_MspInit+0x88>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a17      	ldr	r2, [pc, #92]	; (80019dc <HAL_UART_MspInit+0x88>)
 8001980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_UART_MspInit+0x88>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_UART_MspInit+0x88>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a10      	ldr	r2, [pc, #64]	; (80019dc <HAL_UART_MspInit+0x88>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_UART_MspInit+0x88>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019ae:	230c      	movs	r3, #12
 80019b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019be:	2307      	movs	r3, #7
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	4805      	ldr	r0, [pc, #20]	; (80019e0 <HAL_UART_MspInit+0x8c>)
 80019ca:	f001 f859 	bl	8002a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019ce:	bf00      	nop
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40004400 	.word	0x40004400
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020000 	.word	0x40020000

080019e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <NMI_Handler+0x4>

080019ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ee:	e7fe      	b.n	80019ee <HardFault_Handler+0x4>

080019f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <MemManage_Handler+0x4>

080019f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fa:	e7fe      	b.n	80019fa <BusFault_Handler+0x4>

080019fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <UsageFault_Handler+0x4>

08001a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a30:	f000 fc60 	bl	80022f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <OTG_FS_IRQHandler+0x10>)
 8001a3e:	f001 fc75 	bl	800332c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200019cc 	.word	0x200019cc

08001a4c <sxSpiTransmit>:
#include "main.h"
#include "sx1280_custom.h"


void sxSpiTransmit(sx1280_custom *radio, uint8_t *txBuf, uint8_t size) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	4613      	mov	r3, r2
 8001a58:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6858      	ldr	r0, [r3, #4]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	891b      	ldrh	r3, [r3, #8]
 8001a62:	2200      	movs	r2, #0
 8001a64:	4619      	mov	r1, r3
 8001a66:	f001 f9a5 	bl	8002db4 <HAL_GPIO_WritePin>
    radio->spi_return = HAL_SPI_Transmit(radio->spiHandle, txBuf, size, 1000);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6818      	ldr	r0, [r3, #0]
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a76:	68b9      	ldr	r1, [r7, #8]
 8001a78:	f003 f952 	bl	8004d20 <HAL_SPI_Transmit>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6858      	ldr	r0, [r3, #4]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	891b      	ldrh	r3, [r3, #8]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4619      	mov	r1, r3
 8001a92:	f001 f98f 	bl	8002db4 <HAL_GPIO_WritePin>
}
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <sxSpiTransmitReceive>:
void sxSpiTransmitReceive(sx1280_custom *radio, uint8_t *txBuf, uint8_t *rxBuf, uint8_t size) {
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af02      	add	r7, sp, #8
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6858      	ldr	r0, [r3, #4]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	891b      	ldrh	r3, [r3, #8]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f001 f97c 	bl	8002db4 <HAL_GPIO_WritePin>
    radio->spi_return = HAL_SPI_TransmitReceive(radio->spiHandle,txBuf,rxBuf,size,1000);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	78fb      	ldrb	r3, [r7, #3]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	4613      	mov	r3, r2
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	68b9      	ldr	r1, [r7, #8]
 8001ad0:	f003 fb63 	bl	800519a <HAL_SPI_TransmitReceive>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6858      	ldr	r0, [r3, #4]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	891b      	ldrh	r3, [r3, #8]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f001 f963 	bl	8002db4 <HAL_GPIO_WritePin>
}
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <sxInit>:


void sxInit(sx1280_custom *radio, SPI_HandleTypeDef *spiHandle,
        GPIO_TypeDef *csPinBank, uint16_t csPin) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af02      	add	r7, sp, #8
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
 8001b04:	807b      	strh	r3, [r7, #2]

    radio->spiHandle = spiHandle;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	601a      	str	r2, [r3, #0]
    radio->csPinBank = csPinBank;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	605a      	str	r2, [r3, #4]
    radio->csPin = csPin;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	887a      	ldrh	r2, [r7, #2]
 8001b16:	811a      	strh	r2, [r3, #8]


    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2180      	movs	r1, #128	; 0x80
 8001b1c:	4825      	ldr	r0, [pc, #148]	; (8001bb4 <sxInit+0xbc>)
 8001b1e:	f001 f949 	bl	8002db4 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001b22:	2002      	movs	r0, #2
 8001b24:	f000 fc06 	bl	8002334 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	2180      	movs	r1, #128	; 0x80
 8001b2c:	4821      	ldr	r0, [pc, #132]	; (8001bb4 <sxInit+0xbc>)
 8001b2e:	f001 f941 	bl	8002db4 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001b32:	2002      	movs	r0, #2
 8001b34:	f000 fbfe 	bl	8002334 <HAL_Delay>

    SetStandbyRC(radio);
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 f850 	bl	8001bde <SetStandbyRC>
    HAL_Delay(3);
 8001b3e:	2003      	movs	r0, #3
 8001b40:	f000 fbf8 	bl	8002334 <HAL_Delay>
    setPacketLora(radio);
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f000 f875 	bl	8001c34 <setPacketLora>
    HAL_Delay(2);
 8001b4a:	2002      	movs	r0, #2
 8001b4c:	f000 fbf2 	bl	8002334 <HAL_Delay>
    SetRfFrequency2(radio);
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 f859 	bl	8001c08 <SetRfFrequency2>
    HAL_Delay(2);
 8001b56:	2002      	movs	r0, #2
 8001b58:	f000 fbec 	bl	8002334 <HAL_Delay>

    SetBufferBaseAddresses(radio, 0, 0); // 127
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2100      	movs	r1, #0
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 f87d 	bl	8001c60 <SetBufferBaseAddresses>
    HAL_Delay(1);
 8001b66:	2001      	movs	r0, #1
 8001b68:	f000 fbe4 	bl	8002334 <HAL_Delay>
    SetModulationParams(radio, 0x90, 0x0A, 0x01); // Spreading factor 9, 1600 BW (0x0A), CR 4/5
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	220a      	movs	r2, #10
 8001b70:	2190      	movs	r1, #144	; 0x90
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 f88e 	bl	8001c94 <SetModulationParams>
    HAL_Delay(1);
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f000 fbdb 	bl	8002334 <HAL_Delay>

    WriteRegisterByte(radio, 0x925, 0x32); // must be used for SF9-12. Different for 5-8 (page 112)
 8001b7e:	2232      	movs	r2, #50	; 0x32
 8001b80:	f640 1125 	movw	r1, #2341	; 0x925
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f000 f9b2 	bl	8001eee <WriteRegisterByte>

    HAL_Delay(1);
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f000 fbd2 	bl	8002334 <HAL_Delay>
    SetPacketParamsLora(radio, 12, 0x80, 32, 0x20, 0x40); // 12 symbol preamble, implicit header, 32 byte payload, CRC enabled, Normal IQ
 8001b90:	2340      	movs	r3, #64	; 0x40
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	2320      	movs	r3, #32
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2320      	movs	r3, #32
 8001b9a:	2280      	movs	r2, #128	; 0x80
 8001b9c:	210c      	movs	r1, #12
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 f899 	bl	8001cd6 <SetPacketParamsLora>
    HAL_Delay(1);
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f000 fbc5 	bl	8002334 <HAL_Delay>
}
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40020400 	.word	0x40020400

08001bb8 <sxSetDio1Pin>:

void sxSetDio1Pin(sx1280_custom *radio, GPIO_TypeDef *Dio1PinBank, uint16_t Dio1Pin) {
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	80fb      	strh	r3, [r7, #6]
    radio->Dio1PinBank = Dio1PinBank;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	60da      	str	r2, [r3, #12]
    radio->Dio1Pin = Dio1Pin;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	88fa      	ldrh	r2, [r7, #6]
 8001bd0:	821a      	strh	r2, [r3, #16]
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <SetStandbyRC>:

void SetStandbyRC(sx1280_custom *radio) {
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b084      	sub	sp, #16
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[2];
    uint8_t loraTxBuf[] = { 0x80, 0x00 }; // Standby RC
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	723b      	strb	r3, [r7, #8]
 8001bea:	2300      	movs	r3, #0
 8001bec:	727b      	strb	r3, [r7, #9]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 2);
 8001bee:	f107 020c 	add.w	r2, r7, #12
 8001bf2:	f107 0108 	add.w	r1, r7, #8
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff50 	bl	8001a9e <sxSpiTransmitReceive>
}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <SetRfFrequency2>:
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x86, 0xBD, 0x3B, 0x14 }; // SetRfFrequency
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 4);
}

void SetRfFrequency2(sx1280_custom *radio) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
    // 52e6/(2^18) multiples of
    // 2.46 = 2.46 * 10^9/(52e6/(2^18)) = 12401428 = 0xBD3B14
    // uint32_t rfFreq = 12401428;

    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x86, 0xBE, 0xC4, 0xEC }; // SetRfFrequency
 8001c10:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <SetRfFrequency2+0x28>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60bb      	str	r3, [r7, #8]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 4);
 8001c16:	f107 020c 	add.w	r2, r7, #12
 8001c1a:	f107 0108 	add.w	r1, r7, #8
 8001c1e:	2304      	movs	r3, #4
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff3c 	bl	8001a9e <sxSpiTransmitReceive>
}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	0800bfd0 	.word	0x0800bfd0

08001c34 <setPacketLora>:

void setPacketLora(sx1280_custom *radio) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[2];
    uint8_t loraTxBuf[] = { 0x8A, 0x01 }; // Set packet to lora
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <setPacketLora+0x28>)
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	813b      	strh	r3, [r7, #8]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 2);
 8001c42:	f107 020c 	add.w	r2, r7, #12
 8001c46:	f107 0108 	add.w	r1, r7, #8
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff ff26 	bl	8001a9e <sxSpiTransmitReceive>
}
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	0800bfd4 	.word	0x0800bfd4

08001c60 <SetBufferBaseAddresses>:
    // Set to -12 dBm = 0.06 mW
    uint8_t loraTxBuf[] = { 0x8E, power, rampTime };
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 3);
}

void SetBufferBaseAddresses(sx1280_custom *radio, uint8_t txBaseAddress, uint8_t rxBaseAddress) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	70fb      	strb	r3, [r7, #3]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	70bb      	strb	r3, [r7, #2]
    uint8_t loraRxBuf[3];
    uint8_t loraTxBuf[] = { 0x8F, txBaseAddress, rxBaseAddress };
 8001c70:	238f      	movs	r3, #143	; 0x8f
 8001c72:	723b      	strb	r3, [r7, #8]
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	727b      	strb	r3, [r7, #9]
 8001c78:	78bb      	ldrb	r3, [r7, #2]
 8001c7a:	72bb      	strb	r3, [r7, #10]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001c7c:	f107 020c 	add.w	r2, r7, #12
 8001c80:	f107 0108 	add.w	r1, r7, #8
 8001c84:	2303      	movs	r3, #3
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ff09 	bl	8001a9e <sxSpiTransmitReceive>
}
 8001c8c:	bf00      	nop
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <SetModulationParams>:

void SetModulationParams(sx1280_custom *radio, uint8_t modParam1, uint8_t modParam2,
        uint8_t modParam3) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	4608      	mov	r0, r1
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	70fb      	strb	r3, [r7, #3]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	70bb      	strb	r3, [r7, #2]
 8001caa:	4613      	mov	r3, r2
 8001cac:	707b      	strb	r3, [r7, #1]
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x8B, modParam1, modParam2, modParam3 };
 8001cae:	238b      	movs	r3, #139	; 0x8b
 8001cb0:	723b      	strb	r3, [r7, #8]
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	727b      	strb	r3, [r7, #9]
 8001cb6:	78bb      	ldrb	r3, [r7, #2]
 8001cb8:	72bb      	strb	r3, [r7, #10]
 8001cba:	787b      	ldrb	r3, [r7, #1]
 8001cbc:	72fb      	strb	r3, [r7, #11]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001cbe:	f107 020c 	add.w	r2, r7, #12
 8001cc2:	f107 0108 	add.w	r1, r7, #8
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff fee8 	bl	8001a9e <sxSpiTransmitReceive>
}
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <SetPacketParamsLora>:

void SetPacketParamsLora(sx1280_custom *radio, uint8_t param1, uint8_t param2, uint8_t param3,
        uint8_t param4, uint8_t param5) {
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b084      	sub	sp, #16
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	4608      	mov	r0, r1
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	70fb      	strb	r3, [r7, #3]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	70bb      	strb	r3, [r7, #2]
 8001cec:	4613      	mov	r3, r2
 8001cee:	707b      	strb	r3, [r7, #1]
    uint8_t loraTxBuf[] = { 0x8C, param1, param2, param3, param4, param5 };
 8001cf0:	238c      	movs	r3, #140	; 0x8c
 8001cf2:	723b      	strb	r3, [r7, #8]
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	727b      	strb	r3, [r7, #9]
 8001cf8:	78bb      	ldrb	r3, [r7, #2]
 8001cfa:	72bb      	strb	r3, [r7, #10]
 8001cfc:	787b      	ldrb	r3, [r7, #1]
 8001cfe:	72fb      	strb	r3, [r7, #11]
 8001d00:	7e3b      	ldrb	r3, [r7, #24]
 8001d02:	733b      	strb	r3, [r7, #12]
 8001d04:	7f3b      	ldrb	r3, [r7, #28]
 8001d06:	737b      	strb	r3, [r7, #13]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8001d08:	f107 0308 	add.w	r3, r7, #8
 8001d0c:	2206      	movs	r2, #6
 8001d0e:	4619      	mov	r1, r3
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff fe9b 	bl	8001a4c <sxSpiTransmit>
}
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <ReadBuffer>:
    HAL_SPI_Transmit(radio->spiHandle, data, size, 1000);
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);

}

void ReadBuffer(sx1280_custom *radio, uint8_t offset, uint8_t size, uint8_t *data) {
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b086      	sub	sp, #24
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	72fb      	strb	r3, [r7, #11]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	72bb      	strb	r3, [r7, #10]
    uint8_t loraTxBuf[] = { 0x1B, offset, 0x00};
 8001d30:	231b      	movs	r3, #27
 8001d32:	753b      	strb	r3, [r7, #20]
 8001d34:	7afb      	ldrb	r3, [r7, #11]
 8001d36:	757b      	strb	r3, [r7, #21]
 8001d38:	2300      	movs	r3, #0
 8001d3a:	75bb      	strb	r3, [r7, #22]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6858      	ldr	r0, [r3, #4]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	891b      	ldrh	r3, [r3, #8]
 8001d44:	2200      	movs	r2, #0
 8001d46:	4619      	mov	r1, r3
 8001d48:	f001 f834 	bl	8002db4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(radio->spiHandle, loraTxBuf, sizeof(loraTxBuf), 1000);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	f107 0114 	add.w	r1, r7, #20
 8001d54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d58:	2203      	movs	r2, #3
 8001d5a:	f002 ffe1 	bl	8004d20 <HAL_SPI_Transmit>
    HAL_SPI_Receive(radio->spiHandle, data, size, 1000);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	7abb      	ldrb	r3, [r7, #10]
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	f003 f90c 	bl	8004f88 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6858      	ldr	r0, [r3, #4]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	891b      	ldrh	r3, [r3, #8]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f001 f81a 	bl	8002db4 <HAL_GPIO_WritePin>
}
 8001d80:	bf00      	nop
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <SetDioIrqParams>:

void SetDioIrqParams(sx1280_custom *radio, uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask,
        uint16_t dio3Mask) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	4608      	mov	r0, r1
 8001d92:	4611      	mov	r1, r2
 8001d94:	461a      	mov	r2, r3
 8001d96:	4603      	mov	r3, r0
 8001d98:	817b      	strh	r3, [r7, #10]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	813b      	strh	r3, [r7, #8]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	80fb      	strh	r3, [r7, #6]
    uint8_t loraTxBuf[9];
    loraTxBuf[0] = 0x8D;
 8001da2:	238d      	movs	r3, #141	; 0x8d
 8001da4:	753b      	strb	r3, [r7, #20]
    loraTxBuf[1] = (uint8_t) ((irqMask >> 8) & 0x00FF);
 8001da6:	897b      	ldrh	r3, [r7, #10]
 8001da8:	0a1b      	lsrs	r3, r3, #8
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	757b      	strb	r3, [r7, #21]
    loraTxBuf[2] = (uint8_t) (irqMask & 0x00FF);
 8001db0:	897b      	ldrh	r3, [r7, #10]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	75bb      	strb	r3, [r7, #22]
    loraTxBuf[3] = (uint8_t) ((dio1Mask >> 8) & 0x00FF);
 8001db6:	893b      	ldrh	r3, [r7, #8]
 8001db8:	0a1b      	lsrs	r3, r3, #8
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	75fb      	strb	r3, [r7, #23]
    loraTxBuf[4] = (uint8_t) (dio1Mask & 0x00FF);
 8001dc0:	893b      	ldrh	r3, [r7, #8]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	763b      	strb	r3, [r7, #24]
    loraTxBuf[5] = (uint8_t) ((dio2Mask >> 8) & 0x00FF);
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	767b      	strb	r3, [r7, #25]
    loraTxBuf[6] = (uint8_t) (dio2Mask & 0x00FF);
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	76bb      	strb	r3, [r7, #26]
    loraTxBuf[7] = (uint8_t) ((dio3Mask >> 8) & 0x00FF);
 8001dd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	76fb      	strb	r3, [r7, #27]
    loraTxBuf[8] = (uint8_t) (dio3Mask & 0x00FF);
 8001de0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	773b      	strb	r3, [r7, #28]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8001de6:	f107 0314 	add.w	r3, r7, #20
 8001dea:	2209      	movs	r2, #9
 8001dec:	4619      	mov	r1, r3
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f7ff fe2c 	bl	8001a4c <sxSpiTransmit>
}
 8001df4:	bf00      	nop
 8001df6:	3720      	adds	r7, #32
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <ClrIrqStatus>:

void ClrIrqStatus(sx1280_custom *radio, uint16_t irqMask) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	807b      	strh	r3, [r7, #2]
    uint8_t buf[3];
    buf[0] = 0X97;
 8001e08:	2397      	movs	r3, #151	; 0x97
 8001e0a:	733b      	strb	r3, [r7, #12]
    buf[1] = (uint8_t) (((uint16_t) irqMask >> 8) & 0x00FF);
 8001e0c:	887b      	ldrh	r3, [r7, #2]
 8001e0e:	0a1b      	lsrs	r3, r3, #8
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) ((uint16_t) irqMask & 0x00FF);
 8001e16:	887b      	ldrh	r3, [r7, #2]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	73bb      	strb	r3, [r7, #14]
    sxSpiTransmit(radio, buf, sizeof(buf));
 8001e1c:	f107 030c 	add.w	r3, r7, #12
 8001e20:	2203      	movs	r2, #3
 8001e22:	4619      	mov	r1, r3
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff fe11 	bl	8001a4c <sxSpiTransmit>
}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <SetRx>:
    buf[2] = (uint8_t) (((uint16_t) periodBaseCount >> 8) & 0x00FF);
    buf[3] = (uint8_t) ((uint16_t) periodBaseCount & 0x00FF);
    sxSpiTransmit(radio, buf, sizeof(buf));
}

void SetRx(sx1280_custom *radio, uint8_t periodBase, uint16_t periodBaseCount) {
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	70fb      	strb	r3, [r7, #3]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	803b      	strh	r3, [r7, #0]
    uint8_t buf[4];
    buf[0] = 0X82;
 8001e42:	2382      	movs	r3, #130	; 0x82
 8001e44:	733b      	strb	r3, [r7, #12]
    buf[1] = periodBase;
 8001e46:	78fb      	ldrb	r3, [r7, #3]
 8001e48:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) (((uint16_t) periodBaseCount >> 8) & 0x00FF);
 8001e4a:	883b      	ldrh	r3, [r7, #0]
 8001e4c:	0a1b      	lsrs	r3, r3, #8
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	73bb      	strb	r3, [r7, #14]
    buf[3] = (uint8_t) ((uint16_t) periodBaseCount & 0x00FF);
 8001e54:	883b      	ldrh	r3, [r7, #0]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, buf, sizeof(buf));
 8001e5a:	f107 030c 	add.w	r3, r7, #12
 8001e5e:	2204      	movs	r2, #4
 8001e60:	4619      	mov	r1, r3
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff fdf2 	bl	8001a4c <sxSpiTransmit>
}
 8001e68:	bf00      	nop
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <GetPacketStatusLora>:

void GetPacketStatusLora(sx1280_custom *radio) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x1D, 0x00, 0x00, 0x00};
 8001e78:	231d      	movs	r3, #29
 8001e7a:	723b      	strb	r3, [r7, #8]
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	727b      	strb	r3, [r7, #9]
 8001e80:	2300      	movs	r3, #0
 8001e82:	72bb      	strb	r3, [r7, #10]
 8001e84:	2300      	movs	r3, #0
 8001e86:	72fb      	strb	r3, [r7, #11]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001e88:	f107 020c 	add.w	r2, r7, #12
 8001e8c:	f107 0108 	add.w	r1, r7, #8
 8001e90:	2304      	movs	r3, #4
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff fe03 	bl	8001a9e <sxSpiTransmitReceive>

    radio->rssiSync = loraRxBuf[2];
 8001e98:	7bba      	ldrb	r2, [r7, #14]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    radio->rawSnr = loraRxBuf[3];
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	b25a      	sxtb	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    radio->rssi = -((float) radio->rssiSync)/2;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001eb0:	ee07 3a90 	vmov	s15, r3
 8001eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eb8:	eeb1 7a67 	vneg.f32	s14, s15
 8001ebc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ec0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    radio->snr = ((float) radio->rawSnr)/4;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8001ed0:	ee07 3a90 	vmov	s15, r3
 8001ed4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ed8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001edc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <WriteRegisterByte>:

void GetRxBufferStatus(sx1280_custom *radio) {

}

void WriteRegisterByte(sx1280_custom *radio, uint16_t address, uint8_t data) {
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b084      	sub	sp, #16
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	807b      	strh	r3, [r7, #2]
 8001efa:	4613      	mov	r3, r2
 8001efc:	707b      	strb	r3, [r7, #1]
    uint8_t loraTxBuf[4];
    loraTxBuf[0] = 0x18;
 8001efe:	2318      	movs	r3, #24
 8001f00:	733b      	strb	r3, [r7, #12]
    loraTxBuf[1] = (uint8_t) (((uint16_t) address >> 8) & 0x00FF);
 8001f02:	887b      	ldrh	r3, [r7, #2]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	737b      	strb	r3, [r7, #13]
    loraTxBuf[2] = (uint8_t) ((uint16_t) address & 0x00FF);
 8001f0c:	887b      	ldrh	r3, [r7, #2]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	73bb      	strb	r3, [r7, #14]
    loraTxBuf[3] = data;
 8001f12:	787b      	ldrb	r3, [r7, #1]
 8001f14:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8001f16:	f107 030c 	add.w	r3, r7, #12
 8001f1a:	2204      	movs	r2, #4
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff fd94 	bl	8001a4c <sxSpiTransmit>
}
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f34:	4a14      	ldr	r2, [pc, #80]	; (8001f88 <_sbrk+0x5c>)
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <_sbrk+0x60>)
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d102      	bne.n	8001f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <_sbrk+0x64>)
 8001f4a:	4a12      	ldr	r2, [pc, #72]	; (8001f94 <_sbrk+0x68>)
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <_sbrk+0x64>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d207      	bcs.n	8001f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f5c:	f007 ff42 	bl	8009de4 <__errno>
 8001f60:	4602      	mov	r2, r0
 8001f62:	230c      	movs	r3, #12
 8001f64:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6a:	e009      	b.n	8001f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <_sbrk+0x64>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <_sbrk+0x64>)
 8001f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20020000 	.word	0x20020000
 8001f8c:	00000400 	.word	0x00000400
 8001f90:	20000374 	.word	0x20000374
 8001f94:	20001dd8 	.word	0x20001dd8

08001f98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f9c:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <SystemInit+0x28>)
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa2:	4a07      	ldr	r2, [pc, #28]	; (8001fc0 <SystemInit+0x28>)
 8001fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <SystemInit+0x28>)
 8001fae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fb2:	609a      	str	r2, [r3, #8]
#endif
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000ed00 	.word	0xe000ed00
 8001fc4:	00000000 	.word	0x00000000

08001fc8 <decode_TLM>:
    else {
        enc->debug_ranging = dec->debug;
    }
}

void decode_TLM(TLM_encoded *enc, TLM_decoded *dec) {
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
    dec->packet_type = enc->packet_state_bits & 1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	701a      	strb	r2, [r3, #0]
    dec->flight_state = (enc->packet_state_bits >> 1) & 0b00011111;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	085b      	lsrs	r3, r3, #1
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	705a      	strb	r2, [r3, #1]
    dec->is_playing_music = (enc->packet_state_bits >> 6) & 1;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	099b      	lsrs	r3, r3, #6
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	709a      	strb	r2, [r3, #2]
    dec->is_data_logging = (enc->packet_state_bits >> 7) & 1;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	09db      	lsrs	r3, r3, #7
 800200a:	b2da      	uxtb	r2, r3
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	70da      	strb	r2, [r3, #3]

    dec->pin_states = (enc->pin_states_servo & 0b00111111);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	785b      	ldrb	r3, [r3, #1]
 8002014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002018:	b2da      	uxtb	r2, r3
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	711a      	strb	r2, [r3, #4]
    dec->servo_state = (enc->pin_states_servo >> 6) & 0b00000011;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	785b      	ldrb	r3, [r3, #1]
 8002022:	099b      	lsrs	r3, r3, #6
 8002024:	b2da      	uxtb	r2, r3
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	715a      	strb	r2, [r3, #5]

    dec->systick = (enc->systick[0] << 16) | (enc->systick[1] << 8) | (enc->systick[2]);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	789b      	ldrb	r3, [r3, #2]
 800202e:	041a      	lsls	r2, r3, #16
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	78db      	ldrb	r3, [r3, #3]
 8002034:	021b      	lsls	r3, r3, #8
 8002036:	4313      	orrs	r3, r2
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	7912      	ldrb	r2, [r2, #4]
 800203c:	4313      	orrs	r3, r2
 800203e:	461a      	mov	r2, r3
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	609a      	str	r2, [r3, #8]

    dec->vbat = ((float) enc->vbat)* 0.05;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	795b      	ldrb	r3, [r3, #5]
 8002048:	ee07 3a90 	vmov	s15, r3
 800204c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002050:	ee17 0a90 	vmov	r0, s15
 8002054:	f7fe fa80 	bl	8000558 <__aeabi_f2d>
 8002058:	a366      	add	r3, pc, #408	; (adr r3, 80021f4 <decode_TLM+0x22c>)
 800205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205e:	f7fe fad3 	bl	8000608 <__aeabi_dmul>
 8002062:	4603      	mov	r3, r0
 8002064:	460c      	mov	r4, r1
 8002066:	4618      	mov	r0, r3
 8002068:	4621      	mov	r1, r4
 800206a:	f7fe fda5 	bl	8000bb8 <__aeabi_d2f>
 800206e:	4602      	mov	r2, r0
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	60da      	str	r2, [r3, #12]

    dec->orientation_quat[0] = ((float) enc->orientation_quat[0])/127;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800207a:	ee07 3a90 	vmov	s15, r3
 800207e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002082:	eddf 6a59 	vldr	s13, [pc, #356]	; 80021e8 <decode_TLM+0x220>
 8002086:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	edc3 7a04 	vstr	s15, [r3, #16]
    dec->orientation_quat[1] = ((float) enc->orientation_quat[1])/127;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8002096:	ee07 3a90 	vmov	s15, r3
 800209a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800209e:	eddf 6a52 	vldr	s13, [pc, #328]	; 80021e8 <decode_TLM+0x220>
 80020a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	edc3 7a05 	vstr	s15, [r3, #20]
    dec->orientation_quat[2] = ((float) enc->orientation_quat[2])/127;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80020b2:	ee07 3a90 	vmov	s15, r3
 80020b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ba:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80021e8 <decode_TLM+0x220>
 80020be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	edc3 7a06 	vstr	s15, [r3, #24]
    dec->orientation_quat[3] = ((float) enc->orientation_quat[3])/127;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80020ce:	ee07 3a90 	vmov	s15, r3
 80020d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020d6:	eddf 6a44 	vldr	s13, [pc, #272]	; 80021e8 <decode_TLM+0x220>
 80020da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	edc3 7a07 	vstr	s15, [r3, #28]

    for (int i = 0; i < 3; i++) {
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	e01a      	b.n	8002120 <decode_TLM+0x158>
        dec->acc[i] = enc->acc[i];
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	3304      	adds	r3, #4
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	3210      	adds	r2, #16
 80020fe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        dec->gyro[i] = enc->gyro[i];
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	3208      	adds	r2, #8
 8002108:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3310      	adds	r3, #16
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4413      	add	r3, r2
 8002116:	460a      	mov	r2, r1
 8002118:	80da      	strh	r2, [r3, #6]
    for (int i = 0; i < 3; i++) {
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	3301      	adds	r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b02      	cmp	r3, #2
 8002124:	dde1      	ble.n	80020ea <decode_TLM+0x122>
    }

    dec->baro = (float) (enc->baro + 50000);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	8adb      	ldrh	r3, [r3, #22]
 800212a:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800212e:	3350      	adds	r3, #80	; 0x50
 8002130:	ee07 3a90 	vmov	s15, r3
 8002134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    dec->temp = ((float) enc->temp)/4;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	7e1b      	ldrb	r3, [r3, #24]
 8002142:	ee07 3a90 	vmov	s15, r3
 8002146:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800214a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800214e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    dec->altitude = ((float) enc->altitude) * 0.0625 - 48;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	8b5b      	ldrh	r3, [r3, #26]
 800215c:	ee07 3a90 	vmov	s15, r3
 8002160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002164:	ee17 0a90 	vmov	r0, s15
 8002168:	f7fe f9f6 	bl	8000558 <__aeabi_f2d>
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <decode_TLM+0x224>)
 8002172:	f7fe fa49 	bl	8000608 <__aeabi_dmul>
 8002176:	4603      	mov	r3, r0
 8002178:	460c      	mov	r4, r1
 800217a:	4618      	mov	r0, r3
 800217c:	4621      	mov	r1, r4
 800217e:	f04f 0200 	mov.w	r2, #0
 8002182:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <decode_TLM+0x228>)
 8002184:	f7fe f888 	bl	8000298 <__aeabi_dsub>
 8002188:	4603      	mov	r3, r0
 800218a:	460c      	mov	r4, r1
 800218c:	4618      	mov	r0, r3
 800218e:	4621      	mov	r1, r4
 8002190:	f7fe fd12 	bl	8000bb8 <__aeabi_d2f>
 8002194:	4602      	mov	r2, r0
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	635a      	str	r2, [r3, #52]	; 0x34

    dec->vertical_velocity = (float) (enc->vertical_velocity - 80);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7f1b      	ldrb	r3, [r3, #28]
 800219e:	3b50      	subs	r3, #80	; 0x50
 80021a0:	ee07 3a90 	vmov	s15, r3
 80021a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    if (dec->packet_type == 1) {
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d10d      	bne.n	80021d2 <decode_TLM+0x20a>
        dec->ranging = ((float) enc->debug_ranging) * 0.25;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	8bdb      	ldrh	r3, [r3, #30]
 80021ba:	ee07 3a90 	vmov	s15, r3
 80021be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021c2:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80021c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    }
    else {
        dec->debug = (uint16_t) enc->debug_ranging;
    }
}
 80021d0:	e003      	b.n	80021da <decode_TLM+0x212>
        dec->debug = (uint16_t) enc->debug_ranging;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	8bda      	ldrh	r2, [r3, #30]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd90      	pop	{r4, r7, pc}
 80021e2:	bf00      	nop
 80021e4:	f3af 8000 	nop.w
 80021e8:	42fe0000 	.word	0x42fe0000
 80021ec:	3fb00000 	.word	0x3fb00000
 80021f0:	40480000 	.word	0x40480000
 80021f4:	9999999a 	.word	0x9999999a
 80021f8:	3fa99999 	.word	0x3fa99999

080021fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002234 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002200:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002202:	e003      	b.n	800220c <LoopCopyDataInit>

08002204 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002204:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002206:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002208:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800220a:	3104      	adds	r1, #4

0800220c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800220c:	480b      	ldr	r0, [pc, #44]	; (800223c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002210:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002212:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002214:	d3f6      	bcc.n	8002204 <CopyDataInit>
  ldr  r2, =_sbss
 8002216:	4a0b      	ldr	r2, [pc, #44]	; (8002244 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002218:	e002      	b.n	8002220 <LoopFillZerobss>

0800221a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800221a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800221c:	f842 3b04 	str.w	r3, [r2], #4

08002220 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002220:	4b09      	ldr	r3, [pc, #36]	; (8002248 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002222:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002224:	d3f9      	bcc.n	800221a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002226:	f7ff feb7 	bl	8001f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800222a:	f007 fde1 	bl	8009df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800222e:	f7fe ff77 	bl	8001120 <main>
  bx  lr    
 8002232:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002234:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002238:	0800c308 	.word	0x0800c308
  ldr  r0, =_sdata
 800223c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002240:	20000358 	.word	0x20000358
  ldr  r2, =_sbss
 8002244:	20000358 	.word	0x20000358
  ldr  r3, = _ebss
 8002248:	20001dd8 	.word	0x20001dd8

0800224c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800224c:	e7fe      	b.n	800224c <ADC_IRQHandler>
	...

08002250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002254:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <HAL_Init+0x40>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0d      	ldr	r2, [pc, #52]	; (8002290 <HAL_Init+0x40>)
 800225a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800225e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_Init+0x40>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <HAL_Init+0x40>)
 8002266:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800226a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <HAL_Init+0x40>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a07      	ldr	r2, [pc, #28]	; (8002290 <HAL_Init+0x40>)
 8002272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002276:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002278:	2003      	movs	r0, #3
 800227a:	f000 fbbf 	bl	80029fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800227e:	2000      	movs	r0, #0
 8002280:	f000 f808 	bl	8002294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002284:	f7ff f9f2 	bl	800166c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40023c00 	.word	0x40023c00

08002294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800229c:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <HAL_InitTick+0x54>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b12      	ldr	r3, [pc, #72]	; (80022ec <HAL_InitTick+0x58>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	4619      	mov	r1, r3
 80022a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 fbd7 	bl	8002a66 <HAL_SYSTICK_Config>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e00e      	b.n	80022e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b0f      	cmp	r3, #15
 80022c6:	d80a      	bhi.n	80022de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c8:	2200      	movs	r2, #0
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	f04f 30ff 	mov.w	r0, #4294967295
 80022d0:	f000 fb9f 	bl	8002a12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022d4:	4a06      	ldr	r2, [pc, #24]	; (80022f0 <HAL_InitTick+0x5c>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	e000      	b.n	80022e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000000 	.word	0x20000000
 80022ec:	20000008 	.word	0x20000008
 80022f0:	20000004 	.word	0x20000004

080022f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_IncTick+0x20>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_IncTick+0x24>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4413      	add	r3, r2
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <HAL_IncTick+0x24>)
 8002306:	6013      	str	r3, [r2, #0]
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000008 	.word	0x20000008
 8002318:	200004f8 	.word	0x200004f8

0800231c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return uwTick;
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <HAL_GetTick+0x14>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	200004f8 	.word	0x200004f8

08002334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7ff ffee 	bl	800231c <HAL_GetTick>
 8002340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d005      	beq.n	800235a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HAL_Delay+0x40>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4413      	add	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800235a:	bf00      	nop
 800235c:	f7ff ffde 	bl	800231c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	429a      	cmp	r2, r3
 800236a:	d8f7      	bhi.n	800235c <HAL_Delay+0x28>
  {
  }
}
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000008 	.word	0x20000008

08002378 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e033      	b.n	80023f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff f990 	bl	80016bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d118      	bne.n	80023e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023be:	f023 0302 	bic.w	r3, r3, #2
 80023c2:	f043 0202 	orr.w	r2, r3, #2
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f94a 	bl	8002664 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f023 0303 	bic.w	r3, r3, #3
 80023de:	f043 0201 	orr.w	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40
 80023e6:	e001      	b.n	80023ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_ADC_ConfigChannel+0x1c>
 8002418:	2302      	movs	r3, #2
 800241a:	e113      	b.n	8002644 <HAL_ADC_ConfigChannel+0x244>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b09      	cmp	r3, #9
 800242a:	d925      	bls.n	8002478 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68d9      	ldr	r1, [r3, #12]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	461a      	mov	r2, r3
 800243a:	4613      	mov	r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4413      	add	r3, r2
 8002440:	3b1e      	subs	r3, #30
 8002442:	2207      	movs	r2, #7
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43da      	mvns	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	400a      	ands	r2, r1
 8002450:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68d9      	ldr	r1, [r3, #12]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	b29b      	uxth	r3, r3
 8002462:	4618      	mov	r0, r3
 8002464:	4603      	mov	r3, r0
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4403      	add	r3, r0
 800246a:	3b1e      	subs	r3, #30
 800246c:	409a      	lsls	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	e022      	b.n	80024be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6919      	ldr	r1, [r3, #16]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	4613      	mov	r3, r2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4413      	add	r3, r2
 800248c:	2207      	movs	r2, #7
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43da      	mvns	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	400a      	ands	r2, r1
 800249a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6919      	ldr	r1, [r3, #16]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	4618      	mov	r0, r3
 80024ae:	4603      	mov	r3, r0
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	4403      	add	r3, r0
 80024b4:	409a      	lsls	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b06      	cmp	r3, #6
 80024c4:	d824      	bhi.n	8002510 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	3b05      	subs	r3, #5
 80024d8:	221f      	movs	r2, #31
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43da      	mvns	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	400a      	ands	r2, r1
 80024e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	4618      	mov	r0, r3
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	3b05      	subs	r3, #5
 8002502:	fa00 f203 	lsl.w	r2, r0, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	635a      	str	r2, [r3, #52]	; 0x34
 800250e:	e04c      	b.n	80025aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b0c      	cmp	r3, #12
 8002516:	d824      	bhi.n	8002562 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	3b23      	subs	r3, #35	; 0x23
 800252a:	221f      	movs	r2, #31
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43da      	mvns	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	400a      	ands	r2, r1
 8002538:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	b29b      	uxth	r3, r3
 8002546:	4618      	mov	r0, r3
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	3b23      	subs	r3, #35	; 0x23
 8002554:	fa00 f203 	lsl.w	r2, r0, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
 8002560:	e023      	b.n	80025aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	3b41      	subs	r3, #65	; 0x41
 8002574:	221f      	movs	r2, #31
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43da      	mvns	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	400a      	ands	r2, r1
 8002582:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	b29b      	uxth	r3, r3
 8002590:	4618      	mov	r0, r3
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	3b41      	subs	r3, #65	; 0x41
 800259e:	fa00 f203 	lsl.w	r2, r0, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025aa:	4b29      	ldr	r3, [pc, #164]	; (8002650 <HAL_ADC_ConfigChannel+0x250>)
 80025ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a28      	ldr	r2, [pc, #160]	; (8002654 <HAL_ADC_ConfigChannel+0x254>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d10f      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x1d8>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b12      	cmp	r3, #18
 80025be:	d10b      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a1d      	ldr	r2, [pc, #116]	; (8002654 <HAL_ADC_ConfigChannel+0x254>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d12b      	bne.n	800263a <HAL_ADC_ConfigChannel+0x23a>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a1c      	ldr	r2, [pc, #112]	; (8002658 <HAL_ADC_ConfigChannel+0x258>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d003      	beq.n	80025f4 <HAL_ADC_ConfigChannel+0x1f4>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b11      	cmp	r3, #17
 80025f2:	d122      	bne.n	800263a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a11      	ldr	r2, [pc, #68]	; (8002658 <HAL_ADC_ConfigChannel+0x258>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d111      	bne.n	800263a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <HAL_ADC_ConfigChannel+0x25c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a11      	ldr	r2, [pc, #68]	; (8002660 <HAL_ADC_ConfigChannel+0x260>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	0c9a      	lsrs	r2, r3, #18
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800262c:	e002      	b.n	8002634 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	3b01      	subs	r3, #1
 8002632:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f9      	bne.n	800262e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	40012300 	.word	0x40012300
 8002654:	40012000 	.word	0x40012000
 8002658:	10000012 	.word	0x10000012
 800265c:	20000000 	.word	0x20000000
 8002660:	431bde83 	.word	0x431bde83

08002664 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800266c:	4b79      	ldr	r3, [pc, #484]	; (8002854 <ADC_Init+0x1f0>)
 800266e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	431a      	orrs	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002698:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6859      	ldr	r1, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	021a      	lsls	r2, r3, #8
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6859      	ldr	r1, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6899      	ldr	r1, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f6:	4a58      	ldr	r2, [pc, #352]	; (8002858 <ADC_Init+0x1f4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d022      	beq.n	8002742 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800270a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6899      	ldr	r1, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800272c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6899      	ldr	r1, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	e00f      	b.n	8002762 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002750:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002760:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0202 	bic.w	r2, r2, #2
 8002770:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6899      	ldr	r1, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	7e1b      	ldrb	r3, [r3, #24]
 800277c:	005a      	lsls	r2, r3, #1
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3020 	ldrb.w	r3, [r3, #32]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d01b      	beq.n	80027c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800279e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6859      	ldr	r1, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	3b01      	subs	r3, #1
 80027bc:	035a      	lsls	r2, r3, #13
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	e007      	b.n	80027d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	051a      	lsls	r2, r3, #20
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800280c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6899      	ldr	r1, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800281a:	025a      	lsls	r2, r3, #9
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002832:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6899      	ldr	r1, [r3, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	029a      	lsls	r2, r3, #10
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	609a      	str	r2, [r3, #8]
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	40012300 	.word	0x40012300
 8002858:	0f000001 	.word	0x0f000001

0800285c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <__NVIC_SetPriorityGrouping+0x44>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002878:	4013      	ands	r3, r2
 800287a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800288c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800288e:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	60d3      	str	r3, [r2, #12]
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a8:	4b04      	ldr	r3, [pc, #16]	; (80028bc <__NVIC_GetPriorityGrouping+0x18>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	0a1b      	lsrs	r3, r3, #8
 80028ae:	f003 0307 	and.w	r3, r3, #7
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	db0b      	blt.n	80028ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	f003 021f 	and.w	r2, r3, #31
 80028d8:	4907      	ldr	r1, [pc, #28]	; (80028f8 <__NVIC_EnableIRQ+0x38>)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	2001      	movs	r0, #1
 80028e2:	fa00 f202 	lsl.w	r2, r0, r2
 80028e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	e000e100 	.word	0xe000e100

080028fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	6039      	str	r1, [r7, #0]
 8002906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290c:	2b00      	cmp	r3, #0
 800290e:	db0a      	blt.n	8002926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	b2da      	uxtb	r2, r3
 8002914:	490c      	ldr	r1, [pc, #48]	; (8002948 <__NVIC_SetPriority+0x4c>)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	0112      	lsls	r2, r2, #4
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	440b      	add	r3, r1
 8002920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002924:	e00a      	b.n	800293c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	b2da      	uxtb	r2, r3
 800292a:	4908      	ldr	r1, [pc, #32]	; (800294c <__NVIC_SetPriority+0x50>)
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	3b04      	subs	r3, #4
 8002934:	0112      	lsls	r2, r2, #4
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	440b      	add	r3, r1
 800293a:	761a      	strb	r2, [r3, #24]
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	e000e100 	.word	0xe000e100
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002950:	b480      	push	{r7}
 8002952:	b089      	sub	sp, #36	; 0x24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f1c3 0307 	rsb	r3, r3, #7
 800296a:	2b04      	cmp	r3, #4
 800296c:	bf28      	it	cs
 800296e:	2304      	movcs	r3, #4
 8002970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3304      	adds	r3, #4
 8002976:	2b06      	cmp	r3, #6
 8002978:	d902      	bls.n	8002980 <NVIC_EncodePriority+0x30>
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3b03      	subs	r3, #3
 800297e:	e000      	b.n	8002982 <NVIC_EncodePriority+0x32>
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002984:	f04f 32ff 	mov.w	r2, #4294967295
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43da      	mvns	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	401a      	ands	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002998:	f04f 31ff 	mov.w	r1, #4294967295
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	fa01 f303 	lsl.w	r3, r1, r3
 80029a2:	43d9      	mvns	r1, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a8:	4313      	orrs	r3, r2
         );
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3724      	adds	r7, #36	; 0x24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029c8:	d301      	bcc.n	80029ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ca:	2301      	movs	r3, #1
 80029cc:	e00f      	b.n	80029ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ce:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <SysTick_Config+0x40>)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029d6:	210f      	movs	r1, #15
 80029d8:	f04f 30ff 	mov.w	r0, #4294967295
 80029dc:	f7ff ff8e 	bl	80028fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <SysTick_Config+0x40>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029e6:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <SysTick_Config+0x40>)
 80029e8:	2207      	movs	r2, #7
 80029ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	e000e010 	.word	0xe000e010

080029fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff ff29 	bl	800285c <__NVIC_SetPriorityGrouping>
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b086      	sub	sp, #24
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	4603      	mov	r3, r0
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
 8002a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a24:	f7ff ff3e 	bl	80028a4 <__NVIC_GetPriorityGrouping>
 8002a28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	68b9      	ldr	r1, [r7, #8]
 8002a2e:	6978      	ldr	r0, [r7, #20]
 8002a30:	f7ff ff8e 	bl	8002950 <NVIC_EncodePriority>
 8002a34:	4602      	mov	r2, r0
 8002a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff ff5d 	bl	80028fc <__NVIC_SetPriority>
}
 8002a42:	bf00      	nop
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	4603      	mov	r3, r0
 8002a52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff31 	bl	80028c0 <__NVIC_EnableIRQ>
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff ffa2 	bl	80029b8 <SysTick_Config>
 8002a74:	4603      	mov	r3, r0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b089      	sub	sp, #36	; 0x24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
 8002a9a:	e159      	b.n	8002d50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4013      	ands	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	f040 8148 	bne.w	8002d4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d00b      	beq.n	8002ada <HAL_GPIO_Init+0x5a>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d007      	beq.n	8002ada <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ace:	2b11      	cmp	r3, #17
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b12      	cmp	r3, #18
 8002ad8:	d130      	bne.n	8002b3c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b10:	2201      	movs	r2, #1
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 0201 	and.w	r2, r3, #1
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	2203      	movs	r2, #3
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d003      	beq.n	8002b7c <HAL_GPIO_Init+0xfc>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b12      	cmp	r3, #18
 8002b7a:	d123      	bne.n	8002bc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	08da      	lsrs	r2, r3, #3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3208      	adds	r2, #8
 8002b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	220f      	movs	r2, #15
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	08da      	lsrs	r2, r3, #3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3208      	adds	r2, #8
 8002bbe:	69b9      	ldr	r1, [r7, #24]
 8002bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	2203      	movs	r2, #3
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 0203 	and.w	r2, r3, #3
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80a2 	beq.w	8002d4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	4b56      	ldr	r3, [pc, #344]	; (8002d64 <HAL_GPIO_Init+0x2e4>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	4a55      	ldr	r2, [pc, #340]	; (8002d64 <HAL_GPIO_Init+0x2e4>)
 8002c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c14:	6453      	str	r3, [r2, #68]	; 0x44
 8002c16:	4b53      	ldr	r3, [pc, #332]	; (8002d64 <HAL_GPIO_Init+0x2e4>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c22:	4a51      	ldr	r2, [pc, #324]	; (8002d68 <HAL_GPIO_Init+0x2e8>)
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	089b      	lsrs	r3, r3, #2
 8002c28:	3302      	adds	r3, #2
 8002c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	220f      	movs	r2, #15
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4013      	ands	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a48      	ldr	r2, [pc, #288]	; (8002d6c <HAL_GPIO_Init+0x2ec>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d019      	beq.n	8002c82 <HAL_GPIO_Init+0x202>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a47      	ldr	r2, [pc, #284]	; (8002d70 <HAL_GPIO_Init+0x2f0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d013      	beq.n	8002c7e <HAL_GPIO_Init+0x1fe>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a46      	ldr	r2, [pc, #280]	; (8002d74 <HAL_GPIO_Init+0x2f4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00d      	beq.n	8002c7a <HAL_GPIO_Init+0x1fa>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a45      	ldr	r2, [pc, #276]	; (8002d78 <HAL_GPIO_Init+0x2f8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d007      	beq.n	8002c76 <HAL_GPIO_Init+0x1f6>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a44      	ldr	r2, [pc, #272]	; (8002d7c <HAL_GPIO_Init+0x2fc>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d101      	bne.n	8002c72 <HAL_GPIO_Init+0x1f2>
 8002c6e:	2304      	movs	r3, #4
 8002c70:	e008      	b.n	8002c84 <HAL_GPIO_Init+0x204>
 8002c72:	2307      	movs	r3, #7
 8002c74:	e006      	b.n	8002c84 <HAL_GPIO_Init+0x204>
 8002c76:	2303      	movs	r3, #3
 8002c78:	e004      	b.n	8002c84 <HAL_GPIO_Init+0x204>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e002      	b.n	8002c84 <HAL_GPIO_Init+0x204>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <HAL_GPIO_Init+0x204>
 8002c82:	2300      	movs	r3, #0
 8002c84:	69fa      	ldr	r2, [r7, #28]
 8002c86:	f002 0203 	and.w	r2, r2, #3
 8002c8a:	0092      	lsls	r2, r2, #2
 8002c8c:	4093      	lsls	r3, r2
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c94:	4934      	ldr	r1, [pc, #208]	; (8002d68 <HAL_GPIO_Init+0x2e8>)
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	089b      	lsrs	r3, r3, #2
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ca2:	4b37      	ldr	r3, [pc, #220]	; (8002d80 <HAL_GPIO_Init+0x300>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cc6:	4a2e      	ldr	r2, [pc, #184]	; (8002d80 <HAL_GPIO_Init+0x300>)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ccc:	4b2c      	ldr	r3, [pc, #176]	; (8002d80 <HAL_GPIO_Init+0x300>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cf0:	4a23      	ldr	r2, [pc, #140]	; (8002d80 <HAL_GPIO_Init+0x300>)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cf6:	4b22      	ldr	r3, [pc, #136]	; (8002d80 <HAL_GPIO_Init+0x300>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d1a:	4a19      	ldr	r2, [pc, #100]	; (8002d80 <HAL_GPIO_Init+0x300>)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d20:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <HAL_GPIO_Init+0x300>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d44:	4a0e      	ldr	r2, [pc, #56]	; (8002d80 <HAL_GPIO_Init+0x300>)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	2b0f      	cmp	r3, #15
 8002d54:	f67f aea2 	bls.w	8002a9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d58:	bf00      	nop
 8002d5a:	3724      	adds	r7, #36	; 0x24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	40023800 	.word	0x40023800
 8002d68:	40013800 	.word	0x40013800
 8002d6c:	40020000 	.word	0x40020000
 8002d70:	40020400 	.word	0x40020400
 8002d74:	40020800 	.word	0x40020800
 8002d78:	40020c00 	.word	0x40020c00
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40013c00 	.word	0x40013c00

08002d84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	887b      	ldrh	r3, [r7, #2]
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	73fb      	strb	r3, [r7, #15]
 8002da0:	e001      	b.n	8002da6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002da2:	2300      	movs	r3, #0
 8002da4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	807b      	strh	r3, [r7, #2]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dc4:	787b      	ldrb	r3, [r7, #1]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dca:	887a      	ldrh	r2, [r7, #2]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dd0:	e003      	b.n	8002dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dd2:	887b      	ldrh	r3, [r7, #2]
 8002dd4:	041a      	lsls	r2, r3, #16
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	619a      	str	r2, [r3, #24]
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	460b      	mov	r3, r1
 8002df0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695a      	ldr	r2, [r3, #20]
 8002df6:	887b      	ldrh	r3, [r7, #2]
 8002df8:	401a      	ands	r2, r3
 8002dfa:	887b      	ldrh	r3, [r7, #2]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d104      	bne.n	8002e0a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e00:	887b      	ldrh	r3, [r7, #2]
 8002e02:	041a      	lsls	r2, r3, #16
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002e08:	e002      	b.n	8002e10 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002e0a:	887a      	ldrh	r2, [r7, #2]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	619a      	str	r2, [r3, #24]
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e11f      	b.n	800306e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fe fc7e 	bl	8001744 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2224      	movs	r2, #36	; 0x24
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0201 	bic.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e80:	f001 fec2 	bl	8004c08 <HAL_RCC_GetPCLK1Freq>
 8002e84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4a7b      	ldr	r2, [pc, #492]	; (8003078 <HAL_I2C_Init+0x25c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d807      	bhi.n	8002ea0 <HAL_I2C_Init+0x84>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4a7a      	ldr	r2, [pc, #488]	; (800307c <HAL_I2C_Init+0x260>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	bf94      	ite	ls
 8002e98:	2301      	movls	r3, #1
 8002e9a:	2300      	movhi	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	e006      	b.n	8002eae <HAL_I2C_Init+0x92>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4a77      	ldr	r2, [pc, #476]	; (8003080 <HAL_I2C_Init+0x264>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	bf94      	ite	ls
 8002ea8:	2301      	movls	r3, #1
 8002eaa:	2300      	movhi	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e0db      	b.n	800306e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4a72      	ldr	r2, [pc, #456]	; (8003084 <HAL_I2C_Init+0x268>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	0c9b      	lsrs	r3, r3, #18
 8002ec0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4a64      	ldr	r2, [pc, #400]	; (8003078 <HAL_I2C_Init+0x25c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d802      	bhi.n	8002ef0 <HAL_I2C_Init+0xd4>
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	3301      	adds	r3, #1
 8002eee:	e009      	b.n	8002f04 <HAL_I2C_Init+0xe8>
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	4a63      	ldr	r2, [pc, #396]	; (8003088 <HAL_I2C_Init+0x26c>)
 8002efc:	fba2 2303 	umull	r2, r3, r2, r3
 8002f00:	099b      	lsrs	r3, r3, #6
 8002f02:	3301      	adds	r3, #1
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	4956      	ldr	r1, [pc, #344]	; (8003078 <HAL_I2C_Init+0x25c>)
 8002f20:	428b      	cmp	r3, r1
 8002f22:	d80d      	bhi.n	8002f40 <HAL_I2C_Init+0x124>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1e59      	subs	r1, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f32:	3301      	adds	r3, #1
 8002f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	bf38      	it	cc
 8002f3c:	2304      	movcc	r3, #4
 8002f3e:	e04f      	b.n	8002fe0 <HAL_I2C_Init+0x1c4>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d111      	bne.n	8002f6c <HAL_I2C_Init+0x150>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1e58      	subs	r0, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6859      	ldr	r1, [r3, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	440b      	add	r3, r1
 8002f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	e012      	b.n	8002f92 <HAL_I2C_Init+0x176>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	1e58      	subs	r0, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	0099      	lsls	r1, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f82:	3301      	adds	r3, #1
 8002f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_I2C_Init+0x17e>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e022      	b.n	8002fe0 <HAL_I2C_Init+0x1c4>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10e      	bne.n	8002fc0 <HAL_I2C_Init+0x1a4>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1e58      	subs	r0, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6859      	ldr	r1, [r3, #4]
 8002faa:	460b      	mov	r3, r1
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	440b      	add	r3, r1
 8002fb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fbe:	e00f      	b.n	8002fe0 <HAL_I2C_Init+0x1c4>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	1e58      	subs	r0, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6859      	ldr	r1, [r3, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	0099      	lsls	r1, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	6809      	ldr	r1, [r1, #0]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69da      	ldr	r2, [r3, #28]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800300e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6911      	ldr	r1, [r2, #16]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	68d2      	ldr	r2, [r2, #12]
 800301a:	4311      	orrs	r1, r2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	430b      	orrs	r3, r1
 8003022:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695a      	ldr	r2, [r3, #20]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	000186a0 	.word	0x000186a0
 800307c:	001e847f 	.word	0x001e847f
 8003080:	003d08ff 	.word	0x003d08ff
 8003084:	431bde83 	.word	0x431bde83
 8003088:	10624dd3 	.word	0x10624dd3

0800308c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800308c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800308e:	b08f      	sub	sp, #60	; 0x3c
 8003090:	af0a      	add	r7, sp, #40	; 0x28
 8003092:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e10f      	b.n	80032be <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d106      	bne.n	80030be <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f006 fba1 	bl	8009800 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2203      	movs	r2, #3
 80030c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d102      	bne.n	80030d8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f003 fb5a 	bl	8006796 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	687e      	ldr	r6, [r7, #4]
 80030ea:	466d      	mov	r5, sp
 80030ec:	f106 0410 	add.w	r4, r6, #16
 80030f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003100:	1d33      	adds	r3, r6, #4
 8003102:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003104:	6838      	ldr	r0, [r7, #0]
 8003106:	f003 fa31 	bl	800656c <USB_CoreInit>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0d0      	b.n	80032be <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2100      	movs	r1, #0
 8003122:	4618      	mov	r0, r3
 8003124:	f003 fb48 	bl	80067b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003128:	2300      	movs	r3, #0
 800312a:	73fb      	strb	r3, [r7, #15]
 800312c:	e04a      	b.n	80031c4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800312e:	7bfa      	ldrb	r2, [r7, #15]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	333d      	adds	r3, #61	; 0x3d
 800313e:	2201      	movs	r2, #1
 8003140:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003142:	7bfa      	ldrb	r2, [r7, #15]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	333c      	adds	r3, #60	; 0x3c
 8003152:	7bfa      	ldrb	r2, [r7, #15]
 8003154:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003156:	7bfa      	ldrb	r2, [r7, #15]
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	b298      	uxth	r0, r3
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	3342      	adds	r3, #66	; 0x42
 800316a:	4602      	mov	r2, r0
 800316c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800316e:	7bfa      	ldrb	r2, [r7, #15]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	333f      	adds	r3, #63	; 0x3f
 800317e:	2200      	movs	r2, #0
 8003180:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003182:	7bfa      	ldrb	r2, [r7, #15]
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	3344      	adds	r3, #68	; 0x44
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003196:	7bfa      	ldrb	r2, [r7, #15]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	3348      	adds	r3, #72	; 0x48
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031aa:	7bfa      	ldrb	r2, [r7, #15]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	3350      	adds	r3, #80	; 0x50
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	3301      	adds	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
 80031c4:	7bfa      	ldrb	r2, [r7, #15]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d3af      	bcc.n	800312e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ce:	2300      	movs	r3, #0
 80031d0:	73fb      	strb	r3, [r7, #15]
 80031d2:	e044      	b.n	800325e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031d4:	7bfa      	ldrb	r2, [r7, #15]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80031e6:	2200      	movs	r2, #0
 80031e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031ea:	7bfa      	ldrb	r2, [r7, #15]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80031fc:	7bfa      	ldrb	r2, [r7, #15]
 80031fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003200:	7bfa      	ldrb	r2, [r7, #15]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003212:	2200      	movs	r2, #0
 8003214:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003216:	7bfa      	ldrb	r2, [r7, #15]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800322c:	7bfa      	ldrb	r2, [r7, #15]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003242:	7bfa      	ldrb	r2, [r7, #15]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	3301      	adds	r3, #1
 800325c:	73fb      	strb	r3, [r7, #15]
 800325e:	7bfa      	ldrb	r2, [r7, #15]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	429a      	cmp	r2, r3
 8003266:	d3b5      	bcc.n	80031d4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	603b      	str	r3, [r7, #0]
 800326e:	687e      	ldr	r6, [r7, #4]
 8003270:	466d      	mov	r5, sp
 8003272:	f106 0410 	add.w	r4, r6, #16
 8003276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003278:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800327a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800327c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800327e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003282:	e885 0003 	stmia.w	r5, {r0, r1}
 8003286:	1d33      	adds	r3, r6, #4
 8003288:	cb0e      	ldmia	r3, {r1, r2, r3}
 800328a:	6838      	ldr	r0, [r7, #0]
 800328c:	f003 fabe 	bl	800680c <USB_DevInit>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d005      	beq.n	80032a2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2202      	movs	r2, #2
 800329a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e00d      	b.n	80032be <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f004 fb06 	bl	80078c8 <USB_DevDisconnect>

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b084      	sub	sp, #16
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_PCD_Start+0x1c>
 80032de:	2302      	movs	r3, #2
 80032e0:	e020      	b.n	8003324 <HAL_PCD_Start+0x5e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d109      	bne.n	8003306 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d005      	beq.n	8003306 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f003 fa32 	bl	8006774 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f004 fab6 	bl	8007886 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800332c:	b590      	push	{r4, r7, lr}
 800332e:	b08d      	sub	sp, #52	; 0x34
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f004 fb74 	bl	8007a30 <USB_GetMode>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	f040 839d 	bne.w	8003a8a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f004 fad8 	bl	800790a <USB_ReadInterrupts>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 8393 	beq.w	8003a88 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f004 facf 	bl	800790a <USB_ReadInterrupts>
 800336c:	4603      	mov	r3, r0
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b02      	cmp	r3, #2
 8003374:	d107      	bne.n	8003386 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695a      	ldr	r2, [r3, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f002 0202 	and.w	r2, r2, #2
 8003384:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f004 fabd 	bl	800790a <USB_ReadInterrupts>
 8003390:	4603      	mov	r3, r0
 8003392:	f003 0310 	and.w	r3, r3, #16
 8003396:	2b10      	cmp	r3, #16
 8003398:	d161      	bne.n	800345e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699a      	ldr	r2, [r3, #24]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0210 	bic.w	r2, r2, #16
 80033a8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	f003 020f 	and.w	r2, r3, #15
 80033b6:	4613      	mov	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	4413      	add	r3, r2
 80033c6:	3304      	adds	r3, #4
 80033c8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	0c5b      	lsrs	r3, r3, #17
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d124      	bne.n	8003420 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d035      	beq.n	800344e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	6a38      	ldr	r0, [r7, #32]
 80033f6:	f004 f923 	bl	8007640 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003406:	441a      	add	r2, r3
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	699a      	ldr	r2, [r3, #24]
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003418:	441a      	add	r2, r3
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	619a      	str	r2, [r3, #24]
 800341e:	e016      	b.n	800344e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	0c5b      	lsrs	r3, r3, #17
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	2b06      	cmp	r3, #6
 800342a:	d110      	bne.n	800344e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003432:	2208      	movs	r2, #8
 8003434:	4619      	mov	r1, r3
 8003436:	6a38      	ldr	r0, [r7, #32]
 8003438:	f004 f902 	bl	8007640 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	699a      	ldr	r2, [r3, #24]
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	091b      	lsrs	r3, r3, #4
 8003444:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003448:	441a      	add	r2, r3
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	699a      	ldr	r2, [r3, #24]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0210 	orr.w	r2, r2, #16
 800345c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f004 fa51 	bl	800790a <USB_ReadInterrupts>
 8003468:	4603      	mov	r3, r0
 800346a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800346e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003472:	d16e      	bne.n	8003552 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f004 fa57 	bl	8007930 <USB_ReadDevAllOutEpInterrupt>
 8003482:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003484:	e062      	b.n	800354c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d057      	beq.n	8003540 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	4611      	mov	r1, r2
 800349a:	4618      	mov	r0, r3
 800349c:	f004 fa7c 	bl	8007998 <USB_ReadDevOutEPInterrupt>
 80034a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00c      	beq.n	80034c6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b8:	461a      	mov	r2, r3
 80034ba:	2301      	movs	r3, #1
 80034bc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80034be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 fdb1 	bl	8004028 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00c      	beq.n	80034ea <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034dc:	461a      	mov	r2, r3
 80034de:	2308      	movs	r3, #8
 80034e0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80034e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 feab 	bl	8004240 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003500:	461a      	mov	r2, r3
 8003502:	2310      	movs	r3, #16
 8003504:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	4413      	add	r3, r2
 8003518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800351c:	461a      	mov	r2, r3
 800351e:	2320      	movs	r3, #32
 8003520:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d009      	beq.n	8003540 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003538:	461a      	mov	r2, r3
 800353a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800353e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	3301      	adds	r3, #1
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003548:	085b      	lsrs	r3, r3, #1
 800354a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800354c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354e:	2b00      	cmp	r3, #0
 8003550:	d199      	bne.n	8003486 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f004 f9d7 	bl	800790a <USB_ReadInterrupts>
 800355c:	4603      	mov	r3, r0
 800355e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003562:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003566:	f040 80c0 	bne.w	80036ea <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f004 f9f8 	bl	8007964 <USB_ReadDevAllInEpInterrupt>
 8003574:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800357a:	e0b2      	b.n	80036e2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800357c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 80a7 	beq.w	80036d6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	4611      	mov	r1, r2
 8003592:	4618      	mov	r0, r3
 8003594:	f004 fa1e 	bl	80079d4 <USB_ReadDevInEPInterrupt>
 8003598:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d057      	beq.n	8003654 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	2201      	movs	r2, #1
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	43db      	mvns	r3, r3
 80035be:	69f9      	ldr	r1, [r7, #28]
 80035c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035c4:	4013      	ands	r3, r2
 80035c6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d4:	461a      	mov	r2, r3
 80035d6:	2301      	movs	r3, #1
 80035d8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d132      	bne.n	8003648 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e6:	4613      	mov	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	3348      	adds	r3, #72	; 0x48
 80035f2:	6819      	ldr	r1, [r3, #0]
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4403      	add	r3, r0
 8003602:	3344      	adds	r3, #68	; 0x44
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4419      	add	r1, r3
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4403      	add	r3, r0
 8003616:	3348      	adds	r3, #72	; 0x48
 8003618:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	2b00      	cmp	r3, #0
 800361e:	d113      	bne.n	8003648 <HAL_PCD_IRQHandler+0x31c>
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003624:	4613      	mov	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	3350      	adds	r3, #80	; 0x50
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d108      	bne.n	8003648 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003640:	461a      	mov	r2, r3
 8003642:	2101      	movs	r1, #1
 8003644:	f004 fa26 	bl	8007a94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	b2db      	uxtb	r3, r3
 800364c:	4619      	mov	r1, r3
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f006 f957 	bl	8009902 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	4413      	add	r3, r2
 8003666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366a:	461a      	mov	r2, r3
 800366c:	2308      	movs	r3, #8
 800366e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b00      	cmp	r3, #0
 8003678:	d008      	beq.n	800368c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	4413      	add	r3, r2
 8003682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003686:	461a      	mov	r2, r3
 8003688:	2310      	movs	r3, #16
 800368a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d008      	beq.n	80036a8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a2:	461a      	mov	r2, r3
 80036a4:	2340      	movs	r3, #64	; 0x40
 80036a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d008      	beq.n	80036c4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036be:	461a      	mov	r2, r3
 80036c0:	2302      	movs	r3, #2
 80036c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fc1b 	bl	8003f0c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	3301      	adds	r3, #1
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	085b      	lsrs	r3, r3, #1
 80036e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f47f af49 	bne.w	800357c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f004 f90b 	bl	800790a <USB_ReadInterrupts>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036fe:	d122      	bne.n	8003746 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800370e:	f023 0301 	bic.w	r3, r3, #1
 8003712:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800371a:	2b01      	cmp	r3, #1
 800371c:	d108      	bne.n	8003730 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003726:	2100      	movs	r1, #0
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 fe27 	bl	800437c <HAL_PCDEx_LPM_Callback>
 800372e:	e002      	b.n	8003736 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f006 f953 	bl	80099dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695a      	ldr	r2, [r3, #20]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003744:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f004 f8dd 	bl	800790a <USB_ReadInterrupts>
 8003750:	4603      	mov	r3, r0
 8003752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800375a:	d112      	bne.n	8003782 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b01      	cmp	r3, #1
 800376a:	d102      	bne.n	8003772 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f006 f90f 	bl	8009990 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003780:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f004 f8bf 	bl	800790a <USB_ReadInterrupts>
 800378c:	4603      	mov	r3, r0
 800378e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003796:	f040 80c7 	bne.w	8003928 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	69fa      	ldr	r2, [r7, #28]
 80037a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2110      	movs	r1, #16
 80037b4:	4618      	mov	r0, r3
 80037b6:	f003 f98d 	bl	8006ad4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ba:	2300      	movs	r3, #0
 80037bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037be:	e056      	b.n	800386e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037cc:	461a      	mov	r2, r3
 80037ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037d2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e4:	0151      	lsls	r1, r2, #5
 80037e6:	69fa      	ldr	r2, [r7, #28]
 80037e8:	440a      	add	r2, r1
 80037ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037f2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80037f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003804:	0151      	lsls	r1, r2, #5
 8003806:	69fa      	ldr	r2, [r7, #28]
 8003808:	440a      	add	r2, r1
 800380a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800380e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003812:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003820:	461a      	mov	r2, r3
 8003822:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003826:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003838:	0151      	lsls	r1, r2, #5
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	440a      	add	r2, r1
 800383e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003842:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003846:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	4413      	add	r3, r2
 8003850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003858:	0151      	lsls	r1, r2, #5
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	440a      	add	r2, r1
 800385e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003862:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003866:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386a:	3301      	adds	r3, #1
 800386c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003874:	429a      	cmp	r2, r3
 8003876:	d3a3      	bcc.n	80037c0 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	69fa      	ldr	r2, [r7, #28]
 8003882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003886:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800388a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	2b00      	cmp	r3, #0
 8003892:	d016      	beq.n	80038c2 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800389a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800389e:	69fa      	ldr	r2, [r7, #28]
 80038a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038a4:	f043 030b 	orr.w	r3, r3, #11
 80038a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ba:	f043 030b 	orr.w	r3, r3, #11
 80038be:	6453      	str	r3, [r2, #68]	; 0x44
 80038c0:	e015      	b.n	80038ee <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038d4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80038d8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e8:	f043 030b 	orr.w	r3, r3, #11
 80038ec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69fa      	ldr	r2, [r7, #28]
 80038f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003900:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6818      	ldr	r0, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003912:	461a      	mov	r2, r3
 8003914:	f004 f8be 	bl	8007a94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003926:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f003 ffec 	bl	800790a <USB_ReadInterrupts>
 8003932:	4603      	mov	r3, r0
 8003934:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003938:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800393c:	d124      	bne.n	8003988 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f004 f882 	bl	8007a4c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f003 f922 	bl	8006b96 <USB_GetDevSpeed>
 8003952:	4603      	mov	r3, r0
 8003954:	461a      	mov	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681c      	ldr	r4, [r3, #0]
 800395e:	f001 f947 	bl	8004bf0 <HAL_RCC_GetHCLKFreq>
 8003962:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003968:	b2db      	uxtb	r3, r3
 800396a:	461a      	mov	r2, r3
 800396c:	4620      	mov	r0, r4
 800396e:	f002 fe5f 	bl	8006630 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f005 ffed 	bl	8009952 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695a      	ldr	r2, [r3, #20]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003986:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f003 ffbc 	bl	800790a <USB_ReadInterrupts>
 8003992:	4603      	mov	r3, r0
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b08      	cmp	r3, #8
 800399a:	d10a      	bne.n	80039b2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f005 ffca 	bl	8009936 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695a      	ldr	r2, [r3, #20]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f002 0208 	and.w	r2, r2, #8
 80039b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f003 ffa7 	bl	800790a <USB_ReadInterrupts>
 80039bc:	4603      	mov	r3, r0
 80039be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039c6:	d10f      	bne.n	80039e8 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	4619      	mov	r1, r3
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f006 f822 	bl	8009a1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695a      	ldr	r2, [r3, #20]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80039e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f003 ff8c 	bl	800790a <USB_ReadInterrupts>
 80039f2:	4603      	mov	r3, r0
 80039f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039fc:	d10f      	bne.n	8003a1e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	4619      	mov	r1, r3
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f005 fff5 	bl	80099f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695a      	ldr	r2, [r3, #20]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f003 ff71 	bl	800790a <USB_ReadInterrupts>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a32:	d10a      	bne.n	8003a4a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f006 f803 	bl	8009a40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f003 ff5b 	bl	800790a <USB_ReadInterrupts>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d115      	bne.n	8003a8a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f005 fff3 	bl	8009a5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6859      	ldr	r1, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	605a      	str	r2, [r3, #4]
 8003a86:	e000      	b.n	8003a8a <HAL_PCD_IRQHandler+0x75e>
      return;
 8003a88:	bf00      	nop
    }
  }
}
 8003a8a:	3734      	adds	r7, #52	; 0x34
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd90      	pop	{r4, r7, pc}

08003a90 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_PCD_SetAddress+0x1a>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e013      	b.n	8003ad2 <HAL_PCD_SetAddress+0x42>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	78fa      	ldrb	r2, [r7, #3]
 8003ab6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	78fa      	ldrb	r2, [r7, #3]
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f003 feb9 	bl	800783a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b084      	sub	sp, #16
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	4608      	mov	r0, r1
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	4603      	mov	r3, r0
 8003aea:	70fb      	strb	r3, [r7, #3]
 8003aec:	460b      	mov	r3, r1
 8003aee:	803b      	strh	r3, [r7, #0]
 8003af0:	4613      	mov	r3, r2
 8003af2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003af8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	da0f      	bge.n	8003b20 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	f003 020f 	and.w	r2, r3, #15
 8003b06:	4613      	mov	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	1a9b      	subs	r3, r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	3338      	adds	r3, #56	; 0x38
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	4413      	add	r3, r2
 8003b14:	3304      	adds	r3, #4
 8003b16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	705a      	strb	r2, [r3, #1]
 8003b1e:	e00f      	b.n	8003b40 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	f003 020f 	and.w	r2, r3, #15
 8003b26:	4613      	mov	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	4413      	add	r3, r2
 8003b36:	3304      	adds	r3, #4
 8003b38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b4c:	883a      	ldrh	r2, [r7, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	78ba      	ldrb	r2, [r7, #2]
 8003b56:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	785b      	ldrb	r3, [r3, #1]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d004      	beq.n	8003b6a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b6a:	78bb      	ldrb	r3, [r7, #2]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d102      	bne.n	8003b76 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_PCD_EP_Open+0xaa>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e00e      	b.n	8003ba2 <HAL_PCD_EP_Open+0xc8>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68f9      	ldr	r1, [r7, #12]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f003 f824 	bl	8006be0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003ba0:	7afb      	ldrb	r3, [r7, #11]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	da0f      	bge.n	8003bde <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	f003 020f 	and.w	r2, r3, #15
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	3338      	adds	r3, #56	; 0x38
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	705a      	strb	r2, [r3, #1]
 8003bdc:	e00f      	b.n	8003bfe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bde:	78fb      	ldrb	r3, [r7, #3]
 8003be0:	f003 020f 	and.w	r2, r3, #15
 8003be4:	4613      	mov	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003bfe:	78fb      	ldrb	r3, [r7, #3]
 8003c00:	f003 030f 	and.w	r3, r3, #15
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_PCD_EP_Close+0x6e>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e00e      	b.n	8003c36 <HAL_PCD_EP_Close+0x8c>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68f9      	ldr	r1, [r7, #12]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f003 f862 	bl	8006cf0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b086      	sub	sp, #24
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	603b      	str	r3, [r7, #0]
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c4e:	7afb      	ldrb	r3, [r7, #11]
 8003c50:	f003 020f 	and.w	r2, r3, #15
 8003c54:	4613      	mov	r3, r2
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	1a9b      	subs	r3, r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4413      	add	r3, r2
 8003c64:	3304      	adds	r3, #4
 8003c66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2200      	movs	r2, #0
 8003c78:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c80:	7afb      	ldrb	r3, [r7, #11]
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d102      	bne.n	8003c9a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c9a:	7afb      	ldrb	r3, [r7, #11]
 8003c9c:	f003 030f 	and.w	r3, r3, #15
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d109      	bne.n	8003cb8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	6979      	ldr	r1, [r7, #20]
 8003cb2:	f003 fb3d 	bl	8007330 <USB_EP0StartXfer>
 8003cb6:	e008      	b.n	8003cca <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6818      	ldr	r0, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	6979      	ldr	r1, [r7, #20]
 8003cc6:	f003 f8ef 	bl	8006ea8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3718      	adds	r7, #24
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ce0:	78fb      	ldrb	r3, [r7, #3]
 8003ce2:	f003 020f 	and.w	r2, r3, #15
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	1a9b      	subs	r3, r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003cf6:	681b      	ldr	r3, [r3, #0]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	460b      	mov	r3, r1
 8003d12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d14:	7afb      	ldrb	r3, [r7, #11]
 8003d16:	f003 020f 	and.w	r2, r3, #15
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	3338      	adds	r3, #56	; 0x38
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4413      	add	r3, r2
 8003d28:	3304      	adds	r3, #4
 8003d2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2201      	movs	r2, #1
 8003d42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d44:	7afb      	ldrb	r3, [r7, #11]
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d102      	bne.n	8003d5e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d5e:	7afb      	ldrb	r3, [r7, #11]
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d109      	bne.n	8003d7c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	461a      	mov	r2, r3
 8003d74:	6979      	ldr	r1, [r7, #20]
 8003d76:	f003 fadb 	bl	8007330 <USB_EP0StartXfer>
 8003d7a:	e008      	b.n	8003d8e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6818      	ldr	r0, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	461a      	mov	r2, r3
 8003d88:	6979      	ldr	r1, [r7, #20]
 8003d8a:	f003 f88d 	bl	8006ea8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	460b      	mov	r3, r1
 8003da2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	f003 020f 	and.w	r2, r3, #15
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d901      	bls.n	8003db6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e050      	b.n	8003e58 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003db6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	da0f      	bge.n	8003dde <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dbe:	78fb      	ldrb	r3, [r7, #3]
 8003dc0:	f003 020f 	and.w	r2, r3, #15
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	1a9b      	subs	r3, r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	3338      	adds	r3, #56	; 0x38
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	705a      	strb	r2, [r3, #1]
 8003ddc:	e00d      	b.n	8003dfa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003dde:	78fa      	ldrb	r2, [r7, #3]
 8003de0:	4613      	mov	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	4413      	add	r3, r2
 8003df0:	3304      	adds	r3, #4
 8003df2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e00:	78fb      	ldrb	r3, [r7, #3]
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d101      	bne.n	8003e1a <HAL_PCD_EP_SetStall+0x82>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e01e      	b.n	8003e58 <HAL_PCD_EP_SetStall+0xc0>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68f9      	ldr	r1, [r7, #12]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f003 fc32 	bl	8007692 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	b2d9      	uxtb	r1, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e48:	461a      	mov	r2, r3
 8003e4a:	f003 fe23 	bl	8007a94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e6c:	78fb      	ldrb	r3, [r7, #3]
 8003e6e:	f003 020f 	and.w	r2, r3, #15
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d901      	bls.n	8003e7e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e042      	b.n	8003f04 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	da0f      	bge.n	8003ea6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e86:	78fb      	ldrb	r3, [r7, #3]
 8003e88:	f003 020f 	and.w	r2, r3, #15
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	1a9b      	subs	r3, r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	3338      	adds	r3, #56	; 0x38
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	4413      	add	r3, r2
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	705a      	strb	r2, [r3, #1]
 8003ea4:	e00f      	b.n	8003ec6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ea6:	78fb      	ldrb	r3, [r7, #3]
 8003ea8:	f003 020f 	and.w	r2, r3, #15
 8003eac:	4613      	mov	r3, r2
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	4413      	add	r3, r2
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_PCD_EP_ClrStall+0x86>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e00e      	b.n	8003f04 <HAL_PCD_EP_ClrStall+0xa4>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68f9      	ldr	r1, [r7, #12]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f003 fc3a 	bl	800776e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08a      	sub	sp, #40	; 0x28
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	4613      	mov	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	3338      	adds	r3, #56	; 0x38
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	4413      	add	r3, r2
 8003f30:	3304      	adds	r3, #4
 8003f32:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	699a      	ldr	r2, [r3, #24]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d901      	bls.n	8003f44 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e06c      	b.n	800401e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	695a      	ldr	r2, [r3, #20]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	69fa      	ldr	r2, [r7, #28]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d902      	bls.n	8003f60 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	3303      	adds	r3, #3
 8003f64:	089b      	lsrs	r3, r3, #2
 8003f66:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f68:	e02b      	b.n	8003fc2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	69fa      	ldr	r2, [r7, #28]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d902      	bls.n	8003f86 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	3303      	adds	r3, #3
 8003f8a:	089b      	lsrs	r3, r3, #2
 8003f8c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	68d9      	ldr	r1, [r3, #12]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	6978      	ldr	r0, [r7, #20]
 8003fa6:	f003 fb16 	bl	80075d6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	441a      	add	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	699a      	ldr	r2, [r3, #24]
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	441a      	add	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d809      	bhi.n	8003fec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	699a      	ldr	r2, [r3, #24]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d203      	bcs.n	8003fec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1be      	bne.n	8003f6a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	695a      	ldr	r2, [r3, #20]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d811      	bhi.n	800401c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	2201      	movs	r2, #1
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800400c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	43db      	mvns	r3, r3
 8004012:	6939      	ldr	r1, [r7, #16]
 8004014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004018:	4013      	ands	r3, r2
 800401a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3720      	adds	r7, #32
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	333c      	adds	r3, #60	; 0x3c
 8004040:	3304      	adds	r3, #4
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	4413      	add	r3, r2
 800404e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	2b01      	cmp	r3, #1
 800405c:	f040 80a0 	bne.w	80041a0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b00      	cmp	r3, #0
 8004068:	d015      	beq.n	8004096 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4a72      	ldr	r2, [pc, #456]	; (8004238 <PCD_EP_OutXfrComplete_int+0x210>)
 800406e:	4293      	cmp	r3, r2
 8004070:	f240 80dd 	bls.w	800422e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 80d7 	beq.w	800422e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408c:	461a      	mov	r2, r3
 800408e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004092:	6093      	str	r3, [r2, #8]
 8004094:	e0cb      	b.n	800422e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b00      	cmp	r3, #0
 800409e:	d009      	beq.n	80040b4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ac:	461a      	mov	r2, r3
 80040ae:	2320      	movs	r3, #32
 80040b0:	6093      	str	r3, [r2, #8]
 80040b2:	e0bc      	b.n	800422e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f040 80b7 	bne.w	800422e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4a5d      	ldr	r2, [pc, #372]	; (8004238 <PCD_EP_OutXfrComplete_int+0x210>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d90f      	bls.n	80040e8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040de:	461a      	mov	r2, r3
 80040e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040e4:	6093      	str	r3, [r2, #8]
 80040e6:	e0a2      	b.n	800422e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	4613      	mov	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	1a9b      	subs	r3, r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040fa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	0159      	lsls	r1, r3, #5
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	440b      	add	r3, r1
 8004104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800410e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	4613      	mov	r3, r2
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	1a9b      	subs	r3, r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4403      	add	r3, r0
 800411e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004122:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	4613      	mov	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	1a9b      	subs	r3, r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004136:	6819      	ldr	r1, [r3, #0]
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	4613      	mov	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	1a9b      	subs	r3, r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4403      	add	r3, r0
 8004146:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4419      	add	r1, r3
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	4613      	mov	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4403      	add	r3, r0
 800415c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004160:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d114      	bne.n	8004192 <PCD_EP_OutXfrComplete_int+0x16a>
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d108      	bne.n	8004192 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800418a:	461a      	mov	r2, r3
 800418c:	2101      	movs	r1, #1
 800418e:	f003 fc81 	bl	8007a94 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	4619      	mov	r1, r3
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f005 fb97 	bl	80098cc <HAL_PCD_DataOutStageCallback>
 800419e:	e046      	b.n	800422e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4a26      	ldr	r2, [pc, #152]	; (800423c <PCD_EP_OutXfrComplete_int+0x214>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d124      	bne.n	80041f2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041be:	461a      	mov	r2, r3
 80041c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041c4:	6093      	str	r3, [r2, #8]
 80041c6:	e032      	b.n	800422e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d008      	beq.n	80041e4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041de:	461a      	mov	r2, r3
 80041e0:	2320      	movs	r3, #32
 80041e2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	4619      	mov	r1, r3
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f005 fb6e 	bl	80098cc <HAL_PCD_DataOutStageCallback>
 80041f0:	e01d      	b.n	800422e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d114      	bne.n	8004222 <PCD_EP_OutXfrComplete_int+0x1fa>
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	4613      	mov	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d108      	bne.n	8004222 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800421a:	461a      	mov	r2, r3
 800421c:	2100      	movs	r1, #0
 800421e:	f003 fc39 	bl	8007a94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	4619      	mov	r1, r3
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f005 fb4f 	bl	80098cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	4f54300a 	.word	0x4f54300a
 800423c:	4f54310a 	.word	0x4f54310a

08004240 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	333c      	adds	r3, #60	; 0x3c
 8004258:	3304      	adds	r3, #4
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	4413      	add	r3, r2
 8004266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4a15      	ldr	r2, [pc, #84]	; (80042c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d90e      	bls.n	8004294 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800427c:	2b00      	cmp	r3, #0
 800427e:	d009      	beq.n	8004294 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800428c:	461a      	mov	r2, r3
 800428e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004292:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f005 fb07 	bl	80098a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4a0a      	ldr	r2, [pc, #40]	; (80042c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d90c      	bls.n	80042bc <PCD_EP_OutSetupPacket_int+0x7c>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d108      	bne.n	80042bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042b4:	461a      	mov	r2, r3
 80042b6:	2101      	movs	r1, #1
 80042b8:	f003 fbec 	bl	8007a94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	4f54300a 	.word	0x4f54300a

080042cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	460b      	mov	r3, r1
 80042d6:	70fb      	strb	r3, [r7, #3]
 80042d8:	4613      	mov	r3, r2
 80042da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d107      	bne.n	80042fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80042ea:	883b      	ldrh	r3, [r7, #0]
 80042ec:	0419      	lsls	r1, r3, #16
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	629a      	str	r2, [r3, #40]	; 0x28
 80042f8:	e028      	b.n	800434c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	0c1b      	lsrs	r3, r3, #16
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	4413      	add	r3, r2
 8004306:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004308:	2300      	movs	r3, #0
 800430a:	73fb      	strb	r3, [r7, #15]
 800430c:	e00d      	b.n	800432a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	7bfb      	ldrb	r3, [r7, #15]
 8004314:	3340      	adds	r3, #64	; 0x40
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	0c1b      	lsrs	r3, r3, #16
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	4413      	add	r3, r2
 8004322:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	3301      	adds	r3, #1
 8004328:	73fb      	strb	r3, [r7, #15]
 800432a:	7bfa      	ldrb	r2, [r7, #15]
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	3b01      	subs	r3, #1
 8004330:	429a      	cmp	r2, r3
 8004332:	d3ec      	bcc.n	800430e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004334:	883b      	ldrh	r3, [r7, #0]
 8004336:	0418      	lsls	r0, r3, #16
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6819      	ldr	r1, [r3, #0]
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	3b01      	subs	r3, #1
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	4302      	orrs	r2, r0
 8004344:	3340      	adds	r3, #64	; 0x40
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	460b      	mov	r3, r1
 8004364:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	887a      	ldrh	r2, [r7, #2]
 800436c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e25b      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d075      	beq.n	800449e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043b2:	4ba3      	ldr	r3, [pc, #652]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d00c      	beq.n	80043d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043be:	4ba0      	ldr	r3, [pc, #640]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d112      	bne.n	80043f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ca:	4b9d      	ldr	r3, [pc, #628]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043d6:	d10b      	bne.n	80043f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d8:	4b99      	ldr	r3, [pc, #612]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d05b      	beq.n	800449c <HAL_RCC_OscConfig+0x108>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d157      	bne.n	800449c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e236      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f8:	d106      	bne.n	8004408 <HAL_RCC_OscConfig+0x74>
 80043fa:	4b91      	ldr	r3, [pc, #580]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a90      	ldr	r2, [pc, #576]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e01d      	b.n	8004444 <HAL_RCC_OscConfig+0xb0>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004410:	d10c      	bne.n	800442c <HAL_RCC_OscConfig+0x98>
 8004412:	4b8b      	ldr	r3, [pc, #556]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a8a      	ldr	r2, [pc, #552]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	4b88      	ldr	r3, [pc, #544]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a87      	ldr	r2, [pc, #540]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	e00b      	b.n	8004444 <HAL_RCC_OscConfig+0xb0>
 800442c:	4b84      	ldr	r3, [pc, #528]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a83      	ldr	r2, [pc, #524]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	4b81      	ldr	r3, [pc, #516]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a80      	ldr	r2, [pc, #512]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 800443e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d013      	beq.n	8004474 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444c:	f7fd ff66 	bl	800231c <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004454:	f7fd ff62 	bl	800231c <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b64      	cmp	r3, #100	; 0x64
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e1fb      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004466:	4b76      	ldr	r3, [pc, #472]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f0      	beq.n	8004454 <HAL_RCC_OscConfig+0xc0>
 8004472:	e014      	b.n	800449e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004474:	f7fd ff52 	bl	800231c <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800447c:	f7fd ff4e 	bl	800231c <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b64      	cmp	r3, #100	; 0x64
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e1e7      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448e:	4b6c      	ldr	r3, [pc, #432]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0xe8>
 800449a:	e000      	b.n	800449e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800449c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d063      	beq.n	8004572 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044aa:	4b65      	ldr	r3, [pc, #404]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 030c 	and.w	r3, r3, #12
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00b      	beq.n	80044ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044b6:	4b62      	ldr	r3, [pc, #392]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d11c      	bne.n	80044fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044c2:	4b5f      	ldr	r3, [pc, #380]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d116      	bne.n	80044fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ce:	4b5c      	ldr	r3, [pc, #368]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <HAL_RCC_OscConfig+0x152>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d001      	beq.n	80044e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e1bb      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e6:	4b56      	ldr	r3, [pc, #344]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	4952      	ldr	r1, [pc, #328]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fa:	e03a      	b.n	8004572 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d020      	beq.n	8004546 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004504:	4b4f      	ldr	r3, [pc, #316]	; (8004644 <HAL_RCC_OscConfig+0x2b0>)
 8004506:	2201      	movs	r2, #1
 8004508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450a:	f7fd ff07 	bl	800231c <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004512:	f7fd ff03 	bl	800231c <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e19c      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004524:	4b46      	ldr	r3, [pc, #280]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0f0      	beq.n	8004512 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004530:	4b43      	ldr	r3, [pc, #268]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	4940      	ldr	r1, [pc, #256]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004540:	4313      	orrs	r3, r2
 8004542:	600b      	str	r3, [r1, #0]
 8004544:	e015      	b.n	8004572 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004546:	4b3f      	ldr	r3, [pc, #252]	; (8004644 <HAL_RCC_OscConfig+0x2b0>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454c:	f7fd fee6 	bl	800231c <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004554:	f7fd fee2 	bl	800231c <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e17b      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004566:	4b36      	ldr	r3, [pc, #216]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d030      	beq.n	80045e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d016      	beq.n	80045b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004586:	4b30      	ldr	r3, [pc, #192]	; (8004648 <HAL_RCC_OscConfig+0x2b4>)
 8004588:	2201      	movs	r2, #1
 800458a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458c:	f7fd fec6 	bl	800231c <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004594:	f7fd fec2 	bl	800231c <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e15b      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a6:	4b26      	ldr	r3, [pc, #152]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80045a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0x200>
 80045b2:	e015      	b.n	80045e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045b4:	4b24      	ldr	r3, [pc, #144]	; (8004648 <HAL_RCC_OscConfig+0x2b4>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ba:	f7fd feaf 	bl	800231c <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045c2:	f7fd feab 	bl	800231c <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e144      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d4:	4b1a      	ldr	r3, [pc, #104]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80045d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1f0      	bne.n	80045c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 80a0 	beq.w	800472e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ee:	2300      	movs	r3, #0
 80045f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045f2:	4b13      	ldr	r3, [pc, #76]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10f      	bne.n	800461e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045fe:	2300      	movs	r3, #0
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	4a0e      	ldr	r2, [pc, #56]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800460c:	6413      	str	r3, [r2, #64]	; 0x40
 800460e:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004616:	60bb      	str	r3, [r7, #8]
 8004618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800461a:	2301      	movs	r3, #1
 800461c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800461e:	4b0b      	ldr	r3, [pc, #44]	; (800464c <HAL_RCC_OscConfig+0x2b8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004626:	2b00      	cmp	r3, #0
 8004628:	d121      	bne.n	800466e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800462a:	4b08      	ldr	r3, [pc, #32]	; (800464c <HAL_RCC_OscConfig+0x2b8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a07      	ldr	r2, [pc, #28]	; (800464c <HAL_RCC_OscConfig+0x2b8>)
 8004630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004636:	f7fd fe71 	bl	800231c <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463c:	e011      	b.n	8004662 <HAL_RCC_OscConfig+0x2ce>
 800463e:	bf00      	nop
 8004640:	40023800 	.word	0x40023800
 8004644:	42470000 	.word	0x42470000
 8004648:	42470e80 	.word	0x42470e80
 800464c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004650:	f7fd fe64 	bl	800231c <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e0fd      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004662:	4b81      	ldr	r3, [pc, #516]	; (8004868 <HAL_RCC_OscConfig+0x4d4>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d106      	bne.n	8004684 <HAL_RCC_OscConfig+0x2f0>
 8004676:	4b7d      	ldr	r3, [pc, #500]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 8004678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467a:	4a7c      	ldr	r2, [pc, #496]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 800467c:	f043 0301 	orr.w	r3, r3, #1
 8004680:	6713      	str	r3, [r2, #112]	; 0x70
 8004682:	e01c      	b.n	80046be <HAL_RCC_OscConfig+0x32a>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2b05      	cmp	r3, #5
 800468a:	d10c      	bne.n	80046a6 <HAL_RCC_OscConfig+0x312>
 800468c:	4b77      	ldr	r3, [pc, #476]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 800468e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004690:	4a76      	ldr	r2, [pc, #472]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 8004692:	f043 0304 	orr.w	r3, r3, #4
 8004696:	6713      	str	r3, [r2, #112]	; 0x70
 8004698:	4b74      	ldr	r3, [pc, #464]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 800469a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469c:	4a73      	ldr	r2, [pc, #460]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	6713      	str	r3, [r2, #112]	; 0x70
 80046a4:	e00b      	b.n	80046be <HAL_RCC_OscConfig+0x32a>
 80046a6:	4b71      	ldr	r3, [pc, #452]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 80046a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046aa:	4a70      	ldr	r2, [pc, #448]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	6713      	str	r3, [r2, #112]	; 0x70
 80046b2:	4b6e      	ldr	r3, [pc, #440]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b6:	4a6d      	ldr	r2, [pc, #436]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 80046b8:	f023 0304 	bic.w	r3, r3, #4
 80046bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d015      	beq.n	80046f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c6:	f7fd fe29 	bl	800231c <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046cc:	e00a      	b.n	80046e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ce:	f7fd fe25 	bl	800231c <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046dc:	4293      	cmp	r3, r2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e0bc      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e4:	4b61      	ldr	r3, [pc, #388]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 80046e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0ee      	beq.n	80046ce <HAL_RCC_OscConfig+0x33a>
 80046f0:	e014      	b.n	800471c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f2:	f7fd fe13 	bl	800231c <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f8:	e00a      	b.n	8004710 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046fa:	f7fd fe0f 	bl	800231c <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	f241 3288 	movw	r2, #5000	; 0x1388
 8004708:	4293      	cmp	r3, r2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e0a6      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004710:	4b56      	ldr	r3, [pc, #344]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 8004712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1ee      	bne.n	80046fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800471c:	7dfb      	ldrb	r3, [r7, #23]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d105      	bne.n	800472e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004722:	4b52      	ldr	r3, [pc, #328]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	4a51      	ldr	r2, [pc, #324]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 8004728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800472c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 8092 	beq.w	800485c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004738:	4b4c      	ldr	r3, [pc, #304]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f003 030c 	and.w	r3, r3, #12
 8004740:	2b08      	cmp	r3, #8
 8004742:	d05c      	beq.n	80047fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	2b02      	cmp	r3, #2
 800474a:	d141      	bne.n	80047d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474c:	4b48      	ldr	r3, [pc, #288]	; (8004870 <HAL_RCC_OscConfig+0x4dc>)
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004752:	f7fd fde3 	bl	800231c <HAL_GetTick>
 8004756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004758:	e008      	b.n	800476c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800475a:	f7fd fddf 	bl	800231c <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e078      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476c:	4b3f      	ldr	r3, [pc, #252]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1f0      	bne.n	800475a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69da      	ldr	r2, [r3, #28]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	019b      	lsls	r3, r3, #6
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	085b      	lsrs	r3, r3, #1
 8004790:	3b01      	subs	r3, #1
 8004792:	041b      	lsls	r3, r3, #16
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	061b      	lsls	r3, r3, #24
 800479c:	4933      	ldr	r1, [pc, #204]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a2:	4b33      	ldr	r3, [pc, #204]	; (8004870 <HAL_RCC_OscConfig+0x4dc>)
 80047a4:	2201      	movs	r2, #1
 80047a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a8:	f7fd fdb8 	bl	800231c <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b0:	f7fd fdb4 	bl	800231c <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e04d      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c2:	4b2a      	ldr	r3, [pc, #168]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0x41c>
 80047ce:	e045      	b.n	800485c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d0:	4b27      	ldr	r3, [pc, #156]	; (8004870 <HAL_RCC_OscConfig+0x4dc>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d6:	f7fd fda1 	bl	800231c <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047de:	f7fd fd9d 	bl	800231c <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e036      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f0:	4b1e      	ldr	r3, [pc, #120]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1f0      	bne.n	80047de <HAL_RCC_OscConfig+0x44a>
 80047fc:	e02e      	b.n	800485c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e029      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800480a:	4b18      	ldr	r3, [pc, #96]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	429a      	cmp	r2, r3
 800481c:	d11c      	bne.n	8004858 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004828:	429a      	cmp	r2, r3
 800482a:	d115      	bne.n	8004858 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004832:	4013      	ands	r3, r2
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004838:	4293      	cmp	r3, r2
 800483a:	d10d      	bne.n	8004858 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004846:	429a      	cmp	r2, r3
 8004848:	d106      	bne.n	8004858 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004854:	429a      	cmp	r2, r3
 8004856:	d001      	beq.n	800485c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e000      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40007000 	.word	0x40007000
 800486c:	40023800 	.word	0x40023800
 8004870:	42470060 	.word	0x42470060

08004874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e0cc      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004888:	4b68      	ldr	r3, [pc, #416]	; (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 030f 	and.w	r3, r3, #15
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d90c      	bls.n	80048b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004896:	4b65      	ldr	r3, [pc, #404]	; (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800489e:	4b63      	ldr	r3, [pc, #396]	; (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d001      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e0b8      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d020      	beq.n	80048fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048c8:	4b59      	ldr	r3, [pc, #356]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	4a58      	ldr	r2, [pc, #352]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048e0:	4b53      	ldr	r3, [pc, #332]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	4a52      	ldr	r2, [pc, #328]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ec:	4b50      	ldr	r3, [pc, #320]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	494d      	ldr	r1, [pc, #308]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d044      	beq.n	8004994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d107      	bne.n	8004922 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004912:	4b47      	ldr	r3, [pc, #284]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d119      	bne.n	8004952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e07f      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b02      	cmp	r3, #2
 8004928:	d003      	beq.n	8004932 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800492e:	2b03      	cmp	r3, #3
 8004930:	d107      	bne.n	8004942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004932:	4b3f      	ldr	r3, [pc, #252]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d109      	bne.n	8004952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e06f      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004942:	4b3b      	ldr	r3, [pc, #236]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e067      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004952:	4b37      	ldr	r3, [pc, #220]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f023 0203 	bic.w	r2, r3, #3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	4934      	ldr	r1, [pc, #208]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004960:	4313      	orrs	r3, r2
 8004962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004964:	f7fd fcda 	bl	800231c <HAL_GetTick>
 8004968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496a:	e00a      	b.n	8004982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800496c:	f7fd fcd6 	bl	800231c <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	f241 3288 	movw	r2, #5000	; 0x1388
 800497a:	4293      	cmp	r3, r2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e04f      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004982:	4b2b      	ldr	r3, [pc, #172]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 020c 	and.w	r2, r3, #12
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	429a      	cmp	r2, r3
 8004992:	d1eb      	bne.n	800496c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004994:	4b25      	ldr	r3, [pc, #148]	; (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d20c      	bcs.n	80049bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a2:	4b22      	ldr	r3, [pc, #136]	; (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049aa:	4b20      	ldr	r3, [pc, #128]	; (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d001      	beq.n	80049bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e032      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049c8:	4b19      	ldr	r3, [pc, #100]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	4916      	ldr	r1, [pc, #88]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d009      	beq.n	80049fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049e6:	4b12      	ldr	r3, [pc, #72]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	490e      	ldr	r1, [pc, #56]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049fa:	f000 f821 	bl	8004a40 <HAL_RCC_GetSysClockFreq>
 80049fe:	4601      	mov	r1, r0
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	091b      	lsrs	r3, r3, #4
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	4a0a      	ldr	r2, [pc, #40]	; (8004a34 <HAL_RCC_ClockConfig+0x1c0>)
 8004a0c:	5cd3      	ldrb	r3, [r2, r3]
 8004a0e:	fa21 f303 	lsr.w	r3, r1, r3
 8004a12:	4a09      	ldr	r2, [pc, #36]	; (8004a38 <HAL_RCC_ClockConfig+0x1c4>)
 8004a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a16:	4b09      	ldr	r3, [pc, #36]	; (8004a3c <HAL_RCC_ClockConfig+0x1c8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fd fc3a 	bl	8002294 <HAL_InitTick>

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40023c00 	.word	0x40023c00
 8004a30:	40023800 	.word	0x40023800
 8004a34:	0800c020 	.word	0x0800c020
 8004a38:	20000000 	.word	0x20000000
 8004a3c:	20000004 	.word	0x20000004

08004a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	607b      	str	r3, [r7, #4]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	2300      	movs	r3, #0
 8004a50:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a56:	4b63      	ldr	r3, [pc, #396]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d007      	beq.n	8004a72 <HAL_RCC_GetSysClockFreq+0x32>
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d008      	beq.n	8004a78 <HAL_RCC_GetSysClockFreq+0x38>
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f040 80b4 	bne.w	8004bd4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a6c:	4b5e      	ldr	r3, [pc, #376]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a6e:	60bb      	str	r3, [r7, #8]
       break;
 8004a70:	e0b3      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a72:	4b5e      	ldr	r3, [pc, #376]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004a74:	60bb      	str	r3, [r7, #8]
      break;
 8004a76:	e0b0      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a78:	4b5a      	ldr	r3, [pc, #360]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a82:	4b58      	ldr	r3, [pc, #352]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d04a      	beq.n	8004b24 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a8e:	4b55      	ldr	r3, [pc, #340]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	099b      	lsrs	r3, r3, #6
 8004a94:	f04f 0400 	mov.w	r4, #0
 8004a98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	ea03 0501 	and.w	r5, r3, r1
 8004aa4:	ea04 0602 	and.w	r6, r4, r2
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	4632      	mov	r2, r6
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	f04f 0400 	mov.w	r4, #0
 8004ab4:	0154      	lsls	r4, r2, #5
 8004ab6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004aba:	014b      	lsls	r3, r1, #5
 8004abc:	4619      	mov	r1, r3
 8004abe:	4622      	mov	r2, r4
 8004ac0:	1b49      	subs	r1, r1, r5
 8004ac2:	eb62 0206 	sbc.w	r2, r2, r6
 8004ac6:	f04f 0300 	mov.w	r3, #0
 8004aca:	f04f 0400 	mov.w	r4, #0
 8004ace:	0194      	lsls	r4, r2, #6
 8004ad0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ad4:	018b      	lsls	r3, r1, #6
 8004ad6:	1a5b      	subs	r3, r3, r1
 8004ad8:	eb64 0402 	sbc.w	r4, r4, r2
 8004adc:	f04f 0100 	mov.w	r1, #0
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	00e2      	lsls	r2, r4, #3
 8004ae6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004aea:	00d9      	lsls	r1, r3, #3
 8004aec:	460b      	mov	r3, r1
 8004aee:	4614      	mov	r4, r2
 8004af0:	195b      	adds	r3, r3, r5
 8004af2:	eb44 0406 	adc.w	r4, r4, r6
 8004af6:	f04f 0100 	mov.w	r1, #0
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	0262      	lsls	r2, r4, #9
 8004b00:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004b04:	0259      	lsls	r1, r3, #9
 8004b06:	460b      	mov	r3, r1
 8004b08:	4614      	mov	r4, r2
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f04f 0400 	mov.w	r4, #0
 8004b14:	461a      	mov	r2, r3
 8004b16:	4623      	mov	r3, r4
 8004b18:	f7fc f89e 	bl	8000c58 <__aeabi_uldivmod>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	460c      	mov	r4, r1
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	e049      	b.n	8004bb8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b24:	4b2f      	ldr	r3, [pc, #188]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	099b      	lsrs	r3, r3, #6
 8004b2a:	f04f 0400 	mov.w	r4, #0
 8004b2e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	ea03 0501 	and.w	r5, r3, r1
 8004b3a:	ea04 0602 	and.w	r6, r4, r2
 8004b3e:	4629      	mov	r1, r5
 8004b40:	4632      	mov	r2, r6
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	f04f 0400 	mov.w	r4, #0
 8004b4a:	0154      	lsls	r4, r2, #5
 8004b4c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b50:	014b      	lsls	r3, r1, #5
 8004b52:	4619      	mov	r1, r3
 8004b54:	4622      	mov	r2, r4
 8004b56:	1b49      	subs	r1, r1, r5
 8004b58:	eb62 0206 	sbc.w	r2, r2, r6
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	f04f 0400 	mov.w	r4, #0
 8004b64:	0194      	lsls	r4, r2, #6
 8004b66:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b6a:	018b      	lsls	r3, r1, #6
 8004b6c:	1a5b      	subs	r3, r3, r1
 8004b6e:	eb64 0402 	sbc.w	r4, r4, r2
 8004b72:	f04f 0100 	mov.w	r1, #0
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	00e2      	lsls	r2, r4, #3
 8004b7c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b80:	00d9      	lsls	r1, r3, #3
 8004b82:	460b      	mov	r3, r1
 8004b84:	4614      	mov	r4, r2
 8004b86:	195b      	adds	r3, r3, r5
 8004b88:	eb44 0406 	adc.w	r4, r4, r6
 8004b8c:	f04f 0100 	mov.w	r1, #0
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	02a2      	lsls	r2, r4, #10
 8004b96:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b9a:	0299      	lsls	r1, r3, #10
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4614      	mov	r4, r2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f04f 0400 	mov.w	r4, #0
 8004baa:	461a      	mov	r2, r3
 8004bac:	4623      	mov	r3, r4
 8004bae:	f7fc f853 	bl	8000c58 <__aeabi_uldivmod>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	460c      	mov	r4, r1
 8004bb6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bb8:	4b0a      	ldr	r3, [pc, #40]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	0c1b      	lsrs	r3, r3, #16
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	60bb      	str	r3, [r7, #8]
      break;
 8004bd2:	e002      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bd4:	4b04      	ldr	r3, [pc, #16]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004bd6:	60bb      	str	r3, [r7, #8]
      break;
 8004bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bda:	68bb      	ldr	r3, [r7, #8]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be4:	40023800 	.word	0x40023800
 8004be8:	00f42400 	.word	0x00f42400
 8004bec:	007a1200 	.word	0x007a1200

08004bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bf4:	4b03      	ldr	r3, [pc, #12]	; (8004c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	20000000 	.word	0x20000000

08004c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c0c:	f7ff fff0 	bl	8004bf0 <HAL_RCC_GetHCLKFreq>
 8004c10:	4601      	mov	r1, r0
 8004c12:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	0a9b      	lsrs	r3, r3, #10
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	4a03      	ldr	r2, [pc, #12]	; (8004c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c1e:	5cd3      	ldrb	r3, [r2, r3]
 8004c20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	0800c030 	.word	0x0800c030

08004c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c34:	f7ff ffdc 	bl	8004bf0 <HAL_RCC_GetHCLKFreq>
 8004c38:	4601      	mov	r1, r0
 8004c3a:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	0b5b      	lsrs	r3, r3, #13
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	4a03      	ldr	r2, [pc, #12]	; (8004c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c46:	5cd3      	ldrb	r3, [r2, r3]
 8004c48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40023800 	.word	0x40023800
 8004c54:	0800c030 	.word	0x0800c030

08004c58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e056      	b.n	8004d18 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d106      	bne.n	8004c8a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7fc fda5 	bl	80017d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	ea42 0103 	orr.w	r1, r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	0c1b      	lsrs	r3, r3, #16
 8004ce8:	f003 0104 	and.w	r1, r3, #4
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	69da      	ldr	r2, [r3, #28]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	603b      	str	r3, [r7, #0]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d30:	2300      	movs	r3, #0
 8004d32:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d101      	bne.n	8004d42 <HAL_SPI_Transmit+0x22>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	e11e      	b.n	8004f80 <HAL_SPI_Transmit+0x260>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d4a:	f7fd fae7 	bl	800231c <HAL_GetTick>
 8004d4e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d50:	88fb      	ldrh	r3, [r7, #6]
 8004d52:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d002      	beq.n	8004d66 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d60:	2302      	movs	r3, #2
 8004d62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d64:	e103      	b.n	8004f6e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <HAL_SPI_Transmit+0x52>
 8004d6c:	88fb      	ldrh	r3, [r7, #6]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d102      	bne.n	8004d78 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d76:	e0fa      	b.n	8004f6e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2203      	movs	r2, #3
 8004d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	88fa      	ldrh	r2, [r7, #6]
 8004d90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	88fa      	ldrh	r2, [r7, #6]
 8004d96:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dbe:	d107      	bne.n	8004dd0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dda:	2b40      	cmp	r3, #64	; 0x40
 8004ddc:	d007      	beq.n	8004dee <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004df6:	d14b      	bne.n	8004e90 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <HAL_SPI_Transmit+0xe6>
 8004e00:	8afb      	ldrh	r3, [r7, #22]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d13e      	bne.n	8004e84 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	881a      	ldrh	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e16:	1c9a      	adds	r2, r3, #2
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e2a:	e02b      	b.n	8004e84 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d112      	bne.n	8004e60 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3e:	881a      	ldrh	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	1c9a      	adds	r2, r3, #2
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e5e:	e011      	b.n	8004e84 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e60:	f7fd fa5c 	bl	800231c <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d803      	bhi.n	8004e78 <HAL_SPI_Transmit+0x158>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e76:	d102      	bne.n	8004e7e <HAL_SPI_Transmit+0x15e>
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d102      	bne.n	8004e84 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e82:	e074      	b.n	8004f6e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1ce      	bne.n	8004e2c <HAL_SPI_Transmit+0x10c>
 8004e8e:	e04c      	b.n	8004f2a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <HAL_SPI_Transmit+0x17e>
 8004e98:	8afb      	ldrh	r3, [r7, #22]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d140      	bne.n	8004f20 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	330c      	adds	r3, #12
 8004ea8:	7812      	ldrb	r2, [r2, #0]
 8004eaa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ec4:	e02c      	b.n	8004f20 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d113      	bne.n	8004efc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	330c      	adds	r3, #12
 8004ede:	7812      	ldrb	r2, [r2, #0]
 8004ee0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	86da      	strh	r2, [r3, #54]	; 0x36
 8004efa:	e011      	b.n	8004f20 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004efc:	f7fd fa0e 	bl	800231c <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d803      	bhi.n	8004f14 <HAL_SPI_Transmit+0x1f4>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f12:	d102      	bne.n	8004f1a <HAL_SPI_Transmit+0x1fa>
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d102      	bne.n	8004f20 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f1e:	e026      	b.n	8004f6e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1cd      	bne.n	8004ec6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	6839      	ldr	r1, [r7, #0]
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 fba4 	bl	800567c <SPI_EndRxTxTransaction>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10a      	bne.n	8004f5e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f48:	2300      	movs	r3, #0
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	613b      	str	r3, [r7, #16]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	613b      	str	r3, [r7, #16]
 8004f5c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	77fb      	strb	r3, [r7, #31]
 8004f6a:	e000      	b.n	8004f6e <HAL_SPI_Transmit+0x24e>
  }

error:
 8004f6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3720      	adds	r7, #32
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b088      	sub	sp, #32
 8004f8c:	af02      	add	r7, sp, #8
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	603b      	str	r3, [r7, #0]
 8004f94:	4613      	mov	r3, r2
 8004f96:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fa4:	d112      	bne.n	8004fcc <HAL_SPI_Receive+0x44>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10e      	bne.n	8004fcc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2204      	movs	r2, #4
 8004fb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004fb6:	88fa      	ldrh	r2, [r7, #6]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	68b9      	ldr	r1, [r7, #8]
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 f8e9 	bl	800519a <HAL_SPI_TransmitReceive>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	e0e2      	b.n	8005192 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_SPI_Receive+0x52>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e0db      	b.n	8005192 <HAL_SPI_Receive+0x20a>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fe2:	f7fd f99b 	bl	800231c <HAL_GetTick>
 8004fe6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d002      	beq.n	8004ffa <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ff8:	e0c2      	b.n	8005180 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <HAL_SPI_Receive+0x7e>
 8005000:	88fb      	ldrh	r3, [r7, #6]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d102      	bne.n	800500c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	75fb      	strb	r3, [r7, #23]
    goto error;
 800500a:	e0b9      	b.n	8005180 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2204      	movs	r2, #4
 8005010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	88fa      	ldrh	r2, [r7, #6]
 8005024:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	88fa      	ldrh	r2, [r7, #6]
 800502a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005052:	d107      	bne.n	8005064 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005062:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506e:	2b40      	cmp	r3, #64	; 0x40
 8005070:	d007      	beq.n	8005082 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005080:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d162      	bne.n	8005150 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800508a:	e02e      	b.n	80050ea <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b01      	cmp	r3, #1
 8005098:	d115      	bne.n	80050c6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f103 020c 	add.w	r2, r3, #12
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a6:	7812      	ldrb	r2, [r2, #0]
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	3b01      	subs	r3, #1
 80050be:	b29a      	uxth	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050c4:	e011      	b.n	80050ea <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050c6:	f7fd f929 	bl	800231c <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d803      	bhi.n	80050de <HAL_SPI_Receive+0x156>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050dc:	d102      	bne.n	80050e4 <HAL_SPI_Receive+0x15c>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d102      	bne.n	80050ea <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80050e8:	e04a      	b.n	8005180 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1cb      	bne.n	800508c <HAL_SPI_Receive+0x104>
 80050f4:	e031      	b.n	800515a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b01      	cmp	r3, #1
 8005102:	d113      	bne.n	800512c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	b292      	uxth	r2, r2
 8005110:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005116:	1c9a      	adds	r2, r3, #2
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005120:	b29b      	uxth	r3, r3
 8005122:	3b01      	subs	r3, #1
 8005124:	b29a      	uxth	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	87da      	strh	r2, [r3, #62]	; 0x3e
 800512a:	e011      	b.n	8005150 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800512c:	f7fd f8f6 	bl	800231c <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	429a      	cmp	r2, r3
 800513a:	d803      	bhi.n	8005144 <HAL_SPI_Receive+0x1bc>
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005142:	d102      	bne.n	800514a <HAL_SPI_Receive+0x1c2>
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d102      	bne.n	8005150 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800514e:	e017      	b.n	8005180 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005154:	b29b      	uxth	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1cd      	bne.n	80050f6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	6839      	ldr	r1, [r7, #0]
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 fa27 	bl	80055b2 <SPI_EndRxTransaction>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d002      	beq.n	8005170 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2220      	movs	r2, #32
 800516e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005174:	2b00      	cmp	r3, #0
 8005176:	d002      	beq.n	800517e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	75fb      	strb	r3, [r7, #23]
 800517c:	e000      	b.n	8005180 <HAL_SPI_Receive+0x1f8>
  }

error :
 800517e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005190:	7dfb      	ldrb	r3, [r7, #23]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b08c      	sub	sp, #48	; 0x30
 800519e:	af00      	add	r7, sp, #0
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	607a      	str	r2, [r7, #4]
 80051a6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80051a8:	2301      	movs	r3, #1
 80051aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_SPI_TransmitReceive+0x26>
 80051bc:	2302      	movs	r3, #2
 80051be:	e18a      	b.n	80054d6 <HAL_SPI_TransmitReceive+0x33c>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051c8:	f7fd f8a8 	bl	800231c <HAL_GetTick>
 80051cc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80051de:	887b      	ldrh	r3, [r7, #2]
 80051e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80051e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d00f      	beq.n	800520a <HAL_SPI_TransmitReceive+0x70>
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051f0:	d107      	bne.n	8005202 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d103      	bne.n	8005202 <HAL_SPI_TransmitReceive+0x68>
 80051fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d003      	beq.n	800520a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005202:	2302      	movs	r3, #2
 8005204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005208:	e15b      	b.n	80054c2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d005      	beq.n	800521c <HAL_SPI_TransmitReceive+0x82>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d002      	beq.n	800521c <HAL_SPI_TransmitReceive+0x82>
 8005216:	887b      	ldrh	r3, [r7, #2]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d103      	bne.n	8005224 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005222:	e14e      	b.n	80054c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b04      	cmp	r3, #4
 800522e:	d003      	beq.n	8005238 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2205      	movs	r2, #5
 8005234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	887a      	ldrh	r2, [r7, #2]
 8005248:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	887a      	ldrh	r2, [r7, #2]
 800524e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	887a      	ldrh	r2, [r7, #2]
 800525a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	887a      	ldrh	r2, [r7, #2]
 8005260:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005278:	2b40      	cmp	r3, #64	; 0x40
 800527a:	d007      	beq.n	800528c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800528a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005294:	d178      	bne.n	8005388 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <HAL_SPI_TransmitReceive+0x10a>
 800529e:	8b7b      	ldrh	r3, [r7, #26]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d166      	bne.n	8005372 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a8:	881a      	ldrh	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b4:	1c9a      	adds	r2, r3, #2
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052be:	b29b      	uxth	r3, r3
 80052c0:	3b01      	subs	r3, #1
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052c8:	e053      	b.n	8005372 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d11b      	bne.n	8005310 <HAL_SPI_TransmitReceive+0x176>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052dc:	b29b      	uxth	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d016      	beq.n	8005310 <HAL_SPI_TransmitReceive+0x176>
 80052e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d113      	bne.n	8005310 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ec:	881a      	ldrh	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f8:	1c9a      	adds	r2, r3, #2
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005302:	b29b      	uxth	r3, r3
 8005304:	3b01      	subs	r3, #1
 8005306:	b29a      	uxth	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800530c:	2300      	movs	r3, #0
 800530e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b01      	cmp	r3, #1
 800531c:	d119      	bne.n	8005352 <HAL_SPI_TransmitReceive+0x1b8>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d014      	beq.n	8005352 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005332:	b292      	uxth	r2, r2
 8005334:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533a:	1c9a      	adds	r2, r3, #2
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005344:	b29b      	uxth	r3, r3
 8005346:	3b01      	subs	r3, #1
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800534e:	2301      	movs	r3, #1
 8005350:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005352:	f7fc ffe3 	bl	800231c <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800535e:	429a      	cmp	r2, r3
 8005360:	d807      	bhi.n	8005372 <HAL_SPI_TransmitReceive+0x1d8>
 8005362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005368:	d003      	beq.n	8005372 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005370:	e0a7      	b.n	80054c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005376:	b29b      	uxth	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1a6      	bne.n	80052ca <HAL_SPI_TransmitReceive+0x130>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1a1      	bne.n	80052ca <HAL_SPI_TransmitReceive+0x130>
 8005386:	e07c      	b.n	8005482 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d002      	beq.n	8005396 <HAL_SPI_TransmitReceive+0x1fc>
 8005390:	8b7b      	ldrh	r3, [r7, #26]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d16b      	bne.n	800546e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	330c      	adds	r3, #12
 80053a0:	7812      	ldrb	r2, [r2, #0]
 80053a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053bc:	e057      	b.n	800546e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d11c      	bne.n	8005406 <HAL_SPI_TransmitReceive+0x26c>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d017      	beq.n	8005406 <HAL_SPI_TransmitReceive+0x26c>
 80053d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d114      	bne.n	8005406 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	330c      	adds	r3, #12
 80053e6:	7812      	ldrb	r2, [r2, #0]
 80053e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b01      	cmp	r3, #1
 8005412:	d119      	bne.n	8005448 <HAL_SPI_TransmitReceive+0x2ae>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005418:	b29b      	uxth	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d014      	beq.n	8005448 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800543a:	b29b      	uxth	r3, r3
 800543c:	3b01      	subs	r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005444:	2301      	movs	r3, #1
 8005446:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005448:	f7fc ff68 	bl	800231c <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005454:	429a      	cmp	r2, r3
 8005456:	d803      	bhi.n	8005460 <HAL_SPI_TransmitReceive+0x2c6>
 8005458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545e:	d102      	bne.n	8005466 <HAL_SPI_TransmitReceive+0x2cc>
 8005460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005462:	2b00      	cmp	r3, #0
 8005464:	d103      	bne.n	800546e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800546c:	e029      	b.n	80054c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005472:	b29b      	uxth	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1a2      	bne.n	80053be <HAL_SPI_TransmitReceive+0x224>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800547c:	b29b      	uxth	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d19d      	bne.n	80053be <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005484:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 f8f8 	bl	800567c <SPI_EndRxTxTransaction>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d006      	beq.n	80054a0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800549e:	e010      	b.n	80054c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10b      	bne.n	80054c0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054a8:	2300      	movs	r3, #0
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	617b      	str	r3, [r7, #20]
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	e000      	b.n	80054c2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80054c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80054d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3730      	adds	r7, #48	; 0x30
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b084      	sub	sp, #16
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	603b      	str	r3, [r7, #0]
 80054ea:	4613      	mov	r3, r2
 80054ec:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054ee:	e04c      	b.n	800558a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f6:	d048      	beq.n	800558a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80054f8:	f7fc ff10 	bl	800231c <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	429a      	cmp	r2, r3
 8005506:	d902      	bls.n	800550e <SPI_WaitFlagStateUntilTimeout+0x30>
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d13d      	bne.n	800558a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800551c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005526:	d111      	bne.n	800554c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005530:	d004      	beq.n	800553c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800553a:	d107      	bne.n	800554c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800554a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005554:	d10f      	bne.n	8005576 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005574:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e00f      	b.n	80055aa <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4013      	ands	r3, r2
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	429a      	cmp	r2, r3
 8005598:	bf0c      	ite	eq
 800559a:	2301      	moveq	r3, #1
 800559c:	2300      	movne	r3, #0
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	461a      	mov	r2, r3
 80055a2:	79fb      	ldrb	r3, [r7, #7]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d1a3      	bne.n	80054f0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b086      	sub	sp, #24
 80055b6:	af02      	add	r7, sp, #8
 80055b8:	60f8      	str	r0, [r7, #12]
 80055ba:	60b9      	str	r1, [r7, #8]
 80055bc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055c6:	d111      	bne.n	80055ec <SPI_EndRxTransaction+0x3a>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055d0:	d004      	beq.n	80055dc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055da:	d107      	bne.n	80055ec <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ea:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055f4:	d12a      	bne.n	800564c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055fe:	d012      	beq.n	8005626 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2200      	movs	r2, #0
 8005608:	2180      	movs	r1, #128	; 0x80
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f7ff ff67 	bl	80054de <SPI_WaitFlagStateUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d02d      	beq.n	8005672 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561a:	f043 0220 	orr.w	r2, r3, #32
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e026      	b.n	8005674 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2200      	movs	r2, #0
 800562e:	2101      	movs	r1, #1
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f7ff ff54 	bl	80054de <SPI_WaitFlagStateUntilTimeout>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d01a      	beq.n	8005672 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005640:	f043 0220 	orr.w	r2, r3, #32
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e013      	b.n	8005674 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2200      	movs	r2, #0
 8005654:	2101      	movs	r1, #1
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f7ff ff41 	bl	80054de <SPI_WaitFlagStateUntilTimeout>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d007      	beq.n	8005672 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005666:	f043 0220 	orr.w	r2, r3, #32
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e000      	b.n	8005674 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b088      	sub	sp, #32
 8005680:	af02      	add	r7, sp, #8
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005688:	4b1b      	ldr	r3, [pc, #108]	; (80056f8 <SPI_EndRxTxTransaction+0x7c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a1b      	ldr	r2, [pc, #108]	; (80056fc <SPI_EndRxTxTransaction+0x80>)
 800568e:	fba2 2303 	umull	r2, r3, r2, r3
 8005692:	0d5b      	lsrs	r3, r3, #21
 8005694:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005698:	fb02 f303 	mul.w	r3, r2, r3
 800569c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056a6:	d112      	bne.n	80056ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2200      	movs	r2, #0
 80056b0:	2180      	movs	r1, #128	; 0x80
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f7ff ff13 	bl	80054de <SPI_WaitFlagStateUntilTimeout>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d016      	beq.n	80056ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c2:	f043 0220 	orr.w	r2, r3, #32
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e00f      	b.n	80056ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00a      	beq.n	80056ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e4:	2b80      	cmp	r3, #128	; 0x80
 80056e6:	d0f2      	beq.n	80056ce <SPI_EndRxTxTransaction+0x52>
 80056e8:	e000      	b.n	80056ec <SPI_EndRxTxTransaction+0x70>
        break;
 80056ea:	bf00      	nop
  }

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20000000 	.word	0x20000000
 80056fc:	165e9f81 	.word	0x165e9f81

08005700 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e01d      	b.n	800574e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d106      	bne.n	800572c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7fc f89c 	bl	8001864 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3304      	adds	r3, #4
 800573c:	4619      	mov	r1, r3
 800573e:	4610      	mov	r0, r2
 8005740:	f000 f8d0 	bl	80058e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
	...

08005758 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800576a:	2b01      	cmp	r3, #1
 800576c:	d101      	bne.n	8005772 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800576e:	2302      	movs	r3, #2
 8005770:	e0b4      	b.n	80058dc <HAL_TIM_PWM_ConfigChannel+0x184>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2202      	movs	r2, #2
 800577e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b0c      	cmp	r3, #12
 8005786:	f200 809f 	bhi.w	80058c8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800578a:	a201      	add	r2, pc, #4	; (adr r2, 8005790 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800578c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005790:	080057c5 	.word	0x080057c5
 8005794:	080058c9 	.word	0x080058c9
 8005798:	080058c9 	.word	0x080058c9
 800579c:	080058c9 	.word	0x080058c9
 80057a0:	08005805 	.word	0x08005805
 80057a4:	080058c9 	.word	0x080058c9
 80057a8:	080058c9 	.word	0x080058c9
 80057ac:	080058c9 	.word	0x080058c9
 80057b0:	08005847 	.word	0x08005847
 80057b4:	080058c9 	.word	0x080058c9
 80057b8:	080058c9 	.word	0x080058c9
 80057bc:	080058c9 	.word	0x080058c9
 80057c0:	08005887 	.word	0x08005887
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68b9      	ldr	r1, [r7, #8]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 f90a 	bl	80059e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699a      	ldr	r2, [r3, #24]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0208 	orr.w	r2, r2, #8
 80057de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0204 	bic.w	r2, r2, #4
 80057ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6999      	ldr	r1, [r3, #24]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	691a      	ldr	r2, [r3, #16]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	619a      	str	r2, [r3, #24]
      break;
 8005802:	e062      	b.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68b9      	ldr	r1, [r7, #8]
 800580a:	4618      	mov	r0, r3
 800580c:	f000 f950 	bl	8005ab0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699a      	ldr	r2, [r3, #24]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800581e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699a      	ldr	r2, [r3, #24]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800582e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6999      	ldr	r1, [r3, #24]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	021a      	lsls	r2, r3, #8
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	619a      	str	r2, [r3, #24]
      break;
 8005844:	e041      	b.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	4618      	mov	r0, r3
 800584e:	f000 f99b 	bl	8005b88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69da      	ldr	r2, [r3, #28]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f042 0208 	orr.w	r2, r2, #8
 8005860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69da      	ldr	r2, [r3, #28]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0204 	bic.w	r2, r2, #4
 8005870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	69d9      	ldr	r1, [r3, #28]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	61da      	str	r2, [r3, #28]
      break;
 8005884:	e021      	b.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68b9      	ldr	r1, [r7, #8]
 800588c:	4618      	mov	r0, r3
 800588e:	f000 f9e5 	bl	8005c5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	69da      	ldr	r2, [r3, #28]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	69da      	ldr	r2, [r3, #28]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69d9      	ldr	r1, [r3, #28]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	021a      	lsls	r2, r3, #8
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	61da      	str	r2, [r3, #28]
      break;
 80058c6:	e000      	b.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80058c8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a34      	ldr	r2, [pc, #208]	; (80059c8 <TIM_Base_SetConfig+0xe4>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d00f      	beq.n	800591c <TIM_Base_SetConfig+0x38>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005902:	d00b      	beq.n	800591c <TIM_Base_SetConfig+0x38>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a31      	ldr	r2, [pc, #196]	; (80059cc <TIM_Base_SetConfig+0xe8>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d007      	beq.n	800591c <TIM_Base_SetConfig+0x38>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a30      	ldr	r2, [pc, #192]	; (80059d0 <TIM_Base_SetConfig+0xec>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d003      	beq.n	800591c <TIM_Base_SetConfig+0x38>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a2f      	ldr	r2, [pc, #188]	; (80059d4 <TIM_Base_SetConfig+0xf0>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d108      	bne.n	800592e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	4313      	orrs	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a25      	ldr	r2, [pc, #148]	; (80059c8 <TIM_Base_SetConfig+0xe4>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d01b      	beq.n	800596e <TIM_Base_SetConfig+0x8a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800593c:	d017      	beq.n	800596e <TIM_Base_SetConfig+0x8a>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a22      	ldr	r2, [pc, #136]	; (80059cc <TIM_Base_SetConfig+0xe8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d013      	beq.n	800596e <TIM_Base_SetConfig+0x8a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a21      	ldr	r2, [pc, #132]	; (80059d0 <TIM_Base_SetConfig+0xec>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00f      	beq.n	800596e <TIM_Base_SetConfig+0x8a>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a20      	ldr	r2, [pc, #128]	; (80059d4 <TIM_Base_SetConfig+0xf0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00b      	beq.n	800596e <TIM_Base_SetConfig+0x8a>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a1f      	ldr	r2, [pc, #124]	; (80059d8 <TIM_Base_SetConfig+0xf4>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d007      	beq.n	800596e <TIM_Base_SetConfig+0x8a>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a1e      	ldr	r2, [pc, #120]	; (80059dc <TIM_Base_SetConfig+0xf8>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d003      	beq.n	800596e <TIM_Base_SetConfig+0x8a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a1d      	ldr	r2, [pc, #116]	; (80059e0 <TIM_Base_SetConfig+0xfc>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d108      	bne.n	8005980 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a08      	ldr	r2, [pc, #32]	; (80059c8 <TIM_Base_SetConfig+0xe4>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d103      	bne.n	80059b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	691a      	ldr	r2, [r3, #16]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	615a      	str	r2, [r3, #20]
}
 80059ba:	bf00      	nop
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	40010000 	.word	0x40010000
 80059cc:	40000400 	.word	0x40000400
 80059d0:	40000800 	.word	0x40000800
 80059d4:	40000c00 	.word	0x40000c00
 80059d8:	40014000 	.word	0x40014000
 80059dc:	40014400 	.word	0x40014400
 80059e0:	40014800 	.word	0x40014800

080059e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	f023 0201 	bic.w	r2, r3, #1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0303 	bic.w	r3, r3, #3
 8005a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f023 0302 	bic.w	r3, r3, #2
 8005a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a1c      	ldr	r2, [pc, #112]	; (8005aac <TIM_OC1_SetConfig+0xc8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d10c      	bne.n	8005a5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f023 0308 	bic.w	r3, r3, #8
 8005a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f023 0304 	bic.w	r3, r3, #4
 8005a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a13      	ldr	r2, [pc, #76]	; (8005aac <TIM_OC1_SetConfig+0xc8>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d111      	bne.n	8005a86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	621a      	str	r2, [r3, #32]
}
 8005aa0:	bf00      	nop
 8005aa2:	371c      	adds	r7, #28
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	40010000 	.word	0x40010000

08005ab0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f023 0210 	bic.w	r2, r3, #16
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	021b      	lsls	r3, r3, #8
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f023 0320 	bic.w	r3, r3, #32
 8005afa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a1e      	ldr	r2, [pc, #120]	; (8005b84 <TIM_OC2_SetConfig+0xd4>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d10d      	bne.n	8005b2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a15      	ldr	r2, [pc, #84]	; (8005b84 <TIM_OC2_SetConfig+0xd4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d113      	bne.n	8005b5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	621a      	str	r2, [r3, #32]
}
 8005b76:	bf00      	nop
 8005b78:	371c      	adds	r7, #28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40010000 	.word	0x40010000

08005b88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 0303 	bic.w	r3, r3, #3
 8005bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	021b      	lsls	r3, r3, #8
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a1d      	ldr	r2, [pc, #116]	; (8005c58 <TIM_OC3_SetConfig+0xd0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d10d      	bne.n	8005c02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	021b      	lsls	r3, r3, #8
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a14      	ldr	r2, [pc, #80]	; (8005c58 <TIM_OC3_SetConfig+0xd0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d113      	bne.n	8005c32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	011b      	lsls	r3, r3, #4
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	621a      	str	r2, [r3, #32]
}
 8005c4c:	bf00      	nop
 8005c4e:	371c      	adds	r7, #28
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	40010000 	.word	0x40010000

08005c5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	021b      	lsls	r3, r3, #8
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ca6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	031b      	lsls	r3, r3, #12
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a10      	ldr	r2, [pc, #64]	; (8005cf8 <TIM_OC4_SetConfig+0x9c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d109      	bne.n	8005cd0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	019b      	lsls	r3, r3, #6
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	621a      	str	r2, [r3, #32]
}
 8005cea:	bf00      	nop
 8005cec:	371c      	adds	r7, #28
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	40010000 	.word	0x40010000

08005cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d101      	bne.n	8005d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d10:	2302      	movs	r3, #2
 8005d12:	e050      	b.n	8005db6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a1c      	ldr	r2, [pc, #112]	; (8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d018      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d60:	d013      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a18      	ldr	r2, [pc, #96]	; (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00e      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a16      	ldr	r2, [pc, #88]	; (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d009      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a15      	ldr	r2, [pc, #84]	; (8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d004      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a13      	ldr	r2, [pc, #76]	; (8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d10c      	bne.n	8005da4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	40010000 	.word	0x40010000
 8005dc8:	40000400 	.word	0x40000400
 8005dcc:	40000800 	.word	0x40000800
 8005dd0:	40000c00 	.word	0x40000c00
 8005dd4:	40014000 	.word	0x40014000

08005dd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e03f      	b.n	8005e6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d106      	bne.n	8005e04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fb fda8 	bl	8001954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2224      	movs	r2, #36	; 0x24
 8005e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f829 	bl	8005e74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	691a      	ldr	r2, [r3, #16]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695a      	ldr	r2, [r3, #20]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68da      	ldr	r2, [r3, #12]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
	...

08005e74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e78:	b085      	sub	sp, #20
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68da      	ldr	r2, [r3, #12]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005eb6:	f023 030c 	bic.w	r3, r3, #12
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	6812      	ldr	r2, [r2, #0]
 8005ebe:	68f9      	ldr	r1, [r7, #12]
 8005ec0:	430b      	orrs	r3, r1
 8005ec2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	699a      	ldr	r2, [r3, #24]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ee2:	f040 818b 	bne.w	80061fc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4ac1      	ldr	r2, [pc, #772]	; (80061f0 <UART_SetConfig+0x37c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d005      	beq.n	8005efc <UART_SetConfig+0x88>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4abf      	ldr	r2, [pc, #764]	; (80061f4 <UART_SetConfig+0x380>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	f040 80bd 	bne.w	8006076 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005efc:	f7fe fe98 	bl	8004c30 <HAL_RCC_GetPCLK2Freq>
 8005f00:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	461d      	mov	r5, r3
 8005f06:	f04f 0600 	mov.w	r6, #0
 8005f0a:	46a8      	mov	r8, r5
 8005f0c:	46b1      	mov	r9, r6
 8005f0e:	eb18 0308 	adds.w	r3, r8, r8
 8005f12:	eb49 0409 	adc.w	r4, r9, r9
 8005f16:	4698      	mov	r8, r3
 8005f18:	46a1      	mov	r9, r4
 8005f1a:	eb18 0805 	adds.w	r8, r8, r5
 8005f1e:	eb49 0906 	adc.w	r9, r9, r6
 8005f22:	f04f 0100 	mov.w	r1, #0
 8005f26:	f04f 0200 	mov.w	r2, #0
 8005f2a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f2e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f32:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f36:	4688      	mov	r8, r1
 8005f38:	4691      	mov	r9, r2
 8005f3a:	eb18 0005 	adds.w	r0, r8, r5
 8005f3e:	eb49 0106 	adc.w	r1, r9, r6
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	461d      	mov	r5, r3
 8005f48:	f04f 0600 	mov.w	r6, #0
 8005f4c:	196b      	adds	r3, r5, r5
 8005f4e:	eb46 0406 	adc.w	r4, r6, r6
 8005f52:	461a      	mov	r2, r3
 8005f54:	4623      	mov	r3, r4
 8005f56:	f7fa fe7f 	bl	8000c58 <__aeabi_uldivmod>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	461a      	mov	r2, r3
 8005f60:	4ba5      	ldr	r3, [pc, #660]	; (80061f8 <UART_SetConfig+0x384>)
 8005f62:	fba3 2302 	umull	r2, r3, r3, r2
 8005f66:	095b      	lsrs	r3, r3, #5
 8005f68:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	461d      	mov	r5, r3
 8005f70:	f04f 0600 	mov.w	r6, #0
 8005f74:	46a9      	mov	r9, r5
 8005f76:	46b2      	mov	sl, r6
 8005f78:	eb19 0309 	adds.w	r3, r9, r9
 8005f7c:	eb4a 040a 	adc.w	r4, sl, sl
 8005f80:	4699      	mov	r9, r3
 8005f82:	46a2      	mov	sl, r4
 8005f84:	eb19 0905 	adds.w	r9, r9, r5
 8005f88:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f8c:	f04f 0100 	mov.w	r1, #0
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fa0:	4689      	mov	r9, r1
 8005fa2:	4692      	mov	sl, r2
 8005fa4:	eb19 0005 	adds.w	r0, r9, r5
 8005fa8:	eb4a 0106 	adc.w	r1, sl, r6
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	461d      	mov	r5, r3
 8005fb2:	f04f 0600 	mov.w	r6, #0
 8005fb6:	196b      	adds	r3, r5, r5
 8005fb8:	eb46 0406 	adc.w	r4, r6, r6
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	4623      	mov	r3, r4
 8005fc0:	f7fa fe4a 	bl	8000c58 <__aeabi_uldivmod>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	461a      	mov	r2, r3
 8005fca:	4b8b      	ldr	r3, [pc, #556]	; (80061f8 <UART_SetConfig+0x384>)
 8005fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8005fd0:	095b      	lsrs	r3, r3, #5
 8005fd2:	2164      	movs	r1, #100	; 0x64
 8005fd4:	fb01 f303 	mul.w	r3, r1, r3
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	3332      	adds	r3, #50	; 0x32
 8005fde:	4a86      	ldr	r2, [pc, #536]	; (80061f8 <UART_SetConfig+0x384>)
 8005fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe4:	095b      	lsrs	r3, r3, #5
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fec:	4498      	add	r8, r3
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	461d      	mov	r5, r3
 8005ff2:	f04f 0600 	mov.w	r6, #0
 8005ff6:	46a9      	mov	r9, r5
 8005ff8:	46b2      	mov	sl, r6
 8005ffa:	eb19 0309 	adds.w	r3, r9, r9
 8005ffe:	eb4a 040a 	adc.w	r4, sl, sl
 8006002:	4699      	mov	r9, r3
 8006004:	46a2      	mov	sl, r4
 8006006:	eb19 0905 	adds.w	r9, r9, r5
 800600a:	eb4a 0a06 	adc.w	sl, sl, r6
 800600e:	f04f 0100 	mov.w	r1, #0
 8006012:	f04f 0200 	mov.w	r2, #0
 8006016:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800601a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800601e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006022:	4689      	mov	r9, r1
 8006024:	4692      	mov	sl, r2
 8006026:	eb19 0005 	adds.w	r0, r9, r5
 800602a:	eb4a 0106 	adc.w	r1, sl, r6
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	461d      	mov	r5, r3
 8006034:	f04f 0600 	mov.w	r6, #0
 8006038:	196b      	adds	r3, r5, r5
 800603a:	eb46 0406 	adc.w	r4, r6, r6
 800603e:	461a      	mov	r2, r3
 8006040:	4623      	mov	r3, r4
 8006042:	f7fa fe09 	bl	8000c58 <__aeabi_uldivmod>
 8006046:	4603      	mov	r3, r0
 8006048:	460c      	mov	r4, r1
 800604a:	461a      	mov	r2, r3
 800604c:	4b6a      	ldr	r3, [pc, #424]	; (80061f8 <UART_SetConfig+0x384>)
 800604e:	fba3 1302 	umull	r1, r3, r3, r2
 8006052:	095b      	lsrs	r3, r3, #5
 8006054:	2164      	movs	r1, #100	; 0x64
 8006056:	fb01 f303 	mul.w	r3, r1, r3
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	00db      	lsls	r3, r3, #3
 800605e:	3332      	adds	r3, #50	; 0x32
 8006060:	4a65      	ldr	r2, [pc, #404]	; (80061f8 <UART_SetConfig+0x384>)
 8006062:	fba2 2303 	umull	r2, r3, r2, r3
 8006066:	095b      	lsrs	r3, r3, #5
 8006068:	f003 0207 	and.w	r2, r3, #7
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4442      	add	r2, r8
 8006072:	609a      	str	r2, [r3, #8]
 8006074:	e26f      	b.n	8006556 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006076:	f7fe fdc7 	bl	8004c08 <HAL_RCC_GetPCLK1Freq>
 800607a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	461d      	mov	r5, r3
 8006080:	f04f 0600 	mov.w	r6, #0
 8006084:	46a8      	mov	r8, r5
 8006086:	46b1      	mov	r9, r6
 8006088:	eb18 0308 	adds.w	r3, r8, r8
 800608c:	eb49 0409 	adc.w	r4, r9, r9
 8006090:	4698      	mov	r8, r3
 8006092:	46a1      	mov	r9, r4
 8006094:	eb18 0805 	adds.w	r8, r8, r5
 8006098:	eb49 0906 	adc.w	r9, r9, r6
 800609c:	f04f 0100 	mov.w	r1, #0
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060b0:	4688      	mov	r8, r1
 80060b2:	4691      	mov	r9, r2
 80060b4:	eb18 0005 	adds.w	r0, r8, r5
 80060b8:	eb49 0106 	adc.w	r1, r9, r6
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	461d      	mov	r5, r3
 80060c2:	f04f 0600 	mov.w	r6, #0
 80060c6:	196b      	adds	r3, r5, r5
 80060c8:	eb46 0406 	adc.w	r4, r6, r6
 80060cc:	461a      	mov	r2, r3
 80060ce:	4623      	mov	r3, r4
 80060d0:	f7fa fdc2 	bl	8000c58 <__aeabi_uldivmod>
 80060d4:	4603      	mov	r3, r0
 80060d6:	460c      	mov	r4, r1
 80060d8:	461a      	mov	r2, r3
 80060da:	4b47      	ldr	r3, [pc, #284]	; (80061f8 <UART_SetConfig+0x384>)
 80060dc:	fba3 2302 	umull	r2, r3, r3, r2
 80060e0:	095b      	lsrs	r3, r3, #5
 80060e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	461d      	mov	r5, r3
 80060ea:	f04f 0600 	mov.w	r6, #0
 80060ee:	46a9      	mov	r9, r5
 80060f0:	46b2      	mov	sl, r6
 80060f2:	eb19 0309 	adds.w	r3, r9, r9
 80060f6:	eb4a 040a 	adc.w	r4, sl, sl
 80060fa:	4699      	mov	r9, r3
 80060fc:	46a2      	mov	sl, r4
 80060fe:	eb19 0905 	adds.w	r9, r9, r5
 8006102:	eb4a 0a06 	adc.w	sl, sl, r6
 8006106:	f04f 0100 	mov.w	r1, #0
 800610a:	f04f 0200 	mov.w	r2, #0
 800610e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006112:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006116:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800611a:	4689      	mov	r9, r1
 800611c:	4692      	mov	sl, r2
 800611e:	eb19 0005 	adds.w	r0, r9, r5
 8006122:	eb4a 0106 	adc.w	r1, sl, r6
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	461d      	mov	r5, r3
 800612c:	f04f 0600 	mov.w	r6, #0
 8006130:	196b      	adds	r3, r5, r5
 8006132:	eb46 0406 	adc.w	r4, r6, r6
 8006136:	461a      	mov	r2, r3
 8006138:	4623      	mov	r3, r4
 800613a:	f7fa fd8d 	bl	8000c58 <__aeabi_uldivmod>
 800613e:	4603      	mov	r3, r0
 8006140:	460c      	mov	r4, r1
 8006142:	461a      	mov	r2, r3
 8006144:	4b2c      	ldr	r3, [pc, #176]	; (80061f8 <UART_SetConfig+0x384>)
 8006146:	fba3 1302 	umull	r1, r3, r3, r2
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	2164      	movs	r1, #100	; 0x64
 800614e:	fb01 f303 	mul.w	r3, r1, r3
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	3332      	adds	r3, #50	; 0x32
 8006158:	4a27      	ldr	r2, [pc, #156]	; (80061f8 <UART_SetConfig+0x384>)
 800615a:	fba2 2303 	umull	r2, r3, r2, r3
 800615e:	095b      	lsrs	r3, r3, #5
 8006160:	005b      	lsls	r3, r3, #1
 8006162:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006166:	4498      	add	r8, r3
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	461d      	mov	r5, r3
 800616c:	f04f 0600 	mov.w	r6, #0
 8006170:	46a9      	mov	r9, r5
 8006172:	46b2      	mov	sl, r6
 8006174:	eb19 0309 	adds.w	r3, r9, r9
 8006178:	eb4a 040a 	adc.w	r4, sl, sl
 800617c:	4699      	mov	r9, r3
 800617e:	46a2      	mov	sl, r4
 8006180:	eb19 0905 	adds.w	r9, r9, r5
 8006184:	eb4a 0a06 	adc.w	sl, sl, r6
 8006188:	f04f 0100 	mov.w	r1, #0
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006194:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006198:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800619c:	4689      	mov	r9, r1
 800619e:	4692      	mov	sl, r2
 80061a0:	eb19 0005 	adds.w	r0, r9, r5
 80061a4:	eb4a 0106 	adc.w	r1, sl, r6
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	461d      	mov	r5, r3
 80061ae:	f04f 0600 	mov.w	r6, #0
 80061b2:	196b      	adds	r3, r5, r5
 80061b4:	eb46 0406 	adc.w	r4, r6, r6
 80061b8:	461a      	mov	r2, r3
 80061ba:	4623      	mov	r3, r4
 80061bc:	f7fa fd4c 	bl	8000c58 <__aeabi_uldivmod>
 80061c0:	4603      	mov	r3, r0
 80061c2:	460c      	mov	r4, r1
 80061c4:	461a      	mov	r2, r3
 80061c6:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <UART_SetConfig+0x384>)
 80061c8:	fba3 1302 	umull	r1, r3, r3, r2
 80061cc:	095b      	lsrs	r3, r3, #5
 80061ce:	2164      	movs	r1, #100	; 0x64
 80061d0:	fb01 f303 	mul.w	r3, r1, r3
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	00db      	lsls	r3, r3, #3
 80061d8:	3332      	adds	r3, #50	; 0x32
 80061da:	4a07      	ldr	r2, [pc, #28]	; (80061f8 <UART_SetConfig+0x384>)
 80061dc:	fba2 2303 	umull	r2, r3, r2, r3
 80061e0:	095b      	lsrs	r3, r3, #5
 80061e2:	f003 0207 	and.w	r2, r3, #7
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4442      	add	r2, r8
 80061ec:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80061ee:	e1b2      	b.n	8006556 <UART_SetConfig+0x6e2>
 80061f0:	40011000 	.word	0x40011000
 80061f4:	40011400 	.word	0x40011400
 80061f8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4ad7      	ldr	r2, [pc, #860]	; (8006560 <UART_SetConfig+0x6ec>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d005      	beq.n	8006212 <UART_SetConfig+0x39e>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4ad6      	ldr	r2, [pc, #856]	; (8006564 <UART_SetConfig+0x6f0>)
 800620c:	4293      	cmp	r3, r2
 800620e:	f040 80d1 	bne.w	80063b4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006212:	f7fe fd0d 	bl	8004c30 <HAL_RCC_GetPCLK2Freq>
 8006216:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	469a      	mov	sl, r3
 800621c:	f04f 0b00 	mov.w	fp, #0
 8006220:	46d0      	mov	r8, sl
 8006222:	46d9      	mov	r9, fp
 8006224:	eb18 0308 	adds.w	r3, r8, r8
 8006228:	eb49 0409 	adc.w	r4, r9, r9
 800622c:	4698      	mov	r8, r3
 800622e:	46a1      	mov	r9, r4
 8006230:	eb18 080a 	adds.w	r8, r8, sl
 8006234:	eb49 090b 	adc.w	r9, r9, fp
 8006238:	f04f 0100 	mov.w	r1, #0
 800623c:	f04f 0200 	mov.w	r2, #0
 8006240:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006244:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006248:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800624c:	4688      	mov	r8, r1
 800624e:	4691      	mov	r9, r2
 8006250:	eb1a 0508 	adds.w	r5, sl, r8
 8006254:	eb4b 0609 	adc.w	r6, fp, r9
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	4619      	mov	r1, r3
 800625e:	f04f 0200 	mov.w	r2, #0
 8006262:	f04f 0300 	mov.w	r3, #0
 8006266:	f04f 0400 	mov.w	r4, #0
 800626a:	0094      	lsls	r4, r2, #2
 800626c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006270:	008b      	lsls	r3, r1, #2
 8006272:	461a      	mov	r2, r3
 8006274:	4623      	mov	r3, r4
 8006276:	4628      	mov	r0, r5
 8006278:	4631      	mov	r1, r6
 800627a:	f7fa fced 	bl	8000c58 <__aeabi_uldivmod>
 800627e:	4603      	mov	r3, r0
 8006280:	460c      	mov	r4, r1
 8006282:	461a      	mov	r2, r3
 8006284:	4bb8      	ldr	r3, [pc, #736]	; (8006568 <UART_SetConfig+0x6f4>)
 8006286:	fba3 2302 	umull	r2, r3, r3, r2
 800628a:	095b      	lsrs	r3, r3, #5
 800628c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	469b      	mov	fp, r3
 8006294:	f04f 0c00 	mov.w	ip, #0
 8006298:	46d9      	mov	r9, fp
 800629a:	46e2      	mov	sl, ip
 800629c:	eb19 0309 	adds.w	r3, r9, r9
 80062a0:	eb4a 040a 	adc.w	r4, sl, sl
 80062a4:	4699      	mov	r9, r3
 80062a6:	46a2      	mov	sl, r4
 80062a8:	eb19 090b 	adds.w	r9, r9, fp
 80062ac:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062b0:	f04f 0100 	mov.w	r1, #0
 80062b4:	f04f 0200 	mov.w	r2, #0
 80062b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062c4:	4689      	mov	r9, r1
 80062c6:	4692      	mov	sl, r2
 80062c8:	eb1b 0509 	adds.w	r5, fp, r9
 80062cc:	eb4c 060a 	adc.w	r6, ip, sl
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	4619      	mov	r1, r3
 80062d6:	f04f 0200 	mov.w	r2, #0
 80062da:	f04f 0300 	mov.w	r3, #0
 80062de:	f04f 0400 	mov.w	r4, #0
 80062e2:	0094      	lsls	r4, r2, #2
 80062e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062e8:	008b      	lsls	r3, r1, #2
 80062ea:	461a      	mov	r2, r3
 80062ec:	4623      	mov	r3, r4
 80062ee:	4628      	mov	r0, r5
 80062f0:	4631      	mov	r1, r6
 80062f2:	f7fa fcb1 	bl	8000c58 <__aeabi_uldivmod>
 80062f6:	4603      	mov	r3, r0
 80062f8:	460c      	mov	r4, r1
 80062fa:	461a      	mov	r2, r3
 80062fc:	4b9a      	ldr	r3, [pc, #616]	; (8006568 <UART_SetConfig+0x6f4>)
 80062fe:	fba3 1302 	umull	r1, r3, r3, r2
 8006302:	095b      	lsrs	r3, r3, #5
 8006304:	2164      	movs	r1, #100	; 0x64
 8006306:	fb01 f303 	mul.w	r3, r1, r3
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	011b      	lsls	r3, r3, #4
 800630e:	3332      	adds	r3, #50	; 0x32
 8006310:	4a95      	ldr	r2, [pc, #596]	; (8006568 <UART_SetConfig+0x6f4>)
 8006312:	fba2 2303 	umull	r2, r3, r2, r3
 8006316:	095b      	lsrs	r3, r3, #5
 8006318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800631c:	4498      	add	r8, r3
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	469b      	mov	fp, r3
 8006322:	f04f 0c00 	mov.w	ip, #0
 8006326:	46d9      	mov	r9, fp
 8006328:	46e2      	mov	sl, ip
 800632a:	eb19 0309 	adds.w	r3, r9, r9
 800632e:	eb4a 040a 	adc.w	r4, sl, sl
 8006332:	4699      	mov	r9, r3
 8006334:	46a2      	mov	sl, r4
 8006336:	eb19 090b 	adds.w	r9, r9, fp
 800633a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800633e:	f04f 0100 	mov.w	r1, #0
 8006342:	f04f 0200 	mov.w	r2, #0
 8006346:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800634a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800634e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006352:	4689      	mov	r9, r1
 8006354:	4692      	mov	sl, r2
 8006356:	eb1b 0509 	adds.w	r5, fp, r9
 800635a:	eb4c 060a 	adc.w	r6, ip, sl
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	4619      	mov	r1, r3
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	f04f 0300 	mov.w	r3, #0
 800636c:	f04f 0400 	mov.w	r4, #0
 8006370:	0094      	lsls	r4, r2, #2
 8006372:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006376:	008b      	lsls	r3, r1, #2
 8006378:	461a      	mov	r2, r3
 800637a:	4623      	mov	r3, r4
 800637c:	4628      	mov	r0, r5
 800637e:	4631      	mov	r1, r6
 8006380:	f7fa fc6a 	bl	8000c58 <__aeabi_uldivmod>
 8006384:	4603      	mov	r3, r0
 8006386:	460c      	mov	r4, r1
 8006388:	461a      	mov	r2, r3
 800638a:	4b77      	ldr	r3, [pc, #476]	; (8006568 <UART_SetConfig+0x6f4>)
 800638c:	fba3 1302 	umull	r1, r3, r3, r2
 8006390:	095b      	lsrs	r3, r3, #5
 8006392:	2164      	movs	r1, #100	; 0x64
 8006394:	fb01 f303 	mul.w	r3, r1, r3
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	011b      	lsls	r3, r3, #4
 800639c:	3332      	adds	r3, #50	; 0x32
 800639e:	4a72      	ldr	r2, [pc, #456]	; (8006568 <UART_SetConfig+0x6f4>)
 80063a0:	fba2 2303 	umull	r2, r3, r2, r3
 80063a4:	095b      	lsrs	r3, r3, #5
 80063a6:	f003 020f 	and.w	r2, r3, #15
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4442      	add	r2, r8
 80063b0:	609a      	str	r2, [r3, #8]
 80063b2:	e0d0      	b.n	8006556 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80063b4:	f7fe fc28 	bl	8004c08 <HAL_RCC_GetPCLK1Freq>
 80063b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	469a      	mov	sl, r3
 80063be:	f04f 0b00 	mov.w	fp, #0
 80063c2:	46d0      	mov	r8, sl
 80063c4:	46d9      	mov	r9, fp
 80063c6:	eb18 0308 	adds.w	r3, r8, r8
 80063ca:	eb49 0409 	adc.w	r4, r9, r9
 80063ce:	4698      	mov	r8, r3
 80063d0:	46a1      	mov	r9, r4
 80063d2:	eb18 080a 	adds.w	r8, r8, sl
 80063d6:	eb49 090b 	adc.w	r9, r9, fp
 80063da:	f04f 0100 	mov.w	r1, #0
 80063de:	f04f 0200 	mov.w	r2, #0
 80063e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80063e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80063ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80063ee:	4688      	mov	r8, r1
 80063f0:	4691      	mov	r9, r2
 80063f2:	eb1a 0508 	adds.w	r5, sl, r8
 80063f6:	eb4b 0609 	adc.w	r6, fp, r9
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	4619      	mov	r1, r3
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	f04f 0400 	mov.w	r4, #0
 800640c:	0094      	lsls	r4, r2, #2
 800640e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006412:	008b      	lsls	r3, r1, #2
 8006414:	461a      	mov	r2, r3
 8006416:	4623      	mov	r3, r4
 8006418:	4628      	mov	r0, r5
 800641a:	4631      	mov	r1, r6
 800641c:	f7fa fc1c 	bl	8000c58 <__aeabi_uldivmod>
 8006420:	4603      	mov	r3, r0
 8006422:	460c      	mov	r4, r1
 8006424:	461a      	mov	r2, r3
 8006426:	4b50      	ldr	r3, [pc, #320]	; (8006568 <UART_SetConfig+0x6f4>)
 8006428:	fba3 2302 	umull	r2, r3, r3, r2
 800642c:	095b      	lsrs	r3, r3, #5
 800642e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	469b      	mov	fp, r3
 8006436:	f04f 0c00 	mov.w	ip, #0
 800643a:	46d9      	mov	r9, fp
 800643c:	46e2      	mov	sl, ip
 800643e:	eb19 0309 	adds.w	r3, r9, r9
 8006442:	eb4a 040a 	adc.w	r4, sl, sl
 8006446:	4699      	mov	r9, r3
 8006448:	46a2      	mov	sl, r4
 800644a:	eb19 090b 	adds.w	r9, r9, fp
 800644e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006452:	f04f 0100 	mov.w	r1, #0
 8006456:	f04f 0200 	mov.w	r2, #0
 800645a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800645e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006462:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006466:	4689      	mov	r9, r1
 8006468:	4692      	mov	sl, r2
 800646a:	eb1b 0509 	adds.w	r5, fp, r9
 800646e:	eb4c 060a 	adc.w	r6, ip, sl
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	4619      	mov	r1, r3
 8006478:	f04f 0200 	mov.w	r2, #0
 800647c:	f04f 0300 	mov.w	r3, #0
 8006480:	f04f 0400 	mov.w	r4, #0
 8006484:	0094      	lsls	r4, r2, #2
 8006486:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800648a:	008b      	lsls	r3, r1, #2
 800648c:	461a      	mov	r2, r3
 800648e:	4623      	mov	r3, r4
 8006490:	4628      	mov	r0, r5
 8006492:	4631      	mov	r1, r6
 8006494:	f7fa fbe0 	bl	8000c58 <__aeabi_uldivmod>
 8006498:	4603      	mov	r3, r0
 800649a:	460c      	mov	r4, r1
 800649c:	461a      	mov	r2, r3
 800649e:	4b32      	ldr	r3, [pc, #200]	; (8006568 <UART_SetConfig+0x6f4>)
 80064a0:	fba3 1302 	umull	r1, r3, r3, r2
 80064a4:	095b      	lsrs	r3, r3, #5
 80064a6:	2164      	movs	r1, #100	; 0x64
 80064a8:	fb01 f303 	mul.w	r3, r1, r3
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	011b      	lsls	r3, r3, #4
 80064b0:	3332      	adds	r3, #50	; 0x32
 80064b2:	4a2d      	ldr	r2, [pc, #180]	; (8006568 <UART_SetConfig+0x6f4>)
 80064b4:	fba2 2303 	umull	r2, r3, r2, r3
 80064b8:	095b      	lsrs	r3, r3, #5
 80064ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064be:	4498      	add	r8, r3
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	469b      	mov	fp, r3
 80064c4:	f04f 0c00 	mov.w	ip, #0
 80064c8:	46d9      	mov	r9, fp
 80064ca:	46e2      	mov	sl, ip
 80064cc:	eb19 0309 	adds.w	r3, r9, r9
 80064d0:	eb4a 040a 	adc.w	r4, sl, sl
 80064d4:	4699      	mov	r9, r3
 80064d6:	46a2      	mov	sl, r4
 80064d8:	eb19 090b 	adds.w	r9, r9, fp
 80064dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80064e0:	f04f 0100 	mov.w	r1, #0
 80064e4:	f04f 0200 	mov.w	r2, #0
 80064e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064f4:	4689      	mov	r9, r1
 80064f6:	4692      	mov	sl, r2
 80064f8:	eb1b 0509 	adds.w	r5, fp, r9
 80064fc:	eb4c 060a 	adc.w	r6, ip, sl
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	4619      	mov	r1, r3
 8006506:	f04f 0200 	mov.w	r2, #0
 800650a:	f04f 0300 	mov.w	r3, #0
 800650e:	f04f 0400 	mov.w	r4, #0
 8006512:	0094      	lsls	r4, r2, #2
 8006514:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006518:	008b      	lsls	r3, r1, #2
 800651a:	461a      	mov	r2, r3
 800651c:	4623      	mov	r3, r4
 800651e:	4628      	mov	r0, r5
 8006520:	4631      	mov	r1, r6
 8006522:	f7fa fb99 	bl	8000c58 <__aeabi_uldivmod>
 8006526:	4603      	mov	r3, r0
 8006528:	460c      	mov	r4, r1
 800652a:	461a      	mov	r2, r3
 800652c:	4b0e      	ldr	r3, [pc, #56]	; (8006568 <UART_SetConfig+0x6f4>)
 800652e:	fba3 1302 	umull	r1, r3, r3, r2
 8006532:	095b      	lsrs	r3, r3, #5
 8006534:	2164      	movs	r1, #100	; 0x64
 8006536:	fb01 f303 	mul.w	r3, r1, r3
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	011b      	lsls	r3, r3, #4
 800653e:	3332      	adds	r3, #50	; 0x32
 8006540:	4a09      	ldr	r2, [pc, #36]	; (8006568 <UART_SetConfig+0x6f4>)
 8006542:	fba2 2303 	umull	r2, r3, r2, r3
 8006546:	095b      	lsrs	r3, r3, #5
 8006548:	f003 020f 	and.w	r2, r3, #15
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4442      	add	r2, r8
 8006552:	609a      	str	r2, [r3, #8]
}
 8006554:	e7ff      	b.n	8006556 <UART_SetConfig+0x6e2>
 8006556:	bf00      	nop
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006560:	40011000 	.word	0x40011000
 8006564:	40011400 	.word	0x40011400
 8006568:	51eb851f 	.word	0x51eb851f

0800656c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800656c:	b084      	sub	sp, #16
 800656e:	b580      	push	{r7, lr}
 8006570:	b084      	sub	sp, #16
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
 8006576:	f107 001c 	add.w	r0, r7, #28
 800657a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800657e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006580:	2b01      	cmp	r3, #1
 8006582:	d122      	bne.n	80065ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006588:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d105      	bne.n	80065be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f001 fac6 	bl	8007b50 <USB_CoreReset>
 80065c4:	4603      	mov	r3, r0
 80065c6:	73fb      	strb	r3, [r7, #15]
 80065c8:	e01a      	b.n	8006600 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f001 faba 	bl	8007b50 <USB_CoreReset>
 80065dc:	4603      	mov	r3, r0
 80065de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80065e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d106      	bne.n	80065f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	639a      	str	r2, [r3, #56]	; 0x38
 80065f2:	e005      	b.n	8006600 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	2b01      	cmp	r3, #1
 8006604:	d10b      	bne.n	800661e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f043 0206 	orr.w	r2, r3, #6
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f043 0220 	orr.w	r2, r3, #32
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800661e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800662a:	b004      	add	sp, #16
 800662c:	4770      	bx	lr
	...

08006630 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	4613      	mov	r3, r2
 800663c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800663e:	79fb      	ldrb	r3, [r7, #7]
 8006640:	2b02      	cmp	r3, #2
 8006642:	d165      	bne.n	8006710 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	4a41      	ldr	r2, [pc, #260]	; (800674c <USB_SetTurnaroundTime+0x11c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d906      	bls.n	800665a <USB_SetTurnaroundTime+0x2a>
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	4a40      	ldr	r2, [pc, #256]	; (8006750 <USB_SetTurnaroundTime+0x120>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d802      	bhi.n	800665a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006654:	230f      	movs	r3, #15
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	e062      	b.n	8006720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	4a3c      	ldr	r2, [pc, #240]	; (8006750 <USB_SetTurnaroundTime+0x120>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d906      	bls.n	8006670 <USB_SetTurnaroundTime+0x40>
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	4a3b      	ldr	r2, [pc, #236]	; (8006754 <USB_SetTurnaroundTime+0x124>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d802      	bhi.n	8006670 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800666a:	230e      	movs	r3, #14
 800666c:	617b      	str	r3, [r7, #20]
 800666e:	e057      	b.n	8006720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	4a38      	ldr	r2, [pc, #224]	; (8006754 <USB_SetTurnaroundTime+0x124>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d906      	bls.n	8006686 <USB_SetTurnaroundTime+0x56>
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	4a37      	ldr	r2, [pc, #220]	; (8006758 <USB_SetTurnaroundTime+0x128>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d802      	bhi.n	8006686 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006680:	230d      	movs	r3, #13
 8006682:	617b      	str	r3, [r7, #20]
 8006684:	e04c      	b.n	8006720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	4a33      	ldr	r2, [pc, #204]	; (8006758 <USB_SetTurnaroundTime+0x128>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d906      	bls.n	800669c <USB_SetTurnaroundTime+0x6c>
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	4a32      	ldr	r2, [pc, #200]	; (800675c <USB_SetTurnaroundTime+0x12c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d802      	bhi.n	800669c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006696:	230c      	movs	r3, #12
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	e041      	b.n	8006720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	4a2f      	ldr	r2, [pc, #188]	; (800675c <USB_SetTurnaroundTime+0x12c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d906      	bls.n	80066b2 <USB_SetTurnaroundTime+0x82>
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	4a2e      	ldr	r2, [pc, #184]	; (8006760 <USB_SetTurnaroundTime+0x130>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d802      	bhi.n	80066b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80066ac:	230b      	movs	r3, #11
 80066ae:	617b      	str	r3, [r7, #20]
 80066b0:	e036      	b.n	8006720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	4a2a      	ldr	r2, [pc, #168]	; (8006760 <USB_SetTurnaroundTime+0x130>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d906      	bls.n	80066c8 <USB_SetTurnaroundTime+0x98>
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	4a29      	ldr	r2, [pc, #164]	; (8006764 <USB_SetTurnaroundTime+0x134>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d802      	bhi.n	80066c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80066c2:	230a      	movs	r3, #10
 80066c4:	617b      	str	r3, [r7, #20]
 80066c6:	e02b      	b.n	8006720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	4a26      	ldr	r2, [pc, #152]	; (8006764 <USB_SetTurnaroundTime+0x134>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d906      	bls.n	80066de <USB_SetTurnaroundTime+0xae>
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	4a25      	ldr	r2, [pc, #148]	; (8006768 <USB_SetTurnaroundTime+0x138>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d802      	bhi.n	80066de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80066d8:	2309      	movs	r3, #9
 80066da:	617b      	str	r3, [r7, #20]
 80066dc:	e020      	b.n	8006720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	4a21      	ldr	r2, [pc, #132]	; (8006768 <USB_SetTurnaroundTime+0x138>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d906      	bls.n	80066f4 <USB_SetTurnaroundTime+0xc4>
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	4a20      	ldr	r2, [pc, #128]	; (800676c <USB_SetTurnaroundTime+0x13c>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d802      	bhi.n	80066f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80066ee:	2308      	movs	r3, #8
 80066f0:	617b      	str	r3, [r7, #20]
 80066f2:	e015      	b.n	8006720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	4a1d      	ldr	r2, [pc, #116]	; (800676c <USB_SetTurnaroundTime+0x13c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d906      	bls.n	800670a <USB_SetTurnaroundTime+0xda>
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	4a1c      	ldr	r2, [pc, #112]	; (8006770 <USB_SetTurnaroundTime+0x140>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d802      	bhi.n	800670a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006704:	2307      	movs	r3, #7
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	e00a      	b.n	8006720 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800670a:	2306      	movs	r3, #6
 800670c:	617b      	str	r3, [r7, #20]
 800670e:	e007      	b.n	8006720 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006710:	79fb      	ldrb	r3, [r7, #7]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d102      	bne.n	800671c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006716:	2309      	movs	r3, #9
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	e001      	b.n	8006720 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800671c:	2309      	movs	r3, #9
 800671e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	029b      	lsls	r3, r3, #10
 8006734:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006738:	431a      	orrs	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	371c      	adds	r7, #28
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	00d8acbf 	.word	0x00d8acbf
 8006750:	00e4e1bf 	.word	0x00e4e1bf
 8006754:	00f423ff 	.word	0x00f423ff
 8006758:	0106737f 	.word	0x0106737f
 800675c:	011a499f 	.word	0x011a499f
 8006760:	01312cff 	.word	0x01312cff
 8006764:	014ca43f 	.word	0x014ca43f
 8006768:	016e35ff 	.word	0x016e35ff
 800676c:	01a6ab1f 	.word	0x01a6ab1f
 8006770:	01e847ff 	.word	0x01e847ff

08006774 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f043 0201 	orr.w	r2, r3, #1
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006796:	b480      	push	{r7}
 8006798:	b083      	sub	sp, #12
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f023 0201 	bic.w	r2, r3, #1
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	460b      	mov	r3, r1
 80067c2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80067d0:	78fb      	ldrb	r3, [r7, #3]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d106      	bne.n	80067e4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	60da      	str	r2, [r3, #12]
 80067e2:	e00b      	b.n	80067fc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80067e4:	78fb      	ldrb	r3, [r7, #3]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d106      	bne.n	80067f8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	60da      	str	r2, [r3, #12]
 80067f6:	e001      	b.n	80067fc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e003      	b.n	8006804 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80067fc:	2032      	movs	r0, #50	; 0x32
 80067fe:	f7fb fd99 	bl	8002334 <HAL_Delay>

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3708      	adds	r7, #8
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800680c:	b084      	sub	sp, #16
 800680e:	b580      	push	{r7, lr}
 8006810:	b086      	sub	sp, #24
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800681a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800681e:	2300      	movs	r3, #0
 8006820:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006826:	2300      	movs	r3, #0
 8006828:	613b      	str	r3, [r7, #16]
 800682a:	e009      	b.n	8006840 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	3340      	adds	r3, #64	; 0x40
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	2200      	movs	r2, #0
 8006838:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	3301      	adds	r3, #1
 800683e:	613b      	str	r3, [r7, #16]
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	2b0e      	cmp	r3, #14
 8006844:	d9f2      	bls.n	800682c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006848:	2b00      	cmp	r3, #0
 800684a:	d11c      	bne.n	8006886 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800685a:	f043 0302 	orr.w	r3, r3, #2
 800685e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006864:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006870:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	639a      	str	r2, [r3, #56]	; 0x38
 8006884:	e00b      	b.n	800689e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006896:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068a4:	461a      	mov	r2, r3
 80068a6:	2300      	movs	r3, #0
 80068a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b0:	4619      	mov	r1, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b8:	461a      	mov	r2, r3
 80068ba:	680b      	ldr	r3, [r1, #0]
 80068bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d10c      	bne.n	80068de <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80068c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d104      	bne.n	80068d4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80068ca:	2100      	movs	r1, #0
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f949 	bl	8006b64 <USB_SetDevSpeed>
 80068d2:	e008      	b.n	80068e6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80068d4:	2101      	movs	r1, #1
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f944 	bl	8006b64 <USB_SetDevSpeed>
 80068dc:	e003      	b.n	80068e6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80068de:	2103      	movs	r1, #3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f93f 	bl	8006b64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068e6:	2110      	movs	r1, #16
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f8f3 	bl	8006ad4 <USB_FlushTxFifo>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 f911 	bl	8006b20 <USB_FlushRxFifo>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d001      	beq.n	8006908 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690e:	461a      	mov	r2, r3
 8006910:	2300      	movs	r3, #0
 8006912:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800691a:	461a      	mov	r2, r3
 800691c:	2300      	movs	r3, #0
 800691e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006926:	461a      	mov	r2, r3
 8006928:	2300      	movs	r3, #0
 800692a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800692c:	2300      	movs	r3, #0
 800692e:	613b      	str	r3, [r7, #16]
 8006930:	e043      	b.n	80069ba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4413      	add	r3, r2
 800693a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006948:	d118      	bne.n	800697c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10a      	bne.n	8006966 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800695c:	461a      	mov	r2, r3
 800695e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006962:	6013      	str	r3, [r2, #0]
 8006964:	e013      	b.n	800698e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	4413      	add	r3, r2
 800696e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006972:	461a      	mov	r2, r3
 8006974:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006978:	6013      	str	r3, [r2, #0]
 800697a:	e008      	b.n	800698e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006988:	461a      	mov	r2, r3
 800698a:	2300      	movs	r3, #0
 800698c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	4413      	add	r3, r2
 8006996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800699a:	461a      	mov	r2, r3
 800699c:	2300      	movs	r3, #0
 800699e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ac:	461a      	mov	r2, r3
 80069ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	3301      	adds	r3, #1
 80069b8:	613b      	str	r3, [r7, #16]
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d3b7      	bcc.n	8006932 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069c2:	2300      	movs	r3, #0
 80069c4:	613b      	str	r3, [r7, #16]
 80069c6:	e043      	b.n	8006a50 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069de:	d118      	bne.n	8006a12 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10a      	bne.n	80069fc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f2:	461a      	mov	r2, r3
 80069f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069f8:	6013      	str	r3, [r2, #0]
 80069fa:	e013      	b.n	8006a24 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a08:	461a      	mov	r2, r3
 8006a0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a0e:	6013      	str	r3, [r2, #0]
 8006a10:	e008      	b.n	8006a24 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	015a      	lsls	r2, r3, #5
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1e:	461a      	mov	r2, r3
 8006a20:	2300      	movs	r3, #0
 8006a22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a30:	461a      	mov	r2, r3
 8006a32:	2300      	movs	r3, #0
 8006a34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	015a      	lsls	r2, r3, #5
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a42:	461a      	mov	r2, r3
 8006a44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	613b      	str	r3, [r7, #16]
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d3b7      	bcc.n	80069c8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006a78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d105      	bne.n	8006a8c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	f043 0210 	orr.w	r2, r3, #16
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	699a      	ldr	r2, [r3, #24]
 8006a90:	4b0f      	ldr	r3, [pc, #60]	; (8006ad0 <USB_DevInit+0x2c4>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d005      	beq.n	8006aaa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	f043 0208 	orr.w	r2, r3, #8
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d107      	bne.n	8006ac0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ab8:	f043 0304 	orr.w	r3, r3, #4
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006acc:	b004      	add	sp, #16
 8006ace:	4770      	bx	lr
 8006ad0:	803c3800 	.word	0x803c3800

08006ad4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	019b      	lsls	r3, r3, #6
 8006ae6:	f043 0220 	orr.w	r2, r3, #32
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	3301      	adds	r3, #1
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4a09      	ldr	r2, [pc, #36]	; (8006b1c <USB_FlushTxFifo+0x48>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d901      	bls.n	8006b00 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e006      	b.n	8006b0e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	f003 0320 	and.w	r3, r3, #32
 8006b08:	2b20      	cmp	r3, #32
 8006b0a:	d0f0      	beq.n	8006aee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	00030d40 	.word	0x00030d40

08006b20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2210      	movs	r2, #16
 8006b30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	3301      	adds	r3, #1
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	4a09      	ldr	r2, [pc, #36]	; (8006b60 <USB_FlushRxFifo+0x40>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d901      	bls.n	8006b44 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e006      	b.n	8006b52 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	f003 0310 	and.w	r3, r3, #16
 8006b4c:	2b10      	cmp	r3, #16
 8006b4e:	d0f0      	beq.n	8006b32 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	00030d40 	.word	0x00030d40

08006b64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	78fb      	ldrb	r3, [r7, #3]
 8006b7e:	68f9      	ldr	r1, [r7, #12]
 8006b80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b84:	4313      	orrs	r3, r2
 8006b86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b087      	sub	sp, #28
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f003 0306 	and.w	r3, r3, #6
 8006bae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d102      	bne.n	8006bbc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	75fb      	strb	r3, [r7, #23]
 8006bba:	e00a      	b.n	8006bd2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d002      	beq.n	8006bc8 <USB_GetDevSpeed+0x32>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2b06      	cmp	r3, #6
 8006bc6:	d102      	bne.n	8006bce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006bc8:	2302      	movs	r3, #2
 8006bca:	75fb      	strb	r3, [r7, #23]
 8006bcc:	e001      	b.n	8006bd2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006bce:	230f      	movs	r3, #15
 8006bd0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	371c      	adds	r7, #28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	785b      	ldrb	r3, [r3, #1]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d13a      	bne.n	8006c72 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c02:	69da      	ldr	r2, [r3, #28]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	f003 030f 	and.w	r3, r3, #15
 8006c0c:	2101      	movs	r1, #1
 8006c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	68f9      	ldr	r1, [r7, #12]
 8006c16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d155      	bne.n	8006ce0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	78db      	ldrb	r3, [r3, #3]
 8006c4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	059b      	lsls	r3, r3, #22
 8006c56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	0151      	lsls	r1, r2, #5
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	440a      	add	r2, r1
 8006c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c6e:	6013      	str	r3, [r2, #0]
 8006c70:	e036      	b.n	8006ce0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c78:	69da      	ldr	r2, [r3, #28]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	f003 030f 	and.w	r3, r3, #15
 8006c82:	2101      	movs	r1, #1
 8006c84:	fa01 f303 	lsl.w	r3, r1, r3
 8006c88:	041b      	lsls	r3, r3, #16
 8006c8a:	68f9      	ldr	r1, [r7, #12]
 8006c8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c90:	4313      	orrs	r3, r2
 8006c92:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d11a      	bne.n	8006ce0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	78db      	ldrb	r3, [r3, #3]
 8006cc4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006cc6:	430b      	orrs	r3, r1
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	0151      	lsls	r1, r2, #5
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	440a      	add	r2, r1
 8006cd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cde:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
	...

08006cf0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	785b      	ldrb	r3, [r3, #1]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d161      	bne.n	8006dd0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d22:	d11f      	bne.n	8006d64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	0151      	lsls	r1, r2, #5
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	440a      	add	r2, r1
 8006d3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	0151      	lsls	r1, r2, #5
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	440a      	add	r2, r1
 8006d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	f003 030f 	and.w	r3, r3, #15
 8006d74:	2101      	movs	r1, #1
 8006d76:	fa01 f303 	lsl.w	r3, r1, r3
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	43db      	mvns	r3, r3
 8006d7e:	68f9      	ldr	r1, [r7, #12]
 8006d80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d84:	4013      	ands	r3, r2
 8006d86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d8e:	69da      	ldr	r2, [r3, #28]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	f003 030f 	and.w	r3, r3, #15
 8006d98:	2101      	movs	r1, #1
 8006d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	43db      	mvns	r3, r3
 8006da2:	68f9      	ldr	r1, [r7, #12]
 8006da4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006da8:	4013      	ands	r3, r2
 8006daa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	015a      	lsls	r2, r3, #5
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	0159      	lsls	r1, r3, #5
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	440b      	add	r3, r1
 8006dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	4b35      	ldr	r3, [pc, #212]	; (8006ea0 <USB_DeactivateEndpoint+0x1b0>)
 8006dca:	4013      	ands	r3, r2
 8006dcc:	600b      	str	r3, [r1, #0]
 8006dce:	e060      	b.n	8006e92 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	015a      	lsls	r2, r3, #5
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006de2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006de6:	d11f      	bne.n	8006e28 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	0151      	lsls	r1, r2, #5
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	440a      	add	r2, r1
 8006dfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e06:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	0151      	lsls	r1, r2, #5
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	440a      	add	r2, r1
 8006e1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	f003 030f 	and.w	r3, r3, #15
 8006e38:	2101      	movs	r1, #1
 8006e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e3e:	041b      	lsls	r3, r3, #16
 8006e40:	43db      	mvns	r3, r3
 8006e42:	68f9      	ldr	r1, [r7, #12]
 8006e44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e48:	4013      	ands	r3, r2
 8006e4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e52:	69da      	ldr	r2, [r3, #28]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	f003 030f 	and.w	r3, r3, #15
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e62:	041b      	lsls	r3, r3, #16
 8006e64:	43db      	mvns	r3, r3
 8006e66:	68f9      	ldr	r1, [r7, #12]
 8006e68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	0159      	lsls	r1, r3, #5
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	440b      	add	r3, r1
 8006e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	4b05      	ldr	r3, [pc, #20]	; (8006ea4 <USB_DeactivateEndpoint+0x1b4>)
 8006e8e:	4013      	ands	r3, r2
 8006e90:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	ec337800 	.word	0xec337800
 8006ea4:	eff37800 	.word	0xeff37800

08006ea8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b08a      	sub	sp, #40	; 0x28
 8006eac:	af02      	add	r7, sp, #8
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	785b      	ldrb	r3, [r3, #1]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	f040 815c 	bne.w	8007182 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d132      	bne.n	8006f38 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	0151      	lsls	r1, r2, #5
 8006ee4:	69fa      	ldr	r2, [r7, #28]
 8006ee6:	440a      	add	r2, r1
 8006ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ef0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ef4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	0151      	lsls	r1, r2, #5
 8006f08:	69fa      	ldr	r2, [r7, #28]
 8006f0a:	440a      	add	r2, r1
 8006f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	0151      	lsls	r1, r2, #5
 8006f28:	69fa      	ldr	r2, [r7, #28]
 8006f2a:	440a      	add	r2, r1
 8006f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f30:	0cdb      	lsrs	r3, r3, #19
 8006f32:	04db      	lsls	r3, r3, #19
 8006f34:	6113      	str	r3, [r2, #16]
 8006f36:	e074      	b.n	8007022 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	69ba      	ldr	r2, [r7, #24]
 8006f48:	0151      	lsls	r1, r2, #5
 8006f4a:	69fa      	ldr	r2, [r7, #28]
 8006f4c:	440a      	add	r2, r1
 8006f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f52:	0cdb      	lsrs	r3, r3, #19
 8006f54:	04db      	lsls	r3, r3, #19
 8006f56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	0151      	lsls	r1, r2, #5
 8006f6a:	69fa      	ldr	r2, [r7, #28]
 8006f6c:	440a      	add	r2, r1
 8006f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	015a      	lsls	r2, r3, #5
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f88:	691a      	ldr	r2, [r3, #16]
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	6959      	ldr	r1, [r3, #20]
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	440b      	add	r3, r1
 8006f94:	1e59      	subs	r1, r3, #1
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f9e:	04d9      	lsls	r1, r3, #19
 8006fa0:	4b9d      	ldr	r3, [pc, #628]	; (8007218 <USB_EPStartXfer+0x370>)
 8006fa2:	400b      	ands	r3, r1
 8006fa4:	69b9      	ldr	r1, [r7, #24]
 8006fa6:	0148      	lsls	r0, r1, #5
 8006fa8:	69f9      	ldr	r1, [r7, #28]
 8006faa:	4401      	add	r1, r0
 8006fac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc0:	691a      	ldr	r2, [r3, #16]
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fca:	69b9      	ldr	r1, [r7, #24]
 8006fcc:	0148      	lsls	r0, r1, #5
 8006fce:	69f9      	ldr	r1, [r7, #28]
 8006fd0:	4401      	add	r1, r0
 8006fd2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	78db      	ldrb	r3, [r3, #3]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d11f      	bne.n	8007022 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	69ba      	ldr	r2, [r7, #24]
 8006ff2:	0151      	lsls	r1, r2, #5
 8006ff4:	69fa      	ldr	r2, [r7, #28]
 8006ff6:	440a      	add	r2, r1
 8006ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ffc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007000:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	4413      	add	r3, r2
 800700a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	69ba      	ldr	r2, [r7, #24]
 8007012:	0151      	lsls	r1, r2, #5
 8007014:	69fa      	ldr	r2, [r7, #28]
 8007016:	440a      	add	r2, r1
 8007018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800701c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007020:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007022:	79fb      	ldrb	r3, [r7, #7]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d14b      	bne.n	80070c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d009      	beq.n	8007044 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	4413      	add	r3, r2
 8007038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703c:	461a      	mov	r2, r3
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	78db      	ldrb	r3, [r3, #3]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d128      	bne.n	800709e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007058:	2b00      	cmp	r3, #0
 800705a:	d110      	bne.n	800707e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	015a      	lsls	r2, r3, #5
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	4413      	add	r3, r2
 8007064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	0151      	lsls	r1, r2, #5
 800706e:	69fa      	ldr	r2, [r7, #28]
 8007070:	440a      	add	r2, r1
 8007072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007076:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800707a:	6013      	str	r3, [r2, #0]
 800707c:	e00f      	b.n	800709e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	015a      	lsls	r2, r3, #5
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	4413      	add	r3, r2
 8007086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	0151      	lsls	r1, r2, #5
 8007090:	69fa      	ldr	r2, [r7, #28]
 8007092:	440a      	add	r2, r1
 8007094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800709c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	69ba      	ldr	r2, [r7, #24]
 80070ae:	0151      	lsls	r1, r2, #5
 80070b0:	69fa      	ldr	r2, [r7, #28]
 80070b2:	440a      	add	r2, r1
 80070b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070bc:	6013      	str	r3, [r2, #0]
 80070be:	e12f      	b.n	8007320 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	0151      	lsls	r1, r2, #5
 80070d2:	69fa      	ldr	r2, [r7, #28]
 80070d4:	440a      	add	r2, r1
 80070d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	78db      	ldrb	r3, [r3, #3]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d015      	beq.n	8007114 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 8117 	beq.w	8007320 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	f003 030f 	and.w	r3, r3, #15
 8007102:	2101      	movs	r1, #1
 8007104:	fa01 f303 	lsl.w	r3, r1, r3
 8007108:	69f9      	ldr	r1, [r7, #28]
 800710a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800710e:	4313      	orrs	r3, r2
 8007110:	634b      	str	r3, [r1, #52]	; 0x34
 8007112:	e105      	b.n	8007320 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007120:	2b00      	cmp	r3, #0
 8007122:	d110      	bne.n	8007146 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	69ba      	ldr	r2, [r7, #24]
 8007134:	0151      	lsls	r1, r2, #5
 8007136:	69fa      	ldr	r2, [r7, #28]
 8007138:	440a      	add	r2, r1
 800713a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800713e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007142:	6013      	str	r3, [r2, #0]
 8007144:	e00f      	b.n	8007166 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	4413      	add	r3, r2
 800714e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	69ba      	ldr	r2, [r7, #24]
 8007156:	0151      	lsls	r1, r2, #5
 8007158:	69fa      	ldr	r2, [r7, #28]
 800715a:	440a      	add	r2, r1
 800715c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007164:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	68d9      	ldr	r1, [r3, #12]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	781a      	ldrb	r2, [r3, #0]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	b298      	uxth	r0, r3
 8007174:	79fb      	ldrb	r3, [r7, #7]
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	4603      	mov	r3, r0
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 fa2b 	bl	80075d6 <USB_WritePacket>
 8007180:	e0ce      	b.n	8007320 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	015a      	lsls	r2, r3, #5
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	4413      	add	r3, r2
 800718a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	0151      	lsls	r1, r2, #5
 8007194:	69fa      	ldr	r2, [r7, #28]
 8007196:	440a      	add	r2, r1
 8007198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800719c:	0cdb      	lsrs	r3, r3, #19
 800719e:	04db      	lsls	r3, r3, #19
 80071a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	69ba      	ldr	r2, [r7, #24]
 80071b2:	0151      	lsls	r1, r2, #5
 80071b4:	69fa      	ldr	r2, [r7, #28]
 80071b6:	440a      	add	r2, r1
 80071b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d126      	bne.n	800721c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071da:	691a      	ldr	r2, [r3, #16]
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071e4:	69b9      	ldr	r1, [r7, #24]
 80071e6:	0148      	lsls	r0, r1, #5
 80071e8:	69f9      	ldr	r1, [r7, #28]
 80071ea:	4401      	add	r1, r0
 80071ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071f0:	4313      	orrs	r3, r2
 80071f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	0151      	lsls	r1, r2, #5
 8007206:	69fa      	ldr	r2, [r7, #28]
 8007208:	440a      	add	r2, r1
 800720a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800720e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007212:	6113      	str	r3, [r2, #16]
 8007214:	e036      	b.n	8007284 <USB_EPStartXfer+0x3dc>
 8007216:	bf00      	nop
 8007218:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	695a      	ldr	r2, [r3, #20]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	4413      	add	r3, r2
 8007226:	1e5a      	subs	r2, r3, #1
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007230:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	015a      	lsls	r2, r3, #5
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	4413      	add	r3, r2
 800723a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723e:	691a      	ldr	r2, [r3, #16]
 8007240:	8afb      	ldrh	r3, [r7, #22]
 8007242:	04d9      	lsls	r1, r3, #19
 8007244:	4b39      	ldr	r3, [pc, #228]	; (800732c <USB_EPStartXfer+0x484>)
 8007246:	400b      	ands	r3, r1
 8007248:	69b9      	ldr	r1, [r7, #24]
 800724a:	0148      	lsls	r0, r1, #5
 800724c:	69f9      	ldr	r1, [r7, #28]
 800724e:	4401      	add	r1, r0
 8007250:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007254:	4313      	orrs	r3, r2
 8007256:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	015a      	lsls	r2, r3, #5
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	4413      	add	r3, r2
 8007260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007264:	691a      	ldr	r2, [r3, #16]
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	8af9      	ldrh	r1, [r7, #22]
 800726c:	fb01 f303 	mul.w	r3, r1, r3
 8007270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007274:	69b9      	ldr	r1, [r7, #24]
 8007276:	0148      	lsls	r0, r1, #5
 8007278:	69f9      	ldr	r1, [r7, #28]
 800727a:	4401      	add	r1, r0
 800727c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007280:	4313      	orrs	r3, r2
 8007282:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007284:	79fb      	ldrb	r3, [r7, #7]
 8007286:	2b01      	cmp	r3, #1
 8007288:	d10d      	bne.n	80072a6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d009      	beq.n	80072a6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	68d9      	ldr	r1, [r3, #12]
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	4413      	add	r3, r2
 800729e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a2:	460a      	mov	r2, r1
 80072a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	78db      	ldrb	r3, [r3, #3]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d128      	bne.n	8007300 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d110      	bne.n	80072e0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	69ba      	ldr	r2, [r7, #24]
 80072ce:	0151      	lsls	r1, r2, #5
 80072d0:	69fa      	ldr	r2, [r7, #28]
 80072d2:	440a      	add	r2, r1
 80072d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072dc:	6013      	str	r3, [r2, #0]
 80072de:	e00f      	b.n	8007300 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	69ba      	ldr	r2, [r7, #24]
 80072f0:	0151      	lsls	r1, r2, #5
 80072f2:	69fa      	ldr	r2, [r7, #28]
 80072f4:	440a      	add	r2, r1
 80072f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	4413      	add	r3, r2
 8007308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	69ba      	ldr	r2, [r7, #24]
 8007310:	0151      	lsls	r1, r2, #5
 8007312:	69fa      	ldr	r2, [r7, #28]
 8007314:	440a      	add	r2, r1
 8007316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800731a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800731e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3720      	adds	r7, #32
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	1ff80000 	.word	0x1ff80000

08007330 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	4613      	mov	r3, r2
 800733c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	785b      	ldrb	r3, [r3, #1]
 800734c:	2b01      	cmp	r3, #1
 800734e:	f040 80cd 	bne.w	80074ec <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d132      	bne.n	80073c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	4413      	add	r3, r2
 8007362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	0151      	lsls	r1, r2, #5
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	440a      	add	r2, r1
 8007370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007374:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007378:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800737c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	0151      	lsls	r1, r2, #5
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	440a      	add	r2, r1
 8007394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007398:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800739c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	0151      	lsls	r1, r2, #5
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	440a      	add	r2, r1
 80073b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073b8:	0cdb      	lsrs	r3, r3, #19
 80073ba:	04db      	lsls	r3, r3, #19
 80073bc:	6113      	str	r3, [r2, #16]
 80073be:	e04e      	b.n	800745e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	0151      	lsls	r1, r2, #5
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	440a      	add	r2, r1
 80073d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073da:	0cdb      	lsrs	r3, r3, #19
 80073dc:	04db      	lsls	r3, r3, #19
 80073de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	0151      	lsls	r1, r2, #5
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	440a      	add	r2, r1
 80073f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007402:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	695a      	ldr	r2, [r3, #20]
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	429a      	cmp	r2, r3
 800740e:	d903      	bls.n	8007418 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	4413      	add	r3, r2
 8007420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	693a      	ldr	r2, [r7, #16]
 8007428:	0151      	lsls	r1, r2, #5
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	440a      	add	r2, r1
 800742e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007432:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007436:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	4413      	add	r3, r2
 8007440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007444:	691a      	ldr	r2, [r3, #16]
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800744e:	6939      	ldr	r1, [r7, #16]
 8007450:	0148      	lsls	r0, r1, #5
 8007452:	6979      	ldr	r1, [r7, #20]
 8007454:	4401      	add	r1, r0
 8007456:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800745a:	4313      	orrs	r3, r2
 800745c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800745e:	79fb      	ldrb	r3, [r7, #7]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d11e      	bne.n	80074a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d009      	beq.n	8007480 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	015a      	lsls	r2, r3, #5
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	4413      	add	r3, r2
 8007474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007478:	461a      	mov	r2, r3
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	4413      	add	r3, r2
 8007488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	0151      	lsls	r1, r2, #5
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	440a      	add	r2, r1
 8007496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800749a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800749e:	6013      	str	r3, [r2, #0]
 80074a0:	e092      	b.n	80075c8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	0151      	lsls	r1, r2, #5
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	440a      	add	r2, r1
 80074b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d07e      	beq.n	80075c8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	f003 030f 	and.w	r3, r3, #15
 80074da:	2101      	movs	r1, #1
 80074dc:	fa01 f303 	lsl.w	r3, r1, r3
 80074e0:	6979      	ldr	r1, [r7, #20]
 80074e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074e6:	4313      	orrs	r3, r2
 80074e8:	634b      	str	r3, [r1, #52]	; 0x34
 80074ea:	e06d      	b.n	80075c8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	0151      	lsls	r1, r2, #5
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	440a      	add	r2, r1
 8007502:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007506:	0cdb      	lsrs	r3, r3, #19
 8007508:	04db      	lsls	r3, r3, #19
 800750a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	015a      	lsls	r2, r3, #5
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	4413      	add	r3, r2
 8007514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	0151      	lsls	r1, r2, #5
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	440a      	add	r2, r1
 8007522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007526:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800752a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800752e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	695b      	ldr	r3, [r3, #20]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d003      	beq.n	8007540 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	689a      	ldr	r2, [r3, #8]
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	015a      	lsls	r2, r3, #5
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	4413      	add	r3, r2
 8007548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	0151      	lsls	r1, r2, #5
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	440a      	add	r2, r1
 8007556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800755a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800755e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	015a      	lsls	r2, r3, #5
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	4413      	add	r3, r2
 8007568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756c:	691a      	ldr	r2, [r3, #16]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007576:	6939      	ldr	r1, [r7, #16]
 8007578:	0148      	lsls	r0, r1, #5
 800757a:	6979      	ldr	r1, [r7, #20]
 800757c:	4401      	add	r1, r0
 800757e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007582:	4313      	orrs	r3, r2
 8007584:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007586:	79fb      	ldrb	r3, [r7, #7]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d10d      	bne.n	80075a8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d009      	beq.n	80075a8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	68d9      	ldr	r1, [r3, #12]
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	015a      	lsls	r2, r3, #5
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	4413      	add	r3, r2
 80075a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a4:	460a      	mov	r2, r1
 80075a6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	0151      	lsls	r1, r2, #5
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	440a      	add	r2, r1
 80075be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	371c      	adds	r7, #28
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b089      	sub	sp, #36	; 0x24
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	4611      	mov	r1, r2
 80075e2:	461a      	mov	r2, r3
 80075e4:	460b      	mov	r3, r1
 80075e6:	71fb      	strb	r3, [r7, #7]
 80075e8:	4613      	mov	r3, r2
 80075ea:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80075f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d11a      	bne.n	8007632 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80075fc:	88bb      	ldrh	r3, [r7, #4]
 80075fe:	3303      	adds	r3, #3
 8007600:	089b      	lsrs	r3, r3, #2
 8007602:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007604:	2300      	movs	r3, #0
 8007606:	61bb      	str	r3, [r7, #24]
 8007608:	e00f      	b.n	800762a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800760a:	79fb      	ldrb	r3, [r7, #7]
 800760c:	031a      	lsls	r2, r3, #12
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	4413      	add	r3, r2
 8007612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007616:	461a      	mov	r2, r3
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	3304      	adds	r3, #4
 8007622:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	3301      	adds	r3, #1
 8007628:	61bb      	str	r3, [r7, #24]
 800762a:	69ba      	ldr	r2, [r7, #24]
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	429a      	cmp	r2, r3
 8007630:	d3eb      	bcc.n	800760a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3724      	adds	r7, #36	; 0x24
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007640:	b480      	push	{r7}
 8007642:	b089      	sub	sp, #36	; 0x24
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	4613      	mov	r3, r2
 800764c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007656:	88fb      	ldrh	r3, [r7, #6]
 8007658:	3303      	adds	r3, #3
 800765a:	089b      	lsrs	r3, r3, #2
 800765c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800765e:	2300      	movs	r3, #0
 8007660:	61bb      	str	r3, [r7, #24]
 8007662:	e00b      	b.n	800767c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	3304      	adds	r3, #4
 8007674:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	3301      	adds	r3, #1
 800767a:	61bb      	str	r3, [r7, #24]
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	429a      	cmp	r2, r3
 8007682:	d3ef      	bcc.n	8007664 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007684:	69fb      	ldr	r3, [r7, #28]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3724      	adds	r7, #36	; 0x24
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007692:	b480      	push	{r7}
 8007694:	b085      	sub	sp, #20
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	785b      	ldrb	r3, [r3, #1]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d12c      	bne.n	8007708 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	015a      	lsls	r2, r3, #5
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	4413      	add	r3, r2
 80076b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	db12      	blt.n	80076e6 <USB_EPSetStall+0x54>
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00f      	beq.n	80076e6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	015a      	lsls	r2, r3, #5
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	0151      	lsls	r1, r2, #5
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	440a      	add	r2, r1
 80076dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076e4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	015a      	lsls	r2, r3, #5
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	0151      	lsls	r1, r2, #5
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	440a      	add	r2, r1
 80076fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007704:	6013      	str	r3, [r2, #0]
 8007706:	e02b      	b.n	8007760 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	db12      	blt.n	8007740 <USB_EPSetStall+0xae>
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00f      	beq.n	8007740 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	4413      	add	r3, r2
 8007728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	0151      	lsls	r1, r2, #5
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	440a      	add	r2, r1
 8007736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800773a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800773e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	4413      	add	r3, r2
 8007748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	0151      	lsls	r1, r2, #5
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	440a      	add	r2, r1
 8007756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800775a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800775e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800776e:	b480      	push	{r7}
 8007770:	b085      	sub	sp, #20
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	785b      	ldrb	r3, [r3, #1]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d128      	bne.n	80077dc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	015a      	lsls	r2, r3, #5
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	4413      	add	r3, r2
 8007792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	0151      	lsls	r1, r2, #5
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	440a      	add	r2, r1
 80077a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	78db      	ldrb	r3, [r3, #3]
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	d003      	beq.n	80077ba <USB_EPClearStall+0x4c>
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	78db      	ldrb	r3, [r3, #3]
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d138      	bne.n	800782c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	015a      	lsls	r2, r3, #5
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	4413      	add	r3, r2
 80077c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	0151      	lsls	r1, r2, #5
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	440a      	add	r2, r1
 80077d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077d8:	6013      	str	r3, [r2, #0]
 80077da:	e027      	b.n	800782c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	015a      	lsls	r2, r3, #5
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	4413      	add	r3, r2
 80077e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	0151      	lsls	r1, r2, #5
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	440a      	add	r2, r1
 80077f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	78db      	ldrb	r3, [r3, #3]
 8007800:	2b03      	cmp	r3, #3
 8007802:	d003      	beq.n	800780c <USB_EPClearStall+0x9e>
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	78db      	ldrb	r3, [r3, #3]
 8007808:	2b02      	cmp	r3, #2
 800780a:	d10f      	bne.n	800782c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	015a      	lsls	r2, r3, #5
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4413      	add	r3, r2
 8007814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	0151      	lsls	r1, r2, #5
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	440a      	add	r2, r1
 8007822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800782a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800783a:	b480      	push	{r7}
 800783c:	b085      	sub	sp, #20
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
 8007842:	460b      	mov	r3, r1
 8007844:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007858:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800785c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	78fb      	ldrb	r3, [r7, #3]
 8007868:	011b      	lsls	r3, r3, #4
 800786a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800786e:	68f9      	ldr	r1, [r7, #12]
 8007870:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007874:	4313      	orrs	r3, r2
 8007876:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007886:	b480      	push	{r7}
 8007888:	b085      	sub	sp, #20
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078a0:	f023 0303 	bic.w	r3, r3, #3
 80078a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078b4:	f023 0302 	bic.w	r3, r3, #2
 80078b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078e2:	f023 0303 	bic.w	r3, r3, #3
 80078e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078f6:	f043 0302 	orr.w	r3, r3, #2
 80078fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800790a:	b480      	push	{r7}
 800790c:	b085      	sub	sp, #20
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	4013      	ands	r3, r2
 8007920:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007922:	68fb      	ldr	r3, [r7, #12]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800794c:	69db      	ldr	r3, [r3, #28]
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	4013      	ands	r3, r2
 8007952:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	0c1b      	lsrs	r3, r3, #16
}
 8007958:	4618      	mov	r0, r3
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007980:	69db      	ldr	r3, [r3, #28]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	4013      	ands	r3, r2
 8007986:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	b29b      	uxth	r3, r3
}
 800798c:	4618      	mov	r0, r3
 800798e:	3714      	adds	r7, #20
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	460b      	mov	r3, r1
 80079a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80079a8:	78fb      	ldrb	r3, [r7, #3]
 80079aa:	015a      	lsls	r2, r3, #5
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	4413      	add	r3, r2
 80079b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	4013      	ands	r3, r2
 80079c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80079c6:	68bb      	ldr	r3, [r7, #8]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b087      	sub	sp, #28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	460b      	mov	r3, r1
 80079de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80079f8:	78fb      	ldrb	r3, [r7, #3]
 80079fa:	f003 030f 	and.w	r3, r3, #15
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	fa22 f303 	lsr.w	r3, r2, r3
 8007a04:	01db      	lsls	r3, r3, #7
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007a0e:	78fb      	ldrb	r3, [r7, #3]
 8007a10:	015a      	lsls	r2, r3, #5
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	4413      	add	r3, r2
 8007a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	4013      	ands	r3, r2
 8007a20:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a22:	68bb      	ldr	r3, [r7, #8]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	371c      	adds	r7, #28
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	f003 0301 	and.w	r3, r3, #1
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a66:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007a6a:	f023 0307 	bic.w	r3, r3, #7
 8007a6e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a82:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
	...

08007a94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b087      	sub	sp, #28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	607a      	str	r2, [r7, #4]
 8007aa0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	333c      	adds	r3, #60	; 0x3c
 8007aaa:	3304      	adds	r3, #4
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	4a26      	ldr	r2, [pc, #152]	; (8007b4c <USB_EP0_OutStart+0xb8>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d90a      	bls.n	8007ace <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ac8:	d101      	bne.n	8007ace <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	e037      	b.n	8007b3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	697a      	ldr	r2, [r7, #20]
 8007ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ae8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007aec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007afc:	f043 0318 	orr.w	r3, r3, #24
 8007b00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b10:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007b14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007b16:	7afb      	ldrb	r3, [r7, #11]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d10f      	bne.n	8007b3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b22:	461a      	mov	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	697a      	ldr	r2, [r7, #20]
 8007b32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b36:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007b3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	371c      	adds	r7, #28
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	4f54300a 	.word	0x4f54300a

08007b50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	60fb      	str	r3, [r7, #12]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	4a13      	ldr	r2, [pc, #76]	; (8007bb4 <USB_CoreReset+0x64>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d901      	bls.n	8007b6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e01b      	b.n	8007ba6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	daf2      	bge.n	8007b5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b76:	2300      	movs	r3, #0
 8007b78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	f043 0201 	orr.w	r2, r3, #1
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	4a09      	ldr	r2, [pc, #36]	; (8007bb4 <USB_CoreReset+0x64>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d901      	bls.n	8007b98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b94:	2303      	movs	r3, #3
 8007b96:	e006      	b.n	8007ba6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d0f0      	beq.n	8007b86 <USB_CoreReset+0x36>

  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	00030d40 	.word	0x00030d40

08007bb8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007bc4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007bc8:	f002 f936 	bl	8009e38 <malloc>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d105      	bne.n	8007be2 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007bde:	2302      	movs	r3, #2
 8007be0:	e066      	b.n	8007cb0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	7c1b      	ldrb	r3, [r3, #16]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d119      	bne.n	8007c26 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007bf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	2181      	movs	r1, #129	; 0x81
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f001 ffa3 	bl	8009b46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	2101      	movs	r1, #1
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f001 ff99 	bl	8009b46 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2210      	movs	r2, #16
 8007c20:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007c24:	e016      	b.n	8007c54 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c26:	2340      	movs	r3, #64	; 0x40
 8007c28:	2202      	movs	r2, #2
 8007c2a:	2181      	movs	r1, #129	; 0x81
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f001 ff8a 	bl	8009b46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c38:	2340      	movs	r3, #64	; 0x40
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f001 ff81 	bl	8009b46 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2210      	movs	r2, #16
 8007c50:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c54:	2308      	movs	r3, #8
 8007c56:	2203      	movs	r2, #3
 8007c58:	2182      	movs	r1, #130	; 0x82
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f001 ff73 	bl	8009b46 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	7c1b      	ldrb	r3, [r3, #16]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d109      	bne.n	8007c9e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c94:	2101      	movs	r1, #1
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f002 f844 	bl	8009d24 <USBD_LL_PrepareReceive>
 8007c9c:	e007      	b.n	8007cae <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ca4:	2340      	movs	r3, #64	; 0x40
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f002 f83b 	bl	8009d24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007cc8:	2181      	movs	r1, #129	; 0x81
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f001 ff61 	bl	8009b92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f001 ff5a 	bl	8009b92 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007ce6:	2182      	movs	r1, #130	; 0x82
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f001 ff52 	bl	8009b92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00e      	beq.n	8007d26 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f002 f895 	bl	8009e48 <free>
    pdev->pClassData = NULL;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d40:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007d42:	2300      	movs	r3, #0
 8007d44:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007d46:	2300      	movs	r3, #0
 8007d48:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d03a      	beq.n	8007dd0 <USBD_CDC_Setup+0xa0>
 8007d5a:	2b20      	cmp	r3, #32
 8007d5c:	f040 8097 	bne.w	8007e8e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	88db      	ldrh	r3, [r3, #6]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d029      	beq.n	8007dbc <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	b25b      	sxtb	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	da11      	bge.n	8007d96 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007d7e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	88d2      	ldrh	r2, [r2, #6]
 8007d84:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007d86:	6939      	ldr	r1, [r7, #16]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	88db      	ldrh	r3, [r3, #6]
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f001 fa9d 	bl	80092ce <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007d94:	e082      	b.n	8007e9c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	785a      	ldrb	r2, [r3, #1]
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	88db      	ldrh	r3, [r3, #6]
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007dac:	6939      	ldr	r1, [r7, #16]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	88db      	ldrh	r3, [r3, #6]
 8007db2:	461a      	mov	r2, r3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f001 fab6 	bl	8009326 <USBD_CtlPrepareRx>
    break;
 8007dba:	e06f      	b.n	8007e9c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	7850      	ldrb	r0, [r2, #1]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	4798      	blx	r3
    break;
 8007dce:	e065      	b.n	8007e9c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	785b      	ldrb	r3, [r3, #1]
 8007dd4:	2b0b      	cmp	r3, #11
 8007dd6:	d84f      	bhi.n	8007e78 <USBD_CDC_Setup+0x148>
 8007dd8:	a201      	add	r2, pc, #4	; (adr r2, 8007de0 <USBD_CDC_Setup+0xb0>)
 8007dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dde:	bf00      	nop
 8007de0:	08007e11 	.word	0x08007e11
 8007de4:	08007e87 	.word	0x08007e87
 8007de8:	08007e79 	.word	0x08007e79
 8007dec:	08007e79 	.word	0x08007e79
 8007df0:	08007e79 	.word	0x08007e79
 8007df4:	08007e79 	.word	0x08007e79
 8007df8:	08007e79 	.word	0x08007e79
 8007dfc:	08007e79 	.word	0x08007e79
 8007e00:	08007e79 	.word	0x08007e79
 8007e04:	08007e79 	.word	0x08007e79
 8007e08:	08007e39 	.word	0x08007e39
 8007e0c:	08007e61 	.word	0x08007e61
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	d107      	bne.n	8007e2a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007e1a:	f107 030c 	add.w	r3, r7, #12
 8007e1e:	2202      	movs	r2, #2
 8007e20:	4619      	mov	r1, r3
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f001 fa53 	bl	80092ce <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007e28:	e030      	b.n	8007e8c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007e2a:	6839      	ldr	r1, [r7, #0]
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f001 f9dd 	bl	80091ec <USBD_CtlError>
        ret = USBD_FAIL;
 8007e32:	2303      	movs	r3, #3
 8007e34:	75fb      	strb	r3, [r7, #23]
      break;
 8007e36:	e029      	b.n	8007e8c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d107      	bne.n	8007e52 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e42:	f107 030f 	add.w	r3, r7, #15
 8007e46:	2201      	movs	r2, #1
 8007e48:	4619      	mov	r1, r3
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f001 fa3f 	bl	80092ce <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007e50:	e01c      	b.n	8007e8c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007e52:	6839      	ldr	r1, [r7, #0]
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f001 f9c9 	bl	80091ec <USBD_CtlError>
        ret = USBD_FAIL;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e5e:	e015      	b.n	8007e8c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d00f      	beq.n	8007e8a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f001 f9bd 	bl	80091ec <USBD_CtlError>
        ret = USBD_FAIL;
 8007e72:	2303      	movs	r3, #3
 8007e74:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007e76:	e008      	b.n	8007e8a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f001 f9b6 	bl	80091ec <USBD_CtlError>
      ret = USBD_FAIL;
 8007e80:	2303      	movs	r3, #3
 8007e82:	75fb      	strb	r3, [r7, #23]
      break;
 8007e84:	e002      	b.n	8007e8c <USBD_CDC_Setup+0x15c>
      break;
 8007e86:	bf00      	nop
 8007e88:	e008      	b.n	8007e9c <USBD_CDC_Setup+0x16c>
      break;
 8007e8a:	bf00      	nop
    }
    break;
 8007e8c:	e006      	b.n	8007e9c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f001 f9ab 	bl	80091ec <USBD_CtlError>
    ret = USBD_FAIL;
 8007e96:	2303      	movs	r3, #3
 8007e98:	75fb      	strb	r3, [r7, #23]
    break;
 8007e9a:	bf00      	nop
  }

  return (uint8_t)ret;
 8007e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3718      	adds	r7, #24
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop

08007ea8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007eba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d101      	bne.n	8007eca <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e049      	b.n	8007f5e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ed0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007ed2:	78fa      	ldrb	r2, [r7, #3]
 8007ed4:	6879      	ldr	r1, [r7, #4]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4413      	add	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	440b      	add	r3, r1
 8007ee0:	3318      	adds	r3, #24
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d029      	beq.n	8007f3c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007ee8:	78fa      	ldrb	r2, [r7, #3]
 8007eea:	6879      	ldr	r1, [r7, #4]
 8007eec:	4613      	mov	r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	4413      	add	r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	440b      	add	r3, r1
 8007ef6:	3318      	adds	r3, #24
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	78f9      	ldrb	r1, [r7, #3]
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	460b      	mov	r3, r1
 8007f00:	00db      	lsls	r3, r3, #3
 8007f02:	1a5b      	subs	r3, r3, r1
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4403      	add	r3, r0
 8007f08:	3344      	adds	r3, #68	; 0x44
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f10:	fb03 f301 	mul.w	r3, r3, r1
 8007f14:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d110      	bne.n	8007f3c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007f1a:	78fa      	ldrb	r2, [r7, #3]
 8007f1c:	6879      	ldr	r1, [r7, #4]
 8007f1e:	4613      	mov	r3, r2
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	4413      	add	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	440b      	add	r3, r1
 8007f28:	3318      	adds	r3, #24
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f2e:	78f9      	ldrb	r1, [r7, #3]
 8007f30:	2300      	movs	r3, #0
 8007f32:	2200      	movs	r2, #0
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f001 fed4 	bl	8009ce2 <USBD_LL_Transmit>
 8007f3a:	e00f      	b.n	8007f5c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007f58:	78fa      	ldrb	r2, [r7, #3]
 8007f5a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	460b      	mov	r3, r1
 8007f70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f78:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e015      	b.n	8007fb4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f88:	78fb      	ldrb	r3, [r7, #3]
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f001 feea 	bl	8009d66 <USBD_LL_GetRxDataSize>
 8007f92:	4602      	mov	r2, r0
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007fae:	4611      	mov	r1, r2
 8007fb0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fca:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d015      	beq.n	8008002 <USBD_CDC_EP0_RxReady+0x46>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007fdc:	2bff      	cmp	r3, #255	; 0xff
 8007fde:	d010      	beq.n	8008002 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007fee:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007ff6:	b292      	uxth	r2, r2
 8007ff8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	22ff      	movs	r2, #255	; 0xff
 8007ffe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2243      	movs	r2, #67	; 0x43
 8008018:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800801a:	4b03      	ldr	r3, [pc, #12]	; (8008028 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800801c:	4618      	mov	r0, r3
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr
 8008028:	20000094 	.word	0x20000094

0800802c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2243      	movs	r2, #67	; 0x43
 8008038:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800803a:	4b03      	ldr	r3, [pc, #12]	; (8008048 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800803c:	4618      	mov	r0, r3
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr
 8008048:	20000050 	.word	0x20000050

0800804c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2243      	movs	r2, #67	; 0x43
 8008058:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800805a:	4b03      	ldr	r3, [pc, #12]	; (8008068 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	200000d8 	.word	0x200000d8

0800806c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	220a      	movs	r2, #10
 8008078:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800807a:	4b03      	ldr	r3, [pc, #12]	; (8008088 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800807c:	4618      	mov	r0, r3
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	2000000c 	.word	0x2000000c

0800808c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d101      	bne.n	80080a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800809c:	2303      	movs	r3, #3
 800809e:	e004      	b.n	80080aa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	683a      	ldr	r2, [r7, #0]
 80080a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	370c      	adds	r7, #12
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr

080080b6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b087      	sub	sp, #28
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	60f8      	str	r0, [r7, #12]
 80080be:	60b9      	str	r1, [r7, #8]
 80080c0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080c8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	371c      	adds	r7, #28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080f8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	683a      	ldr	r2, [r7, #0]
 80080fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800811e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008120:	2301      	movs	r3, #1
 8008122:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800812e:	2303      	movs	r3, #3
 8008130:	e01a      	b.n	8008168 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008138:	2b00      	cmp	r3, #0
 800813a:	d114      	bne.n	8008166 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	2201      	movs	r2, #1
 8008140:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800815a:	2181      	movs	r1, #129	; 0x81
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f001 fdc0 	bl	8009ce2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008166:	7bfb      	ldrb	r3, [r7, #15]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800817e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008186:	2b00      	cmp	r3, #0
 8008188:	d101      	bne.n	800818e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800818a:	2303      	movs	r3, #3
 800818c:	e016      	b.n	80081bc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	7c1b      	ldrb	r3, [r3, #16]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d109      	bne.n	80081aa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800819c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081a0:	2101      	movs	r1, #1
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f001 fdbe 	bl	8009d24 <USBD_LL_PrepareReceive>
 80081a8:	e007      	b.n	80081ba <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081b0:	2340      	movs	r3, #64	; 0x40
 80081b2:	2101      	movs	r1, #1
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f001 fdb5 	bl	8009d24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	4613      	mov	r3, r2
 80081d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d101      	bne.n	80081dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80081d8:	2303      	movs	r3, #3
 80081da:	e025      	b.n	8008228 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d003      	beq.n	80081ee <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d003      	beq.n	8008200 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d003      	beq.n	800820e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2201      	movs	r2, #1
 8008212:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	79fa      	ldrb	r2, [r7, #7]
 800821a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f001 fc2b 	bl	8009a78 <USBD_LL_Init>
 8008222:	4603      	mov	r3, r0
 8008224:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008226:	7dfb      	ldrb	r3, [r7, #23]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3718      	adds	r7, #24
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800823a:	2300      	movs	r3, #0
 800823c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d101      	bne.n	8008248 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008244:	2303      	movs	r3, #3
 8008246:	e010      	b.n	800826a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008258:	f107 020e 	add.w	r2, r7, #14
 800825c:	4610      	mov	r0, r2
 800825e:	4798      	blx	r3
 8008260:	4602      	mov	r2, r0
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f001 fc48 	bl	8009b10 <USBD_LL_Start>
 8008280:	4603      	mov	r3, r0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800828a:	b480      	push	{r7}
 800828c:	b083      	sub	sp, #12
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	460b      	mov	r3, r1
 80082aa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80082ac:	2303      	movs	r3, #3
 80082ae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d009      	beq.n	80082ce <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	78fa      	ldrb	r2, [r7, #3]
 80082c4:	4611      	mov	r1, r2
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	4798      	blx	r3
 80082ca:	4603      	mov	r3, r0
 80082cc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80082ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	460b      	mov	r3, r1
 80082e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d007      	beq.n	80082fe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	78fa      	ldrb	r2, [r7, #3]
 80082f8:	4611      	mov	r1, r2
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	4798      	blx	r3
  }

  return USBD_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	4618      	mov	r0, r3
 800831c:	f000 ff2c 	bl	8009178 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800832e:	461a      	mov	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800833c:	f003 031f 	and.w	r3, r3, #31
 8008340:	2b01      	cmp	r3, #1
 8008342:	d00e      	beq.n	8008362 <USBD_LL_SetupStage+0x5a>
 8008344:	2b01      	cmp	r3, #1
 8008346:	d302      	bcc.n	800834e <USBD_LL_SetupStage+0x46>
 8008348:	2b02      	cmp	r3, #2
 800834a:	d014      	beq.n	8008376 <USBD_LL_SetupStage+0x6e>
 800834c:	e01d      	b.n	800838a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008354:	4619      	mov	r1, r3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fa18 	bl	800878c <USBD_StdDevReq>
 800835c:	4603      	mov	r3, r0
 800835e:	73fb      	strb	r3, [r7, #15]
      break;
 8008360:	e020      	b.n	80083a4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008368:	4619      	mov	r1, r3
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fa7c 	bl	8008868 <USBD_StdItfReq>
 8008370:	4603      	mov	r3, r0
 8008372:	73fb      	strb	r3, [r7, #15]
      break;
 8008374:	e016      	b.n	80083a4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800837c:	4619      	mov	r1, r3
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fab8 	bl	80088f4 <USBD_StdEPReq>
 8008384:	4603      	mov	r3, r0
 8008386:	73fb      	strb	r3, [r7, #15]
      break;
 8008388:	e00c      	b.n	80083a4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008390:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008394:	b2db      	uxtb	r3, r3
 8008396:	4619      	mov	r1, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f001 fc19 	bl	8009bd0 <USBD_LL_StallEP>
 800839e:	4603      	mov	r3, r0
 80083a0:	73fb      	strb	r3, [r7, #15]
      break;
 80083a2:	bf00      	nop
  }

  return ret;
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b086      	sub	sp, #24
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	60f8      	str	r0, [r7, #12]
 80083b6:	460b      	mov	r3, r1
 80083b8:	607a      	str	r2, [r7, #4]
 80083ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80083bc:	7afb      	ldrb	r3, [r7, #11]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d137      	bne.n	8008432 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80083c8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083d0:	2b03      	cmp	r3, #3
 80083d2:	d14a      	bne.n	800846a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	689a      	ldr	r2, [r3, #8]
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d913      	bls.n	8008408 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	689a      	ldr	r2, [r3, #8]
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	1ad2      	subs	r2, r2, r3
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	68da      	ldr	r2, [r3, #12]
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	4293      	cmp	r3, r2
 80083f8:	bf28      	it	cs
 80083fa:	4613      	movcs	r3, r2
 80083fc:	461a      	mov	r2, r3
 80083fe:	6879      	ldr	r1, [r7, #4]
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f000 ffad 	bl	8009360 <USBD_CtlContinueRx>
 8008406:	e030      	b.n	800846a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00a      	beq.n	800842a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800841a:	2b03      	cmp	r3, #3
 800841c:	d105      	bne.n	800842a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f000 ffa9 	bl	8009382 <USBD_CtlSendStatus>
 8008430:	e01b      	b.n	800846a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d013      	beq.n	8008466 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008444:	2b03      	cmp	r3, #3
 8008446:	d10e      	bne.n	8008466 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	7afa      	ldrb	r2, [r7, #11]
 8008452:	4611      	mov	r1, r2
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	4798      	blx	r3
 8008458:	4603      	mov	r3, r0
 800845a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800845c:	7dfb      	ldrb	r3, [r7, #23]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d003      	beq.n	800846a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008462:	7dfb      	ldrb	r3, [r7, #23]
 8008464:	e002      	b.n	800846c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008466:	2303      	movs	r3, #3
 8008468:	e000      	b.n	800846c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3718      	adds	r7, #24
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	460b      	mov	r3, r1
 800847e:	607a      	str	r2, [r7, #4]
 8008480:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008482:	7afb      	ldrb	r3, [r7, #11]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d16a      	bne.n	800855e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	3314      	adds	r3, #20
 800848c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008494:	2b02      	cmp	r3, #2
 8008496:	d155      	bne.n	8008544 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	689a      	ldr	r2, [r3, #8]
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d914      	bls.n	80084ce <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	1ad2      	subs	r2, r2, r3
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	461a      	mov	r2, r3
 80084b8:	6879      	ldr	r1, [r7, #4]
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f000 ff22 	bl	8009304 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084c0:	2300      	movs	r3, #0
 80084c2:	2200      	movs	r2, #0
 80084c4:	2100      	movs	r1, #0
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f001 fc2c 	bl	8009d24 <USBD_LL_PrepareReceive>
 80084cc:	e03a      	b.n	8008544 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	68da      	ldr	r2, [r3, #12]
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d11c      	bne.n	8008514 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d316      	bcc.n	8008514 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d20f      	bcs.n	8008514 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084f4:	2200      	movs	r2, #0
 80084f6:	2100      	movs	r1, #0
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f000 ff03 	bl	8009304 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008506:	2300      	movs	r3, #0
 8008508:	2200      	movs	r2, #0
 800850a:	2100      	movs	r1, #0
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f001 fc09 	bl	8009d24 <USBD_LL_PrepareReceive>
 8008512:	e017      	b.n	8008544 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00a      	beq.n	8008536 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008526:	2b03      	cmp	r3, #3
 8008528:	d105      	bne.n	8008536 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008536:	2180      	movs	r1, #128	; 0x80
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f001 fb49 	bl	8009bd0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 ff32 	bl	80093a8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800854a:	2b01      	cmp	r3, #1
 800854c:	d123      	bne.n	8008596 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f7ff fe9b 	bl	800828a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800855c:	e01b      	b.n	8008596 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d013      	beq.n	8008592 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008570:	2b03      	cmp	r3, #3
 8008572:	d10e      	bne.n	8008592 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800857a:	695b      	ldr	r3, [r3, #20]
 800857c:	7afa      	ldrb	r2, [r7, #11]
 800857e:	4611      	mov	r1, r2
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	4798      	blx	r3
 8008584:	4603      	mov	r3, r0
 8008586:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008588:	7dfb      	ldrb	r3, [r7, #23]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d003      	beq.n	8008596 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800858e:	7dfb      	ldrb	r3, [r7, #23]
 8008590:	e002      	b.n	8008598 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008592:	2303      	movs	r3, #3
 8008594:	e000      	b.n	8008598 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3718      	adds	r7, #24
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d009      	beq.n	80085e4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	6852      	ldr	r2, [r2, #4]
 80085dc:	b2d2      	uxtb	r2, r2
 80085de:	4611      	mov	r1, r2
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085e4:	2340      	movs	r3, #64	; 0x40
 80085e6:	2200      	movs	r2, #0
 80085e8:	2100      	movs	r1, #0
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f001 faab 	bl	8009b46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2240      	movs	r2, #64	; 0x40
 80085fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008600:	2340      	movs	r3, #64	; 0x40
 8008602:	2200      	movs	r2, #0
 8008604:	2180      	movs	r1, #128	; 0x80
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f001 fa9d 	bl	8009b46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2240      	movs	r2, #64	; 0x40
 8008616:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008622:	b480      	push	{r7}
 8008624:	b083      	sub	sp, #12
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	460b      	mov	r3, r1
 800862c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	78fa      	ldrb	r2, [r7, #3]
 8008632:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	370c      	adds	r7, #12
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr

08008642 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008642:	b480      	push	{r7}
 8008644:	b083      	sub	sp, #12
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2204      	movs	r2, #4
 800865a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800867a:	2b04      	cmp	r3, #4
 800867c:	d105      	bne.n	800868a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a6:	2b03      	cmp	r3, #3
 80086a8:	d10b      	bne.n	80086c2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086b0:	69db      	ldr	r3, [r3, #28]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d005      	beq.n	80086c2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086bc:	69db      	ldr	r3, [r3, #28]
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b083      	sub	sp, #12
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	460b      	mov	r3, r1
 80086f0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b082      	sub	sp, #8
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2201      	movs	r2, #1
 8008722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800872c:	2b00      	cmp	r3, #0
 800872e:	d009      	beq.n	8008744 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	6852      	ldr	r2, [r2, #4]
 800873c:	b2d2      	uxtb	r2, r2
 800873e:	4611      	mov	r1, r2
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	4798      	blx	r3
  }

  return USBD_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800874e:	b480      	push	{r7}
 8008750:	b087      	sub	sp, #28
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	3301      	adds	r3, #1
 8008764:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800876c:	8a3b      	ldrh	r3, [r7, #16]
 800876e:	021b      	lsls	r3, r3, #8
 8008770:	b21a      	sxth	r2, r3
 8008772:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008776:	4313      	orrs	r3, r2
 8008778:	b21b      	sxth	r3, r3
 800877a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800877c:	89fb      	ldrh	r3, [r7, #14]
}
 800877e:	4618      	mov	r0, r3
 8008780:	371c      	adds	r7, #28
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
	...

0800878c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008796:	2300      	movs	r3, #0
 8008798:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087a2:	2b20      	cmp	r3, #32
 80087a4:	d004      	beq.n	80087b0 <USBD_StdDevReq+0x24>
 80087a6:	2b40      	cmp	r3, #64	; 0x40
 80087a8:	d002      	beq.n	80087b0 <USBD_StdDevReq+0x24>
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00a      	beq.n	80087c4 <USBD_StdDevReq+0x38>
 80087ae:	e050      	b.n	8008852 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	4798      	blx	r3
 80087be:	4603      	mov	r3, r0
 80087c0:	73fb      	strb	r3, [r7, #15]
    break;
 80087c2:	e04b      	b.n	800885c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	785b      	ldrb	r3, [r3, #1]
 80087c8:	2b09      	cmp	r3, #9
 80087ca:	d83c      	bhi.n	8008846 <USBD_StdDevReq+0xba>
 80087cc:	a201      	add	r2, pc, #4	; (adr r2, 80087d4 <USBD_StdDevReq+0x48>)
 80087ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d2:	bf00      	nop
 80087d4:	08008829 	.word	0x08008829
 80087d8:	0800883d 	.word	0x0800883d
 80087dc:	08008847 	.word	0x08008847
 80087e0:	08008833 	.word	0x08008833
 80087e4:	08008847 	.word	0x08008847
 80087e8:	08008807 	.word	0x08008807
 80087ec:	080087fd 	.word	0x080087fd
 80087f0:	08008847 	.word	0x08008847
 80087f4:	0800881f 	.word	0x0800881f
 80087f8:	08008811 	.word	0x08008811
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80087fc:	6839      	ldr	r1, [r7, #0]
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 f9ce 	bl	8008ba0 <USBD_GetDescriptor>
      break;
 8008804:	e024      	b.n	8008850 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008806:	6839      	ldr	r1, [r7, #0]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fb33 	bl	8008e74 <USBD_SetAddress>
      break;
 800880e:	e01f      	b.n	8008850 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fb70 	bl	8008ef8 <USBD_SetConfig>
 8008818:	4603      	mov	r3, r0
 800881a:	73fb      	strb	r3, [r7, #15]
      break;
 800881c:	e018      	b.n	8008850 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800881e:	6839      	ldr	r1, [r7, #0]
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fc0d 	bl	8009040 <USBD_GetConfig>
      break;
 8008826:	e013      	b.n	8008850 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008828:	6839      	ldr	r1, [r7, #0]
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fc3c 	bl	80090a8 <USBD_GetStatus>
      break;
 8008830:	e00e      	b.n	8008850 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008832:	6839      	ldr	r1, [r7, #0]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 fc6a 	bl	800910e <USBD_SetFeature>
      break;
 800883a:	e009      	b.n	8008850 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800883c:	6839      	ldr	r1, [r7, #0]
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 fc79 	bl	8009136 <USBD_ClrFeature>
      break;
 8008844:	e004      	b.n	8008850 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fccf 	bl	80091ec <USBD_CtlError>
      break;
 800884e:	bf00      	nop
    }
    break;
 8008850:	e004      	b.n	800885c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008852:	6839      	ldr	r1, [r7, #0]
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fcc9 	bl	80091ec <USBD_CtlError>
    break;
 800885a:	bf00      	nop
  }

  return ret;
 800885c:	7bfb      	ldrb	r3, [r7, #15]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop

08008868 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800887e:	2b20      	cmp	r3, #32
 8008880:	d003      	beq.n	800888a <USBD_StdItfReq+0x22>
 8008882:	2b40      	cmp	r3, #64	; 0x40
 8008884:	d001      	beq.n	800888a <USBD_StdItfReq+0x22>
 8008886:	2b00      	cmp	r3, #0
 8008888:	d12a      	bne.n	80088e0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008890:	3b01      	subs	r3, #1
 8008892:	2b02      	cmp	r3, #2
 8008894:	d81d      	bhi.n	80088d2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	889b      	ldrh	r3, [r3, #4]
 800889a:	b2db      	uxtb	r3, r3
 800889c:	2b01      	cmp	r3, #1
 800889e:	d813      	bhi.n	80088c8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	4798      	blx	r3
 80088ae:	4603      	mov	r3, r0
 80088b0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	88db      	ldrh	r3, [r3, #6]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d110      	bne.n	80088dc <USBD_StdItfReq+0x74>
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10d      	bne.n	80088dc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fd5e 	bl	8009382 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80088c6:	e009      	b.n	80088dc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80088c8:	6839      	ldr	r1, [r7, #0]
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fc8e 	bl	80091ec <USBD_CtlError>
      break;
 80088d0:	e004      	b.n	80088dc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80088d2:	6839      	ldr	r1, [r7, #0]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 fc89 	bl	80091ec <USBD_CtlError>
      break;
 80088da:	e000      	b.n	80088de <USBD_StdItfReq+0x76>
      break;
 80088dc:	bf00      	nop
    }
    break;
 80088de:	e004      	b.n	80088ea <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80088e0:	6839      	ldr	r1, [r7, #0]
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fc82 	bl	80091ec <USBD_CtlError>
    break;
 80088e8:	bf00      	nop
  }

  return ret;
 80088ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	889b      	ldrh	r3, [r3, #4]
 8008906:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008910:	2b20      	cmp	r3, #32
 8008912:	d004      	beq.n	800891e <USBD_StdEPReq+0x2a>
 8008914:	2b40      	cmp	r3, #64	; 0x40
 8008916:	d002      	beq.n	800891e <USBD_StdEPReq+0x2a>
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00a      	beq.n	8008932 <USBD_StdEPReq+0x3e>
 800891c:	e135      	b.n	8008b8a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	6839      	ldr	r1, [r7, #0]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	4798      	blx	r3
 800892c:	4603      	mov	r3, r0
 800892e:	73fb      	strb	r3, [r7, #15]
    break;
 8008930:	e130      	b.n	8008b94 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	785b      	ldrb	r3, [r3, #1]
 8008936:	2b01      	cmp	r3, #1
 8008938:	d03e      	beq.n	80089b8 <USBD_StdEPReq+0xc4>
 800893a:	2b03      	cmp	r3, #3
 800893c:	d002      	beq.n	8008944 <USBD_StdEPReq+0x50>
 800893e:	2b00      	cmp	r3, #0
 8008940:	d077      	beq.n	8008a32 <USBD_StdEPReq+0x13e>
 8008942:	e11c      	b.n	8008b7e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800894a:	2b02      	cmp	r3, #2
 800894c:	d002      	beq.n	8008954 <USBD_StdEPReq+0x60>
 800894e:	2b03      	cmp	r3, #3
 8008950:	d015      	beq.n	800897e <USBD_StdEPReq+0x8a>
 8008952:	e02b      	b.n	80089ac <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008954:	7bbb      	ldrb	r3, [r7, #14]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00c      	beq.n	8008974 <USBD_StdEPReq+0x80>
 800895a:	7bbb      	ldrb	r3, [r7, #14]
 800895c:	2b80      	cmp	r3, #128	; 0x80
 800895e:	d009      	beq.n	8008974 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008960:	7bbb      	ldrb	r3, [r7, #14]
 8008962:	4619      	mov	r1, r3
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f001 f933 	bl	8009bd0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800896a:	2180      	movs	r1, #128	; 0x80
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f001 f92f 	bl	8009bd0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008972:	e020      	b.n	80089b6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008974:	6839      	ldr	r1, [r7, #0]
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fc38 	bl	80091ec <USBD_CtlError>
        break;
 800897c:	e01b      	b.n	80089b6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	885b      	ldrh	r3, [r3, #2]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10e      	bne.n	80089a4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008986:	7bbb      	ldrb	r3, [r7, #14]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00b      	beq.n	80089a4 <USBD_StdEPReq+0xb0>
 800898c:	7bbb      	ldrb	r3, [r7, #14]
 800898e:	2b80      	cmp	r3, #128	; 0x80
 8008990:	d008      	beq.n	80089a4 <USBD_StdEPReq+0xb0>
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	88db      	ldrh	r3, [r3, #6]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d104      	bne.n	80089a4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800899a:	7bbb      	ldrb	r3, [r7, #14]
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f001 f916 	bl	8009bd0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fcec 	bl	8009382 <USBD_CtlSendStatus>

        break;
 80089aa:	e004      	b.n	80089b6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 fc1c 	bl	80091ec <USBD_CtlError>
        break;
 80089b4:	bf00      	nop
      }
      break;
 80089b6:	e0e7      	b.n	8008b88 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d002      	beq.n	80089c8 <USBD_StdEPReq+0xd4>
 80089c2:	2b03      	cmp	r3, #3
 80089c4:	d015      	beq.n	80089f2 <USBD_StdEPReq+0xfe>
 80089c6:	e02d      	b.n	8008a24 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00c      	beq.n	80089e8 <USBD_StdEPReq+0xf4>
 80089ce:	7bbb      	ldrb	r3, [r7, #14]
 80089d0:	2b80      	cmp	r3, #128	; 0x80
 80089d2:	d009      	beq.n	80089e8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80089d4:	7bbb      	ldrb	r3, [r7, #14]
 80089d6:	4619      	mov	r1, r3
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f001 f8f9 	bl	8009bd0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80089de:	2180      	movs	r1, #128	; 0x80
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f001 f8f5 	bl	8009bd0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80089e6:	e023      	b.n	8008a30 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fbfe 	bl	80091ec <USBD_CtlError>
        break;
 80089f0:	e01e      	b.n	8008a30 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	885b      	ldrh	r3, [r3, #2]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d119      	bne.n	8008a2e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80089fa:	7bbb      	ldrb	r3, [r7, #14]
 80089fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d004      	beq.n	8008a0e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a04:	7bbb      	ldrb	r3, [r7, #14]
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f001 f900 	bl	8009c0e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fcb7 	bl	8009382 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	6839      	ldr	r1, [r7, #0]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	4798      	blx	r3
        }
        break;
 8008a22:	e004      	b.n	8008a2e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008a24:	6839      	ldr	r1, [r7, #0]
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fbe0 	bl	80091ec <USBD_CtlError>
        break;
 8008a2c:	e000      	b.n	8008a30 <USBD_StdEPReq+0x13c>
        break;
 8008a2e:	bf00      	nop
      }
      break;
 8008a30:	e0aa      	b.n	8008b88 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d002      	beq.n	8008a42 <USBD_StdEPReq+0x14e>
 8008a3c:	2b03      	cmp	r3, #3
 8008a3e:	d032      	beq.n	8008aa6 <USBD_StdEPReq+0x1b2>
 8008a40:	e097      	b.n	8008b72 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a42:	7bbb      	ldrb	r3, [r7, #14]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d007      	beq.n	8008a58 <USBD_StdEPReq+0x164>
 8008a48:	7bbb      	ldrb	r3, [r7, #14]
 8008a4a:	2b80      	cmp	r3, #128	; 0x80
 8008a4c:	d004      	beq.n	8008a58 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008a4e:	6839      	ldr	r1, [r7, #0]
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 fbcb 	bl	80091ec <USBD_CtlError>
          break;
 8008a56:	e091      	b.n	8008b7c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	da0b      	bge.n	8008a78 <USBD_StdEPReq+0x184>
 8008a60:	7bbb      	ldrb	r3, [r7, #14]
 8008a62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a66:	4613      	mov	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	3310      	adds	r3, #16
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	4413      	add	r3, r2
 8008a74:	3304      	adds	r3, #4
 8008a76:	e00b      	b.n	8008a90 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008a78:	7bbb      	ldrb	r3, [r7, #14]
 8008a7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a7e:	4613      	mov	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	3304      	adds	r3, #4
 8008a90:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2200      	movs	r2, #0
 8008a96:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	2202      	movs	r2, #2
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fc15 	bl	80092ce <USBD_CtlSendData>
        break;
 8008aa4:	e06a      	b.n	8008b7c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008aa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	da11      	bge.n	8008ad2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008aae:	7bbb      	ldrb	r3, [r7, #14]
 8008ab0:	f003 020f 	and.w	r2, r3, #15
 8008ab4:	6879      	ldr	r1, [r7, #4]
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	440b      	add	r3, r1
 8008ac0:	3324      	adds	r3, #36	; 0x24
 8008ac2:	881b      	ldrh	r3, [r3, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d117      	bne.n	8008af8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008ac8:	6839      	ldr	r1, [r7, #0]
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 fb8e 	bl	80091ec <USBD_CtlError>
            break;
 8008ad0:	e054      	b.n	8008b7c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008ad2:	7bbb      	ldrb	r3, [r7, #14]
 8008ad4:	f003 020f 	and.w	r2, r3, #15
 8008ad8:	6879      	ldr	r1, [r7, #4]
 8008ada:	4613      	mov	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4413      	add	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	440b      	add	r3, r1
 8008ae4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008ae8:	881b      	ldrh	r3, [r3, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d104      	bne.n	8008af8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008aee:	6839      	ldr	r1, [r7, #0]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 fb7b 	bl	80091ec <USBD_CtlError>
            break;
 8008af6:	e041      	b.n	8008b7c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008af8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	da0b      	bge.n	8008b18 <USBD_StdEPReq+0x224>
 8008b00:	7bbb      	ldrb	r3, [r7, #14]
 8008b02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b06:	4613      	mov	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	3310      	adds	r3, #16
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	4413      	add	r3, r2
 8008b14:	3304      	adds	r3, #4
 8008b16:	e00b      	b.n	8008b30 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008b18:	7bbb      	ldrb	r3, [r7, #14]
 8008b1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b1e:	4613      	mov	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4413      	add	r3, r2
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	3304      	adds	r3, #4
 8008b30:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b32:	7bbb      	ldrb	r3, [r7, #14]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d002      	beq.n	8008b3e <USBD_StdEPReq+0x24a>
 8008b38:	7bbb      	ldrb	r3, [r7, #14]
 8008b3a:	2b80      	cmp	r3, #128	; 0x80
 8008b3c:	d103      	bne.n	8008b46 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	2200      	movs	r2, #0
 8008b42:	601a      	str	r2, [r3, #0]
 8008b44:	e00e      	b.n	8008b64 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008b46:	7bbb      	ldrb	r3, [r7, #14]
 8008b48:	4619      	mov	r1, r3
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f001 f87e 	bl	8009c4c <USBD_LL_IsStallEP>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	601a      	str	r2, [r3, #0]
 8008b5c:	e002      	b.n	8008b64 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	2200      	movs	r2, #0
 8008b62:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	2202      	movs	r2, #2
 8008b68:	4619      	mov	r1, r3
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 fbaf 	bl	80092ce <USBD_CtlSendData>
          break;
 8008b70:	e004      	b.n	8008b7c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fb39 	bl	80091ec <USBD_CtlError>
        break;
 8008b7a:	bf00      	nop
      }
      break;
 8008b7c:	e004      	b.n	8008b88 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fb33 	bl	80091ec <USBD_CtlError>
      break;
 8008b86:	bf00      	nop
    }
    break;
 8008b88:	e004      	b.n	8008b94 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008b8a:	6839      	ldr	r1, [r7, #0]
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fb2d 	bl	80091ec <USBD_CtlError>
    break;
 8008b92:	bf00      	nop
  }

  return ret;
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
	...

08008ba0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008baa:	2300      	movs	r3, #0
 8008bac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	885b      	ldrh	r3, [r3, #2]
 8008bba:	0a1b      	lsrs	r3, r3, #8
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	2b06      	cmp	r3, #6
 8008bc2:	f200 8128 	bhi.w	8008e16 <USBD_GetDescriptor+0x276>
 8008bc6:	a201      	add	r2, pc, #4	; (adr r2, 8008bcc <USBD_GetDescriptor+0x2c>)
 8008bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bcc:	08008be9 	.word	0x08008be9
 8008bd0:	08008c01 	.word	0x08008c01
 8008bd4:	08008c41 	.word	0x08008c41
 8008bd8:	08008e17 	.word	0x08008e17
 8008bdc:	08008e17 	.word	0x08008e17
 8008be0:	08008db7 	.word	0x08008db7
 8008be4:	08008de3 	.word	0x08008de3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	7c12      	ldrb	r2, [r2, #16]
 8008bf4:	f107 0108 	add.w	r1, r7, #8
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	4798      	blx	r3
 8008bfc:	60f8      	str	r0, [r7, #12]
    break;
 8008bfe:	e112      	b.n	8008e26 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	7c1b      	ldrb	r3, [r3, #16]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d10d      	bne.n	8008c24 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c10:	f107 0208 	add.w	r2, r7, #8
 8008c14:	4610      	mov	r0, r2
 8008c16:	4798      	blx	r3
 8008c18:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	2202      	movs	r2, #2
 8008c20:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008c22:	e100      	b.n	8008e26 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2c:	f107 0208 	add.w	r2, r7, #8
 8008c30:	4610      	mov	r0, r2
 8008c32:	4798      	blx	r3
 8008c34:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	701a      	strb	r2, [r3, #0]
    break;
 8008c3e:	e0f2      	b.n	8008e26 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	885b      	ldrh	r3, [r3, #2]
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	2b05      	cmp	r3, #5
 8008c48:	f200 80ac 	bhi.w	8008da4 <USBD_GetDescriptor+0x204>
 8008c4c:	a201      	add	r2, pc, #4	; (adr r2, 8008c54 <USBD_GetDescriptor+0xb4>)
 8008c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c52:	bf00      	nop
 8008c54:	08008c6d 	.word	0x08008c6d
 8008c58:	08008ca1 	.word	0x08008ca1
 8008c5c:	08008cd5 	.word	0x08008cd5
 8008c60:	08008d09 	.word	0x08008d09
 8008c64:	08008d3d 	.word	0x08008d3d
 8008c68:	08008d71 	.word	0x08008d71
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00b      	beq.n	8008c90 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	7c12      	ldrb	r2, [r2, #16]
 8008c84:	f107 0108 	add.w	r1, r7, #8
 8008c88:	4610      	mov	r0, r2
 8008c8a:	4798      	blx	r3
 8008c8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c8e:	e091      	b.n	8008db4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 faaa 	bl	80091ec <USBD_CtlError>
        err++;
 8008c98:	7afb      	ldrb	r3, [r7, #11]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	72fb      	strb	r3, [r7, #11]
      break;
 8008c9e:	e089      	b.n	8008db4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00b      	beq.n	8008cc4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	7c12      	ldrb	r2, [r2, #16]
 8008cb8:	f107 0108 	add.w	r1, r7, #8
 8008cbc:	4610      	mov	r0, r2
 8008cbe:	4798      	blx	r3
 8008cc0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cc2:	e077      	b.n	8008db4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008cc4:	6839      	ldr	r1, [r7, #0]
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 fa90 	bl	80091ec <USBD_CtlError>
        err++;
 8008ccc:	7afb      	ldrb	r3, [r7, #11]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	72fb      	strb	r3, [r7, #11]
      break;
 8008cd2:	e06f      	b.n	8008db4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00b      	beq.n	8008cf8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	7c12      	ldrb	r2, [r2, #16]
 8008cec:	f107 0108 	add.w	r1, r7, #8
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	4798      	blx	r3
 8008cf4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cf6:	e05d      	b.n	8008db4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fa76 	bl	80091ec <USBD_CtlError>
        err++;
 8008d00:	7afb      	ldrb	r3, [r7, #11]
 8008d02:	3301      	adds	r3, #1
 8008d04:	72fb      	strb	r3, [r7, #11]
      break;
 8008d06:	e055      	b.n	8008db4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00b      	beq.n	8008d2c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	7c12      	ldrb	r2, [r2, #16]
 8008d20:	f107 0108 	add.w	r1, r7, #8
 8008d24:	4610      	mov	r0, r2
 8008d26:	4798      	blx	r3
 8008d28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d2a:	e043      	b.n	8008db4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fa5c 	bl	80091ec <USBD_CtlError>
        err++;
 8008d34:	7afb      	ldrb	r3, [r7, #11]
 8008d36:	3301      	adds	r3, #1
 8008d38:	72fb      	strb	r3, [r7, #11]
      break;
 8008d3a:	e03b      	b.n	8008db4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d42:	695b      	ldr	r3, [r3, #20]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00b      	beq.n	8008d60 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d4e:	695b      	ldr	r3, [r3, #20]
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	7c12      	ldrb	r2, [r2, #16]
 8008d54:	f107 0108 	add.w	r1, r7, #8
 8008d58:	4610      	mov	r0, r2
 8008d5a:	4798      	blx	r3
 8008d5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d5e:	e029      	b.n	8008db4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 fa42 	bl	80091ec <USBD_CtlError>
        err++;
 8008d68:	7afb      	ldrb	r3, [r7, #11]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	72fb      	strb	r3, [r7, #11]
      break;
 8008d6e:	e021      	b.n	8008db4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d76:	699b      	ldr	r3, [r3, #24]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00b      	beq.n	8008d94 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	7c12      	ldrb	r2, [r2, #16]
 8008d88:	f107 0108 	add.w	r1, r7, #8
 8008d8c:	4610      	mov	r0, r2
 8008d8e:	4798      	blx	r3
 8008d90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d92:	e00f      	b.n	8008db4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fa28 	bl	80091ec <USBD_CtlError>
        err++;
 8008d9c:	7afb      	ldrb	r3, [r7, #11]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	72fb      	strb	r3, [r7, #11]
      break;
 8008da2:	e007      	b.n	8008db4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008da4:	6839      	ldr	r1, [r7, #0]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 fa20 	bl	80091ec <USBD_CtlError>
      err++;
 8008dac:	7afb      	ldrb	r3, [r7, #11]
 8008dae:	3301      	adds	r3, #1
 8008db0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008db2:	bf00      	nop
    }
    break;
 8008db4:	e037      	b.n	8008e26 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	7c1b      	ldrb	r3, [r3, #16]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d109      	bne.n	8008dd2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc6:	f107 0208 	add.w	r2, r7, #8
 8008dca:	4610      	mov	r0, r2
 8008dcc:	4798      	blx	r3
 8008dce:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008dd0:	e029      	b.n	8008e26 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fa09 	bl	80091ec <USBD_CtlError>
      err++;
 8008dda:	7afb      	ldrb	r3, [r7, #11]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	72fb      	strb	r3, [r7, #11]
    break;
 8008de0:	e021      	b.n	8008e26 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	7c1b      	ldrb	r3, [r3, #16]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10d      	bne.n	8008e06 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df2:	f107 0208 	add.w	r2, r7, #8
 8008df6:	4610      	mov	r0, r2
 8008df8:	4798      	blx	r3
 8008dfa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	2207      	movs	r2, #7
 8008e02:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008e04:	e00f      	b.n	8008e26 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008e06:	6839      	ldr	r1, [r7, #0]
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 f9ef 	bl	80091ec <USBD_CtlError>
      err++;
 8008e0e:	7afb      	ldrb	r3, [r7, #11]
 8008e10:	3301      	adds	r3, #1
 8008e12:	72fb      	strb	r3, [r7, #11]
    break;
 8008e14:	e007      	b.n	8008e26 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008e16:	6839      	ldr	r1, [r7, #0]
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 f9e7 	bl	80091ec <USBD_CtlError>
    err++;
 8008e1e:	7afb      	ldrb	r3, [r7, #11]
 8008e20:	3301      	adds	r3, #1
 8008e22:	72fb      	strb	r3, [r7, #11]
    break;
 8008e24:	bf00      	nop
  }

  if (err != 0U)
 8008e26:	7afb      	ldrb	r3, [r7, #11]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d11e      	bne.n	8008e6a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	88db      	ldrh	r3, [r3, #6]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d016      	beq.n	8008e62 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008e34:	893b      	ldrh	r3, [r7, #8]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00e      	beq.n	8008e58 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	88da      	ldrh	r2, [r3, #6]
 8008e3e:	893b      	ldrh	r3, [r7, #8]
 8008e40:	4293      	cmp	r3, r2
 8008e42:	bf28      	it	cs
 8008e44:	4613      	movcs	r3, r2
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e4a:	893b      	ldrh	r3, [r7, #8]
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	68f9      	ldr	r1, [r7, #12]
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 fa3c 	bl	80092ce <USBD_CtlSendData>
 8008e56:	e009      	b.n	8008e6c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f9c6 	bl	80091ec <USBD_CtlError>
 8008e60:	e004      	b.n	8008e6c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fa8d 	bl	8009382 <USBD_CtlSendStatus>
 8008e68:	e000      	b.n	8008e6c <USBD_GetDescriptor+0x2cc>
    return;
 8008e6a:	bf00      	nop
    }
  }
}
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop

08008e74 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	889b      	ldrh	r3, [r3, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d130      	bne.n	8008ee8 <USBD_SetAddress+0x74>
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	88db      	ldrh	r3, [r3, #6]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d12c      	bne.n	8008ee8 <USBD_SetAddress+0x74>
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	885b      	ldrh	r3, [r3, #2]
 8008e92:	2b7f      	cmp	r3, #127	; 0x7f
 8008e94:	d828      	bhi.n	8008ee8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	885b      	ldrh	r3, [r3, #2]
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ea0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ea8:	2b03      	cmp	r3, #3
 8008eaa:	d104      	bne.n	8008eb6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008eac:	6839      	ldr	r1, [r7, #0]
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f99c 	bl	80091ec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eb4:	e01c      	b.n	8008ef0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	7bfa      	ldrb	r2, [r7, #15]
 8008eba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ebe:	7bfb      	ldrb	r3, [r7, #15]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 feee 	bl	8009ca4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fa5a 	bl	8009382 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ece:	7bfb      	ldrb	r3, [r7, #15]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d004      	beq.n	8008ede <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008edc:	e008      	b.n	8008ef0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ee6:	e003      	b.n	8008ef0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f97e 	bl	80091ec <USBD_CtlError>
  }
}
 8008ef0:	bf00      	nop
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f02:	2300      	movs	r3, #0
 8008f04:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	885b      	ldrh	r3, [r3, #2]
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	4b4b      	ldr	r3, [pc, #300]	; (800903c <USBD_SetConfig+0x144>)
 8008f0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008f10:	4b4a      	ldr	r3, [pc, #296]	; (800903c <USBD_SetConfig+0x144>)
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d905      	bls.n	8008f24 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 f966 	bl	80091ec <USBD_CtlError>
    return USBD_FAIL;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e087      	b.n	8009034 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d002      	beq.n	8008f34 <USBD_SetConfig+0x3c>
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	d025      	beq.n	8008f7e <USBD_SetConfig+0x86>
 8008f32:	e071      	b.n	8009018 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008f34:	4b41      	ldr	r3, [pc, #260]	; (800903c <USBD_SetConfig+0x144>)
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d01c      	beq.n	8008f76 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008f3c:	4b3f      	ldr	r3, [pc, #252]	; (800903c <USBD_SetConfig+0x144>)
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	461a      	mov	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f46:	4b3d      	ldr	r3, [pc, #244]	; (800903c <USBD_SetConfig+0x144>)
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f7ff f9a7 	bl	80082a0 <USBD_SetClassConfig>
 8008f52:	4603      	mov	r3, r0
 8008f54:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008f56:	7bfb      	ldrb	r3, [r7, #15]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d004      	beq.n	8008f66 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f944 	bl	80091ec <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008f64:	e065      	b.n	8009032 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 fa0b 	bl	8009382 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2203      	movs	r2, #3
 8008f70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008f74:	e05d      	b.n	8009032 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fa03 	bl	8009382 <USBD_CtlSendStatus>
    break;
 8008f7c:	e059      	b.n	8009032 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008f7e:	4b2f      	ldr	r3, [pc, #188]	; (800903c <USBD_SetConfig+0x144>)
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d112      	bne.n	8008fac <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2202      	movs	r2, #2
 8008f8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008f8e:	4b2b      	ldr	r3, [pc, #172]	; (800903c <USBD_SetConfig+0x144>)
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	461a      	mov	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f98:	4b28      	ldr	r3, [pc, #160]	; (800903c <USBD_SetConfig+0x144>)
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7ff f99a 	bl	80082d8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 f9ec 	bl	8009382 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008faa:	e042      	b.n	8009032 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008fac:	4b23      	ldr	r3, [pc, #140]	; (800903c <USBD_SetConfig+0x144>)
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d02a      	beq.n	8009010 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7ff f988 	bl	80082d8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008fc8:	4b1c      	ldr	r3, [pc, #112]	; (800903c <USBD_SetConfig+0x144>)
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	461a      	mov	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008fd2:	4b1a      	ldr	r3, [pc, #104]	; (800903c <USBD_SetConfig+0x144>)
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f7ff f961 	bl	80082a0 <USBD_SetClassConfig>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00f      	beq.n	8009008 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008fe8:	6839      	ldr	r1, [r7, #0]
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f8fe 	bl	80091ec <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f7ff f96d 	bl	80082d8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2202      	movs	r2, #2
 8009002:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009006:	e014      	b.n	8009032 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 f9ba 	bl	8009382 <USBD_CtlSendStatus>
    break;
 800900e:	e010      	b.n	8009032 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 f9b6 	bl	8009382 <USBD_CtlSendStatus>
    break;
 8009016:	e00c      	b.n	8009032 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009018:	6839      	ldr	r1, [r7, #0]
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f8e6 	bl	80091ec <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009020:	4b06      	ldr	r3, [pc, #24]	; (800903c <USBD_SetConfig+0x144>)
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	4619      	mov	r1, r3
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7ff f956 	bl	80082d8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800902c:	2303      	movs	r3, #3
 800902e:	73fb      	strb	r3, [r7, #15]
    break;
 8009030:	bf00      	nop
  }

  return ret;
 8009032:	7bfb      	ldrb	r3, [r7, #15]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	20000378 	.word	0x20000378

08009040 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	88db      	ldrh	r3, [r3, #6]
 800904e:	2b01      	cmp	r3, #1
 8009050:	d004      	beq.n	800905c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f8c9 	bl	80091ec <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800905a:	e021      	b.n	80090a0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009062:	2b01      	cmp	r3, #1
 8009064:	db17      	blt.n	8009096 <USBD_GetConfig+0x56>
 8009066:	2b02      	cmp	r3, #2
 8009068:	dd02      	ble.n	8009070 <USBD_GetConfig+0x30>
 800906a:	2b03      	cmp	r3, #3
 800906c:	d00b      	beq.n	8009086 <USBD_GetConfig+0x46>
 800906e:	e012      	b.n	8009096 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	3308      	adds	r3, #8
 800907a:	2201      	movs	r2, #1
 800907c:	4619      	mov	r1, r3
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f925 	bl	80092ce <USBD_CtlSendData>
      break;
 8009084:	e00c      	b.n	80090a0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	3304      	adds	r3, #4
 800908a:	2201      	movs	r2, #1
 800908c:	4619      	mov	r1, r3
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f91d 	bl	80092ce <USBD_CtlSendData>
      break;
 8009094:	e004      	b.n	80090a0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8009096:	6839      	ldr	r1, [r7, #0]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 f8a7 	bl	80091ec <USBD_CtlError>
      break;
 800909e:	bf00      	nop
}
 80090a0:	bf00      	nop
 80090a2:	3708      	adds	r7, #8
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090b8:	3b01      	subs	r3, #1
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d81e      	bhi.n	80090fc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	88db      	ldrh	r3, [r3, #6]
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d004      	beq.n	80090d0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 f88f 	bl	80091ec <USBD_CtlError>
      break;
 80090ce:	e01a      	b.n	8009106 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d005      	beq.n	80090ec <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	f043 0202 	orr.w	r2, r3, #2
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	330c      	adds	r3, #12
 80090f0:	2202      	movs	r2, #2
 80090f2:	4619      	mov	r1, r3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f8ea 	bl	80092ce <USBD_CtlSendData>
    break;
 80090fa:	e004      	b.n	8009106 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f874 	bl	80091ec <USBD_CtlError>
    break;
 8009104:	bf00      	nop
  }
}
 8009106:	bf00      	nop
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b082      	sub	sp, #8
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
 8009116:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	885b      	ldrh	r3, [r3, #2]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d106      	bne.n	800912e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 f92a 	bl	8009382 <USBD_CtlSendStatus>
  }
}
 800912e:	bf00      	nop
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b082      	sub	sp, #8
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009146:	3b01      	subs	r3, #1
 8009148:	2b02      	cmp	r3, #2
 800914a:	d80b      	bhi.n	8009164 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	885b      	ldrh	r3, [r3, #2]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d10c      	bne.n	800916e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f910 	bl	8009382 <USBD_CtlSendStatus>
      }
      break;
 8009162:	e004      	b.n	800916e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009164:	6839      	ldr	r1, [r7, #0]
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f840 	bl	80091ec <USBD_CtlError>
      break;
 800916c:	e000      	b.n	8009170 <USBD_ClrFeature+0x3a>
      break;
 800916e:	bf00      	nop
  }
}
 8009170:	bf00      	nop
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	781a      	ldrb	r2, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	3301      	adds	r3, #1
 8009192:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	781a      	ldrb	r2, [r3, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	3301      	adds	r3, #1
 80091a0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f7ff fad3 	bl	800874e <SWAPBYTE>
 80091a8:	4603      	mov	r3, r0
 80091aa:	461a      	mov	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	3301      	adds	r3, #1
 80091b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	3301      	adds	r3, #1
 80091ba:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f7ff fac6 	bl	800874e <SWAPBYTE>
 80091c2:	4603      	mov	r3, r0
 80091c4:	461a      	mov	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	3301      	adds	r3, #1
 80091ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	3301      	adds	r3, #1
 80091d4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f7ff fab9 	bl	800874e <SWAPBYTE>
 80091dc:	4603      	mov	r3, r0
 80091de:	461a      	mov	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	80da      	strh	r2, [r3, #6]
}
 80091e4:	bf00      	nop
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80091f6:	2180      	movs	r1, #128	; 0x80
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fce9 	bl	8009bd0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80091fe:	2100      	movs	r1, #0
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 fce5 	bl	8009bd0 <USBD_LL_StallEP>
}
 8009206:	bf00      	nop
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b086      	sub	sp, #24
 8009212:	af00      	add	r7, sp, #0
 8009214:	60f8      	str	r0, [r7, #12]
 8009216:	60b9      	str	r1, [r7, #8]
 8009218:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800921a:	2300      	movs	r3, #0
 800921c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d036      	beq.n	8009292 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009228:	6938      	ldr	r0, [r7, #16]
 800922a:	f000 f836 	bl	800929a <USBD_GetLen>
 800922e:	4603      	mov	r3, r0
 8009230:	3301      	adds	r3, #1
 8009232:	b29b      	uxth	r3, r3
 8009234:	005b      	lsls	r3, r3, #1
 8009236:	b29a      	uxth	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800923c:	7dfb      	ldrb	r3, [r7, #23]
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	4413      	add	r3, r2
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	7812      	ldrb	r2, [r2, #0]
 8009246:	701a      	strb	r2, [r3, #0]
  idx++;
 8009248:	7dfb      	ldrb	r3, [r7, #23]
 800924a:	3301      	adds	r3, #1
 800924c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800924e:	7dfb      	ldrb	r3, [r7, #23]
 8009250:	68ba      	ldr	r2, [r7, #8]
 8009252:	4413      	add	r3, r2
 8009254:	2203      	movs	r2, #3
 8009256:	701a      	strb	r2, [r3, #0]
  idx++;
 8009258:	7dfb      	ldrb	r3, [r7, #23]
 800925a:	3301      	adds	r3, #1
 800925c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800925e:	e013      	b.n	8009288 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009260:	7dfb      	ldrb	r3, [r7, #23]
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	4413      	add	r3, r2
 8009266:	693a      	ldr	r2, [r7, #16]
 8009268:	7812      	ldrb	r2, [r2, #0]
 800926a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	3301      	adds	r3, #1
 8009270:	613b      	str	r3, [r7, #16]
    idx++;
 8009272:	7dfb      	ldrb	r3, [r7, #23]
 8009274:	3301      	adds	r3, #1
 8009276:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009278:	7dfb      	ldrb	r3, [r7, #23]
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	4413      	add	r3, r2
 800927e:	2200      	movs	r2, #0
 8009280:	701a      	strb	r2, [r3, #0]
    idx++;
 8009282:	7dfb      	ldrb	r3, [r7, #23]
 8009284:	3301      	adds	r3, #1
 8009286:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d1e7      	bne.n	8009260 <USBD_GetString+0x52>
 8009290:	e000      	b.n	8009294 <USBD_GetString+0x86>
    return;
 8009292:	bf00      	nop
  }
}
 8009294:	3718      	adds	r7, #24
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800929a:	b480      	push	{r7}
 800929c:	b085      	sub	sp, #20
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80092a2:	2300      	movs	r3, #0
 80092a4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80092aa:	e005      	b.n	80092b8 <USBD_GetLen+0x1e>
  {
    len++;
 80092ac:	7bfb      	ldrb	r3, [r7, #15]
 80092ae:	3301      	adds	r3, #1
 80092b0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	3301      	adds	r3, #1
 80092b6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1f5      	bne.n	80092ac <USBD_GetLen+0x12>
  }

  return len;
 80092c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr

080092ce <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	60f8      	str	r0, [r7, #12]
 80092d6:	60b9      	str	r1, [r7, #8]
 80092d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2202      	movs	r2, #2
 80092de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	2100      	movs	r1, #0
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f000 fcf4 	bl	8009ce2 <USBD_LL_Transmit>

  return USBD_OK;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	2100      	movs	r1, #0
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f000 fce3 	bl	8009ce2 <USBD_LL_Transmit>

  return USBD_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b084      	sub	sp, #16
 800932a:	af00      	add	r7, sp, #0
 800932c:	60f8      	str	r0, [r7, #12]
 800932e:	60b9      	str	r1, [r7, #8]
 8009330:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2203      	movs	r2, #3
 8009336:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	2100      	movs	r1, #0
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f000 fce7 	bl	8009d24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	2100      	movs	r1, #0
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f000 fcd6 	bl	8009d24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b082      	sub	sp, #8
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2204      	movs	r2, #4
 800938e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009392:	2300      	movs	r3, #0
 8009394:	2200      	movs	r2, #0
 8009396:	2100      	movs	r1, #0
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 fca2 	bl	8009ce2 <USBD_LL_Transmit>

  return USBD_OK;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2205      	movs	r2, #5
 80093b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093b8:	2300      	movs	r3, #0
 80093ba:	2200      	movs	r2, #0
 80093bc:	2100      	movs	r1, #0
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 fcb0 	bl	8009d24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3708      	adds	r7, #8
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
	...

080093d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80093d4:	2200      	movs	r2, #0
 80093d6:	4912      	ldr	r1, [pc, #72]	; (8009420 <MX_USB_DEVICE_Init+0x50>)
 80093d8:	4812      	ldr	r0, [pc, #72]	; (8009424 <MX_USB_DEVICE_Init+0x54>)
 80093da:	f7fe fef3 	bl	80081c4 <USBD_Init>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d001      	beq.n	80093e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80093e4:	f7f8 f93e 	bl	8001664 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80093e8:	490f      	ldr	r1, [pc, #60]	; (8009428 <MX_USB_DEVICE_Init+0x58>)
 80093ea:	480e      	ldr	r0, [pc, #56]	; (8009424 <MX_USB_DEVICE_Init+0x54>)
 80093ec:	f7fe ff20 	bl	8008230 <USBD_RegisterClass>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80093f6:	f7f8 f935 	bl	8001664 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80093fa:	490c      	ldr	r1, [pc, #48]	; (800942c <MX_USB_DEVICE_Init+0x5c>)
 80093fc:	4809      	ldr	r0, [pc, #36]	; (8009424 <MX_USB_DEVICE_Init+0x54>)
 80093fe:	f7fe fe45 	bl	800808c <USBD_CDC_RegisterInterface>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d001      	beq.n	800940c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009408:	f7f8 f92c 	bl	8001664 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800940c:	4805      	ldr	r0, [pc, #20]	; (8009424 <MX_USB_DEVICE_Init+0x54>)
 800940e:	f7fe ff30 	bl	8008272 <USBD_Start>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d001      	beq.n	800941c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009418:	f7f8 f924 	bl	8001664 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800941c:	bf00      	nop
 800941e:	bd80      	pop	{r7, pc}
 8009420:	20000138 	.word	0x20000138
 8009424:	200004fc 	.word	0x200004fc
 8009428:	20000018 	.word	0x20000018
 800942c:	20000124 	.word	0x20000124

08009430 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009434:	2200      	movs	r2, #0
 8009436:	4905      	ldr	r1, [pc, #20]	; (800944c <CDC_Init_FS+0x1c>)
 8009438:	4805      	ldr	r0, [pc, #20]	; (8009450 <CDC_Init_FS+0x20>)
 800943a:	f7fe fe3c 	bl	80080b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800943e:	4905      	ldr	r1, [pc, #20]	; (8009454 <CDC_Init_FS+0x24>)
 8009440:	4803      	ldr	r0, [pc, #12]	; (8009450 <CDC_Init_FS+0x20>)
 8009442:	f7fe fe51 	bl	80080e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009446:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009448:	4618      	mov	r0, r3
 800944a:	bd80      	pop	{r7, pc}
 800944c:	20000fcc 	.word	0x20000fcc
 8009450:	200004fc 	.word	0x200004fc
 8009454:	200007cc 	.word	0x200007cc

08009458 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009458:	b480      	push	{r7}
 800945a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800945c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800945e:	4618      	mov	r0, r3
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	4603      	mov	r3, r0
 8009470:	6039      	str	r1, [r7, #0]
 8009472:	71fb      	strb	r3, [r7, #7]
 8009474:	4613      	mov	r3, r2
 8009476:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009478:	79fb      	ldrb	r3, [r7, #7]
 800947a:	2b23      	cmp	r3, #35	; 0x23
 800947c:	d85c      	bhi.n	8009538 <CDC_Control_FS+0xd0>
 800947e:	a201      	add	r2, pc, #4	; (adr r2, 8009484 <CDC_Control_FS+0x1c>)
 8009480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009484:	08009539 	.word	0x08009539
 8009488:	08009539 	.word	0x08009539
 800948c:	08009539 	.word	0x08009539
 8009490:	08009539 	.word	0x08009539
 8009494:	08009539 	.word	0x08009539
 8009498:	08009539 	.word	0x08009539
 800949c:	08009539 	.word	0x08009539
 80094a0:	08009539 	.word	0x08009539
 80094a4:	08009539 	.word	0x08009539
 80094a8:	08009539 	.word	0x08009539
 80094ac:	08009539 	.word	0x08009539
 80094b0:	08009539 	.word	0x08009539
 80094b4:	08009539 	.word	0x08009539
 80094b8:	08009539 	.word	0x08009539
 80094bc:	08009539 	.word	0x08009539
 80094c0:	08009539 	.word	0x08009539
 80094c4:	08009539 	.word	0x08009539
 80094c8:	08009539 	.word	0x08009539
 80094cc:	08009539 	.word	0x08009539
 80094d0:	08009539 	.word	0x08009539
 80094d4:	08009539 	.word	0x08009539
 80094d8:	08009539 	.word	0x08009539
 80094dc:	08009539 	.word	0x08009539
 80094e0:	08009539 	.word	0x08009539
 80094e4:	08009539 	.word	0x08009539
 80094e8:	08009539 	.word	0x08009539
 80094ec:	08009539 	.word	0x08009539
 80094f0:	08009539 	.word	0x08009539
 80094f4:	08009539 	.word	0x08009539
 80094f8:	08009539 	.word	0x08009539
 80094fc:	08009539 	.word	0x08009539
 8009500:	08009539 	.word	0x08009539
 8009504:	08009515 	.word	0x08009515
 8009508:	08009527 	.word	0x08009527
 800950c:	08009539 	.word	0x08009539
 8009510:	08009539 	.word	0x08009539
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8009514:	4b0c      	ldr	r3, [pc, #48]	; (8009548 <CDC_Control_FS+0xe0>)
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	6810      	ldr	r0, [r2, #0]
 800951a:	6018      	str	r0, [r3, #0]
 800951c:	8891      	ldrh	r1, [r2, #4]
 800951e:	7992      	ldrb	r2, [r2, #6]
 8009520:	8099      	strh	r1, [r3, #4]
 8009522:	719a      	strb	r2, [r3, #6]
    break;
 8009524:	e009      	b.n	800953a <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
        memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	4a07      	ldr	r2, [pc, #28]	; (8009548 <CDC_Control_FS+0xe0>)
 800952a:	6810      	ldr	r0, [r2, #0]
 800952c:	6018      	str	r0, [r3, #0]
 800952e:	8891      	ldrh	r1, [r2, #4]
 8009530:	7992      	ldrb	r2, [r2, #6]
 8009532:	8099      	strh	r1, [r3, #4]
 8009534:	719a      	strb	r2, [r3, #6]
    break;
 8009536:	e000      	b.n	800953a <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009538:	bf00      	nop
  }

  return (USBD_OK);
 800953a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800953c:	4618      	mov	r0, r3
 800953e:	370c      	adds	r7, #12
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr
 8009548:	2000011c 	.word	0x2000011c

0800954c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009556:	6879      	ldr	r1, [r7, #4]
 8009558:	4805      	ldr	r0, [pc, #20]	; (8009570 <CDC_Receive_FS+0x24>)
 800955a:	f7fe fdc5 	bl	80080e8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800955e:	4804      	ldr	r0, [pc, #16]	; (8009570 <CDC_Receive_FS+0x24>)
 8009560:	f7fe fe06 	bl	8008170 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009564:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009566:	4618      	mov	r0, r3
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	200004fc 	.word	0x200004fc

08009574 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	460b      	mov	r3, r1
 800957e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009584:	4b0d      	ldr	r3, [pc, #52]	; (80095bc <CDC_Transmit_FS+0x48>)
 8009586:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800958a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009592:	2b00      	cmp	r3, #0
 8009594:	d001      	beq.n	800959a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009596:	2301      	movs	r3, #1
 8009598:	e00b      	b.n	80095b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800959a:	887b      	ldrh	r3, [r7, #2]
 800959c:	461a      	mov	r2, r3
 800959e:	6879      	ldr	r1, [r7, #4]
 80095a0:	4806      	ldr	r0, [pc, #24]	; (80095bc <CDC_Transmit_FS+0x48>)
 80095a2:	f7fe fd88 	bl	80080b6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80095a6:	4805      	ldr	r0, [pc, #20]	; (80095bc <CDC_Transmit_FS+0x48>)
 80095a8:	f7fe fdb2 	bl	8008110 <USBD_CDC_TransmitPacket>
 80095ac:	4603      	mov	r3, r0
 80095ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	200004fc 	.word	0x200004fc

080095c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b087      	sub	sp, #28
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	4613      	mov	r3, r2
 80095cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80095ce:	2300      	movs	r3, #0
 80095d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80095d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	371c      	adds	r7, #28
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
	...

080095e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	4603      	mov	r3, r0
 80095ec:	6039      	str	r1, [r7, #0]
 80095ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	2212      	movs	r2, #18
 80095f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80095f6:	4b03      	ldr	r3, [pc, #12]	; (8009604 <USBD_FS_DeviceDescriptor+0x20>)
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr
 8009604:	20000154 	.word	0x20000154

08009608 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	4603      	mov	r3, r0
 8009610:	6039      	str	r1, [r7, #0]
 8009612:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	2204      	movs	r2, #4
 8009618:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800961a:	4b03      	ldr	r3, [pc, #12]	; (8009628 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800961c:	4618      	mov	r0, r3
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr
 8009628:	20000168 	.word	0x20000168

0800962c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	4603      	mov	r3, r0
 8009634:	6039      	str	r1, [r7, #0]
 8009636:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009638:	79fb      	ldrb	r3, [r7, #7]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d105      	bne.n	800964a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800963e:	683a      	ldr	r2, [r7, #0]
 8009640:	4907      	ldr	r1, [pc, #28]	; (8009660 <USBD_FS_ProductStrDescriptor+0x34>)
 8009642:	4808      	ldr	r0, [pc, #32]	; (8009664 <USBD_FS_ProductStrDescriptor+0x38>)
 8009644:	f7ff fde3 	bl	800920e <USBD_GetString>
 8009648:	e004      	b.n	8009654 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800964a:	683a      	ldr	r2, [r7, #0]
 800964c:	4904      	ldr	r1, [pc, #16]	; (8009660 <USBD_FS_ProductStrDescriptor+0x34>)
 800964e:	4805      	ldr	r0, [pc, #20]	; (8009664 <USBD_FS_ProductStrDescriptor+0x38>)
 8009650:	f7ff fddd 	bl	800920e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009654:	4b02      	ldr	r3, [pc, #8]	; (8009660 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009656:	4618      	mov	r0, r3
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	200017cc 	.word	0x200017cc
 8009664:	0800bfd8 	.word	0x0800bfd8

08009668 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	4603      	mov	r3, r0
 8009670:	6039      	str	r1, [r7, #0]
 8009672:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009674:	683a      	ldr	r2, [r7, #0]
 8009676:	4904      	ldr	r1, [pc, #16]	; (8009688 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009678:	4804      	ldr	r0, [pc, #16]	; (800968c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800967a:	f7ff fdc8 	bl	800920e <USBD_GetString>
  return USBD_StrDesc;
 800967e:	4b02      	ldr	r3, [pc, #8]	; (8009688 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009680:	4618      	mov	r0, r3
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	200017cc 	.word	0x200017cc
 800968c:	0800bff0 	.word	0x0800bff0

08009690 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	4603      	mov	r3, r0
 8009698:	6039      	str	r1, [r7, #0]
 800969a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	221a      	movs	r2, #26
 80096a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80096a2:	f000 f843 	bl	800972c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80096a6:	4b02      	ldr	r3, [pc, #8]	; (80096b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	2000016c 	.word	0x2000016c

080096b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	4603      	mov	r3, r0
 80096bc:	6039      	str	r1, [r7, #0]
 80096be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80096c0:	79fb      	ldrb	r3, [r7, #7]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d105      	bne.n	80096d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	4907      	ldr	r1, [pc, #28]	; (80096e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80096ca:	4808      	ldr	r0, [pc, #32]	; (80096ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80096cc:	f7ff fd9f 	bl	800920e <USBD_GetString>
 80096d0:	e004      	b.n	80096dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	4904      	ldr	r1, [pc, #16]	; (80096e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80096d6:	4805      	ldr	r0, [pc, #20]	; (80096ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80096d8:	f7ff fd99 	bl	800920e <USBD_GetString>
  }
  return USBD_StrDesc;
 80096dc:	4b02      	ldr	r3, [pc, #8]	; (80096e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	200017cc 	.word	0x200017cc
 80096ec:	0800c004 	.word	0x0800c004

080096f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	4603      	mov	r3, r0
 80096f8:	6039      	str	r1, [r7, #0]
 80096fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096fc:	79fb      	ldrb	r3, [r7, #7]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d105      	bne.n	800970e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009702:	683a      	ldr	r2, [r7, #0]
 8009704:	4907      	ldr	r1, [pc, #28]	; (8009724 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009706:	4808      	ldr	r0, [pc, #32]	; (8009728 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009708:	f7ff fd81 	bl	800920e <USBD_GetString>
 800970c:	e004      	b.n	8009718 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800970e:	683a      	ldr	r2, [r7, #0]
 8009710:	4904      	ldr	r1, [pc, #16]	; (8009724 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009712:	4805      	ldr	r0, [pc, #20]	; (8009728 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009714:	f7ff fd7b 	bl	800920e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009718:	4b02      	ldr	r3, [pc, #8]	; (8009724 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800971a:	4618      	mov	r0, r3
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	200017cc 	.word	0x200017cc
 8009728:	0800c010 	.word	0x0800c010

0800972c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009732:	4b0f      	ldr	r3, [pc, #60]	; (8009770 <Get_SerialNum+0x44>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009738:	4b0e      	ldr	r3, [pc, #56]	; (8009774 <Get_SerialNum+0x48>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800973e:	4b0e      	ldr	r3, [pc, #56]	; (8009778 <Get_SerialNum+0x4c>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4413      	add	r3, r2
 800974a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d009      	beq.n	8009766 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009752:	2208      	movs	r2, #8
 8009754:	4909      	ldr	r1, [pc, #36]	; (800977c <Get_SerialNum+0x50>)
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	f000 f814 	bl	8009784 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800975c:	2204      	movs	r2, #4
 800975e:	4908      	ldr	r1, [pc, #32]	; (8009780 <Get_SerialNum+0x54>)
 8009760:	68b8      	ldr	r0, [r7, #8]
 8009762:	f000 f80f 	bl	8009784 <IntToUnicode>
  }
}
 8009766:	bf00      	nop
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	1fff7a10 	.word	0x1fff7a10
 8009774:	1fff7a14 	.word	0x1fff7a14
 8009778:	1fff7a18 	.word	0x1fff7a18
 800977c:	2000016e 	.word	0x2000016e
 8009780:	2000017e 	.word	0x2000017e

08009784 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009784:	b480      	push	{r7}
 8009786:	b087      	sub	sp, #28
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	4613      	mov	r3, r2
 8009790:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009792:	2300      	movs	r3, #0
 8009794:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009796:	2300      	movs	r3, #0
 8009798:	75fb      	strb	r3, [r7, #23]
 800979a:	e027      	b.n	80097ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	0f1b      	lsrs	r3, r3, #28
 80097a0:	2b09      	cmp	r3, #9
 80097a2:	d80b      	bhi.n	80097bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	0f1b      	lsrs	r3, r3, #28
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	7dfb      	ldrb	r3, [r7, #23]
 80097ac:	005b      	lsls	r3, r3, #1
 80097ae:	4619      	mov	r1, r3
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	440b      	add	r3, r1
 80097b4:	3230      	adds	r2, #48	; 0x30
 80097b6:	b2d2      	uxtb	r2, r2
 80097b8:	701a      	strb	r2, [r3, #0]
 80097ba:	e00a      	b.n	80097d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	0f1b      	lsrs	r3, r3, #28
 80097c0:	b2da      	uxtb	r2, r3
 80097c2:	7dfb      	ldrb	r3, [r7, #23]
 80097c4:	005b      	lsls	r3, r3, #1
 80097c6:	4619      	mov	r1, r3
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	440b      	add	r3, r1
 80097cc:	3237      	adds	r2, #55	; 0x37
 80097ce:	b2d2      	uxtb	r2, r2
 80097d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	011b      	lsls	r3, r3, #4
 80097d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80097d8:	7dfb      	ldrb	r3, [r7, #23]
 80097da:	005b      	lsls	r3, r3, #1
 80097dc:	3301      	adds	r3, #1
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	4413      	add	r3, r2
 80097e2:	2200      	movs	r2, #0
 80097e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80097e6:	7dfb      	ldrb	r3, [r7, #23]
 80097e8:	3301      	adds	r3, #1
 80097ea:	75fb      	strb	r3, [r7, #23]
 80097ec:	7dfa      	ldrb	r2, [r7, #23]
 80097ee:	79fb      	ldrb	r3, [r7, #7]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d3d3      	bcc.n	800979c <IntToUnicode+0x18>
  }
}
 80097f4:	bf00      	nop
 80097f6:	371c      	adds	r7, #28
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b08a      	sub	sp, #40	; 0x28
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009808:	f107 0314 	add.w	r3, r7, #20
 800980c:	2200      	movs	r2, #0
 800980e:	601a      	str	r2, [r3, #0]
 8009810:	605a      	str	r2, [r3, #4]
 8009812:	609a      	str	r2, [r3, #8]
 8009814:	60da      	str	r2, [r3, #12]
 8009816:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009820:	d13a      	bne.n	8009898 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009822:	2300      	movs	r3, #0
 8009824:	613b      	str	r3, [r7, #16]
 8009826:	4b1e      	ldr	r3, [pc, #120]	; (80098a0 <HAL_PCD_MspInit+0xa0>)
 8009828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982a:	4a1d      	ldr	r2, [pc, #116]	; (80098a0 <HAL_PCD_MspInit+0xa0>)
 800982c:	f043 0301 	orr.w	r3, r3, #1
 8009830:	6313      	str	r3, [r2, #48]	; 0x30
 8009832:	4b1b      	ldr	r3, [pc, #108]	; (80098a0 <HAL_PCD_MspInit+0xa0>)
 8009834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009836:	f003 0301 	and.w	r3, r3, #1
 800983a:	613b      	str	r3, [r7, #16]
 800983c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800983e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009844:	2302      	movs	r3, #2
 8009846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009848:	2300      	movs	r3, #0
 800984a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800984c:	2303      	movs	r3, #3
 800984e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009850:	230a      	movs	r3, #10
 8009852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009854:	f107 0314 	add.w	r3, r7, #20
 8009858:	4619      	mov	r1, r3
 800985a:	4812      	ldr	r0, [pc, #72]	; (80098a4 <HAL_PCD_MspInit+0xa4>)
 800985c:	f7f9 f910 	bl	8002a80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009860:	4b0f      	ldr	r3, [pc, #60]	; (80098a0 <HAL_PCD_MspInit+0xa0>)
 8009862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009864:	4a0e      	ldr	r2, [pc, #56]	; (80098a0 <HAL_PCD_MspInit+0xa0>)
 8009866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800986a:	6353      	str	r3, [r2, #52]	; 0x34
 800986c:	2300      	movs	r3, #0
 800986e:	60fb      	str	r3, [r7, #12]
 8009870:	4b0b      	ldr	r3, [pc, #44]	; (80098a0 <HAL_PCD_MspInit+0xa0>)
 8009872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009874:	4a0a      	ldr	r2, [pc, #40]	; (80098a0 <HAL_PCD_MspInit+0xa0>)
 8009876:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800987a:	6453      	str	r3, [r2, #68]	; 0x44
 800987c:	4b08      	ldr	r3, [pc, #32]	; (80098a0 <HAL_PCD_MspInit+0xa0>)
 800987e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009884:	60fb      	str	r3, [r7, #12]
 8009886:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009888:	2200      	movs	r2, #0
 800988a:	2100      	movs	r1, #0
 800988c:	2043      	movs	r0, #67	; 0x43
 800988e:	f7f9 f8c0 	bl	8002a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009892:	2043      	movs	r0, #67	; 0x43
 8009894:	f7f9 f8d9 	bl	8002a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009898:	bf00      	nop
 800989a:	3728      	adds	r7, #40	; 0x28
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	40023800 	.word	0x40023800
 80098a4:	40020000 	.word	0x40020000

080098a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80098bc:	4619      	mov	r1, r3
 80098be:	4610      	mov	r0, r2
 80098c0:	f7fe fd22 	bl	8008308 <USBD_LL_SetupStage>
}
 80098c4:	bf00      	nop
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	460b      	mov	r3, r1
 80098d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80098de:	78fa      	ldrb	r2, [r7, #3]
 80098e0:	6879      	ldr	r1, [r7, #4]
 80098e2:	4613      	mov	r3, r2
 80098e4:	00db      	lsls	r3, r3, #3
 80098e6:	1a9b      	subs	r3, r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	440b      	add	r3, r1
 80098ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	78fb      	ldrb	r3, [r7, #3]
 80098f4:	4619      	mov	r1, r3
 80098f6:	f7fe fd5a 	bl	80083ae <USBD_LL_DataOutStage>
}
 80098fa:	bf00      	nop
 80098fc:	3708      	adds	r7, #8
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b082      	sub	sp, #8
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	460b      	mov	r3, r1
 800990c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009914:	78fa      	ldrb	r2, [r7, #3]
 8009916:	6879      	ldr	r1, [r7, #4]
 8009918:	4613      	mov	r3, r2
 800991a:	00db      	lsls	r3, r3, #3
 800991c:	1a9b      	subs	r3, r3, r2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	440b      	add	r3, r1
 8009922:	3348      	adds	r3, #72	; 0x48
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	78fb      	ldrb	r3, [r7, #3]
 8009928:	4619      	mov	r1, r3
 800992a:	f7fe fda3 	bl	8008474 <USBD_LL_DataInStage>
}
 800992e:	bf00      	nop
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b082      	sub	sp, #8
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009944:	4618      	mov	r0, r3
 8009946:	f7fe fea7 	bl	8008698 <USBD_LL_SOF>
}
 800994a:	bf00      	nop
 800994c:	3708      	adds	r7, #8
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009952:	b580      	push	{r7, lr}
 8009954:	b084      	sub	sp, #16
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800995a:	2301      	movs	r3, #1
 800995c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	2b02      	cmp	r3, #2
 8009964:	d001      	beq.n	800996a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009966:	f7f7 fe7d 	bl	8001664 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009970:	7bfa      	ldrb	r2, [r7, #15]
 8009972:	4611      	mov	r1, r2
 8009974:	4618      	mov	r0, r3
 8009976:	f7fe fe54 	bl	8008622 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009980:	4618      	mov	r0, r3
 8009982:	f7fe fe0d 	bl	80085a0 <USBD_LL_Reset>
}
 8009986:	bf00      	nop
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
	...

08009990 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800999e:	4618      	mov	r0, r3
 80099a0:	f7fe fe4f 	bl	8008642 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	6812      	ldr	r2, [r2, #0]
 80099b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80099b6:	f043 0301 	orr.w	r3, r3, #1
 80099ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6a1b      	ldr	r3, [r3, #32]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d005      	beq.n	80099d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099c4:	4b04      	ldr	r3, [pc, #16]	; (80099d8 <HAL_PCD_SuspendCallback+0x48>)
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	4a03      	ldr	r2, [pc, #12]	; (80099d8 <HAL_PCD_SuspendCallback+0x48>)
 80099ca:	f043 0306 	orr.w	r3, r3, #6
 80099ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80099d0:	bf00      	nop
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	e000ed00 	.word	0xe000ed00

080099dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fe fe3e 	bl	800866c <USBD_LL_Resume>
}
 80099f0:	bf00      	nop
 80099f2:	3708      	adds	r7, #8
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a0a:	78fa      	ldrb	r2, [r7, #3]
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fe fe69 	bl	80086e6 <USBD_LL_IsoOUTIncomplete>
}
 8009a14:	bf00      	nop
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	460b      	mov	r3, r1
 8009a26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a2e:	78fa      	ldrb	r2, [r7, #3]
 8009a30:	4611      	mov	r1, r2
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7fe fe4a 	bl	80086cc <USBD_LL_IsoINIncomplete>
}
 8009a38:	bf00      	nop
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7fe fe56 	bl	8008700 <USBD_LL_DevConnected>
}
 8009a54:	bf00      	nop
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fe fe53 	bl	8008716 <USBD_LL_DevDisconnected>
}
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d13c      	bne.n	8009b02 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009a88:	4a20      	ldr	r2, [pc, #128]	; (8009b0c <USBD_LL_Init+0x94>)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a1e      	ldr	r2, [pc, #120]	; (8009b0c <USBD_LL_Init+0x94>)
 8009a94:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009a98:	4b1c      	ldr	r3, [pc, #112]	; (8009b0c <USBD_LL_Init+0x94>)
 8009a9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009a9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009aa0:	4b1a      	ldr	r3, [pc, #104]	; (8009b0c <USBD_LL_Init+0x94>)
 8009aa2:	2204      	movs	r2, #4
 8009aa4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009aa6:	4b19      	ldr	r3, [pc, #100]	; (8009b0c <USBD_LL_Init+0x94>)
 8009aa8:	2202      	movs	r2, #2
 8009aaa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009aac:	4b17      	ldr	r3, [pc, #92]	; (8009b0c <USBD_LL_Init+0x94>)
 8009aae:	2200      	movs	r2, #0
 8009ab0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009ab2:	4b16      	ldr	r3, [pc, #88]	; (8009b0c <USBD_LL_Init+0x94>)
 8009ab4:	2202      	movs	r2, #2
 8009ab6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009ab8:	4b14      	ldr	r3, [pc, #80]	; (8009b0c <USBD_LL_Init+0x94>)
 8009aba:	2200      	movs	r2, #0
 8009abc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009abe:	4b13      	ldr	r3, [pc, #76]	; (8009b0c <USBD_LL_Init+0x94>)
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009ac4:	4b11      	ldr	r3, [pc, #68]	; (8009b0c <USBD_LL_Init+0x94>)
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009aca:	4b10      	ldr	r3, [pc, #64]	; (8009b0c <USBD_LL_Init+0x94>)
 8009acc:	2200      	movs	r2, #0
 8009ace:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009ad0:	4b0e      	ldr	r3, [pc, #56]	; (8009b0c <USBD_LL_Init+0x94>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009ad6:	480d      	ldr	r0, [pc, #52]	; (8009b0c <USBD_LL_Init+0x94>)
 8009ad8:	f7f9 fad8 	bl	800308c <HAL_PCD_Init>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d001      	beq.n	8009ae6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009ae2:	f7f7 fdbf 	bl	8001664 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009ae6:	2180      	movs	r1, #128	; 0x80
 8009ae8:	4808      	ldr	r0, [pc, #32]	; (8009b0c <USBD_LL_Init+0x94>)
 8009aea:	f7fa fc36 	bl	800435a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009aee:	2240      	movs	r2, #64	; 0x40
 8009af0:	2100      	movs	r1, #0
 8009af2:	4806      	ldr	r0, [pc, #24]	; (8009b0c <USBD_LL_Init+0x94>)
 8009af4:	f7fa fbea 	bl	80042cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009af8:	2280      	movs	r2, #128	; 0x80
 8009afa:	2101      	movs	r1, #1
 8009afc:	4803      	ldr	r0, [pc, #12]	; (8009b0c <USBD_LL_Init+0x94>)
 8009afe:	f7fa fbe5 	bl	80042cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3708      	adds	r7, #8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	200019cc 	.word	0x200019cc

08009b10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7f9 fbcd 	bl	80032c6 <HAL_PCD_Start>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b30:	7bfb      	ldrb	r3, [r7, #15]
 8009b32:	4618      	mov	r0, r3
 8009b34:	f000 f92a 	bl	8009d8c <USBD_Get_USB_Status>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b084      	sub	sp, #16
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
 8009b4e:	4608      	mov	r0, r1
 8009b50:	4611      	mov	r1, r2
 8009b52:	461a      	mov	r2, r3
 8009b54:	4603      	mov	r3, r0
 8009b56:	70fb      	strb	r3, [r7, #3]
 8009b58:	460b      	mov	r3, r1
 8009b5a:	70bb      	strb	r3, [r7, #2]
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b60:	2300      	movs	r3, #0
 8009b62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009b6e:	78bb      	ldrb	r3, [r7, #2]
 8009b70:	883a      	ldrh	r2, [r7, #0]
 8009b72:	78f9      	ldrb	r1, [r7, #3]
 8009b74:	f7f9 ffb1 	bl	8003ada <HAL_PCD_EP_Open>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b7c:	7bfb      	ldrb	r3, [r7, #15]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f000 f904 	bl	8009d8c <USBD_Get_USB_Status>
 8009b84:	4603      	mov	r3, r0
 8009b86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b084      	sub	sp, #16
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bac:	78fa      	ldrb	r2, [r7, #3]
 8009bae:	4611      	mov	r1, r2
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7f9 fffa 	bl	8003baa <HAL_PCD_EP_Close>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bba:	7bfb      	ldrb	r3, [r7, #15]
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f000 f8e5 	bl	8009d8c <USBD_Get_USB_Status>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3710      	adds	r7, #16
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	460b      	mov	r3, r1
 8009bda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009be0:	2300      	movs	r3, #0
 8009be2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bea:	78fa      	ldrb	r2, [r7, #3]
 8009bec:	4611      	mov	r1, r2
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fa f8d2 	bl	8003d98 <HAL_PCD_EP_SetStall>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bf8:	7bfb      	ldrb	r3, [r7, #15]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f000 f8c6 	bl	8009d8c <USBD_Get_USB_Status>
 8009c00:	4603      	mov	r3, r0
 8009c02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c04:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b084      	sub	sp, #16
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	460b      	mov	r3, r1
 8009c18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c28:	78fa      	ldrb	r2, [r7, #3]
 8009c2a:	4611      	mov	r1, r2
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7fa f917 	bl	8003e60 <HAL_PCD_EP_ClrStall>
 8009c32:	4603      	mov	r3, r0
 8009c34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c36:	7bfb      	ldrb	r3, [r7, #15]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f000 f8a7 	bl	8009d8c <USBD_Get_USB_Status>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c42:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3710      	adds	r7, #16
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	460b      	mov	r3, r1
 8009c56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	da0b      	bge.n	8009c80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c68:	78fb      	ldrb	r3, [r7, #3]
 8009c6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c6e:	68f9      	ldr	r1, [r7, #12]
 8009c70:	4613      	mov	r3, r2
 8009c72:	00db      	lsls	r3, r3, #3
 8009c74:	1a9b      	subs	r3, r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	440b      	add	r3, r1
 8009c7a:	333e      	adds	r3, #62	; 0x3e
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	e00b      	b.n	8009c98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009c80:	78fb      	ldrb	r3, [r7, #3]
 8009c82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c86:	68f9      	ldr	r1, [r7, #12]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	00db      	lsls	r3, r3, #3
 8009c8c:	1a9b      	subs	r3, r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	440b      	add	r3, r1
 8009c92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009c96:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	460b      	mov	r3, r1
 8009cae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009cbe:	78fa      	ldrb	r2, [r7, #3]
 8009cc0:	4611      	mov	r1, r2
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7f9 fee4 	bl	8003a90 <HAL_PCD_SetAddress>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ccc:	7bfb      	ldrb	r3, [r7, #15]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f000 f85c 	bl	8009d8c <USBD_Get_USB_Status>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b086      	sub	sp, #24
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	60f8      	str	r0, [r7, #12]
 8009cea:	607a      	str	r2, [r7, #4]
 8009cec:	603b      	str	r3, [r7, #0]
 8009cee:	460b      	mov	r3, r1
 8009cf0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d00:	7af9      	ldrb	r1, [r7, #11]
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	f7f9 fffd 	bl	8003d04 <HAL_PCD_EP_Transmit>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d0e:	7dfb      	ldrb	r3, [r7, #23]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f000 f83b 	bl	8009d8c <USBD_Get_USB_Status>
 8009d16:	4603      	mov	r3, r0
 8009d18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d1a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3718      	adds	r7, #24
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b086      	sub	sp, #24
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	607a      	str	r2, [r7, #4]
 8009d2e:	603b      	str	r3, [r7, #0]
 8009d30:	460b      	mov	r3, r1
 8009d32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d42:	7af9      	ldrb	r1, [r7, #11]
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	f7f9 ff79 	bl	8003c3e <HAL_PCD_EP_Receive>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d50:	7dfb      	ldrb	r3, [r7, #23]
 8009d52:	4618      	mov	r0, r3
 8009d54:	f000 f81a 	bl	8009d8c <USBD_Get_USB_Status>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3718      	adds	r7, #24
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b082      	sub	sp, #8
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	460b      	mov	r3, r1
 8009d70:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d78:	78fa      	ldrb	r2, [r7, #3]
 8009d7a:	4611      	mov	r1, r2
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7f9 ffa9 	bl	8003cd4 <HAL_PCD_EP_GetRxCount>
 8009d82:	4603      	mov	r3, r0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3708      	adds	r7, #8
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	4603      	mov	r3, r0
 8009d94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d9a:	79fb      	ldrb	r3, [r7, #7]
 8009d9c:	2b03      	cmp	r3, #3
 8009d9e:	d817      	bhi.n	8009dd0 <USBD_Get_USB_Status+0x44>
 8009da0:	a201      	add	r2, pc, #4	; (adr r2, 8009da8 <USBD_Get_USB_Status+0x1c>)
 8009da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da6:	bf00      	nop
 8009da8:	08009db9 	.word	0x08009db9
 8009dac:	08009dbf 	.word	0x08009dbf
 8009db0:	08009dc5 	.word	0x08009dc5
 8009db4:	08009dcb 	.word	0x08009dcb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009db8:	2300      	movs	r3, #0
 8009dba:	73fb      	strb	r3, [r7, #15]
    break;
 8009dbc:	e00b      	b.n	8009dd6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	73fb      	strb	r3, [r7, #15]
    break;
 8009dc2:	e008      	b.n	8009dd6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	73fb      	strb	r3, [r7, #15]
    break;
 8009dc8:	e005      	b.n	8009dd6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	73fb      	strb	r3, [r7, #15]
    break;
 8009dce:	e002      	b.n	8009dd6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009dd0:	2303      	movs	r3, #3
 8009dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8009dd4:	bf00      	nop
  }
  return usb_status;
 8009dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3714      	adds	r7, #20
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <__errno>:
 8009de4:	4b01      	ldr	r3, [pc, #4]	; (8009dec <__errno+0x8>)
 8009de6:	6818      	ldr	r0, [r3, #0]
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	20000188 	.word	0x20000188

08009df0 <__libc_init_array>:
 8009df0:	b570      	push	{r4, r5, r6, lr}
 8009df2:	4e0d      	ldr	r6, [pc, #52]	; (8009e28 <__libc_init_array+0x38>)
 8009df4:	4c0d      	ldr	r4, [pc, #52]	; (8009e2c <__libc_init_array+0x3c>)
 8009df6:	1ba4      	subs	r4, r4, r6
 8009df8:	10a4      	asrs	r4, r4, #2
 8009dfa:	2500      	movs	r5, #0
 8009dfc:	42a5      	cmp	r5, r4
 8009dfe:	d109      	bne.n	8009e14 <__libc_init_array+0x24>
 8009e00:	4e0b      	ldr	r6, [pc, #44]	; (8009e30 <__libc_init_array+0x40>)
 8009e02:	4c0c      	ldr	r4, [pc, #48]	; (8009e34 <__libc_init_array+0x44>)
 8009e04:	f002 f87a 	bl	800befc <_init>
 8009e08:	1ba4      	subs	r4, r4, r6
 8009e0a:	10a4      	asrs	r4, r4, #2
 8009e0c:	2500      	movs	r5, #0
 8009e0e:	42a5      	cmp	r5, r4
 8009e10:	d105      	bne.n	8009e1e <__libc_init_array+0x2e>
 8009e12:	bd70      	pop	{r4, r5, r6, pc}
 8009e14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e18:	4798      	blx	r3
 8009e1a:	3501      	adds	r5, #1
 8009e1c:	e7ee      	b.n	8009dfc <__libc_init_array+0xc>
 8009e1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e22:	4798      	blx	r3
 8009e24:	3501      	adds	r5, #1
 8009e26:	e7f2      	b.n	8009e0e <__libc_init_array+0x1e>
 8009e28:	0800c300 	.word	0x0800c300
 8009e2c:	0800c300 	.word	0x0800c300
 8009e30:	0800c300 	.word	0x0800c300
 8009e34:	0800c304 	.word	0x0800c304

08009e38 <malloc>:
 8009e38:	4b02      	ldr	r3, [pc, #8]	; (8009e44 <malloc+0xc>)
 8009e3a:	4601      	mov	r1, r0
 8009e3c:	6818      	ldr	r0, [r3, #0]
 8009e3e:	f000 b86d 	b.w	8009f1c <_malloc_r>
 8009e42:	bf00      	nop
 8009e44:	20000188 	.word	0x20000188

08009e48 <free>:
 8009e48:	4b02      	ldr	r3, [pc, #8]	; (8009e54 <free+0xc>)
 8009e4a:	4601      	mov	r1, r0
 8009e4c:	6818      	ldr	r0, [r3, #0]
 8009e4e:	f000 b817 	b.w	8009e80 <_free_r>
 8009e52:	bf00      	nop
 8009e54:	20000188 	.word	0x20000188

08009e58 <memcpy>:
 8009e58:	b510      	push	{r4, lr}
 8009e5a:	1e43      	subs	r3, r0, #1
 8009e5c:	440a      	add	r2, r1
 8009e5e:	4291      	cmp	r1, r2
 8009e60:	d100      	bne.n	8009e64 <memcpy+0xc>
 8009e62:	bd10      	pop	{r4, pc}
 8009e64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e6c:	e7f7      	b.n	8009e5e <memcpy+0x6>

08009e6e <memset>:
 8009e6e:	4402      	add	r2, r0
 8009e70:	4603      	mov	r3, r0
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d100      	bne.n	8009e78 <memset+0xa>
 8009e76:	4770      	bx	lr
 8009e78:	f803 1b01 	strb.w	r1, [r3], #1
 8009e7c:	e7f9      	b.n	8009e72 <memset+0x4>
	...

08009e80 <_free_r>:
 8009e80:	b538      	push	{r3, r4, r5, lr}
 8009e82:	4605      	mov	r5, r0
 8009e84:	2900      	cmp	r1, #0
 8009e86:	d045      	beq.n	8009f14 <_free_r+0x94>
 8009e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e8c:	1f0c      	subs	r4, r1, #4
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	bfb8      	it	lt
 8009e92:	18e4      	addlt	r4, r4, r3
 8009e94:	f001 fb8e 	bl	800b5b4 <__malloc_lock>
 8009e98:	4a1f      	ldr	r2, [pc, #124]	; (8009f18 <_free_r+0x98>)
 8009e9a:	6813      	ldr	r3, [r2, #0]
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	b933      	cbnz	r3, 8009eae <_free_r+0x2e>
 8009ea0:	6063      	str	r3, [r4, #4]
 8009ea2:	6014      	str	r4, [r2, #0]
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eaa:	f001 bb84 	b.w	800b5b6 <__malloc_unlock>
 8009eae:	42a3      	cmp	r3, r4
 8009eb0:	d90c      	bls.n	8009ecc <_free_r+0x4c>
 8009eb2:	6821      	ldr	r1, [r4, #0]
 8009eb4:	1862      	adds	r2, r4, r1
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	bf04      	itt	eq
 8009eba:	681a      	ldreq	r2, [r3, #0]
 8009ebc:	685b      	ldreq	r3, [r3, #4]
 8009ebe:	6063      	str	r3, [r4, #4]
 8009ec0:	bf04      	itt	eq
 8009ec2:	1852      	addeq	r2, r2, r1
 8009ec4:	6022      	streq	r2, [r4, #0]
 8009ec6:	6004      	str	r4, [r0, #0]
 8009ec8:	e7ec      	b.n	8009ea4 <_free_r+0x24>
 8009eca:	4613      	mov	r3, r2
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	b10a      	cbz	r2, 8009ed4 <_free_r+0x54>
 8009ed0:	42a2      	cmp	r2, r4
 8009ed2:	d9fa      	bls.n	8009eca <_free_r+0x4a>
 8009ed4:	6819      	ldr	r1, [r3, #0]
 8009ed6:	1858      	adds	r0, r3, r1
 8009ed8:	42a0      	cmp	r0, r4
 8009eda:	d10b      	bne.n	8009ef4 <_free_r+0x74>
 8009edc:	6820      	ldr	r0, [r4, #0]
 8009ede:	4401      	add	r1, r0
 8009ee0:	1858      	adds	r0, r3, r1
 8009ee2:	4282      	cmp	r2, r0
 8009ee4:	6019      	str	r1, [r3, #0]
 8009ee6:	d1dd      	bne.n	8009ea4 <_free_r+0x24>
 8009ee8:	6810      	ldr	r0, [r2, #0]
 8009eea:	6852      	ldr	r2, [r2, #4]
 8009eec:	605a      	str	r2, [r3, #4]
 8009eee:	4401      	add	r1, r0
 8009ef0:	6019      	str	r1, [r3, #0]
 8009ef2:	e7d7      	b.n	8009ea4 <_free_r+0x24>
 8009ef4:	d902      	bls.n	8009efc <_free_r+0x7c>
 8009ef6:	230c      	movs	r3, #12
 8009ef8:	602b      	str	r3, [r5, #0]
 8009efa:	e7d3      	b.n	8009ea4 <_free_r+0x24>
 8009efc:	6820      	ldr	r0, [r4, #0]
 8009efe:	1821      	adds	r1, r4, r0
 8009f00:	428a      	cmp	r2, r1
 8009f02:	bf04      	itt	eq
 8009f04:	6811      	ldreq	r1, [r2, #0]
 8009f06:	6852      	ldreq	r2, [r2, #4]
 8009f08:	6062      	str	r2, [r4, #4]
 8009f0a:	bf04      	itt	eq
 8009f0c:	1809      	addeq	r1, r1, r0
 8009f0e:	6021      	streq	r1, [r4, #0]
 8009f10:	605c      	str	r4, [r3, #4]
 8009f12:	e7c7      	b.n	8009ea4 <_free_r+0x24>
 8009f14:	bd38      	pop	{r3, r4, r5, pc}
 8009f16:	bf00      	nop
 8009f18:	2000037c 	.word	0x2000037c

08009f1c <_malloc_r>:
 8009f1c:	b570      	push	{r4, r5, r6, lr}
 8009f1e:	1ccd      	adds	r5, r1, #3
 8009f20:	f025 0503 	bic.w	r5, r5, #3
 8009f24:	3508      	adds	r5, #8
 8009f26:	2d0c      	cmp	r5, #12
 8009f28:	bf38      	it	cc
 8009f2a:	250c      	movcc	r5, #12
 8009f2c:	2d00      	cmp	r5, #0
 8009f2e:	4606      	mov	r6, r0
 8009f30:	db01      	blt.n	8009f36 <_malloc_r+0x1a>
 8009f32:	42a9      	cmp	r1, r5
 8009f34:	d903      	bls.n	8009f3e <_malloc_r+0x22>
 8009f36:	230c      	movs	r3, #12
 8009f38:	6033      	str	r3, [r6, #0]
 8009f3a:	2000      	movs	r0, #0
 8009f3c:	bd70      	pop	{r4, r5, r6, pc}
 8009f3e:	f001 fb39 	bl	800b5b4 <__malloc_lock>
 8009f42:	4a21      	ldr	r2, [pc, #132]	; (8009fc8 <_malloc_r+0xac>)
 8009f44:	6814      	ldr	r4, [r2, #0]
 8009f46:	4621      	mov	r1, r4
 8009f48:	b991      	cbnz	r1, 8009f70 <_malloc_r+0x54>
 8009f4a:	4c20      	ldr	r4, [pc, #128]	; (8009fcc <_malloc_r+0xb0>)
 8009f4c:	6823      	ldr	r3, [r4, #0]
 8009f4e:	b91b      	cbnz	r3, 8009f58 <_malloc_r+0x3c>
 8009f50:	4630      	mov	r0, r6
 8009f52:	f000 fc99 	bl	800a888 <_sbrk_r>
 8009f56:	6020      	str	r0, [r4, #0]
 8009f58:	4629      	mov	r1, r5
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	f000 fc94 	bl	800a888 <_sbrk_r>
 8009f60:	1c43      	adds	r3, r0, #1
 8009f62:	d124      	bne.n	8009fae <_malloc_r+0x92>
 8009f64:	230c      	movs	r3, #12
 8009f66:	6033      	str	r3, [r6, #0]
 8009f68:	4630      	mov	r0, r6
 8009f6a:	f001 fb24 	bl	800b5b6 <__malloc_unlock>
 8009f6e:	e7e4      	b.n	8009f3a <_malloc_r+0x1e>
 8009f70:	680b      	ldr	r3, [r1, #0]
 8009f72:	1b5b      	subs	r3, r3, r5
 8009f74:	d418      	bmi.n	8009fa8 <_malloc_r+0x8c>
 8009f76:	2b0b      	cmp	r3, #11
 8009f78:	d90f      	bls.n	8009f9a <_malloc_r+0x7e>
 8009f7a:	600b      	str	r3, [r1, #0]
 8009f7c:	50cd      	str	r5, [r1, r3]
 8009f7e:	18cc      	adds	r4, r1, r3
 8009f80:	4630      	mov	r0, r6
 8009f82:	f001 fb18 	bl	800b5b6 <__malloc_unlock>
 8009f86:	f104 000b 	add.w	r0, r4, #11
 8009f8a:	1d23      	adds	r3, r4, #4
 8009f8c:	f020 0007 	bic.w	r0, r0, #7
 8009f90:	1ac3      	subs	r3, r0, r3
 8009f92:	d0d3      	beq.n	8009f3c <_malloc_r+0x20>
 8009f94:	425a      	negs	r2, r3
 8009f96:	50e2      	str	r2, [r4, r3]
 8009f98:	e7d0      	b.n	8009f3c <_malloc_r+0x20>
 8009f9a:	428c      	cmp	r4, r1
 8009f9c:	684b      	ldr	r3, [r1, #4]
 8009f9e:	bf16      	itet	ne
 8009fa0:	6063      	strne	r3, [r4, #4]
 8009fa2:	6013      	streq	r3, [r2, #0]
 8009fa4:	460c      	movne	r4, r1
 8009fa6:	e7eb      	b.n	8009f80 <_malloc_r+0x64>
 8009fa8:	460c      	mov	r4, r1
 8009faa:	6849      	ldr	r1, [r1, #4]
 8009fac:	e7cc      	b.n	8009f48 <_malloc_r+0x2c>
 8009fae:	1cc4      	adds	r4, r0, #3
 8009fb0:	f024 0403 	bic.w	r4, r4, #3
 8009fb4:	42a0      	cmp	r0, r4
 8009fb6:	d005      	beq.n	8009fc4 <_malloc_r+0xa8>
 8009fb8:	1a21      	subs	r1, r4, r0
 8009fba:	4630      	mov	r0, r6
 8009fbc:	f000 fc64 	bl	800a888 <_sbrk_r>
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	d0cf      	beq.n	8009f64 <_malloc_r+0x48>
 8009fc4:	6025      	str	r5, [r4, #0]
 8009fc6:	e7db      	b.n	8009f80 <_malloc_r+0x64>
 8009fc8:	2000037c 	.word	0x2000037c
 8009fcc:	20000380 	.word	0x20000380

08009fd0 <__cvt>:
 8009fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd4:	ec55 4b10 	vmov	r4, r5, d0
 8009fd8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009fda:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009fde:	2d00      	cmp	r5, #0
 8009fe0:	460e      	mov	r6, r1
 8009fe2:	4691      	mov	r9, r2
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	bfb8      	it	lt
 8009fe8:	4622      	movlt	r2, r4
 8009fea:	462b      	mov	r3, r5
 8009fec:	f027 0720 	bic.w	r7, r7, #32
 8009ff0:	bfbb      	ittet	lt
 8009ff2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009ff6:	461d      	movlt	r5, r3
 8009ff8:	2300      	movge	r3, #0
 8009ffa:	232d      	movlt	r3, #45	; 0x2d
 8009ffc:	bfb8      	it	lt
 8009ffe:	4614      	movlt	r4, r2
 800a000:	2f46      	cmp	r7, #70	; 0x46
 800a002:	700b      	strb	r3, [r1, #0]
 800a004:	d004      	beq.n	800a010 <__cvt+0x40>
 800a006:	2f45      	cmp	r7, #69	; 0x45
 800a008:	d100      	bne.n	800a00c <__cvt+0x3c>
 800a00a:	3601      	adds	r6, #1
 800a00c:	2102      	movs	r1, #2
 800a00e:	e000      	b.n	800a012 <__cvt+0x42>
 800a010:	2103      	movs	r1, #3
 800a012:	ab03      	add	r3, sp, #12
 800a014:	9301      	str	r3, [sp, #4]
 800a016:	ab02      	add	r3, sp, #8
 800a018:	9300      	str	r3, [sp, #0]
 800a01a:	4632      	mov	r2, r6
 800a01c:	4653      	mov	r3, sl
 800a01e:	ec45 4b10 	vmov	d0, r4, r5
 800a022:	f000 fd01 	bl	800aa28 <_dtoa_r>
 800a026:	2f47      	cmp	r7, #71	; 0x47
 800a028:	4680      	mov	r8, r0
 800a02a:	d102      	bne.n	800a032 <__cvt+0x62>
 800a02c:	f019 0f01 	tst.w	r9, #1
 800a030:	d026      	beq.n	800a080 <__cvt+0xb0>
 800a032:	2f46      	cmp	r7, #70	; 0x46
 800a034:	eb08 0906 	add.w	r9, r8, r6
 800a038:	d111      	bne.n	800a05e <__cvt+0x8e>
 800a03a:	f898 3000 	ldrb.w	r3, [r8]
 800a03e:	2b30      	cmp	r3, #48	; 0x30
 800a040:	d10a      	bne.n	800a058 <__cvt+0x88>
 800a042:	2200      	movs	r2, #0
 800a044:	2300      	movs	r3, #0
 800a046:	4620      	mov	r0, r4
 800a048:	4629      	mov	r1, r5
 800a04a:	f7f6 fd45 	bl	8000ad8 <__aeabi_dcmpeq>
 800a04e:	b918      	cbnz	r0, 800a058 <__cvt+0x88>
 800a050:	f1c6 0601 	rsb	r6, r6, #1
 800a054:	f8ca 6000 	str.w	r6, [sl]
 800a058:	f8da 3000 	ldr.w	r3, [sl]
 800a05c:	4499      	add	r9, r3
 800a05e:	2200      	movs	r2, #0
 800a060:	2300      	movs	r3, #0
 800a062:	4620      	mov	r0, r4
 800a064:	4629      	mov	r1, r5
 800a066:	f7f6 fd37 	bl	8000ad8 <__aeabi_dcmpeq>
 800a06a:	b938      	cbnz	r0, 800a07c <__cvt+0xac>
 800a06c:	2230      	movs	r2, #48	; 0x30
 800a06e:	9b03      	ldr	r3, [sp, #12]
 800a070:	454b      	cmp	r3, r9
 800a072:	d205      	bcs.n	800a080 <__cvt+0xb0>
 800a074:	1c59      	adds	r1, r3, #1
 800a076:	9103      	str	r1, [sp, #12]
 800a078:	701a      	strb	r2, [r3, #0]
 800a07a:	e7f8      	b.n	800a06e <__cvt+0x9e>
 800a07c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a080:	9b03      	ldr	r3, [sp, #12]
 800a082:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a084:	eba3 0308 	sub.w	r3, r3, r8
 800a088:	4640      	mov	r0, r8
 800a08a:	6013      	str	r3, [r2, #0]
 800a08c:	b004      	add	sp, #16
 800a08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a092 <__exponent>:
 800a092:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a094:	2900      	cmp	r1, #0
 800a096:	4604      	mov	r4, r0
 800a098:	bfba      	itte	lt
 800a09a:	4249      	neglt	r1, r1
 800a09c:	232d      	movlt	r3, #45	; 0x2d
 800a09e:	232b      	movge	r3, #43	; 0x2b
 800a0a0:	2909      	cmp	r1, #9
 800a0a2:	f804 2b02 	strb.w	r2, [r4], #2
 800a0a6:	7043      	strb	r3, [r0, #1]
 800a0a8:	dd20      	ble.n	800a0ec <__exponent+0x5a>
 800a0aa:	f10d 0307 	add.w	r3, sp, #7
 800a0ae:	461f      	mov	r7, r3
 800a0b0:	260a      	movs	r6, #10
 800a0b2:	fb91 f5f6 	sdiv	r5, r1, r6
 800a0b6:	fb06 1115 	mls	r1, r6, r5, r1
 800a0ba:	3130      	adds	r1, #48	; 0x30
 800a0bc:	2d09      	cmp	r5, #9
 800a0be:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a0c2:	f103 32ff 	add.w	r2, r3, #4294967295
 800a0c6:	4629      	mov	r1, r5
 800a0c8:	dc09      	bgt.n	800a0de <__exponent+0x4c>
 800a0ca:	3130      	adds	r1, #48	; 0x30
 800a0cc:	3b02      	subs	r3, #2
 800a0ce:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a0d2:	42bb      	cmp	r3, r7
 800a0d4:	4622      	mov	r2, r4
 800a0d6:	d304      	bcc.n	800a0e2 <__exponent+0x50>
 800a0d8:	1a10      	subs	r0, r2, r0
 800a0da:	b003      	add	sp, #12
 800a0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0de:	4613      	mov	r3, r2
 800a0e0:	e7e7      	b.n	800a0b2 <__exponent+0x20>
 800a0e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0e6:	f804 2b01 	strb.w	r2, [r4], #1
 800a0ea:	e7f2      	b.n	800a0d2 <__exponent+0x40>
 800a0ec:	2330      	movs	r3, #48	; 0x30
 800a0ee:	4419      	add	r1, r3
 800a0f0:	7083      	strb	r3, [r0, #2]
 800a0f2:	1d02      	adds	r2, r0, #4
 800a0f4:	70c1      	strb	r1, [r0, #3]
 800a0f6:	e7ef      	b.n	800a0d8 <__exponent+0x46>

0800a0f8 <_printf_float>:
 800a0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fc:	b08d      	sub	sp, #52	; 0x34
 800a0fe:	460c      	mov	r4, r1
 800a100:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a104:	4616      	mov	r6, r2
 800a106:	461f      	mov	r7, r3
 800a108:	4605      	mov	r5, r0
 800a10a:	f001 fa45 	bl	800b598 <_localeconv_r>
 800a10e:	6803      	ldr	r3, [r0, #0]
 800a110:	9304      	str	r3, [sp, #16]
 800a112:	4618      	mov	r0, r3
 800a114:	f7f6 f864 	bl	80001e0 <strlen>
 800a118:	2300      	movs	r3, #0
 800a11a:	930a      	str	r3, [sp, #40]	; 0x28
 800a11c:	f8d8 3000 	ldr.w	r3, [r8]
 800a120:	9005      	str	r0, [sp, #20]
 800a122:	3307      	adds	r3, #7
 800a124:	f023 0307 	bic.w	r3, r3, #7
 800a128:	f103 0208 	add.w	r2, r3, #8
 800a12c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a130:	f8d4 b000 	ldr.w	fp, [r4]
 800a134:	f8c8 2000 	str.w	r2, [r8]
 800a138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a140:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a144:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a148:	9307      	str	r3, [sp, #28]
 800a14a:	f8cd 8018 	str.w	r8, [sp, #24]
 800a14e:	f04f 32ff 	mov.w	r2, #4294967295
 800a152:	4ba7      	ldr	r3, [pc, #668]	; (800a3f0 <_printf_float+0x2f8>)
 800a154:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a158:	f7f6 fcf0 	bl	8000b3c <__aeabi_dcmpun>
 800a15c:	bb70      	cbnz	r0, 800a1bc <_printf_float+0xc4>
 800a15e:	f04f 32ff 	mov.w	r2, #4294967295
 800a162:	4ba3      	ldr	r3, [pc, #652]	; (800a3f0 <_printf_float+0x2f8>)
 800a164:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a168:	f7f6 fcca 	bl	8000b00 <__aeabi_dcmple>
 800a16c:	bb30      	cbnz	r0, 800a1bc <_printf_float+0xc4>
 800a16e:	2200      	movs	r2, #0
 800a170:	2300      	movs	r3, #0
 800a172:	4640      	mov	r0, r8
 800a174:	4649      	mov	r1, r9
 800a176:	f7f6 fcb9 	bl	8000aec <__aeabi_dcmplt>
 800a17a:	b110      	cbz	r0, 800a182 <_printf_float+0x8a>
 800a17c:	232d      	movs	r3, #45	; 0x2d
 800a17e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a182:	4a9c      	ldr	r2, [pc, #624]	; (800a3f4 <_printf_float+0x2fc>)
 800a184:	4b9c      	ldr	r3, [pc, #624]	; (800a3f8 <_printf_float+0x300>)
 800a186:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a18a:	bf8c      	ite	hi
 800a18c:	4690      	movhi	r8, r2
 800a18e:	4698      	movls	r8, r3
 800a190:	2303      	movs	r3, #3
 800a192:	f02b 0204 	bic.w	r2, fp, #4
 800a196:	6123      	str	r3, [r4, #16]
 800a198:	6022      	str	r2, [r4, #0]
 800a19a:	f04f 0900 	mov.w	r9, #0
 800a19e:	9700      	str	r7, [sp, #0]
 800a1a0:	4633      	mov	r3, r6
 800a1a2:	aa0b      	add	r2, sp, #44	; 0x2c
 800a1a4:	4621      	mov	r1, r4
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	f000 f9e6 	bl	800a578 <_printf_common>
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	f040 808d 	bne.w	800a2cc <_printf_float+0x1d4>
 800a1b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b6:	b00d      	add	sp, #52	; 0x34
 800a1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1bc:	4642      	mov	r2, r8
 800a1be:	464b      	mov	r3, r9
 800a1c0:	4640      	mov	r0, r8
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	f7f6 fcba 	bl	8000b3c <__aeabi_dcmpun>
 800a1c8:	b110      	cbz	r0, 800a1d0 <_printf_float+0xd8>
 800a1ca:	4a8c      	ldr	r2, [pc, #560]	; (800a3fc <_printf_float+0x304>)
 800a1cc:	4b8c      	ldr	r3, [pc, #560]	; (800a400 <_printf_float+0x308>)
 800a1ce:	e7da      	b.n	800a186 <_printf_float+0x8e>
 800a1d0:	6861      	ldr	r1, [r4, #4]
 800a1d2:	1c4b      	adds	r3, r1, #1
 800a1d4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a1d8:	a80a      	add	r0, sp, #40	; 0x28
 800a1da:	d13e      	bne.n	800a25a <_printf_float+0x162>
 800a1dc:	2306      	movs	r3, #6
 800a1de:	6063      	str	r3, [r4, #4]
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a1e6:	ab09      	add	r3, sp, #36	; 0x24
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	ec49 8b10 	vmov	d0, r8, r9
 800a1ee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a1f2:	6022      	str	r2, [r4, #0]
 800a1f4:	f8cd a004 	str.w	sl, [sp, #4]
 800a1f8:	6861      	ldr	r1, [r4, #4]
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	f7ff fee8 	bl	8009fd0 <__cvt>
 800a200:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a204:	2b47      	cmp	r3, #71	; 0x47
 800a206:	4680      	mov	r8, r0
 800a208:	d109      	bne.n	800a21e <_printf_float+0x126>
 800a20a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a20c:	1cd8      	adds	r0, r3, #3
 800a20e:	db02      	blt.n	800a216 <_printf_float+0x11e>
 800a210:	6862      	ldr	r2, [r4, #4]
 800a212:	4293      	cmp	r3, r2
 800a214:	dd47      	ble.n	800a2a6 <_printf_float+0x1ae>
 800a216:	f1aa 0a02 	sub.w	sl, sl, #2
 800a21a:	fa5f fa8a 	uxtb.w	sl, sl
 800a21e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a222:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a224:	d824      	bhi.n	800a270 <_printf_float+0x178>
 800a226:	3901      	subs	r1, #1
 800a228:	4652      	mov	r2, sl
 800a22a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a22e:	9109      	str	r1, [sp, #36]	; 0x24
 800a230:	f7ff ff2f 	bl	800a092 <__exponent>
 800a234:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a236:	1813      	adds	r3, r2, r0
 800a238:	2a01      	cmp	r2, #1
 800a23a:	4681      	mov	r9, r0
 800a23c:	6123      	str	r3, [r4, #16]
 800a23e:	dc02      	bgt.n	800a246 <_printf_float+0x14e>
 800a240:	6822      	ldr	r2, [r4, #0]
 800a242:	07d1      	lsls	r1, r2, #31
 800a244:	d501      	bpl.n	800a24a <_printf_float+0x152>
 800a246:	3301      	adds	r3, #1
 800a248:	6123      	str	r3, [r4, #16]
 800a24a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d0a5      	beq.n	800a19e <_printf_float+0xa6>
 800a252:	232d      	movs	r3, #45	; 0x2d
 800a254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a258:	e7a1      	b.n	800a19e <_printf_float+0xa6>
 800a25a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a25e:	f000 8177 	beq.w	800a550 <_printf_float+0x458>
 800a262:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a266:	d1bb      	bne.n	800a1e0 <_printf_float+0xe8>
 800a268:	2900      	cmp	r1, #0
 800a26a:	d1b9      	bne.n	800a1e0 <_printf_float+0xe8>
 800a26c:	2301      	movs	r3, #1
 800a26e:	e7b6      	b.n	800a1de <_printf_float+0xe6>
 800a270:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a274:	d119      	bne.n	800a2aa <_printf_float+0x1b2>
 800a276:	2900      	cmp	r1, #0
 800a278:	6863      	ldr	r3, [r4, #4]
 800a27a:	dd0c      	ble.n	800a296 <_printf_float+0x19e>
 800a27c:	6121      	str	r1, [r4, #16]
 800a27e:	b913      	cbnz	r3, 800a286 <_printf_float+0x18e>
 800a280:	6822      	ldr	r2, [r4, #0]
 800a282:	07d2      	lsls	r2, r2, #31
 800a284:	d502      	bpl.n	800a28c <_printf_float+0x194>
 800a286:	3301      	adds	r3, #1
 800a288:	440b      	add	r3, r1
 800a28a:	6123      	str	r3, [r4, #16]
 800a28c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a28e:	65a3      	str	r3, [r4, #88]	; 0x58
 800a290:	f04f 0900 	mov.w	r9, #0
 800a294:	e7d9      	b.n	800a24a <_printf_float+0x152>
 800a296:	b913      	cbnz	r3, 800a29e <_printf_float+0x1a6>
 800a298:	6822      	ldr	r2, [r4, #0]
 800a29a:	07d0      	lsls	r0, r2, #31
 800a29c:	d501      	bpl.n	800a2a2 <_printf_float+0x1aa>
 800a29e:	3302      	adds	r3, #2
 800a2a0:	e7f3      	b.n	800a28a <_printf_float+0x192>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e7f1      	b.n	800a28a <_printf_float+0x192>
 800a2a6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a2aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	db05      	blt.n	800a2be <_printf_float+0x1c6>
 800a2b2:	6822      	ldr	r2, [r4, #0]
 800a2b4:	6123      	str	r3, [r4, #16]
 800a2b6:	07d1      	lsls	r1, r2, #31
 800a2b8:	d5e8      	bpl.n	800a28c <_printf_float+0x194>
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	e7e5      	b.n	800a28a <_printf_float+0x192>
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	bfd4      	ite	le
 800a2c2:	f1c3 0302 	rsble	r3, r3, #2
 800a2c6:	2301      	movgt	r3, #1
 800a2c8:	4413      	add	r3, r2
 800a2ca:	e7de      	b.n	800a28a <_printf_float+0x192>
 800a2cc:	6823      	ldr	r3, [r4, #0]
 800a2ce:	055a      	lsls	r2, r3, #21
 800a2d0:	d407      	bmi.n	800a2e2 <_printf_float+0x1ea>
 800a2d2:	6923      	ldr	r3, [r4, #16]
 800a2d4:	4642      	mov	r2, r8
 800a2d6:	4631      	mov	r1, r6
 800a2d8:	4628      	mov	r0, r5
 800a2da:	47b8      	blx	r7
 800a2dc:	3001      	adds	r0, #1
 800a2de:	d12b      	bne.n	800a338 <_printf_float+0x240>
 800a2e0:	e767      	b.n	800a1b2 <_printf_float+0xba>
 800a2e2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a2e6:	f240 80dc 	bls.w	800a4a2 <_printf_float+0x3aa>
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a2f2:	f7f6 fbf1 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	d033      	beq.n	800a362 <_printf_float+0x26a>
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	4a41      	ldr	r2, [pc, #260]	; (800a404 <_printf_float+0x30c>)
 800a2fe:	4631      	mov	r1, r6
 800a300:	4628      	mov	r0, r5
 800a302:	47b8      	blx	r7
 800a304:	3001      	adds	r0, #1
 800a306:	f43f af54 	beq.w	800a1b2 <_printf_float+0xba>
 800a30a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a30e:	429a      	cmp	r2, r3
 800a310:	db02      	blt.n	800a318 <_printf_float+0x220>
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	07d8      	lsls	r0, r3, #31
 800a316:	d50f      	bpl.n	800a338 <_printf_float+0x240>
 800a318:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a31c:	4631      	mov	r1, r6
 800a31e:	4628      	mov	r0, r5
 800a320:	47b8      	blx	r7
 800a322:	3001      	adds	r0, #1
 800a324:	f43f af45 	beq.w	800a1b2 <_printf_float+0xba>
 800a328:	f04f 0800 	mov.w	r8, #0
 800a32c:	f104 091a 	add.w	r9, r4, #26
 800a330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a332:	3b01      	subs	r3, #1
 800a334:	4543      	cmp	r3, r8
 800a336:	dc09      	bgt.n	800a34c <_printf_float+0x254>
 800a338:	6823      	ldr	r3, [r4, #0]
 800a33a:	079b      	lsls	r3, r3, #30
 800a33c:	f100 8103 	bmi.w	800a546 <_printf_float+0x44e>
 800a340:	68e0      	ldr	r0, [r4, #12]
 800a342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a344:	4298      	cmp	r0, r3
 800a346:	bfb8      	it	lt
 800a348:	4618      	movlt	r0, r3
 800a34a:	e734      	b.n	800a1b6 <_printf_float+0xbe>
 800a34c:	2301      	movs	r3, #1
 800a34e:	464a      	mov	r2, r9
 800a350:	4631      	mov	r1, r6
 800a352:	4628      	mov	r0, r5
 800a354:	47b8      	blx	r7
 800a356:	3001      	adds	r0, #1
 800a358:	f43f af2b 	beq.w	800a1b2 <_printf_float+0xba>
 800a35c:	f108 0801 	add.w	r8, r8, #1
 800a360:	e7e6      	b.n	800a330 <_printf_float+0x238>
 800a362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a364:	2b00      	cmp	r3, #0
 800a366:	dc2b      	bgt.n	800a3c0 <_printf_float+0x2c8>
 800a368:	2301      	movs	r3, #1
 800a36a:	4a26      	ldr	r2, [pc, #152]	; (800a404 <_printf_float+0x30c>)
 800a36c:	4631      	mov	r1, r6
 800a36e:	4628      	mov	r0, r5
 800a370:	47b8      	blx	r7
 800a372:	3001      	adds	r0, #1
 800a374:	f43f af1d 	beq.w	800a1b2 <_printf_float+0xba>
 800a378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a37a:	b923      	cbnz	r3, 800a386 <_printf_float+0x28e>
 800a37c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a37e:	b913      	cbnz	r3, 800a386 <_printf_float+0x28e>
 800a380:	6823      	ldr	r3, [r4, #0]
 800a382:	07d9      	lsls	r1, r3, #31
 800a384:	d5d8      	bpl.n	800a338 <_printf_float+0x240>
 800a386:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a38a:	4631      	mov	r1, r6
 800a38c:	4628      	mov	r0, r5
 800a38e:	47b8      	blx	r7
 800a390:	3001      	adds	r0, #1
 800a392:	f43f af0e 	beq.w	800a1b2 <_printf_float+0xba>
 800a396:	f04f 0900 	mov.w	r9, #0
 800a39a:	f104 0a1a 	add.w	sl, r4, #26
 800a39e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3a0:	425b      	negs	r3, r3
 800a3a2:	454b      	cmp	r3, r9
 800a3a4:	dc01      	bgt.n	800a3aa <_printf_float+0x2b2>
 800a3a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3a8:	e794      	b.n	800a2d4 <_printf_float+0x1dc>
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	4652      	mov	r2, sl
 800a3ae:	4631      	mov	r1, r6
 800a3b0:	4628      	mov	r0, r5
 800a3b2:	47b8      	blx	r7
 800a3b4:	3001      	adds	r0, #1
 800a3b6:	f43f aefc 	beq.w	800a1b2 <_printf_float+0xba>
 800a3ba:	f109 0901 	add.w	r9, r9, #1
 800a3be:	e7ee      	b.n	800a39e <_printf_float+0x2a6>
 800a3c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	bfa8      	it	ge
 800a3c8:	461a      	movge	r2, r3
 800a3ca:	2a00      	cmp	r2, #0
 800a3cc:	4691      	mov	r9, r2
 800a3ce:	dd07      	ble.n	800a3e0 <_printf_float+0x2e8>
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	4631      	mov	r1, r6
 800a3d4:	4642      	mov	r2, r8
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	47b8      	blx	r7
 800a3da:	3001      	adds	r0, #1
 800a3dc:	f43f aee9 	beq.w	800a1b2 <_printf_float+0xba>
 800a3e0:	f104 031a 	add.w	r3, r4, #26
 800a3e4:	f04f 0b00 	mov.w	fp, #0
 800a3e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3ec:	9306      	str	r3, [sp, #24]
 800a3ee:	e015      	b.n	800a41c <_printf_float+0x324>
 800a3f0:	7fefffff 	.word	0x7fefffff
 800a3f4:	0800c03c 	.word	0x0800c03c
 800a3f8:	0800c038 	.word	0x0800c038
 800a3fc:	0800c044 	.word	0x0800c044
 800a400:	0800c040 	.word	0x0800c040
 800a404:	0800c048 	.word	0x0800c048
 800a408:	2301      	movs	r3, #1
 800a40a:	9a06      	ldr	r2, [sp, #24]
 800a40c:	4631      	mov	r1, r6
 800a40e:	4628      	mov	r0, r5
 800a410:	47b8      	blx	r7
 800a412:	3001      	adds	r0, #1
 800a414:	f43f aecd 	beq.w	800a1b2 <_printf_float+0xba>
 800a418:	f10b 0b01 	add.w	fp, fp, #1
 800a41c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a420:	ebaa 0309 	sub.w	r3, sl, r9
 800a424:	455b      	cmp	r3, fp
 800a426:	dcef      	bgt.n	800a408 <_printf_float+0x310>
 800a428:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a42c:	429a      	cmp	r2, r3
 800a42e:	44d0      	add	r8, sl
 800a430:	db15      	blt.n	800a45e <_printf_float+0x366>
 800a432:	6823      	ldr	r3, [r4, #0]
 800a434:	07da      	lsls	r2, r3, #31
 800a436:	d412      	bmi.n	800a45e <_printf_float+0x366>
 800a438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a43a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a43c:	eba3 020a 	sub.w	r2, r3, sl
 800a440:	eba3 0a01 	sub.w	sl, r3, r1
 800a444:	4592      	cmp	sl, r2
 800a446:	bfa8      	it	ge
 800a448:	4692      	movge	sl, r2
 800a44a:	f1ba 0f00 	cmp.w	sl, #0
 800a44e:	dc0e      	bgt.n	800a46e <_printf_float+0x376>
 800a450:	f04f 0800 	mov.w	r8, #0
 800a454:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a458:	f104 091a 	add.w	r9, r4, #26
 800a45c:	e019      	b.n	800a492 <_printf_float+0x39a>
 800a45e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a462:	4631      	mov	r1, r6
 800a464:	4628      	mov	r0, r5
 800a466:	47b8      	blx	r7
 800a468:	3001      	adds	r0, #1
 800a46a:	d1e5      	bne.n	800a438 <_printf_float+0x340>
 800a46c:	e6a1      	b.n	800a1b2 <_printf_float+0xba>
 800a46e:	4653      	mov	r3, sl
 800a470:	4642      	mov	r2, r8
 800a472:	4631      	mov	r1, r6
 800a474:	4628      	mov	r0, r5
 800a476:	47b8      	blx	r7
 800a478:	3001      	adds	r0, #1
 800a47a:	d1e9      	bne.n	800a450 <_printf_float+0x358>
 800a47c:	e699      	b.n	800a1b2 <_printf_float+0xba>
 800a47e:	2301      	movs	r3, #1
 800a480:	464a      	mov	r2, r9
 800a482:	4631      	mov	r1, r6
 800a484:	4628      	mov	r0, r5
 800a486:	47b8      	blx	r7
 800a488:	3001      	adds	r0, #1
 800a48a:	f43f ae92 	beq.w	800a1b2 <_printf_float+0xba>
 800a48e:	f108 0801 	add.w	r8, r8, #1
 800a492:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a496:	1a9b      	subs	r3, r3, r2
 800a498:	eba3 030a 	sub.w	r3, r3, sl
 800a49c:	4543      	cmp	r3, r8
 800a49e:	dcee      	bgt.n	800a47e <_printf_float+0x386>
 800a4a0:	e74a      	b.n	800a338 <_printf_float+0x240>
 800a4a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4a4:	2a01      	cmp	r2, #1
 800a4a6:	dc01      	bgt.n	800a4ac <_printf_float+0x3b4>
 800a4a8:	07db      	lsls	r3, r3, #31
 800a4aa:	d53a      	bpl.n	800a522 <_printf_float+0x42a>
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	4642      	mov	r2, r8
 800a4b0:	4631      	mov	r1, r6
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	47b8      	blx	r7
 800a4b6:	3001      	adds	r0, #1
 800a4b8:	f43f ae7b 	beq.w	800a1b2 <_printf_float+0xba>
 800a4bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4c0:	4631      	mov	r1, r6
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	47b8      	blx	r7
 800a4c6:	3001      	adds	r0, #1
 800a4c8:	f108 0801 	add.w	r8, r8, #1
 800a4cc:	f43f ae71 	beq.w	800a1b2 <_printf_float+0xba>
 800a4d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f103 3aff 	add.w	sl, r3, #4294967295
 800a4d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a4dc:	2300      	movs	r3, #0
 800a4de:	f7f6 fafb 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4e2:	b9c8      	cbnz	r0, 800a518 <_printf_float+0x420>
 800a4e4:	4653      	mov	r3, sl
 800a4e6:	4642      	mov	r2, r8
 800a4e8:	4631      	mov	r1, r6
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	47b8      	blx	r7
 800a4ee:	3001      	adds	r0, #1
 800a4f0:	d10e      	bne.n	800a510 <_printf_float+0x418>
 800a4f2:	e65e      	b.n	800a1b2 <_printf_float+0xba>
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	4652      	mov	r2, sl
 800a4f8:	4631      	mov	r1, r6
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	47b8      	blx	r7
 800a4fe:	3001      	adds	r0, #1
 800a500:	f43f ae57 	beq.w	800a1b2 <_printf_float+0xba>
 800a504:	f108 0801 	add.w	r8, r8, #1
 800a508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a50a:	3b01      	subs	r3, #1
 800a50c:	4543      	cmp	r3, r8
 800a50e:	dcf1      	bgt.n	800a4f4 <_printf_float+0x3fc>
 800a510:	464b      	mov	r3, r9
 800a512:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a516:	e6de      	b.n	800a2d6 <_printf_float+0x1de>
 800a518:	f04f 0800 	mov.w	r8, #0
 800a51c:	f104 0a1a 	add.w	sl, r4, #26
 800a520:	e7f2      	b.n	800a508 <_printf_float+0x410>
 800a522:	2301      	movs	r3, #1
 800a524:	e7df      	b.n	800a4e6 <_printf_float+0x3ee>
 800a526:	2301      	movs	r3, #1
 800a528:	464a      	mov	r2, r9
 800a52a:	4631      	mov	r1, r6
 800a52c:	4628      	mov	r0, r5
 800a52e:	47b8      	blx	r7
 800a530:	3001      	adds	r0, #1
 800a532:	f43f ae3e 	beq.w	800a1b2 <_printf_float+0xba>
 800a536:	f108 0801 	add.w	r8, r8, #1
 800a53a:	68e3      	ldr	r3, [r4, #12]
 800a53c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a53e:	1a9b      	subs	r3, r3, r2
 800a540:	4543      	cmp	r3, r8
 800a542:	dcf0      	bgt.n	800a526 <_printf_float+0x42e>
 800a544:	e6fc      	b.n	800a340 <_printf_float+0x248>
 800a546:	f04f 0800 	mov.w	r8, #0
 800a54a:	f104 0919 	add.w	r9, r4, #25
 800a54e:	e7f4      	b.n	800a53a <_printf_float+0x442>
 800a550:	2900      	cmp	r1, #0
 800a552:	f43f ae8b 	beq.w	800a26c <_printf_float+0x174>
 800a556:	2300      	movs	r3, #0
 800a558:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a55c:	ab09      	add	r3, sp, #36	; 0x24
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	ec49 8b10 	vmov	d0, r8, r9
 800a564:	6022      	str	r2, [r4, #0]
 800a566:	f8cd a004 	str.w	sl, [sp, #4]
 800a56a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a56e:	4628      	mov	r0, r5
 800a570:	f7ff fd2e 	bl	8009fd0 <__cvt>
 800a574:	4680      	mov	r8, r0
 800a576:	e648      	b.n	800a20a <_printf_float+0x112>

0800a578 <_printf_common>:
 800a578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a57c:	4691      	mov	r9, r2
 800a57e:	461f      	mov	r7, r3
 800a580:	688a      	ldr	r2, [r1, #8]
 800a582:	690b      	ldr	r3, [r1, #16]
 800a584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a588:	4293      	cmp	r3, r2
 800a58a:	bfb8      	it	lt
 800a58c:	4613      	movlt	r3, r2
 800a58e:	f8c9 3000 	str.w	r3, [r9]
 800a592:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a596:	4606      	mov	r6, r0
 800a598:	460c      	mov	r4, r1
 800a59a:	b112      	cbz	r2, 800a5a2 <_printf_common+0x2a>
 800a59c:	3301      	adds	r3, #1
 800a59e:	f8c9 3000 	str.w	r3, [r9]
 800a5a2:	6823      	ldr	r3, [r4, #0]
 800a5a4:	0699      	lsls	r1, r3, #26
 800a5a6:	bf42      	ittt	mi
 800a5a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a5ac:	3302      	addmi	r3, #2
 800a5ae:	f8c9 3000 	strmi.w	r3, [r9]
 800a5b2:	6825      	ldr	r5, [r4, #0]
 800a5b4:	f015 0506 	ands.w	r5, r5, #6
 800a5b8:	d107      	bne.n	800a5ca <_printf_common+0x52>
 800a5ba:	f104 0a19 	add.w	sl, r4, #25
 800a5be:	68e3      	ldr	r3, [r4, #12]
 800a5c0:	f8d9 2000 	ldr.w	r2, [r9]
 800a5c4:	1a9b      	subs	r3, r3, r2
 800a5c6:	42ab      	cmp	r3, r5
 800a5c8:	dc28      	bgt.n	800a61c <_printf_common+0xa4>
 800a5ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a5ce:	6822      	ldr	r2, [r4, #0]
 800a5d0:	3300      	adds	r3, #0
 800a5d2:	bf18      	it	ne
 800a5d4:	2301      	movne	r3, #1
 800a5d6:	0692      	lsls	r2, r2, #26
 800a5d8:	d42d      	bmi.n	800a636 <_printf_common+0xbe>
 800a5da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5de:	4639      	mov	r1, r7
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	47c0      	blx	r8
 800a5e4:	3001      	adds	r0, #1
 800a5e6:	d020      	beq.n	800a62a <_printf_common+0xb2>
 800a5e8:	6823      	ldr	r3, [r4, #0]
 800a5ea:	68e5      	ldr	r5, [r4, #12]
 800a5ec:	f8d9 2000 	ldr.w	r2, [r9]
 800a5f0:	f003 0306 	and.w	r3, r3, #6
 800a5f4:	2b04      	cmp	r3, #4
 800a5f6:	bf08      	it	eq
 800a5f8:	1aad      	subeq	r5, r5, r2
 800a5fa:	68a3      	ldr	r3, [r4, #8]
 800a5fc:	6922      	ldr	r2, [r4, #16]
 800a5fe:	bf0c      	ite	eq
 800a600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a604:	2500      	movne	r5, #0
 800a606:	4293      	cmp	r3, r2
 800a608:	bfc4      	itt	gt
 800a60a:	1a9b      	subgt	r3, r3, r2
 800a60c:	18ed      	addgt	r5, r5, r3
 800a60e:	f04f 0900 	mov.w	r9, #0
 800a612:	341a      	adds	r4, #26
 800a614:	454d      	cmp	r5, r9
 800a616:	d11a      	bne.n	800a64e <_printf_common+0xd6>
 800a618:	2000      	movs	r0, #0
 800a61a:	e008      	b.n	800a62e <_printf_common+0xb6>
 800a61c:	2301      	movs	r3, #1
 800a61e:	4652      	mov	r2, sl
 800a620:	4639      	mov	r1, r7
 800a622:	4630      	mov	r0, r6
 800a624:	47c0      	blx	r8
 800a626:	3001      	adds	r0, #1
 800a628:	d103      	bne.n	800a632 <_printf_common+0xba>
 800a62a:	f04f 30ff 	mov.w	r0, #4294967295
 800a62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a632:	3501      	adds	r5, #1
 800a634:	e7c3      	b.n	800a5be <_printf_common+0x46>
 800a636:	18e1      	adds	r1, r4, r3
 800a638:	1c5a      	adds	r2, r3, #1
 800a63a:	2030      	movs	r0, #48	; 0x30
 800a63c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a640:	4422      	add	r2, r4
 800a642:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a646:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a64a:	3302      	adds	r3, #2
 800a64c:	e7c5      	b.n	800a5da <_printf_common+0x62>
 800a64e:	2301      	movs	r3, #1
 800a650:	4622      	mov	r2, r4
 800a652:	4639      	mov	r1, r7
 800a654:	4630      	mov	r0, r6
 800a656:	47c0      	blx	r8
 800a658:	3001      	adds	r0, #1
 800a65a:	d0e6      	beq.n	800a62a <_printf_common+0xb2>
 800a65c:	f109 0901 	add.w	r9, r9, #1
 800a660:	e7d8      	b.n	800a614 <_printf_common+0x9c>
	...

0800a664 <_printf_i>:
 800a664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a668:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a66c:	460c      	mov	r4, r1
 800a66e:	7e09      	ldrb	r1, [r1, #24]
 800a670:	b085      	sub	sp, #20
 800a672:	296e      	cmp	r1, #110	; 0x6e
 800a674:	4617      	mov	r7, r2
 800a676:	4606      	mov	r6, r0
 800a678:	4698      	mov	r8, r3
 800a67a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a67c:	f000 80b3 	beq.w	800a7e6 <_printf_i+0x182>
 800a680:	d822      	bhi.n	800a6c8 <_printf_i+0x64>
 800a682:	2963      	cmp	r1, #99	; 0x63
 800a684:	d036      	beq.n	800a6f4 <_printf_i+0x90>
 800a686:	d80a      	bhi.n	800a69e <_printf_i+0x3a>
 800a688:	2900      	cmp	r1, #0
 800a68a:	f000 80b9 	beq.w	800a800 <_printf_i+0x19c>
 800a68e:	2958      	cmp	r1, #88	; 0x58
 800a690:	f000 8083 	beq.w	800a79a <_printf_i+0x136>
 800a694:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a698:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a69c:	e032      	b.n	800a704 <_printf_i+0xa0>
 800a69e:	2964      	cmp	r1, #100	; 0x64
 800a6a0:	d001      	beq.n	800a6a6 <_printf_i+0x42>
 800a6a2:	2969      	cmp	r1, #105	; 0x69
 800a6a4:	d1f6      	bne.n	800a694 <_printf_i+0x30>
 800a6a6:	6820      	ldr	r0, [r4, #0]
 800a6a8:	6813      	ldr	r3, [r2, #0]
 800a6aa:	0605      	lsls	r5, r0, #24
 800a6ac:	f103 0104 	add.w	r1, r3, #4
 800a6b0:	d52a      	bpl.n	800a708 <_printf_i+0xa4>
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	6011      	str	r1, [r2, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	da03      	bge.n	800a6c2 <_printf_i+0x5e>
 800a6ba:	222d      	movs	r2, #45	; 0x2d
 800a6bc:	425b      	negs	r3, r3
 800a6be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a6c2:	486f      	ldr	r0, [pc, #444]	; (800a880 <_printf_i+0x21c>)
 800a6c4:	220a      	movs	r2, #10
 800a6c6:	e039      	b.n	800a73c <_printf_i+0xd8>
 800a6c8:	2973      	cmp	r1, #115	; 0x73
 800a6ca:	f000 809d 	beq.w	800a808 <_printf_i+0x1a4>
 800a6ce:	d808      	bhi.n	800a6e2 <_printf_i+0x7e>
 800a6d0:	296f      	cmp	r1, #111	; 0x6f
 800a6d2:	d020      	beq.n	800a716 <_printf_i+0xb2>
 800a6d4:	2970      	cmp	r1, #112	; 0x70
 800a6d6:	d1dd      	bne.n	800a694 <_printf_i+0x30>
 800a6d8:	6823      	ldr	r3, [r4, #0]
 800a6da:	f043 0320 	orr.w	r3, r3, #32
 800a6de:	6023      	str	r3, [r4, #0]
 800a6e0:	e003      	b.n	800a6ea <_printf_i+0x86>
 800a6e2:	2975      	cmp	r1, #117	; 0x75
 800a6e4:	d017      	beq.n	800a716 <_printf_i+0xb2>
 800a6e6:	2978      	cmp	r1, #120	; 0x78
 800a6e8:	d1d4      	bne.n	800a694 <_printf_i+0x30>
 800a6ea:	2378      	movs	r3, #120	; 0x78
 800a6ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a6f0:	4864      	ldr	r0, [pc, #400]	; (800a884 <_printf_i+0x220>)
 800a6f2:	e055      	b.n	800a7a0 <_printf_i+0x13c>
 800a6f4:	6813      	ldr	r3, [r2, #0]
 800a6f6:	1d19      	adds	r1, r3, #4
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	6011      	str	r1, [r2, #0]
 800a6fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a700:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a704:	2301      	movs	r3, #1
 800a706:	e08c      	b.n	800a822 <_printf_i+0x1be>
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	6011      	str	r1, [r2, #0]
 800a70c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a710:	bf18      	it	ne
 800a712:	b21b      	sxthne	r3, r3
 800a714:	e7cf      	b.n	800a6b6 <_printf_i+0x52>
 800a716:	6813      	ldr	r3, [r2, #0]
 800a718:	6825      	ldr	r5, [r4, #0]
 800a71a:	1d18      	adds	r0, r3, #4
 800a71c:	6010      	str	r0, [r2, #0]
 800a71e:	0628      	lsls	r0, r5, #24
 800a720:	d501      	bpl.n	800a726 <_printf_i+0xc2>
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	e002      	b.n	800a72c <_printf_i+0xc8>
 800a726:	0668      	lsls	r0, r5, #25
 800a728:	d5fb      	bpl.n	800a722 <_printf_i+0xbe>
 800a72a:	881b      	ldrh	r3, [r3, #0]
 800a72c:	4854      	ldr	r0, [pc, #336]	; (800a880 <_printf_i+0x21c>)
 800a72e:	296f      	cmp	r1, #111	; 0x6f
 800a730:	bf14      	ite	ne
 800a732:	220a      	movne	r2, #10
 800a734:	2208      	moveq	r2, #8
 800a736:	2100      	movs	r1, #0
 800a738:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a73c:	6865      	ldr	r5, [r4, #4]
 800a73e:	60a5      	str	r5, [r4, #8]
 800a740:	2d00      	cmp	r5, #0
 800a742:	f2c0 8095 	blt.w	800a870 <_printf_i+0x20c>
 800a746:	6821      	ldr	r1, [r4, #0]
 800a748:	f021 0104 	bic.w	r1, r1, #4
 800a74c:	6021      	str	r1, [r4, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d13d      	bne.n	800a7ce <_printf_i+0x16a>
 800a752:	2d00      	cmp	r5, #0
 800a754:	f040 808e 	bne.w	800a874 <_printf_i+0x210>
 800a758:	4665      	mov	r5, ip
 800a75a:	2a08      	cmp	r2, #8
 800a75c:	d10b      	bne.n	800a776 <_printf_i+0x112>
 800a75e:	6823      	ldr	r3, [r4, #0]
 800a760:	07db      	lsls	r3, r3, #31
 800a762:	d508      	bpl.n	800a776 <_printf_i+0x112>
 800a764:	6923      	ldr	r3, [r4, #16]
 800a766:	6862      	ldr	r2, [r4, #4]
 800a768:	429a      	cmp	r2, r3
 800a76a:	bfde      	ittt	le
 800a76c:	2330      	movle	r3, #48	; 0x30
 800a76e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a772:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a776:	ebac 0305 	sub.w	r3, ip, r5
 800a77a:	6123      	str	r3, [r4, #16]
 800a77c:	f8cd 8000 	str.w	r8, [sp]
 800a780:	463b      	mov	r3, r7
 800a782:	aa03      	add	r2, sp, #12
 800a784:	4621      	mov	r1, r4
 800a786:	4630      	mov	r0, r6
 800a788:	f7ff fef6 	bl	800a578 <_printf_common>
 800a78c:	3001      	adds	r0, #1
 800a78e:	d14d      	bne.n	800a82c <_printf_i+0x1c8>
 800a790:	f04f 30ff 	mov.w	r0, #4294967295
 800a794:	b005      	add	sp, #20
 800a796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a79a:	4839      	ldr	r0, [pc, #228]	; (800a880 <_printf_i+0x21c>)
 800a79c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a7a0:	6813      	ldr	r3, [r2, #0]
 800a7a2:	6821      	ldr	r1, [r4, #0]
 800a7a4:	1d1d      	adds	r5, r3, #4
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	6015      	str	r5, [r2, #0]
 800a7aa:	060a      	lsls	r2, r1, #24
 800a7ac:	d50b      	bpl.n	800a7c6 <_printf_i+0x162>
 800a7ae:	07ca      	lsls	r2, r1, #31
 800a7b0:	bf44      	itt	mi
 800a7b2:	f041 0120 	orrmi.w	r1, r1, #32
 800a7b6:	6021      	strmi	r1, [r4, #0]
 800a7b8:	b91b      	cbnz	r3, 800a7c2 <_printf_i+0x15e>
 800a7ba:	6822      	ldr	r2, [r4, #0]
 800a7bc:	f022 0220 	bic.w	r2, r2, #32
 800a7c0:	6022      	str	r2, [r4, #0]
 800a7c2:	2210      	movs	r2, #16
 800a7c4:	e7b7      	b.n	800a736 <_printf_i+0xd2>
 800a7c6:	064d      	lsls	r5, r1, #25
 800a7c8:	bf48      	it	mi
 800a7ca:	b29b      	uxthmi	r3, r3
 800a7cc:	e7ef      	b.n	800a7ae <_printf_i+0x14a>
 800a7ce:	4665      	mov	r5, ip
 800a7d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a7d4:	fb02 3311 	mls	r3, r2, r1, r3
 800a7d8:	5cc3      	ldrb	r3, [r0, r3]
 800a7da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a7de:	460b      	mov	r3, r1
 800a7e0:	2900      	cmp	r1, #0
 800a7e2:	d1f5      	bne.n	800a7d0 <_printf_i+0x16c>
 800a7e4:	e7b9      	b.n	800a75a <_printf_i+0xf6>
 800a7e6:	6813      	ldr	r3, [r2, #0]
 800a7e8:	6825      	ldr	r5, [r4, #0]
 800a7ea:	6961      	ldr	r1, [r4, #20]
 800a7ec:	1d18      	adds	r0, r3, #4
 800a7ee:	6010      	str	r0, [r2, #0]
 800a7f0:	0628      	lsls	r0, r5, #24
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	d501      	bpl.n	800a7fa <_printf_i+0x196>
 800a7f6:	6019      	str	r1, [r3, #0]
 800a7f8:	e002      	b.n	800a800 <_printf_i+0x19c>
 800a7fa:	066a      	lsls	r2, r5, #25
 800a7fc:	d5fb      	bpl.n	800a7f6 <_printf_i+0x192>
 800a7fe:	8019      	strh	r1, [r3, #0]
 800a800:	2300      	movs	r3, #0
 800a802:	6123      	str	r3, [r4, #16]
 800a804:	4665      	mov	r5, ip
 800a806:	e7b9      	b.n	800a77c <_printf_i+0x118>
 800a808:	6813      	ldr	r3, [r2, #0]
 800a80a:	1d19      	adds	r1, r3, #4
 800a80c:	6011      	str	r1, [r2, #0]
 800a80e:	681d      	ldr	r5, [r3, #0]
 800a810:	6862      	ldr	r2, [r4, #4]
 800a812:	2100      	movs	r1, #0
 800a814:	4628      	mov	r0, r5
 800a816:	f7f5 fceb 	bl	80001f0 <memchr>
 800a81a:	b108      	cbz	r0, 800a820 <_printf_i+0x1bc>
 800a81c:	1b40      	subs	r0, r0, r5
 800a81e:	6060      	str	r0, [r4, #4]
 800a820:	6863      	ldr	r3, [r4, #4]
 800a822:	6123      	str	r3, [r4, #16]
 800a824:	2300      	movs	r3, #0
 800a826:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a82a:	e7a7      	b.n	800a77c <_printf_i+0x118>
 800a82c:	6923      	ldr	r3, [r4, #16]
 800a82e:	462a      	mov	r2, r5
 800a830:	4639      	mov	r1, r7
 800a832:	4630      	mov	r0, r6
 800a834:	47c0      	blx	r8
 800a836:	3001      	adds	r0, #1
 800a838:	d0aa      	beq.n	800a790 <_printf_i+0x12c>
 800a83a:	6823      	ldr	r3, [r4, #0]
 800a83c:	079b      	lsls	r3, r3, #30
 800a83e:	d413      	bmi.n	800a868 <_printf_i+0x204>
 800a840:	68e0      	ldr	r0, [r4, #12]
 800a842:	9b03      	ldr	r3, [sp, #12]
 800a844:	4298      	cmp	r0, r3
 800a846:	bfb8      	it	lt
 800a848:	4618      	movlt	r0, r3
 800a84a:	e7a3      	b.n	800a794 <_printf_i+0x130>
 800a84c:	2301      	movs	r3, #1
 800a84e:	464a      	mov	r2, r9
 800a850:	4639      	mov	r1, r7
 800a852:	4630      	mov	r0, r6
 800a854:	47c0      	blx	r8
 800a856:	3001      	adds	r0, #1
 800a858:	d09a      	beq.n	800a790 <_printf_i+0x12c>
 800a85a:	3501      	adds	r5, #1
 800a85c:	68e3      	ldr	r3, [r4, #12]
 800a85e:	9a03      	ldr	r2, [sp, #12]
 800a860:	1a9b      	subs	r3, r3, r2
 800a862:	42ab      	cmp	r3, r5
 800a864:	dcf2      	bgt.n	800a84c <_printf_i+0x1e8>
 800a866:	e7eb      	b.n	800a840 <_printf_i+0x1dc>
 800a868:	2500      	movs	r5, #0
 800a86a:	f104 0919 	add.w	r9, r4, #25
 800a86e:	e7f5      	b.n	800a85c <_printf_i+0x1f8>
 800a870:	2b00      	cmp	r3, #0
 800a872:	d1ac      	bne.n	800a7ce <_printf_i+0x16a>
 800a874:	7803      	ldrb	r3, [r0, #0]
 800a876:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a87a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a87e:	e76c      	b.n	800a75a <_printf_i+0xf6>
 800a880:	0800c04a 	.word	0x0800c04a
 800a884:	0800c05b 	.word	0x0800c05b

0800a888 <_sbrk_r>:
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	4c06      	ldr	r4, [pc, #24]	; (800a8a4 <_sbrk_r+0x1c>)
 800a88c:	2300      	movs	r3, #0
 800a88e:	4605      	mov	r5, r0
 800a890:	4608      	mov	r0, r1
 800a892:	6023      	str	r3, [r4, #0]
 800a894:	f7f7 fb4a 	bl	8001f2c <_sbrk>
 800a898:	1c43      	adds	r3, r0, #1
 800a89a:	d102      	bne.n	800a8a2 <_sbrk_r+0x1a>
 800a89c:	6823      	ldr	r3, [r4, #0]
 800a89e:	b103      	cbz	r3, 800a8a2 <_sbrk_r+0x1a>
 800a8a0:	602b      	str	r3, [r5, #0]
 800a8a2:	bd38      	pop	{r3, r4, r5, pc}
 800a8a4:	20001dd4 	.word	0x20001dd4

0800a8a8 <sniprintf>:
 800a8a8:	b40c      	push	{r2, r3}
 800a8aa:	b530      	push	{r4, r5, lr}
 800a8ac:	4b17      	ldr	r3, [pc, #92]	; (800a90c <sniprintf+0x64>)
 800a8ae:	1e0c      	subs	r4, r1, #0
 800a8b0:	b09d      	sub	sp, #116	; 0x74
 800a8b2:	681d      	ldr	r5, [r3, #0]
 800a8b4:	da08      	bge.n	800a8c8 <sniprintf+0x20>
 800a8b6:	238b      	movs	r3, #139	; 0x8b
 800a8b8:	602b      	str	r3, [r5, #0]
 800a8ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a8be:	b01d      	add	sp, #116	; 0x74
 800a8c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8c4:	b002      	add	sp, #8
 800a8c6:	4770      	bx	lr
 800a8c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a8cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a8d0:	bf14      	ite	ne
 800a8d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a8d6:	4623      	moveq	r3, r4
 800a8d8:	9304      	str	r3, [sp, #16]
 800a8da:	9307      	str	r3, [sp, #28]
 800a8dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8e0:	9002      	str	r0, [sp, #8]
 800a8e2:	9006      	str	r0, [sp, #24]
 800a8e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a8e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a8ea:	ab21      	add	r3, sp, #132	; 0x84
 800a8ec:	a902      	add	r1, sp, #8
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	9301      	str	r3, [sp, #4]
 800a8f2:	f001 f9a5 	bl	800bc40 <_svfiprintf_r>
 800a8f6:	1c43      	adds	r3, r0, #1
 800a8f8:	bfbc      	itt	lt
 800a8fa:	238b      	movlt	r3, #139	; 0x8b
 800a8fc:	602b      	strlt	r3, [r5, #0]
 800a8fe:	2c00      	cmp	r4, #0
 800a900:	d0dd      	beq.n	800a8be <sniprintf+0x16>
 800a902:	9b02      	ldr	r3, [sp, #8]
 800a904:	2200      	movs	r2, #0
 800a906:	701a      	strb	r2, [r3, #0]
 800a908:	e7d9      	b.n	800a8be <sniprintf+0x16>
 800a90a:	bf00      	nop
 800a90c:	20000188 	.word	0x20000188

0800a910 <quorem>:
 800a910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a914:	6903      	ldr	r3, [r0, #16]
 800a916:	690c      	ldr	r4, [r1, #16]
 800a918:	42a3      	cmp	r3, r4
 800a91a:	4680      	mov	r8, r0
 800a91c:	f2c0 8082 	blt.w	800aa24 <quorem+0x114>
 800a920:	3c01      	subs	r4, #1
 800a922:	f101 0714 	add.w	r7, r1, #20
 800a926:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a92a:	f100 0614 	add.w	r6, r0, #20
 800a92e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a932:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a936:	eb06 030c 	add.w	r3, r6, ip
 800a93a:	3501      	adds	r5, #1
 800a93c:	eb07 090c 	add.w	r9, r7, ip
 800a940:	9301      	str	r3, [sp, #4]
 800a942:	fbb0 f5f5 	udiv	r5, r0, r5
 800a946:	b395      	cbz	r5, 800a9ae <quorem+0x9e>
 800a948:	f04f 0a00 	mov.w	sl, #0
 800a94c:	4638      	mov	r0, r7
 800a94e:	46b6      	mov	lr, r6
 800a950:	46d3      	mov	fp, sl
 800a952:	f850 2b04 	ldr.w	r2, [r0], #4
 800a956:	b293      	uxth	r3, r2
 800a958:	fb05 a303 	mla	r3, r5, r3, sl
 800a95c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a960:	b29b      	uxth	r3, r3
 800a962:	ebab 0303 	sub.w	r3, fp, r3
 800a966:	0c12      	lsrs	r2, r2, #16
 800a968:	f8de b000 	ldr.w	fp, [lr]
 800a96c:	fb05 a202 	mla	r2, r5, r2, sl
 800a970:	fa13 f38b 	uxtah	r3, r3, fp
 800a974:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a978:	fa1f fb82 	uxth.w	fp, r2
 800a97c:	f8de 2000 	ldr.w	r2, [lr]
 800a980:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a984:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a988:	b29b      	uxth	r3, r3
 800a98a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a98e:	4581      	cmp	r9, r0
 800a990:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a994:	f84e 3b04 	str.w	r3, [lr], #4
 800a998:	d2db      	bcs.n	800a952 <quorem+0x42>
 800a99a:	f856 300c 	ldr.w	r3, [r6, ip]
 800a99e:	b933      	cbnz	r3, 800a9ae <quorem+0x9e>
 800a9a0:	9b01      	ldr	r3, [sp, #4]
 800a9a2:	3b04      	subs	r3, #4
 800a9a4:	429e      	cmp	r6, r3
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	d330      	bcc.n	800aa0c <quorem+0xfc>
 800a9aa:	f8c8 4010 	str.w	r4, [r8, #16]
 800a9ae:	4640      	mov	r0, r8
 800a9b0:	f001 f818 	bl	800b9e4 <__mcmp>
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	db25      	blt.n	800aa04 <quorem+0xf4>
 800a9b8:	3501      	adds	r5, #1
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	f04f 0c00 	mov.w	ip, #0
 800a9c0:	f857 2b04 	ldr.w	r2, [r7], #4
 800a9c4:	f8d0 e000 	ldr.w	lr, [r0]
 800a9c8:	b293      	uxth	r3, r2
 800a9ca:	ebac 0303 	sub.w	r3, ip, r3
 800a9ce:	0c12      	lsrs	r2, r2, #16
 800a9d0:	fa13 f38e 	uxtah	r3, r3, lr
 800a9d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a9d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9e2:	45b9      	cmp	r9, r7
 800a9e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a9e8:	f840 3b04 	str.w	r3, [r0], #4
 800a9ec:	d2e8      	bcs.n	800a9c0 <quorem+0xb0>
 800a9ee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a9f2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a9f6:	b92a      	cbnz	r2, 800aa04 <quorem+0xf4>
 800a9f8:	3b04      	subs	r3, #4
 800a9fa:	429e      	cmp	r6, r3
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	d30b      	bcc.n	800aa18 <quorem+0x108>
 800aa00:	f8c8 4010 	str.w	r4, [r8, #16]
 800aa04:	4628      	mov	r0, r5
 800aa06:	b003      	add	sp, #12
 800aa08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa0c:	6812      	ldr	r2, [r2, #0]
 800aa0e:	3b04      	subs	r3, #4
 800aa10:	2a00      	cmp	r2, #0
 800aa12:	d1ca      	bne.n	800a9aa <quorem+0x9a>
 800aa14:	3c01      	subs	r4, #1
 800aa16:	e7c5      	b.n	800a9a4 <quorem+0x94>
 800aa18:	6812      	ldr	r2, [r2, #0]
 800aa1a:	3b04      	subs	r3, #4
 800aa1c:	2a00      	cmp	r2, #0
 800aa1e:	d1ef      	bne.n	800aa00 <quorem+0xf0>
 800aa20:	3c01      	subs	r4, #1
 800aa22:	e7ea      	b.n	800a9fa <quorem+0xea>
 800aa24:	2000      	movs	r0, #0
 800aa26:	e7ee      	b.n	800aa06 <quorem+0xf6>

0800aa28 <_dtoa_r>:
 800aa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2c:	ec57 6b10 	vmov	r6, r7, d0
 800aa30:	b097      	sub	sp, #92	; 0x5c
 800aa32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aa34:	9106      	str	r1, [sp, #24]
 800aa36:	4604      	mov	r4, r0
 800aa38:	920b      	str	r2, [sp, #44]	; 0x2c
 800aa3a:	9312      	str	r3, [sp, #72]	; 0x48
 800aa3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aa40:	e9cd 6700 	strd	r6, r7, [sp]
 800aa44:	b93d      	cbnz	r5, 800aa56 <_dtoa_r+0x2e>
 800aa46:	2010      	movs	r0, #16
 800aa48:	f7ff f9f6 	bl	8009e38 <malloc>
 800aa4c:	6260      	str	r0, [r4, #36]	; 0x24
 800aa4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aa52:	6005      	str	r5, [r0, #0]
 800aa54:	60c5      	str	r5, [r0, #12]
 800aa56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa58:	6819      	ldr	r1, [r3, #0]
 800aa5a:	b151      	cbz	r1, 800aa72 <_dtoa_r+0x4a>
 800aa5c:	685a      	ldr	r2, [r3, #4]
 800aa5e:	604a      	str	r2, [r1, #4]
 800aa60:	2301      	movs	r3, #1
 800aa62:	4093      	lsls	r3, r2
 800aa64:	608b      	str	r3, [r1, #8]
 800aa66:	4620      	mov	r0, r4
 800aa68:	f000 fdda 	bl	800b620 <_Bfree>
 800aa6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa6e:	2200      	movs	r2, #0
 800aa70:	601a      	str	r2, [r3, #0]
 800aa72:	1e3b      	subs	r3, r7, #0
 800aa74:	bfbb      	ittet	lt
 800aa76:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aa7a:	9301      	strlt	r3, [sp, #4]
 800aa7c:	2300      	movge	r3, #0
 800aa7e:	2201      	movlt	r2, #1
 800aa80:	bfac      	ite	ge
 800aa82:	f8c8 3000 	strge.w	r3, [r8]
 800aa86:	f8c8 2000 	strlt.w	r2, [r8]
 800aa8a:	4baf      	ldr	r3, [pc, #700]	; (800ad48 <_dtoa_r+0x320>)
 800aa8c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aa90:	ea33 0308 	bics.w	r3, r3, r8
 800aa94:	d114      	bne.n	800aac0 <_dtoa_r+0x98>
 800aa96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa98:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa9c:	6013      	str	r3, [r2, #0]
 800aa9e:	9b00      	ldr	r3, [sp, #0]
 800aaa0:	b923      	cbnz	r3, 800aaac <_dtoa_r+0x84>
 800aaa2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	f000 8542 	beq.w	800b530 <_dtoa_r+0xb08>
 800aaac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ad5c <_dtoa_r+0x334>
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	f000 8544 	beq.w	800b540 <_dtoa_r+0xb18>
 800aab8:	f10b 0303 	add.w	r3, fp, #3
 800aabc:	f000 bd3e 	b.w	800b53c <_dtoa_r+0xb14>
 800aac0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800aac4:	2200      	movs	r2, #0
 800aac6:	2300      	movs	r3, #0
 800aac8:	4630      	mov	r0, r6
 800aaca:	4639      	mov	r1, r7
 800aacc:	f7f6 f804 	bl	8000ad8 <__aeabi_dcmpeq>
 800aad0:	4681      	mov	r9, r0
 800aad2:	b168      	cbz	r0, 800aaf0 <_dtoa_r+0xc8>
 800aad4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aad6:	2301      	movs	r3, #1
 800aad8:	6013      	str	r3, [r2, #0]
 800aada:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aadc:	2b00      	cmp	r3, #0
 800aade:	f000 8524 	beq.w	800b52a <_dtoa_r+0xb02>
 800aae2:	4b9a      	ldr	r3, [pc, #616]	; (800ad4c <_dtoa_r+0x324>)
 800aae4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aae6:	f103 3bff 	add.w	fp, r3, #4294967295
 800aaea:	6013      	str	r3, [r2, #0]
 800aaec:	f000 bd28 	b.w	800b540 <_dtoa_r+0xb18>
 800aaf0:	aa14      	add	r2, sp, #80	; 0x50
 800aaf2:	a915      	add	r1, sp, #84	; 0x54
 800aaf4:	ec47 6b10 	vmov	d0, r6, r7
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f000 ffea 	bl	800bad2 <__d2b>
 800aafe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ab02:	9004      	str	r0, [sp, #16]
 800ab04:	2d00      	cmp	r5, #0
 800ab06:	d07c      	beq.n	800ac02 <_dtoa_r+0x1da>
 800ab08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab0c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ab10:	46b2      	mov	sl, r6
 800ab12:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800ab16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ab1a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800ab1e:	2200      	movs	r2, #0
 800ab20:	4b8b      	ldr	r3, [pc, #556]	; (800ad50 <_dtoa_r+0x328>)
 800ab22:	4650      	mov	r0, sl
 800ab24:	4659      	mov	r1, fp
 800ab26:	f7f5 fbb7 	bl	8000298 <__aeabi_dsub>
 800ab2a:	a381      	add	r3, pc, #516	; (adr r3, 800ad30 <_dtoa_r+0x308>)
 800ab2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab30:	f7f5 fd6a 	bl	8000608 <__aeabi_dmul>
 800ab34:	a380      	add	r3, pc, #512	; (adr r3, 800ad38 <_dtoa_r+0x310>)
 800ab36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3a:	f7f5 fbaf 	bl	800029c <__adddf3>
 800ab3e:	4606      	mov	r6, r0
 800ab40:	4628      	mov	r0, r5
 800ab42:	460f      	mov	r7, r1
 800ab44:	f7f5 fcf6 	bl	8000534 <__aeabi_i2d>
 800ab48:	a37d      	add	r3, pc, #500	; (adr r3, 800ad40 <_dtoa_r+0x318>)
 800ab4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4e:	f7f5 fd5b 	bl	8000608 <__aeabi_dmul>
 800ab52:	4602      	mov	r2, r0
 800ab54:	460b      	mov	r3, r1
 800ab56:	4630      	mov	r0, r6
 800ab58:	4639      	mov	r1, r7
 800ab5a:	f7f5 fb9f 	bl	800029c <__adddf3>
 800ab5e:	4606      	mov	r6, r0
 800ab60:	460f      	mov	r7, r1
 800ab62:	f7f6 f801 	bl	8000b68 <__aeabi_d2iz>
 800ab66:	2200      	movs	r2, #0
 800ab68:	4682      	mov	sl, r0
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	4639      	mov	r1, r7
 800ab70:	f7f5 ffbc 	bl	8000aec <__aeabi_dcmplt>
 800ab74:	b148      	cbz	r0, 800ab8a <_dtoa_r+0x162>
 800ab76:	4650      	mov	r0, sl
 800ab78:	f7f5 fcdc 	bl	8000534 <__aeabi_i2d>
 800ab7c:	4632      	mov	r2, r6
 800ab7e:	463b      	mov	r3, r7
 800ab80:	f7f5 ffaa 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab84:	b908      	cbnz	r0, 800ab8a <_dtoa_r+0x162>
 800ab86:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab8a:	f1ba 0f16 	cmp.w	sl, #22
 800ab8e:	d859      	bhi.n	800ac44 <_dtoa_r+0x21c>
 800ab90:	4970      	ldr	r1, [pc, #448]	; (800ad54 <_dtoa_r+0x32c>)
 800ab92:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ab96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab9e:	f7f5 ffc3 	bl	8000b28 <__aeabi_dcmpgt>
 800aba2:	2800      	cmp	r0, #0
 800aba4:	d050      	beq.n	800ac48 <_dtoa_r+0x220>
 800aba6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800abaa:	2300      	movs	r3, #0
 800abac:	930f      	str	r3, [sp, #60]	; 0x3c
 800abae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800abb0:	1b5d      	subs	r5, r3, r5
 800abb2:	f1b5 0801 	subs.w	r8, r5, #1
 800abb6:	bf49      	itett	mi
 800abb8:	f1c5 0301 	rsbmi	r3, r5, #1
 800abbc:	2300      	movpl	r3, #0
 800abbe:	9305      	strmi	r3, [sp, #20]
 800abc0:	f04f 0800 	movmi.w	r8, #0
 800abc4:	bf58      	it	pl
 800abc6:	9305      	strpl	r3, [sp, #20]
 800abc8:	f1ba 0f00 	cmp.w	sl, #0
 800abcc:	db3e      	blt.n	800ac4c <_dtoa_r+0x224>
 800abce:	2300      	movs	r3, #0
 800abd0:	44d0      	add	r8, sl
 800abd2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800abd6:	9307      	str	r3, [sp, #28]
 800abd8:	9b06      	ldr	r3, [sp, #24]
 800abda:	2b09      	cmp	r3, #9
 800abdc:	f200 8090 	bhi.w	800ad00 <_dtoa_r+0x2d8>
 800abe0:	2b05      	cmp	r3, #5
 800abe2:	bfc4      	itt	gt
 800abe4:	3b04      	subgt	r3, #4
 800abe6:	9306      	strgt	r3, [sp, #24]
 800abe8:	9b06      	ldr	r3, [sp, #24]
 800abea:	f1a3 0302 	sub.w	r3, r3, #2
 800abee:	bfcc      	ite	gt
 800abf0:	2500      	movgt	r5, #0
 800abf2:	2501      	movle	r5, #1
 800abf4:	2b03      	cmp	r3, #3
 800abf6:	f200 808f 	bhi.w	800ad18 <_dtoa_r+0x2f0>
 800abfa:	e8df f003 	tbb	[pc, r3]
 800abfe:	7f7d      	.short	0x7f7d
 800ac00:	7131      	.short	0x7131
 800ac02:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800ac06:	441d      	add	r5, r3
 800ac08:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800ac0c:	2820      	cmp	r0, #32
 800ac0e:	dd13      	ble.n	800ac38 <_dtoa_r+0x210>
 800ac10:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800ac14:	9b00      	ldr	r3, [sp, #0]
 800ac16:	fa08 f800 	lsl.w	r8, r8, r0
 800ac1a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ac1e:	fa23 f000 	lsr.w	r0, r3, r0
 800ac22:	ea48 0000 	orr.w	r0, r8, r0
 800ac26:	f7f5 fc75 	bl	8000514 <__aeabi_ui2d>
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	4682      	mov	sl, r0
 800ac2e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800ac32:	3d01      	subs	r5, #1
 800ac34:	9313      	str	r3, [sp, #76]	; 0x4c
 800ac36:	e772      	b.n	800ab1e <_dtoa_r+0xf6>
 800ac38:	9b00      	ldr	r3, [sp, #0]
 800ac3a:	f1c0 0020 	rsb	r0, r0, #32
 800ac3e:	fa03 f000 	lsl.w	r0, r3, r0
 800ac42:	e7f0      	b.n	800ac26 <_dtoa_r+0x1fe>
 800ac44:	2301      	movs	r3, #1
 800ac46:	e7b1      	b.n	800abac <_dtoa_r+0x184>
 800ac48:	900f      	str	r0, [sp, #60]	; 0x3c
 800ac4a:	e7b0      	b.n	800abae <_dtoa_r+0x186>
 800ac4c:	9b05      	ldr	r3, [sp, #20]
 800ac4e:	eba3 030a 	sub.w	r3, r3, sl
 800ac52:	9305      	str	r3, [sp, #20]
 800ac54:	f1ca 0300 	rsb	r3, sl, #0
 800ac58:	9307      	str	r3, [sp, #28]
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	930e      	str	r3, [sp, #56]	; 0x38
 800ac5e:	e7bb      	b.n	800abd8 <_dtoa_r+0x1b0>
 800ac60:	2301      	movs	r3, #1
 800ac62:	930a      	str	r3, [sp, #40]	; 0x28
 800ac64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	dd59      	ble.n	800ad1e <_dtoa_r+0x2f6>
 800ac6a:	9302      	str	r3, [sp, #8]
 800ac6c:	4699      	mov	r9, r3
 800ac6e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ac70:	2200      	movs	r2, #0
 800ac72:	6072      	str	r2, [r6, #4]
 800ac74:	2204      	movs	r2, #4
 800ac76:	f102 0014 	add.w	r0, r2, #20
 800ac7a:	4298      	cmp	r0, r3
 800ac7c:	6871      	ldr	r1, [r6, #4]
 800ac7e:	d953      	bls.n	800ad28 <_dtoa_r+0x300>
 800ac80:	4620      	mov	r0, r4
 800ac82:	f000 fc99 	bl	800b5b8 <_Balloc>
 800ac86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac88:	6030      	str	r0, [r6, #0]
 800ac8a:	f1b9 0f0e 	cmp.w	r9, #14
 800ac8e:	f8d3 b000 	ldr.w	fp, [r3]
 800ac92:	f200 80e6 	bhi.w	800ae62 <_dtoa_r+0x43a>
 800ac96:	2d00      	cmp	r5, #0
 800ac98:	f000 80e3 	beq.w	800ae62 <_dtoa_r+0x43a>
 800ac9c:	ed9d 7b00 	vldr	d7, [sp]
 800aca0:	f1ba 0f00 	cmp.w	sl, #0
 800aca4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800aca8:	dd74      	ble.n	800ad94 <_dtoa_r+0x36c>
 800acaa:	4a2a      	ldr	r2, [pc, #168]	; (800ad54 <_dtoa_r+0x32c>)
 800acac:	f00a 030f 	and.w	r3, sl, #15
 800acb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800acb4:	ed93 7b00 	vldr	d7, [r3]
 800acb8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800acbc:	06f0      	lsls	r0, r6, #27
 800acbe:	ed8d 7b08 	vstr	d7, [sp, #32]
 800acc2:	d565      	bpl.n	800ad90 <_dtoa_r+0x368>
 800acc4:	4b24      	ldr	r3, [pc, #144]	; (800ad58 <_dtoa_r+0x330>)
 800acc6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800acca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800acce:	f7f5 fdc5 	bl	800085c <__aeabi_ddiv>
 800acd2:	e9cd 0100 	strd	r0, r1, [sp]
 800acd6:	f006 060f 	and.w	r6, r6, #15
 800acda:	2503      	movs	r5, #3
 800acdc:	4f1e      	ldr	r7, [pc, #120]	; (800ad58 <_dtoa_r+0x330>)
 800acde:	e04c      	b.n	800ad7a <_dtoa_r+0x352>
 800ace0:	2301      	movs	r3, #1
 800ace2:	930a      	str	r3, [sp, #40]	; 0x28
 800ace4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ace6:	4453      	add	r3, sl
 800ace8:	f103 0901 	add.w	r9, r3, #1
 800acec:	9302      	str	r3, [sp, #8]
 800acee:	464b      	mov	r3, r9
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	bfb8      	it	lt
 800acf4:	2301      	movlt	r3, #1
 800acf6:	e7ba      	b.n	800ac6e <_dtoa_r+0x246>
 800acf8:	2300      	movs	r3, #0
 800acfa:	e7b2      	b.n	800ac62 <_dtoa_r+0x23a>
 800acfc:	2300      	movs	r3, #0
 800acfe:	e7f0      	b.n	800ace2 <_dtoa_r+0x2ba>
 800ad00:	2501      	movs	r5, #1
 800ad02:	2300      	movs	r3, #0
 800ad04:	9306      	str	r3, [sp, #24]
 800ad06:	950a      	str	r5, [sp, #40]	; 0x28
 800ad08:	f04f 33ff 	mov.w	r3, #4294967295
 800ad0c:	9302      	str	r3, [sp, #8]
 800ad0e:	4699      	mov	r9, r3
 800ad10:	2200      	movs	r2, #0
 800ad12:	2312      	movs	r3, #18
 800ad14:	920b      	str	r2, [sp, #44]	; 0x2c
 800ad16:	e7aa      	b.n	800ac6e <_dtoa_r+0x246>
 800ad18:	2301      	movs	r3, #1
 800ad1a:	930a      	str	r3, [sp, #40]	; 0x28
 800ad1c:	e7f4      	b.n	800ad08 <_dtoa_r+0x2e0>
 800ad1e:	2301      	movs	r3, #1
 800ad20:	9302      	str	r3, [sp, #8]
 800ad22:	4699      	mov	r9, r3
 800ad24:	461a      	mov	r2, r3
 800ad26:	e7f5      	b.n	800ad14 <_dtoa_r+0x2ec>
 800ad28:	3101      	adds	r1, #1
 800ad2a:	6071      	str	r1, [r6, #4]
 800ad2c:	0052      	lsls	r2, r2, #1
 800ad2e:	e7a2      	b.n	800ac76 <_dtoa_r+0x24e>
 800ad30:	636f4361 	.word	0x636f4361
 800ad34:	3fd287a7 	.word	0x3fd287a7
 800ad38:	8b60c8b3 	.word	0x8b60c8b3
 800ad3c:	3fc68a28 	.word	0x3fc68a28
 800ad40:	509f79fb 	.word	0x509f79fb
 800ad44:	3fd34413 	.word	0x3fd34413
 800ad48:	7ff00000 	.word	0x7ff00000
 800ad4c:	0800c049 	.word	0x0800c049
 800ad50:	3ff80000 	.word	0x3ff80000
 800ad54:	0800c108 	.word	0x0800c108
 800ad58:	0800c0e0 	.word	0x0800c0e0
 800ad5c:	0800c075 	.word	0x0800c075
 800ad60:	07f1      	lsls	r1, r6, #31
 800ad62:	d508      	bpl.n	800ad76 <_dtoa_r+0x34e>
 800ad64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ad68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad6c:	f7f5 fc4c 	bl	8000608 <__aeabi_dmul>
 800ad70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ad74:	3501      	adds	r5, #1
 800ad76:	1076      	asrs	r6, r6, #1
 800ad78:	3708      	adds	r7, #8
 800ad7a:	2e00      	cmp	r6, #0
 800ad7c:	d1f0      	bne.n	800ad60 <_dtoa_r+0x338>
 800ad7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ad82:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad86:	f7f5 fd69 	bl	800085c <__aeabi_ddiv>
 800ad8a:	e9cd 0100 	strd	r0, r1, [sp]
 800ad8e:	e01a      	b.n	800adc6 <_dtoa_r+0x39e>
 800ad90:	2502      	movs	r5, #2
 800ad92:	e7a3      	b.n	800acdc <_dtoa_r+0x2b4>
 800ad94:	f000 80a0 	beq.w	800aed8 <_dtoa_r+0x4b0>
 800ad98:	f1ca 0600 	rsb	r6, sl, #0
 800ad9c:	4b9f      	ldr	r3, [pc, #636]	; (800b01c <_dtoa_r+0x5f4>)
 800ad9e:	4fa0      	ldr	r7, [pc, #640]	; (800b020 <_dtoa_r+0x5f8>)
 800ada0:	f006 020f 	and.w	r2, r6, #15
 800ada4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ada8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800adb0:	f7f5 fc2a 	bl	8000608 <__aeabi_dmul>
 800adb4:	e9cd 0100 	strd	r0, r1, [sp]
 800adb8:	1136      	asrs	r6, r6, #4
 800adba:	2300      	movs	r3, #0
 800adbc:	2502      	movs	r5, #2
 800adbe:	2e00      	cmp	r6, #0
 800adc0:	d17f      	bne.n	800aec2 <_dtoa_r+0x49a>
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d1e1      	bne.n	800ad8a <_dtoa_r+0x362>
 800adc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f000 8087 	beq.w	800aedc <_dtoa_r+0x4b4>
 800adce:	e9dd 6700 	ldrd	r6, r7, [sp]
 800add2:	2200      	movs	r2, #0
 800add4:	4b93      	ldr	r3, [pc, #588]	; (800b024 <_dtoa_r+0x5fc>)
 800add6:	4630      	mov	r0, r6
 800add8:	4639      	mov	r1, r7
 800adda:	f7f5 fe87 	bl	8000aec <__aeabi_dcmplt>
 800adde:	2800      	cmp	r0, #0
 800ade0:	d07c      	beq.n	800aedc <_dtoa_r+0x4b4>
 800ade2:	f1b9 0f00 	cmp.w	r9, #0
 800ade6:	d079      	beq.n	800aedc <_dtoa_r+0x4b4>
 800ade8:	9b02      	ldr	r3, [sp, #8]
 800adea:	2b00      	cmp	r3, #0
 800adec:	dd35      	ble.n	800ae5a <_dtoa_r+0x432>
 800adee:	f10a 33ff 	add.w	r3, sl, #4294967295
 800adf2:	9308      	str	r3, [sp, #32]
 800adf4:	4639      	mov	r1, r7
 800adf6:	2200      	movs	r2, #0
 800adf8:	4b8b      	ldr	r3, [pc, #556]	; (800b028 <_dtoa_r+0x600>)
 800adfa:	4630      	mov	r0, r6
 800adfc:	f7f5 fc04 	bl	8000608 <__aeabi_dmul>
 800ae00:	e9cd 0100 	strd	r0, r1, [sp]
 800ae04:	9f02      	ldr	r7, [sp, #8]
 800ae06:	3501      	adds	r5, #1
 800ae08:	4628      	mov	r0, r5
 800ae0a:	f7f5 fb93 	bl	8000534 <__aeabi_i2d>
 800ae0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae12:	f7f5 fbf9 	bl	8000608 <__aeabi_dmul>
 800ae16:	2200      	movs	r2, #0
 800ae18:	4b84      	ldr	r3, [pc, #528]	; (800b02c <_dtoa_r+0x604>)
 800ae1a:	f7f5 fa3f 	bl	800029c <__adddf3>
 800ae1e:	4605      	mov	r5, r0
 800ae20:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ae24:	2f00      	cmp	r7, #0
 800ae26:	d15d      	bne.n	800aee4 <_dtoa_r+0x4bc>
 800ae28:	2200      	movs	r2, #0
 800ae2a:	4b81      	ldr	r3, [pc, #516]	; (800b030 <_dtoa_r+0x608>)
 800ae2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae30:	f7f5 fa32 	bl	8000298 <__aeabi_dsub>
 800ae34:	462a      	mov	r2, r5
 800ae36:	4633      	mov	r3, r6
 800ae38:	e9cd 0100 	strd	r0, r1, [sp]
 800ae3c:	f7f5 fe74 	bl	8000b28 <__aeabi_dcmpgt>
 800ae40:	2800      	cmp	r0, #0
 800ae42:	f040 8288 	bne.w	800b356 <_dtoa_r+0x92e>
 800ae46:	462a      	mov	r2, r5
 800ae48:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ae4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae50:	f7f5 fe4c 	bl	8000aec <__aeabi_dcmplt>
 800ae54:	2800      	cmp	r0, #0
 800ae56:	f040 827c 	bne.w	800b352 <_dtoa_r+0x92a>
 800ae5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ae5e:	e9cd 2300 	strd	r2, r3, [sp]
 800ae62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	f2c0 8150 	blt.w	800b10a <_dtoa_r+0x6e2>
 800ae6a:	f1ba 0f0e 	cmp.w	sl, #14
 800ae6e:	f300 814c 	bgt.w	800b10a <_dtoa_r+0x6e2>
 800ae72:	4b6a      	ldr	r3, [pc, #424]	; (800b01c <_dtoa_r+0x5f4>)
 800ae74:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ae78:	ed93 7b00 	vldr	d7, [r3]
 800ae7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ae84:	f280 80d8 	bge.w	800b038 <_dtoa_r+0x610>
 800ae88:	f1b9 0f00 	cmp.w	r9, #0
 800ae8c:	f300 80d4 	bgt.w	800b038 <_dtoa_r+0x610>
 800ae90:	f040 825e 	bne.w	800b350 <_dtoa_r+0x928>
 800ae94:	2200      	movs	r2, #0
 800ae96:	4b66      	ldr	r3, [pc, #408]	; (800b030 <_dtoa_r+0x608>)
 800ae98:	ec51 0b17 	vmov	r0, r1, d7
 800ae9c:	f7f5 fbb4 	bl	8000608 <__aeabi_dmul>
 800aea0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aea4:	f7f5 fe36 	bl	8000b14 <__aeabi_dcmpge>
 800aea8:	464f      	mov	r7, r9
 800aeaa:	464e      	mov	r6, r9
 800aeac:	2800      	cmp	r0, #0
 800aeae:	f040 8234 	bne.w	800b31a <_dtoa_r+0x8f2>
 800aeb2:	2331      	movs	r3, #49	; 0x31
 800aeb4:	f10b 0501 	add.w	r5, fp, #1
 800aeb8:	f88b 3000 	strb.w	r3, [fp]
 800aebc:	f10a 0a01 	add.w	sl, sl, #1
 800aec0:	e22f      	b.n	800b322 <_dtoa_r+0x8fa>
 800aec2:	07f2      	lsls	r2, r6, #31
 800aec4:	d505      	bpl.n	800aed2 <_dtoa_r+0x4aa>
 800aec6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeca:	f7f5 fb9d 	bl	8000608 <__aeabi_dmul>
 800aece:	3501      	adds	r5, #1
 800aed0:	2301      	movs	r3, #1
 800aed2:	1076      	asrs	r6, r6, #1
 800aed4:	3708      	adds	r7, #8
 800aed6:	e772      	b.n	800adbe <_dtoa_r+0x396>
 800aed8:	2502      	movs	r5, #2
 800aeda:	e774      	b.n	800adc6 <_dtoa_r+0x39e>
 800aedc:	f8cd a020 	str.w	sl, [sp, #32]
 800aee0:	464f      	mov	r7, r9
 800aee2:	e791      	b.n	800ae08 <_dtoa_r+0x3e0>
 800aee4:	4b4d      	ldr	r3, [pc, #308]	; (800b01c <_dtoa_r+0x5f4>)
 800aee6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aeea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800aeee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d047      	beq.n	800af84 <_dtoa_r+0x55c>
 800aef4:	4602      	mov	r2, r0
 800aef6:	460b      	mov	r3, r1
 800aef8:	2000      	movs	r0, #0
 800aefa:	494e      	ldr	r1, [pc, #312]	; (800b034 <_dtoa_r+0x60c>)
 800aefc:	f7f5 fcae 	bl	800085c <__aeabi_ddiv>
 800af00:	462a      	mov	r2, r5
 800af02:	4633      	mov	r3, r6
 800af04:	f7f5 f9c8 	bl	8000298 <__aeabi_dsub>
 800af08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800af0c:	465d      	mov	r5, fp
 800af0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af12:	f7f5 fe29 	bl	8000b68 <__aeabi_d2iz>
 800af16:	4606      	mov	r6, r0
 800af18:	f7f5 fb0c 	bl	8000534 <__aeabi_i2d>
 800af1c:	4602      	mov	r2, r0
 800af1e:	460b      	mov	r3, r1
 800af20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af24:	f7f5 f9b8 	bl	8000298 <__aeabi_dsub>
 800af28:	3630      	adds	r6, #48	; 0x30
 800af2a:	f805 6b01 	strb.w	r6, [r5], #1
 800af2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800af32:	e9cd 0100 	strd	r0, r1, [sp]
 800af36:	f7f5 fdd9 	bl	8000aec <__aeabi_dcmplt>
 800af3a:	2800      	cmp	r0, #0
 800af3c:	d163      	bne.n	800b006 <_dtoa_r+0x5de>
 800af3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af42:	2000      	movs	r0, #0
 800af44:	4937      	ldr	r1, [pc, #220]	; (800b024 <_dtoa_r+0x5fc>)
 800af46:	f7f5 f9a7 	bl	8000298 <__aeabi_dsub>
 800af4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800af4e:	f7f5 fdcd 	bl	8000aec <__aeabi_dcmplt>
 800af52:	2800      	cmp	r0, #0
 800af54:	f040 80b7 	bne.w	800b0c6 <_dtoa_r+0x69e>
 800af58:	eba5 030b 	sub.w	r3, r5, fp
 800af5c:	429f      	cmp	r7, r3
 800af5e:	f77f af7c 	ble.w	800ae5a <_dtoa_r+0x432>
 800af62:	2200      	movs	r2, #0
 800af64:	4b30      	ldr	r3, [pc, #192]	; (800b028 <_dtoa_r+0x600>)
 800af66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af6a:	f7f5 fb4d 	bl	8000608 <__aeabi_dmul>
 800af6e:	2200      	movs	r2, #0
 800af70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800af74:	4b2c      	ldr	r3, [pc, #176]	; (800b028 <_dtoa_r+0x600>)
 800af76:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af7a:	f7f5 fb45 	bl	8000608 <__aeabi_dmul>
 800af7e:	e9cd 0100 	strd	r0, r1, [sp]
 800af82:	e7c4      	b.n	800af0e <_dtoa_r+0x4e6>
 800af84:	462a      	mov	r2, r5
 800af86:	4633      	mov	r3, r6
 800af88:	f7f5 fb3e 	bl	8000608 <__aeabi_dmul>
 800af8c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800af90:	eb0b 0507 	add.w	r5, fp, r7
 800af94:	465e      	mov	r6, fp
 800af96:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af9a:	f7f5 fde5 	bl	8000b68 <__aeabi_d2iz>
 800af9e:	4607      	mov	r7, r0
 800afa0:	f7f5 fac8 	bl	8000534 <__aeabi_i2d>
 800afa4:	3730      	adds	r7, #48	; 0x30
 800afa6:	4602      	mov	r2, r0
 800afa8:	460b      	mov	r3, r1
 800afaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afae:	f7f5 f973 	bl	8000298 <__aeabi_dsub>
 800afb2:	f806 7b01 	strb.w	r7, [r6], #1
 800afb6:	42ae      	cmp	r6, r5
 800afb8:	e9cd 0100 	strd	r0, r1, [sp]
 800afbc:	f04f 0200 	mov.w	r2, #0
 800afc0:	d126      	bne.n	800b010 <_dtoa_r+0x5e8>
 800afc2:	4b1c      	ldr	r3, [pc, #112]	; (800b034 <_dtoa_r+0x60c>)
 800afc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800afc8:	f7f5 f968 	bl	800029c <__adddf3>
 800afcc:	4602      	mov	r2, r0
 800afce:	460b      	mov	r3, r1
 800afd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afd4:	f7f5 fda8 	bl	8000b28 <__aeabi_dcmpgt>
 800afd8:	2800      	cmp	r0, #0
 800afda:	d174      	bne.n	800b0c6 <_dtoa_r+0x69e>
 800afdc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800afe0:	2000      	movs	r0, #0
 800afe2:	4914      	ldr	r1, [pc, #80]	; (800b034 <_dtoa_r+0x60c>)
 800afe4:	f7f5 f958 	bl	8000298 <__aeabi_dsub>
 800afe8:	4602      	mov	r2, r0
 800afea:	460b      	mov	r3, r1
 800afec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aff0:	f7f5 fd7c 	bl	8000aec <__aeabi_dcmplt>
 800aff4:	2800      	cmp	r0, #0
 800aff6:	f43f af30 	beq.w	800ae5a <_dtoa_r+0x432>
 800affa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800affe:	2b30      	cmp	r3, #48	; 0x30
 800b000:	f105 32ff 	add.w	r2, r5, #4294967295
 800b004:	d002      	beq.n	800b00c <_dtoa_r+0x5e4>
 800b006:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b00a:	e04a      	b.n	800b0a2 <_dtoa_r+0x67a>
 800b00c:	4615      	mov	r5, r2
 800b00e:	e7f4      	b.n	800affa <_dtoa_r+0x5d2>
 800b010:	4b05      	ldr	r3, [pc, #20]	; (800b028 <_dtoa_r+0x600>)
 800b012:	f7f5 faf9 	bl	8000608 <__aeabi_dmul>
 800b016:	e9cd 0100 	strd	r0, r1, [sp]
 800b01a:	e7bc      	b.n	800af96 <_dtoa_r+0x56e>
 800b01c:	0800c108 	.word	0x0800c108
 800b020:	0800c0e0 	.word	0x0800c0e0
 800b024:	3ff00000 	.word	0x3ff00000
 800b028:	40240000 	.word	0x40240000
 800b02c:	401c0000 	.word	0x401c0000
 800b030:	40140000 	.word	0x40140000
 800b034:	3fe00000 	.word	0x3fe00000
 800b038:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b03c:	465d      	mov	r5, fp
 800b03e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b042:	4630      	mov	r0, r6
 800b044:	4639      	mov	r1, r7
 800b046:	f7f5 fc09 	bl	800085c <__aeabi_ddiv>
 800b04a:	f7f5 fd8d 	bl	8000b68 <__aeabi_d2iz>
 800b04e:	4680      	mov	r8, r0
 800b050:	f7f5 fa70 	bl	8000534 <__aeabi_i2d>
 800b054:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b058:	f7f5 fad6 	bl	8000608 <__aeabi_dmul>
 800b05c:	4602      	mov	r2, r0
 800b05e:	460b      	mov	r3, r1
 800b060:	4630      	mov	r0, r6
 800b062:	4639      	mov	r1, r7
 800b064:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800b068:	f7f5 f916 	bl	8000298 <__aeabi_dsub>
 800b06c:	f805 6b01 	strb.w	r6, [r5], #1
 800b070:	eba5 060b 	sub.w	r6, r5, fp
 800b074:	45b1      	cmp	r9, r6
 800b076:	4602      	mov	r2, r0
 800b078:	460b      	mov	r3, r1
 800b07a:	d139      	bne.n	800b0f0 <_dtoa_r+0x6c8>
 800b07c:	f7f5 f90e 	bl	800029c <__adddf3>
 800b080:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b084:	4606      	mov	r6, r0
 800b086:	460f      	mov	r7, r1
 800b088:	f7f5 fd4e 	bl	8000b28 <__aeabi_dcmpgt>
 800b08c:	b9c8      	cbnz	r0, 800b0c2 <_dtoa_r+0x69a>
 800b08e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b092:	4630      	mov	r0, r6
 800b094:	4639      	mov	r1, r7
 800b096:	f7f5 fd1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800b09a:	b110      	cbz	r0, 800b0a2 <_dtoa_r+0x67a>
 800b09c:	f018 0f01 	tst.w	r8, #1
 800b0a0:	d10f      	bne.n	800b0c2 <_dtoa_r+0x69a>
 800b0a2:	9904      	ldr	r1, [sp, #16]
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f000 fabb 	bl	800b620 <_Bfree>
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b0ae:	702b      	strb	r3, [r5, #0]
 800b0b0:	f10a 0301 	add.w	r3, sl, #1
 800b0b4:	6013      	str	r3, [r2, #0]
 800b0b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	f000 8241 	beq.w	800b540 <_dtoa_r+0xb18>
 800b0be:	601d      	str	r5, [r3, #0]
 800b0c0:	e23e      	b.n	800b540 <_dtoa_r+0xb18>
 800b0c2:	f8cd a020 	str.w	sl, [sp, #32]
 800b0c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b0ca:	2a39      	cmp	r2, #57	; 0x39
 800b0cc:	f105 33ff 	add.w	r3, r5, #4294967295
 800b0d0:	d108      	bne.n	800b0e4 <_dtoa_r+0x6bc>
 800b0d2:	459b      	cmp	fp, r3
 800b0d4:	d10a      	bne.n	800b0ec <_dtoa_r+0x6c4>
 800b0d6:	9b08      	ldr	r3, [sp, #32]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	9308      	str	r3, [sp, #32]
 800b0dc:	2330      	movs	r3, #48	; 0x30
 800b0de:	f88b 3000 	strb.w	r3, [fp]
 800b0e2:	465b      	mov	r3, fp
 800b0e4:	781a      	ldrb	r2, [r3, #0]
 800b0e6:	3201      	adds	r2, #1
 800b0e8:	701a      	strb	r2, [r3, #0]
 800b0ea:	e78c      	b.n	800b006 <_dtoa_r+0x5de>
 800b0ec:	461d      	mov	r5, r3
 800b0ee:	e7ea      	b.n	800b0c6 <_dtoa_r+0x69e>
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	4b9b      	ldr	r3, [pc, #620]	; (800b360 <_dtoa_r+0x938>)
 800b0f4:	f7f5 fa88 	bl	8000608 <__aeabi_dmul>
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	4606      	mov	r6, r0
 800b0fe:	460f      	mov	r7, r1
 800b100:	f7f5 fcea 	bl	8000ad8 <__aeabi_dcmpeq>
 800b104:	2800      	cmp	r0, #0
 800b106:	d09a      	beq.n	800b03e <_dtoa_r+0x616>
 800b108:	e7cb      	b.n	800b0a2 <_dtoa_r+0x67a>
 800b10a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b10c:	2a00      	cmp	r2, #0
 800b10e:	f000 808b 	beq.w	800b228 <_dtoa_r+0x800>
 800b112:	9a06      	ldr	r2, [sp, #24]
 800b114:	2a01      	cmp	r2, #1
 800b116:	dc6e      	bgt.n	800b1f6 <_dtoa_r+0x7ce>
 800b118:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b11a:	2a00      	cmp	r2, #0
 800b11c:	d067      	beq.n	800b1ee <_dtoa_r+0x7c6>
 800b11e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b122:	9f07      	ldr	r7, [sp, #28]
 800b124:	9d05      	ldr	r5, [sp, #20]
 800b126:	9a05      	ldr	r2, [sp, #20]
 800b128:	2101      	movs	r1, #1
 800b12a:	441a      	add	r2, r3
 800b12c:	4620      	mov	r0, r4
 800b12e:	9205      	str	r2, [sp, #20]
 800b130:	4498      	add	r8, r3
 800b132:	f000 fb15 	bl	800b760 <__i2b>
 800b136:	4606      	mov	r6, r0
 800b138:	2d00      	cmp	r5, #0
 800b13a:	dd0c      	ble.n	800b156 <_dtoa_r+0x72e>
 800b13c:	f1b8 0f00 	cmp.w	r8, #0
 800b140:	dd09      	ble.n	800b156 <_dtoa_r+0x72e>
 800b142:	4545      	cmp	r5, r8
 800b144:	9a05      	ldr	r2, [sp, #20]
 800b146:	462b      	mov	r3, r5
 800b148:	bfa8      	it	ge
 800b14a:	4643      	movge	r3, r8
 800b14c:	1ad2      	subs	r2, r2, r3
 800b14e:	9205      	str	r2, [sp, #20]
 800b150:	1aed      	subs	r5, r5, r3
 800b152:	eba8 0803 	sub.w	r8, r8, r3
 800b156:	9b07      	ldr	r3, [sp, #28]
 800b158:	b1eb      	cbz	r3, 800b196 <_dtoa_r+0x76e>
 800b15a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d067      	beq.n	800b230 <_dtoa_r+0x808>
 800b160:	b18f      	cbz	r7, 800b186 <_dtoa_r+0x75e>
 800b162:	4631      	mov	r1, r6
 800b164:	463a      	mov	r2, r7
 800b166:	4620      	mov	r0, r4
 800b168:	f000 fb9a 	bl	800b8a0 <__pow5mult>
 800b16c:	9a04      	ldr	r2, [sp, #16]
 800b16e:	4601      	mov	r1, r0
 800b170:	4606      	mov	r6, r0
 800b172:	4620      	mov	r0, r4
 800b174:	f000 fafd 	bl	800b772 <__multiply>
 800b178:	9904      	ldr	r1, [sp, #16]
 800b17a:	9008      	str	r0, [sp, #32]
 800b17c:	4620      	mov	r0, r4
 800b17e:	f000 fa4f 	bl	800b620 <_Bfree>
 800b182:	9b08      	ldr	r3, [sp, #32]
 800b184:	9304      	str	r3, [sp, #16]
 800b186:	9b07      	ldr	r3, [sp, #28]
 800b188:	1bda      	subs	r2, r3, r7
 800b18a:	d004      	beq.n	800b196 <_dtoa_r+0x76e>
 800b18c:	9904      	ldr	r1, [sp, #16]
 800b18e:	4620      	mov	r0, r4
 800b190:	f000 fb86 	bl	800b8a0 <__pow5mult>
 800b194:	9004      	str	r0, [sp, #16]
 800b196:	2101      	movs	r1, #1
 800b198:	4620      	mov	r0, r4
 800b19a:	f000 fae1 	bl	800b760 <__i2b>
 800b19e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1a0:	4607      	mov	r7, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	f000 81d0 	beq.w	800b548 <_dtoa_r+0xb20>
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	4601      	mov	r1, r0
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f000 fb77 	bl	800b8a0 <__pow5mult>
 800b1b2:	9b06      	ldr	r3, [sp, #24]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	4607      	mov	r7, r0
 800b1b8:	dc40      	bgt.n	800b23c <_dtoa_r+0x814>
 800b1ba:	9b00      	ldr	r3, [sp, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d139      	bne.n	800b234 <_dtoa_r+0x80c>
 800b1c0:	9b01      	ldr	r3, [sp, #4]
 800b1c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d136      	bne.n	800b238 <_dtoa_r+0x810>
 800b1ca:	9b01      	ldr	r3, [sp, #4]
 800b1cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1d0:	0d1b      	lsrs	r3, r3, #20
 800b1d2:	051b      	lsls	r3, r3, #20
 800b1d4:	b12b      	cbz	r3, 800b1e2 <_dtoa_r+0x7ba>
 800b1d6:	9b05      	ldr	r3, [sp, #20]
 800b1d8:	3301      	adds	r3, #1
 800b1da:	9305      	str	r3, [sp, #20]
 800b1dc:	f108 0801 	add.w	r8, r8, #1
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	9307      	str	r3, [sp, #28]
 800b1e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d12a      	bne.n	800b240 <_dtoa_r+0x818>
 800b1ea:	2001      	movs	r0, #1
 800b1ec:	e030      	b.n	800b250 <_dtoa_r+0x828>
 800b1ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b1f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b1f4:	e795      	b.n	800b122 <_dtoa_r+0x6fa>
 800b1f6:	9b07      	ldr	r3, [sp, #28]
 800b1f8:	f109 37ff 	add.w	r7, r9, #4294967295
 800b1fc:	42bb      	cmp	r3, r7
 800b1fe:	bfbf      	itttt	lt
 800b200:	9b07      	ldrlt	r3, [sp, #28]
 800b202:	9707      	strlt	r7, [sp, #28]
 800b204:	1afa      	sublt	r2, r7, r3
 800b206:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b208:	bfbb      	ittet	lt
 800b20a:	189b      	addlt	r3, r3, r2
 800b20c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b20e:	1bdf      	subge	r7, r3, r7
 800b210:	2700      	movlt	r7, #0
 800b212:	f1b9 0f00 	cmp.w	r9, #0
 800b216:	bfb5      	itete	lt
 800b218:	9b05      	ldrlt	r3, [sp, #20]
 800b21a:	9d05      	ldrge	r5, [sp, #20]
 800b21c:	eba3 0509 	sublt.w	r5, r3, r9
 800b220:	464b      	movge	r3, r9
 800b222:	bfb8      	it	lt
 800b224:	2300      	movlt	r3, #0
 800b226:	e77e      	b.n	800b126 <_dtoa_r+0x6fe>
 800b228:	9f07      	ldr	r7, [sp, #28]
 800b22a:	9d05      	ldr	r5, [sp, #20]
 800b22c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b22e:	e783      	b.n	800b138 <_dtoa_r+0x710>
 800b230:	9a07      	ldr	r2, [sp, #28]
 800b232:	e7ab      	b.n	800b18c <_dtoa_r+0x764>
 800b234:	2300      	movs	r3, #0
 800b236:	e7d4      	b.n	800b1e2 <_dtoa_r+0x7ba>
 800b238:	9b00      	ldr	r3, [sp, #0]
 800b23a:	e7d2      	b.n	800b1e2 <_dtoa_r+0x7ba>
 800b23c:	2300      	movs	r3, #0
 800b23e:	9307      	str	r3, [sp, #28]
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800b246:	6918      	ldr	r0, [r3, #16]
 800b248:	f000 fa3c 	bl	800b6c4 <__hi0bits>
 800b24c:	f1c0 0020 	rsb	r0, r0, #32
 800b250:	4440      	add	r0, r8
 800b252:	f010 001f 	ands.w	r0, r0, #31
 800b256:	d047      	beq.n	800b2e8 <_dtoa_r+0x8c0>
 800b258:	f1c0 0320 	rsb	r3, r0, #32
 800b25c:	2b04      	cmp	r3, #4
 800b25e:	dd3b      	ble.n	800b2d8 <_dtoa_r+0x8b0>
 800b260:	9b05      	ldr	r3, [sp, #20]
 800b262:	f1c0 001c 	rsb	r0, r0, #28
 800b266:	4403      	add	r3, r0
 800b268:	9305      	str	r3, [sp, #20]
 800b26a:	4405      	add	r5, r0
 800b26c:	4480      	add	r8, r0
 800b26e:	9b05      	ldr	r3, [sp, #20]
 800b270:	2b00      	cmp	r3, #0
 800b272:	dd05      	ble.n	800b280 <_dtoa_r+0x858>
 800b274:	461a      	mov	r2, r3
 800b276:	9904      	ldr	r1, [sp, #16]
 800b278:	4620      	mov	r0, r4
 800b27a:	f000 fb5f 	bl	800b93c <__lshift>
 800b27e:	9004      	str	r0, [sp, #16]
 800b280:	f1b8 0f00 	cmp.w	r8, #0
 800b284:	dd05      	ble.n	800b292 <_dtoa_r+0x86a>
 800b286:	4639      	mov	r1, r7
 800b288:	4642      	mov	r2, r8
 800b28a:	4620      	mov	r0, r4
 800b28c:	f000 fb56 	bl	800b93c <__lshift>
 800b290:	4607      	mov	r7, r0
 800b292:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b294:	b353      	cbz	r3, 800b2ec <_dtoa_r+0x8c4>
 800b296:	4639      	mov	r1, r7
 800b298:	9804      	ldr	r0, [sp, #16]
 800b29a:	f000 fba3 	bl	800b9e4 <__mcmp>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	da24      	bge.n	800b2ec <_dtoa_r+0x8c4>
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	220a      	movs	r2, #10
 800b2a6:	9904      	ldr	r1, [sp, #16]
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	f000 f9d0 	bl	800b64e <__multadd>
 800b2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2b0:	9004      	str	r0, [sp, #16]
 800b2b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	f000 814d 	beq.w	800b556 <_dtoa_r+0xb2e>
 800b2bc:	2300      	movs	r3, #0
 800b2be:	4631      	mov	r1, r6
 800b2c0:	220a      	movs	r2, #10
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f000 f9c3 	bl	800b64e <__multadd>
 800b2c8:	9b02      	ldr	r3, [sp, #8]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	4606      	mov	r6, r0
 800b2ce:	dc4f      	bgt.n	800b370 <_dtoa_r+0x948>
 800b2d0:	9b06      	ldr	r3, [sp, #24]
 800b2d2:	2b02      	cmp	r3, #2
 800b2d4:	dd4c      	ble.n	800b370 <_dtoa_r+0x948>
 800b2d6:	e011      	b.n	800b2fc <_dtoa_r+0x8d4>
 800b2d8:	d0c9      	beq.n	800b26e <_dtoa_r+0x846>
 800b2da:	9a05      	ldr	r2, [sp, #20]
 800b2dc:	331c      	adds	r3, #28
 800b2de:	441a      	add	r2, r3
 800b2e0:	9205      	str	r2, [sp, #20]
 800b2e2:	441d      	add	r5, r3
 800b2e4:	4498      	add	r8, r3
 800b2e6:	e7c2      	b.n	800b26e <_dtoa_r+0x846>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	e7f6      	b.n	800b2da <_dtoa_r+0x8b2>
 800b2ec:	f1b9 0f00 	cmp.w	r9, #0
 800b2f0:	dc38      	bgt.n	800b364 <_dtoa_r+0x93c>
 800b2f2:	9b06      	ldr	r3, [sp, #24]
 800b2f4:	2b02      	cmp	r3, #2
 800b2f6:	dd35      	ble.n	800b364 <_dtoa_r+0x93c>
 800b2f8:	f8cd 9008 	str.w	r9, [sp, #8]
 800b2fc:	9b02      	ldr	r3, [sp, #8]
 800b2fe:	b963      	cbnz	r3, 800b31a <_dtoa_r+0x8f2>
 800b300:	4639      	mov	r1, r7
 800b302:	2205      	movs	r2, #5
 800b304:	4620      	mov	r0, r4
 800b306:	f000 f9a2 	bl	800b64e <__multadd>
 800b30a:	4601      	mov	r1, r0
 800b30c:	4607      	mov	r7, r0
 800b30e:	9804      	ldr	r0, [sp, #16]
 800b310:	f000 fb68 	bl	800b9e4 <__mcmp>
 800b314:	2800      	cmp	r0, #0
 800b316:	f73f adcc 	bgt.w	800aeb2 <_dtoa_r+0x48a>
 800b31a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b31c:	465d      	mov	r5, fp
 800b31e:	ea6f 0a03 	mvn.w	sl, r3
 800b322:	f04f 0900 	mov.w	r9, #0
 800b326:	4639      	mov	r1, r7
 800b328:	4620      	mov	r0, r4
 800b32a:	f000 f979 	bl	800b620 <_Bfree>
 800b32e:	2e00      	cmp	r6, #0
 800b330:	f43f aeb7 	beq.w	800b0a2 <_dtoa_r+0x67a>
 800b334:	f1b9 0f00 	cmp.w	r9, #0
 800b338:	d005      	beq.n	800b346 <_dtoa_r+0x91e>
 800b33a:	45b1      	cmp	r9, r6
 800b33c:	d003      	beq.n	800b346 <_dtoa_r+0x91e>
 800b33e:	4649      	mov	r1, r9
 800b340:	4620      	mov	r0, r4
 800b342:	f000 f96d 	bl	800b620 <_Bfree>
 800b346:	4631      	mov	r1, r6
 800b348:	4620      	mov	r0, r4
 800b34a:	f000 f969 	bl	800b620 <_Bfree>
 800b34e:	e6a8      	b.n	800b0a2 <_dtoa_r+0x67a>
 800b350:	2700      	movs	r7, #0
 800b352:	463e      	mov	r6, r7
 800b354:	e7e1      	b.n	800b31a <_dtoa_r+0x8f2>
 800b356:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b35a:	463e      	mov	r6, r7
 800b35c:	e5a9      	b.n	800aeb2 <_dtoa_r+0x48a>
 800b35e:	bf00      	nop
 800b360:	40240000 	.word	0x40240000
 800b364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b366:	f8cd 9008 	str.w	r9, [sp, #8]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	f000 80fa 	beq.w	800b564 <_dtoa_r+0xb3c>
 800b370:	2d00      	cmp	r5, #0
 800b372:	dd05      	ble.n	800b380 <_dtoa_r+0x958>
 800b374:	4631      	mov	r1, r6
 800b376:	462a      	mov	r2, r5
 800b378:	4620      	mov	r0, r4
 800b37a:	f000 fadf 	bl	800b93c <__lshift>
 800b37e:	4606      	mov	r6, r0
 800b380:	9b07      	ldr	r3, [sp, #28]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d04c      	beq.n	800b420 <_dtoa_r+0x9f8>
 800b386:	6871      	ldr	r1, [r6, #4]
 800b388:	4620      	mov	r0, r4
 800b38a:	f000 f915 	bl	800b5b8 <_Balloc>
 800b38e:	6932      	ldr	r2, [r6, #16]
 800b390:	3202      	adds	r2, #2
 800b392:	4605      	mov	r5, r0
 800b394:	0092      	lsls	r2, r2, #2
 800b396:	f106 010c 	add.w	r1, r6, #12
 800b39a:	300c      	adds	r0, #12
 800b39c:	f7fe fd5c 	bl	8009e58 <memcpy>
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f000 fac9 	bl	800b93c <__lshift>
 800b3aa:	9b00      	ldr	r3, [sp, #0]
 800b3ac:	f8cd b014 	str.w	fp, [sp, #20]
 800b3b0:	f003 0301 	and.w	r3, r3, #1
 800b3b4:	46b1      	mov	r9, r6
 800b3b6:	9307      	str	r3, [sp, #28]
 800b3b8:	4606      	mov	r6, r0
 800b3ba:	4639      	mov	r1, r7
 800b3bc:	9804      	ldr	r0, [sp, #16]
 800b3be:	f7ff faa7 	bl	800a910 <quorem>
 800b3c2:	4649      	mov	r1, r9
 800b3c4:	4605      	mov	r5, r0
 800b3c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b3ca:	9804      	ldr	r0, [sp, #16]
 800b3cc:	f000 fb0a 	bl	800b9e4 <__mcmp>
 800b3d0:	4632      	mov	r2, r6
 800b3d2:	9000      	str	r0, [sp, #0]
 800b3d4:	4639      	mov	r1, r7
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f000 fb1e 	bl	800ba18 <__mdiff>
 800b3dc:	68c3      	ldr	r3, [r0, #12]
 800b3de:	4602      	mov	r2, r0
 800b3e0:	bb03      	cbnz	r3, 800b424 <_dtoa_r+0x9fc>
 800b3e2:	4601      	mov	r1, r0
 800b3e4:	9008      	str	r0, [sp, #32]
 800b3e6:	9804      	ldr	r0, [sp, #16]
 800b3e8:	f000 fafc 	bl	800b9e4 <__mcmp>
 800b3ec:	9a08      	ldr	r2, [sp, #32]
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	4611      	mov	r1, r2
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	9308      	str	r3, [sp, #32]
 800b3f6:	f000 f913 	bl	800b620 <_Bfree>
 800b3fa:	9b08      	ldr	r3, [sp, #32]
 800b3fc:	b9a3      	cbnz	r3, 800b428 <_dtoa_r+0xa00>
 800b3fe:	9a06      	ldr	r2, [sp, #24]
 800b400:	b992      	cbnz	r2, 800b428 <_dtoa_r+0xa00>
 800b402:	9a07      	ldr	r2, [sp, #28]
 800b404:	b982      	cbnz	r2, 800b428 <_dtoa_r+0xa00>
 800b406:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b40a:	d029      	beq.n	800b460 <_dtoa_r+0xa38>
 800b40c:	9b00      	ldr	r3, [sp, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	dd01      	ble.n	800b416 <_dtoa_r+0x9ee>
 800b412:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b416:	9b05      	ldr	r3, [sp, #20]
 800b418:	1c5d      	adds	r5, r3, #1
 800b41a:	f883 8000 	strb.w	r8, [r3]
 800b41e:	e782      	b.n	800b326 <_dtoa_r+0x8fe>
 800b420:	4630      	mov	r0, r6
 800b422:	e7c2      	b.n	800b3aa <_dtoa_r+0x982>
 800b424:	2301      	movs	r3, #1
 800b426:	e7e3      	b.n	800b3f0 <_dtoa_r+0x9c8>
 800b428:	9a00      	ldr	r2, [sp, #0]
 800b42a:	2a00      	cmp	r2, #0
 800b42c:	db04      	blt.n	800b438 <_dtoa_r+0xa10>
 800b42e:	d125      	bne.n	800b47c <_dtoa_r+0xa54>
 800b430:	9a06      	ldr	r2, [sp, #24]
 800b432:	bb1a      	cbnz	r2, 800b47c <_dtoa_r+0xa54>
 800b434:	9a07      	ldr	r2, [sp, #28]
 800b436:	bb0a      	cbnz	r2, 800b47c <_dtoa_r+0xa54>
 800b438:	2b00      	cmp	r3, #0
 800b43a:	ddec      	ble.n	800b416 <_dtoa_r+0x9ee>
 800b43c:	2201      	movs	r2, #1
 800b43e:	9904      	ldr	r1, [sp, #16]
 800b440:	4620      	mov	r0, r4
 800b442:	f000 fa7b 	bl	800b93c <__lshift>
 800b446:	4639      	mov	r1, r7
 800b448:	9004      	str	r0, [sp, #16]
 800b44a:	f000 facb 	bl	800b9e4 <__mcmp>
 800b44e:	2800      	cmp	r0, #0
 800b450:	dc03      	bgt.n	800b45a <_dtoa_r+0xa32>
 800b452:	d1e0      	bne.n	800b416 <_dtoa_r+0x9ee>
 800b454:	f018 0f01 	tst.w	r8, #1
 800b458:	d0dd      	beq.n	800b416 <_dtoa_r+0x9ee>
 800b45a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b45e:	d1d8      	bne.n	800b412 <_dtoa_r+0x9ea>
 800b460:	9b05      	ldr	r3, [sp, #20]
 800b462:	9a05      	ldr	r2, [sp, #20]
 800b464:	1c5d      	adds	r5, r3, #1
 800b466:	2339      	movs	r3, #57	; 0x39
 800b468:	7013      	strb	r3, [r2, #0]
 800b46a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b46e:	2b39      	cmp	r3, #57	; 0x39
 800b470:	f105 32ff 	add.w	r2, r5, #4294967295
 800b474:	d04f      	beq.n	800b516 <_dtoa_r+0xaee>
 800b476:	3301      	adds	r3, #1
 800b478:	7013      	strb	r3, [r2, #0]
 800b47a:	e754      	b.n	800b326 <_dtoa_r+0x8fe>
 800b47c:	9a05      	ldr	r2, [sp, #20]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	f102 0501 	add.w	r5, r2, #1
 800b484:	dd06      	ble.n	800b494 <_dtoa_r+0xa6c>
 800b486:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b48a:	d0e9      	beq.n	800b460 <_dtoa_r+0xa38>
 800b48c:	f108 0801 	add.w	r8, r8, #1
 800b490:	9b05      	ldr	r3, [sp, #20]
 800b492:	e7c2      	b.n	800b41a <_dtoa_r+0x9f2>
 800b494:	9a02      	ldr	r2, [sp, #8]
 800b496:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b49a:	eba5 030b 	sub.w	r3, r5, fp
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d021      	beq.n	800b4e6 <_dtoa_r+0xabe>
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	220a      	movs	r2, #10
 800b4a6:	9904      	ldr	r1, [sp, #16]
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	f000 f8d0 	bl	800b64e <__multadd>
 800b4ae:	45b1      	cmp	r9, r6
 800b4b0:	9004      	str	r0, [sp, #16]
 800b4b2:	f04f 0300 	mov.w	r3, #0
 800b4b6:	f04f 020a 	mov.w	r2, #10
 800b4ba:	4649      	mov	r1, r9
 800b4bc:	4620      	mov	r0, r4
 800b4be:	d105      	bne.n	800b4cc <_dtoa_r+0xaa4>
 800b4c0:	f000 f8c5 	bl	800b64e <__multadd>
 800b4c4:	4681      	mov	r9, r0
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	9505      	str	r5, [sp, #20]
 800b4ca:	e776      	b.n	800b3ba <_dtoa_r+0x992>
 800b4cc:	f000 f8bf 	bl	800b64e <__multadd>
 800b4d0:	4631      	mov	r1, r6
 800b4d2:	4681      	mov	r9, r0
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	220a      	movs	r2, #10
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f000 f8b8 	bl	800b64e <__multadd>
 800b4de:	4606      	mov	r6, r0
 800b4e0:	e7f2      	b.n	800b4c8 <_dtoa_r+0xaa0>
 800b4e2:	f04f 0900 	mov.w	r9, #0
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	9904      	ldr	r1, [sp, #16]
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f000 fa26 	bl	800b93c <__lshift>
 800b4f0:	4639      	mov	r1, r7
 800b4f2:	9004      	str	r0, [sp, #16]
 800b4f4:	f000 fa76 	bl	800b9e4 <__mcmp>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	dcb6      	bgt.n	800b46a <_dtoa_r+0xa42>
 800b4fc:	d102      	bne.n	800b504 <_dtoa_r+0xadc>
 800b4fe:	f018 0f01 	tst.w	r8, #1
 800b502:	d1b2      	bne.n	800b46a <_dtoa_r+0xa42>
 800b504:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b508:	2b30      	cmp	r3, #48	; 0x30
 800b50a:	f105 32ff 	add.w	r2, r5, #4294967295
 800b50e:	f47f af0a 	bne.w	800b326 <_dtoa_r+0x8fe>
 800b512:	4615      	mov	r5, r2
 800b514:	e7f6      	b.n	800b504 <_dtoa_r+0xadc>
 800b516:	4593      	cmp	fp, r2
 800b518:	d105      	bne.n	800b526 <_dtoa_r+0xafe>
 800b51a:	2331      	movs	r3, #49	; 0x31
 800b51c:	f10a 0a01 	add.w	sl, sl, #1
 800b520:	f88b 3000 	strb.w	r3, [fp]
 800b524:	e6ff      	b.n	800b326 <_dtoa_r+0x8fe>
 800b526:	4615      	mov	r5, r2
 800b528:	e79f      	b.n	800b46a <_dtoa_r+0xa42>
 800b52a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b590 <_dtoa_r+0xb68>
 800b52e:	e007      	b.n	800b540 <_dtoa_r+0xb18>
 800b530:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b532:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b594 <_dtoa_r+0xb6c>
 800b536:	b11b      	cbz	r3, 800b540 <_dtoa_r+0xb18>
 800b538:	f10b 0308 	add.w	r3, fp, #8
 800b53c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b53e:	6013      	str	r3, [r2, #0]
 800b540:	4658      	mov	r0, fp
 800b542:	b017      	add	sp, #92	; 0x5c
 800b544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b548:	9b06      	ldr	r3, [sp, #24]
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	f77f ae35 	ble.w	800b1ba <_dtoa_r+0x792>
 800b550:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b552:	9307      	str	r3, [sp, #28]
 800b554:	e649      	b.n	800b1ea <_dtoa_r+0x7c2>
 800b556:	9b02      	ldr	r3, [sp, #8]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	dc03      	bgt.n	800b564 <_dtoa_r+0xb3c>
 800b55c:	9b06      	ldr	r3, [sp, #24]
 800b55e:	2b02      	cmp	r3, #2
 800b560:	f73f aecc 	bgt.w	800b2fc <_dtoa_r+0x8d4>
 800b564:	465d      	mov	r5, fp
 800b566:	4639      	mov	r1, r7
 800b568:	9804      	ldr	r0, [sp, #16]
 800b56a:	f7ff f9d1 	bl	800a910 <quorem>
 800b56e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b572:	f805 8b01 	strb.w	r8, [r5], #1
 800b576:	9a02      	ldr	r2, [sp, #8]
 800b578:	eba5 030b 	sub.w	r3, r5, fp
 800b57c:	429a      	cmp	r2, r3
 800b57e:	ddb0      	ble.n	800b4e2 <_dtoa_r+0xaba>
 800b580:	2300      	movs	r3, #0
 800b582:	220a      	movs	r2, #10
 800b584:	9904      	ldr	r1, [sp, #16]
 800b586:	4620      	mov	r0, r4
 800b588:	f000 f861 	bl	800b64e <__multadd>
 800b58c:	9004      	str	r0, [sp, #16]
 800b58e:	e7ea      	b.n	800b566 <_dtoa_r+0xb3e>
 800b590:	0800c048 	.word	0x0800c048
 800b594:	0800c06c 	.word	0x0800c06c

0800b598 <_localeconv_r>:
 800b598:	4b04      	ldr	r3, [pc, #16]	; (800b5ac <_localeconv_r+0x14>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	6a18      	ldr	r0, [r3, #32]
 800b59e:	4b04      	ldr	r3, [pc, #16]	; (800b5b0 <_localeconv_r+0x18>)
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	bf08      	it	eq
 800b5a4:	4618      	moveq	r0, r3
 800b5a6:	30f0      	adds	r0, #240	; 0xf0
 800b5a8:	4770      	bx	lr
 800b5aa:	bf00      	nop
 800b5ac:	20000188 	.word	0x20000188
 800b5b0:	200001ec 	.word	0x200001ec

0800b5b4 <__malloc_lock>:
 800b5b4:	4770      	bx	lr

0800b5b6 <__malloc_unlock>:
 800b5b6:	4770      	bx	lr

0800b5b8 <_Balloc>:
 800b5b8:	b570      	push	{r4, r5, r6, lr}
 800b5ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b5bc:	4604      	mov	r4, r0
 800b5be:	460e      	mov	r6, r1
 800b5c0:	b93d      	cbnz	r5, 800b5d2 <_Balloc+0x1a>
 800b5c2:	2010      	movs	r0, #16
 800b5c4:	f7fe fc38 	bl	8009e38 <malloc>
 800b5c8:	6260      	str	r0, [r4, #36]	; 0x24
 800b5ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b5ce:	6005      	str	r5, [r0, #0]
 800b5d0:	60c5      	str	r5, [r0, #12]
 800b5d2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b5d4:	68eb      	ldr	r3, [r5, #12]
 800b5d6:	b183      	cbz	r3, 800b5fa <_Balloc+0x42>
 800b5d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b5e0:	b9b8      	cbnz	r0, 800b612 <_Balloc+0x5a>
 800b5e2:	2101      	movs	r1, #1
 800b5e4:	fa01 f506 	lsl.w	r5, r1, r6
 800b5e8:	1d6a      	adds	r2, r5, #5
 800b5ea:	0092      	lsls	r2, r2, #2
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	f000 fabf 	bl	800bb70 <_calloc_r>
 800b5f2:	b160      	cbz	r0, 800b60e <_Balloc+0x56>
 800b5f4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b5f8:	e00e      	b.n	800b618 <_Balloc+0x60>
 800b5fa:	2221      	movs	r2, #33	; 0x21
 800b5fc:	2104      	movs	r1, #4
 800b5fe:	4620      	mov	r0, r4
 800b600:	f000 fab6 	bl	800bb70 <_calloc_r>
 800b604:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b606:	60e8      	str	r0, [r5, #12]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d1e4      	bne.n	800b5d8 <_Balloc+0x20>
 800b60e:	2000      	movs	r0, #0
 800b610:	bd70      	pop	{r4, r5, r6, pc}
 800b612:	6802      	ldr	r2, [r0, #0]
 800b614:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b618:	2300      	movs	r3, #0
 800b61a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b61e:	e7f7      	b.n	800b610 <_Balloc+0x58>

0800b620 <_Bfree>:
 800b620:	b570      	push	{r4, r5, r6, lr}
 800b622:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b624:	4606      	mov	r6, r0
 800b626:	460d      	mov	r5, r1
 800b628:	b93c      	cbnz	r4, 800b63a <_Bfree+0x1a>
 800b62a:	2010      	movs	r0, #16
 800b62c:	f7fe fc04 	bl	8009e38 <malloc>
 800b630:	6270      	str	r0, [r6, #36]	; 0x24
 800b632:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b636:	6004      	str	r4, [r0, #0]
 800b638:	60c4      	str	r4, [r0, #12]
 800b63a:	b13d      	cbz	r5, 800b64c <_Bfree+0x2c>
 800b63c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b63e:	686a      	ldr	r2, [r5, #4]
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b646:	6029      	str	r1, [r5, #0]
 800b648:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b64c:	bd70      	pop	{r4, r5, r6, pc}

0800b64e <__multadd>:
 800b64e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b652:	690d      	ldr	r5, [r1, #16]
 800b654:	461f      	mov	r7, r3
 800b656:	4606      	mov	r6, r0
 800b658:	460c      	mov	r4, r1
 800b65a:	f101 0c14 	add.w	ip, r1, #20
 800b65e:	2300      	movs	r3, #0
 800b660:	f8dc 0000 	ldr.w	r0, [ip]
 800b664:	b281      	uxth	r1, r0
 800b666:	fb02 7101 	mla	r1, r2, r1, r7
 800b66a:	0c0f      	lsrs	r7, r1, #16
 800b66c:	0c00      	lsrs	r0, r0, #16
 800b66e:	fb02 7000 	mla	r0, r2, r0, r7
 800b672:	b289      	uxth	r1, r1
 800b674:	3301      	adds	r3, #1
 800b676:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b67a:	429d      	cmp	r5, r3
 800b67c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b680:	f84c 1b04 	str.w	r1, [ip], #4
 800b684:	dcec      	bgt.n	800b660 <__multadd+0x12>
 800b686:	b1d7      	cbz	r7, 800b6be <__multadd+0x70>
 800b688:	68a3      	ldr	r3, [r4, #8]
 800b68a:	42ab      	cmp	r3, r5
 800b68c:	dc12      	bgt.n	800b6b4 <__multadd+0x66>
 800b68e:	6861      	ldr	r1, [r4, #4]
 800b690:	4630      	mov	r0, r6
 800b692:	3101      	adds	r1, #1
 800b694:	f7ff ff90 	bl	800b5b8 <_Balloc>
 800b698:	6922      	ldr	r2, [r4, #16]
 800b69a:	3202      	adds	r2, #2
 800b69c:	f104 010c 	add.w	r1, r4, #12
 800b6a0:	4680      	mov	r8, r0
 800b6a2:	0092      	lsls	r2, r2, #2
 800b6a4:	300c      	adds	r0, #12
 800b6a6:	f7fe fbd7 	bl	8009e58 <memcpy>
 800b6aa:	4621      	mov	r1, r4
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	f7ff ffb7 	bl	800b620 <_Bfree>
 800b6b2:	4644      	mov	r4, r8
 800b6b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b6b8:	3501      	adds	r5, #1
 800b6ba:	615f      	str	r7, [r3, #20]
 800b6bc:	6125      	str	r5, [r4, #16]
 800b6be:	4620      	mov	r0, r4
 800b6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b6c4 <__hi0bits>:
 800b6c4:	0c02      	lsrs	r2, r0, #16
 800b6c6:	0412      	lsls	r2, r2, #16
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	b9b2      	cbnz	r2, 800b6fa <__hi0bits+0x36>
 800b6cc:	0403      	lsls	r3, r0, #16
 800b6ce:	2010      	movs	r0, #16
 800b6d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b6d4:	bf04      	itt	eq
 800b6d6:	021b      	lsleq	r3, r3, #8
 800b6d8:	3008      	addeq	r0, #8
 800b6da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b6de:	bf04      	itt	eq
 800b6e0:	011b      	lsleq	r3, r3, #4
 800b6e2:	3004      	addeq	r0, #4
 800b6e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b6e8:	bf04      	itt	eq
 800b6ea:	009b      	lsleq	r3, r3, #2
 800b6ec:	3002      	addeq	r0, #2
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	db06      	blt.n	800b700 <__hi0bits+0x3c>
 800b6f2:	005b      	lsls	r3, r3, #1
 800b6f4:	d503      	bpl.n	800b6fe <__hi0bits+0x3a>
 800b6f6:	3001      	adds	r0, #1
 800b6f8:	4770      	bx	lr
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	e7e8      	b.n	800b6d0 <__hi0bits+0xc>
 800b6fe:	2020      	movs	r0, #32
 800b700:	4770      	bx	lr

0800b702 <__lo0bits>:
 800b702:	6803      	ldr	r3, [r0, #0]
 800b704:	f013 0207 	ands.w	r2, r3, #7
 800b708:	4601      	mov	r1, r0
 800b70a:	d00b      	beq.n	800b724 <__lo0bits+0x22>
 800b70c:	07da      	lsls	r2, r3, #31
 800b70e:	d423      	bmi.n	800b758 <__lo0bits+0x56>
 800b710:	0798      	lsls	r0, r3, #30
 800b712:	bf49      	itett	mi
 800b714:	085b      	lsrmi	r3, r3, #1
 800b716:	089b      	lsrpl	r3, r3, #2
 800b718:	2001      	movmi	r0, #1
 800b71a:	600b      	strmi	r3, [r1, #0]
 800b71c:	bf5c      	itt	pl
 800b71e:	600b      	strpl	r3, [r1, #0]
 800b720:	2002      	movpl	r0, #2
 800b722:	4770      	bx	lr
 800b724:	b298      	uxth	r0, r3
 800b726:	b9a8      	cbnz	r0, 800b754 <__lo0bits+0x52>
 800b728:	0c1b      	lsrs	r3, r3, #16
 800b72a:	2010      	movs	r0, #16
 800b72c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b730:	bf04      	itt	eq
 800b732:	0a1b      	lsreq	r3, r3, #8
 800b734:	3008      	addeq	r0, #8
 800b736:	071a      	lsls	r2, r3, #28
 800b738:	bf04      	itt	eq
 800b73a:	091b      	lsreq	r3, r3, #4
 800b73c:	3004      	addeq	r0, #4
 800b73e:	079a      	lsls	r2, r3, #30
 800b740:	bf04      	itt	eq
 800b742:	089b      	lsreq	r3, r3, #2
 800b744:	3002      	addeq	r0, #2
 800b746:	07da      	lsls	r2, r3, #31
 800b748:	d402      	bmi.n	800b750 <__lo0bits+0x4e>
 800b74a:	085b      	lsrs	r3, r3, #1
 800b74c:	d006      	beq.n	800b75c <__lo0bits+0x5a>
 800b74e:	3001      	adds	r0, #1
 800b750:	600b      	str	r3, [r1, #0]
 800b752:	4770      	bx	lr
 800b754:	4610      	mov	r0, r2
 800b756:	e7e9      	b.n	800b72c <__lo0bits+0x2a>
 800b758:	2000      	movs	r0, #0
 800b75a:	4770      	bx	lr
 800b75c:	2020      	movs	r0, #32
 800b75e:	4770      	bx	lr

0800b760 <__i2b>:
 800b760:	b510      	push	{r4, lr}
 800b762:	460c      	mov	r4, r1
 800b764:	2101      	movs	r1, #1
 800b766:	f7ff ff27 	bl	800b5b8 <_Balloc>
 800b76a:	2201      	movs	r2, #1
 800b76c:	6144      	str	r4, [r0, #20]
 800b76e:	6102      	str	r2, [r0, #16]
 800b770:	bd10      	pop	{r4, pc}

0800b772 <__multiply>:
 800b772:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b776:	4614      	mov	r4, r2
 800b778:	690a      	ldr	r2, [r1, #16]
 800b77a:	6923      	ldr	r3, [r4, #16]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	bfb8      	it	lt
 800b780:	460b      	movlt	r3, r1
 800b782:	4688      	mov	r8, r1
 800b784:	bfbc      	itt	lt
 800b786:	46a0      	movlt	r8, r4
 800b788:	461c      	movlt	r4, r3
 800b78a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b78e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b792:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b796:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b79a:	eb07 0609 	add.w	r6, r7, r9
 800b79e:	42b3      	cmp	r3, r6
 800b7a0:	bfb8      	it	lt
 800b7a2:	3101      	addlt	r1, #1
 800b7a4:	f7ff ff08 	bl	800b5b8 <_Balloc>
 800b7a8:	f100 0514 	add.w	r5, r0, #20
 800b7ac:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b7b0:	462b      	mov	r3, r5
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	4573      	cmp	r3, lr
 800b7b6:	d316      	bcc.n	800b7e6 <__multiply+0x74>
 800b7b8:	f104 0214 	add.w	r2, r4, #20
 800b7bc:	f108 0114 	add.w	r1, r8, #20
 800b7c0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b7c4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b7c8:	9300      	str	r3, [sp, #0]
 800b7ca:	9b00      	ldr	r3, [sp, #0]
 800b7cc:	9201      	str	r2, [sp, #4]
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d80c      	bhi.n	800b7ec <__multiply+0x7a>
 800b7d2:	2e00      	cmp	r6, #0
 800b7d4:	dd03      	ble.n	800b7de <__multiply+0x6c>
 800b7d6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d05d      	beq.n	800b89a <__multiply+0x128>
 800b7de:	6106      	str	r6, [r0, #16]
 800b7e0:	b003      	add	sp, #12
 800b7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7e6:	f843 2b04 	str.w	r2, [r3], #4
 800b7ea:	e7e3      	b.n	800b7b4 <__multiply+0x42>
 800b7ec:	f8b2 b000 	ldrh.w	fp, [r2]
 800b7f0:	f1bb 0f00 	cmp.w	fp, #0
 800b7f4:	d023      	beq.n	800b83e <__multiply+0xcc>
 800b7f6:	4689      	mov	r9, r1
 800b7f8:	46ac      	mov	ip, r5
 800b7fa:	f04f 0800 	mov.w	r8, #0
 800b7fe:	f859 4b04 	ldr.w	r4, [r9], #4
 800b802:	f8dc a000 	ldr.w	sl, [ip]
 800b806:	b2a3      	uxth	r3, r4
 800b808:	fa1f fa8a 	uxth.w	sl, sl
 800b80c:	fb0b a303 	mla	r3, fp, r3, sl
 800b810:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b814:	f8dc 4000 	ldr.w	r4, [ip]
 800b818:	4443      	add	r3, r8
 800b81a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b81e:	fb0b 840a 	mla	r4, fp, sl, r8
 800b822:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b826:	46e2      	mov	sl, ip
 800b828:	b29b      	uxth	r3, r3
 800b82a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b82e:	454f      	cmp	r7, r9
 800b830:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b834:	f84a 3b04 	str.w	r3, [sl], #4
 800b838:	d82b      	bhi.n	800b892 <__multiply+0x120>
 800b83a:	f8cc 8004 	str.w	r8, [ip, #4]
 800b83e:	9b01      	ldr	r3, [sp, #4]
 800b840:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b844:	3204      	adds	r2, #4
 800b846:	f1ba 0f00 	cmp.w	sl, #0
 800b84a:	d020      	beq.n	800b88e <__multiply+0x11c>
 800b84c:	682b      	ldr	r3, [r5, #0]
 800b84e:	4689      	mov	r9, r1
 800b850:	46a8      	mov	r8, r5
 800b852:	f04f 0b00 	mov.w	fp, #0
 800b856:	f8b9 c000 	ldrh.w	ip, [r9]
 800b85a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b85e:	fb0a 440c 	mla	r4, sl, ip, r4
 800b862:	445c      	add	r4, fp
 800b864:	46c4      	mov	ip, r8
 800b866:	b29b      	uxth	r3, r3
 800b868:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b86c:	f84c 3b04 	str.w	r3, [ip], #4
 800b870:	f859 3b04 	ldr.w	r3, [r9], #4
 800b874:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b878:	0c1b      	lsrs	r3, r3, #16
 800b87a:	fb0a b303 	mla	r3, sl, r3, fp
 800b87e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b882:	454f      	cmp	r7, r9
 800b884:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b888:	d805      	bhi.n	800b896 <__multiply+0x124>
 800b88a:	f8c8 3004 	str.w	r3, [r8, #4]
 800b88e:	3504      	adds	r5, #4
 800b890:	e79b      	b.n	800b7ca <__multiply+0x58>
 800b892:	46d4      	mov	ip, sl
 800b894:	e7b3      	b.n	800b7fe <__multiply+0x8c>
 800b896:	46e0      	mov	r8, ip
 800b898:	e7dd      	b.n	800b856 <__multiply+0xe4>
 800b89a:	3e01      	subs	r6, #1
 800b89c:	e799      	b.n	800b7d2 <__multiply+0x60>
	...

0800b8a0 <__pow5mult>:
 800b8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8a4:	4615      	mov	r5, r2
 800b8a6:	f012 0203 	ands.w	r2, r2, #3
 800b8aa:	4606      	mov	r6, r0
 800b8ac:	460f      	mov	r7, r1
 800b8ae:	d007      	beq.n	800b8c0 <__pow5mult+0x20>
 800b8b0:	3a01      	subs	r2, #1
 800b8b2:	4c21      	ldr	r4, [pc, #132]	; (800b938 <__pow5mult+0x98>)
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b8ba:	f7ff fec8 	bl	800b64e <__multadd>
 800b8be:	4607      	mov	r7, r0
 800b8c0:	10ad      	asrs	r5, r5, #2
 800b8c2:	d035      	beq.n	800b930 <__pow5mult+0x90>
 800b8c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b8c6:	b93c      	cbnz	r4, 800b8d8 <__pow5mult+0x38>
 800b8c8:	2010      	movs	r0, #16
 800b8ca:	f7fe fab5 	bl	8009e38 <malloc>
 800b8ce:	6270      	str	r0, [r6, #36]	; 0x24
 800b8d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8d4:	6004      	str	r4, [r0, #0]
 800b8d6:	60c4      	str	r4, [r0, #12]
 800b8d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b8dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b8e0:	b94c      	cbnz	r4, 800b8f6 <__pow5mult+0x56>
 800b8e2:	f240 2171 	movw	r1, #625	; 0x271
 800b8e6:	4630      	mov	r0, r6
 800b8e8:	f7ff ff3a 	bl	800b760 <__i2b>
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	6003      	str	r3, [r0, #0]
 800b8f6:	f04f 0800 	mov.w	r8, #0
 800b8fa:	07eb      	lsls	r3, r5, #31
 800b8fc:	d50a      	bpl.n	800b914 <__pow5mult+0x74>
 800b8fe:	4639      	mov	r1, r7
 800b900:	4622      	mov	r2, r4
 800b902:	4630      	mov	r0, r6
 800b904:	f7ff ff35 	bl	800b772 <__multiply>
 800b908:	4639      	mov	r1, r7
 800b90a:	4681      	mov	r9, r0
 800b90c:	4630      	mov	r0, r6
 800b90e:	f7ff fe87 	bl	800b620 <_Bfree>
 800b912:	464f      	mov	r7, r9
 800b914:	106d      	asrs	r5, r5, #1
 800b916:	d00b      	beq.n	800b930 <__pow5mult+0x90>
 800b918:	6820      	ldr	r0, [r4, #0]
 800b91a:	b938      	cbnz	r0, 800b92c <__pow5mult+0x8c>
 800b91c:	4622      	mov	r2, r4
 800b91e:	4621      	mov	r1, r4
 800b920:	4630      	mov	r0, r6
 800b922:	f7ff ff26 	bl	800b772 <__multiply>
 800b926:	6020      	str	r0, [r4, #0]
 800b928:	f8c0 8000 	str.w	r8, [r0]
 800b92c:	4604      	mov	r4, r0
 800b92e:	e7e4      	b.n	800b8fa <__pow5mult+0x5a>
 800b930:	4638      	mov	r0, r7
 800b932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b936:	bf00      	nop
 800b938:	0800c1d0 	.word	0x0800c1d0

0800b93c <__lshift>:
 800b93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b940:	460c      	mov	r4, r1
 800b942:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b946:	6923      	ldr	r3, [r4, #16]
 800b948:	6849      	ldr	r1, [r1, #4]
 800b94a:	eb0a 0903 	add.w	r9, sl, r3
 800b94e:	68a3      	ldr	r3, [r4, #8]
 800b950:	4607      	mov	r7, r0
 800b952:	4616      	mov	r6, r2
 800b954:	f109 0501 	add.w	r5, r9, #1
 800b958:	42ab      	cmp	r3, r5
 800b95a:	db32      	blt.n	800b9c2 <__lshift+0x86>
 800b95c:	4638      	mov	r0, r7
 800b95e:	f7ff fe2b 	bl	800b5b8 <_Balloc>
 800b962:	2300      	movs	r3, #0
 800b964:	4680      	mov	r8, r0
 800b966:	f100 0114 	add.w	r1, r0, #20
 800b96a:	461a      	mov	r2, r3
 800b96c:	4553      	cmp	r3, sl
 800b96e:	db2b      	blt.n	800b9c8 <__lshift+0x8c>
 800b970:	6920      	ldr	r0, [r4, #16]
 800b972:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b976:	f104 0314 	add.w	r3, r4, #20
 800b97a:	f016 021f 	ands.w	r2, r6, #31
 800b97e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b982:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b986:	d025      	beq.n	800b9d4 <__lshift+0x98>
 800b988:	f1c2 0e20 	rsb	lr, r2, #32
 800b98c:	2000      	movs	r0, #0
 800b98e:	681e      	ldr	r6, [r3, #0]
 800b990:	468a      	mov	sl, r1
 800b992:	4096      	lsls	r6, r2
 800b994:	4330      	orrs	r0, r6
 800b996:	f84a 0b04 	str.w	r0, [sl], #4
 800b99a:	f853 0b04 	ldr.w	r0, [r3], #4
 800b99e:	459c      	cmp	ip, r3
 800b9a0:	fa20 f00e 	lsr.w	r0, r0, lr
 800b9a4:	d814      	bhi.n	800b9d0 <__lshift+0x94>
 800b9a6:	6048      	str	r0, [r1, #4]
 800b9a8:	b108      	cbz	r0, 800b9ae <__lshift+0x72>
 800b9aa:	f109 0502 	add.w	r5, r9, #2
 800b9ae:	3d01      	subs	r5, #1
 800b9b0:	4638      	mov	r0, r7
 800b9b2:	f8c8 5010 	str.w	r5, [r8, #16]
 800b9b6:	4621      	mov	r1, r4
 800b9b8:	f7ff fe32 	bl	800b620 <_Bfree>
 800b9bc:	4640      	mov	r0, r8
 800b9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9c2:	3101      	adds	r1, #1
 800b9c4:	005b      	lsls	r3, r3, #1
 800b9c6:	e7c7      	b.n	800b958 <__lshift+0x1c>
 800b9c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	e7cd      	b.n	800b96c <__lshift+0x30>
 800b9d0:	4651      	mov	r1, sl
 800b9d2:	e7dc      	b.n	800b98e <__lshift+0x52>
 800b9d4:	3904      	subs	r1, #4
 800b9d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9da:	f841 2f04 	str.w	r2, [r1, #4]!
 800b9de:	459c      	cmp	ip, r3
 800b9e0:	d8f9      	bhi.n	800b9d6 <__lshift+0x9a>
 800b9e2:	e7e4      	b.n	800b9ae <__lshift+0x72>

0800b9e4 <__mcmp>:
 800b9e4:	6903      	ldr	r3, [r0, #16]
 800b9e6:	690a      	ldr	r2, [r1, #16]
 800b9e8:	1a9b      	subs	r3, r3, r2
 800b9ea:	b530      	push	{r4, r5, lr}
 800b9ec:	d10c      	bne.n	800ba08 <__mcmp+0x24>
 800b9ee:	0092      	lsls	r2, r2, #2
 800b9f0:	3014      	adds	r0, #20
 800b9f2:	3114      	adds	r1, #20
 800b9f4:	1884      	adds	r4, r0, r2
 800b9f6:	4411      	add	r1, r2
 800b9f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b9fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ba00:	4295      	cmp	r5, r2
 800ba02:	d003      	beq.n	800ba0c <__mcmp+0x28>
 800ba04:	d305      	bcc.n	800ba12 <__mcmp+0x2e>
 800ba06:	2301      	movs	r3, #1
 800ba08:	4618      	mov	r0, r3
 800ba0a:	bd30      	pop	{r4, r5, pc}
 800ba0c:	42a0      	cmp	r0, r4
 800ba0e:	d3f3      	bcc.n	800b9f8 <__mcmp+0x14>
 800ba10:	e7fa      	b.n	800ba08 <__mcmp+0x24>
 800ba12:	f04f 33ff 	mov.w	r3, #4294967295
 800ba16:	e7f7      	b.n	800ba08 <__mcmp+0x24>

0800ba18 <__mdiff>:
 800ba18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba1c:	460d      	mov	r5, r1
 800ba1e:	4607      	mov	r7, r0
 800ba20:	4611      	mov	r1, r2
 800ba22:	4628      	mov	r0, r5
 800ba24:	4614      	mov	r4, r2
 800ba26:	f7ff ffdd 	bl	800b9e4 <__mcmp>
 800ba2a:	1e06      	subs	r6, r0, #0
 800ba2c:	d108      	bne.n	800ba40 <__mdiff+0x28>
 800ba2e:	4631      	mov	r1, r6
 800ba30:	4638      	mov	r0, r7
 800ba32:	f7ff fdc1 	bl	800b5b8 <_Balloc>
 800ba36:	2301      	movs	r3, #1
 800ba38:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ba3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba40:	bfa4      	itt	ge
 800ba42:	4623      	movge	r3, r4
 800ba44:	462c      	movge	r4, r5
 800ba46:	4638      	mov	r0, r7
 800ba48:	6861      	ldr	r1, [r4, #4]
 800ba4a:	bfa6      	itte	ge
 800ba4c:	461d      	movge	r5, r3
 800ba4e:	2600      	movge	r6, #0
 800ba50:	2601      	movlt	r6, #1
 800ba52:	f7ff fdb1 	bl	800b5b8 <_Balloc>
 800ba56:	692b      	ldr	r3, [r5, #16]
 800ba58:	60c6      	str	r6, [r0, #12]
 800ba5a:	6926      	ldr	r6, [r4, #16]
 800ba5c:	f105 0914 	add.w	r9, r5, #20
 800ba60:	f104 0214 	add.w	r2, r4, #20
 800ba64:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ba68:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ba6c:	f100 0514 	add.w	r5, r0, #20
 800ba70:	f04f 0e00 	mov.w	lr, #0
 800ba74:	f852 ab04 	ldr.w	sl, [r2], #4
 800ba78:	f859 4b04 	ldr.w	r4, [r9], #4
 800ba7c:	fa1e f18a 	uxtah	r1, lr, sl
 800ba80:	b2a3      	uxth	r3, r4
 800ba82:	1ac9      	subs	r1, r1, r3
 800ba84:	0c23      	lsrs	r3, r4, #16
 800ba86:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ba8a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ba8e:	b289      	uxth	r1, r1
 800ba90:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ba94:	45c8      	cmp	r8, r9
 800ba96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ba9a:	4694      	mov	ip, r2
 800ba9c:	f845 3b04 	str.w	r3, [r5], #4
 800baa0:	d8e8      	bhi.n	800ba74 <__mdiff+0x5c>
 800baa2:	45bc      	cmp	ip, r7
 800baa4:	d304      	bcc.n	800bab0 <__mdiff+0x98>
 800baa6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800baaa:	b183      	cbz	r3, 800bace <__mdiff+0xb6>
 800baac:	6106      	str	r6, [r0, #16]
 800baae:	e7c5      	b.n	800ba3c <__mdiff+0x24>
 800bab0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bab4:	fa1e f381 	uxtah	r3, lr, r1
 800bab8:	141a      	asrs	r2, r3, #16
 800baba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800babe:	b29b      	uxth	r3, r3
 800bac0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bac4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800bac8:	f845 3b04 	str.w	r3, [r5], #4
 800bacc:	e7e9      	b.n	800baa2 <__mdiff+0x8a>
 800bace:	3e01      	subs	r6, #1
 800bad0:	e7e9      	b.n	800baa6 <__mdiff+0x8e>

0800bad2 <__d2b>:
 800bad2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bad6:	460e      	mov	r6, r1
 800bad8:	2101      	movs	r1, #1
 800bada:	ec59 8b10 	vmov	r8, r9, d0
 800bade:	4615      	mov	r5, r2
 800bae0:	f7ff fd6a 	bl	800b5b8 <_Balloc>
 800bae4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bae8:	4607      	mov	r7, r0
 800baea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800baee:	bb34      	cbnz	r4, 800bb3e <__d2b+0x6c>
 800baf0:	9301      	str	r3, [sp, #4]
 800baf2:	f1b8 0300 	subs.w	r3, r8, #0
 800baf6:	d027      	beq.n	800bb48 <__d2b+0x76>
 800baf8:	a802      	add	r0, sp, #8
 800bafa:	f840 3d08 	str.w	r3, [r0, #-8]!
 800bafe:	f7ff fe00 	bl	800b702 <__lo0bits>
 800bb02:	9900      	ldr	r1, [sp, #0]
 800bb04:	b1f0      	cbz	r0, 800bb44 <__d2b+0x72>
 800bb06:	9a01      	ldr	r2, [sp, #4]
 800bb08:	f1c0 0320 	rsb	r3, r0, #32
 800bb0c:	fa02 f303 	lsl.w	r3, r2, r3
 800bb10:	430b      	orrs	r3, r1
 800bb12:	40c2      	lsrs	r2, r0
 800bb14:	617b      	str	r3, [r7, #20]
 800bb16:	9201      	str	r2, [sp, #4]
 800bb18:	9b01      	ldr	r3, [sp, #4]
 800bb1a:	61bb      	str	r3, [r7, #24]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	bf14      	ite	ne
 800bb20:	2102      	movne	r1, #2
 800bb22:	2101      	moveq	r1, #1
 800bb24:	6139      	str	r1, [r7, #16]
 800bb26:	b1c4      	cbz	r4, 800bb5a <__d2b+0x88>
 800bb28:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bb2c:	4404      	add	r4, r0
 800bb2e:	6034      	str	r4, [r6, #0]
 800bb30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bb34:	6028      	str	r0, [r5, #0]
 800bb36:	4638      	mov	r0, r7
 800bb38:	b003      	add	sp, #12
 800bb3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb42:	e7d5      	b.n	800baf0 <__d2b+0x1e>
 800bb44:	6179      	str	r1, [r7, #20]
 800bb46:	e7e7      	b.n	800bb18 <__d2b+0x46>
 800bb48:	a801      	add	r0, sp, #4
 800bb4a:	f7ff fdda 	bl	800b702 <__lo0bits>
 800bb4e:	9b01      	ldr	r3, [sp, #4]
 800bb50:	617b      	str	r3, [r7, #20]
 800bb52:	2101      	movs	r1, #1
 800bb54:	6139      	str	r1, [r7, #16]
 800bb56:	3020      	adds	r0, #32
 800bb58:	e7e5      	b.n	800bb26 <__d2b+0x54>
 800bb5a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bb5e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bb62:	6030      	str	r0, [r6, #0]
 800bb64:	6918      	ldr	r0, [r3, #16]
 800bb66:	f7ff fdad 	bl	800b6c4 <__hi0bits>
 800bb6a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bb6e:	e7e1      	b.n	800bb34 <__d2b+0x62>

0800bb70 <_calloc_r>:
 800bb70:	b538      	push	{r3, r4, r5, lr}
 800bb72:	fb02 f401 	mul.w	r4, r2, r1
 800bb76:	4621      	mov	r1, r4
 800bb78:	f7fe f9d0 	bl	8009f1c <_malloc_r>
 800bb7c:	4605      	mov	r5, r0
 800bb7e:	b118      	cbz	r0, 800bb88 <_calloc_r+0x18>
 800bb80:	4622      	mov	r2, r4
 800bb82:	2100      	movs	r1, #0
 800bb84:	f7fe f973 	bl	8009e6e <memset>
 800bb88:	4628      	mov	r0, r5
 800bb8a:	bd38      	pop	{r3, r4, r5, pc}

0800bb8c <__ssputs_r>:
 800bb8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb90:	688e      	ldr	r6, [r1, #8]
 800bb92:	429e      	cmp	r6, r3
 800bb94:	4682      	mov	sl, r0
 800bb96:	460c      	mov	r4, r1
 800bb98:	4690      	mov	r8, r2
 800bb9a:	4699      	mov	r9, r3
 800bb9c:	d837      	bhi.n	800bc0e <__ssputs_r+0x82>
 800bb9e:	898a      	ldrh	r2, [r1, #12]
 800bba0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bba4:	d031      	beq.n	800bc0a <__ssputs_r+0x7e>
 800bba6:	6825      	ldr	r5, [r4, #0]
 800bba8:	6909      	ldr	r1, [r1, #16]
 800bbaa:	1a6f      	subs	r7, r5, r1
 800bbac:	6965      	ldr	r5, [r4, #20]
 800bbae:	2302      	movs	r3, #2
 800bbb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbb4:	fb95 f5f3 	sdiv	r5, r5, r3
 800bbb8:	f109 0301 	add.w	r3, r9, #1
 800bbbc:	443b      	add	r3, r7
 800bbbe:	429d      	cmp	r5, r3
 800bbc0:	bf38      	it	cc
 800bbc2:	461d      	movcc	r5, r3
 800bbc4:	0553      	lsls	r3, r2, #21
 800bbc6:	d530      	bpl.n	800bc2a <__ssputs_r+0x9e>
 800bbc8:	4629      	mov	r1, r5
 800bbca:	f7fe f9a7 	bl	8009f1c <_malloc_r>
 800bbce:	4606      	mov	r6, r0
 800bbd0:	b950      	cbnz	r0, 800bbe8 <__ssputs_r+0x5c>
 800bbd2:	230c      	movs	r3, #12
 800bbd4:	f8ca 3000 	str.w	r3, [sl]
 800bbd8:	89a3      	ldrh	r3, [r4, #12]
 800bbda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbde:	81a3      	strh	r3, [r4, #12]
 800bbe0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbe8:	463a      	mov	r2, r7
 800bbea:	6921      	ldr	r1, [r4, #16]
 800bbec:	f7fe f934 	bl	8009e58 <memcpy>
 800bbf0:	89a3      	ldrh	r3, [r4, #12]
 800bbf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bbf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbfa:	81a3      	strh	r3, [r4, #12]
 800bbfc:	6126      	str	r6, [r4, #16]
 800bbfe:	6165      	str	r5, [r4, #20]
 800bc00:	443e      	add	r6, r7
 800bc02:	1bed      	subs	r5, r5, r7
 800bc04:	6026      	str	r6, [r4, #0]
 800bc06:	60a5      	str	r5, [r4, #8]
 800bc08:	464e      	mov	r6, r9
 800bc0a:	454e      	cmp	r6, r9
 800bc0c:	d900      	bls.n	800bc10 <__ssputs_r+0x84>
 800bc0e:	464e      	mov	r6, r9
 800bc10:	4632      	mov	r2, r6
 800bc12:	4641      	mov	r1, r8
 800bc14:	6820      	ldr	r0, [r4, #0]
 800bc16:	f000 f91d 	bl	800be54 <memmove>
 800bc1a:	68a3      	ldr	r3, [r4, #8]
 800bc1c:	1b9b      	subs	r3, r3, r6
 800bc1e:	60a3      	str	r3, [r4, #8]
 800bc20:	6823      	ldr	r3, [r4, #0]
 800bc22:	441e      	add	r6, r3
 800bc24:	6026      	str	r6, [r4, #0]
 800bc26:	2000      	movs	r0, #0
 800bc28:	e7dc      	b.n	800bbe4 <__ssputs_r+0x58>
 800bc2a:	462a      	mov	r2, r5
 800bc2c:	f000 f92b 	bl	800be86 <_realloc_r>
 800bc30:	4606      	mov	r6, r0
 800bc32:	2800      	cmp	r0, #0
 800bc34:	d1e2      	bne.n	800bbfc <__ssputs_r+0x70>
 800bc36:	6921      	ldr	r1, [r4, #16]
 800bc38:	4650      	mov	r0, sl
 800bc3a:	f7fe f921 	bl	8009e80 <_free_r>
 800bc3e:	e7c8      	b.n	800bbd2 <__ssputs_r+0x46>

0800bc40 <_svfiprintf_r>:
 800bc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc44:	461d      	mov	r5, r3
 800bc46:	898b      	ldrh	r3, [r1, #12]
 800bc48:	061f      	lsls	r7, r3, #24
 800bc4a:	b09d      	sub	sp, #116	; 0x74
 800bc4c:	4680      	mov	r8, r0
 800bc4e:	460c      	mov	r4, r1
 800bc50:	4616      	mov	r6, r2
 800bc52:	d50f      	bpl.n	800bc74 <_svfiprintf_r+0x34>
 800bc54:	690b      	ldr	r3, [r1, #16]
 800bc56:	b96b      	cbnz	r3, 800bc74 <_svfiprintf_r+0x34>
 800bc58:	2140      	movs	r1, #64	; 0x40
 800bc5a:	f7fe f95f 	bl	8009f1c <_malloc_r>
 800bc5e:	6020      	str	r0, [r4, #0]
 800bc60:	6120      	str	r0, [r4, #16]
 800bc62:	b928      	cbnz	r0, 800bc70 <_svfiprintf_r+0x30>
 800bc64:	230c      	movs	r3, #12
 800bc66:	f8c8 3000 	str.w	r3, [r8]
 800bc6a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc6e:	e0c8      	b.n	800be02 <_svfiprintf_r+0x1c2>
 800bc70:	2340      	movs	r3, #64	; 0x40
 800bc72:	6163      	str	r3, [r4, #20]
 800bc74:	2300      	movs	r3, #0
 800bc76:	9309      	str	r3, [sp, #36]	; 0x24
 800bc78:	2320      	movs	r3, #32
 800bc7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc7e:	2330      	movs	r3, #48	; 0x30
 800bc80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc84:	9503      	str	r5, [sp, #12]
 800bc86:	f04f 0b01 	mov.w	fp, #1
 800bc8a:	4637      	mov	r7, r6
 800bc8c:	463d      	mov	r5, r7
 800bc8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bc92:	b10b      	cbz	r3, 800bc98 <_svfiprintf_r+0x58>
 800bc94:	2b25      	cmp	r3, #37	; 0x25
 800bc96:	d13e      	bne.n	800bd16 <_svfiprintf_r+0xd6>
 800bc98:	ebb7 0a06 	subs.w	sl, r7, r6
 800bc9c:	d00b      	beq.n	800bcb6 <_svfiprintf_r+0x76>
 800bc9e:	4653      	mov	r3, sl
 800bca0:	4632      	mov	r2, r6
 800bca2:	4621      	mov	r1, r4
 800bca4:	4640      	mov	r0, r8
 800bca6:	f7ff ff71 	bl	800bb8c <__ssputs_r>
 800bcaa:	3001      	adds	r0, #1
 800bcac:	f000 80a4 	beq.w	800bdf8 <_svfiprintf_r+0x1b8>
 800bcb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcb2:	4453      	add	r3, sl
 800bcb4:	9309      	str	r3, [sp, #36]	; 0x24
 800bcb6:	783b      	ldrb	r3, [r7, #0]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	f000 809d 	beq.w	800bdf8 <_svfiprintf_r+0x1b8>
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcc8:	9304      	str	r3, [sp, #16]
 800bcca:	9307      	str	r3, [sp, #28]
 800bccc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcd0:	931a      	str	r3, [sp, #104]	; 0x68
 800bcd2:	462f      	mov	r7, r5
 800bcd4:	2205      	movs	r2, #5
 800bcd6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bcda:	4850      	ldr	r0, [pc, #320]	; (800be1c <_svfiprintf_r+0x1dc>)
 800bcdc:	f7f4 fa88 	bl	80001f0 <memchr>
 800bce0:	9b04      	ldr	r3, [sp, #16]
 800bce2:	b9d0      	cbnz	r0, 800bd1a <_svfiprintf_r+0xda>
 800bce4:	06d9      	lsls	r1, r3, #27
 800bce6:	bf44      	itt	mi
 800bce8:	2220      	movmi	r2, #32
 800bcea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bcee:	071a      	lsls	r2, r3, #28
 800bcf0:	bf44      	itt	mi
 800bcf2:	222b      	movmi	r2, #43	; 0x2b
 800bcf4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bcf8:	782a      	ldrb	r2, [r5, #0]
 800bcfa:	2a2a      	cmp	r2, #42	; 0x2a
 800bcfc:	d015      	beq.n	800bd2a <_svfiprintf_r+0xea>
 800bcfe:	9a07      	ldr	r2, [sp, #28]
 800bd00:	462f      	mov	r7, r5
 800bd02:	2000      	movs	r0, #0
 800bd04:	250a      	movs	r5, #10
 800bd06:	4639      	mov	r1, r7
 800bd08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd0c:	3b30      	subs	r3, #48	; 0x30
 800bd0e:	2b09      	cmp	r3, #9
 800bd10:	d94d      	bls.n	800bdae <_svfiprintf_r+0x16e>
 800bd12:	b1b8      	cbz	r0, 800bd44 <_svfiprintf_r+0x104>
 800bd14:	e00f      	b.n	800bd36 <_svfiprintf_r+0xf6>
 800bd16:	462f      	mov	r7, r5
 800bd18:	e7b8      	b.n	800bc8c <_svfiprintf_r+0x4c>
 800bd1a:	4a40      	ldr	r2, [pc, #256]	; (800be1c <_svfiprintf_r+0x1dc>)
 800bd1c:	1a80      	subs	r0, r0, r2
 800bd1e:	fa0b f000 	lsl.w	r0, fp, r0
 800bd22:	4318      	orrs	r0, r3
 800bd24:	9004      	str	r0, [sp, #16]
 800bd26:	463d      	mov	r5, r7
 800bd28:	e7d3      	b.n	800bcd2 <_svfiprintf_r+0x92>
 800bd2a:	9a03      	ldr	r2, [sp, #12]
 800bd2c:	1d11      	adds	r1, r2, #4
 800bd2e:	6812      	ldr	r2, [r2, #0]
 800bd30:	9103      	str	r1, [sp, #12]
 800bd32:	2a00      	cmp	r2, #0
 800bd34:	db01      	blt.n	800bd3a <_svfiprintf_r+0xfa>
 800bd36:	9207      	str	r2, [sp, #28]
 800bd38:	e004      	b.n	800bd44 <_svfiprintf_r+0x104>
 800bd3a:	4252      	negs	r2, r2
 800bd3c:	f043 0302 	orr.w	r3, r3, #2
 800bd40:	9207      	str	r2, [sp, #28]
 800bd42:	9304      	str	r3, [sp, #16]
 800bd44:	783b      	ldrb	r3, [r7, #0]
 800bd46:	2b2e      	cmp	r3, #46	; 0x2e
 800bd48:	d10c      	bne.n	800bd64 <_svfiprintf_r+0x124>
 800bd4a:	787b      	ldrb	r3, [r7, #1]
 800bd4c:	2b2a      	cmp	r3, #42	; 0x2a
 800bd4e:	d133      	bne.n	800bdb8 <_svfiprintf_r+0x178>
 800bd50:	9b03      	ldr	r3, [sp, #12]
 800bd52:	1d1a      	adds	r2, r3, #4
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	9203      	str	r2, [sp, #12]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	bfb8      	it	lt
 800bd5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd60:	3702      	adds	r7, #2
 800bd62:	9305      	str	r3, [sp, #20]
 800bd64:	4d2e      	ldr	r5, [pc, #184]	; (800be20 <_svfiprintf_r+0x1e0>)
 800bd66:	7839      	ldrb	r1, [r7, #0]
 800bd68:	2203      	movs	r2, #3
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	f7f4 fa40 	bl	80001f0 <memchr>
 800bd70:	b138      	cbz	r0, 800bd82 <_svfiprintf_r+0x142>
 800bd72:	2340      	movs	r3, #64	; 0x40
 800bd74:	1b40      	subs	r0, r0, r5
 800bd76:	fa03 f000 	lsl.w	r0, r3, r0
 800bd7a:	9b04      	ldr	r3, [sp, #16]
 800bd7c:	4303      	orrs	r3, r0
 800bd7e:	3701      	adds	r7, #1
 800bd80:	9304      	str	r3, [sp, #16]
 800bd82:	7839      	ldrb	r1, [r7, #0]
 800bd84:	4827      	ldr	r0, [pc, #156]	; (800be24 <_svfiprintf_r+0x1e4>)
 800bd86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd8a:	2206      	movs	r2, #6
 800bd8c:	1c7e      	adds	r6, r7, #1
 800bd8e:	f7f4 fa2f 	bl	80001f0 <memchr>
 800bd92:	2800      	cmp	r0, #0
 800bd94:	d038      	beq.n	800be08 <_svfiprintf_r+0x1c8>
 800bd96:	4b24      	ldr	r3, [pc, #144]	; (800be28 <_svfiprintf_r+0x1e8>)
 800bd98:	bb13      	cbnz	r3, 800bde0 <_svfiprintf_r+0x1a0>
 800bd9a:	9b03      	ldr	r3, [sp, #12]
 800bd9c:	3307      	adds	r3, #7
 800bd9e:	f023 0307 	bic.w	r3, r3, #7
 800bda2:	3308      	adds	r3, #8
 800bda4:	9303      	str	r3, [sp, #12]
 800bda6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bda8:	444b      	add	r3, r9
 800bdaa:	9309      	str	r3, [sp, #36]	; 0x24
 800bdac:	e76d      	b.n	800bc8a <_svfiprintf_r+0x4a>
 800bdae:	fb05 3202 	mla	r2, r5, r2, r3
 800bdb2:	2001      	movs	r0, #1
 800bdb4:	460f      	mov	r7, r1
 800bdb6:	e7a6      	b.n	800bd06 <_svfiprintf_r+0xc6>
 800bdb8:	2300      	movs	r3, #0
 800bdba:	3701      	adds	r7, #1
 800bdbc:	9305      	str	r3, [sp, #20]
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	250a      	movs	r5, #10
 800bdc2:	4638      	mov	r0, r7
 800bdc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdc8:	3a30      	subs	r2, #48	; 0x30
 800bdca:	2a09      	cmp	r2, #9
 800bdcc:	d903      	bls.n	800bdd6 <_svfiprintf_r+0x196>
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d0c8      	beq.n	800bd64 <_svfiprintf_r+0x124>
 800bdd2:	9105      	str	r1, [sp, #20]
 800bdd4:	e7c6      	b.n	800bd64 <_svfiprintf_r+0x124>
 800bdd6:	fb05 2101 	mla	r1, r5, r1, r2
 800bdda:	2301      	movs	r3, #1
 800bddc:	4607      	mov	r7, r0
 800bdde:	e7f0      	b.n	800bdc2 <_svfiprintf_r+0x182>
 800bde0:	ab03      	add	r3, sp, #12
 800bde2:	9300      	str	r3, [sp, #0]
 800bde4:	4622      	mov	r2, r4
 800bde6:	4b11      	ldr	r3, [pc, #68]	; (800be2c <_svfiprintf_r+0x1ec>)
 800bde8:	a904      	add	r1, sp, #16
 800bdea:	4640      	mov	r0, r8
 800bdec:	f7fe f984 	bl	800a0f8 <_printf_float>
 800bdf0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bdf4:	4681      	mov	r9, r0
 800bdf6:	d1d6      	bne.n	800bda6 <_svfiprintf_r+0x166>
 800bdf8:	89a3      	ldrh	r3, [r4, #12]
 800bdfa:	065b      	lsls	r3, r3, #25
 800bdfc:	f53f af35 	bmi.w	800bc6a <_svfiprintf_r+0x2a>
 800be00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be02:	b01d      	add	sp, #116	; 0x74
 800be04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be08:	ab03      	add	r3, sp, #12
 800be0a:	9300      	str	r3, [sp, #0]
 800be0c:	4622      	mov	r2, r4
 800be0e:	4b07      	ldr	r3, [pc, #28]	; (800be2c <_svfiprintf_r+0x1ec>)
 800be10:	a904      	add	r1, sp, #16
 800be12:	4640      	mov	r0, r8
 800be14:	f7fe fc26 	bl	800a664 <_printf_i>
 800be18:	e7ea      	b.n	800bdf0 <_svfiprintf_r+0x1b0>
 800be1a:	bf00      	nop
 800be1c:	0800c1dc 	.word	0x0800c1dc
 800be20:	0800c1e2 	.word	0x0800c1e2
 800be24:	0800c1e6 	.word	0x0800c1e6
 800be28:	0800a0f9 	.word	0x0800a0f9
 800be2c:	0800bb8d 	.word	0x0800bb8d

0800be30 <__ascii_mbtowc>:
 800be30:	b082      	sub	sp, #8
 800be32:	b901      	cbnz	r1, 800be36 <__ascii_mbtowc+0x6>
 800be34:	a901      	add	r1, sp, #4
 800be36:	b142      	cbz	r2, 800be4a <__ascii_mbtowc+0x1a>
 800be38:	b14b      	cbz	r3, 800be4e <__ascii_mbtowc+0x1e>
 800be3a:	7813      	ldrb	r3, [r2, #0]
 800be3c:	600b      	str	r3, [r1, #0]
 800be3e:	7812      	ldrb	r2, [r2, #0]
 800be40:	1c10      	adds	r0, r2, #0
 800be42:	bf18      	it	ne
 800be44:	2001      	movne	r0, #1
 800be46:	b002      	add	sp, #8
 800be48:	4770      	bx	lr
 800be4a:	4610      	mov	r0, r2
 800be4c:	e7fb      	b.n	800be46 <__ascii_mbtowc+0x16>
 800be4e:	f06f 0001 	mvn.w	r0, #1
 800be52:	e7f8      	b.n	800be46 <__ascii_mbtowc+0x16>

0800be54 <memmove>:
 800be54:	4288      	cmp	r0, r1
 800be56:	b510      	push	{r4, lr}
 800be58:	eb01 0302 	add.w	r3, r1, r2
 800be5c:	d807      	bhi.n	800be6e <memmove+0x1a>
 800be5e:	1e42      	subs	r2, r0, #1
 800be60:	4299      	cmp	r1, r3
 800be62:	d00a      	beq.n	800be7a <memmove+0x26>
 800be64:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be68:	f802 4f01 	strb.w	r4, [r2, #1]!
 800be6c:	e7f8      	b.n	800be60 <memmove+0xc>
 800be6e:	4283      	cmp	r3, r0
 800be70:	d9f5      	bls.n	800be5e <memmove+0xa>
 800be72:	1881      	adds	r1, r0, r2
 800be74:	1ad2      	subs	r2, r2, r3
 800be76:	42d3      	cmn	r3, r2
 800be78:	d100      	bne.n	800be7c <memmove+0x28>
 800be7a:	bd10      	pop	{r4, pc}
 800be7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be80:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800be84:	e7f7      	b.n	800be76 <memmove+0x22>

0800be86 <_realloc_r>:
 800be86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be88:	4607      	mov	r7, r0
 800be8a:	4614      	mov	r4, r2
 800be8c:	460e      	mov	r6, r1
 800be8e:	b921      	cbnz	r1, 800be9a <_realloc_r+0x14>
 800be90:	4611      	mov	r1, r2
 800be92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800be96:	f7fe b841 	b.w	8009f1c <_malloc_r>
 800be9a:	b922      	cbnz	r2, 800bea6 <_realloc_r+0x20>
 800be9c:	f7fd fff0 	bl	8009e80 <_free_r>
 800bea0:	4625      	mov	r5, r4
 800bea2:	4628      	mov	r0, r5
 800bea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bea6:	f000 f821 	bl	800beec <_malloc_usable_size_r>
 800beaa:	42a0      	cmp	r0, r4
 800beac:	d20f      	bcs.n	800bece <_realloc_r+0x48>
 800beae:	4621      	mov	r1, r4
 800beb0:	4638      	mov	r0, r7
 800beb2:	f7fe f833 	bl	8009f1c <_malloc_r>
 800beb6:	4605      	mov	r5, r0
 800beb8:	2800      	cmp	r0, #0
 800beba:	d0f2      	beq.n	800bea2 <_realloc_r+0x1c>
 800bebc:	4631      	mov	r1, r6
 800bebe:	4622      	mov	r2, r4
 800bec0:	f7fd ffca 	bl	8009e58 <memcpy>
 800bec4:	4631      	mov	r1, r6
 800bec6:	4638      	mov	r0, r7
 800bec8:	f7fd ffda 	bl	8009e80 <_free_r>
 800becc:	e7e9      	b.n	800bea2 <_realloc_r+0x1c>
 800bece:	4635      	mov	r5, r6
 800bed0:	e7e7      	b.n	800bea2 <_realloc_r+0x1c>

0800bed2 <__ascii_wctomb>:
 800bed2:	b149      	cbz	r1, 800bee8 <__ascii_wctomb+0x16>
 800bed4:	2aff      	cmp	r2, #255	; 0xff
 800bed6:	bf85      	ittet	hi
 800bed8:	238a      	movhi	r3, #138	; 0x8a
 800beda:	6003      	strhi	r3, [r0, #0]
 800bedc:	700a      	strbls	r2, [r1, #0]
 800bede:	f04f 30ff 	movhi.w	r0, #4294967295
 800bee2:	bf98      	it	ls
 800bee4:	2001      	movls	r0, #1
 800bee6:	4770      	bx	lr
 800bee8:	4608      	mov	r0, r1
 800beea:	4770      	bx	lr

0800beec <_malloc_usable_size_r>:
 800beec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bef0:	1f18      	subs	r0, r3, #4
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	bfbc      	itt	lt
 800bef6:	580b      	ldrlt	r3, [r1, r0]
 800bef8:	18c0      	addlt	r0, r0, r3
 800befa:	4770      	bx	lr

0800befc <_init>:
 800befc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800befe:	bf00      	nop
 800bf00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf02:	bc08      	pop	{r3}
 800bf04:	469e      	mov	lr, r3
 800bf06:	4770      	bx	lr

0800bf08 <_fini>:
 800bf08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf0a:	bf00      	nop
 800bf0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf0e:	bc08      	pop	{r3}
 800bf10:	469e      	mov	lr, r3
 800bf12:	4770      	bx	lr
