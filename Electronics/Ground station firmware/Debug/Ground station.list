
Ground station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800b978  0800b978  0001b978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd48  0800bd48  0002035c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd48  0800bd48  0001bd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd50  0800bd50  0002035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd50  0800bd50  0001bd50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd54  0800bd54  0001bd54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  0800bd58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a40  2000035c  0800c0b4  0002035c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d9c  0800c0b4  00021d9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002035c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b6fa  00000000  00000000  0002038c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003922  00000000  00000000  0003ba86  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013d0  00000000  00000000  0003f3a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001250  00000000  00000000  00040778  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a6ff  00000000  00000000  000419c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012bfe  00000000  00000000  0005c0c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009303e  00000000  00000000  0006ecc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00101d03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005df4  00000000  00000000  00101d80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000035c 	.word	0x2000035c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b960 	.word	0x0800b960

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000360 	.word	0x20000360
 80001dc:	0800b960 	.word	0x0800b960

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <switchAntenna>:
static void MX_I2C1_Init(void);
static void MX_SPI3_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

void switchAntenna() {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
    is_ant1 = !is_ant1;
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <switchAntenna+0x3c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	bf0c      	ite	eq
 8000f64:	2301      	moveq	r3, #1
 8000f66:	2300      	movne	r3, #0
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <switchAntenna+0x3c>)
 8000f6e:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(SWANT_GPIO_Port, SWANT_Pin, is_ant1);
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <switchAntenna+0x3c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7a:	4807      	ldr	r0, [pc, #28]	; (8000f98 <switchAntenna+0x40>)
 8000f7c:	f001 ffd2 	bl	8002f24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, is_ant1);
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <switchAntenna+0x3c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	2102      	movs	r1, #2
 8000f88:	4804      	ldr	r0, [pc, #16]	; (8000f9c <switchAntenna+0x44>)
 8000f8a:	f001 ffcb 	bl	8002f24 <HAL_GPIO_WritePin>
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000000 	.word	0x20000000
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	40020000 	.word	0x40020000

08000fa0 <loraTelemetry>:
        }

    }
}

void loraTelemetry() {
 8000fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fa4:	f5ad 7d3f 	sub.w	sp, sp, #764	; 0x2fc
 8000fa8:	af2c      	add	r7, sp, #176	; 0xb0
    TLM_decoded TLM_dec;
    TLM_encoded TLM_enc;

    sx1280_custom radio;

    sxInit(&radio, &hspi3, LORA_NSS_GPIO_Port, LORA_NSS_Pin);
 8000faa:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8000fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fb2:	4ab4      	ldr	r2, [pc, #720]	; (8001284 <loraTelemetry+0x2e4>)
 8000fb4:	49b4      	ldr	r1, [pc, #720]	; (8001288 <loraTelemetry+0x2e8>)
 8000fb6:	f000 fe1b 	bl	8001bf0 <sxInit>
    sxSetDio1Pin(&radio, LORA_DIO1_GPIO_Port, LORA_DIO1_Pin);
 8000fba:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000fbe:	2220      	movs	r2, #32
 8000fc0:	49b2      	ldr	r1, [pc, #712]	; (800128c <loraTelemetry+0x2ec>)
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 fe74 	bl	8001cb0 <sxSetDio1Pin>

    char printBuffer[256];

    // rx mode
    SetDioIrqParams(&radio, (1 << 1) | (1 << 6), 1 << 1, 0, 0); //rxdone on gpio1, crcerror on as well
 8000fc8:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8000fcc:	2300      	movs	r3, #0
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	2142      	movs	r1, #66	; 0x42
 8000fd6:	f000 ff53 	bl	8001e80 <SetDioIrqParams>
    HAL_Delay(1);
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f001 fa62 	bl	80024a4 <HAL_Delay>

    uint8_t rxStartBufferPointer = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f887 3233 	strb.w	r3, [r7, #563]	; 0x233
    TLM_dec.debug = 1337;
    TLM_dec.ranging = 15212;

     */

    float latitude = 52.394821;
 8000fe6:	4baa      	ldr	r3, [pc, #680]	; (8001290 <loraTelemetry+0x2f0>)
 8000fe8:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    float longitude = 5.922696;
 8000fec:	4ba9      	ldr	r3, [pc, #676]	; (8001294 <loraTelemetry+0x2f4>)
 8000fee:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

    float acc_conversion = 0.0095712904;
 8000ff2:	4ba9      	ldr	r3, [pc, #676]	; (8001298 <loraTelemetry+0x2f8>)
 8000ff4:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
    float gyro_conversion = 0.00122173047; //0.070;
 8000ff8:	4ba8      	ldr	r3, [pc, #672]	; (800129c <loraTelemetry+0x2fc>)
 8000ffa:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220

    uint32_t pkt_count = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

    //changeLed(0, 100, 0);
    uint8_t data[4];
    uint32_t lasttime = HAL_GetTick();
 8001004:	f001 fa42 	bl	800248c <HAL_GetTick>
 8001008:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
    uint32_t nowtime = HAL_GetTick();
 800100c:	f001 fa3e 	bl	800248c <HAL_GetTick>
 8001010:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
    uint32_t delay = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    uint8_t is_soft_enabled;
    uint8_t is_armed ;
    uint8_t is_breakwire_connected;
    uint8_t is_camera_on;

    uint8_t button_pressed = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
    while (1) {

        //SetRx(0x00, 0xffff); // continous rx
        SetRx(&radio, 0x00, 0); // No timeout
 8001020:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001024:	2200      	movs	r2, #0
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f000 ffaf 	bl	8001f8c <SetRx>
        //SetRx(0x02, 200); // 200 ms timeout
        HAL_Delay(1);
 800102e:	2001      	movs	r0, #1
 8001030:	f001 fa38 	bl	80024a4 <HAL_Delay>
        // wait for reception:
        for (int i = 0; i < 35; i++) { // 35 ms timeout
 8001034:	2300      	movs	r3, #0
 8001036:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 800103a:	e01e      	b.n	800107a <loraTelemetry+0xda>
            if (HAL_GPIO_ReadPin(LORA_DIO1_GPIO_Port, LORA_DIO1_Pin)) {
 800103c:	2120      	movs	r1, #32
 800103e:	4893      	ldr	r0, [pc, #588]	; (800128c <loraTelemetry+0x2ec>)
 8001040:	f001 ff58 	bl	8002ef4 <HAL_GPIO_ReadPin>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00f      	beq.n	800106a <loraTelemetry+0xca>
                nowtime = HAL_GetTick();
 800104a:	f001 fa1f 	bl	800248c <HAL_GetTick>
 800104e:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
                delay = nowtime - lasttime  ;
 8001052:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8001056:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
                lasttime = nowtime;
 8001060:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001064:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
                break;
 8001068:	e00b      	b.n	8001082 <loraTelemetry+0xe2>
            }
            HAL_Delay(1);
 800106a:	2001      	movs	r0, #1
 800106c:	f001 fa1a 	bl	80024a4 <HAL_Delay>
        for (int i = 0; i < 35; i++) { // 35 ms timeout
 8001070:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001074:	3301      	adds	r3, #1
 8001076:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 800107a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800107e:	2b22      	cmp	r3, #34	; 0x22
 8001080:	dddc      	ble.n	800103c <loraTelemetry+0x9c>
        }

        if (HAL_GPIO_ReadPin(LORA_DIO1_GPIO_Port, LORA_DIO1_Pin)) {
 8001082:	2120      	movs	r1, #32
 8001084:	4881      	ldr	r0, [pc, #516]	; (800128c <loraTelemetry+0x2ec>)
 8001086:	f001 ff35 	bl	8002ef4 <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 8180 	beq.w	8001392 <loraTelemetry+0x3f2>

            pkt_count++;
 8001092:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8001096:	3301      	adds	r3, #1
 8001098:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

            GetPacketStatusLora(&radio);
 800109c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 ff92 	bl	8001fca <GetPacketStatusLora>
            GetIrqStatus(&radio);
 80010a6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 ff3d 	bl	8001f2a <GetIrqStatus>

            ClrIrqStatus(&radio, (1 << 1) | (1 << 6)); // clear rxdone Irq and crcerror
 80010b0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80010b4:	2142      	movs	r1, #66	; 0x42
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 ff1c 	bl	8001ef4 <ClrIrqStatus>
            HAL_Delay(1);
 80010bc:	2001      	movs	r0, #1
 80010be:	f001 f9f1 	bl	80024a4 <HAL_Delay>
            //GetRxBufferStatus(); // TODO

            ReadBuffer(&radio, rxStartBufferPointer, sizeof(TLM_enc),
 80010c2:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80010c6:	f897 1233 	ldrb.w	r1, [r7, #563]	; 0x233
 80010ca:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 80010ce:	221f      	movs	r2, #31
 80010d0:	f000 fea1 	bl	8001e16 <ReadBuffer>
                    (uint8_t*) &TLM_enc);
            //ReadBuffer(&radio, rxStartBufferPointer, sizeof(data), (uint8_t*) data);
            decode_TLM(&TLM_enc, &TLM_dec);
 80010d4:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 80010d8:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80010dc:	4611      	mov	r1, r2
 80010de:	4618      	mov	r0, r3
 80010e0:	f001 f81e 	bl	8002120 <decode_TLM>
            //snprintf(printBuffer, 128, "%d,%d,%d,%d,%d,%d,%f,%d,%f,%d,%d,%f,%f,%f,%f,%f\r\n", TLM_dec.packet_type,TLM_dec.flight_state,TLM_dec.is_playing_music,TLM_dec.is_data_logging,
            //        TLM_dec.pin_states,TLM_dec.servo_state, TLM_dec.vbat, TLM_dec.systick, TLM_dec.orientation_quat[0], TLM_dec.acc[2],TLM_dec.gyro[2],TLM_dec.baro, TLM_dec.temp, TLM_dec.vertical_velocity,
            //        TLM_dec.altitude, TLM_dec.ranging);

            is_soft_enabled = (TLM_dec.pin_states & 1);
 80010e4:	f897 31d8 	ldrb.w	r3, [r7, #472]	; 0x1d8
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b
            is_armed = (TLM_dec.pin_states & (1 << 1)) >> 1;
 80010f0:	f897 31d8 	ldrb.w	r3, [r7, #472]	; 0x1d8
 80010f4:	105b      	asrs	r3, r3, #1
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
            is_breakwire_connected = (TLM_dec.pin_states & (1 << 2)) >> 2;
 8001100:	f897 31d8 	ldrb.w	r3, [r7, #472]	; 0x1d8
 8001104:	109b      	asrs	r3, r3, #2
 8001106:	b2db      	uxtb	r3, r3
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
            is_camera_on = (TLM_dec.pin_states & (1 << 3)) >> 3;
 8001110:	f897 31d8 	ldrb.w	r3, [r7, #472]	; 0x1d8
 8001114:	10db      	asrs	r3, r3, #3
 8001116:	b2db      	uxtb	r3, r3
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	f887 3218 	strb.w	r3, [r7, #536]	; 0x218

            snprintf(printBuffer, 256,
 8001120:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8001124:	677b      	str	r3, [r7, #116]	; 0x74
                    "/*Project Zeggreus,%ld,%ld,%f,%f,%f,%f,%f,%ld,%ld,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%d,%d,%d,%d,%d,%d,%d*/\r\n",
                    TLM_dec.systick, pkt_count, TLM_dec.vbat, TLM_dec.temp,
 8001126:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
            snprintf(printBuffer, 256,
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fa14 	bl	8000558 <__aeabi_f2d>
 8001130:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
                    TLM_dec.systick, pkt_count, TLM_dec.vbat, TLM_dec.temp,
 8001134:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
            snprintf(printBuffer, 256,
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fa0d 	bl	8000558 <__aeabi_f2d>
 800113e:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
                    TLM_dec.altitude, TLM_dec.baro / 1000, TLM_dec.temp, delay,
 8001142:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
            snprintf(printBuffer, 256,
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fa06 	bl	8000558 <__aeabi_f2d>
 800114c:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
                    TLM_dec.altitude, TLM_dec.baro / 1000, TLM_dec.temp, delay,
 8001150:	edd7 7a80 	vldr	s15, [r7, #512]	; 0x200
 8001154:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80012a0 <loraTelemetry+0x300>
 8001158:	eec7 6a87 	vdiv.f32	s13, s15, s14
            snprintf(printBuffer, 256,
 800115c:	ee16 0a90 	vmov	r0, s13
 8001160:	f7ff f9fa 	bl	8000558 <__aeabi_f2d>
 8001164:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
                    TLM_dec.altitude, TLM_dec.baro / 1000, TLM_dec.temp, delay,
 8001168:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
            snprintf(printBuffer, 256,
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff f9f3 	bl	8000558 <__aeabi_f2d>
 8001172:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8001176:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800117a:	673b      	str	r3, [r7, #112]	; 0x70
 800117c:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 8001180:	f7ff f9ea 	bl	8000558 <__aeabi_f2d>
 8001184:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8001188:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 800118c:	f7ff f9e4 	bl	8000558 <__aeabi_f2d>
 8001190:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
                    TLM_dec.systick, longitude, latitude, TLM_dec.altitude, 0.0,
 8001194:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
            snprintf(printBuffer, 256,
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9dd 	bl	8000558 <__aeabi_f2d>
 800119e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
                    TLM_dec.acc[0] * acc_conversion,
 80011a2:	f9b7 31f4 	ldrsh.w	r3, [r7, #500]	; 0x1f4
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ae:	edd7 7a89 	vldr	s15, [r7, #548]	; 0x224
 80011b2:	ee67 7a27 	vmul.f32	s15, s14, s15
            snprintf(printBuffer, 256,
 80011b6:	ee17 0a90 	vmov	r0, s15
 80011ba:	f7ff f9cd 	bl	8000558 <__aeabi_f2d>
 80011be:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
                    TLM_dec.acc[1] * acc_conversion,
 80011c2:	f9b7 31f6 	ldrsh.w	r3, [r7, #502]	; 0x1f6
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ce:	edd7 7a89 	vldr	s15, [r7, #548]	; 0x224
 80011d2:	ee67 7a27 	vmul.f32	s15, s14, s15
            snprintf(printBuffer, 256,
 80011d6:	ee17 0a90 	vmov	r0, s15
 80011da:	f7ff f9bd 	bl	8000558 <__aeabi_f2d>
 80011de:	e9c7 0108 	strd	r0, r1, [r7, #32]
                    TLM_dec.acc[2] * acc_conversion,
 80011e2:	f9b7 31f8 	ldrsh.w	r3, [r7, #504]	; 0x1f8
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ee:	edd7 7a89 	vldr	s15, [r7, #548]	; 0x224
 80011f2:	ee67 7a27 	vmul.f32	s15, s14, s15
            snprintf(printBuffer, 256,
 80011f6:	ee17 0a90 	vmov	r0, s15
 80011fa:	f7ff f9ad 	bl	8000558 <__aeabi_f2d>
 80011fe:	e9c7 0106 	strd	r0, r1, [r7, #24]
                    TLM_dec.gyro[0] * gyro_conversion,
 8001202:	f9b7 31fa 	ldrsh.w	r3, [r7, #506]	; 0x1fa
 8001206:	ee07 3a90 	vmov	s15, r3
 800120a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800120e:	edd7 7a88 	vldr	s15, [r7, #544]	; 0x220
 8001212:	ee67 7a27 	vmul.f32	s15, s14, s15
            snprintf(printBuffer, 256,
 8001216:	ee17 0a90 	vmov	r0, s15
 800121a:	f7ff f99d 	bl	8000558 <__aeabi_f2d>
 800121e:	e9c7 0104 	strd	r0, r1, [r7, #16]
                    TLM_dec.gyro[1] * gyro_conversion,
 8001222:	f9b7 31fc 	ldrsh.w	r3, [r7, #508]	; 0x1fc
 8001226:	ee07 3a90 	vmov	s15, r3
 800122a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800122e:	edd7 7a88 	vldr	s15, [r7, #544]	; 0x220
 8001232:	ee67 7a27 	vmul.f32	s15, s14, s15
            snprintf(printBuffer, 256,
 8001236:	ee17 0a90 	vmov	r0, s15
 800123a:	f7ff f98d 	bl	8000558 <__aeabi_f2d>
 800123e:	e9c7 0102 	strd	r0, r1, [r7, #8]
                    TLM_dec.gyro[2] * gyro_conversion, radio.rssi,
 8001242:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
 8001246:	ee07 3a90 	vmov	s15, r3
 800124a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800124e:	edd7 7a88 	vldr	s15, [r7, #544]	; 0x220
 8001252:	ee67 7a27 	vmul.f32	s15, s14, s15
            snprintf(printBuffer, 256,
 8001256:	ee17 0a90 	vmov	r0, s15
 800125a:	f7ff f97d 	bl	8000558 <__aeabi_f2d>
 800125e:	4682      	mov	sl, r0
 8001260:	468b      	mov	fp, r1
                    TLM_dec.gyro[2] * gyro_conversion, radio.rssi,
 8001262:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
            snprintf(printBuffer, 256,
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f976 	bl	8000558 <__aeabi_f2d>
 800126c:	4680      	mov	r8, r0
 800126e:	4689      	mov	r9, r1
                    radio.crcError, is_ant1 ? 1 : 2, is_soft_enabled, is_armed,
 8001270:	f897 31a8 	ldrb.w	r3, [r7, #424]	; 0x1a8
            snprintf(printBuffer, 256,
 8001274:	607b      	str	r3, [r7, #4]
                    radio.crcError, is_ant1 ? 1 : 2, is_soft_enabled, is_armed,
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <loraTelemetry+0x304>)
 8001278:	781b      	ldrb	r3, [r3, #0]
            snprintf(printBuffer, 256,
 800127a:	2b00      	cmp	r3, #0
 800127c:	d014      	beq.n	80012a8 <loraTelemetry+0x308>
 800127e:	2501      	movs	r5, #1
 8001280:	e013      	b.n	80012aa <loraTelemetry+0x30a>
 8001282:	bf00      	nop
 8001284:	40020000 	.word	0x40020000
 8001288:	200003dc 	.word	0x200003dc
 800128c:	40020400 	.word	0x40020400
 8001290:	4251944c 	.word	0x4251944c
 8001294:	40bd86ba 	.word	0x40bd86ba
 8001298:	3c1cd0e7 	.word	0x3c1cd0e7
 800129c:	3aa02279 	.word	0x3aa02279
 80012a0:	447a0000 	.word	0x447a0000
 80012a4:	20000000 	.word	0x20000000
 80012a8:	2502      	movs	r5, #2
 80012aa:	f897 421b 	ldrb.w	r4, [r7, #539]	; 0x21b
 80012ae:	f897 021a 	ldrb.w	r0, [r7, #538]	; 0x21a
 80012b2:	f897 1219 	ldrb.w	r1, [r7, #537]	; 0x219
 80012b6:	f897 2218 	ldrb.w	r2, [r7, #536]	; 0x218
                    is_breakwire_connected, is_camera_on,TLM_dec.flight_state);
 80012ba:	f897 31d5 	ldrb.w	r3, [r7, #469]	; 0x1d5
            snprintf(printBuffer, 256,
 80012be:	f107 0680 	add.w	r6, r7, #128	; 0x80
 80012c2:	932a      	str	r3, [sp, #168]	; 0xa8
 80012c4:	9229      	str	r2, [sp, #164]	; 0xa4
 80012c6:	9128      	str	r1, [sp, #160]	; 0xa0
 80012c8:	9027      	str	r0, [sp, #156]	; 0x9c
 80012ca:	9426      	str	r4, [sp, #152]	; 0x98
 80012cc:	9525      	str	r5, [sp, #148]	; 0x94
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	9324      	str	r3, [sp, #144]	; 0x90
 80012d2:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88
 80012d6:	e9cd ab20 	strd	sl, fp, [sp, #128]	; 0x80
 80012da:	ed97 7b02 	vldr	d7, [r7, #8]
 80012de:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 80012e2:	ed97 7b04 	vldr	d7, [r7, #16]
 80012e6:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 80012ea:	ed97 7b06 	vldr	d7, [r7, #24]
 80012ee:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 80012f2:	ed97 7b08 	vldr	d7, [r7, #32]
 80012f6:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 80012fa:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80012fe:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8001302:	f04f 0300 	mov.w	r3, #0
 8001306:	f04f 0400 	mov.w	r4, #0
 800130a:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 800130e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001312:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8001316:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800131a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800131e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001322:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001328:	930d      	str	r3, [sp, #52]	; 0x34
 800132a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800132e:	930c      	str	r3, [sp, #48]	; 0x30
 8001330:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001334:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001338:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800133c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001340:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8001344:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001348:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 800134c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001350:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8001354:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001358:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001360:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <loraTelemetry+0x434>)
 8001362:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001366:	4630      	mov	r0, r6
 8001368:	f008 ffc4 	bl	800a2f4 <sniprintf>

            //snprintf(printBuffer, 128, "Quaternion:%f, %f, %f, %f\r\n", TLM_dec.orientation_quat[0], TLM_dec.orientation_quat[1], TLM_dec.orientation_quat[2], TLM_dec.orientation_quat[3]);
            //snprintf(printBuffer, 128,
            //       "Quaternion: %d, %d, %d, %d, RSSI: %f, SNR: %f\r\n",
            //       data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
            CDC_Transmit_FS((uint8_t*) printBuffer, strlen(printBuffer));
 800136c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001370:	4618      	mov	r0, r3
 8001372:	f7fe ff35 	bl	80001e0 <strlen>
 8001376:	4603      	mov	r3, r0
 8001378:	b29a      	uxth	r2, r3
 800137a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f007 fe29 	bl	8008fd8 <CDC_Transmit_FS>
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001386:	2201      	movs	r2, #1
 8001388:	2101      	movs	r1, #1
 800138a:	4813      	ldr	r0, [pc, #76]	; (80013d8 <loraTelemetry+0x438>)
 800138c:	f001 fdca 	bl	8002f24 <HAL_GPIO_WritePin>
 8001390:	e006      	b.n	80013a0 <loraTelemetry+0x400>

        } else {
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2101      	movs	r1, #1
 8001396:	4810      	ldr	r0, [pc, #64]	; (80013d8 <loraTelemetry+0x438>)
 8001398:	f001 fdc4 	bl	8002f24 <HAL_GPIO_WritePin>
            // try other antenna
            switchAntenna();
 800139c:	f7ff fddc 	bl	8000f58 <switchAntenna>
        }

        if (!HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin)) {
 80013a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a4:	480d      	ldr	r0, [pc, #52]	; (80013dc <loraTelemetry+0x43c>)
 80013a6:	f001 fda5 	bl	8002ef4 <HAL_GPIO_ReadPin>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d109      	bne.n	80013c4 <loraTelemetry+0x424>
            if (!button_pressed) {
 80013b0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d108      	bne.n	80013ca <loraTelemetry+0x42a>
                switchAntenna();
 80013b8:	f7ff fdce 	bl	8000f58 <switchAntenna>
                button_pressed = 1;
 80013bc:	2301      	movs	r3, #1
 80013be:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
 80013c2:	e002      	b.n	80013ca <loraTelemetry+0x42a>
            }
        }
        else {
            button_pressed = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        }

        HAL_Delay(1);
 80013ca:	2001      	movs	r0, #1
 80013cc:	f001 f86a 	bl	80024a4 <HAL_Delay>
        SetRx(&radio, 0x00, 0); // No timeout
 80013d0:	e626      	b.n	8001020 <loraTelemetry+0x80>
 80013d2:	bf00      	nop
 80013d4:	0800b9a8 	.word	0x0800b9a8
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020800 	.word	0x40020800

080013e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e4:	f000 ffec 	bl	80023c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e8:	f000 f814 	bl	8001414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ec:	f000 f95a 	bl	80016a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80013f0:	f000 f878 	bl	80014e4 <MX_ADC1_Init>
  MX_I2C1_Init();
 80013f4:	f000 f8c8 	bl	8001588 <MX_I2C1_Init>
  MX_SPI3_Init();
 80013f8:	f000 f8f4 	bl	80015e4 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 80013fc:	f000 f928 	bl	8001650 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001400:	f007 fd18 	bl	8008e34 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  loraTelemetry(0);
 8001404:	2000      	movs	r0, #0
 8001406:	f7ff fdcb 	bl	8000fa0 <loraTelemetry>

  HAL_Delay(200);
 800140a:	20c8      	movs	r0, #200	; 0xc8
 800140c:	f001 f84a 	bl	80024a4 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001410:	e7fe      	b.n	8001410 <main+0x30>
	...

08001414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b094      	sub	sp, #80	; 0x50
 8001418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141a:	f107 0320 	add.w	r3, r7, #32
 800141e:	2230      	movs	r2, #48	; 0x30
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f008 fa4a 	bl	80098bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	4b27      	ldr	r3, [pc, #156]	; (80014dc <SystemClock_Config+0xc8>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	4a26      	ldr	r2, [pc, #152]	; (80014dc <SystemClock_Config+0xc8>)
 8001442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001446:	6413      	str	r3, [r2, #64]	; 0x40
 8001448:	4b24      	ldr	r3, [pc, #144]	; (80014dc <SystemClock_Config+0xc8>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001454:	2300      	movs	r3, #0
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <SystemClock_Config+0xcc>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a20      	ldr	r2, [pc, #128]	; (80014e0 <SystemClock_Config+0xcc>)
 800145e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <SystemClock_Config+0xcc>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001470:	2301      	movs	r3, #1
 8001472:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001474:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147a:	2302      	movs	r3, #2
 800147c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800147e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001482:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001484:	2304      	movs	r3, #4
 8001486:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001488:	2348      	movs	r3, #72	; 0x48
 800148a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800148c:	2302      	movs	r3, #2
 800148e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001490:	2303      	movs	r3, #3
 8001492:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001494:	f107 0320 	add.w	r3, r7, #32
 8001498:	4618      	mov	r0, r3
 800149a:	f003 f819 	bl	80044d0 <HAL_RCC_OscConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014a4:	f000 f9d2 	bl	800184c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a8:	230f      	movs	r3, #15
 80014aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ac:	2302      	movs	r3, #2
 80014ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	2102      	movs	r1, #2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f003 fa73 	bl	80049b0 <HAL_RCC_ClockConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014d0:	f000 f9bc 	bl	800184c <Error_Handler>
  }
}
 80014d4:	bf00      	nop
 80014d6:	3750      	adds	r7, #80	; 0x50
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40007000 	.word	0x40007000

080014e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ea:	463b      	mov	r3, r7
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <MX_ADC1_Init+0x98>)
 80014f8:	4a21      	ldr	r2, [pc, #132]	; (8001580 <MX_ADC1_Init+0x9c>)
 80014fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <MX_ADC1_Init+0x98>)
 80014fe:	2200      	movs	r2, #0
 8001500:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001502:	4b1e      	ldr	r3, [pc, #120]	; (800157c <MX_ADC1_Init+0x98>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <MX_ADC1_Init+0x98>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <MX_ADC1_Init+0x98>)
 8001510:	2200      	movs	r2, #0
 8001512:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <MX_ADC1_Init+0x98>)
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <MX_ADC1_Init+0x98>)
 800151e:	2200      	movs	r2, #0
 8001520:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <MX_ADC1_Init+0x98>)
 8001524:	4a17      	ldr	r2, [pc, #92]	; (8001584 <MX_ADC1_Init+0xa0>)
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <MX_ADC1_Init+0x98>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <MX_ADC1_Init+0x98>)
 8001530:	2201      	movs	r2, #1
 8001532:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_ADC1_Init+0x98>)
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_ADC1_Init+0x98>)
 800153e:	2201      	movs	r2, #1
 8001540:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001542:	480e      	ldr	r0, [pc, #56]	; (800157c <MX_ADC1_Init+0x98>)
 8001544:	f000 ffd0 	bl	80024e8 <HAL_ADC_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800154e:	f000 f97d 	bl	800184c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001552:	230a      	movs	r3, #10
 8001554:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001556:	2301      	movs	r3, #1
 8001558:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800155e:	463b      	mov	r3, r7
 8001560:	4619      	mov	r1, r3
 8001562:	4806      	ldr	r0, [pc, #24]	; (800157c <MX_ADC1_Init+0x98>)
 8001564:	f001 f804 	bl	8002570 <HAL_ADC_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800156e:	f000 f96d 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000434 	.word	0x20000434
 8001580:	40012000 	.word	0x40012000
 8001584:	0f000001 	.word	0x0f000001

08001588 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <MX_I2C1_Init+0x50>)
 800158e:	4a13      	ldr	r2, [pc, #76]	; (80015dc <MX_I2C1_Init+0x54>)
 8001590:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_I2C1_Init+0x50>)
 8001594:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <MX_I2C1_Init+0x58>)
 8001596:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <MX_I2C1_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <MX_I2C1_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <MX_I2C1_Init+0x50>)
 80015a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <MX_I2C1_Init+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <MX_I2C1_Init+0x50>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <MX_I2C1_Init+0x50>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <MX_I2C1_Init+0x50>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015c4:	4804      	ldr	r0, [pc, #16]	; (80015d8 <MX_I2C1_Init+0x50>)
 80015c6:	f001 fcc7 	bl	8002f58 <HAL_I2C_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015d0:	f000 f93c 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000388 	.word	0x20000388
 80015dc:	40005400 	.word	0x40005400
 80015e0:	000186a0 	.word	0x000186a0

080015e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <MX_SPI3_Init+0x64>)
 80015ea:	4a18      	ldr	r2, [pc, #96]	; (800164c <MX_SPI3_Init+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <MX_SPI3_Init+0x64>)
 80015f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_SPI3_Init+0x64>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <MX_SPI3_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_SPI3_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <MX_SPI3_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_SPI3_Init+0x64>)
 8001610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001614:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <MX_SPI3_Init+0x64>)
 8001618:	2200      	movs	r2, #0
 800161a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <MX_SPI3_Init+0x64>)
 800161e:	2200      	movs	r2, #0
 8001620:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <MX_SPI3_Init+0x64>)
 8001624:	2200      	movs	r2, #0
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001628:	4b07      	ldr	r3, [pc, #28]	; (8001648 <MX_SPI3_Init+0x64>)
 800162a:	2200      	movs	r2, #0
 800162c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <MX_SPI3_Init+0x64>)
 8001630:	220a      	movs	r2, #10
 8001632:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001634:	4804      	ldr	r0, [pc, #16]	; (8001648 <MX_SPI3_Init+0x64>)
 8001636:	f003 fbad 	bl	8004d94 <HAL_SPI_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001640:	f000 f904 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200003dc 	.word	0x200003dc
 800164c:	40003c00 	.word	0x40003c00

08001650 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <MX_USART2_UART_Init+0x4c>)
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <MX_USART2_UART_Init+0x50>)
 8001658:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <MX_USART2_UART_Init+0x4c>)
 800165c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001660:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <MX_USART2_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <MX_USART2_UART_Init+0x4c>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <MX_USART2_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <MX_USART2_UART_Init+0x4c>)
 8001676:	220c      	movs	r2, #12
 8001678:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <MX_USART2_UART_Init+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_USART2_UART_Init+0x4c>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_USART2_UART_Init+0x4c>)
 8001688:	f004 f8d8 	bl	800583c <HAL_UART_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001692:	f000 f8db 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	2000047c 	.word	0x2000047c
 80016a0:	40004400 	.word	0x40004400

080016a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	4b5e      	ldr	r3, [pc, #376]	; (8001838 <MX_GPIO_Init+0x194>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a5d      	ldr	r2, [pc, #372]	; (8001838 <MX_GPIO_Init+0x194>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b5b      	ldr	r3, [pc, #364]	; (8001838 <MX_GPIO_Init+0x194>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b57      	ldr	r3, [pc, #348]	; (8001838 <MX_GPIO_Init+0x194>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a56      	ldr	r2, [pc, #344]	; (8001838 <MX_GPIO_Init+0x194>)
 80016e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b54      	ldr	r3, [pc, #336]	; (8001838 <MX_GPIO_Init+0x194>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	4b50      	ldr	r3, [pc, #320]	; (8001838 <MX_GPIO_Init+0x194>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a4f      	ldr	r2, [pc, #316]	; (8001838 <MX_GPIO_Init+0x194>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b4d      	ldr	r3, [pc, #308]	; (8001838 <MX_GPIO_Init+0x194>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	4b49      	ldr	r3, [pc, #292]	; (8001838 <MX_GPIO_Init+0x194>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a48      	ldr	r2, [pc, #288]	; (8001838 <MX_GPIO_Init+0x194>)
 8001718:	f043 0302 	orr.w	r3, r3, #2
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b46      	ldr	r3, [pc, #280]	; (8001838 <MX_GPIO_Init+0x194>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	603b      	str	r3, [r7, #0]
 800172e:	4b42      	ldr	r3, [pc, #264]	; (8001838 <MX_GPIO_Init+0x194>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a41      	ldr	r2, [pc, #260]	; (8001838 <MX_GPIO_Init+0x194>)
 8001734:	f043 0308 	orr.w	r3, r3, #8
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b3f      	ldr	r3, [pc, #252]	; (8001838 <MX_GPIO_Init+0x194>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|RXEN_Pin|TXEN_Pin
 8001746:	2200      	movs	r2, #0
 8001748:	f248 6103 	movw	r1, #34307	; 0x8603
 800174c:	483b      	ldr	r0, [pc, #236]	; (800183c <MX_GPIO_Init+0x198>)
 800174e:	f001 fbe9 	bl	8002f24 <HAL_GPIO_WritePin>
                          |LORA_NSS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SWANT_GPIO_Port, SWANT_Pin, GPIO_PIN_SET);
 8001752:	2201      	movs	r2, #1
 8001754:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001758:	4839      	ldr	r0, [pc, #228]	; (8001840 <MX_GPIO_Init+0x19c>)
 800175a:	f001 fbe3 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 800175e:	2201      	movs	r2, #1
 8001760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001764:	4835      	ldr	r0, [pc, #212]	; (800183c <MX_GPIO_Init+0x198>)
 8001766:	f001 fbdd 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	4835      	ldr	r0, [pc, #212]	; (8001844 <MX_GPIO_Init+0x1a0>)
 8001770:	f001 fbd8 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8001774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	482d      	ldr	r0, [pc, #180]	; (8001840 <MX_GPIO_Init+0x19c>)
 800178a:	f001 fa31 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin MODE_Pin RXEN_Pin
                           TXEN_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|MODE_Pin|RXEN_Pin
 800178e:	f248 7303 	movw	r3, #34563	; 0x8703
 8001792:	617b      	str	r3, [r7, #20]
                          |TXEN_Pin|LORA_NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001794:	2301      	movs	r3, #1
 8001796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	4619      	mov	r1, r3
 80017a6:	4825      	ldr	r0, [pc, #148]	; (800183c <MX_GPIO_Init+0x198>)
 80017a8:	f001 fa22 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_Pin */
  GPIO_InitStruct.Pin = DEBUG_Pin;
 80017ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017b6:	2301      	movs	r3, #1
 80017b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEBUG_GPIO_Port, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	4820      	ldr	r0, [pc, #128]	; (8001844 <MX_GPIO_Init+0x1a0>)
 80017c2:	f001 fa15 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWANT_Pin */
  GPIO_InitStruct.Pin = SWANT_Pin;
 80017c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017cc:	2301      	movs	r3, #1
 80017ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SWANT_GPIO_Port, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	4818      	ldr	r0, [pc, #96]	; (8001840 <MX_GPIO_Init+0x19c>)
 80017e0:	f001 fa06 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO3_Pin */
  GPIO_InitStruct.Pin = DIO3_Pin;
 80017e4:	2304      	movs	r3, #4
 80017e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO3_GPIO_Port, &GPIO_InitStruct);
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4619      	mov	r1, r3
 80017f6:	4814      	ldr	r0, [pc, #80]	; (8001848 <MX_GPIO_Init+0x1a4>)
 80017f8:	f001 f9fa 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO2_Pin LORA_DIO1_Pin LORA_BUSY_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin|LORA_DIO1_Pin|LORA_BUSY_Pin;
 80017fc:	2370      	movs	r3, #112	; 0x70
 80017fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001800:	2300      	movs	r3, #0
 8001802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	4619      	mov	r1, r3
 800180e:	480d      	ldr	r0, [pc, #52]	; (8001844 <MX_GPIO_Init+0x1a0>)
 8001810:	f001 f9ee 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RESET_Pin */
  GPIO_InitStruct.Pin = LORA_RESET_Pin;
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	2301      	movs	r3, #1
 800181a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LORA_RESET_GPIO_Port, &GPIO_InitStruct);
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	4619      	mov	r1, r3
 800182a:	4806      	ldr	r0, [pc, #24]	; (8001844 <MX_GPIO_Init+0x1a0>)
 800182c:	f001 f9e0 	bl	8002bf0 <HAL_GPIO_Init>

}
 8001830:	bf00      	nop
 8001832:	3728      	adds	r7, #40	; 0x28
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40023800 	.word	0x40023800
 800183c:	40020000 	.word	0x40020000
 8001840:	40020800 	.word	0x40020800
 8001844:	40020400 	.word	0x40020400
 8001848:	40020c00 	.word	0x40020c00

0800184c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001850:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001852:	e7fe      	b.n	8001852 <Error_Handler+0x6>

08001854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <HAL_MspInit+0x4c>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	4a0f      	ldr	r2, [pc, #60]	; (80018a0 <HAL_MspInit+0x4c>)
 8001864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001868:	6453      	str	r3, [r2, #68]	; 0x44
 800186a:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <HAL_MspInit+0x4c>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_MspInit+0x4c>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a08      	ldr	r2, [pc, #32]	; (80018a0 <HAL_MspInit+0x4c>)
 8001880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_MspInit+0x4c>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800

080018a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a17      	ldr	r2, [pc, #92]	; (8001920 <HAL_ADC_MspInit+0x7c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d127      	bne.n	8001916 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	4b16      	ldr	r3, [pc, #88]	; (8001924 <HAL_ADC_MspInit+0x80>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a15      	ldr	r2, [pc, #84]	; (8001924 <HAL_ADC_MspInit+0x80>)
 80018d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b13      	ldr	r3, [pc, #76]	; (8001924 <HAL_ADC_MspInit+0x80>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_ADC_MspInit+0x80>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a0e      	ldr	r2, [pc, #56]	; (8001924 <HAL_ADC_MspInit+0x80>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <HAL_ADC_MspInit+0x80>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = PDET_Pin;
 80018fe:	2301      	movs	r3, #1
 8001900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001902:	2303      	movs	r3, #3
 8001904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PDET_GPIO_Port, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	4805      	ldr	r0, [pc, #20]	; (8001928 <HAL_ADC_MspInit+0x84>)
 8001912:	f001 f96d 	bl	8002bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001916:	bf00      	nop
 8001918:	3728      	adds	r7, #40	; 0x28
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40012000 	.word	0x40012000
 8001924:	40023800 	.word	0x40023800
 8001928:	40020800 	.word	0x40020800

0800192c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a19      	ldr	r2, [pc, #100]	; (80019b0 <HAL_I2C_MspInit+0x84>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d12c      	bne.n	80019a8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <HAL_I2C_MspInit+0x88>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a17      	ldr	r2, [pc, #92]	; (80019b4 <HAL_I2C_MspInit+0x88>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <HAL_I2C_MspInit+0x88>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800196a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800196e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001970:	2312      	movs	r3, #18
 8001972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001974:	2301      	movs	r3, #1
 8001976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800197c:	2304      	movs	r3, #4
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4619      	mov	r1, r3
 8001986:	480c      	ldr	r0, [pc, #48]	; (80019b8 <HAL_I2C_MspInit+0x8c>)
 8001988:	f001 f932 	bl	8002bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_I2C_MspInit+0x88>)
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <HAL_I2C_MspInit+0x88>)
 8001996:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800199a:	6413      	str	r3, [r2, #64]	; 0x40
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_I2C_MspInit+0x88>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019a8:	bf00      	nop
 80019aa:	3728      	adds	r7, #40	; 0x28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40005400 	.word	0x40005400
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020400 	.word	0x40020400

080019bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	; 0x28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a19      	ldr	r2, [pc, #100]	; (8001a40 <HAL_SPI_MspInit+0x84>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d12c      	bne.n	8001a38 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_SPI_MspInit+0x88>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	4a17      	ldr	r2, [pc, #92]	; (8001a44 <HAL_SPI_MspInit+0x88>)
 80019e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ec:	6413      	str	r3, [r2, #64]	; 0x40
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <HAL_SPI_MspInit+0x88>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_SPI_MspInit+0x88>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a10      	ldr	r2, [pc, #64]	; (8001a44 <HAL_SPI_MspInit+0x88>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_SPI_MspInit+0x88>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001a16:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a24:	2303      	movs	r3, #3
 8001a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a28:	2306      	movs	r3, #6
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4619      	mov	r1, r3
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <HAL_SPI_MspInit+0x8c>)
 8001a34:	f001 f8dc 	bl	8002bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a38:	bf00      	nop
 8001a3a:	3728      	adds	r7, #40	; 0x28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40003c00 	.word	0x40003c00
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020800 	.word	0x40020800

08001a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a19      	ldr	r2, [pc, #100]	; (8001ad0 <HAL_UART_MspInit+0x84>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d12b      	bne.n	8001ac6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <HAL_UART_MspInit+0x88>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	4a17      	ldr	r2, [pc, #92]	; (8001ad4 <HAL_UART_MspInit+0x88>)
 8001a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <HAL_UART_MspInit+0x88>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_UART_MspInit+0x88>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a10      	ldr	r2, [pc, #64]	; (8001ad4 <HAL_UART_MspInit+0x88>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <HAL_UART_MspInit+0x88>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001aa6:	230c      	movs	r3, #12
 8001aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ab6:	2307      	movs	r3, #7
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <HAL_UART_MspInit+0x8c>)
 8001ac2:	f001 f895 	bl	8002bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ac6:	bf00      	nop
 8001ac8:	3728      	adds	r7, #40	; 0x28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40004400 	.word	0x40004400
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020000 	.word	0x40020000

08001adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <NMI_Handler+0x4>

08001ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <HardFault_Handler+0x4>

08001ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <MemManage_Handler+0x4>

08001aee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af2:	e7fe      	b.n	8001af2 <BusFault_Handler+0x4>

08001af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <UsageFault_Handler+0x4>

08001afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b28:	f000 fc9c 	bl	8002464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <OTG_FS_IRQHandler+0x10>)
 8001b36:	f001 fc97 	bl	8003468 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20001990 	.word	0x20001990

08001b44 <sxSpiTransmit>:
#include "main.h"
#include "sx1280_custom.h"


void sxSpiTransmit(sx1280_custom *radio, uint8_t *txBuf, uint8_t size) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6858      	ldr	r0, [r3, #4]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	891b      	ldrh	r3, [r3, #8]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f001 f9e1 	bl	8002f24 <HAL_GPIO_WritePin>
    radio->spi_return = HAL_SPI_Transmit(radio->spiHandle, txBuf, size, 1000);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6818      	ldr	r0, [r3, #0]
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	68b9      	ldr	r1, [r7, #8]
 8001b70:	f003 f974 	bl	8004e5c <HAL_SPI_Transmit>
 8001b74:	4603      	mov	r3, r0
 8001b76:	461a      	mov	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6858      	ldr	r0, [r3, #4]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	891b      	ldrh	r3, [r3, #8]
 8001b86:	2201      	movs	r2, #1
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f001 f9cb 	bl	8002f24 <HAL_GPIO_WritePin>
}
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <sxSpiTransmitReceive>:
void sxSpiTransmitReceive(sx1280_custom *radio, uint8_t *txBuf, uint8_t *rxBuf, uint8_t size) {
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af02      	add	r7, sp, #8
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6858      	ldr	r0, [r3, #4]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	891b      	ldrh	r3, [r3, #8]
 8001bac:	2200      	movs	r2, #0
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f001 f9b8 	bl	8002f24 <HAL_GPIO_WritePin>
    radio->spi_return = HAL_SPI_TransmitReceive(radio->spiHandle,txBuf,rxBuf,size,1000);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	68b9      	ldr	r1, [r7, #8]
 8001bc8:	f003 fb85 	bl	80052d6 <HAL_SPI_TransmitReceive>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6858      	ldr	r0, [r3, #4]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	891b      	ldrh	r3, [r3, #8]
 8001bde:	2201      	movs	r2, #1
 8001be0:	4619      	mov	r1, r3
 8001be2:	f001 f99f 	bl	8002f24 <HAL_GPIO_WritePin>
}
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <sxInit>:


void sxInit(sx1280_custom *radio, SPI_HandleTypeDef *spiHandle,
        GPIO_TypeDef *csPinBank, uint16_t csPin) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	807b      	strh	r3, [r7, #2]

    radio->spiHandle = spiHandle;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	601a      	str	r2, [r3, #0]
    radio->csPinBank = csPinBank;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	605a      	str	r2, [r3, #4]
    radio->csPin = csPin;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	887a      	ldrh	r2, [r7, #2]
 8001c0e:	811a      	strh	r2, [r3, #8]


    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2180      	movs	r1, #128	; 0x80
 8001c14:	4825      	ldr	r0, [pc, #148]	; (8001cac <sxInit+0xbc>)
 8001c16:	f001 f985 	bl	8002f24 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001c1a:	2002      	movs	r0, #2
 8001c1c:	f000 fc42 	bl	80024a4 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 8001c20:	2201      	movs	r2, #1
 8001c22:	2180      	movs	r1, #128	; 0x80
 8001c24:	4821      	ldr	r0, [pc, #132]	; (8001cac <sxInit+0xbc>)
 8001c26:	f001 f97d 	bl	8002f24 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001c2a:	2002      	movs	r0, #2
 8001c2c:	f000 fc3a 	bl	80024a4 <HAL_Delay>

    SetStandbyRC(radio);
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f000 f850 	bl	8001cd6 <SetStandbyRC>
    HAL_Delay(3);
 8001c36:	2003      	movs	r0, #3
 8001c38:	f000 fc34 	bl	80024a4 <HAL_Delay>
    setPacketLora(radio);
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 f875 	bl	8001d2c <setPacketLora>
    HAL_Delay(2);
 8001c42:	2002      	movs	r0, #2
 8001c44:	f000 fc2e 	bl	80024a4 <HAL_Delay>
    SetRfFrequency2(radio);
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 f859 	bl	8001d00 <SetRfFrequency2>
    HAL_Delay(2);
 8001c4e:	2002      	movs	r0, #2
 8001c50:	f000 fc28 	bl	80024a4 <HAL_Delay>

    SetBufferBaseAddresses(radio, 0, 0); // 127
 8001c54:	2200      	movs	r2, #0
 8001c56:	2100      	movs	r1, #0
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f000 f87d 	bl	8001d58 <SetBufferBaseAddresses>
    HAL_Delay(1);
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f000 fc20 	bl	80024a4 <HAL_Delay>
    //SetModulationParams(radio, 0x90, 0x0A, 0x01); // Spreading factor 9, 1600 BW (0x0A), CR 4/5. Sensitivity: -111
    SetModulationParams(radio, 0x80, 0x18, 0x01); // Spreading factor 8, 800 BW (0x0A), CR 4/5. Sensitivity: -115
 8001c64:	2301      	movs	r3, #1
 8001c66:	2218      	movs	r2, #24
 8001c68:	2180      	movs	r1, #128	; 0x80
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 f88e 	bl	8001d8c <SetModulationParams>
    HAL_Delay(1);
 8001c70:	2001      	movs	r0, #1
 8001c72:	f000 fc17 	bl	80024a4 <HAL_Delay>

    WriteRegisterByte(radio, 0x925, 0x32); // must be used for SF9-12. Different for 5-8 (page 112)
 8001c76:	2232      	movs	r2, #50	; 0x32
 8001c78:	f640 1125 	movw	r1, #2341	; 0x925
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 f9e3 	bl	8002048 <WriteRegisterByte>

    HAL_Delay(1);
 8001c82:	2001      	movs	r0, #1
 8001c84:	f000 fc0e 	bl	80024a4 <HAL_Delay>
    SetPacketParamsLora(radio, 12, 0x80, 32, 0x20, 0x40); // 12 symbol preamble, implicit header, 32 byte payload, CRC enabled, Normal IQ
 8001c88:	2340      	movs	r3, #64	; 0x40
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	2320      	movs	r3, #32
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2320      	movs	r3, #32
 8001c92:	2280      	movs	r2, #128	; 0x80
 8001c94:	210c      	movs	r1, #12
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f000 f899 	bl	8001dce <SetPacketParamsLora>
    HAL_Delay(1);
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	f000 fc01 	bl	80024a4 <HAL_Delay>
}
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40020400 	.word	0x40020400

08001cb0 <sxSetDio1Pin>:

void sxSetDio1Pin(sx1280_custom *radio, GPIO_TypeDef *Dio1PinBank, uint16_t Dio1Pin) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	80fb      	strh	r3, [r7, #6]
    radio->Dio1PinBank = Dio1PinBank;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	60da      	str	r2, [r3, #12]
    radio->Dio1Pin = Dio1Pin;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	88fa      	ldrh	r2, [r7, #6]
 8001cc8:	821a      	strh	r2, [r3, #16]
}
 8001cca:	bf00      	nop
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <SetStandbyRC>:

void SetStandbyRC(sx1280_custom *radio) {
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b084      	sub	sp, #16
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[2];
    uint8_t loraTxBuf[] = { 0x80, 0x00 }; // Standby RC
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	723b      	strb	r3, [r7, #8]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	727b      	strb	r3, [r7, #9]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 2);
 8001ce6:	f107 020c 	add.w	r2, r7, #12
 8001cea:	f107 0108 	add.w	r1, r7, #8
 8001cee:	2302      	movs	r3, #2
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ff50 	bl	8001b96 <sxSpiTransmitReceive>
}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <SetRfFrequency2>:
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x86, 0xBD, 0x3B, 0x14 }; // SetRfFrequency
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 4);
}

void SetRfFrequency2(sx1280_custom *radio) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
    // 52e6/(2^18) multiples of
    // 2.46 = 2.46 * 10^9/(52e6/(2^18)) = 12401428 = 0xBD3B14
    // uint32_t rfFreq = 12401428;

    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x86, 0xBE, 0xC4, 0xEC }; // SetRfFrequency
 8001d08:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <SetRfFrequency2+0x28>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60bb      	str	r3, [r7, #8]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 4);
 8001d0e:	f107 020c 	add.w	r2, r7, #12
 8001d12:	f107 0108 	add.w	r1, r7, #8
 8001d16:	2304      	movs	r3, #4
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ff3c 	bl	8001b96 <sxSpiTransmitReceive>
}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	0800ba18 	.word	0x0800ba18

08001d2c <setPacketLora>:

void setPacketLora(sx1280_custom *radio) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[2];
    uint8_t loraTxBuf[] = { 0x8A, 0x01 }; // Set packet to lora
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <setPacketLora+0x28>)
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	813b      	strh	r3, [r7, #8]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 2);
 8001d3a:	f107 020c 	add.w	r2, r7, #12
 8001d3e:	f107 0108 	add.w	r1, r7, #8
 8001d42:	2302      	movs	r3, #2
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ff26 	bl	8001b96 <sxSpiTransmitReceive>
}
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	0800ba1c 	.word	0x0800ba1c

08001d58 <SetBufferBaseAddresses>:
    // Set to -12 dBm = 0.06 mW
    uint8_t loraTxBuf[] = { 0x8E, power, rampTime };
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 3);
}

void SetBufferBaseAddresses(sx1280_custom *radio, uint8_t txBaseAddress, uint8_t rxBaseAddress) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	70fb      	strb	r3, [r7, #3]
 8001d64:	4613      	mov	r3, r2
 8001d66:	70bb      	strb	r3, [r7, #2]
    uint8_t loraRxBuf[3];
    uint8_t loraTxBuf[] = { 0x8F, txBaseAddress, rxBaseAddress };
 8001d68:	238f      	movs	r3, #143	; 0x8f
 8001d6a:	723b      	strb	r3, [r7, #8]
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	727b      	strb	r3, [r7, #9]
 8001d70:	78bb      	ldrb	r3, [r7, #2]
 8001d72:	72bb      	strb	r3, [r7, #10]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001d74:	f107 020c 	add.w	r2, r7, #12
 8001d78:	f107 0108 	add.w	r1, r7, #8
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ff09 	bl	8001b96 <sxSpiTransmitReceive>
}
 8001d84:	bf00      	nop
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <SetModulationParams>:

void SetModulationParams(sx1280_custom *radio, uint8_t modParam1, uint8_t modParam2,
        uint8_t modParam3) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	4608      	mov	r0, r1
 8001d96:	4611      	mov	r1, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	70fb      	strb	r3, [r7, #3]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	70bb      	strb	r3, [r7, #2]
 8001da2:	4613      	mov	r3, r2
 8001da4:	707b      	strb	r3, [r7, #1]
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x8B, modParam1, modParam2, modParam3 };
 8001da6:	238b      	movs	r3, #139	; 0x8b
 8001da8:	723b      	strb	r3, [r7, #8]
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	727b      	strb	r3, [r7, #9]
 8001dae:	78bb      	ldrb	r3, [r7, #2]
 8001db0:	72bb      	strb	r3, [r7, #10]
 8001db2:	787b      	ldrb	r3, [r7, #1]
 8001db4:	72fb      	strb	r3, [r7, #11]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001db6:	f107 020c 	add.w	r2, r7, #12
 8001dba:	f107 0108 	add.w	r1, r7, #8
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff fee8 	bl	8001b96 <sxSpiTransmitReceive>
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <SetPacketParamsLora>:

void SetPacketParamsLora(sx1280_custom *radio, uint8_t param1, uint8_t param2, uint8_t param3,
        uint8_t param4, uint8_t param5) {
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b084      	sub	sp, #16
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	4608      	mov	r0, r1
 8001dd8:	4611      	mov	r1, r2
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4603      	mov	r3, r0
 8001dde:	70fb      	strb	r3, [r7, #3]
 8001de0:	460b      	mov	r3, r1
 8001de2:	70bb      	strb	r3, [r7, #2]
 8001de4:	4613      	mov	r3, r2
 8001de6:	707b      	strb	r3, [r7, #1]
    uint8_t loraTxBuf[] = { 0x8C, param1, param2, param3, param4, param5 };
 8001de8:	238c      	movs	r3, #140	; 0x8c
 8001dea:	723b      	strb	r3, [r7, #8]
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	727b      	strb	r3, [r7, #9]
 8001df0:	78bb      	ldrb	r3, [r7, #2]
 8001df2:	72bb      	strb	r3, [r7, #10]
 8001df4:	787b      	ldrb	r3, [r7, #1]
 8001df6:	72fb      	strb	r3, [r7, #11]
 8001df8:	7e3b      	ldrb	r3, [r7, #24]
 8001dfa:	733b      	strb	r3, [r7, #12]
 8001dfc:	7f3b      	ldrb	r3, [r7, #28]
 8001dfe:	737b      	strb	r3, [r7, #13]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8001e00:	f107 0308 	add.w	r3, r7, #8
 8001e04:	2206      	movs	r2, #6
 8001e06:	4619      	mov	r1, r3
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff fe9b 	bl	8001b44 <sxSpiTransmit>
}
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <ReadBuffer>:
    HAL_SPI_Transmit(radio->spiHandle, data, size, 1000);
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);

}

void ReadBuffer(sx1280_custom *radio, uint8_t offset, uint8_t size, uint8_t *data) {
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b086      	sub	sp, #24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	72fb      	strb	r3, [r7, #11]
 8001e24:	4613      	mov	r3, r2
 8001e26:	72bb      	strb	r3, [r7, #10]
    uint8_t loraTxBuf[] = { 0x1B, offset, 0x00};
 8001e28:	231b      	movs	r3, #27
 8001e2a:	753b      	strb	r3, [r7, #20]
 8001e2c:	7afb      	ldrb	r3, [r7, #11]
 8001e2e:	757b      	strb	r3, [r7, #21]
 8001e30:	2300      	movs	r3, #0
 8001e32:	75bb      	strb	r3, [r7, #22]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6858      	ldr	r0, [r3, #4]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	891b      	ldrh	r3, [r3, #8]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f001 f870 	bl	8002f24 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(radio->spiHandle, loraTxBuf, sizeof(loraTxBuf), 1000);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6818      	ldr	r0, [r3, #0]
 8001e48:	f107 0114 	add.w	r1, r7, #20
 8001e4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e50:	2203      	movs	r2, #3
 8001e52:	f003 f803 	bl	8004e5c <HAL_SPI_Transmit>
    HAL_SPI_Receive(radio->spiHandle, data, size, 1000);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	7abb      	ldrb	r3, [r7, #10]
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	f003 f92e 	bl	80050c4 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6858      	ldr	r0, [r3, #4]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	891b      	ldrh	r3, [r3, #8]
 8001e70:	2201      	movs	r2, #1
 8001e72:	4619      	mov	r1, r3
 8001e74:	f001 f856 	bl	8002f24 <HAL_GPIO_WritePin>
}
 8001e78:	bf00      	nop
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <SetDioIrqParams>:

void SetDioIrqParams(sx1280_custom *radio, uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask,
        uint16_t dio3Mask) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	4608      	mov	r0, r1
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4603      	mov	r3, r0
 8001e90:	817b      	strh	r3, [r7, #10]
 8001e92:	460b      	mov	r3, r1
 8001e94:	813b      	strh	r3, [r7, #8]
 8001e96:	4613      	mov	r3, r2
 8001e98:	80fb      	strh	r3, [r7, #6]
    uint8_t loraTxBuf[9];
    loraTxBuf[0] = 0x8D;
 8001e9a:	238d      	movs	r3, #141	; 0x8d
 8001e9c:	753b      	strb	r3, [r7, #20]
    loraTxBuf[1] = (uint8_t) ((irqMask >> 8) & 0x00FF);
 8001e9e:	897b      	ldrh	r3, [r7, #10]
 8001ea0:	0a1b      	lsrs	r3, r3, #8
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	757b      	strb	r3, [r7, #21]
    loraTxBuf[2] = (uint8_t) (irqMask & 0x00FF);
 8001ea8:	897b      	ldrh	r3, [r7, #10]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	75bb      	strb	r3, [r7, #22]
    loraTxBuf[3] = (uint8_t) ((dio1Mask >> 8) & 0x00FF);
 8001eae:	893b      	ldrh	r3, [r7, #8]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	75fb      	strb	r3, [r7, #23]
    loraTxBuf[4] = (uint8_t) (dio1Mask & 0x00FF);
 8001eb8:	893b      	ldrh	r3, [r7, #8]
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	763b      	strb	r3, [r7, #24]
    loraTxBuf[5] = (uint8_t) ((dio2Mask >> 8) & 0x00FF);
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	0a1b      	lsrs	r3, r3, #8
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	767b      	strb	r3, [r7, #25]
    loraTxBuf[6] = (uint8_t) (dio2Mask & 0x00FF);
 8001ec8:	88fb      	ldrh	r3, [r7, #6]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	76bb      	strb	r3, [r7, #26]
    loraTxBuf[7] = (uint8_t) ((dio3Mask >> 8) & 0x00FF);
 8001ece:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	76fb      	strb	r3, [r7, #27]
    loraTxBuf[8] = (uint8_t) (dio3Mask & 0x00FF);
 8001ed8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	773b      	strb	r3, [r7, #28]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	2209      	movs	r2, #9
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f7ff fe2c 	bl	8001b44 <sxSpiTransmit>
}
 8001eec:	bf00      	nop
 8001eee:	3720      	adds	r7, #32
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <ClrIrqStatus>:

void ClrIrqStatus(sx1280_custom *radio, uint16_t irqMask) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	807b      	strh	r3, [r7, #2]
    uint8_t buf[3];
    buf[0] = 0X97;
 8001f00:	2397      	movs	r3, #151	; 0x97
 8001f02:	733b      	strb	r3, [r7, #12]
    buf[1] = (uint8_t) (((uint16_t) irqMask >> 8) & 0x00FF);
 8001f04:	887b      	ldrh	r3, [r7, #2]
 8001f06:	0a1b      	lsrs	r3, r3, #8
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) ((uint16_t) irqMask & 0x00FF);
 8001f0e:	887b      	ldrh	r3, [r7, #2]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	73bb      	strb	r3, [r7, #14]
    sxSpiTransmit(radio, buf, sizeof(buf));
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	2203      	movs	r2, #3
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff fe11 	bl	8001b44 <sxSpiTransmit>
}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <GetIrqStatus>:

void GetIrqStatus(sx1280_custom *radio) {
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]

    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x15, 0x00, 0x00, 0x00 };
 8001f32:	2315      	movs	r3, #21
 8001f34:	723b      	strb	r3, [r7, #8]
 8001f36:	2300      	movs	r3, #0
 8001f38:	727b      	strb	r3, [r7, #9]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	72bb      	strb	r3, [r7, #10]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	72fb      	strb	r3, [r7, #11]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001f42:	f107 020c 	add.w	r2, r7, #12
 8001f46:	f107 0108 	add.w	r1, r7, #8
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff fe22 	bl	8001b96 <sxSpiTransmitReceive>

    radio->IrqStatus = (uint16_t) (loraRxBuf[2] << 8 | loraRxBuf[3]);
 8001f52:	7bbb      	ldrb	r3, [r7, #14]
 8001f54:	021b      	lsls	r3, r3, #8
 8001f56:	b21a      	sxth	r2, r3
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
 8001f5a:	b21b      	sxth	r3, r3
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	b21b      	sxth	r3, r3
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	84da      	strh	r2, [r3, #38]	; 0x26

    if (radio->IrqStatus & (1 << 6)) {
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d004      	beq.n	8001f7c <GetIrqStatus+0x52>
        radio->crcError = 1;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
    else {
        radio->crcError = 0;
    }
}
 8001f7a:	e003      	b.n	8001f84 <GetIrqStatus+0x5a>
        radio->crcError = 0;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001f84:	bf00      	nop
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <SetRx>:
    buf[2] = (uint8_t) (((uint16_t) periodBaseCount >> 8) & 0x00FF);
    buf[3] = (uint8_t) ((uint16_t) periodBaseCount & 0x00FF);
    sxSpiTransmit(radio, buf, sizeof(buf));
}

void SetRx(sx1280_custom *radio, uint8_t periodBase, uint16_t periodBaseCount) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	70fb      	strb	r3, [r7, #3]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	803b      	strh	r3, [r7, #0]
    uint8_t buf[4];
    buf[0] = 0X82;
 8001f9c:	2382      	movs	r3, #130	; 0x82
 8001f9e:	733b      	strb	r3, [r7, #12]
    buf[1] = periodBase;
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) (((uint16_t) periodBaseCount >> 8) & 0x00FF);
 8001fa4:	883b      	ldrh	r3, [r7, #0]
 8001fa6:	0a1b      	lsrs	r3, r3, #8
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	73bb      	strb	r3, [r7, #14]
    buf[3] = (uint8_t) ((uint16_t) periodBaseCount & 0x00FF);
 8001fae:	883b      	ldrh	r3, [r7, #0]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, buf, sizeof(buf));
 8001fb4:	f107 030c 	add.w	r3, r7, #12
 8001fb8:	2204      	movs	r2, #4
 8001fba:	4619      	mov	r1, r3
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff fdc1 	bl	8001b44 <sxSpiTransmit>
}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <GetPacketStatusLora>:

void GetPacketStatusLora(sx1280_custom *radio) {
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x1D, 0x00, 0x00, 0x00};
 8001fd2:	231d      	movs	r3, #29
 8001fd4:	723b      	strb	r3, [r7, #8]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	727b      	strb	r3, [r7, #9]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	72bb      	strb	r3, [r7, #10]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	72fb      	strb	r3, [r7, #11]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001fe2:	f107 020c 	add.w	r2, r7, #12
 8001fe6:	f107 0108 	add.w	r1, r7, #8
 8001fea:	2304      	movs	r3, #4
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff fdd2 	bl	8001b96 <sxSpiTransmitReceive>

    radio->rssiSync = loraRxBuf[2];
 8001ff2:	7bba      	ldrb	r2, [r7, #14]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    radio->rawSnr = loraRxBuf[3];
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	b25a      	sxtb	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    radio->rssi = -((float) radio->rssiSync)/2;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800200a:	ee07 3a90 	vmov	s15, r3
 800200e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002012:	eeb1 7a67 	vneg.f32	s14, s15
 8002016:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800201a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    radio->snr = ((float) radio->rawSnr)/4;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800202a:	ee07 3a90 	vmov	s15, r3
 800202e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002032:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002036:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <WriteRegisterByte>:

void GetRxBufferStatus(sx1280_custom *radio) {

}

void WriteRegisterByte(sx1280_custom *radio, uint16_t address, uint8_t data) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	807b      	strh	r3, [r7, #2]
 8002054:	4613      	mov	r3, r2
 8002056:	707b      	strb	r3, [r7, #1]
    uint8_t loraTxBuf[4];
    loraTxBuf[0] = 0x18;
 8002058:	2318      	movs	r3, #24
 800205a:	733b      	strb	r3, [r7, #12]
    loraTxBuf[1] = (uint8_t) (((uint16_t) address >> 8) & 0x00FF);
 800205c:	887b      	ldrh	r3, [r7, #2]
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	b29b      	uxth	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	737b      	strb	r3, [r7, #13]
    loraTxBuf[2] = (uint8_t) ((uint16_t) address & 0x00FF);
 8002066:	887b      	ldrh	r3, [r7, #2]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	73bb      	strb	r3, [r7, #14]
    loraTxBuf[3] = data;
 800206c:	787b      	ldrb	r3, [r7, #1]
 800206e:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8002070:	f107 030c 	add.w	r3, r7, #12
 8002074:	2204      	movs	r2, #4
 8002076:	4619      	mov	r1, r3
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff fd63 	bl	8001b44 <sxSpiTransmit>
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002090:	4a14      	ldr	r2, [pc, #80]	; (80020e4 <_sbrk+0x5c>)
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <_sbrk+0x60>)
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <_sbrk+0x64>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d102      	bne.n	80020aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <_sbrk+0x64>)
 80020a6:	4a12      	ldr	r2, [pc, #72]	; (80020f0 <_sbrk+0x68>)
 80020a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <_sbrk+0x64>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d207      	bcs.n	80020c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020b8:	f007 fbc6 	bl	8009848 <__errno>
 80020bc:	4602      	mov	r2, r0
 80020be:	230c      	movs	r3, #12
 80020c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80020c2:	f04f 33ff 	mov.w	r3, #4294967295
 80020c6:	e009      	b.n	80020dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020c8:	4b08      	ldr	r3, [pc, #32]	; (80020ec <_sbrk+0x64>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <_sbrk+0x64>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	4a05      	ldr	r2, [pc, #20]	; (80020ec <_sbrk+0x64>)
 80020d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020da:	68fb      	ldr	r3, [r7, #12]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20020000 	.word	0x20020000
 80020e8:	00000400 	.word	0x00000400
 80020ec:	20000378 	.word	0x20000378
 80020f0:	20001da0 	.word	0x20001da0

080020f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020f8:	4b08      	ldr	r3, [pc, #32]	; (800211c <SystemInit+0x28>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fe:	4a07      	ldr	r2, [pc, #28]	; (800211c <SystemInit+0x28>)
 8002100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <SystemInit+0x28>)
 800210a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800210e:	609a      	str	r2, [r3, #8]
#endif
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <decode_TLM>:
    else {
        enc->debug_ranging = dec->debug;
    }
}

void decode_TLM(TLM_encoded *enc, TLM_decoded *dec) {
 8002120:	b590      	push	{r4, r7, lr}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
    dec->packet_type = enc->packet_state_bits & 1;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	b2da      	uxtb	r2, r3
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	701a      	strb	r2, [r3, #0]
    dec->flight_state = (enc->packet_state_bits >> 1) & 0b00011111;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	085b      	lsrs	r3, r3, #1
 800213e:	b2db      	uxtb	r3, r3
 8002140:	f003 031f 	and.w	r3, r3, #31
 8002144:	b2da      	uxtb	r2, r3
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	705a      	strb	r2, [r3, #1]
    dec->is_playing_music = (enc->packet_state_bits >> 6) & 1;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	099b      	lsrs	r3, r3, #6
 8002150:	b2db      	uxtb	r3, r3
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	b2da      	uxtb	r2, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	709a      	strb	r2, [r3, #2]
    dec->is_data_logging = (enc->packet_state_bits >> 7) & 1;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	09db      	lsrs	r3, r3, #7
 8002162:	b2da      	uxtb	r2, r3
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	70da      	strb	r2, [r3, #3]

    dec->pin_states = (enc->pin_states_servo & 0b00111111);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	785b      	ldrb	r3, [r3, #1]
 800216c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002170:	b2da      	uxtb	r2, r3
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	711a      	strb	r2, [r3, #4]
    dec->servo_state = (enc->pin_states_servo >> 6) & 0b00000011;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	785b      	ldrb	r3, [r3, #1]
 800217a:	099b      	lsrs	r3, r3, #6
 800217c:	b2da      	uxtb	r2, r3
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	715a      	strb	r2, [r3, #5]

    dec->systick = (enc->systick[0] << 16) | (enc->systick[1] << 8) | (enc->systick[2]);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	789b      	ldrb	r3, [r3, #2]
 8002186:	041a      	lsls	r2, r3, #16
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	78db      	ldrb	r3, [r3, #3]
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	4313      	orrs	r3, r2
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	7912      	ldrb	r2, [r2, #4]
 8002194:	4313      	orrs	r3, r2
 8002196:	461a      	mov	r2, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	609a      	str	r2, [r3, #8]

    dec->vbat = ((((uint16_t) enc->vbat_MSB) << 2) | ((uint16_t) enc->padding_vbat_LSB & 0b00000011 ) )*0.01;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	795b      	ldrb	r3, [r3, #5]
 80021a0:	009a      	lsls	r2, r3, #2
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	799b      	ldrb	r3, [r3, #6]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	4313      	orrs	r3, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9c1 	bl	8000534 <__aeabi_i2d>
 80021b2:	a36c      	add	r3, pc, #432	; (adr r3, 8002364 <decode_TLM+0x244>)
 80021b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b8:	f7fe fa26 	bl	8000608 <__aeabi_dmul>
 80021bc:	4603      	mov	r3, r0
 80021be:	460c      	mov	r4, r1
 80021c0:	4618      	mov	r0, r3
 80021c2:	4621      	mov	r1, r4
 80021c4:	f7fe fcf8 	bl	8000bb8 <__aeabi_d2f>
 80021c8:	4602      	mov	r2, r0
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	60da      	str	r2, [r3, #12]

    dec->orientation_quat[0] = ((float) enc->orientation_quat[0])/127;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80021d4:	ee07 3a90 	vmov	s15, r3
 80021d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021dc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8002358 <decode_TLM+0x238>
 80021e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	edc3 7a04 	vstr	s15, [r3, #16]
    dec->orientation_quat[1] = ((float) enc->orientation_quat[1])/127;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80021f0:	ee07 3a90 	vmov	s15, r3
 80021f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021f8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002358 <decode_TLM+0x238>
 80021fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	edc3 7a05 	vstr	s15, [r3, #20]
    dec->orientation_quat[2] = ((float) enc->orientation_quat[2])/127;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800220c:	ee07 3a90 	vmov	s15, r3
 8002210:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002214:	eddf 6a50 	vldr	s13, [pc, #320]	; 8002358 <decode_TLM+0x238>
 8002218:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	edc3 7a06 	vstr	s15, [r3, #24]
    dec->orientation_quat[3] = ((float) enc->orientation_quat[3])/127;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002228:	ee07 3a90 	vmov	s15, r3
 800222c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002230:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002358 <decode_TLM+0x238>
 8002234:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	edc3 7a07 	vstr	s15, [r3, #28]

    for (int i = 0; i < 3; i++) {
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	e01e      	b.n	8002282 <decode_TLM+0x162>
        dec->acc[i] = enc->acc[i];
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	3304      	adds	r3, #4
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8002252:	b219      	sxth	r1, r3
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	3210      	adds	r2, #16
 800225a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        dec->gyro[i] = enc->gyro[i];
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	3308      	adds	r3, #8
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800226c:	b219      	sxth	r1, r3
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3310      	adds	r3, #16
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	4413      	add	r3, r2
 8002278:	460a      	mov	r2, r1
 800227a:	80da      	strh	r2, [r3, #6]
    for (int i = 0; i < 3; i++) {
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	3301      	adds	r3, #1
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b02      	cmp	r3, #2
 8002286:	dddd      	ble.n	8002244 <decode_TLM+0x124>
    }

    dec->baro = (float) (enc->baro + 50000);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f8b3 3017 	ldrh.w	r3, [r3, #23]
 800228e:	b29b      	uxth	r3, r3
 8002290:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8002294:	3350      	adds	r3, #80	; 0x50
 8002296:	ee07 3a90 	vmov	s15, r3
 800229a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    dec->temp = ((float) enc->temp)/4;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	7e5b      	ldrb	r3, [r3, #25]
 80022a8:	ee07 3a90 	vmov	s15, r3
 80022ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022b0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80022b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    dec->altitude = ((float) enc->altitude) * 0.0625 - 48;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	8b5b      	ldrh	r3, [r3, #26]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	ee07 3a90 	vmov	s15, r3
 80022c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022cc:	ee17 0a90 	vmov	r0, s15
 80022d0:	f7fe f942 	bl	8000558 <__aeabi_f2d>
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	4b20      	ldr	r3, [pc, #128]	; (800235c <decode_TLM+0x23c>)
 80022da:	f7fe f995 	bl	8000608 <__aeabi_dmul>
 80022de:	4603      	mov	r3, r0
 80022e0:	460c      	mov	r4, r1
 80022e2:	4618      	mov	r0, r3
 80022e4:	4621      	mov	r1, r4
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <decode_TLM+0x240>)
 80022ec:	f7fd ffd4 	bl	8000298 <__aeabi_dsub>
 80022f0:	4603      	mov	r3, r0
 80022f2:	460c      	mov	r4, r1
 80022f4:	4618      	mov	r0, r3
 80022f6:	4621      	mov	r1, r4
 80022f8:	f7fe fc5e 	bl	8000bb8 <__aeabi_d2f>
 80022fc:	4602      	mov	r2, r0
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	635a      	str	r2, [r3, #52]	; 0x34

    dec->vertical_velocity = (float) (enc->vertical_velocity - 80);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	7f1b      	ldrb	r3, [r3, #28]
 8002306:	3b50      	subs	r3, #80	; 0x50
 8002308:	ee07 3a90 	vmov	s15, r3
 800230c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    if (dec->packet_type == 1) {
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d10f      	bne.n	800233e <decode_TLM+0x21e>
        dec->ranging = ((float) enc->debug_ranging) * 0.25;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f8b3 301d 	ldrh.w	r3, [r3, #29]
 8002324:	b29b      	uxth	r3, r3
 8002326:	ee07 3a90 	vmov	s15, r3
 800232a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800232e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002332:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    }
    else {
        dec->debug = (uint16_t) enc->debug_ranging;
    }
}
 800233c:	e005      	b.n	800234a <decode_TLM+0x22a>
        dec->debug = (uint16_t) enc->debug_ranging;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f8b3 301d 	ldrh.w	r3, [r3, #29]
 8002344:	b29a      	uxth	r2, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 800234a:	bf00      	nop
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	bd90      	pop	{r4, r7, pc}
 8002352:	bf00      	nop
 8002354:	f3af 8000 	nop.w
 8002358:	42fe0000 	.word	0x42fe0000
 800235c:	3fb00000 	.word	0x3fb00000
 8002360:	40480000 	.word	0x40480000
 8002364:	47ae147b 	.word	0x47ae147b
 8002368:	3f847ae1 	.word	0x3f847ae1

0800236c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800236c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002370:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002372:	e003      	b.n	800237c <LoopCopyDataInit>

08002374 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002376:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002378:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800237a:	3104      	adds	r1, #4

0800237c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800237c:	480b      	ldr	r0, [pc, #44]	; (80023ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800237e:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002380:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002382:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002384:	d3f6      	bcc.n	8002374 <CopyDataInit>
  ldr  r2, =_sbss
 8002386:	4a0b      	ldr	r2, [pc, #44]	; (80023b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002388:	e002      	b.n	8002390 <LoopFillZerobss>

0800238a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800238a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800238c:	f842 3b04 	str.w	r3, [r2], #4

08002390 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002392:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002394:	d3f9      	bcc.n	800238a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002396:	f7ff fead 	bl	80020f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800239a:	f007 fa5b 	bl	8009854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800239e:	f7ff f81f 	bl	80013e0 <main>
  bx  lr    
 80023a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023a4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80023a8:	0800bd58 	.word	0x0800bd58
  ldr  r0, =_sdata
 80023ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023b0:	2000035c 	.word	0x2000035c
  ldr  r2, =_sbss
 80023b4:	2000035c 	.word	0x2000035c
  ldr  r3, = _ebss
 80023b8:	20001d9c 	.word	0x20001d9c

080023bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023bc:	e7fe      	b.n	80023bc <ADC_IRQHandler>
	...

080023c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023c4:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <HAL_Init+0x40>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <HAL_Init+0x40>)
 80023ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_Init+0x40>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <HAL_Init+0x40>)
 80023d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023dc:	4b08      	ldr	r3, [pc, #32]	; (8002400 <HAL_Init+0x40>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a07      	ldr	r2, [pc, #28]	; (8002400 <HAL_Init+0x40>)
 80023e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e8:	2003      	movs	r0, #3
 80023ea:	f000 fbbf 	bl	8002b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ee:	2000      	movs	r0, #0
 80023f0:	f000 f808 	bl	8002404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023f4:	f7ff fa2e 	bl	8001854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40023c00 	.word	0x40023c00

08002404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800240c:	4b12      	ldr	r3, [pc, #72]	; (8002458 <HAL_InitTick+0x54>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b12      	ldr	r3, [pc, #72]	; (800245c <HAL_InitTick+0x58>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	4619      	mov	r1, r3
 8002416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800241a:	fbb3 f3f1 	udiv	r3, r3, r1
 800241e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002422:	4618      	mov	r0, r3
 8002424:	f000 fbd7 	bl	8002bd6 <HAL_SYSTICK_Config>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e00e      	b.n	8002450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b0f      	cmp	r3, #15
 8002436:	d80a      	bhi.n	800244e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002438:	2200      	movs	r2, #0
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	f04f 30ff 	mov.w	r0, #4294967295
 8002440:	f000 fb9f 	bl	8002b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002444:	4a06      	ldr	r2, [pc, #24]	; (8002460 <HAL_InitTick+0x5c>)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	e000      	b.n	8002450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
}
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000004 	.word	0x20000004
 800245c:	2000000c 	.word	0x2000000c
 8002460:	20000008 	.word	0x20000008

08002464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_IncTick+0x20>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_IncTick+0x24>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4413      	add	r3, r2
 8002474:	4a04      	ldr	r2, [pc, #16]	; (8002488 <HAL_IncTick+0x24>)
 8002476:	6013      	str	r3, [r2, #0]
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	2000000c 	.word	0x2000000c
 8002488:	200004bc 	.word	0x200004bc

0800248c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return uwTick;
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <HAL_GetTick+0x14>)
 8002492:	681b      	ldr	r3, [r3, #0]
}
 8002494:	4618      	mov	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	200004bc 	.word	0x200004bc

080024a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024ac:	f7ff ffee 	bl	800248c <HAL_GetTick>
 80024b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024bc:	d005      	beq.n	80024ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <HAL_Delay+0x40>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4413      	add	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024ca:	bf00      	nop
 80024cc:	f7ff ffde 	bl	800248c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d8f7      	bhi.n	80024cc <HAL_Delay+0x28>
  {
  }
}
 80024dc:	bf00      	nop
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	2000000c 	.word	0x2000000c

080024e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e033      	b.n	8002566 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	d109      	bne.n	800251a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff f9cc 	bl	80018a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b00      	cmp	r3, #0
 8002524:	d118      	bne.n	8002558 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800252e:	f023 0302 	bic.w	r3, r3, #2
 8002532:	f043 0202 	orr.w	r2, r3, #2
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f94a 	bl	80027d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f023 0303 	bic.w	r3, r3, #3
 800254e:	f043 0201 	orr.w	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	641a      	str	r2, [r3, #64]	; 0x40
 8002556:	e001      	b.n	800255c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002564:	7bfb      	ldrb	r3, [r7, #15]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800257a:	2300      	movs	r3, #0
 800257c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_ADC_ConfigChannel+0x1c>
 8002588:	2302      	movs	r3, #2
 800258a:	e113      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x244>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b09      	cmp	r3, #9
 800259a:	d925      	bls.n	80025e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68d9      	ldr	r1, [r3, #12]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	461a      	mov	r2, r3
 80025aa:	4613      	mov	r3, r2
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4413      	add	r3, r2
 80025b0:	3b1e      	subs	r3, #30
 80025b2:	2207      	movs	r2, #7
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43da      	mvns	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	400a      	ands	r2, r1
 80025c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68d9      	ldr	r1, [r3, #12]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	4618      	mov	r0, r3
 80025d4:	4603      	mov	r3, r0
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	4403      	add	r3, r0
 80025da:	3b1e      	subs	r3, #30
 80025dc:	409a      	lsls	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	e022      	b.n	800262e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6919      	ldr	r1, [r3, #16]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	4613      	mov	r3, r2
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	4413      	add	r3, r2
 80025fc:	2207      	movs	r2, #7
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43da      	mvns	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	400a      	ands	r2, r1
 800260a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6919      	ldr	r1, [r3, #16]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	b29b      	uxth	r3, r3
 800261c:	4618      	mov	r0, r3
 800261e:	4603      	mov	r3, r0
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4403      	add	r3, r0
 8002624:	409a      	lsls	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b06      	cmp	r3, #6
 8002634:	d824      	bhi.n	8002680 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	3b05      	subs	r3, #5
 8002648:	221f      	movs	r2, #31
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43da      	mvns	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	400a      	ands	r2, r1
 8002656:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	4618      	mov	r0, r3
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	3b05      	subs	r3, #5
 8002672:	fa00 f203 	lsl.w	r2, r0, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	635a      	str	r2, [r3, #52]	; 0x34
 800267e:	e04c      	b.n	800271a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b0c      	cmp	r3, #12
 8002686:	d824      	bhi.n	80026d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	3b23      	subs	r3, #35	; 0x23
 800269a:	221f      	movs	r2, #31
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43da      	mvns	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	400a      	ands	r2, r1
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	4618      	mov	r0, r3
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	3b23      	subs	r3, #35	; 0x23
 80026c4:	fa00 f203 	lsl.w	r2, r0, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
 80026d0:	e023      	b.n	800271a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	3b41      	subs	r3, #65	; 0x41
 80026e4:	221f      	movs	r2, #31
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43da      	mvns	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	400a      	ands	r2, r1
 80026f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	4618      	mov	r0, r3
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	3b41      	subs	r3, #65	; 0x41
 800270e:	fa00 f203 	lsl.w	r2, r0, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800271a:	4b29      	ldr	r3, [pc, #164]	; (80027c0 <HAL_ADC_ConfigChannel+0x250>)
 800271c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a28      	ldr	r2, [pc, #160]	; (80027c4 <HAL_ADC_ConfigChannel+0x254>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d10f      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x1d8>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b12      	cmp	r3, #18
 800272e:	d10b      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a1d      	ldr	r2, [pc, #116]	; (80027c4 <HAL_ADC_ConfigChannel+0x254>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d12b      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x23a>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a1c      	ldr	r2, [pc, #112]	; (80027c8 <HAL_ADC_ConfigChannel+0x258>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d003      	beq.n	8002764 <HAL_ADC_ConfigChannel+0x1f4>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b11      	cmp	r3, #17
 8002762:	d122      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <HAL_ADC_ConfigChannel+0x258>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d111      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002786:	4b11      	ldr	r3, [pc, #68]	; (80027cc <HAL_ADC_ConfigChannel+0x25c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a11      	ldr	r2, [pc, #68]	; (80027d0 <HAL_ADC_ConfigChannel+0x260>)
 800278c:	fba2 2303 	umull	r2, r3, r2, r3
 8002790:	0c9a      	lsrs	r2, r3, #18
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800279c:	e002      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f9      	bne.n	800279e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	40012300 	.word	0x40012300
 80027c4:	40012000 	.word	0x40012000
 80027c8:	10000012 	.word	0x10000012
 80027cc:	20000004 	.word	0x20000004
 80027d0:	431bde83 	.word	0x431bde83

080027d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027dc:	4b79      	ldr	r3, [pc, #484]	; (80029c4 <ADC_Init+0x1f0>)
 80027de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	431a      	orrs	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002808:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	021a      	lsls	r2, r3, #8
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800282c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6859      	ldr	r1, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800284e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6899      	ldr	r1, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002866:	4a58      	ldr	r2, [pc, #352]	; (80029c8 <ADC_Init+0x1f4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d022      	beq.n	80028b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800287a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6899      	ldr	r1, [r3, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800289c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6899      	ldr	r1, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	e00f      	b.n	80028d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0202 	bic.w	r2, r2, #2
 80028e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6899      	ldr	r1, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	7e1b      	ldrb	r3, [r3, #24]
 80028ec:	005a      	lsls	r2, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01b      	beq.n	8002938 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800290e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800291e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6859      	ldr	r1, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	3b01      	subs	r3, #1
 800292c:	035a      	lsls	r2, r3, #13
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	e007      	b.n	8002948 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002946:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002956:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	3b01      	subs	r3, #1
 8002964:	051a      	lsls	r2, r3, #20
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800297c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6899      	ldr	r1, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800298a:	025a      	lsls	r2, r3, #9
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6899      	ldr	r1, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	029a      	lsls	r2, r3, #10
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	609a      	str	r2, [r3, #8]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	40012300 	.word	0x40012300
 80029c8:	0f000001 	.word	0x0f000001

080029cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <__NVIC_SetPriorityGrouping+0x44>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029e8:	4013      	ands	r3, r2
 80029ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029fe:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <__NVIC_SetPriorityGrouping+0x44>)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	60d3      	str	r3, [r2, #12]
}
 8002a04:	bf00      	nop
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a18:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <__NVIC_GetPriorityGrouping+0x18>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	0a1b      	lsrs	r3, r3, #8
 8002a1e:	f003 0307 	and.w	r3, r3, #7
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	db0b      	blt.n	8002a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	f003 021f 	and.w	r2, r3, #31
 8002a48:	4907      	ldr	r1, [pc, #28]	; (8002a68 <__NVIC_EnableIRQ+0x38>)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	2001      	movs	r0, #1
 8002a52:	fa00 f202 	lsl.w	r2, r0, r2
 8002a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	e000e100 	.word	0xe000e100

08002a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	6039      	str	r1, [r7, #0]
 8002a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	db0a      	blt.n	8002a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	490c      	ldr	r1, [pc, #48]	; (8002ab8 <__NVIC_SetPriority+0x4c>)
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	0112      	lsls	r2, r2, #4
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	440b      	add	r3, r1
 8002a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a94:	e00a      	b.n	8002aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	4908      	ldr	r1, [pc, #32]	; (8002abc <__NVIC_SetPriority+0x50>)
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	3b04      	subs	r3, #4
 8002aa4:	0112      	lsls	r2, r2, #4
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	761a      	strb	r2, [r3, #24]
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	e000e100 	.word	0xe000e100
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b089      	sub	sp, #36	; 0x24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f1c3 0307 	rsb	r3, r3, #7
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	bf28      	it	cs
 8002ade:	2304      	movcs	r3, #4
 8002ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	2b06      	cmp	r3, #6
 8002ae8:	d902      	bls.n	8002af0 <NVIC_EncodePriority+0x30>
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	3b03      	subs	r3, #3
 8002aee:	e000      	b.n	8002af2 <NVIC_EncodePriority+0x32>
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af4:	f04f 32ff 	mov.w	r2, #4294967295
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43da      	mvns	r2, r3
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	401a      	ands	r2, r3
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b08:	f04f 31ff 	mov.w	r1, #4294967295
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b12:	43d9      	mvns	r1, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b18:	4313      	orrs	r3, r2
         );
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3724      	adds	r7, #36	; 0x24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b38:	d301      	bcc.n	8002b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e00f      	b.n	8002b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b3e:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <SysTick_Config+0x40>)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b46:	210f      	movs	r1, #15
 8002b48:	f04f 30ff 	mov.w	r0, #4294967295
 8002b4c:	f7ff ff8e 	bl	8002a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <SysTick_Config+0x40>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b56:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <SysTick_Config+0x40>)
 8002b58:	2207      	movs	r2, #7
 8002b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	e000e010 	.word	0xe000e010

08002b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff ff29 	bl	80029cc <__NVIC_SetPriorityGrouping>
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b086      	sub	sp, #24
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	4603      	mov	r3, r0
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	607a      	str	r2, [r7, #4]
 8002b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b94:	f7ff ff3e 	bl	8002a14 <__NVIC_GetPriorityGrouping>
 8002b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	6978      	ldr	r0, [r7, #20]
 8002ba0:	f7ff ff8e 	bl	8002ac0 <NVIC_EncodePriority>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002baa:	4611      	mov	r1, r2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff5d 	bl	8002a6c <__NVIC_SetPriority>
}
 8002bb2:	bf00      	nop
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff31 	bl	8002a30 <__NVIC_EnableIRQ>
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff ffa2 	bl	8002b28 <SysTick_Config>
 8002be4:	4603      	mov	r3, r0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b089      	sub	sp, #36	; 0x24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
 8002c0a:	e159      	b.n	8002ec0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	f040 8148 	bne.w	8002eba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d00b      	beq.n	8002c4a <HAL_GPIO_Init+0x5a>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d007      	beq.n	8002c4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c3e:	2b11      	cmp	r3, #17
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b12      	cmp	r3, #18
 8002c48:	d130      	bne.n	8002cac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	2203      	movs	r2, #3
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c80:	2201      	movs	r2, #1
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	091b      	lsrs	r3, r3, #4
 8002c96:	f003 0201 	and.w	r2, r3, #1
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d003      	beq.n	8002cec <HAL_GPIO_Init+0xfc>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b12      	cmp	r3, #18
 8002cea:	d123      	bne.n	8002d34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	08da      	lsrs	r2, r3, #3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3208      	adds	r2, #8
 8002cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	220f      	movs	r2, #15
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	08da      	lsrs	r2, r3, #3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3208      	adds	r2, #8
 8002d2e:	69b9      	ldr	r1, [r7, #24]
 8002d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	2203      	movs	r2, #3
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 0203 	and.w	r2, r3, #3
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 80a2 	beq.w	8002eba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	4b56      	ldr	r3, [pc, #344]	; (8002ed4 <HAL_GPIO_Init+0x2e4>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	4a55      	ldr	r2, [pc, #340]	; (8002ed4 <HAL_GPIO_Init+0x2e4>)
 8002d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d84:	6453      	str	r3, [r2, #68]	; 0x44
 8002d86:	4b53      	ldr	r3, [pc, #332]	; (8002ed4 <HAL_GPIO_Init+0x2e4>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d92:	4a51      	ldr	r2, [pc, #324]	; (8002ed8 <HAL_GPIO_Init+0x2e8>)
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	089b      	lsrs	r3, r3, #2
 8002d98:	3302      	adds	r3, #2
 8002d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	220f      	movs	r2, #15
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a48      	ldr	r2, [pc, #288]	; (8002edc <HAL_GPIO_Init+0x2ec>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d019      	beq.n	8002df2 <HAL_GPIO_Init+0x202>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a47      	ldr	r2, [pc, #284]	; (8002ee0 <HAL_GPIO_Init+0x2f0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d013      	beq.n	8002dee <HAL_GPIO_Init+0x1fe>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a46      	ldr	r2, [pc, #280]	; (8002ee4 <HAL_GPIO_Init+0x2f4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00d      	beq.n	8002dea <HAL_GPIO_Init+0x1fa>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a45      	ldr	r2, [pc, #276]	; (8002ee8 <HAL_GPIO_Init+0x2f8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d007      	beq.n	8002de6 <HAL_GPIO_Init+0x1f6>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a44      	ldr	r2, [pc, #272]	; (8002eec <HAL_GPIO_Init+0x2fc>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d101      	bne.n	8002de2 <HAL_GPIO_Init+0x1f2>
 8002dde:	2304      	movs	r3, #4
 8002de0:	e008      	b.n	8002df4 <HAL_GPIO_Init+0x204>
 8002de2:	2307      	movs	r3, #7
 8002de4:	e006      	b.n	8002df4 <HAL_GPIO_Init+0x204>
 8002de6:	2303      	movs	r3, #3
 8002de8:	e004      	b.n	8002df4 <HAL_GPIO_Init+0x204>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e002      	b.n	8002df4 <HAL_GPIO_Init+0x204>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <HAL_GPIO_Init+0x204>
 8002df2:	2300      	movs	r3, #0
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	f002 0203 	and.w	r2, r2, #3
 8002dfa:	0092      	lsls	r2, r2, #2
 8002dfc:	4093      	lsls	r3, r2
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e04:	4934      	ldr	r1, [pc, #208]	; (8002ed8 <HAL_GPIO_Init+0x2e8>)
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	089b      	lsrs	r3, r3, #2
 8002e0a:	3302      	adds	r3, #2
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e12:	4b37      	ldr	r3, [pc, #220]	; (8002ef0 <HAL_GPIO_Init+0x300>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e36:	4a2e      	ldr	r2, [pc, #184]	; (8002ef0 <HAL_GPIO_Init+0x300>)
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e3c:	4b2c      	ldr	r3, [pc, #176]	; (8002ef0 <HAL_GPIO_Init+0x300>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e60:	4a23      	ldr	r2, [pc, #140]	; (8002ef0 <HAL_GPIO_Init+0x300>)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e66:	4b22      	ldr	r3, [pc, #136]	; (8002ef0 <HAL_GPIO_Init+0x300>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e8a:	4a19      	ldr	r2, [pc, #100]	; (8002ef0 <HAL_GPIO_Init+0x300>)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e90:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <HAL_GPIO_Init+0x300>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eb4:	4a0e      	ldr	r2, [pc, #56]	; (8002ef0 <HAL_GPIO_Init+0x300>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	61fb      	str	r3, [r7, #28]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	2b0f      	cmp	r3, #15
 8002ec4:	f67f aea2 	bls.w	8002c0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ec8:	bf00      	nop
 8002eca:	3724      	adds	r7, #36	; 0x24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40013800 	.word	0x40013800
 8002edc:	40020000 	.word	0x40020000
 8002ee0:	40020400 	.word	0x40020400
 8002ee4:	40020800 	.word	0x40020800
 8002ee8:	40020c00 	.word	0x40020c00
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40013c00 	.word	0x40013c00

08002ef4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	887b      	ldrh	r3, [r7, #2]
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	73fb      	strb	r3, [r7, #15]
 8002f10:	e001      	b.n	8002f16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	807b      	strh	r3, [r7, #2]
 8002f30:	4613      	mov	r3, r2
 8002f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f34:	787b      	ldrb	r3, [r7, #1]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f3a:	887a      	ldrh	r2, [r7, #2]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f40:	e003      	b.n	8002f4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f42:	887b      	ldrh	r3, [r7, #2]
 8002f44:	041a      	lsls	r2, r3, #16
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	619a      	str	r2, [r3, #24]
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
	...

08002f58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e11f      	b.n	80031aa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fe fcd4 	bl	800192c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2224      	movs	r2, #36	; 0x24
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0201 	bic.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002faa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fbc:	f001 fec2 	bl	8004d44 <HAL_RCC_GetPCLK1Freq>
 8002fc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4a7b      	ldr	r2, [pc, #492]	; (80031b4 <HAL_I2C_Init+0x25c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d807      	bhi.n	8002fdc <HAL_I2C_Init+0x84>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4a7a      	ldr	r2, [pc, #488]	; (80031b8 <HAL_I2C_Init+0x260>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	bf94      	ite	ls
 8002fd4:	2301      	movls	r3, #1
 8002fd6:	2300      	movhi	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	e006      	b.n	8002fea <HAL_I2C_Init+0x92>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4a77      	ldr	r2, [pc, #476]	; (80031bc <HAL_I2C_Init+0x264>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	bf94      	ite	ls
 8002fe4:	2301      	movls	r3, #1
 8002fe6:	2300      	movhi	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e0db      	b.n	80031aa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4a72      	ldr	r2, [pc, #456]	; (80031c0 <HAL_I2C_Init+0x268>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	0c9b      	lsrs	r3, r3, #18
 8002ffc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	430a      	orrs	r2, r1
 8003010:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	4a64      	ldr	r2, [pc, #400]	; (80031b4 <HAL_I2C_Init+0x25c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d802      	bhi.n	800302c <HAL_I2C_Init+0xd4>
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	3301      	adds	r3, #1
 800302a:	e009      	b.n	8003040 <HAL_I2C_Init+0xe8>
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	4a63      	ldr	r2, [pc, #396]	; (80031c4 <HAL_I2C_Init+0x26c>)
 8003038:	fba2 2303 	umull	r2, r3, r2, r3
 800303c:	099b      	lsrs	r3, r3, #6
 800303e:	3301      	adds	r3, #1
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	430b      	orrs	r3, r1
 8003046:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003052:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4956      	ldr	r1, [pc, #344]	; (80031b4 <HAL_I2C_Init+0x25c>)
 800305c:	428b      	cmp	r3, r1
 800305e:	d80d      	bhi.n	800307c <HAL_I2C_Init+0x124>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1e59      	subs	r1, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	fbb1 f3f3 	udiv	r3, r1, r3
 800306e:	3301      	adds	r3, #1
 8003070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003074:	2b04      	cmp	r3, #4
 8003076:	bf38      	it	cc
 8003078:	2304      	movcc	r3, #4
 800307a:	e04f      	b.n	800311c <HAL_I2C_Init+0x1c4>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d111      	bne.n	80030a8 <HAL_I2C_Init+0x150>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	1e58      	subs	r0, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6859      	ldr	r1, [r3, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	440b      	add	r3, r1
 8003092:	fbb0 f3f3 	udiv	r3, r0, r3
 8003096:	3301      	adds	r3, #1
 8003098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309c:	2b00      	cmp	r3, #0
 800309e:	bf0c      	ite	eq
 80030a0:	2301      	moveq	r3, #1
 80030a2:	2300      	movne	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	e012      	b.n	80030ce <HAL_I2C_Init+0x176>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	1e58      	subs	r0, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6859      	ldr	r1, [r3, #4]
 80030b0:	460b      	mov	r3, r1
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	0099      	lsls	r1, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80030be:	3301      	adds	r3, #1
 80030c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	bf0c      	ite	eq
 80030c8:	2301      	moveq	r3, #1
 80030ca:	2300      	movne	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_I2C_Init+0x17e>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e022      	b.n	800311c <HAL_I2C_Init+0x1c4>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10e      	bne.n	80030fc <HAL_I2C_Init+0x1a4>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1e58      	subs	r0, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6859      	ldr	r1, [r3, #4]
 80030e6:	460b      	mov	r3, r1
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	440b      	add	r3, r1
 80030ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f0:	3301      	adds	r3, #1
 80030f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030fa:	e00f      	b.n	800311c <HAL_I2C_Init+0x1c4>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	1e58      	subs	r0, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6859      	ldr	r1, [r3, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	0099      	lsls	r1, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003112:	3301      	adds	r3, #1
 8003114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003118:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	6809      	ldr	r1, [r1, #0]
 8003120:	4313      	orrs	r3, r2
 8003122:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69da      	ldr	r2, [r3, #28]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800314a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6911      	ldr	r1, [r2, #16]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68d2      	ldr	r2, [r2, #12]
 8003156:	4311      	orrs	r1, r2
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	430b      	orrs	r3, r1
 800315e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695a      	ldr	r2, [r3, #20]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	000186a0 	.word	0x000186a0
 80031b8:	001e847f 	.word	0x001e847f
 80031bc:	003d08ff 	.word	0x003d08ff
 80031c0:	431bde83 	.word	0x431bde83
 80031c4:	10624dd3 	.word	0x10624dd3

080031c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ca:	b08f      	sub	sp, #60	; 0x3c
 80031cc:	af0a      	add	r7, sp, #40	; 0x28
 80031ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e10f      	b.n	80033fa <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d106      	bne.n	80031fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f006 f835 	bl	8009264 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2203      	movs	r2, #3
 80031fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320a:	2b00      	cmp	r3, #0
 800320c:	d102      	bne.n	8003214 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f002 ffee 	bl	80061fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	687e      	ldr	r6, [r7, #4]
 8003226:	466d      	mov	r5, sp
 8003228:	f106 0410 	add.w	r4, r6, #16
 800322c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800322e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003232:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003234:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003238:	e885 0003 	stmia.w	r5, {r0, r1}
 800323c:	1d33      	adds	r3, r6, #4
 800323e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003240:	6838      	ldr	r0, [r7, #0]
 8003242:	f002 fec5 	bl	8005fd0 <USB_CoreInit>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0d0      	b.n	80033fa <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2100      	movs	r1, #0
 800325e:	4618      	mov	r0, r3
 8003260:	f002 ffdc 	bl	800621c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003264:	2300      	movs	r3, #0
 8003266:	73fb      	strb	r3, [r7, #15]
 8003268:	e04a      	b.n	8003300 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800326a:	7bfa      	ldrb	r2, [r7, #15]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	333d      	adds	r3, #61	; 0x3d
 800327a:	2201      	movs	r2, #1
 800327c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800327e:	7bfa      	ldrb	r2, [r7, #15]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	333c      	adds	r3, #60	; 0x3c
 800328e:	7bfa      	ldrb	r2, [r7, #15]
 8003290:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003292:	7bfa      	ldrb	r2, [r7, #15]
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	b298      	uxth	r0, r3
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	3342      	adds	r3, #66	; 0x42
 80032a6:	4602      	mov	r2, r0
 80032a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032aa:	7bfa      	ldrb	r2, [r7, #15]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	333f      	adds	r3, #63	; 0x3f
 80032ba:	2200      	movs	r2, #0
 80032bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032be:	7bfa      	ldrb	r2, [r7, #15]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	3344      	adds	r3, #68	; 0x44
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032d2:	7bfa      	ldrb	r2, [r7, #15]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	3348      	adds	r3, #72	; 0x48
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	3350      	adds	r3, #80	; 0x50
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
 80032fc:	3301      	adds	r3, #1
 80032fe:	73fb      	strb	r3, [r7, #15]
 8003300:	7bfa      	ldrb	r2, [r7, #15]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	429a      	cmp	r2, r3
 8003308:	d3af      	bcc.n	800326a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800330a:	2300      	movs	r3, #0
 800330c:	73fb      	strb	r3, [r7, #15]
 800330e:	e044      	b.n	800339a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003310:	7bfa      	ldrb	r2, [r7, #15]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003322:	2200      	movs	r2, #0
 8003324:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003326:	7bfa      	ldrb	r2, [r7, #15]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003338:	7bfa      	ldrb	r2, [r7, #15]
 800333a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800333c:	7bfa      	ldrb	r2, [r7, #15]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003352:	7bfa      	ldrb	r2, [r7, #15]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003368:	7bfa      	ldrb	r2, [r7, #15]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800337e:	7bfa      	ldrb	r2, [r7, #15]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	1a9b      	subs	r3, r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	3301      	adds	r3, #1
 8003398:	73fb      	strb	r3, [r7, #15]
 800339a:	7bfa      	ldrb	r2, [r7, #15]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d3b5      	bcc.n	8003310 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	603b      	str	r3, [r7, #0]
 80033aa:	687e      	ldr	r6, [r7, #4]
 80033ac:	466d      	mov	r5, sp
 80033ae:	f106 0410 	add.w	r4, r6, #16
 80033b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033be:	e885 0003 	stmia.w	r5, {r0, r1}
 80033c2:	1d33      	adds	r3, r6, #4
 80033c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033c6:	6838      	ldr	r0, [r7, #0]
 80033c8:	f002 ff52 	bl	8006270 <USB_DevInit>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2202      	movs	r2, #2
 80033d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e00d      	b.n	80033fa <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f003 ff9a 	bl	800732c <USB_DevDisconnect>

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003402 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b084      	sub	sp, #16
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_PCD_Start+0x1c>
 800341a:	2302      	movs	r3, #2
 800341c:	e020      	b.n	8003460 <HAL_PCD_Start+0x5e>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	2b01      	cmp	r3, #1
 800342c:	d109      	bne.n	8003442 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003432:	2b01      	cmp	r3, #1
 8003434:	d005      	beq.n	8003442 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f002 fec6 	bl	80061d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f003 ff4a 	bl	80072ea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003468:	b590      	push	{r4, r7, lr}
 800346a:	b08d      	sub	sp, #52	; 0x34
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f004 f808 	bl	8007494 <USB_GetMode>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	f040 839d 	bne.w	8003bc6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f003 ff6c 	bl	800736e <USB_ReadInterrupts>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8393 	beq.w	8003bc4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f003 ff63 	bl	800736e <USB_ReadInterrupts>
 80034a8:	4603      	mov	r3, r0
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d107      	bne.n	80034c2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695a      	ldr	r2, [r3, #20]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f002 0202 	and.w	r2, r2, #2
 80034c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f003 ff51 	bl	800736e <USB_ReadInterrupts>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	2b10      	cmp	r3, #16
 80034d4:	d161      	bne.n	800359a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	699a      	ldr	r2, [r3, #24]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0210 	bic.w	r2, r2, #16
 80034e4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	f003 020f 	and.w	r2, r3, #15
 80034f2:	4613      	mov	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	4413      	add	r3, r2
 8003502:	3304      	adds	r3, #4
 8003504:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	0c5b      	lsrs	r3, r3, #17
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	2b02      	cmp	r3, #2
 8003510:	d124      	bne.n	800355c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003518:	4013      	ands	r3, r2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d035      	beq.n	800358a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	091b      	lsrs	r3, r3, #4
 8003526:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003528:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800352c:	b29b      	uxth	r3, r3
 800352e:	461a      	mov	r2, r3
 8003530:	6a38      	ldr	r0, [r7, #32]
 8003532:	f003 fdb7 	bl	80070a4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	091b      	lsrs	r3, r3, #4
 800353e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003542:	441a      	add	r2, r3
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	699a      	ldr	r2, [r3, #24]
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	091b      	lsrs	r3, r3, #4
 8003550:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003554:	441a      	add	r2, r3
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	619a      	str	r2, [r3, #24]
 800355a:	e016      	b.n	800358a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	0c5b      	lsrs	r3, r3, #17
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	2b06      	cmp	r3, #6
 8003566:	d110      	bne.n	800358a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800356e:	2208      	movs	r2, #8
 8003570:	4619      	mov	r1, r3
 8003572:	6a38      	ldr	r0, [r7, #32]
 8003574:	f003 fd96 	bl	80070a4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	699a      	ldr	r2, [r3, #24]
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	091b      	lsrs	r3, r3, #4
 8003580:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003584:	441a      	add	r2, r3
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	699a      	ldr	r2, [r3, #24]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0210 	orr.w	r2, r2, #16
 8003598:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f003 fee5 	bl	800736e <USB_ReadInterrupts>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035ae:	d16e      	bne.n	800368e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f003 feeb 	bl	8007394 <USB_ReadDevAllOutEpInterrupt>
 80035be:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80035c0:	e062      	b.n	8003688 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80035c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d057      	beq.n	800367c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	4611      	mov	r1, r2
 80035d6:	4618      	mov	r0, r3
 80035d8:	f003 ff10 	bl	80073fc <USB_ReadDevOutEPInterrupt>
 80035dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00c      	beq.n	8003602 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f4:	461a      	mov	r2, r3
 80035f6:	2301      	movs	r3, #1
 80035f8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80035fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 fdb1 	bl	8004164 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00c      	beq.n	8003626 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003618:	461a      	mov	r2, r3
 800361a:	2308      	movs	r3, #8
 800361c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800361e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 feab 	bl	800437c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	4413      	add	r3, r2
 8003638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800363c:	461a      	mov	r2, r3
 800363e:	2310      	movs	r3, #16
 8003640:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	4413      	add	r3, r2
 8003654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003658:	461a      	mov	r2, r3
 800365a:	2320      	movs	r3, #32
 800365c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d009      	beq.n	800367c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003674:	461a      	mov	r2, r3
 8003676:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800367a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	3301      	adds	r3, #1
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003684:	085b      	lsrs	r3, r3, #1
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368a:	2b00      	cmp	r3, #0
 800368c:	d199      	bne.n	80035c2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f003 fe6b 	bl	800736e <USB_ReadInterrupts>
 8003698:	4603      	mov	r3, r0
 800369a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800369e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036a2:	f040 80c0 	bne.w	8003826 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f003 fe8c 	bl	80073c8 <USB_ReadDevAllInEpInterrupt>
 80036b0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80036b6:	e0b2      	b.n	800381e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80036b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 80a7 	beq.w	8003812 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	4611      	mov	r1, r2
 80036ce:	4618      	mov	r0, r3
 80036d0:	f003 feb2 	bl	8007438 <USB_ReadDevInEPInterrupt>
 80036d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d057      	beq.n	8003790 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	2201      	movs	r2, #1
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69f9      	ldr	r1, [r7, #28]
 80036fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003700:	4013      	ands	r3, r2
 8003702:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003710:	461a      	mov	r2, r3
 8003712:	2301      	movs	r3, #1
 8003714:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d132      	bne.n	8003784 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003722:	4613      	mov	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	3348      	adds	r3, #72	; 0x48
 800372e:	6819      	ldr	r1, [r3, #0]
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003734:	4613      	mov	r3, r2
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4403      	add	r3, r0
 800373e:	3344      	adds	r3, #68	; 0x44
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4419      	add	r1, r3
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003748:	4613      	mov	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4403      	add	r3, r0
 8003752:	3348      	adds	r3, #72	; 0x48
 8003754:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	2b00      	cmp	r3, #0
 800375a:	d113      	bne.n	8003784 <HAL_PCD_IRQHandler+0x31c>
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003760:	4613      	mov	r3, r2
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	3350      	adds	r3, #80	; 0x50
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d108      	bne.n	8003784 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800377c:	461a      	mov	r2, r3
 800377e:	2101      	movs	r1, #1
 8003780:	f003 feba 	bl	80074f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	b2db      	uxtb	r3, r3
 8003788:	4619      	mov	r1, r3
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f005 fdeb 	bl	8009366 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a6:	461a      	mov	r2, r3
 80037a8:	2308      	movs	r3, #8
 80037aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	f003 0310 	and.w	r3, r3, #16
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d008      	beq.n	80037c8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	015a      	lsls	r2, r3, #5
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c2:	461a      	mov	r2, r3
 80037c4:	2310      	movs	r3, #16
 80037c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d008      	beq.n	80037e4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037de:	461a      	mov	r2, r3
 80037e0:	2340      	movs	r3, #64	; 0x40
 80037e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fa:	461a      	mov	r2, r3
 80037fc:	2302      	movs	r3, #2
 80037fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800380a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 fc1b 	bl	8004048 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	3301      	adds	r3, #1
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381a:	085b      	lsrs	r3, r3, #1
 800381c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	2b00      	cmp	r3, #0
 8003822:	f47f af49 	bne.w	80036b8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f003 fd9f 	bl	800736e <USB_ReadInterrupts>
 8003830:	4603      	mov	r3, r0
 8003832:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003836:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800383a:	d122      	bne.n	8003882 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	69fa      	ldr	r2, [r7, #28]
 8003846:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800384a:	f023 0301 	bic.w	r3, r3, #1
 800384e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003856:	2b01      	cmp	r3, #1
 8003858:	d108      	bne.n	800386c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003862:	2100      	movs	r1, #0
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fe27 	bl	80044b8 <HAL_PCDEx_LPM_Callback>
 800386a:	e002      	b.n	8003872 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f005 fde7 	bl	8009440 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695a      	ldr	r2, [r3, #20]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003880:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f003 fd71 	bl	800736e <USB_ReadInterrupts>
 800388c:	4603      	mov	r3, r0
 800388e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003896:	d112      	bne.n	80038be <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d102      	bne.n	80038ae <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f005 fda3 	bl	80093f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80038bc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f003 fd53 	bl	800736e <USB_ReadInterrupts>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d2:	f040 80c7 	bne.w	8003a64 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e4:	f023 0301 	bic.w	r3, r3, #1
 80038e8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2110      	movs	r1, #16
 80038f0:	4618      	mov	r0, r3
 80038f2:	f002 fe21 	bl	8006538 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038f6:	2300      	movs	r3, #0
 80038f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038fa:	e056      	b.n	80039aa <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80038fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	4413      	add	r3, r2
 8003904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003908:	461a      	mov	r2, r3
 800390a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800390e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003920:	0151      	lsls	r1, r2, #5
 8003922:	69fa      	ldr	r2, [r7, #28]
 8003924:	440a      	add	r2, r1
 8003926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800392a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800392e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003940:	0151      	lsls	r1, r2, #5
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	440a      	add	r2, r1
 8003946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800394a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800394e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395c:	461a      	mov	r2, r3
 800395e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003962:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003974:	0151      	lsls	r1, r2, #5
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	440a      	add	r2, r1
 800397a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800397e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003982:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	4413      	add	r3, r2
 800398c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003994:	0151      	lsls	r1, r2, #5
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	440a      	add	r2, r1
 800399a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800399e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039a2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a6:	3301      	adds	r3, #1
 80039a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d3a3      	bcc.n	80038fc <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	69fa      	ldr	r2, [r7, #28]
 80039be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039c2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80039c6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d016      	beq.n	80039fe <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039e0:	f043 030b 	orr.w	r3, r3, #11
 80039e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039f6:	f043 030b 	orr.w	r3, r3, #11
 80039fa:	6453      	str	r3, [r2, #68]	; 0x44
 80039fc:	e015      	b.n	8003a2a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a10:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003a14:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	69fa      	ldr	r2, [r7, #28]
 8003a20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a24:	f043 030b 	orr.w	r3, r3, #11
 8003a28:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a38:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a3c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f003 fd52 	bl	80074f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003a62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f003 fc80 	bl	800736e <USB_ReadInterrupts>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a78:	d124      	bne.n	8003ac4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f003 fd16 	bl	80074b0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f002 fdb6 	bl	80065fa <USB_GetDevSpeed>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	461a      	mov	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681c      	ldr	r4, [r3, #0]
 8003a9a:	f001 f947 	bl	8004d2c <HAL_RCC_GetHCLKFreq>
 8003a9e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	f002 faf3 	bl	8006094 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f005 fc81 	bl	80093b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695a      	ldr	r2, [r3, #20]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003ac2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f003 fc50 	bl	800736e <USB_ReadInterrupts>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d10a      	bne.n	8003aee <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f005 fc5e 	bl	800939a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695a      	ldr	r2, [r3, #20]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f002 0208 	and.w	r2, r2, #8
 8003aec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f003 fc3b 	bl	800736e <USB_ReadInterrupts>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b02:	d10f      	bne.n	8003b24 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f005 fcb6 	bl	8009480 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695a      	ldr	r2, [r3, #20]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003b22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f003 fc20 	bl	800736e <USB_ReadInterrupts>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b38:	d10f      	bne.n	8003b5a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	4619      	mov	r1, r3
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f005 fc89 	bl	800945c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695a      	ldr	r2, [r3, #20]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003b58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f003 fc05 	bl	800736e <USB_ReadInterrupts>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6e:	d10a      	bne.n	8003b86 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f005 fc97 	bl	80094a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695a      	ldr	r2, [r3, #20]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f003 fbef 	bl	800736e <USB_ReadInterrupts>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d115      	bne.n	8003bc6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f005 fc87 	bl	80094c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6859      	ldr	r1, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
 8003bc2:	e000      	b.n	8003bc6 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003bc4:	bf00      	nop
    }
  }
}
 8003bc6:	3734      	adds	r7, #52	; 0x34
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd90      	pop	{r4, r7, pc}

08003bcc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_PCD_SetAddress+0x1a>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e013      	b.n	8003c0e <HAL_PCD_SetAddress+0x42>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	78fa      	ldrb	r2, [r7, #3]
 8003bf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	78fa      	ldrb	r2, [r7, #3]
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f003 fb4d 	bl	800729e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	4608      	mov	r0, r1
 8003c20:	4611      	mov	r1, r2
 8003c22:	461a      	mov	r2, r3
 8003c24:	4603      	mov	r3, r0
 8003c26:	70fb      	strb	r3, [r7, #3]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	803b      	strh	r3, [r7, #0]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	da0f      	bge.n	8003c5c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c3c:	78fb      	ldrb	r3, [r7, #3]
 8003c3e:	f003 020f 	and.w	r2, r3, #15
 8003c42:	4613      	mov	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	1a9b      	subs	r3, r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	3338      	adds	r3, #56	; 0x38
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	4413      	add	r3, r2
 8003c50:	3304      	adds	r3, #4
 8003c52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	705a      	strb	r2, [r3, #1]
 8003c5a:	e00f      	b.n	8003c7c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	f003 020f 	and.w	r2, r3, #15
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	4413      	add	r3, r2
 8003c72:	3304      	adds	r3, #4
 8003c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c88:	883a      	ldrh	r2, [r7, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	78ba      	ldrb	r2, [r7, #2]
 8003c92:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	785b      	ldrb	r3, [r3, #1]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d004      	beq.n	8003ca6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ca6:	78bb      	ldrb	r3, [r7, #2]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d102      	bne.n	8003cb2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_PCD_EP_Open+0xaa>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e00e      	b.n	8003cde <HAL_PCD_EP_Open+0xc8>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68f9      	ldr	r1, [r7, #12]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f002 fcb8 	bl	8006644 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003cdc:	7afb      	ldrb	r3, [r7, #11]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b084      	sub	sp, #16
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	da0f      	bge.n	8003d1a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	f003 020f 	and.w	r2, r3, #15
 8003d00:	4613      	mov	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	1a9b      	subs	r3, r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	3338      	adds	r3, #56	; 0x38
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	3304      	adds	r3, #4
 8003d10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	705a      	strb	r2, [r3, #1]
 8003d18:	e00f      	b.n	8003d3a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d1a:	78fb      	ldrb	r3, [r7, #3]
 8003d1c:	f003 020f 	and.w	r2, r3, #15
 8003d20:	4613      	mov	r3, r2
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	4413      	add	r3, r2
 8003d30:	3304      	adds	r3, #4
 8003d32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d3a:	78fb      	ldrb	r3, [r7, #3]
 8003d3c:	f003 030f 	and.w	r3, r3, #15
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_PCD_EP_Close+0x6e>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e00e      	b.n	8003d72 <HAL_PCD_EP_Close+0x8c>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68f9      	ldr	r1, [r7, #12]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f002 fcf6 	bl	8006754 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b086      	sub	sp, #24
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	603b      	str	r3, [r7, #0]
 8003d86:	460b      	mov	r3, r1
 8003d88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d8a:	7afb      	ldrb	r3, [r7, #11]
 8003d8c:	f003 020f 	and.w	r2, r3, #15
 8003d90:	4613      	mov	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4413      	add	r3, r2
 8003da0:	3304      	adds	r3, #4
 8003da2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2200      	movs	r2, #0
 8003db4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2200      	movs	r2, #0
 8003dba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dbc:	7afb      	ldrb	r3, [r7, #11]
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d102      	bne.n	8003dd6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dd6:	7afb      	ldrb	r3, [r7, #11]
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d109      	bne.n	8003df4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	461a      	mov	r2, r3
 8003dec:	6979      	ldr	r1, [r7, #20]
 8003dee:	f002 ffd1 	bl	8006d94 <USB_EP0StartXfer>
 8003df2:	e008      	b.n	8003e06 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	461a      	mov	r2, r3
 8003e00:	6979      	ldr	r1, [r7, #20]
 8003e02:	f002 fd83 	bl	800690c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e1c:	78fb      	ldrb	r3, [r7, #3]
 8003e1e:	f003 020f 	and.w	r2, r3, #15
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003e32:	681b      	ldr	r3, [r3, #0]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	607a      	str	r2, [r7, #4]
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e50:	7afb      	ldrb	r3, [r7, #11]
 8003e52:	f003 020f 	and.w	r2, r3, #15
 8003e56:	4613      	mov	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	1a9b      	subs	r3, r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	3338      	adds	r3, #56	; 0x38
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4413      	add	r3, r2
 8003e64:	3304      	adds	r3, #4
 8003e66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2200      	movs	r2, #0
 8003e78:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e80:	7afb      	ldrb	r3, [r7, #11]
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d102      	bne.n	8003e9a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e9a:	7afb      	ldrb	r3, [r7, #11]
 8003e9c:	f003 030f 	and.w	r3, r3, #15
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d109      	bne.n	8003eb8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	461a      	mov	r2, r3
 8003eb0:	6979      	ldr	r1, [r7, #20]
 8003eb2:	f002 ff6f 	bl	8006d94 <USB_EP0StartXfer>
 8003eb6:	e008      	b.n	8003eca <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	6979      	ldr	r1, [r7, #20]
 8003ec6:	f002 fd21 	bl	800690c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	f003 020f 	and.w	r2, r3, #15
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d901      	bls.n	8003ef2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e050      	b.n	8003f94 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	da0f      	bge.n	8003f1a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	f003 020f 	and.w	r2, r3, #15
 8003f00:	4613      	mov	r3, r2
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	1a9b      	subs	r3, r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	3338      	adds	r3, #56	; 0x38
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	3304      	adds	r3, #4
 8003f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2201      	movs	r2, #1
 8003f16:	705a      	strb	r2, [r3, #1]
 8003f18:	e00d      	b.n	8003f36 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	1a9b      	subs	r3, r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f3c:	78fb      	ldrb	r3, [r7, #3]
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d101      	bne.n	8003f56 <HAL_PCD_EP_SetStall+0x82>
 8003f52:	2302      	movs	r3, #2
 8003f54:	e01e      	b.n	8003f94 <HAL_PCD_EP_SetStall+0xc0>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68f9      	ldr	r1, [r7, #12]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f003 f8c6 	bl	80070f6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10a      	bne.n	8003f8a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	b2d9      	uxtb	r1, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f84:	461a      	mov	r2, r3
 8003f86:	f003 fab7 	bl	80074f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003fa8:	78fb      	ldrb	r3, [r7, #3]
 8003faa:	f003 020f 	and.w	r2, r3, #15
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d901      	bls.n	8003fba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e042      	b.n	8004040 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	da0f      	bge.n	8003fe2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fc2:	78fb      	ldrb	r3, [r7, #3]
 8003fc4:	f003 020f 	and.w	r2, r3, #15
 8003fc8:	4613      	mov	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	3338      	adds	r3, #56	; 0x38
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	705a      	strb	r2, [r3, #1]
 8003fe0:	e00f      	b.n	8004002 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fe2:	78fb      	ldrb	r3, [r7, #3]
 8003fe4:	f003 020f 	and.w	r2, r3, #15
 8003fe8:	4613      	mov	r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	1a9b      	subs	r3, r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004008:	78fb      	ldrb	r3, [r7, #3]
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	b2da      	uxtb	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_PCD_EP_ClrStall+0x86>
 800401e:	2302      	movs	r3, #2
 8004020:	e00e      	b.n	8004040 <HAL_PCD_EP_ClrStall+0xa4>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68f9      	ldr	r1, [r7, #12]
 8004030:	4618      	mov	r0, r3
 8004032:	f003 f8ce 	bl	80071d2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08a      	sub	sp, #40	; 0x28
 800404c:	af02      	add	r7, sp, #8
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	4613      	mov	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	1a9b      	subs	r3, r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	3338      	adds	r3, #56	; 0x38
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	4413      	add	r3, r2
 800406c:	3304      	adds	r3, #4
 800406e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	699a      	ldr	r2, [r3, #24]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	429a      	cmp	r2, r3
 800407a:	d901      	bls.n	8004080 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e06c      	b.n	800415a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	695a      	ldr	r2, [r3, #20]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	69fa      	ldr	r2, [r7, #28]
 8004092:	429a      	cmp	r2, r3
 8004094:	d902      	bls.n	800409c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	3303      	adds	r3, #3
 80040a0:	089b      	lsrs	r3, r3, #2
 80040a2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040a4:	e02b      	b.n	80040fe <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	695a      	ldr	r2, [r3, #20]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d902      	bls.n	80040c2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	3303      	adds	r3, #3
 80040c6:	089b      	lsrs	r3, r3, #2
 80040c8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	68d9      	ldr	r1, [r3, #12]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	4603      	mov	r3, r0
 80040e0:	6978      	ldr	r0, [r7, #20]
 80040e2:	f002 ffaa 	bl	800703a <USB_WritePacket>

    ep->xfer_buff  += len;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	441a      	add	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	699a      	ldr	r2, [r3, #24]
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	441a      	add	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4413      	add	r3, r2
 8004106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	b29b      	uxth	r3, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	429a      	cmp	r2, r3
 8004112:	d809      	bhi.n	8004128 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	699a      	ldr	r2, [r3, #24]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800411c:	429a      	cmp	r2, r3
 800411e:	d203      	bcs.n	8004128 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1be      	bne.n	80040a6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	695a      	ldr	r2, [r3, #20]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	429a      	cmp	r2, r3
 8004132:	d811      	bhi.n	8004158 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	2201      	movs	r2, #1
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	43db      	mvns	r3, r3
 800414e:	6939      	ldr	r1, [r7, #16]
 8004150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004154:	4013      	ands	r3, r2
 8004156:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3720      	adds	r7, #32
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
	...

08004164 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	333c      	adds	r3, #60	; 0x3c
 800417c:	3304      	adds	r3, #4
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	2b01      	cmp	r3, #1
 8004198:	f040 80a0 	bne.w	80042dc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d015      	beq.n	80041d2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4a72      	ldr	r2, [pc, #456]	; (8004374 <PCD_EP_OutXfrComplete_int+0x210>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	f240 80dd 	bls.w	800436a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 80d7 	beq.w	800436a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c8:	461a      	mov	r2, r3
 80041ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ce:	6093      	str	r3, [r2, #8]
 80041d0:	e0cb      	b.n	800436a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	f003 0320 	and.w	r3, r3, #32
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d009      	beq.n	80041f0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e8:	461a      	mov	r2, r3
 80041ea:	2320      	movs	r3, #32
 80041ec:	6093      	str	r3, [r2, #8]
 80041ee:	e0bc      	b.n	800436a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f040 80b7 	bne.w	800436a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4a5d      	ldr	r2, [pc, #372]	; (8004374 <PCD_EP_OutXfrComplete_int+0x210>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d90f      	bls.n	8004224 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421a:	461a      	mov	r2, r3
 800421c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004220:	6093      	str	r3, [r2, #8]
 8004222:	e0a2      	b.n	800436a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	4613      	mov	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	1a9b      	subs	r3, r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004236:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	0159      	lsls	r1, r3, #5
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	440b      	add	r3, r1
 8004240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800424a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	4613      	mov	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4403      	add	r3, r0
 800425a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800425e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	4613      	mov	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	1a9b      	subs	r3, r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004272:	6819      	ldr	r1, [r3, #0]
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	4613      	mov	r3, r2
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4403      	add	r3, r0
 8004282:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4419      	add	r1, r3
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	4613      	mov	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	1a9b      	subs	r3, r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4403      	add	r3, r0
 8004298:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800429c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d114      	bne.n	80042ce <PCD_EP_OutXfrComplete_int+0x16a>
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	4613      	mov	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	1a9b      	subs	r3, r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d108      	bne.n	80042ce <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6818      	ldr	r0, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042c6:	461a      	mov	r2, r3
 80042c8:	2101      	movs	r1, #1
 80042ca:	f003 f915 	bl	80074f8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	4619      	mov	r1, r3
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f005 f82b 	bl	8009330 <HAL_PCD_DataOutStageCallback>
 80042da:	e046      	b.n	800436a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4a26      	ldr	r2, [pc, #152]	; (8004378 <PCD_EP_OutXfrComplete_int+0x214>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d124      	bne.n	800432e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fa:	461a      	mov	r2, r3
 80042fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004300:	6093      	str	r3, [r2, #8]
 8004302:	e032      	b.n	800436a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b00      	cmp	r3, #0
 800430c:	d008      	beq.n	8004320 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	4413      	add	r3, r2
 8004316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431a:	461a      	mov	r2, r3
 800431c:	2320      	movs	r3, #32
 800431e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	b2db      	uxtb	r3, r3
 8004324:	4619      	mov	r1, r3
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f005 f802 	bl	8009330 <HAL_PCD_DataOutStageCallback>
 800432c:	e01d      	b.n	800436a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d114      	bne.n	800435e <PCD_EP_OutXfrComplete_int+0x1fa>
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	4613      	mov	r3, r2
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d108      	bne.n	800435e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004356:	461a      	mov	r2, r3
 8004358:	2100      	movs	r1, #0
 800435a:	f003 f8cd 	bl	80074f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	4619      	mov	r1, r3
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f004 ffe3 	bl	8009330 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	4f54300a 	.word	0x4f54300a
 8004378:	4f54310a 	.word	0x4f54310a

0800437c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	333c      	adds	r3, #60	; 0x3c
 8004394:	3304      	adds	r3, #4
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4a15      	ldr	r2, [pc, #84]	; (8004404 <PCD_EP_OutSetupPacket_int+0x88>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d90e      	bls.n	80043d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d009      	beq.n	80043d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c8:	461a      	mov	r2, r3
 80043ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f004 ff9b 	bl	800930c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4a0a      	ldr	r2, [pc, #40]	; (8004404 <PCD_EP_OutSetupPacket_int+0x88>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d90c      	bls.n	80043f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d108      	bne.n	80043f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80043f0:	461a      	mov	r2, r3
 80043f2:	2101      	movs	r1, #1
 80043f4:	f003 f880 	bl	80074f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	4f54300a 	.word	0x4f54300a

08004408 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	70fb      	strb	r3, [r7, #3]
 8004414:	4613      	mov	r3, r2
 8004416:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d107      	bne.n	8004436 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004426:	883b      	ldrh	r3, [r7, #0]
 8004428:	0419      	lsls	r1, r3, #16
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	430a      	orrs	r2, r1
 8004432:	629a      	str	r2, [r3, #40]	; 0x28
 8004434:	e028      	b.n	8004488 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	0c1b      	lsrs	r3, r3, #16
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	4413      	add	r3, r2
 8004442:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004444:	2300      	movs	r3, #0
 8004446:	73fb      	strb	r3, [r7, #15]
 8004448:	e00d      	b.n	8004466 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	3340      	adds	r3, #64	; 0x40
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	0c1b      	lsrs	r3, r3, #16
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	4413      	add	r3, r2
 800445e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004460:	7bfb      	ldrb	r3, [r7, #15]
 8004462:	3301      	adds	r3, #1
 8004464:	73fb      	strb	r3, [r7, #15]
 8004466:	7bfa      	ldrb	r2, [r7, #15]
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	3b01      	subs	r3, #1
 800446c:	429a      	cmp	r2, r3
 800446e:	d3ec      	bcc.n	800444a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004470:	883b      	ldrh	r3, [r7, #0]
 8004472:	0418      	lsls	r0, r3, #16
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6819      	ldr	r1, [r3, #0]
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	3b01      	subs	r3, #1
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	4302      	orrs	r2, r0
 8004480:	3340      	adds	r3, #64	; 0x40
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	460b      	mov	r3, r1
 80044a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	887a      	ldrh	r2, [r7, #2]
 80044a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e25b      	b.n	800499a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d075      	beq.n	80045da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044ee:	4ba3      	ldr	r3, [pc, #652]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 030c 	and.w	r3, r3, #12
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d00c      	beq.n	8004514 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044fa:	4ba0      	ldr	r3, [pc, #640]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004502:	2b08      	cmp	r3, #8
 8004504:	d112      	bne.n	800452c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004506:	4b9d      	ldr	r3, [pc, #628]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800450e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004512:	d10b      	bne.n	800452c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004514:	4b99      	ldr	r3, [pc, #612]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d05b      	beq.n	80045d8 <HAL_RCC_OscConfig+0x108>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d157      	bne.n	80045d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e236      	b.n	800499a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004534:	d106      	bne.n	8004544 <HAL_RCC_OscConfig+0x74>
 8004536:	4b91      	ldr	r3, [pc, #580]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a90      	ldr	r2, [pc, #576]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 800453c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	e01d      	b.n	8004580 <HAL_RCC_OscConfig+0xb0>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800454c:	d10c      	bne.n	8004568 <HAL_RCC_OscConfig+0x98>
 800454e:	4b8b      	ldr	r3, [pc, #556]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a8a      	ldr	r2, [pc, #552]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 8004554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	4b88      	ldr	r3, [pc, #544]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a87      	ldr	r2, [pc, #540]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 8004560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	e00b      	b.n	8004580 <HAL_RCC_OscConfig+0xb0>
 8004568:	4b84      	ldr	r3, [pc, #528]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a83      	ldr	r2, [pc, #524]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 800456e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	4b81      	ldr	r3, [pc, #516]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a80      	ldr	r2, [pc, #512]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 800457a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800457e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d013      	beq.n	80045b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004588:	f7fd ff80 	bl	800248c <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004590:	f7fd ff7c 	bl	800248c <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b64      	cmp	r3, #100	; 0x64
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e1fb      	b.n	800499a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a2:	4b76      	ldr	r3, [pc, #472]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCC_OscConfig+0xc0>
 80045ae:	e014      	b.n	80045da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b0:	f7fd ff6c 	bl	800248c <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045b8:	f7fd ff68 	bl	800248c <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b64      	cmp	r3, #100	; 0x64
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e1e7      	b.n	800499a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ca:	4b6c      	ldr	r3, [pc, #432]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0xe8>
 80045d6:	e000      	b.n	80045da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d063      	beq.n	80046ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045e6:	4b65      	ldr	r3, [pc, #404]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 030c 	and.w	r3, r3, #12
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00b      	beq.n	800460a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045f2:	4b62      	ldr	r3, [pc, #392]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d11c      	bne.n	8004638 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045fe:	4b5f      	ldr	r3, [pc, #380]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d116      	bne.n	8004638 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800460a:	4b5c      	ldr	r3, [pc, #368]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d005      	beq.n	8004622 <HAL_RCC_OscConfig+0x152>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d001      	beq.n	8004622 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e1bb      	b.n	800499a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004622:	4b56      	ldr	r3, [pc, #344]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	4952      	ldr	r1, [pc, #328]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 8004632:	4313      	orrs	r3, r2
 8004634:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004636:	e03a      	b.n	80046ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d020      	beq.n	8004682 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004640:	4b4f      	ldr	r3, [pc, #316]	; (8004780 <HAL_RCC_OscConfig+0x2b0>)
 8004642:	2201      	movs	r2, #1
 8004644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004646:	f7fd ff21 	bl	800248c <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800464e:	f7fd ff1d 	bl	800248c <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e19c      	b.n	800499a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004660:	4b46      	ldr	r3, [pc, #280]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800466c:	4b43      	ldr	r3, [pc, #268]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	4940      	ldr	r1, [pc, #256]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 800467c:	4313      	orrs	r3, r2
 800467e:	600b      	str	r3, [r1, #0]
 8004680:	e015      	b.n	80046ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004682:	4b3f      	ldr	r3, [pc, #252]	; (8004780 <HAL_RCC_OscConfig+0x2b0>)
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004688:	f7fd ff00 	bl	800248c <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004690:	f7fd fefc 	bl	800248c <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e17b      	b.n	800499a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a2:	4b36      	ldr	r3, [pc, #216]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1f0      	bne.n	8004690 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d030      	beq.n	800471c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d016      	beq.n	80046f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046c2:	4b30      	ldr	r3, [pc, #192]	; (8004784 <HAL_RCC_OscConfig+0x2b4>)
 80046c4:	2201      	movs	r2, #1
 80046c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c8:	f7fd fee0 	bl	800248c <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046d0:	f7fd fedc 	bl	800248c <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e15b      	b.n	800499a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e2:	4b26      	ldr	r3, [pc, #152]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 80046e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f0      	beq.n	80046d0 <HAL_RCC_OscConfig+0x200>
 80046ee:	e015      	b.n	800471c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046f0:	4b24      	ldr	r3, [pc, #144]	; (8004784 <HAL_RCC_OscConfig+0x2b4>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f6:	f7fd fec9 	bl	800248c <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046fe:	f7fd fec5 	bl	800248c <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e144      	b.n	800499a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004710:	4b1a      	ldr	r3, [pc, #104]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 8004712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1f0      	bne.n	80046fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 80a0 	beq.w	800486a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800472a:	2300      	movs	r3, #0
 800472c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800472e:	4b13      	ldr	r3, [pc, #76]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10f      	bne.n	800475a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800473a:	2300      	movs	r3, #0
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	4b0f      	ldr	r3, [pc, #60]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	4a0e      	ldr	r2, [pc, #56]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 8004744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004748:	6413      	str	r3, [r2, #64]	; 0x40
 800474a:	4b0c      	ldr	r3, [pc, #48]	; (800477c <HAL_RCC_OscConfig+0x2ac>)
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004752:	60bb      	str	r3, [r7, #8]
 8004754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004756:	2301      	movs	r3, #1
 8004758:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475a:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <HAL_RCC_OscConfig+0x2b8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004762:	2b00      	cmp	r3, #0
 8004764:	d121      	bne.n	80047aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004766:	4b08      	ldr	r3, [pc, #32]	; (8004788 <HAL_RCC_OscConfig+0x2b8>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a07      	ldr	r2, [pc, #28]	; (8004788 <HAL_RCC_OscConfig+0x2b8>)
 800476c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004772:	f7fd fe8b 	bl	800248c <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004778:	e011      	b.n	800479e <HAL_RCC_OscConfig+0x2ce>
 800477a:	bf00      	nop
 800477c:	40023800 	.word	0x40023800
 8004780:	42470000 	.word	0x42470000
 8004784:	42470e80 	.word	0x42470e80
 8004788:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478c:	f7fd fe7e 	bl	800248c <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e0fd      	b.n	800499a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479e:	4b81      	ldr	r3, [pc, #516]	; (80049a4 <HAL_RCC_OscConfig+0x4d4>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f0      	beq.n	800478c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d106      	bne.n	80047c0 <HAL_RCC_OscConfig+0x2f0>
 80047b2:	4b7d      	ldr	r3, [pc, #500]	; (80049a8 <HAL_RCC_OscConfig+0x4d8>)
 80047b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b6:	4a7c      	ldr	r2, [pc, #496]	; (80049a8 <HAL_RCC_OscConfig+0x4d8>)
 80047b8:	f043 0301 	orr.w	r3, r3, #1
 80047bc:	6713      	str	r3, [r2, #112]	; 0x70
 80047be:	e01c      	b.n	80047fa <HAL_RCC_OscConfig+0x32a>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b05      	cmp	r3, #5
 80047c6:	d10c      	bne.n	80047e2 <HAL_RCC_OscConfig+0x312>
 80047c8:	4b77      	ldr	r3, [pc, #476]	; (80049a8 <HAL_RCC_OscConfig+0x4d8>)
 80047ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047cc:	4a76      	ldr	r2, [pc, #472]	; (80049a8 <HAL_RCC_OscConfig+0x4d8>)
 80047ce:	f043 0304 	orr.w	r3, r3, #4
 80047d2:	6713      	str	r3, [r2, #112]	; 0x70
 80047d4:	4b74      	ldr	r3, [pc, #464]	; (80049a8 <HAL_RCC_OscConfig+0x4d8>)
 80047d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d8:	4a73      	ldr	r2, [pc, #460]	; (80049a8 <HAL_RCC_OscConfig+0x4d8>)
 80047da:	f043 0301 	orr.w	r3, r3, #1
 80047de:	6713      	str	r3, [r2, #112]	; 0x70
 80047e0:	e00b      	b.n	80047fa <HAL_RCC_OscConfig+0x32a>
 80047e2:	4b71      	ldr	r3, [pc, #452]	; (80049a8 <HAL_RCC_OscConfig+0x4d8>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e6:	4a70      	ldr	r2, [pc, #448]	; (80049a8 <HAL_RCC_OscConfig+0x4d8>)
 80047e8:	f023 0301 	bic.w	r3, r3, #1
 80047ec:	6713      	str	r3, [r2, #112]	; 0x70
 80047ee:	4b6e      	ldr	r3, [pc, #440]	; (80049a8 <HAL_RCC_OscConfig+0x4d8>)
 80047f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f2:	4a6d      	ldr	r2, [pc, #436]	; (80049a8 <HAL_RCC_OscConfig+0x4d8>)
 80047f4:	f023 0304 	bic.w	r3, r3, #4
 80047f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d015      	beq.n	800482e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004802:	f7fd fe43 	bl	800248c <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004808:	e00a      	b.n	8004820 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800480a:	f7fd fe3f 	bl	800248c <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	f241 3288 	movw	r2, #5000	; 0x1388
 8004818:	4293      	cmp	r3, r2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e0bc      	b.n	800499a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004820:	4b61      	ldr	r3, [pc, #388]	; (80049a8 <HAL_RCC_OscConfig+0x4d8>)
 8004822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0ee      	beq.n	800480a <HAL_RCC_OscConfig+0x33a>
 800482c:	e014      	b.n	8004858 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800482e:	f7fd fe2d 	bl	800248c <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004834:	e00a      	b.n	800484c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004836:	f7fd fe29 	bl	800248c <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	f241 3288 	movw	r2, #5000	; 0x1388
 8004844:	4293      	cmp	r3, r2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e0a6      	b.n	800499a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800484c:	4b56      	ldr	r3, [pc, #344]	; (80049a8 <HAL_RCC_OscConfig+0x4d8>)
 800484e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1ee      	bne.n	8004836 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004858:	7dfb      	ldrb	r3, [r7, #23]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d105      	bne.n	800486a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800485e:	4b52      	ldr	r3, [pc, #328]	; (80049a8 <HAL_RCC_OscConfig+0x4d8>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	4a51      	ldr	r2, [pc, #324]	; (80049a8 <HAL_RCC_OscConfig+0x4d8>)
 8004864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004868:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 8092 	beq.w	8004998 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004874:	4b4c      	ldr	r3, [pc, #304]	; (80049a8 <HAL_RCC_OscConfig+0x4d8>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 030c 	and.w	r3, r3, #12
 800487c:	2b08      	cmp	r3, #8
 800487e:	d05c      	beq.n	800493a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d141      	bne.n	800490c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004888:	4b48      	ldr	r3, [pc, #288]	; (80049ac <HAL_RCC_OscConfig+0x4dc>)
 800488a:	2200      	movs	r2, #0
 800488c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488e:	f7fd fdfd 	bl	800248c <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004896:	f7fd fdf9 	bl	800248c <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e078      	b.n	800499a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a8:	4b3f      	ldr	r3, [pc, #252]	; (80049a8 <HAL_RCC_OscConfig+0x4d8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1f0      	bne.n	8004896 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69da      	ldr	r2, [r3, #28]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	431a      	orrs	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	019b      	lsls	r3, r3, #6
 80048c4:	431a      	orrs	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ca:	085b      	lsrs	r3, r3, #1
 80048cc:	3b01      	subs	r3, #1
 80048ce:	041b      	lsls	r3, r3, #16
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d6:	061b      	lsls	r3, r3, #24
 80048d8:	4933      	ldr	r1, [pc, #204]	; (80049a8 <HAL_RCC_OscConfig+0x4d8>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048de:	4b33      	ldr	r3, [pc, #204]	; (80049ac <HAL_RCC_OscConfig+0x4dc>)
 80048e0:	2201      	movs	r2, #1
 80048e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e4:	f7fd fdd2 	bl	800248c <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ec:	f7fd fdce 	bl	800248c <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e04d      	b.n	800499a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048fe:	4b2a      	ldr	r3, [pc, #168]	; (80049a8 <HAL_RCC_OscConfig+0x4d8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0f0      	beq.n	80048ec <HAL_RCC_OscConfig+0x41c>
 800490a:	e045      	b.n	8004998 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800490c:	4b27      	ldr	r3, [pc, #156]	; (80049ac <HAL_RCC_OscConfig+0x4dc>)
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004912:	f7fd fdbb 	bl	800248c <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800491a:	f7fd fdb7 	bl	800248c <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e036      	b.n	800499a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800492c:	4b1e      	ldr	r3, [pc, #120]	; (80049a8 <HAL_RCC_OscConfig+0x4d8>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1f0      	bne.n	800491a <HAL_RCC_OscConfig+0x44a>
 8004938:	e02e      	b.n	8004998 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e029      	b.n	800499a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004946:	4b18      	ldr	r3, [pc, #96]	; (80049a8 <HAL_RCC_OscConfig+0x4d8>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	429a      	cmp	r2, r3
 8004958:	d11c      	bne.n	8004994 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004964:	429a      	cmp	r2, r3
 8004966:	d115      	bne.n	8004994 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800496e:	4013      	ands	r3, r2
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004974:	4293      	cmp	r3, r2
 8004976:	d10d      	bne.n	8004994 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004982:	429a      	cmp	r2, r3
 8004984:	d106      	bne.n	8004994 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004990:	429a      	cmp	r2, r3
 8004992:	d001      	beq.n	8004998 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	40007000 	.word	0x40007000
 80049a8:	40023800 	.word	0x40023800
 80049ac:	42470060 	.word	0x42470060

080049b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e0cc      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049c4:	4b68      	ldr	r3, [pc, #416]	; (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 030f 	and.w	r3, r3, #15
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d90c      	bls.n	80049ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d2:	4b65      	ldr	r3, [pc, #404]	; (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049da:	4b63      	ldr	r3, [pc, #396]	; (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d001      	beq.n	80049ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e0b8      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d020      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a04:	4b59      	ldr	r3, [pc, #356]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	4a58      	ldr	r2, [pc, #352]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a1c:	4b53      	ldr	r3, [pc, #332]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4a52      	ldr	r2, [pc, #328]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a28:	4b50      	ldr	r3, [pc, #320]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	494d      	ldr	r1, [pc, #308]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d044      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d107      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a4e:	4b47      	ldr	r3, [pc, #284]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d119      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e07f      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d003      	beq.n	8004a6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a6a:	2b03      	cmp	r3, #3
 8004a6c:	d107      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a6e:	4b3f      	ldr	r3, [pc, #252]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d109      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e06f      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a7e:	4b3b      	ldr	r3, [pc, #236]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e067      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a8e:	4b37      	ldr	r3, [pc, #220]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f023 0203 	bic.w	r2, r3, #3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	4934      	ldr	r1, [pc, #208]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004aa0:	f7fd fcf4 	bl	800248c <HAL_GetTick>
 8004aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa6:	e00a      	b.n	8004abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa8:	f7fd fcf0 	bl	800248c <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e04f      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004abe:	4b2b      	ldr	r3, [pc, #172]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 020c 	and.w	r2, r3, #12
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d1eb      	bne.n	8004aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ad0:	4b25      	ldr	r3, [pc, #148]	; (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d20c      	bcs.n	8004af8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ade:	4b22      	ldr	r3, [pc, #136]	; (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae6:	4b20      	ldr	r3, [pc, #128]	; (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d001      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e032      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d008      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b04:	4b19      	ldr	r3, [pc, #100]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4916      	ldr	r1, [pc, #88]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b22:	4b12      	ldr	r3, [pc, #72]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	490e      	ldr	r1, [pc, #56]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b36:	f000 f821 	bl	8004b7c <HAL_RCC_GetSysClockFreq>
 8004b3a:	4601      	mov	r1, r0
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	091b      	lsrs	r3, r3, #4
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	4a0a      	ldr	r2, [pc, #40]	; (8004b70 <HAL_RCC_ClockConfig+0x1c0>)
 8004b48:	5cd3      	ldrb	r3, [r2, r3]
 8004b4a:	fa21 f303 	lsr.w	r3, r1, r3
 8004b4e:	4a09      	ldr	r2, [pc, #36]	; (8004b74 <HAL_RCC_ClockConfig+0x1c4>)
 8004b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b52:	4b09      	ldr	r3, [pc, #36]	; (8004b78 <HAL_RCC_ClockConfig+0x1c8>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fd fc54 	bl	8002404 <HAL_InitTick>

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40023c00 	.word	0x40023c00
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	0800ba70 	.word	0x0800ba70
 8004b74:	20000004 	.word	0x20000004
 8004b78:	20000008 	.word	0x20000008

08004b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	607b      	str	r3, [r7, #4]
 8004b86:	2300      	movs	r3, #0
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b92:	4b63      	ldr	r3, [pc, #396]	; (8004d20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 030c 	and.w	r3, r3, #12
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d007      	beq.n	8004bae <HAL_RCC_GetSysClockFreq+0x32>
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d008      	beq.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x38>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f040 80b4 	bne.w	8004d10 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ba8:	4b5e      	ldr	r3, [pc, #376]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004baa:	60bb      	str	r3, [r7, #8]
       break;
 8004bac:	e0b3      	b.n	8004d16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bae:	4b5e      	ldr	r3, [pc, #376]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004bb0:	60bb      	str	r3, [r7, #8]
      break;
 8004bb2:	e0b0      	b.n	8004d16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bb4:	4b5a      	ldr	r3, [pc, #360]	; (8004d20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bbc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bbe:	4b58      	ldr	r3, [pc, #352]	; (8004d20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d04a      	beq.n	8004c60 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bca:	4b55      	ldr	r3, [pc, #340]	; (8004d20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	099b      	lsrs	r3, r3, #6
 8004bd0:	f04f 0400 	mov.w	r4, #0
 8004bd4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	ea03 0501 	and.w	r5, r3, r1
 8004be0:	ea04 0602 	and.w	r6, r4, r2
 8004be4:	4629      	mov	r1, r5
 8004be6:	4632      	mov	r2, r6
 8004be8:	f04f 0300 	mov.w	r3, #0
 8004bec:	f04f 0400 	mov.w	r4, #0
 8004bf0:	0154      	lsls	r4, r2, #5
 8004bf2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004bf6:	014b      	lsls	r3, r1, #5
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4622      	mov	r2, r4
 8004bfc:	1b49      	subs	r1, r1, r5
 8004bfe:	eb62 0206 	sbc.w	r2, r2, r6
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	f04f 0400 	mov.w	r4, #0
 8004c0a:	0194      	lsls	r4, r2, #6
 8004c0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c10:	018b      	lsls	r3, r1, #6
 8004c12:	1a5b      	subs	r3, r3, r1
 8004c14:	eb64 0402 	sbc.w	r4, r4, r2
 8004c18:	f04f 0100 	mov.w	r1, #0
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	00e2      	lsls	r2, r4, #3
 8004c22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c26:	00d9      	lsls	r1, r3, #3
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4614      	mov	r4, r2
 8004c2c:	195b      	adds	r3, r3, r5
 8004c2e:	eb44 0406 	adc.w	r4, r4, r6
 8004c32:	f04f 0100 	mov.w	r1, #0
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	0262      	lsls	r2, r4, #9
 8004c3c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004c40:	0259      	lsls	r1, r3, #9
 8004c42:	460b      	mov	r3, r1
 8004c44:	4614      	mov	r4, r2
 8004c46:	4618      	mov	r0, r3
 8004c48:	4621      	mov	r1, r4
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f04f 0400 	mov.w	r4, #0
 8004c50:	461a      	mov	r2, r3
 8004c52:	4623      	mov	r3, r4
 8004c54:	f7fc f800 	bl	8000c58 <__aeabi_uldivmod>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	460c      	mov	r4, r1
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	e049      	b.n	8004cf4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c60:	4b2f      	ldr	r3, [pc, #188]	; (8004d20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	099b      	lsrs	r3, r3, #6
 8004c66:	f04f 0400 	mov.w	r4, #0
 8004c6a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	ea03 0501 	and.w	r5, r3, r1
 8004c76:	ea04 0602 	and.w	r6, r4, r2
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	4632      	mov	r2, r6
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	f04f 0400 	mov.w	r4, #0
 8004c86:	0154      	lsls	r4, r2, #5
 8004c88:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c8c:	014b      	lsls	r3, r1, #5
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4622      	mov	r2, r4
 8004c92:	1b49      	subs	r1, r1, r5
 8004c94:	eb62 0206 	sbc.w	r2, r2, r6
 8004c98:	f04f 0300 	mov.w	r3, #0
 8004c9c:	f04f 0400 	mov.w	r4, #0
 8004ca0:	0194      	lsls	r4, r2, #6
 8004ca2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ca6:	018b      	lsls	r3, r1, #6
 8004ca8:	1a5b      	subs	r3, r3, r1
 8004caa:	eb64 0402 	sbc.w	r4, r4, r2
 8004cae:	f04f 0100 	mov.w	r1, #0
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	00e2      	lsls	r2, r4, #3
 8004cb8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004cbc:	00d9      	lsls	r1, r3, #3
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4614      	mov	r4, r2
 8004cc2:	195b      	adds	r3, r3, r5
 8004cc4:	eb44 0406 	adc.w	r4, r4, r6
 8004cc8:	f04f 0100 	mov.w	r1, #0
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	02a2      	lsls	r2, r4, #10
 8004cd2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004cd6:	0299      	lsls	r1, r3, #10
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4614      	mov	r4, r2
 8004cdc:	4618      	mov	r0, r3
 8004cde:	4621      	mov	r1, r4
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f04f 0400 	mov.w	r4, #0
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	4623      	mov	r3, r4
 8004cea:	f7fb ffb5 	bl	8000c58 <__aeabi_uldivmod>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	460c      	mov	r4, r1
 8004cf2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	0c1b      	lsrs	r3, r3, #16
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	3301      	adds	r3, #1
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0c:	60bb      	str	r3, [r7, #8]
      break;
 8004d0e:	e002      	b.n	8004d16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d10:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004d12:	60bb      	str	r3, [r7, #8]
      break;
 8004d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d16:	68bb      	ldr	r3, [r7, #8]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d20:	40023800 	.word	0x40023800
 8004d24:	00f42400 	.word	0x00f42400
 8004d28:	007a1200 	.word	0x007a1200

08004d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d30:	4b03      	ldr	r3, [pc, #12]	; (8004d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d32:	681b      	ldr	r3, [r3, #0]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	20000004 	.word	0x20000004

08004d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d48:	f7ff fff0 	bl	8004d2c <HAL_RCC_GetHCLKFreq>
 8004d4c:	4601      	mov	r1, r0
 8004d4e:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	0a9b      	lsrs	r3, r3, #10
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	4a03      	ldr	r2, [pc, #12]	; (8004d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d5a:	5cd3      	ldrb	r3, [r2, r3]
 8004d5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	40023800 	.word	0x40023800
 8004d68:	0800ba80 	.word	0x0800ba80

08004d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d70:	f7ff ffdc 	bl	8004d2c <HAL_RCC_GetHCLKFreq>
 8004d74:	4601      	mov	r1, r0
 8004d76:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	0b5b      	lsrs	r3, r3, #13
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	4a03      	ldr	r2, [pc, #12]	; (8004d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d82:	5cd3      	ldrb	r3, [r2, r3]
 8004d84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	0800ba80 	.word	0x0800ba80

08004d94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e056      	b.n	8004e54 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d106      	bne.n	8004dc6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7fc fdfb 	bl	80019bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2202      	movs	r2, #2
 8004dca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ddc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	ea42 0103 	orr.w	r1, r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	0c1b      	lsrs	r3, r3, #16
 8004e24:	f003 0104 	and.w	r1, r3, #4
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	69da      	ldr	r2, [r3, #28]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e42:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b088      	sub	sp, #32
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d101      	bne.n	8004e7e <HAL_SPI_Transmit+0x22>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e11e      	b.n	80050bc <HAL_SPI_Transmit+0x260>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e86:	f7fd fb01 	bl	800248c <HAL_GetTick>
 8004e8a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d002      	beq.n	8004ea2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ea0:	e103      	b.n	80050aa <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <HAL_SPI_Transmit+0x52>
 8004ea8:	88fb      	ldrh	r3, [r7, #6]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d102      	bne.n	8004eb4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004eb2:	e0fa      	b.n	80050aa <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2203      	movs	r2, #3
 8004eb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	88fa      	ldrh	r2, [r7, #6]
 8004ecc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	88fa      	ldrh	r2, [r7, #6]
 8004ed2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004efa:	d107      	bne.n	8004f0c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f0a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f16:	2b40      	cmp	r3, #64	; 0x40
 8004f18:	d007      	beq.n	8004f2a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f32:	d14b      	bne.n	8004fcc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d002      	beq.n	8004f42 <HAL_SPI_Transmit+0xe6>
 8004f3c:	8afb      	ldrh	r3, [r7, #22]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d13e      	bne.n	8004fc0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	881a      	ldrh	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f52:	1c9a      	adds	r2, r3, #2
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f66:	e02b      	b.n	8004fc0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d112      	bne.n	8004f9c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	881a      	ldrh	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	1c9a      	adds	r2, r3, #2
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f9a:	e011      	b.n	8004fc0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f9c:	f7fd fa76 	bl	800248c <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d803      	bhi.n	8004fb4 <HAL_SPI_Transmit+0x158>
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb2:	d102      	bne.n	8004fba <HAL_SPI_Transmit+0x15e>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d102      	bne.n	8004fc0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004fbe:	e074      	b.n	80050aa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1ce      	bne.n	8004f68 <HAL_SPI_Transmit+0x10c>
 8004fca:	e04c      	b.n	8005066 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <HAL_SPI_Transmit+0x17e>
 8004fd4:	8afb      	ldrh	r3, [r7, #22]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d140      	bne.n	800505c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	330c      	adds	r3, #12
 8004fe4:	7812      	ldrb	r2, [r2, #0]
 8004fe6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005000:	e02c      	b.n	800505c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b02      	cmp	r3, #2
 800500e:	d113      	bne.n	8005038 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	330c      	adds	r3, #12
 800501a:	7812      	ldrb	r2, [r2, #0]
 800501c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800502c:	b29b      	uxth	r3, r3
 800502e:	3b01      	subs	r3, #1
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	86da      	strh	r2, [r3, #54]	; 0x36
 8005036:	e011      	b.n	800505c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005038:	f7fd fa28 	bl	800248c <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d803      	bhi.n	8005050 <HAL_SPI_Transmit+0x1f4>
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504e:	d102      	bne.n	8005056 <HAL_SPI_Transmit+0x1fa>
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d102      	bne.n	800505c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	77fb      	strb	r3, [r7, #31]
          goto error;
 800505a:	e026      	b.n	80050aa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1cd      	bne.n	8005002 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	6839      	ldr	r1, [r7, #0]
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 fba4 	bl	80057b8 <SPI_EndRxTxTransaction>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2220      	movs	r2, #32
 800507a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10a      	bne.n	800509a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005084:	2300      	movs	r3, #0
 8005086:	613b      	str	r3, [r7, #16]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	613b      	str	r3, [r7, #16]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	77fb      	strb	r3, [r7, #31]
 80050a6:	e000      	b.n	80050aa <HAL_SPI_Transmit+0x24e>
  }

error:
 80050a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3720      	adds	r7, #32
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af02      	add	r7, sp, #8
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	603b      	str	r3, [r7, #0]
 80050d0:	4613      	mov	r3, r2
 80050d2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050d4:	2300      	movs	r3, #0
 80050d6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050e0:	d112      	bne.n	8005108 <HAL_SPI_Receive+0x44>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10e      	bne.n	8005108 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2204      	movs	r2, #4
 80050ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80050f2:	88fa      	ldrh	r2, [r7, #6]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	4613      	mov	r3, r2
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	68b9      	ldr	r1, [r7, #8]
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 f8e9 	bl	80052d6 <HAL_SPI_TransmitReceive>
 8005104:	4603      	mov	r3, r0
 8005106:	e0e2      	b.n	80052ce <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_SPI_Receive+0x52>
 8005112:	2302      	movs	r3, #2
 8005114:	e0db      	b.n	80052ce <HAL_SPI_Receive+0x20a>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800511e:	f7fd f9b5 	bl	800248c <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b01      	cmp	r3, #1
 800512e:	d002      	beq.n	8005136 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005130:	2302      	movs	r3, #2
 8005132:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005134:	e0c2      	b.n	80052bc <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <HAL_SPI_Receive+0x7e>
 800513c:	88fb      	ldrh	r3, [r7, #6]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d102      	bne.n	8005148 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005146:	e0b9      	b.n	80052bc <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2204      	movs	r2, #4
 800514c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	88fa      	ldrh	r2, [r7, #6]
 8005160:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	88fa      	ldrh	r2, [r7, #6]
 8005166:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800518e:	d107      	bne.n	80051a0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800519e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051aa:	2b40      	cmp	r3, #64	; 0x40
 80051ac:	d007      	beq.n	80051be <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051bc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d162      	bne.n	800528c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80051c6:	e02e      	b.n	8005226 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d115      	bne.n	8005202 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f103 020c 	add.w	r2, r3, #12
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	7812      	ldrb	r2, [r2, #0]
 80051e4:	b2d2      	uxtb	r2, r2
 80051e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	3b01      	subs	r3, #1
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005200:	e011      	b.n	8005226 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005202:	f7fd f943 	bl	800248c <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d803      	bhi.n	800521a <HAL_SPI_Receive+0x156>
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005218:	d102      	bne.n	8005220 <HAL_SPI_Receive+0x15c>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d102      	bne.n	8005226 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005224:	e04a      	b.n	80052bc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1cb      	bne.n	80051c8 <HAL_SPI_Receive+0x104>
 8005230:	e031      	b.n	8005296 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b01      	cmp	r3, #1
 800523e:	d113      	bne.n	8005268 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68da      	ldr	r2, [r3, #12]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524a:	b292      	uxth	r2, r2
 800524c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005252:	1c9a      	adds	r2, r3, #2
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800525c:	b29b      	uxth	r3, r3
 800525e:	3b01      	subs	r3, #1
 8005260:	b29a      	uxth	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005266:	e011      	b.n	800528c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005268:	f7fd f910 	bl	800248c <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	429a      	cmp	r2, r3
 8005276:	d803      	bhi.n	8005280 <HAL_SPI_Receive+0x1bc>
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527e:	d102      	bne.n	8005286 <HAL_SPI_Receive+0x1c2>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d102      	bne.n	800528c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	75fb      	strb	r3, [r7, #23]
          goto error;
 800528a:	e017      	b.n	80052bc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1cd      	bne.n	8005232 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	6839      	ldr	r1, [r7, #0]
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 fa27 	bl	80056ee <SPI_EndRxTransaction>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2220      	movs	r2, #32
 80052aa:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	75fb      	strb	r3, [r7, #23]
 80052b8:	e000      	b.n	80052bc <HAL_SPI_Receive+0x1f8>
  }

error :
 80052ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b08c      	sub	sp, #48	; 0x30
 80052da:	af00      	add	r7, sp, #0
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	607a      	str	r2, [r7, #4]
 80052e2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80052e4:	2301      	movs	r3, #1
 80052e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d101      	bne.n	80052fc <HAL_SPI_TransmitReceive+0x26>
 80052f8:	2302      	movs	r3, #2
 80052fa:	e18a      	b.n	8005612 <HAL_SPI_TransmitReceive+0x33c>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005304:	f7fd f8c2 	bl	800248c <HAL_GetTick>
 8005308:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005310:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800531a:	887b      	ldrh	r3, [r7, #2]
 800531c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800531e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005322:	2b01      	cmp	r3, #1
 8005324:	d00f      	beq.n	8005346 <HAL_SPI_TransmitReceive+0x70>
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800532c:	d107      	bne.n	800533e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d103      	bne.n	800533e <HAL_SPI_TransmitReceive+0x68>
 8005336:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800533a:	2b04      	cmp	r3, #4
 800533c:	d003      	beq.n	8005346 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800533e:	2302      	movs	r3, #2
 8005340:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005344:	e15b      	b.n	80055fe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <HAL_SPI_TransmitReceive+0x82>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <HAL_SPI_TransmitReceive+0x82>
 8005352:	887b      	ldrh	r3, [r7, #2]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d103      	bne.n	8005360 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800535e:	e14e      	b.n	80055fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b04      	cmp	r3, #4
 800536a:	d003      	beq.n	8005374 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2205      	movs	r2, #5
 8005370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	887a      	ldrh	r2, [r7, #2]
 8005384:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	887a      	ldrh	r2, [r7, #2]
 800538a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	887a      	ldrh	r2, [r7, #2]
 8005396:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	887a      	ldrh	r2, [r7, #2]
 800539c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b4:	2b40      	cmp	r3, #64	; 0x40
 80053b6:	d007      	beq.n	80053c8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053d0:	d178      	bne.n	80054c4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <HAL_SPI_TransmitReceive+0x10a>
 80053da:	8b7b      	ldrh	r3, [r7, #26]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d166      	bne.n	80054ae <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e4:	881a      	ldrh	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f0:	1c9a      	adds	r2, r3, #2
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	3b01      	subs	r3, #1
 80053fe:	b29a      	uxth	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005404:	e053      	b.n	80054ae <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b02      	cmp	r3, #2
 8005412:	d11b      	bne.n	800544c <HAL_SPI_TransmitReceive+0x176>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005418:	b29b      	uxth	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d016      	beq.n	800544c <HAL_SPI_TransmitReceive+0x176>
 800541e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005420:	2b01      	cmp	r3, #1
 8005422:	d113      	bne.n	800544c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005428:	881a      	ldrh	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005434:	1c9a      	adds	r2, r3, #2
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800543e:	b29b      	uxth	r3, r3
 8005440:	3b01      	subs	r3, #1
 8005442:	b29a      	uxth	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005448:	2300      	movs	r3, #0
 800544a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b01      	cmp	r3, #1
 8005458:	d119      	bne.n	800548e <HAL_SPI_TransmitReceive+0x1b8>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d014      	beq.n	800548e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546e:	b292      	uxth	r2, r2
 8005470:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005476:	1c9a      	adds	r2, r3, #2
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005480:	b29b      	uxth	r3, r3
 8005482:	3b01      	subs	r3, #1
 8005484:	b29a      	uxth	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800548a:	2301      	movs	r3, #1
 800548c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800548e:	f7fc fffd 	bl	800248c <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800549a:	429a      	cmp	r2, r3
 800549c:	d807      	bhi.n	80054ae <HAL_SPI_TransmitReceive+0x1d8>
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a4:	d003      	beq.n	80054ae <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80054ac:	e0a7      	b.n	80055fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1a6      	bne.n	8005406 <HAL_SPI_TransmitReceive+0x130>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054bc:	b29b      	uxth	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1a1      	bne.n	8005406 <HAL_SPI_TransmitReceive+0x130>
 80054c2:	e07c      	b.n	80055be <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <HAL_SPI_TransmitReceive+0x1fc>
 80054cc:	8b7b      	ldrh	r3, [r7, #26]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d16b      	bne.n	80055aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	330c      	adds	r3, #12
 80054dc:	7812      	ldrb	r2, [r2, #0]
 80054de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054f8:	e057      	b.n	80055aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b02      	cmp	r3, #2
 8005506:	d11c      	bne.n	8005542 <HAL_SPI_TransmitReceive+0x26c>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800550c:	b29b      	uxth	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d017      	beq.n	8005542 <HAL_SPI_TransmitReceive+0x26c>
 8005512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005514:	2b01      	cmp	r3, #1
 8005516:	d114      	bne.n	8005542 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	330c      	adds	r3, #12
 8005522:	7812      	ldrb	r2, [r2, #0]
 8005524:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005534:	b29b      	uxth	r3, r3
 8005536:	3b01      	subs	r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b01      	cmp	r3, #1
 800554e:	d119      	bne.n	8005584 <HAL_SPI_TransmitReceive+0x2ae>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005554:	b29b      	uxth	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d014      	beq.n	8005584 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556c:	1c5a      	adds	r2, r3, #1
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005576:	b29b      	uxth	r3, r3
 8005578:	3b01      	subs	r3, #1
 800557a:	b29a      	uxth	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005580:	2301      	movs	r3, #1
 8005582:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005584:	f7fc ff82 	bl	800248c <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005590:	429a      	cmp	r2, r3
 8005592:	d803      	bhi.n	800559c <HAL_SPI_TransmitReceive+0x2c6>
 8005594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559a:	d102      	bne.n	80055a2 <HAL_SPI_TransmitReceive+0x2cc>
 800559c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d103      	bne.n	80055aa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80055a8:	e029      	b.n	80055fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1a2      	bne.n	80054fa <HAL_SPI_TransmitReceive+0x224>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d19d      	bne.n	80054fa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 f8f8 	bl	80057b8 <SPI_EndRxTxTransaction>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d006      	beq.n	80055dc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2220      	movs	r2, #32
 80055d8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80055da:	e010      	b.n	80055fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10b      	bne.n	80055fc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055e4:	2300      	movs	r3, #0
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	617b      	str	r3, [r7, #20]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	e000      	b.n	80055fe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80055fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800560e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005612:	4618      	mov	r0, r3
 8005614:	3730      	adds	r7, #48	; 0x30
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b084      	sub	sp, #16
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	603b      	str	r3, [r7, #0]
 8005626:	4613      	mov	r3, r2
 8005628:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800562a:	e04c      	b.n	80056c6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005632:	d048      	beq.n	80056c6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005634:	f7fc ff2a 	bl	800248c <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	429a      	cmp	r2, r3
 8005642:	d902      	bls.n	800564a <SPI_WaitFlagStateUntilTimeout+0x30>
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d13d      	bne.n	80056c6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005658:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005662:	d111      	bne.n	8005688 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800566c:	d004      	beq.n	8005678 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005676:	d107      	bne.n	8005688 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005686:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005690:	d10f      	bne.n	80056b2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e00f      	b.n	80056e6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	4013      	ands	r3, r2
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	bf0c      	ite	eq
 80056d6:	2301      	moveq	r3, #1
 80056d8:	2300      	movne	r3, #0
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	461a      	mov	r2, r3
 80056de:	79fb      	ldrb	r3, [r7, #7]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d1a3      	bne.n	800562c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b086      	sub	sp, #24
 80056f2:	af02      	add	r7, sp, #8
 80056f4:	60f8      	str	r0, [r7, #12]
 80056f6:	60b9      	str	r1, [r7, #8]
 80056f8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005702:	d111      	bne.n	8005728 <SPI_EndRxTransaction+0x3a>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800570c:	d004      	beq.n	8005718 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005716:	d107      	bne.n	8005728 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005726:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005730:	d12a      	bne.n	8005788 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800573a:	d012      	beq.n	8005762 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2200      	movs	r2, #0
 8005744:	2180      	movs	r1, #128	; 0x80
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f7ff ff67 	bl	800561a <SPI_WaitFlagStateUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d02d      	beq.n	80057ae <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005756:	f043 0220 	orr.w	r2, r3, #32
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e026      	b.n	80057b0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2200      	movs	r2, #0
 800576a:	2101      	movs	r1, #1
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f7ff ff54 	bl	800561a <SPI_WaitFlagStateUntilTimeout>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01a      	beq.n	80057ae <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577c:	f043 0220 	orr.w	r2, r3, #32
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e013      	b.n	80057b0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2200      	movs	r2, #0
 8005790:	2101      	movs	r1, #1
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f7ff ff41 	bl	800561a <SPI_WaitFlagStateUntilTimeout>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d007      	beq.n	80057ae <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a2:	f043 0220 	orr.w	r2, r3, #32
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e000      	b.n	80057b0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af02      	add	r7, sp, #8
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057c4:	4b1b      	ldr	r3, [pc, #108]	; (8005834 <SPI_EndRxTxTransaction+0x7c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a1b      	ldr	r2, [pc, #108]	; (8005838 <SPI_EndRxTxTransaction+0x80>)
 80057ca:	fba2 2303 	umull	r2, r3, r2, r3
 80057ce:	0d5b      	lsrs	r3, r3, #21
 80057d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057d4:	fb02 f303 	mul.w	r3, r2, r3
 80057d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057e2:	d112      	bne.n	800580a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2200      	movs	r2, #0
 80057ec:	2180      	movs	r1, #128	; 0x80
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f7ff ff13 	bl	800561a <SPI_WaitFlagStateUntilTimeout>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d016      	beq.n	8005828 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fe:	f043 0220 	orr.w	r2, r3, #32
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e00f      	b.n	800582a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00a      	beq.n	8005826 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	3b01      	subs	r3, #1
 8005814:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005820:	2b80      	cmp	r3, #128	; 0x80
 8005822:	d0f2      	beq.n	800580a <SPI_EndRxTxTransaction+0x52>
 8005824:	e000      	b.n	8005828 <SPI_EndRxTxTransaction+0x70>
        break;
 8005826:	bf00      	nop
  }

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3718      	adds	r7, #24
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	20000004 	.word	0x20000004
 8005838:	165e9f81 	.word	0x165e9f81

0800583c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e03f      	b.n	80058ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d106      	bne.n	8005868 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7fc f8f2 	bl	8001a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2224      	movs	r2, #36	; 0x24
 800586c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800587e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f829 	bl	80058d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005894:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	695a      	ldr	r2, [r3, #20]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
	...

080058d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058dc:	b085      	sub	sp, #20
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68da      	ldr	r2, [r3, #12]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	431a      	orrs	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	4313      	orrs	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800591a:	f023 030c 	bic.w	r3, r3, #12
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6812      	ldr	r2, [r2, #0]
 8005922:	68f9      	ldr	r1, [r7, #12]
 8005924:	430b      	orrs	r3, r1
 8005926:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005946:	f040 818b 	bne.w	8005c60 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4ac1      	ldr	r2, [pc, #772]	; (8005c54 <UART_SetConfig+0x37c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d005      	beq.n	8005960 <UART_SetConfig+0x88>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4abf      	ldr	r2, [pc, #764]	; (8005c58 <UART_SetConfig+0x380>)
 800595a:	4293      	cmp	r3, r2
 800595c:	f040 80bd 	bne.w	8005ada <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005960:	f7ff fa04 	bl	8004d6c <HAL_RCC_GetPCLK2Freq>
 8005964:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	461d      	mov	r5, r3
 800596a:	f04f 0600 	mov.w	r6, #0
 800596e:	46a8      	mov	r8, r5
 8005970:	46b1      	mov	r9, r6
 8005972:	eb18 0308 	adds.w	r3, r8, r8
 8005976:	eb49 0409 	adc.w	r4, r9, r9
 800597a:	4698      	mov	r8, r3
 800597c:	46a1      	mov	r9, r4
 800597e:	eb18 0805 	adds.w	r8, r8, r5
 8005982:	eb49 0906 	adc.w	r9, r9, r6
 8005986:	f04f 0100 	mov.w	r1, #0
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005992:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005996:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800599a:	4688      	mov	r8, r1
 800599c:	4691      	mov	r9, r2
 800599e:	eb18 0005 	adds.w	r0, r8, r5
 80059a2:	eb49 0106 	adc.w	r1, r9, r6
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	461d      	mov	r5, r3
 80059ac:	f04f 0600 	mov.w	r6, #0
 80059b0:	196b      	adds	r3, r5, r5
 80059b2:	eb46 0406 	adc.w	r4, r6, r6
 80059b6:	461a      	mov	r2, r3
 80059b8:	4623      	mov	r3, r4
 80059ba:	f7fb f94d 	bl	8000c58 <__aeabi_uldivmod>
 80059be:	4603      	mov	r3, r0
 80059c0:	460c      	mov	r4, r1
 80059c2:	461a      	mov	r2, r3
 80059c4:	4ba5      	ldr	r3, [pc, #660]	; (8005c5c <UART_SetConfig+0x384>)
 80059c6:	fba3 2302 	umull	r2, r3, r3, r2
 80059ca:	095b      	lsrs	r3, r3, #5
 80059cc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	461d      	mov	r5, r3
 80059d4:	f04f 0600 	mov.w	r6, #0
 80059d8:	46a9      	mov	r9, r5
 80059da:	46b2      	mov	sl, r6
 80059dc:	eb19 0309 	adds.w	r3, r9, r9
 80059e0:	eb4a 040a 	adc.w	r4, sl, sl
 80059e4:	4699      	mov	r9, r3
 80059e6:	46a2      	mov	sl, r4
 80059e8:	eb19 0905 	adds.w	r9, r9, r5
 80059ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80059f0:	f04f 0100 	mov.w	r1, #0
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a04:	4689      	mov	r9, r1
 8005a06:	4692      	mov	sl, r2
 8005a08:	eb19 0005 	adds.w	r0, r9, r5
 8005a0c:	eb4a 0106 	adc.w	r1, sl, r6
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	461d      	mov	r5, r3
 8005a16:	f04f 0600 	mov.w	r6, #0
 8005a1a:	196b      	adds	r3, r5, r5
 8005a1c:	eb46 0406 	adc.w	r4, r6, r6
 8005a20:	461a      	mov	r2, r3
 8005a22:	4623      	mov	r3, r4
 8005a24:	f7fb f918 	bl	8000c58 <__aeabi_uldivmod>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	460c      	mov	r4, r1
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	4b8b      	ldr	r3, [pc, #556]	; (8005c5c <UART_SetConfig+0x384>)
 8005a30:	fba3 1302 	umull	r1, r3, r3, r2
 8005a34:	095b      	lsrs	r3, r3, #5
 8005a36:	2164      	movs	r1, #100	; 0x64
 8005a38:	fb01 f303 	mul.w	r3, r1, r3
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	3332      	adds	r3, #50	; 0x32
 8005a42:	4a86      	ldr	r2, [pc, #536]	; (8005c5c <UART_SetConfig+0x384>)
 8005a44:	fba2 2303 	umull	r2, r3, r2, r3
 8005a48:	095b      	lsrs	r3, r3, #5
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a50:	4498      	add	r8, r3
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	461d      	mov	r5, r3
 8005a56:	f04f 0600 	mov.w	r6, #0
 8005a5a:	46a9      	mov	r9, r5
 8005a5c:	46b2      	mov	sl, r6
 8005a5e:	eb19 0309 	adds.w	r3, r9, r9
 8005a62:	eb4a 040a 	adc.w	r4, sl, sl
 8005a66:	4699      	mov	r9, r3
 8005a68:	46a2      	mov	sl, r4
 8005a6a:	eb19 0905 	adds.w	r9, r9, r5
 8005a6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a72:	f04f 0100 	mov.w	r1, #0
 8005a76:	f04f 0200 	mov.w	r2, #0
 8005a7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a86:	4689      	mov	r9, r1
 8005a88:	4692      	mov	sl, r2
 8005a8a:	eb19 0005 	adds.w	r0, r9, r5
 8005a8e:	eb4a 0106 	adc.w	r1, sl, r6
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	461d      	mov	r5, r3
 8005a98:	f04f 0600 	mov.w	r6, #0
 8005a9c:	196b      	adds	r3, r5, r5
 8005a9e:	eb46 0406 	adc.w	r4, r6, r6
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	4623      	mov	r3, r4
 8005aa6:	f7fb f8d7 	bl	8000c58 <__aeabi_uldivmod>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	460c      	mov	r4, r1
 8005aae:	461a      	mov	r2, r3
 8005ab0:	4b6a      	ldr	r3, [pc, #424]	; (8005c5c <UART_SetConfig+0x384>)
 8005ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab6:	095b      	lsrs	r3, r3, #5
 8005ab8:	2164      	movs	r1, #100	; 0x64
 8005aba:	fb01 f303 	mul.w	r3, r1, r3
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	3332      	adds	r3, #50	; 0x32
 8005ac4:	4a65      	ldr	r2, [pc, #404]	; (8005c5c <UART_SetConfig+0x384>)
 8005ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aca:	095b      	lsrs	r3, r3, #5
 8005acc:	f003 0207 	and.w	r2, r3, #7
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4442      	add	r2, r8
 8005ad6:	609a      	str	r2, [r3, #8]
 8005ad8:	e26f      	b.n	8005fba <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ada:	f7ff f933 	bl	8004d44 <HAL_RCC_GetPCLK1Freq>
 8005ade:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	461d      	mov	r5, r3
 8005ae4:	f04f 0600 	mov.w	r6, #0
 8005ae8:	46a8      	mov	r8, r5
 8005aea:	46b1      	mov	r9, r6
 8005aec:	eb18 0308 	adds.w	r3, r8, r8
 8005af0:	eb49 0409 	adc.w	r4, r9, r9
 8005af4:	4698      	mov	r8, r3
 8005af6:	46a1      	mov	r9, r4
 8005af8:	eb18 0805 	adds.w	r8, r8, r5
 8005afc:	eb49 0906 	adc.w	r9, r9, r6
 8005b00:	f04f 0100 	mov.w	r1, #0
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b0c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b10:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b14:	4688      	mov	r8, r1
 8005b16:	4691      	mov	r9, r2
 8005b18:	eb18 0005 	adds.w	r0, r8, r5
 8005b1c:	eb49 0106 	adc.w	r1, r9, r6
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	461d      	mov	r5, r3
 8005b26:	f04f 0600 	mov.w	r6, #0
 8005b2a:	196b      	adds	r3, r5, r5
 8005b2c:	eb46 0406 	adc.w	r4, r6, r6
 8005b30:	461a      	mov	r2, r3
 8005b32:	4623      	mov	r3, r4
 8005b34:	f7fb f890 	bl	8000c58 <__aeabi_uldivmod>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	4b47      	ldr	r3, [pc, #284]	; (8005c5c <UART_SetConfig+0x384>)
 8005b40:	fba3 2302 	umull	r2, r3, r3, r2
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	461d      	mov	r5, r3
 8005b4e:	f04f 0600 	mov.w	r6, #0
 8005b52:	46a9      	mov	r9, r5
 8005b54:	46b2      	mov	sl, r6
 8005b56:	eb19 0309 	adds.w	r3, r9, r9
 8005b5a:	eb4a 040a 	adc.w	r4, sl, sl
 8005b5e:	4699      	mov	r9, r3
 8005b60:	46a2      	mov	sl, r4
 8005b62:	eb19 0905 	adds.w	r9, r9, r5
 8005b66:	eb4a 0a06 	adc.w	sl, sl, r6
 8005b6a:	f04f 0100 	mov.w	r1, #0
 8005b6e:	f04f 0200 	mov.w	r2, #0
 8005b72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b7e:	4689      	mov	r9, r1
 8005b80:	4692      	mov	sl, r2
 8005b82:	eb19 0005 	adds.w	r0, r9, r5
 8005b86:	eb4a 0106 	adc.w	r1, sl, r6
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	461d      	mov	r5, r3
 8005b90:	f04f 0600 	mov.w	r6, #0
 8005b94:	196b      	adds	r3, r5, r5
 8005b96:	eb46 0406 	adc.w	r4, r6, r6
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	4623      	mov	r3, r4
 8005b9e:	f7fb f85b 	bl	8000c58 <__aeabi_uldivmod>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	4b2c      	ldr	r3, [pc, #176]	; (8005c5c <UART_SetConfig+0x384>)
 8005baa:	fba3 1302 	umull	r1, r3, r3, r2
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	2164      	movs	r1, #100	; 0x64
 8005bb2:	fb01 f303 	mul.w	r3, r1, r3
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	3332      	adds	r3, #50	; 0x32
 8005bbc:	4a27      	ldr	r2, [pc, #156]	; (8005c5c <UART_SetConfig+0x384>)
 8005bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005bca:	4498      	add	r8, r3
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	461d      	mov	r5, r3
 8005bd0:	f04f 0600 	mov.w	r6, #0
 8005bd4:	46a9      	mov	r9, r5
 8005bd6:	46b2      	mov	sl, r6
 8005bd8:	eb19 0309 	adds.w	r3, r9, r9
 8005bdc:	eb4a 040a 	adc.w	r4, sl, sl
 8005be0:	4699      	mov	r9, r3
 8005be2:	46a2      	mov	sl, r4
 8005be4:	eb19 0905 	adds.w	r9, r9, r5
 8005be8:	eb4a 0a06 	adc.w	sl, sl, r6
 8005bec:	f04f 0100 	mov.w	r1, #0
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bf8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bfc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c00:	4689      	mov	r9, r1
 8005c02:	4692      	mov	sl, r2
 8005c04:	eb19 0005 	adds.w	r0, r9, r5
 8005c08:	eb4a 0106 	adc.w	r1, sl, r6
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	461d      	mov	r5, r3
 8005c12:	f04f 0600 	mov.w	r6, #0
 8005c16:	196b      	adds	r3, r5, r5
 8005c18:	eb46 0406 	adc.w	r4, r6, r6
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	4623      	mov	r3, r4
 8005c20:	f7fb f81a 	bl	8000c58 <__aeabi_uldivmod>
 8005c24:	4603      	mov	r3, r0
 8005c26:	460c      	mov	r4, r1
 8005c28:	461a      	mov	r2, r3
 8005c2a:	4b0c      	ldr	r3, [pc, #48]	; (8005c5c <UART_SetConfig+0x384>)
 8005c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c30:	095b      	lsrs	r3, r3, #5
 8005c32:	2164      	movs	r1, #100	; 0x64
 8005c34:	fb01 f303 	mul.w	r3, r1, r3
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	3332      	adds	r3, #50	; 0x32
 8005c3e:	4a07      	ldr	r2, [pc, #28]	; (8005c5c <UART_SetConfig+0x384>)
 8005c40:	fba2 2303 	umull	r2, r3, r2, r3
 8005c44:	095b      	lsrs	r3, r3, #5
 8005c46:	f003 0207 	and.w	r2, r3, #7
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4442      	add	r2, r8
 8005c50:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005c52:	e1b2      	b.n	8005fba <UART_SetConfig+0x6e2>
 8005c54:	40011000 	.word	0x40011000
 8005c58:	40011400 	.word	0x40011400
 8005c5c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4ad7      	ldr	r2, [pc, #860]	; (8005fc4 <UART_SetConfig+0x6ec>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d005      	beq.n	8005c76 <UART_SetConfig+0x39e>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4ad6      	ldr	r2, [pc, #856]	; (8005fc8 <UART_SetConfig+0x6f0>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	f040 80d1 	bne.w	8005e18 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c76:	f7ff f879 	bl	8004d6c <HAL_RCC_GetPCLK2Freq>
 8005c7a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	469a      	mov	sl, r3
 8005c80:	f04f 0b00 	mov.w	fp, #0
 8005c84:	46d0      	mov	r8, sl
 8005c86:	46d9      	mov	r9, fp
 8005c88:	eb18 0308 	adds.w	r3, r8, r8
 8005c8c:	eb49 0409 	adc.w	r4, r9, r9
 8005c90:	4698      	mov	r8, r3
 8005c92:	46a1      	mov	r9, r4
 8005c94:	eb18 080a 	adds.w	r8, r8, sl
 8005c98:	eb49 090b 	adc.w	r9, r9, fp
 8005c9c:	f04f 0100 	mov.w	r1, #0
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ca8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005cac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005cb0:	4688      	mov	r8, r1
 8005cb2:	4691      	mov	r9, r2
 8005cb4:	eb1a 0508 	adds.w	r5, sl, r8
 8005cb8:	eb4b 0609 	adc.w	r6, fp, r9
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	f04f 0200 	mov.w	r2, #0
 8005cc6:	f04f 0300 	mov.w	r3, #0
 8005cca:	f04f 0400 	mov.w	r4, #0
 8005cce:	0094      	lsls	r4, r2, #2
 8005cd0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005cd4:	008b      	lsls	r3, r1, #2
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	4623      	mov	r3, r4
 8005cda:	4628      	mov	r0, r5
 8005cdc:	4631      	mov	r1, r6
 8005cde:	f7fa ffbb 	bl	8000c58 <__aeabi_uldivmod>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	460c      	mov	r4, r1
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	4bb8      	ldr	r3, [pc, #736]	; (8005fcc <UART_SetConfig+0x6f4>)
 8005cea:	fba3 2302 	umull	r2, r3, r3, r2
 8005cee:	095b      	lsrs	r3, r3, #5
 8005cf0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	469b      	mov	fp, r3
 8005cf8:	f04f 0c00 	mov.w	ip, #0
 8005cfc:	46d9      	mov	r9, fp
 8005cfe:	46e2      	mov	sl, ip
 8005d00:	eb19 0309 	adds.w	r3, r9, r9
 8005d04:	eb4a 040a 	adc.w	r4, sl, sl
 8005d08:	4699      	mov	r9, r3
 8005d0a:	46a2      	mov	sl, r4
 8005d0c:	eb19 090b 	adds.w	r9, r9, fp
 8005d10:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d14:	f04f 0100 	mov.w	r1, #0
 8005d18:	f04f 0200 	mov.w	r2, #0
 8005d1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d28:	4689      	mov	r9, r1
 8005d2a:	4692      	mov	sl, r2
 8005d2c:	eb1b 0509 	adds.w	r5, fp, r9
 8005d30:	eb4c 060a 	adc.w	r6, ip, sl
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	4619      	mov	r1, r3
 8005d3a:	f04f 0200 	mov.w	r2, #0
 8005d3e:	f04f 0300 	mov.w	r3, #0
 8005d42:	f04f 0400 	mov.w	r4, #0
 8005d46:	0094      	lsls	r4, r2, #2
 8005d48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d4c:	008b      	lsls	r3, r1, #2
 8005d4e:	461a      	mov	r2, r3
 8005d50:	4623      	mov	r3, r4
 8005d52:	4628      	mov	r0, r5
 8005d54:	4631      	mov	r1, r6
 8005d56:	f7fa ff7f 	bl	8000c58 <__aeabi_uldivmod>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	460c      	mov	r4, r1
 8005d5e:	461a      	mov	r2, r3
 8005d60:	4b9a      	ldr	r3, [pc, #616]	; (8005fcc <UART_SetConfig+0x6f4>)
 8005d62:	fba3 1302 	umull	r1, r3, r3, r2
 8005d66:	095b      	lsrs	r3, r3, #5
 8005d68:	2164      	movs	r1, #100	; 0x64
 8005d6a:	fb01 f303 	mul.w	r3, r1, r3
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	011b      	lsls	r3, r3, #4
 8005d72:	3332      	adds	r3, #50	; 0x32
 8005d74:	4a95      	ldr	r2, [pc, #596]	; (8005fcc <UART_SetConfig+0x6f4>)
 8005d76:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7a:	095b      	lsrs	r3, r3, #5
 8005d7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d80:	4498      	add	r8, r3
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	469b      	mov	fp, r3
 8005d86:	f04f 0c00 	mov.w	ip, #0
 8005d8a:	46d9      	mov	r9, fp
 8005d8c:	46e2      	mov	sl, ip
 8005d8e:	eb19 0309 	adds.w	r3, r9, r9
 8005d92:	eb4a 040a 	adc.w	r4, sl, sl
 8005d96:	4699      	mov	r9, r3
 8005d98:	46a2      	mov	sl, r4
 8005d9a:	eb19 090b 	adds.w	r9, r9, fp
 8005d9e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005da2:	f04f 0100 	mov.w	r1, #0
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005db2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005db6:	4689      	mov	r9, r1
 8005db8:	4692      	mov	sl, r2
 8005dba:	eb1b 0509 	adds.w	r5, fp, r9
 8005dbe:	eb4c 060a 	adc.w	r6, ip, sl
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	f04f 0200 	mov.w	r2, #0
 8005dcc:	f04f 0300 	mov.w	r3, #0
 8005dd0:	f04f 0400 	mov.w	r4, #0
 8005dd4:	0094      	lsls	r4, r2, #2
 8005dd6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005dda:	008b      	lsls	r3, r1, #2
 8005ddc:	461a      	mov	r2, r3
 8005dde:	4623      	mov	r3, r4
 8005de0:	4628      	mov	r0, r5
 8005de2:	4631      	mov	r1, r6
 8005de4:	f7fa ff38 	bl	8000c58 <__aeabi_uldivmod>
 8005de8:	4603      	mov	r3, r0
 8005dea:	460c      	mov	r4, r1
 8005dec:	461a      	mov	r2, r3
 8005dee:	4b77      	ldr	r3, [pc, #476]	; (8005fcc <UART_SetConfig+0x6f4>)
 8005df0:	fba3 1302 	umull	r1, r3, r3, r2
 8005df4:	095b      	lsrs	r3, r3, #5
 8005df6:	2164      	movs	r1, #100	; 0x64
 8005df8:	fb01 f303 	mul.w	r3, r1, r3
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	011b      	lsls	r3, r3, #4
 8005e00:	3332      	adds	r3, #50	; 0x32
 8005e02:	4a72      	ldr	r2, [pc, #456]	; (8005fcc <UART_SetConfig+0x6f4>)
 8005e04:	fba2 2303 	umull	r2, r3, r2, r3
 8005e08:	095b      	lsrs	r3, r3, #5
 8005e0a:	f003 020f 	and.w	r2, r3, #15
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4442      	add	r2, r8
 8005e14:	609a      	str	r2, [r3, #8]
 8005e16:	e0d0      	b.n	8005fba <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e18:	f7fe ff94 	bl	8004d44 <HAL_RCC_GetPCLK1Freq>
 8005e1c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	469a      	mov	sl, r3
 8005e22:	f04f 0b00 	mov.w	fp, #0
 8005e26:	46d0      	mov	r8, sl
 8005e28:	46d9      	mov	r9, fp
 8005e2a:	eb18 0308 	adds.w	r3, r8, r8
 8005e2e:	eb49 0409 	adc.w	r4, r9, r9
 8005e32:	4698      	mov	r8, r3
 8005e34:	46a1      	mov	r9, r4
 8005e36:	eb18 080a 	adds.w	r8, r8, sl
 8005e3a:	eb49 090b 	adc.w	r9, r9, fp
 8005e3e:	f04f 0100 	mov.w	r1, #0
 8005e42:	f04f 0200 	mov.w	r2, #0
 8005e46:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e4a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e4e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e52:	4688      	mov	r8, r1
 8005e54:	4691      	mov	r9, r2
 8005e56:	eb1a 0508 	adds.w	r5, sl, r8
 8005e5a:	eb4b 0609 	adc.w	r6, fp, r9
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	4619      	mov	r1, r3
 8005e64:	f04f 0200 	mov.w	r2, #0
 8005e68:	f04f 0300 	mov.w	r3, #0
 8005e6c:	f04f 0400 	mov.w	r4, #0
 8005e70:	0094      	lsls	r4, r2, #2
 8005e72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e76:	008b      	lsls	r3, r1, #2
 8005e78:	461a      	mov	r2, r3
 8005e7a:	4623      	mov	r3, r4
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	4631      	mov	r1, r6
 8005e80:	f7fa feea 	bl	8000c58 <__aeabi_uldivmod>
 8005e84:	4603      	mov	r3, r0
 8005e86:	460c      	mov	r4, r1
 8005e88:	461a      	mov	r2, r3
 8005e8a:	4b50      	ldr	r3, [pc, #320]	; (8005fcc <UART_SetConfig+0x6f4>)
 8005e8c:	fba3 2302 	umull	r2, r3, r3, r2
 8005e90:	095b      	lsrs	r3, r3, #5
 8005e92:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	469b      	mov	fp, r3
 8005e9a:	f04f 0c00 	mov.w	ip, #0
 8005e9e:	46d9      	mov	r9, fp
 8005ea0:	46e2      	mov	sl, ip
 8005ea2:	eb19 0309 	adds.w	r3, r9, r9
 8005ea6:	eb4a 040a 	adc.w	r4, sl, sl
 8005eaa:	4699      	mov	r9, r3
 8005eac:	46a2      	mov	sl, r4
 8005eae:	eb19 090b 	adds.w	r9, r9, fp
 8005eb2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005eb6:	f04f 0100 	mov.w	r1, #0
 8005eba:	f04f 0200 	mov.w	r2, #0
 8005ebe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ec2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ec6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005eca:	4689      	mov	r9, r1
 8005ecc:	4692      	mov	sl, r2
 8005ece:	eb1b 0509 	adds.w	r5, fp, r9
 8005ed2:	eb4c 060a 	adc.w	r6, ip, sl
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	4619      	mov	r1, r3
 8005edc:	f04f 0200 	mov.w	r2, #0
 8005ee0:	f04f 0300 	mov.w	r3, #0
 8005ee4:	f04f 0400 	mov.w	r4, #0
 8005ee8:	0094      	lsls	r4, r2, #2
 8005eea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005eee:	008b      	lsls	r3, r1, #2
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	4623      	mov	r3, r4
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	f7fa feae 	bl	8000c58 <__aeabi_uldivmod>
 8005efc:	4603      	mov	r3, r0
 8005efe:	460c      	mov	r4, r1
 8005f00:	461a      	mov	r2, r3
 8005f02:	4b32      	ldr	r3, [pc, #200]	; (8005fcc <UART_SetConfig+0x6f4>)
 8005f04:	fba3 1302 	umull	r1, r3, r3, r2
 8005f08:	095b      	lsrs	r3, r3, #5
 8005f0a:	2164      	movs	r1, #100	; 0x64
 8005f0c:	fb01 f303 	mul.w	r3, r1, r3
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	011b      	lsls	r3, r3, #4
 8005f14:	3332      	adds	r3, #50	; 0x32
 8005f16:	4a2d      	ldr	r2, [pc, #180]	; (8005fcc <UART_SetConfig+0x6f4>)
 8005f18:	fba2 2303 	umull	r2, r3, r2, r3
 8005f1c:	095b      	lsrs	r3, r3, #5
 8005f1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f22:	4498      	add	r8, r3
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	469b      	mov	fp, r3
 8005f28:	f04f 0c00 	mov.w	ip, #0
 8005f2c:	46d9      	mov	r9, fp
 8005f2e:	46e2      	mov	sl, ip
 8005f30:	eb19 0309 	adds.w	r3, r9, r9
 8005f34:	eb4a 040a 	adc.w	r4, sl, sl
 8005f38:	4699      	mov	r9, r3
 8005f3a:	46a2      	mov	sl, r4
 8005f3c:	eb19 090b 	adds.w	r9, r9, fp
 8005f40:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f44:	f04f 0100 	mov.w	r1, #0
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f58:	4689      	mov	r9, r1
 8005f5a:	4692      	mov	sl, r2
 8005f5c:	eb1b 0509 	adds.w	r5, fp, r9
 8005f60:	eb4c 060a 	adc.w	r6, ip, sl
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	4619      	mov	r1, r3
 8005f6a:	f04f 0200 	mov.w	r2, #0
 8005f6e:	f04f 0300 	mov.w	r3, #0
 8005f72:	f04f 0400 	mov.w	r4, #0
 8005f76:	0094      	lsls	r4, r2, #2
 8005f78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f7c:	008b      	lsls	r3, r1, #2
 8005f7e:	461a      	mov	r2, r3
 8005f80:	4623      	mov	r3, r4
 8005f82:	4628      	mov	r0, r5
 8005f84:	4631      	mov	r1, r6
 8005f86:	f7fa fe67 	bl	8000c58 <__aeabi_uldivmod>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	460c      	mov	r4, r1
 8005f8e:	461a      	mov	r2, r3
 8005f90:	4b0e      	ldr	r3, [pc, #56]	; (8005fcc <UART_SetConfig+0x6f4>)
 8005f92:	fba3 1302 	umull	r1, r3, r3, r2
 8005f96:	095b      	lsrs	r3, r3, #5
 8005f98:	2164      	movs	r1, #100	; 0x64
 8005f9a:	fb01 f303 	mul.w	r3, r1, r3
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	3332      	adds	r3, #50	; 0x32
 8005fa4:	4a09      	ldr	r2, [pc, #36]	; (8005fcc <UART_SetConfig+0x6f4>)
 8005fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005faa:	095b      	lsrs	r3, r3, #5
 8005fac:	f003 020f 	and.w	r2, r3, #15
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4442      	add	r2, r8
 8005fb6:	609a      	str	r2, [r3, #8]
}
 8005fb8:	e7ff      	b.n	8005fba <UART_SetConfig+0x6e2>
 8005fba:	bf00      	nop
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc4:	40011000 	.word	0x40011000
 8005fc8:	40011400 	.word	0x40011400
 8005fcc:	51eb851f 	.word	0x51eb851f

08005fd0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	f107 001c 	add.w	r0, r7, #28
 8005fde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d122      	bne.n	800602e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006012:	2b01      	cmp	r3, #1
 8006014:	d105      	bne.n	8006022 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f001 fac6 	bl	80075b4 <USB_CoreReset>
 8006028:	4603      	mov	r3, r0
 800602a:	73fb      	strb	r3, [r7, #15]
 800602c:	e01a      	b.n	8006064 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f001 faba 	bl	80075b4 <USB_CoreReset>
 8006040:	4603      	mov	r3, r0
 8006042:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006046:	2b00      	cmp	r3, #0
 8006048:	d106      	bne.n	8006058 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	639a      	str	r2, [r3, #56]	; 0x38
 8006056:	e005      	b.n	8006064 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006066:	2b01      	cmp	r3, #1
 8006068:	d10b      	bne.n	8006082 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f043 0206 	orr.w	r2, r3, #6
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f043 0220 	orr.w	r2, r3, #32
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006082:	7bfb      	ldrb	r3, [r7, #15]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800608e:	b004      	add	sp, #16
 8006090:	4770      	bx	lr
	...

08006094 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	4613      	mov	r3, r2
 80060a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80060a2:	79fb      	ldrb	r3, [r7, #7]
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d165      	bne.n	8006174 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	4a41      	ldr	r2, [pc, #260]	; (80061b0 <USB_SetTurnaroundTime+0x11c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d906      	bls.n	80060be <USB_SetTurnaroundTime+0x2a>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	4a40      	ldr	r2, [pc, #256]	; (80061b4 <USB_SetTurnaroundTime+0x120>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d802      	bhi.n	80060be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80060b8:	230f      	movs	r3, #15
 80060ba:	617b      	str	r3, [r7, #20]
 80060bc:	e062      	b.n	8006184 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	4a3c      	ldr	r2, [pc, #240]	; (80061b4 <USB_SetTurnaroundTime+0x120>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d906      	bls.n	80060d4 <USB_SetTurnaroundTime+0x40>
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	4a3b      	ldr	r2, [pc, #236]	; (80061b8 <USB_SetTurnaroundTime+0x124>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d802      	bhi.n	80060d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80060ce:	230e      	movs	r3, #14
 80060d0:	617b      	str	r3, [r7, #20]
 80060d2:	e057      	b.n	8006184 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	4a38      	ldr	r2, [pc, #224]	; (80061b8 <USB_SetTurnaroundTime+0x124>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d906      	bls.n	80060ea <USB_SetTurnaroundTime+0x56>
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	4a37      	ldr	r2, [pc, #220]	; (80061bc <USB_SetTurnaroundTime+0x128>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d802      	bhi.n	80060ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80060e4:	230d      	movs	r3, #13
 80060e6:	617b      	str	r3, [r7, #20]
 80060e8:	e04c      	b.n	8006184 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	4a33      	ldr	r2, [pc, #204]	; (80061bc <USB_SetTurnaroundTime+0x128>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d906      	bls.n	8006100 <USB_SetTurnaroundTime+0x6c>
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	4a32      	ldr	r2, [pc, #200]	; (80061c0 <USB_SetTurnaroundTime+0x12c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d802      	bhi.n	8006100 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80060fa:	230c      	movs	r3, #12
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	e041      	b.n	8006184 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4a2f      	ldr	r2, [pc, #188]	; (80061c0 <USB_SetTurnaroundTime+0x12c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d906      	bls.n	8006116 <USB_SetTurnaroundTime+0x82>
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	4a2e      	ldr	r2, [pc, #184]	; (80061c4 <USB_SetTurnaroundTime+0x130>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d802      	bhi.n	8006116 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006110:	230b      	movs	r3, #11
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	e036      	b.n	8006184 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	4a2a      	ldr	r2, [pc, #168]	; (80061c4 <USB_SetTurnaroundTime+0x130>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d906      	bls.n	800612c <USB_SetTurnaroundTime+0x98>
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	4a29      	ldr	r2, [pc, #164]	; (80061c8 <USB_SetTurnaroundTime+0x134>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d802      	bhi.n	800612c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006126:	230a      	movs	r3, #10
 8006128:	617b      	str	r3, [r7, #20]
 800612a:	e02b      	b.n	8006184 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	4a26      	ldr	r2, [pc, #152]	; (80061c8 <USB_SetTurnaroundTime+0x134>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d906      	bls.n	8006142 <USB_SetTurnaroundTime+0xae>
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	4a25      	ldr	r2, [pc, #148]	; (80061cc <USB_SetTurnaroundTime+0x138>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d802      	bhi.n	8006142 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800613c:	2309      	movs	r3, #9
 800613e:	617b      	str	r3, [r7, #20]
 8006140:	e020      	b.n	8006184 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	4a21      	ldr	r2, [pc, #132]	; (80061cc <USB_SetTurnaroundTime+0x138>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d906      	bls.n	8006158 <USB_SetTurnaroundTime+0xc4>
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	4a20      	ldr	r2, [pc, #128]	; (80061d0 <USB_SetTurnaroundTime+0x13c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d802      	bhi.n	8006158 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006152:	2308      	movs	r3, #8
 8006154:	617b      	str	r3, [r7, #20]
 8006156:	e015      	b.n	8006184 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	4a1d      	ldr	r2, [pc, #116]	; (80061d0 <USB_SetTurnaroundTime+0x13c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d906      	bls.n	800616e <USB_SetTurnaroundTime+0xda>
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	4a1c      	ldr	r2, [pc, #112]	; (80061d4 <USB_SetTurnaroundTime+0x140>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d802      	bhi.n	800616e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006168:	2307      	movs	r3, #7
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	e00a      	b.n	8006184 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800616e:	2306      	movs	r3, #6
 8006170:	617b      	str	r3, [r7, #20]
 8006172:	e007      	b.n	8006184 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006174:	79fb      	ldrb	r3, [r7, #7]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d102      	bne.n	8006180 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800617a:	2309      	movs	r3, #9
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	e001      	b.n	8006184 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006180:	2309      	movs	r3, #9
 8006182:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	029b      	lsls	r3, r3, #10
 8006198:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800619c:	431a      	orrs	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	371c      	adds	r7, #28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	00d8acbf 	.word	0x00d8acbf
 80061b4:	00e4e1bf 	.word	0x00e4e1bf
 80061b8:	00f423ff 	.word	0x00f423ff
 80061bc:	0106737f 	.word	0x0106737f
 80061c0:	011a499f 	.word	0x011a499f
 80061c4:	01312cff 	.word	0x01312cff
 80061c8:	014ca43f 	.word	0x014ca43f
 80061cc:	016e35ff 	.word	0x016e35ff
 80061d0:	01a6ab1f 	.word	0x01a6ab1f
 80061d4:	01e847ff 	.word	0x01e847ff

080061d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f043 0201 	orr.w	r2, r3, #1
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f023 0201 	bic.w	r2, r3, #1
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	460b      	mov	r3, r1
 8006226:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006234:	78fb      	ldrb	r3, [r7, #3]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d106      	bne.n	8006248 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	60da      	str	r2, [r3, #12]
 8006246:	e00b      	b.n	8006260 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d106      	bne.n	800625c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	60da      	str	r2, [r3, #12]
 800625a:	e001      	b.n	8006260 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e003      	b.n	8006268 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006260:	2032      	movs	r0, #50	; 0x32
 8006262:	f7fc f91f 	bl	80024a4 <HAL_Delay>

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006270:	b084      	sub	sp, #16
 8006272:	b580      	push	{r7, lr}
 8006274:	b086      	sub	sp, #24
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800627e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800628a:	2300      	movs	r3, #0
 800628c:	613b      	str	r3, [r7, #16]
 800628e:	e009      	b.n	80062a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	3340      	adds	r3, #64	; 0x40
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	2200      	movs	r2, #0
 800629c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	3301      	adds	r3, #1
 80062a2:	613b      	str	r3, [r7, #16]
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	2b0e      	cmp	r3, #14
 80062a8:	d9f2      	bls.n	8006290 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80062aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d11c      	bne.n	80062ea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062be:	f043 0302 	orr.w	r3, r3, #2
 80062c2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	639a      	str	r2, [r3, #56]	; 0x38
 80062e8:	e00b      	b.n	8006302 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006308:	461a      	mov	r2, r3
 800630a:	2300      	movs	r3, #0
 800630c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006314:	4619      	mov	r1, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800631c:	461a      	mov	r2, r3
 800631e:	680b      	ldr	r3, [r1, #0]
 8006320:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006324:	2b01      	cmp	r3, #1
 8006326:	d10c      	bne.n	8006342 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632a:	2b00      	cmp	r3, #0
 800632c:	d104      	bne.n	8006338 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800632e:	2100      	movs	r1, #0
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f949 	bl	80065c8 <USB_SetDevSpeed>
 8006336:	e008      	b.n	800634a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006338:	2101      	movs	r1, #1
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f944 	bl	80065c8 <USB_SetDevSpeed>
 8006340:	e003      	b.n	800634a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006342:	2103      	movs	r1, #3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f93f 	bl	80065c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800634a:	2110      	movs	r1, #16
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f8f3 	bl	8006538 <USB_FlushTxFifo>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f911 	bl	8006584 <USB_FlushRxFifo>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006372:	461a      	mov	r2, r3
 8006374:	2300      	movs	r3, #0
 8006376:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800637e:	461a      	mov	r2, r3
 8006380:	2300      	movs	r3, #0
 8006382:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638a:	461a      	mov	r2, r3
 800638c:	2300      	movs	r3, #0
 800638e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006390:	2300      	movs	r3, #0
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	e043      	b.n	800641e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4413      	add	r3, r2
 800639e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063ac:	d118      	bne.n	80063e0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10a      	bne.n	80063ca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c0:	461a      	mov	r2, r3
 80063c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063c6:	6013      	str	r3, [r2, #0]
 80063c8:	e013      	b.n	80063f2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d6:	461a      	mov	r2, r3
 80063d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	e008      	b.n	80063f2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ec:	461a      	mov	r2, r3
 80063ee:	2300      	movs	r3, #0
 80063f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fe:	461a      	mov	r2, r3
 8006400:	2300      	movs	r3, #0
 8006402:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006410:	461a      	mov	r2, r3
 8006412:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006416:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	3301      	adds	r3, #1
 800641c:	613b      	str	r3, [r7, #16]
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	429a      	cmp	r2, r3
 8006424:	d3b7      	bcc.n	8006396 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006426:	2300      	movs	r3, #0
 8006428:	613b      	str	r3, [r7, #16]
 800642a:	e043      	b.n	80064b4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800643e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006442:	d118      	bne.n	8006476 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10a      	bne.n	8006460 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4413      	add	r3, r2
 8006452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006456:	461a      	mov	r2, r3
 8006458:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	e013      	b.n	8006488 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646c:	461a      	mov	r2, r3
 800646e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006472:	6013      	str	r3, [r2, #0]
 8006474:	e008      	b.n	8006488 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006482:	461a      	mov	r2, r3
 8006484:	2300      	movs	r3, #0
 8006486:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4413      	add	r3, r2
 8006490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006494:	461a      	mov	r2, r3
 8006496:	2300      	movs	r3, #0
 8006498:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a6:	461a      	mov	r2, r3
 80064a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	3301      	adds	r3, #1
 80064b2:	613b      	str	r3, [r7, #16]
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d3b7      	bcc.n	800642c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80064dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80064de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d105      	bne.n	80064f0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	f043 0210 	orr.w	r2, r3, #16
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	699a      	ldr	r2, [r3, #24]
 80064f4:	4b0f      	ldr	r3, [pc, #60]	; (8006534 <USB_DevInit+0x2c4>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80064fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d005      	beq.n	800650e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	f043 0208 	orr.w	r2, r3, #8
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800650e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006510:	2b01      	cmp	r3, #1
 8006512:	d107      	bne.n	8006524 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800651c:	f043 0304 	orr.w	r3, r3, #4
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006524:	7dfb      	ldrb	r3, [r7, #23]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3718      	adds	r7, #24
 800652a:	46bd      	mov	sp, r7
 800652c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006530:	b004      	add	sp, #16
 8006532:	4770      	bx	lr
 8006534:	803c3800 	.word	0x803c3800

08006538 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	019b      	lsls	r3, r3, #6
 800654a:	f043 0220 	orr.w	r2, r3, #32
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3301      	adds	r3, #1
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4a09      	ldr	r2, [pc, #36]	; (8006580 <USB_FlushTxFifo+0x48>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d901      	bls.n	8006564 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e006      	b.n	8006572 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	f003 0320 	and.w	r3, r3, #32
 800656c:	2b20      	cmp	r3, #32
 800656e:	d0f0      	beq.n	8006552 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	00030d40 	.word	0x00030d40

08006584 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800658c:	2300      	movs	r3, #0
 800658e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2210      	movs	r2, #16
 8006594:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	3301      	adds	r3, #1
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4a09      	ldr	r2, [pc, #36]	; (80065c4 <USB_FlushRxFifo+0x40>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d901      	bls.n	80065a8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e006      	b.n	80065b6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f003 0310 	and.w	r3, r3, #16
 80065b0:	2b10      	cmp	r3, #16
 80065b2:	d0f0      	beq.n	8006596 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	00030d40 	.word	0x00030d40

080065c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	460b      	mov	r3, r1
 80065d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	68f9      	ldr	r1, [r7, #12]
 80065e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065e8:	4313      	orrs	r3, r2
 80065ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b087      	sub	sp, #28
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 0306 	and.w	r3, r3, #6
 8006612:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d102      	bne.n	8006620 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800661a:	2300      	movs	r3, #0
 800661c:	75fb      	strb	r3, [r7, #23]
 800661e:	e00a      	b.n	8006636 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b02      	cmp	r3, #2
 8006624:	d002      	beq.n	800662c <USB_GetDevSpeed+0x32>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b06      	cmp	r3, #6
 800662a:	d102      	bne.n	8006632 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800662c:	2302      	movs	r3, #2
 800662e:	75fb      	strb	r3, [r7, #23]
 8006630:	e001      	b.n	8006636 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006632:	230f      	movs	r3, #15
 8006634:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006636:	7dfb      	ldrb	r3, [r7, #23]
}
 8006638:	4618      	mov	r0, r3
 800663a:	371c      	adds	r7, #28
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	785b      	ldrb	r3, [r3, #1]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d13a      	bne.n	80066d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006666:	69da      	ldr	r2, [r3, #28]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	f003 030f 	and.w	r3, r3, #15
 8006670:	2101      	movs	r1, #1
 8006672:	fa01 f303 	lsl.w	r3, r1, r3
 8006676:	b29b      	uxth	r3, r3
 8006678:	68f9      	ldr	r1, [r7, #12]
 800667a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800667e:	4313      	orrs	r3, r2
 8006680:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d155      	bne.n	8006744 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	78db      	ldrb	r3, [r3, #3]
 80066b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80066b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	059b      	lsls	r3, r3, #22
 80066ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80066bc:	4313      	orrs	r3, r2
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	0151      	lsls	r1, r2, #5
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	440a      	add	r2, r1
 80066c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	e036      	b.n	8006744 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066dc:	69da      	ldr	r2, [r3, #28]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	f003 030f 	and.w	r3, r3, #15
 80066e6:	2101      	movs	r1, #1
 80066e8:	fa01 f303 	lsl.w	r3, r1, r3
 80066ec:	041b      	lsls	r3, r3, #16
 80066ee:	68f9      	ldr	r1, [r7, #12]
 80066f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066f4:	4313      	orrs	r3, r2
 80066f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d11a      	bne.n	8006744 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	4413      	add	r3, r2
 8006716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	78db      	ldrb	r3, [r3, #3]
 8006728:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800672a:	430b      	orrs	r3, r1
 800672c:	4313      	orrs	r3, r2
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	0151      	lsls	r1, r2, #5
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	440a      	add	r2, r1
 8006736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800673a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800673e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006742:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
	...

08006754 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	785b      	ldrb	r3, [r3, #1]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d161      	bne.n	8006834 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006786:	d11f      	bne.n	80067c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	0151      	lsls	r1, r2, #5
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	440a      	add	r2, r1
 800679e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	0151      	lsls	r1, r2, #5
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	440a      	add	r2, r1
 80067be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	f003 030f 	and.w	r3, r3, #15
 80067d8:	2101      	movs	r1, #1
 80067da:	fa01 f303 	lsl.w	r3, r1, r3
 80067de:	b29b      	uxth	r3, r3
 80067e0:	43db      	mvns	r3, r3
 80067e2:	68f9      	ldr	r1, [r7, #12]
 80067e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067e8:	4013      	ands	r3, r2
 80067ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f2:	69da      	ldr	r2, [r3, #28]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	f003 030f 	and.w	r3, r3, #15
 80067fc:	2101      	movs	r1, #1
 80067fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006802:	b29b      	uxth	r3, r3
 8006804:	43db      	mvns	r3, r3
 8006806:	68f9      	ldr	r1, [r7, #12]
 8006808:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800680c:	4013      	ands	r3, r2
 800680e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	4413      	add	r3, r2
 8006818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	0159      	lsls	r1, r3, #5
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	440b      	add	r3, r1
 8006826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682a:	4619      	mov	r1, r3
 800682c:	4b35      	ldr	r3, [pc, #212]	; (8006904 <USB_DeactivateEndpoint+0x1b0>)
 800682e:	4013      	ands	r3, r2
 8006830:	600b      	str	r3, [r1, #0]
 8006832:	e060      	b.n	80068f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4413      	add	r3, r2
 800683c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800684a:	d11f      	bne.n	800688c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	0151      	lsls	r1, r2, #5
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	440a      	add	r2, r1
 8006862:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006866:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800686a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4413      	add	r3, r2
 8006874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	0151      	lsls	r1, r2, #5
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	440a      	add	r2, r1
 8006882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006886:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800688a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006892:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	f003 030f 	and.w	r3, r3, #15
 800689c:	2101      	movs	r1, #1
 800689e:	fa01 f303 	lsl.w	r3, r1, r3
 80068a2:	041b      	lsls	r3, r3, #16
 80068a4:	43db      	mvns	r3, r3
 80068a6:	68f9      	ldr	r1, [r7, #12]
 80068a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068ac:	4013      	ands	r3, r2
 80068ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b6:	69da      	ldr	r2, [r3, #28]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	f003 030f 	and.w	r3, r3, #15
 80068c0:	2101      	movs	r1, #1
 80068c2:	fa01 f303 	lsl.w	r3, r1, r3
 80068c6:	041b      	lsls	r3, r3, #16
 80068c8:	43db      	mvns	r3, r3
 80068ca:	68f9      	ldr	r1, [r7, #12]
 80068cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068d0:	4013      	ands	r3, r2
 80068d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	0159      	lsls	r1, r3, #5
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	440b      	add	r3, r1
 80068ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ee:	4619      	mov	r1, r3
 80068f0:	4b05      	ldr	r3, [pc, #20]	; (8006908 <USB_DeactivateEndpoint+0x1b4>)
 80068f2:	4013      	ands	r3, r2
 80068f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	ec337800 	.word	0xec337800
 8006908:	eff37800 	.word	0xeff37800

0800690c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b08a      	sub	sp, #40	; 0x28
 8006910:	af02      	add	r7, sp, #8
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	4613      	mov	r3, r2
 8006918:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	785b      	ldrb	r3, [r3, #1]
 8006928:	2b01      	cmp	r3, #1
 800692a:	f040 815c 	bne.w	8006be6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d132      	bne.n	800699c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	69ba      	ldr	r2, [r7, #24]
 8006946:	0151      	lsls	r1, r2, #5
 8006948:	69fa      	ldr	r2, [r7, #28]
 800694a:	440a      	add	r2, r1
 800694c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006950:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006954:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006958:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	0151      	lsls	r1, r2, #5
 800696c:	69fa      	ldr	r2, [r7, #28]
 800696e:	440a      	add	r2, r1
 8006970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006974:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006978:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	4413      	add	r3, r2
 8006982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	69ba      	ldr	r2, [r7, #24]
 800698a:	0151      	lsls	r1, r2, #5
 800698c:	69fa      	ldr	r2, [r7, #28]
 800698e:	440a      	add	r2, r1
 8006990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006994:	0cdb      	lsrs	r3, r3, #19
 8006996:	04db      	lsls	r3, r3, #19
 8006998:	6113      	str	r3, [r2, #16]
 800699a:	e074      	b.n	8006a86 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	0151      	lsls	r1, r2, #5
 80069ae:	69fa      	ldr	r2, [r7, #28]
 80069b0:	440a      	add	r2, r1
 80069b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b6:	0cdb      	lsrs	r3, r3, #19
 80069b8:	04db      	lsls	r3, r3, #19
 80069ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	0151      	lsls	r1, r2, #5
 80069ce:	69fa      	ldr	r2, [r7, #28]
 80069d0:	440a      	add	r2, r1
 80069d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ec:	691a      	ldr	r2, [r3, #16]
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	6959      	ldr	r1, [r3, #20]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	440b      	add	r3, r1
 80069f8:	1e59      	subs	r1, r3, #1
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a02:	04d9      	lsls	r1, r3, #19
 8006a04:	4b9d      	ldr	r3, [pc, #628]	; (8006c7c <USB_EPStartXfer+0x370>)
 8006a06:	400b      	ands	r3, r1
 8006a08:	69b9      	ldr	r1, [r7, #24]
 8006a0a:	0148      	lsls	r0, r1, #5
 8006a0c:	69f9      	ldr	r1, [r7, #28]
 8006a0e:	4401      	add	r1, r0
 8006a10:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a14:	4313      	orrs	r3, r2
 8006a16:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	015a      	lsls	r2, r3, #5
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a24:	691a      	ldr	r2, [r3, #16]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a2e:	69b9      	ldr	r1, [r7, #24]
 8006a30:	0148      	lsls	r0, r1, #5
 8006a32:	69f9      	ldr	r1, [r7, #28]
 8006a34:	4401      	add	r1, r0
 8006a36:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	78db      	ldrb	r3, [r3, #3]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d11f      	bne.n	8006a86 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	0151      	lsls	r1, r2, #5
 8006a58:	69fa      	ldr	r2, [r7, #28]
 8006a5a:	440a      	add	r2, r1
 8006a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a60:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006a64:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	0151      	lsls	r1, r2, #5
 8006a78:	69fa      	ldr	r2, [r7, #28]
 8006a7a:	440a      	add	r2, r1
 8006a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a84:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006a86:	79fb      	ldrb	r3, [r7, #7]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d14b      	bne.n	8006b24 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d009      	beq.n	8006aa8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	78db      	ldrb	r3, [r3, #3]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d128      	bne.n	8006b02 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d110      	bne.n	8006ae2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	0151      	lsls	r1, r2, #5
 8006ad2:	69fa      	ldr	r2, [r7, #28]
 8006ad4:	440a      	add	r2, r1
 8006ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ada:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ade:	6013      	str	r3, [r2, #0]
 8006ae0:	e00f      	b.n	8006b02 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	015a      	lsls	r2, r3, #5
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	0151      	lsls	r1, r2, #5
 8006af4:	69fa      	ldr	r2, [r7, #28]
 8006af6:	440a      	add	r2, r1
 8006af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b00:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	0151      	lsls	r1, r2, #5
 8006b14:	69fa      	ldr	r2, [r7, #28]
 8006b16:	440a      	add	r2, r1
 8006b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b20:	6013      	str	r3, [r2, #0]
 8006b22:	e12f      	b.n	8006d84 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	69ba      	ldr	r2, [r7, #24]
 8006b34:	0151      	lsls	r1, r2, #5
 8006b36:	69fa      	ldr	r2, [r7, #28]
 8006b38:	440a      	add	r2, r1
 8006b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b42:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	78db      	ldrb	r3, [r3, #3]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d015      	beq.n	8006b78 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f000 8117 	beq.w	8006d84 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	f003 030f 	and.w	r3, r3, #15
 8006b66:	2101      	movs	r1, #1
 8006b68:	fa01 f303 	lsl.w	r3, r1, r3
 8006b6c:	69f9      	ldr	r1, [r7, #28]
 8006b6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b72:	4313      	orrs	r3, r2
 8006b74:	634b      	str	r3, [r1, #52]	; 0x34
 8006b76:	e105      	b.n	8006d84 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d110      	bne.n	8006baa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69ba      	ldr	r2, [r7, #24]
 8006b98:	0151      	lsls	r1, r2, #5
 8006b9a:	69fa      	ldr	r2, [r7, #28]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	e00f      	b.n	8006bca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	0151      	lsls	r1, r2, #5
 8006bbc:	69fa      	ldr	r2, [r7, #28]
 8006bbe:	440a      	add	r2, r1
 8006bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bc8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	68d9      	ldr	r1, [r3, #12]
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	781a      	ldrb	r2, [r3, #0]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	b298      	uxth	r0, r3
 8006bd8:	79fb      	ldrb	r3, [r7, #7]
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	4603      	mov	r3, r0
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f000 fa2b 	bl	800703a <USB_WritePacket>
 8006be4:	e0ce      	b.n	8006d84 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	0151      	lsls	r1, r2, #5
 8006bf8:	69fa      	ldr	r2, [r7, #28]
 8006bfa:	440a      	add	r2, r1
 8006bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c00:	0cdb      	lsrs	r3, r3, #19
 8006c02:	04db      	lsls	r3, r3, #19
 8006c04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	015a      	lsls	r2, r3, #5
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	0151      	lsls	r1, r2, #5
 8006c18:	69fa      	ldr	r2, [r7, #28]
 8006c1a:	440a      	add	r2, r1
 8006c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c28:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d126      	bne.n	8006c80 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3e:	691a      	ldr	r2, [r3, #16]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c48:	69b9      	ldr	r1, [r7, #24]
 8006c4a:	0148      	lsls	r0, r1, #5
 8006c4c:	69f9      	ldr	r1, [r7, #28]
 8006c4e:	4401      	add	r1, r0
 8006c50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c54:	4313      	orrs	r3, r2
 8006c56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	015a      	lsls	r2, r3, #5
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	0151      	lsls	r1, r2, #5
 8006c6a:	69fa      	ldr	r2, [r7, #28]
 8006c6c:	440a      	add	r2, r1
 8006c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c76:	6113      	str	r3, [r2, #16]
 8006c78:	e036      	b.n	8006ce8 <USB_EPStartXfer+0x3dc>
 8006c7a:	bf00      	nop
 8006c7c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	695a      	ldr	r2, [r3, #20]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	4413      	add	r3, r2
 8006c8a:	1e5a      	subs	r2, r3, #1
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c94:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	015a      	lsls	r2, r3, #5
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca2:	691a      	ldr	r2, [r3, #16]
 8006ca4:	8afb      	ldrh	r3, [r7, #22]
 8006ca6:	04d9      	lsls	r1, r3, #19
 8006ca8:	4b39      	ldr	r3, [pc, #228]	; (8006d90 <USB_EPStartXfer+0x484>)
 8006caa:	400b      	ands	r3, r1
 8006cac:	69b9      	ldr	r1, [r7, #24]
 8006cae:	0148      	lsls	r0, r1, #5
 8006cb0:	69f9      	ldr	r1, [r7, #28]
 8006cb2:	4401      	add	r1, r0
 8006cb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc8:	691a      	ldr	r2, [r3, #16]
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	8af9      	ldrh	r1, [r7, #22]
 8006cd0:	fb01 f303 	mul.w	r3, r1, r3
 8006cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cd8:	69b9      	ldr	r1, [r7, #24]
 8006cda:	0148      	lsls	r0, r1, #5
 8006cdc:	69f9      	ldr	r1, [r7, #28]
 8006cde:	4401      	add	r1, r0
 8006ce0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ce8:	79fb      	ldrb	r3, [r7, #7]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d10d      	bne.n	8006d0a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d009      	beq.n	8006d0a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	68d9      	ldr	r1, [r3, #12]
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d06:	460a      	mov	r2, r1
 8006d08:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	78db      	ldrb	r3, [r3, #3]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d128      	bne.n	8006d64 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d110      	bne.n	8006d44 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	015a      	lsls	r2, r3, #5
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	4413      	add	r3, r2
 8006d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	0151      	lsls	r1, r2, #5
 8006d34:	69fa      	ldr	r2, [r7, #28]
 8006d36:	440a      	add	r2, r1
 8006d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d40:	6013      	str	r3, [r2, #0]
 8006d42:	e00f      	b.n	8006d64 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69ba      	ldr	r2, [r7, #24]
 8006d54:	0151      	lsls	r1, r2, #5
 8006d56:	69fa      	ldr	r2, [r7, #28]
 8006d58:	440a      	add	r2, r1
 8006d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d62:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	69ba      	ldr	r2, [r7, #24]
 8006d74:	0151      	lsls	r1, r2, #5
 8006d76:	69fa      	ldr	r2, [r7, #28]
 8006d78:	440a      	add	r2, r1
 8006d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3720      	adds	r7, #32
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	1ff80000 	.word	0x1ff80000

08006d94 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	785b      	ldrb	r3, [r3, #1]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	f040 80cd 	bne.w	8006f50 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d132      	bne.n	8006e24 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	015a      	lsls	r2, r3, #5
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	0151      	lsls	r1, r2, #5
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	440a      	add	r2, r1
 8006dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ddc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006de0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	015a      	lsls	r2, r3, #5
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	0151      	lsls	r1, r2, #5
 8006df4:	697a      	ldr	r2, [r7, #20]
 8006df6:	440a      	add	r2, r1
 8006df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	0151      	lsls	r1, r2, #5
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	440a      	add	r2, r1
 8006e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e1c:	0cdb      	lsrs	r3, r3, #19
 8006e1e:	04db      	lsls	r3, r3, #19
 8006e20:	6113      	str	r3, [r2, #16]
 8006e22:	e04e      	b.n	8006ec2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	015a      	lsls	r2, r3, #5
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	0151      	lsls	r1, r2, #5
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	440a      	add	r2, r1
 8006e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e3e:	0cdb      	lsrs	r3, r3, #19
 8006e40:	04db      	lsls	r3, r3, #19
 8006e42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	0151      	lsls	r1, r2, #5
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	440a      	add	r2, r1
 8006e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e66:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	695a      	ldr	r2, [r3, #20]
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d903      	bls.n	8006e7c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	689a      	ldr	r2, [r3, #8]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	0151      	lsls	r1, r2, #5
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	440a      	add	r2, r1
 8006e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea8:	691a      	ldr	r2, [r3, #16]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eb2:	6939      	ldr	r1, [r7, #16]
 8006eb4:	0148      	lsls	r0, r1, #5
 8006eb6:	6979      	ldr	r1, [r7, #20]
 8006eb8:	4401      	add	r1, r0
 8006eba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ec2:	79fb      	ldrb	r3, [r7, #7]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d11e      	bne.n	8006f06 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d009      	beq.n	8006ee4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006edc:	461a      	mov	r2, r3
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	0151      	lsls	r1, r2, #5
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	440a      	add	r2, r1
 8006efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006efe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	e092      	b.n	800702c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	0151      	lsls	r1, r2, #5
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	440a      	add	r2, r1
 8006f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f24:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d07e      	beq.n	800702c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	f003 030f 	and.w	r3, r3, #15
 8006f3e:	2101      	movs	r1, #1
 8006f40:	fa01 f303 	lsl.w	r3, r1, r3
 8006f44:	6979      	ldr	r1, [r7, #20]
 8006f46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	634b      	str	r3, [r1, #52]	; 0x34
 8006f4e:	e06d      	b.n	800702c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	015a      	lsls	r2, r3, #5
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	4413      	add	r3, r2
 8006f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	0151      	lsls	r1, r2, #5
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	440a      	add	r2, r1
 8006f66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f6a:	0cdb      	lsrs	r3, r3, #19
 8006f6c:	04db      	lsls	r3, r3, #19
 8006f6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	0151      	lsls	r1, r2, #5
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	440a      	add	r2, r1
 8006f86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f92:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	695b      	ldr	r3, [r3, #20]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	0151      	lsls	r1, r2, #5
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	440a      	add	r2, r1
 8006fba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fc2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd0:	691a      	ldr	r2, [r3, #16]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fda:	6939      	ldr	r1, [r7, #16]
 8006fdc:	0148      	lsls	r0, r1, #5
 8006fde:	6979      	ldr	r1, [r7, #20]
 8006fe0:	4401      	add	r1, r0
 8006fe2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006fea:	79fb      	ldrb	r3, [r7, #7]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d10d      	bne.n	800700c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d009      	beq.n	800700c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	68d9      	ldr	r1, [r3, #12]
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007008:	460a      	mov	r2, r1
 800700a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	015a      	lsls	r2, r3, #5
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	4413      	add	r3, r2
 8007014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	0151      	lsls	r1, r2, #5
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	440a      	add	r2, r1
 8007022:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007026:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800702a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	371c      	adds	r7, #28
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800703a:	b480      	push	{r7}
 800703c:	b089      	sub	sp, #36	; 0x24
 800703e:	af00      	add	r7, sp, #0
 8007040:	60f8      	str	r0, [r7, #12]
 8007042:	60b9      	str	r1, [r7, #8]
 8007044:	4611      	mov	r1, r2
 8007046:	461a      	mov	r2, r3
 8007048:	460b      	mov	r3, r1
 800704a:	71fb      	strb	r3, [r7, #7]
 800704c:	4613      	mov	r3, r2
 800704e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007058:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800705c:	2b00      	cmp	r3, #0
 800705e:	d11a      	bne.n	8007096 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007060:	88bb      	ldrh	r3, [r7, #4]
 8007062:	3303      	adds	r3, #3
 8007064:	089b      	lsrs	r3, r3, #2
 8007066:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007068:	2300      	movs	r3, #0
 800706a:	61bb      	str	r3, [r7, #24]
 800706c:	e00f      	b.n	800708e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800706e:	79fb      	ldrb	r3, [r7, #7]
 8007070:	031a      	lsls	r2, r3, #12
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	4413      	add	r3, r2
 8007076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800707a:	461a      	mov	r2, r3
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	3304      	adds	r3, #4
 8007086:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	3301      	adds	r3, #1
 800708c:	61bb      	str	r3, [r7, #24]
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	429a      	cmp	r2, r3
 8007094:	d3eb      	bcc.n	800706e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3724      	adds	r7, #36	; 0x24
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b089      	sub	sp, #36	; 0x24
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	4613      	mov	r3, r2
 80070b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80070ba:	88fb      	ldrh	r3, [r7, #6]
 80070bc:	3303      	adds	r3, #3
 80070be:	089b      	lsrs	r3, r3, #2
 80070c0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80070c2:	2300      	movs	r3, #0
 80070c4:	61bb      	str	r3, [r7, #24]
 80070c6:	e00b      	b.n	80070e0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	3304      	adds	r3, #4
 80070d8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	3301      	adds	r3, #1
 80070de:	61bb      	str	r3, [r7, #24]
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d3ef      	bcc.n	80070c8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80070e8:	69fb      	ldr	r3, [r7, #28]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3724      	adds	r7, #36	; 0x24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b085      	sub	sp, #20
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	785b      	ldrb	r3, [r3, #1]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d12c      	bne.n	800716c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4413      	add	r3, r2
 800711a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	db12      	blt.n	800714a <USB_EPSetStall+0x54>
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00f      	beq.n	800714a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	4413      	add	r3, r2
 8007132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	0151      	lsls	r1, r2, #5
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	440a      	add	r2, r1
 8007140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007144:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007148:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	4413      	add	r3, r2
 8007152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	0151      	lsls	r1, r2, #5
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	440a      	add	r2, r1
 8007160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007164:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007168:	6013      	str	r3, [r2, #0]
 800716a:	e02b      	b.n	80071c4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	db12      	blt.n	80071a4 <USB_EPSetStall+0xae>
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00f      	beq.n	80071a4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	4413      	add	r3, r2
 800718c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	0151      	lsls	r1, r2, #5
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	440a      	add	r2, r1
 800719a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800719e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80071a2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	0151      	lsls	r1, r2, #5
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	440a      	add	r2, r1
 80071ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80071c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b085      	sub	sp, #20
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	785b      	ldrb	r3, [r3, #1]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d128      	bne.n	8007240 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	0151      	lsls	r1, r2, #5
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	440a      	add	r2, r1
 8007204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007208:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800720c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	78db      	ldrb	r3, [r3, #3]
 8007212:	2b03      	cmp	r3, #3
 8007214:	d003      	beq.n	800721e <USB_EPClearStall+0x4c>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	78db      	ldrb	r3, [r3, #3]
 800721a:	2b02      	cmp	r3, #2
 800721c:	d138      	bne.n	8007290 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	4413      	add	r3, r2
 8007226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	0151      	lsls	r1, r2, #5
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	440a      	add	r2, r1
 8007234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800723c:	6013      	str	r3, [r2, #0]
 800723e:	e027      	b.n	8007290 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	015a      	lsls	r2, r3, #5
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4413      	add	r3, r2
 8007248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	0151      	lsls	r1, r2, #5
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	440a      	add	r2, r1
 8007256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800725a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800725e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	78db      	ldrb	r3, [r3, #3]
 8007264:	2b03      	cmp	r3, #3
 8007266:	d003      	beq.n	8007270 <USB_EPClearStall+0x9e>
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	78db      	ldrb	r3, [r3, #3]
 800726c:	2b02      	cmp	r3, #2
 800726e:	d10f      	bne.n	8007290 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4413      	add	r3, r2
 8007278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	0151      	lsls	r1, r2, #5
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	440a      	add	r2, r1
 8007286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800728a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800728e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800729e:	b480      	push	{r7}
 80072a0:	b085      	sub	sp, #20
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	460b      	mov	r3, r1
 80072a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072bc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80072c0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	78fb      	ldrb	r3, [r7, #3]
 80072cc:	011b      	lsls	r3, r3, #4
 80072ce:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80072d2:	68f9      	ldr	r1, [r7, #12]
 80072d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072d8:	4313      	orrs	r3, r2
 80072da:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b085      	sub	sp, #20
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007304:	f023 0303 	bic.w	r3, r3, #3
 8007308:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007318:	f023 0302 	bic.w	r3, r3, #2
 800731c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3714      	adds	r7, #20
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007346:	f023 0303 	bic.w	r3, r3, #3
 800734a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800735a:	f043 0302 	orr.w	r3, r3, #2
 800735e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800736e:	b480      	push	{r7}
 8007370:	b085      	sub	sp, #20
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	4013      	ands	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007386:	68fb      	ldr	r3, [r7, #12]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b0:	69db      	ldr	r3, [r3, #28]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	4013      	ands	r3, r2
 80073b6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	0c1b      	lsrs	r3, r3, #16
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	4013      	ands	r3, r2
 80073ea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	b29b      	uxth	r3, r3
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800740c:	78fb      	ldrb	r3, [r7, #3]
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	4413      	add	r3, r2
 8007414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007422:	695b      	ldr	r3, [r3, #20]
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	4013      	ands	r3, r2
 8007428:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800742a:	68bb      	ldr	r3, [r7, #8]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	460b      	mov	r3, r1
 8007442:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800745a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800745c:	78fb      	ldrb	r3, [r7, #3]
 800745e:	f003 030f 	and.w	r3, r3, #15
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	fa22 f303 	lsr.w	r3, r2, r3
 8007468:	01db      	lsls	r3, r3, #7
 800746a:	b2db      	uxtb	r3, r3
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	4313      	orrs	r3, r2
 8007470:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007472:	78fb      	ldrb	r3, [r7, #3]
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	4413      	add	r3, r2
 800747a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	4013      	ands	r3, r2
 8007484:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007486:	68bb      	ldr	r3, [r7, #8]
}
 8007488:	4618      	mov	r0, r3
 800748a:	371c      	adds	r7, #28
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	f003 0301 	and.w	r3, r3, #1
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80074ce:	f023 0307 	bic.w	r3, r3, #7
 80074d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
	...

080074f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b087      	sub	sp, #28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	460b      	mov	r3, r1
 8007502:	607a      	str	r2, [r7, #4]
 8007504:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	333c      	adds	r3, #60	; 0x3c
 800750e:	3304      	adds	r3, #4
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	4a26      	ldr	r2, [pc, #152]	; (80075b0 <USB_EP0_OutStart+0xb8>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d90a      	bls.n	8007532 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007528:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800752c:	d101      	bne.n	8007532 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800752e:	2300      	movs	r3, #0
 8007530:	e037      	b.n	80075a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007538:	461a      	mov	r2, r3
 800753a:	2300      	movs	r3, #0
 800753c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800754c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007550:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007560:	f043 0318 	orr.w	r3, r3, #24
 8007564:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007574:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007578:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800757a:	7afb      	ldrb	r3, [r7, #11]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d10f      	bne.n	80075a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007586:	461a      	mov	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800759a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800759e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	371c      	adds	r7, #28
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	4f54300a 	.word	0x4f54300a

080075b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3301      	adds	r3, #1
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	4a13      	ldr	r2, [pc, #76]	; (8007618 <USB_CoreReset+0x64>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d901      	bls.n	80075d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e01b      	b.n	800760a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	daf2      	bge.n	80075c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80075da:	2300      	movs	r3, #0
 80075dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	f043 0201 	orr.w	r2, r3, #1
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3301      	adds	r3, #1
 80075ee:	60fb      	str	r3, [r7, #12]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4a09      	ldr	r2, [pc, #36]	; (8007618 <USB_CoreReset+0x64>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d901      	bls.n	80075fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e006      	b.n	800760a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b01      	cmp	r3, #1
 8007606:	d0f0      	beq.n	80075ea <USB_CoreReset+0x36>

  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	00030d40 	.word	0x00030d40

0800761c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007628:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800762c:	f002 f936 	bl	800989c <malloc>
 8007630:	4603      	mov	r3, r0
 8007632:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d105      	bne.n	8007646 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007642:	2302      	movs	r3, #2
 8007644:	e066      	b.n	8007714 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	7c1b      	ldrb	r3, [r3, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d119      	bne.n	800768a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007656:	f44f 7300 	mov.w	r3, #512	; 0x200
 800765a:	2202      	movs	r2, #2
 800765c:	2181      	movs	r1, #129	; 0x81
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f001 ffa3 	bl	80095aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800766a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800766e:	2202      	movs	r2, #2
 8007670:	2101      	movs	r1, #1
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f001 ff99 	bl	80095aa <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2210      	movs	r2, #16
 8007684:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007688:	e016      	b.n	80076b8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800768a:	2340      	movs	r3, #64	; 0x40
 800768c:	2202      	movs	r2, #2
 800768e:	2181      	movs	r1, #129	; 0x81
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f001 ff8a 	bl	80095aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800769c:	2340      	movs	r3, #64	; 0x40
 800769e:	2202      	movs	r2, #2
 80076a0:	2101      	movs	r1, #1
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f001 ff81 	bl	80095aa <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2210      	movs	r2, #16
 80076b4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80076b8:	2308      	movs	r3, #8
 80076ba:	2203      	movs	r2, #3
 80076bc:	2182      	movs	r1, #130	; 0x82
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f001 ff73 	bl	80095aa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	7c1b      	ldrb	r3, [r3, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d109      	bne.n	8007702 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076f8:	2101      	movs	r1, #1
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f002 f844 	bl	8009788 <USBD_LL_PrepareReceive>
 8007700:	e007      	b.n	8007712 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007708:	2340      	movs	r3, #64	; 0x40
 800770a:	2101      	movs	r1, #1
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f002 f83b 	bl	8009788 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	460b      	mov	r3, r1
 8007726:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800772c:	2181      	movs	r1, #129	; 0x81
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f001 ff61 	bl	80095f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800773a:	2101      	movs	r1, #1
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f001 ff5a 	bl	80095f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800774a:	2182      	movs	r1, #130	; 0x82
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f001 ff52 	bl	80095f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00e      	beq.n	800778a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800777c:	4618      	mov	r0, r3
 800777e:	f002 f895 	bl	80098ac <free>
    pdev->pClassData = NULL;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800778a:	7bfb      	ldrb	r3, [r7, #15]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077a4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80077aa:	2300      	movs	r3, #0
 80077ac:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d03a      	beq.n	8007834 <USBD_CDC_Setup+0xa0>
 80077be:	2b20      	cmp	r3, #32
 80077c0:	f040 8097 	bne.w	80078f2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	88db      	ldrh	r3, [r3, #6]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d029      	beq.n	8007820 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	b25b      	sxtb	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	da11      	bge.n	80077fa <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	683a      	ldr	r2, [r7, #0]
 80077e0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80077e2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	88d2      	ldrh	r2, [r2, #6]
 80077e8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80077ea:	6939      	ldr	r1, [r7, #16]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	88db      	ldrh	r3, [r3, #6]
 80077f0:	461a      	mov	r2, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f001 fa9d 	bl	8008d32 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80077f8:	e082      	b.n	8007900 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	785a      	ldrb	r2, [r3, #1]
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	88db      	ldrh	r3, [r3, #6]
 8007808:	b2da      	uxtb	r2, r3
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007810:	6939      	ldr	r1, [r7, #16]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	88db      	ldrh	r3, [r3, #6]
 8007816:	461a      	mov	r2, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f001 fab6 	bl	8008d8a <USBD_CtlPrepareRx>
    break;
 800781e:	e06f      	b.n	8007900 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	683a      	ldr	r2, [r7, #0]
 800782a:	7850      	ldrb	r0, [r2, #1]
 800782c:	2200      	movs	r2, #0
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	4798      	blx	r3
    break;
 8007832:	e065      	b.n	8007900 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	785b      	ldrb	r3, [r3, #1]
 8007838:	2b0b      	cmp	r3, #11
 800783a:	d84f      	bhi.n	80078dc <USBD_CDC_Setup+0x148>
 800783c:	a201      	add	r2, pc, #4	; (adr r2, 8007844 <USBD_CDC_Setup+0xb0>)
 800783e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007842:	bf00      	nop
 8007844:	08007875 	.word	0x08007875
 8007848:	080078eb 	.word	0x080078eb
 800784c:	080078dd 	.word	0x080078dd
 8007850:	080078dd 	.word	0x080078dd
 8007854:	080078dd 	.word	0x080078dd
 8007858:	080078dd 	.word	0x080078dd
 800785c:	080078dd 	.word	0x080078dd
 8007860:	080078dd 	.word	0x080078dd
 8007864:	080078dd 	.word	0x080078dd
 8007868:	080078dd 	.word	0x080078dd
 800786c:	0800789d 	.word	0x0800789d
 8007870:	080078c5 	.word	0x080078c5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800787a:	2b03      	cmp	r3, #3
 800787c:	d107      	bne.n	800788e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800787e:	f107 030c 	add.w	r3, r7, #12
 8007882:	2202      	movs	r2, #2
 8007884:	4619      	mov	r1, r3
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f001 fa53 	bl	8008d32 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800788c:	e030      	b.n	80078f0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 f9dd 	bl	8008c50 <USBD_CtlError>
        ret = USBD_FAIL;
 8007896:	2303      	movs	r3, #3
 8007898:	75fb      	strb	r3, [r7, #23]
      break;
 800789a:	e029      	b.n	80078f0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d107      	bne.n	80078b6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80078a6:	f107 030f 	add.w	r3, r7, #15
 80078aa:	2201      	movs	r2, #1
 80078ac:	4619      	mov	r1, r3
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f001 fa3f 	bl	8008d32 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80078b4:	e01c      	b.n	80078f0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f001 f9c9 	bl	8008c50 <USBD_CtlError>
        ret = USBD_FAIL;
 80078be:	2303      	movs	r3, #3
 80078c0:	75fb      	strb	r3, [r7, #23]
      break;
 80078c2:	e015      	b.n	80078f0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ca:	2b03      	cmp	r3, #3
 80078cc:	d00f      	beq.n	80078ee <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f001 f9bd 	bl	8008c50 <USBD_CtlError>
        ret = USBD_FAIL;
 80078d6:	2303      	movs	r3, #3
 80078d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80078da:	e008      	b.n	80078ee <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80078dc:	6839      	ldr	r1, [r7, #0]
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f001 f9b6 	bl	8008c50 <USBD_CtlError>
      ret = USBD_FAIL;
 80078e4:	2303      	movs	r3, #3
 80078e6:	75fb      	strb	r3, [r7, #23]
      break;
 80078e8:	e002      	b.n	80078f0 <USBD_CDC_Setup+0x15c>
      break;
 80078ea:	bf00      	nop
 80078ec:	e008      	b.n	8007900 <USBD_CDC_Setup+0x16c>
      break;
 80078ee:	bf00      	nop
    }
    break;
 80078f0:	e006      	b.n	8007900 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80078f2:	6839      	ldr	r1, [r7, #0]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f001 f9ab 	bl	8008c50 <USBD_CtlError>
    ret = USBD_FAIL;
 80078fa:	2303      	movs	r3, #3
 80078fc:	75fb      	strb	r3, [r7, #23]
    break;
 80078fe:	bf00      	nop
  }

  return (uint8_t)ret;
 8007900:	7dfb      	ldrb	r3, [r7, #23]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop

0800790c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	460b      	mov	r3, r1
 8007916:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800791e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800792a:	2303      	movs	r3, #3
 800792c:	e049      	b.n	80079c2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007934:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007936:	78fa      	ldrb	r2, [r7, #3]
 8007938:	6879      	ldr	r1, [r7, #4]
 800793a:	4613      	mov	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	440b      	add	r3, r1
 8007944:	3318      	adds	r3, #24
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d029      	beq.n	80079a0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800794c:	78fa      	ldrb	r2, [r7, #3]
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	4613      	mov	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	440b      	add	r3, r1
 800795a:	3318      	adds	r3, #24
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	78f9      	ldrb	r1, [r7, #3]
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	460b      	mov	r3, r1
 8007964:	00db      	lsls	r3, r3, #3
 8007966:	1a5b      	subs	r3, r3, r1
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4403      	add	r3, r0
 800796c:	3344      	adds	r3, #68	; 0x44
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	fbb2 f1f3 	udiv	r1, r2, r3
 8007974:	fb03 f301 	mul.w	r3, r3, r1
 8007978:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800797a:	2b00      	cmp	r3, #0
 800797c:	d110      	bne.n	80079a0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800797e:	78fa      	ldrb	r2, [r7, #3]
 8007980:	6879      	ldr	r1, [r7, #4]
 8007982:	4613      	mov	r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	4413      	add	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	440b      	add	r3, r1
 800798c:	3318      	adds	r3, #24
 800798e:	2200      	movs	r2, #0
 8007990:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007992:	78f9      	ldrb	r1, [r7, #3]
 8007994:	2300      	movs	r3, #0
 8007996:	2200      	movs	r2, #0
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f001 fed4 	bl	8009746 <USBD_LL_Transmit>
 800799e:	e00f      	b.n	80079c0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80079bc:	78fa      	ldrb	r2, [r7, #3]
 80079be:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b084      	sub	sp, #16
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	460b      	mov	r3, r1
 80079d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d101      	bne.n	80079ec <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e015      	b.n	8007a18 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80079ec:	78fb      	ldrb	r3, [r7, #3]
 80079ee:	4619      	mov	r1, r3
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f001 feea 	bl	80097ca <USBD_LL_GetRxDataSize>
 80079f6:	4602      	mov	r2, r0
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007a12:	4611      	mov	r1, r2
 8007a14:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a2e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d015      	beq.n	8007a66 <USBD_CDC_EP0_RxReady+0x46>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007a40:	2bff      	cmp	r3, #255	; 0xff
 8007a42:	d010      	beq.n	8007a66 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007a52:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007a5a:	b292      	uxth	r2, r2
 8007a5c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	22ff      	movs	r2, #255	; 0xff
 8007a62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2243      	movs	r2, #67	; 0x43
 8007a7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007a7e:	4b03      	ldr	r3, [pc, #12]	; (8007a8c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	20000098 	.word	0x20000098

08007a90 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2243      	movs	r2, #67	; 0x43
 8007a9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007a9e:	4b03      	ldr	r3, [pc, #12]	; (8007aac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	20000054 	.word	0x20000054

08007ab0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2243      	movs	r2, #67	; 0x43
 8007abc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007abe:	4b03      	ldr	r3, [pc, #12]	; (8007acc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	200000dc 	.word	0x200000dc

08007ad0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	220a      	movs	r2, #10
 8007adc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007ade:	4b03      	ldr	r3, [pc, #12]	; (8007aec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	20000010 	.word	0x20000010

08007af0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e004      	b.n	8007b0e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b087      	sub	sp, #28
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	60f8      	str	r0, [r7, #12]
 8007b22:	60b9      	str	r1, [r7, #8]
 8007b24:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b2c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	371c      	adds	r7, #28
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b5c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b82:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007b84:	2301      	movs	r3, #1
 8007b86:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d101      	bne.n	8007b96 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e01a      	b.n	8007bcc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d114      	bne.n	8007bca <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007bbe:	2181      	movs	r1, #129	; 0x81
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f001 fdc0 	bl	8009746 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007be2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e016      	b.n	8007c20 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	7c1b      	ldrb	r3, [r3, #16]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d109      	bne.n	8007c0e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c04:	2101      	movs	r1, #1
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f001 fdbe 	bl	8009788 <USBD_LL_PrepareReceive>
 8007c0c:	e007      	b.n	8007c1e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c14:	2340      	movs	r3, #64	; 0x40
 8007c16:	2101      	movs	r1, #1
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f001 fdb5 	bl	8009788 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b086      	sub	sp, #24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	4613      	mov	r3, r2
 8007c34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d101      	bne.n	8007c40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	e025      	b.n	8007c8c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d003      	beq.n	8007c52 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d003      	beq.n	8007c64 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	79fa      	ldrb	r2, [r7, #7]
 8007c7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f001 fc2b 	bl	80094dc <USBD_LL_Init>
 8007c86:	4603      	mov	r3, r0
 8007c88:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3718      	adds	r7, #24
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e010      	b.n	8007cce <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cbc:	f107 020e 	add.w	r2, r7, #14
 8007cc0:	4610      	mov	r0, r2
 8007cc2:	4798      	blx	r3
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b082      	sub	sp, #8
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f001 fc48 	bl	8009574 <USBD_LL_Start>
 8007ce4:	4603      	mov	r3, r0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b083      	sub	sp, #12
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007d10:	2303      	movs	r3, #3
 8007d12:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d009      	beq.n	8007d32 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	78fa      	ldrb	r2, [r7, #3]
 8007d28:	4611      	mov	r1, r2
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	4798      	blx	r3
 8007d2e:	4603      	mov	r3, r0
 8007d30:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	460b      	mov	r3, r1
 8007d46:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d007      	beq.n	8007d62 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	78fa      	ldrb	r2, [r7, #3]
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	4798      	blx	r3
  }

  return USBD_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f000 ff2c 	bl	8008bdc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007d92:	461a      	mov	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007da0:	f003 031f 	and.w	r3, r3, #31
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d00e      	beq.n	8007dc6 <USBD_LL_SetupStage+0x5a>
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d302      	bcc.n	8007db2 <USBD_LL_SetupStage+0x46>
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d014      	beq.n	8007dda <USBD_LL_SetupStage+0x6e>
 8007db0:	e01d      	b.n	8007dee <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007db8:	4619      	mov	r1, r3
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fa18 	bl	80081f0 <USBD_StdDevReq>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8007dc4:	e020      	b.n	8007e08 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007dcc:	4619      	mov	r1, r3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fa7c 	bl	80082cc <USBD_StdItfReq>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8007dd8:	e016      	b.n	8007e08 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007de0:	4619      	mov	r1, r3
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fab8 	bl	8008358 <USBD_StdEPReq>
 8007de8:	4603      	mov	r3, r0
 8007dea:	73fb      	strb	r3, [r7, #15]
      break;
 8007dec:	e00c      	b.n	8007e08 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007df4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f001 fc19 	bl	8009634 <USBD_LL_StallEP>
 8007e02:	4603      	mov	r3, r0
 8007e04:	73fb      	strb	r3, [r7, #15]
      break;
 8007e06:	bf00      	nop
  }

  return ret;
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b086      	sub	sp, #24
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	60f8      	str	r0, [r7, #12]
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	607a      	str	r2, [r7, #4]
 8007e1e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007e20:	7afb      	ldrb	r3, [r7, #11]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d137      	bne.n	8007e96 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007e2c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e34:	2b03      	cmp	r3, #3
 8007e36:	d14a      	bne.n	8007ece <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	689a      	ldr	r2, [r3, #8]
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d913      	bls.n	8007e6c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	689a      	ldr	r2, [r3, #8]
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	1ad2      	subs	r2, r2, r3
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	68da      	ldr	r2, [r3, #12]
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	bf28      	it	cs
 8007e5e:	4613      	movcs	r3, r2
 8007e60:	461a      	mov	r2, r3
 8007e62:	6879      	ldr	r1, [r7, #4]
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f000 ffad 	bl	8008dc4 <USBD_CtlContinueRx>
 8007e6a:	e030      	b.n	8007ece <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00a      	beq.n	8007e8e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e7e:	2b03      	cmp	r3, #3
 8007e80:	d105      	bne.n	8007e8e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f000 ffa9 	bl	8008de6 <USBD_CtlSendStatus>
 8007e94:	e01b      	b.n	8007ece <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d013      	beq.n	8007eca <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	d10e      	bne.n	8007eca <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb2:	699b      	ldr	r3, [r3, #24]
 8007eb4:	7afa      	ldrb	r2, [r7, #11]
 8007eb6:	4611      	mov	r1, r2
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	4798      	blx	r3
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007ec0:	7dfb      	ldrb	r3, [r7, #23]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
 8007ec8:	e002      	b.n	8007ed0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e000      	b.n	8007ed0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3718      	adds	r7, #24
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	607a      	str	r2, [r7, #4]
 8007ee4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007ee6:	7afb      	ldrb	r3, [r7, #11]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d16a      	bne.n	8007fc2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	3314      	adds	r3, #20
 8007ef0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d155      	bne.n	8007fa8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	689a      	ldr	r2, [r3, #8]
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d914      	bls.n	8007f32 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	689a      	ldr	r2, [r3, #8]
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	1ad2      	subs	r2, r2, r3
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	6879      	ldr	r1, [r7, #4]
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f000 ff22 	bl	8008d68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f24:	2300      	movs	r3, #0
 8007f26:	2200      	movs	r2, #0
 8007f28:	2100      	movs	r1, #0
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f001 fc2c 	bl	8009788 <USBD_LL_PrepareReceive>
 8007f30:	e03a      	b.n	8007fa8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	68da      	ldr	r2, [r3, #12]
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d11c      	bne.n	8007f78 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	685a      	ldr	r2, [r3, #4]
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d316      	bcc.n	8007f78 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	685a      	ldr	r2, [r3, #4]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d20f      	bcs.n	8007f78 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f58:	2200      	movs	r2, #0
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f000 ff03 	bl	8008d68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	2100      	movs	r1, #0
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f001 fc09 	bl	8009788 <USBD_LL_PrepareReceive>
 8007f76:	e017      	b.n	8007fa8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00a      	beq.n	8007f9a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	d105      	bne.n	8007f9a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f9a:	2180      	movs	r1, #128	; 0x80
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f001 fb49 	bl	8009634 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f000 ff32 	bl	8008e0c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d123      	bne.n	8007ffa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f7ff fe9b 	bl	8007cee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007fc0:	e01b      	b.n	8007ffa <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d013      	beq.n	8007ff6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007fd4:	2b03      	cmp	r3, #3
 8007fd6:	d10e      	bne.n	8007ff6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fde:	695b      	ldr	r3, [r3, #20]
 8007fe0:	7afa      	ldrb	r2, [r7, #11]
 8007fe2:	4611      	mov	r1, r2
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	4798      	blx	r3
 8007fe8:	4603      	mov	r3, r0
 8007fea:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007fec:	7dfb      	ldrb	r3, [r7, #23]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007ff2:	7dfb      	ldrb	r3, [r7, #23]
 8007ff4:	e002      	b.n	8007ffc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e000      	b.n	8007ffc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3718      	adds	r7, #24
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008030:	2b00      	cmp	r3, #0
 8008032:	d009      	beq.n	8008048 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	6852      	ldr	r2, [r2, #4]
 8008040:	b2d2      	uxtb	r2, r2
 8008042:	4611      	mov	r1, r2
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008048:	2340      	movs	r3, #64	; 0x40
 800804a:	2200      	movs	r2, #0
 800804c:	2100      	movs	r1, #0
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f001 faab 	bl	80095aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2240      	movs	r2, #64	; 0x40
 8008060:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008064:	2340      	movs	r3, #64	; 0x40
 8008066:	2200      	movs	r2, #0
 8008068:	2180      	movs	r1, #128	; 0x80
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f001 fa9d 	bl	80095aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2240      	movs	r2, #64	; 0x40
 800807a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008086:	b480      	push	{r7}
 8008088:	b083      	sub	sp, #12
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	460b      	mov	r3, r1
 8008090:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	78fa      	ldrb	r2, [r7, #3]
 8008096:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2204      	movs	r2, #4
 80080be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080de:	2b04      	cmp	r3, #4
 80080e0:	d105      	bne.n	80080ee <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800810a:	2b03      	cmp	r3, #3
 800810c:	d10b      	bne.n	8008126 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008114:	69db      	ldr	r3, [r3, #28]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d005      	beq.n	8008126 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	460b      	mov	r3, r1
 800813a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	370c      	adds	r7, #12
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800814a:	b480      	push	{r7}
 800814c:	b083      	sub	sp, #12
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	460b      	mov	r3, r1
 8008154:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	370c      	adds	r7, #12
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b082      	sub	sp, #8
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008190:	2b00      	cmp	r3, #0
 8008192:	d009      	beq.n	80081a8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	6852      	ldr	r2, [r2, #4]
 80081a0:	b2d2      	uxtb	r2, r2
 80081a2:	4611      	mov	r1, r2
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	4798      	blx	r3
  }

  return USBD_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b087      	sub	sp, #28
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	3301      	adds	r3, #1
 80081c8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80081d0:	8a3b      	ldrh	r3, [r7, #16]
 80081d2:	021b      	lsls	r3, r3, #8
 80081d4:	b21a      	sxth	r2, r3
 80081d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80081da:	4313      	orrs	r3, r2
 80081dc:	b21b      	sxth	r3, r3
 80081de:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80081e0:	89fb      	ldrh	r3, [r7, #14]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	371c      	adds	r7, #28
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
	...

080081f0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081fa:	2300      	movs	r3, #0
 80081fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008206:	2b20      	cmp	r3, #32
 8008208:	d004      	beq.n	8008214 <USBD_StdDevReq+0x24>
 800820a:	2b40      	cmp	r3, #64	; 0x40
 800820c:	d002      	beq.n	8008214 <USBD_StdDevReq+0x24>
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00a      	beq.n	8008228 <USBD_StdDevReq+0x38>
 8008212:	e050      	b.n	80082b6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	4798      	blx	r3
 8008222:	4603      	mov	r3, r0
 8008224:	73fb      	strb	r3, [r7, #15]
    break;
 8008226:	e04b      	b.n	80082c0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	785b      	ldrb	r3, [r3, #1]
 800822c:	2b09      	cmp	r3, #9
 800822e:	d83c      	bhi.n	80082aa <USBD_StdDevReq+0xba>
 8008230:	a201      	add	r2, pc, #4	; (adr r2, 8008238 <USBD_StdDevReq+0x48>)
 8008232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008236:	bf00      	nop
 8008238:	0800828d 	.word	0x0800828d
 800823c:	080082a1 	.word	0x080082a1
 8008240:	080082ab 	.word	0x080082ab
 8008244:	08008297 	.word	0x08008297
 8008248:	080082ab 	.word	0x080082ab
 800824c:	0800826b 	.word	0x0800826b
 8008250:	08008261 	.word	0x08008261
 8008254:	080082ab 	.word	0x080082ab
 8008258:	08008283 	.word	0x08008283
 800825c:	08008275 	.word	0x08008275
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008260:	6839      	ldr	r1, [r7, #0]
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f9ce 	bl	8008604 <USBD_GetDescriptor>
      break;
 8008268:	e024      	b.n	80082b4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fb33 	bl	80088d8 <USBD_SetAddress>
      break;
 8008272:	e01f      	b.n	80082b4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fb70 	bl	800895c <USBD_SetConfig>
 800827c:	4603      	mov	r3, r0
 800827e:	73fb      	strb	r3, [r7, #15]
      break;
 8008280:	e018      	b.n	80082b4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fc0d 	bl	8008aa4 <USBD_GetConfig>
      break;
 800828a:	e013      	b.n	80082b4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fc3c 	bl	8008b0c <USBD_GetStatus>
      break;
 8008294:	e00e      	b.n	80082b4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008296:	6839      	ldr	r1, [r7, #0]
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fc6a 	bl	8008b72 <USBD_SetFeature>
      break;
 800829e:	e009      	b.n	80082b4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80082a0:	6839      	ldr	r1, [r7, #0]
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fc79 	bl	8008b9a <USBD_ClrFeature>
      break;
 80082a8:	e004      	b.n	80082b4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fccf 	bl	8008c50 <USBD_CtlError>
      break;
 80082b2:	bf00      	nop
    }
    break;
 80082b4:	e004      	b.n	80082c0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fcc9 	bl	8008c50 <USBD_CtlError>
    break;
 80082be:	bf00      	nop
  }

  return ret;
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop

080082cc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082e2:	2b20      	cmp	r3, #32
 80082e4:	d003      	beq.n	80082ee <USBD_StdItfReq+0x22>
 80082e6:	2b40      	cmp	r3, #64	; 0x40
 80082e8:	d001      	beq.n	80082ee <USBD_StdItfReq+0x22>
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d12a      	bne.n	8008344 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f4:	3b01      	subs	r3, #1
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d81d      	bhi.n	8008336 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	889b      	ldrh	r3, [r3, #4]
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	2b01      	cmp	r3, #1
 8008302:	d813      	bhi.n	800832c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	4798      	blx	r3
 8008312:	4603      	mov	r3, r0
 8008314:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	88db      	ldrh	r3, [r3, #6]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d110      	bne.n	8008340 <USBD_StdItfReq+0x74>
 800831e:	7bfb      	ldrb	r3, [r7, #15]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10d      	bne.n	8008340 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fd5e 	bl	8008de6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800832a:	e009      	b.n	8008340 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fc8e 	bl	8008c50 <USBD_CtlError>
      break;
 8008334:	e004      	b.n	8008340 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008336:	6839      	ldr	r1, [r7, #0]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fc89 	bl	8008c50 <USBD_CtlError>
      break;
 800833e:	e000      	b.n	8008342 <USBD_StdItfReq+0x76>
      break;
 8008340:	bf00      	nop
    }
    break;
 8008342:	e004      	b.n	800834e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fc82 	bl	8008c50 <USBD_CtlError>
    break;
 800834c:	bf00      	nop
  }

  return ret;
 800834e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008362:	2300      	movs	r3, #0
 8008364:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	889b      	ldrh	r3, [r3, #4]
 800836a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008374:	2b20      	cmp	r3, #32
 8008376:	d004      	beq.n	8008382 <USBD_StdEPReq+0x2a>
 8008378:	2b40      	cmp	r3, #64	; 0x40
 800837a:	d002      	beq.n	8008382 <USBD_StdEPReq+0x2a>
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00a      	beq.n	8008396 <USBD_StdEPReq+0x3e>
 8008380:	e135      	b.n	80085ee <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	6839      	ldr	r1, [r7, #0]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	4798      	blx	r3
 8008390:	4603      	mov	r3, r0
 8008392:	73fb      	strb	r3, [r7, #15]
    break;
 8008394:	e130      	b.n	80085f8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	785b      	ldrb	r3, [r3, #1]
 800839a:	2b01      	cmp	r3, #1
 800839c:	d03e      	beq.n	800841c <USBD_StdEPReq+0xc4>
 800839e:	2b03      	cmp	r3, #3
 80083a0:	d002      	beq.n	80083a8 <USBD_StdEPReq+0x50>
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d077      	beq.n	8008496 <USBD_StdEPReq+0x13e>
 80083a6:	e11c      	b.n	80085e2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d002      	beq.n	80083b8 <USBD_StdEPReq+0x60>
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	d015      	beq.n	80083e2 <USBD_StdEPReq+0x8a>
 80083b6:	e02b      	b.n	8008410 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083b8:	7bbb      	ldrb	r3, [r7, #14]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00c      	beq.n	80083d8 <USBD_StdEPReq+0x80>
 80083be:	7bbb      	ldrb	r3, [r7, #14]
 80083c0:	2b80      	cmp	r3, #128	; 0x80
 80083c2:	d009      	beq.n	80083d8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80083c4:	7bbb      	ldrb	r3, [r7, #14]
 80083c6:	4619      	mov	r1, r3
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f001 f933 	bl	8009634 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80083ce:	2180      	movs	r1, #128	; 0x80
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f001 f92f 	bl	8009634 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80083d6:	e020      	b.n	800841a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80083d8:	6839      	ldr	r1, [r7, #0]
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fc38 	bl	8008c50 <USBD_CtlError>
        break;
 80083e0:	e01b      	b.n	800841a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	885b      	ldrh	r3, [r3, #2]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10e      	bne.n	8008408 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80083ea:	7bbb      	ldrb	r3, [r7, #14]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00b      	beq.n	8008408 <USBD_StdEPReq+0xb0>
 80083f0:	7bbb      	ldrb	r3, [r7, #14]
 80083f2:	2b80      	cmp	r3, #128	; 0x80
 80083f4:	d008      	beq.n	8008408 <USBD_StdEPReq+0xb0>
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	88db      	ldrh	r3, [r3, #6]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d104      	bne.n	8008408 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80083fe:	7bbb      	ldrb	r3, [r7, #14]
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f001 f916 	bl	8009634 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fcec 	bl	8008de6 <USBD_CtlSendStatus>

        break;
 800840e:	e004      	b.n	800841a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fc1c 	bl	8008c50 <USBD_CtlError>
        break;
 8008418:	bf00      	nop
      }
      break;
 800841a:	e0e7      	b.n	80085ec <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008422:	2b02      	cmp	r3, #2
 8008424:	d002      	beq.n	800842c <USBD_StdEPReq+0xd4>
 8008426:	2b03      	cmp	r3, #3
 8008428:	d015      	beq.n	8008456 <USBD_StdEPReq+0xfe>
 800842a:	e02d      	b.n	8008488 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00c      	beq.n	800844c <USBD_StdEPReq+0xf4>
 8008432:	7bbb      	ldrb	r3, [r7, #14]
 8008434:	2b80      	cmp	r3, #128	; 0x80
 8008436:	d009      	beq.n	800844c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008438:	7bbb      	ldrb	r3, [r7, #14]
 800843a:	4619      	mov	r1, r3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f001 f8f9 	bl	8009634 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008442:	2180      	movs	r1, #128	; 0x80
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f001 f8f5 	bl	8009634 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800844a:	e023      	b.n	8008494 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fbfe 	bl	8008c50 <USBD_CtlError>
        break;
 8008454:	e01e      	b.n	8008494 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	885b      	ldrh	r3, [r3, #2]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d119      	bne.n	8008492 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800845e:	7bbb      	ldrb	r3, [r7, #14]
 8008460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008464:	2b00      	cmp	r3, #0
 8008466:	d004      	beq.n	8008472 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008468:	7bbb      	ldrb	r3, [r7, #14]
 800846a:	4619      	mov	r1, r3
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f001 f900 	bl	8009672 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fcb7 	bl	8008de6 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	4798      	blx	r3
        }
        break;
 8008486:	e004      	b.n	8008492 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fbe0 	bl	8008c50 <USBD_CtlError>
        break;
 8008490:	e000      	b.n	8008494 <USBD_StdEPReq+0x13c>
        break;
 8008492:	bf00      	nop
      }
      break;
 8008494:	e0aa      	b.n	80085ec <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800849c:	2b02      	cmp	r3, #2
 800849e:	d002      	beq.n	80084a6 <USBD_StdEPReq+0x14e>
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d032      	beq.n	800850a <USBD_StdEPReq+0x1b2>
 80084a4:	e097      	b.n	80085d6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084a6:	7bbb      	ldrb	r3, [r7, #14]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d007      	beq.n	80084bc <USBD_StdEPReq+0x164>
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
 80084ae:	2b80      	cmp	r3, #128	; 0x80
 80084b0:	d004      	beq.n	80084bc <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 fbcb 	bl	8008c50 <USBD_CtlError>
          break;
 80084ba:	e091      	b.n	80085e0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	da0b      	bge.n	80084dc <USBD_StdEPReq+0x184>
 80084c4:	7bbb      	ldrb	r3, [r7, #14]
 80084c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084ca:	4613      	mov	r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4413      	add	r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	3310      	adds	r3, #16
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	4413      	add	r3, r2
 80084d8:	3304      	adds	r3, #4
 80084da:	e00b      	b.n	80084f4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80084dc:	7bbb      	ldrb	r3, [r7, #14]
 80084de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084e2:	4613      	mov	r3, r2
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4413      	add	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	4413      	add	r3, r2
 80084f2:	3304      	adds	r3, #4
 80084f4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	2200      	movs	r2, #0
 80084fa:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	2202      	movs	r2, #2
 8008500:	4619      	mov	r1, r3
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fc15 	bl	8008d32 <USBD_CtlSendData>
        break;
 8008508:	e06a      	b.n	80085e0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800850a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800850e:	2b00      	cmp	r3, #0
 8008510:	da11      	bge.n	8008536 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008512:	7bbb      	ldrb	r3, [r7, #14]
 8008514:	f003 020f 	and.w	r2, r3, #15
 8008518:	6879      	ldr	r1, [r7, #4]
 800851a:	4613      	mov	r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4413      	add	r3, r2
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	440b      	add	r3, r1
 8008524:	3324      	adds	r3, #36	; 0x24
 8008526:	881b      	ldrh	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d117      	bne.n	800855c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800852c:	6839      	ldr	r1, [r7, #0]
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fb8e 	bl	8008c50 <USBD_CtlError>
            break;
 8008534:	e054      	b.n	80085e0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008536:	7bbb      	ldrb	r3, [r7, #14]
 8008538:	f003 020f 	and.w	r2, r3, #15
 800853c:	6879      	ldr	r1, [r7, #4]
 800853e:	4613      	mov	r3, r2
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4413      	add	r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	440b      	add	r3, r1
 8008548:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800854c:	881b      	ldrh	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d104      	bne.n	800855c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 fb7b 	bl	8008c50 <USBD_CtlError>
            break;
 800855a:	e041      	b.n	80085e0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800855c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008560:	2b00      	cmp	r3, #0
 8008562:	da0b      	bge.n	800857c <USBD_StdEPReq+0x224>
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800856a:	4613      	mov	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4413      	add	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	3310      	adds	r3, #16
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	4413      	add	r3, r2
 8008578:	3304      	adds	r3, #4
 800857a:	e00b      	b.n	8008594 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800857c:	7bbb      	ldrb	r3, [r7, #14]
 800857e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008582:	4613      	mov	r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	4413      	add	r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	4413      	add	r3, r2
 8008592:	3304      	adds	r3, #4
 8008594:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008596:	7bbb      	ldrb	r3, [r7, #14]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d002      	beq.n	80085a2 <USBD_StdEPReq+0x24a>
 800859c:	7bbb      	ldrb	r3, [r7, #14]
 800859e:	2b80      	cmp	r3, #128	; 0x80
 80085a0:	d103      	bne.n	80085aa <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	2200      	movs	r2, #0
 80085a6:	601a      	str	r2, [r3, #0]
 80085a8:	e00e      	b.n	80085c8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80085aa:	7bbb      	ldrb	r3, [r7, #14]
 80085ac:	4619      	mov	r1, r3
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f001 f87e 	bl	80096b0 <USBD_LL_IsStallEP>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	2201      	movs	r2, #1
 80085be:	601a      	str	r2, [r3, #0]
 80085c0:	e002      	b.n	80085c8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2200      	movs	r2, #0
 80085c6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	2202      	movs	r2, #2
 80085cc:	4619      	mov	r1, r3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fbaf 	bl	8008d32 <USBD_CtlSendData>
          break;
 80085d4:	e004      	b.n	80085e0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fb39 	bl	8008c50 <USBD_CtlError>
        break;
 80085de:	bf00      	nop
      }
      break;
 80085e0:	e004      	b.n	80085ec <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fb33 	bl	8008c50 <USBD_CtlError>
      break;
 80085ea:	bf00      	nop
    }
    break;
 80085ec:	e004      	b.n	80085f8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 fb2d 	bl	8008c50 <USBD_CtlError>
    break;
 80085f6:	bf00      	nop
  }

  return ret;
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
	...

08008604 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800860e:	2300      	movs	r3, #0
 8008610:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008612:	2300      	movs	r3, #0
 8008614:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008616:	2300      	movs	r3, #0
 8008618:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	885b      	ldrh	r3, [r3, #2]
 800861e:	0a1b      	lsrs	r3, r3, #8
 8008620:	b29b      	uxth	r3, r3
 8008622:	3b01      	subs	r3, #1
 8008624:	2b06      	cmp	r3, #6
 8008626:	f200 8128 	bhi.w	800887a <USBD_GetDescriptor+0x276>
 800862a:	a201      	add	r2, pc, #4	; (adr r2, 8008630 <USBD_GetDescriptor+0x2c>)
 800862c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008630:	0800864d 	.word	0x0800864d
 8008634:	08008665 	.word	0x08008665
 8008638:	080086a5 	.word	0x080086a5
 800863c:	0800887b 	.word	0x0800887b
 8008640:	0800887b 	.word	0x0800887b
 8008644:	0800881b 	.word	0x0800881b
 8008648:	08008847 	.word	0x08008847
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	7c12      	ldrb	r2, [r2, #16]
 8008658:	f107 0108 	add.w	r1, r7, #8
 800865c:	4610      	mov	r0, r2
 800865e:	4798      	blx	r3
 8008660:	60f8      	str	r0, [r7, #12]
    break;
 8008662:	e112      	b.n	800888a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	7c1b      	ldrb	r3, [r3, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10d      	bne.n	8008688 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008674:	f107 0208 	add.w	r2, r7, #8
 8008678:	4610      	mov	r0, r2
 800867a:	4798      	blx	r3
 800867c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	3301      	adds	r3, #1
 8008682:	2202      	movs	r2, #2
 8008684:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008686:	e100      	b.n	800888a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800868e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008690:	f107 0208 	add.w	r2, r7, #8
 8008694:	4610      	mov	r0, r2
 8008696:	4798      	blx	r3
 8008698:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	3301      	adds	r3, #1
 800869e:	2202      	movs	r2, #2
 80086a0:	701a      	strb	r2, [r3, #0]
    break;
 80086a2:	e0f2      	b.n	800888a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	885b      	ldrh	r3, [r3, #2]
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b05      	cmp	r3, #5
 80086ac:	f200 80ac 	bhi.w	8008808 <USBD_GetDescriptor+0x204>
 80086b0:	a201      	add	r2, pc, #4	; (adr r2, 80086b8 <USBD_GetDescriptor+0xb4>)
 80086b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b6:	bf00      	nop
 80086b8:	080086d1 	.word	0x080086d1
 80086bc:	08008705 	.word	0x08008705
 80086c0:	08008739 	.word	0x08008739
 80086c4:	0800876d 	.word	0x0800876d
 80086c8:	080087a1 	.word	0x080087a1
 80086cc:	080087d5 	.word	0x080087d5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00b      	beq.n	80086f4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	7c12      	ldrb	r2, [r2, #16]
 80086e8:	f107 0108 	add.w	r1, r7, #8
 80086ec:	4610      	mov	r0, r2
 80086ee:	4798      	blx	r3
 80086f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086f2:	e091      	b.n	8008818 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80086f4:	6839      	ldr	r1, [r7, #0]
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 faaa 	bl	8008c50 <USBD_CtlError>
        err++;
 80086fc:	7afb      	ldrb	r3, [r7, #11]
 80086fe:	3301      	adds	r3, #1
 8008700:	72fb      	strb	r3, [r7, #11]
      break;
 8008702:	e089      	b.n	8008818 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00b      	beq.n	8008728 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	7c12      	ldrb	r2, [r2, #16]
 800871c:	f107 0108 	add.w	r1, r7, #8
 8008720:	4610      	mov	r0, r2
 8008722:	4798      	blx	r3
 8008724:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008726:	e077      	b.n	8008818 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008728:	6839      	ldr	r1, [r7, #0]
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fa90 	bl	8008c50 <USBD_CtlError>
        err++;
 8008730:	7afb      	ldrb	r3, [r7, #11]
 8008732:	3301      	adds	r3, #1
 8008734:	72fb      	strb	r3, [r7, #11]
      break;
 8008736:	e06f      	b.n	8008818 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00b      	beq.n	800875c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	7c12      	ldrb	r2, [r2, #16]
 8008750:	f107 0108 	add.w	r1, r7, #8
 8008754:	4610      	mov	r0, r2
 8008756:	4798      	blx	r3
 8008758:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800875a:	e05d      	b.n	8008818 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800875c:	6839      	ldr	r1, [r7, #0]
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fa76 	bl	8008c50 <USBD_CtlError>
        err++;
 8008764:	7afb      	ldrb	r3, [r7, #11]
 8008766:	3301      	adds	r3, #1
 8008768:	72fb      	strb	r3, [r7, #11]
      break;
 800876a:	e055      	b.n	8008818 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00b      	beq.n	8008790 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	7c12      	ldrb	r2, [r2, #16]
 8008784:	f107 0108 	add.w	r1, r7, #8
 8008788:	4610      	mov	r0, r2
 800878a:	4798      	blx	r3
 800878c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800878e:	e043      	b.n	8008818 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008790:	6839      	ldr	r1, [r7, #0]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fa5c 	bl	8008c50 <USBD_CtlError>
        err++;
 8008798:	7afb      	ldrb	r3, [r7, #11]
 800879a:	3301      	adds	r3, #1
 800879c:	72fb      	strb	r3, [r7, #11]
      break;
 800879e:	e03b      	b.n	8008818 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087a6:	695b      	ldr	r3, [r3, #20]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00b      	beq.n	80087c4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087b2:	695b      	ldr	r3, [r3, #20]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	7c12      	ldrb	r2, [r2, #16]
 80087b8:	f107 0108 	add.w	r1, r7, #8
 80087bc:	4610      	mov	r0, r2
 80087be:	4798      	blx	r3
 80087c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087c2:	e029      	b.n	8008818 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fa42 	bl	8008c50 <USBD_CtlError>
        err++;
 80087cc:	7afb      	ldrb	r3, [r7, #11]
 80087ce:	3301      	adds	r3, #1
 80087d0:	72fb      	strb	r3, [r7, #11]
      break;
 80087d2:	e021      	b.n	8008818 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087da:	699b      	ldr	r3, [r3, #24]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00b      	beq.n	80087f8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	7c12      	ldrb	r2, [r2, #16]
 80087ec:	f107 0108 	add.w	r1, r7, #8
 80087f0:	4610      	mov	r0, r2
 80087f2:	4798      	blx	r3
 80087f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087f6:	e00f      	b.n	8008818 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fa28 	bl	8008c50 <USBD_CtlError>
        err++;
 8008800:	7afb      	ldrb	r3, [r7, #11]
 8008802:	3301      	adds	r3, #1
 8008804:	72fb      	strb	r3, [r7, #11]
      break;
 8008806:	e007      	b.n	8008818 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008808:	6839      	ldr	r1, [r7, #0]
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 fa20 	bl	8008c50 <USBD_CtlError>
      err++;
 8008810:	7afb      	ldrb	r3, [r7, #11]
 8008812:	3301      	adds	r3, #1
 8008814:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008816:	bf00      	nop
    }
    break;
 8008818:	e037      	b.n	800888a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	7c1b      	ldrb	r3, [r3, #16]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d109      	bne.n	8008836 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800882a:	f107 0208 	add.w	r2, r7, #8
 800882e:	4610      	mov	r0, r2
 8008830:	4798      	blx	r3
 8008832:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008834:	e029      	b.n	800888a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fa09 	bl	8008c50 <USBD_CtlError>
      err++;
 800883e:	7afb      	ldrb	r3, [r7, #11]
 8008840:	3301      	adds	r3, #1
 8008842:	72fb      	strb	r3, [r7, #11]
    break;
 8008844:	e021      	b.n	800888a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	7c1b      	ldrb	r3, [r3, #16]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10d      	bne.n	800886a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008856:	f107 0208 	add.w	r2, r7, #8
 800885a:	4610      	mov	r0, r2
 800885c:	4798      	blx	r3
 800885e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3301      	adds	r3, #1
 8008864:	2207      	movs	r2, #7
 8008866:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008868:	e00f      	b.n	800888a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800886a:	6839      	ldr	r1, [r7, #0]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f9ef 	bl	8008c50 <USBD_CtlError>
      err++;
 8008872:	7afb      	ldrb	r3, [r7, #11]
 8008874:	3301      	adds	r3, #1
 8008876:	72fb      	strb	r3, [r7, #11]
    break;
 8008878:	e007      	b.n	800888a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800887a:	6839      	ldr	r1, [r7, #0]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f9e7 	bl	8008c50 <USBD_CtlError>
    err++;
 8008882:	7afb      	ldrb	r3, [r7, #11]
 8008884:	3301      	adds	r3, #1
 8008886:	72fb      	strb	r3, [r7, #11]
    break;
 8008888:	bf00      	nop
  }

  if (err != 0U)
 800888a:	7afb      	ldrb	r3, [r7, #11]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d11e      	bne.n	80088ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	88db      	ldrh	r3, [r3, #6]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d016      	beq.n	80088c6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008898:	893b      	ldrh	r3, [r7, #8]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00e      	beq.n	80088bc <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	88da      	ldrh	r2, [r3, #6]
 80088a2:	893b      	ldrh	r3, [r7, #8]
 80088a4:	4293      	cmp	r3, r2
 80088a6:	bf28      	it	cs
 80088a8:	4613      	movcs	r3, r2
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80088ae:	893b      	ldrh	r3, [r7, #8]
 80088b0:	461a      	mov	r2, r3
 80088b2:	68f9      	ldr	r1, [r7, #12]
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 fa3c 	bl	8008d32 <USBD_CtlSendData>
 80088ba:	e009      	b.n	80088d0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80088bc:	6839      	ldr	r1, [r7, #0]
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f9c6 	bl	8008c50 <USBD_CtlError>
 80088c4:	e004      	b.n	80088d0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fa8d 	bl	8008de6 <USBD_CtlSendStatus>
 80088cc:	e000      	b.n	80088d0 <USBD_GetDescriptor+0x2cc>
    return;
 80088ce:	bf00      	nop
    }
  }
}
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop

080088d8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	889b      	ldrh	r3, [r3, #4]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d130      	bne.n	800894c <USBD_SetAddress+0x74>
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	88db      	ldrh	r3, [r3, #6]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d12c      	bne.n	800894c <USBD_SetAddress+0x74>
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	885b      	ldrh	r3, [r3, #2]
 80088f6:	2b7f      	cmp	r3, #127	; 0x7f
 80088f8:	d828      	bhi.n	800894c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	885b      	ldrh	r3, [r3, #2]
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008904:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800890c:	2b03      	cmp	r3, #3
 800890e:	d104      	bne.n	800891a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f99c 	bl	8008c50 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008918:	e01c      	b.n	8008954 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	7bfa      	ldrb	r2, [r7, #15]
 800891e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008922:	7bfb      	ldrb	r3, [r7, #15]
 8008924:	4619      	mov	r1, r3
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 feee 	bl	8009708 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fa5a 	bl	8008de6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008932:	7bfb      	ldrb	r3, [r7, #15]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d004      	beq.n	8008942 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008940:	e008      	b.n	8008954 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2201      	movs	r2, #1
 8008946:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800894a:	e003      	b.n	8008954 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f97e 	bl	8008c50 <USBD_CtlError>
  }
}
 8008954:	bf00      	nop
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008966:	2300      	movs	r3, #0
 8008968:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	885b      	ldrh	r3, [r3, #2]
 800896e:	b2da      	uxtb	r2, r3
 8008970:	4b4b      	ldr	r3, [pc, #300]	; (8008aa0 <USBD_SetConfig+0x144>)
 8008972:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008974:	4b4a      	ldr	r3, [pc, #296]	; (8008aa0 <USBD_SetConfig+0x144>)
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d905      	bls.n	8008988 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f966 	bl	8008c50 <USBD_CtlError>
    return USBD_FAIL;
 8008984:	2303      	movs	r3, #3
 8008986:	e087      	b.n	8008a98 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800898e:	2b02      	cmp	r3, #2
 8008990:	d002      	beq.n	8008998 <USBD_SetConfig+0x3c>
 8008992:	2b03      	cmp	r3, #3
 8008994:	d025      	beq.n	80089e2 <USBD_SetConfig+0x86>
 8008996:	e071      	b.n	8008a7c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008998:	4b41      	ldr	r3, [pc, #260]	; (8008aa0 <USBD_SetConfig+0x144>)
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d01c      	beq.n	80089da <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80089a0:	4b3f      	ldr	r3, [pc, #252]	; (8008aa0 <USBD_SetConfig+0x144>)
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	461a      	mov	r2, r3
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80089aa:	4b3d      	ldr	r3, [pc, #244]	; (8008aa0 <USBD_SetConfig+0x144>)
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7ff f9a7 	bl	8007d04 <USBD_SetClassConfig>
 80089b6:	4603      	mov	r3, r0
 80089b8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80089ba:	7bfb      	ldrb	r3, [r7, #15]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d004      	beq.n	80089ca <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f944 	bl	8008c50 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80089c8:	e065      	b.n	8008a96 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fa0b 	bl	8008de6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2203      	movs	r2, #3
 80089d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80089d8:	e05d      	b.n	8008a96 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fa03 	bl	8008de6 <USBD_CtlSendStatus>
    break;
 80089e0:	e059      	b.n	8008a96 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80089e2:	4b2f      	ldr	r3, [pc, #188]	; (8008aa0 <USBD_SetConfig+0x144>)
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d112      	bne.n	8008a10 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2202      	movs	r2, #2
 80089ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80089f2:	4b2b      	ldr	r3, [pc, #172]	; (8008aa0 <USBD_SetConfig+0x144>)
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	461a      	mov	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089fc:	4b28      	ldr	r3, [pc, #160]	; (8008aa0 <USBD_SetConfig+0x144>)
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	4619      	mov	r1, r3
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f7ff f99a 	bl	8007d3c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f9ec 	bl	8008de6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008a0e:	e042      	b.n	8008a96 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008a10:	4b23      	ldr	r3, [pc, #140]	; (8008aa0 <USBD_SetConfig+0x144>)
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	461a      	mov	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d02a      	beq.n	8008a74 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	4619      	mov	r1, r3
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f7ff f988 	bl	8007d3c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008a2c:	4b1c      	ldr	r3, [pc, #112]	; (8008aa0 <USBD_SetConfig+0x144>)
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	461a      	mov	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a36:	4b1a      	ldr	r3, [pc, #104]	; (8008aa0 <USBD_SetConfig+0x144>)
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f7ff f961 	bl	8007d04 <USBD_SetClassConfig>
 8008a42:	4603      	mov	r3, r0
 8008a44:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00f      	beq.n	8008a6c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008a4c:	6839      	ldr	r1, [r7, #0]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f8fe 	bl	8008c50 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7ff f96d 	bl	8007d3c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2202      	movs	r2, #2
 8008a66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008a6a:	e014      	b.n	8008a96 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f9ba 	bl	8008de6 <USBD_CtlSendStatus>
    break;
 8008a72:	e010      	b.n	8008a96 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f9b6 	bl	8008de6 <USBD_CtlSendStatus>
    break;
 8008a7a:	e00c      	b.n	8008a96 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008a7c:	6839      	ldr	r1, [r7, #0]
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f8e6 	bl	8008c50 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a84:	4b06      	ldr	r3, [pc, #24]	; (8008aa0 <USBD_SetConfig+0x144>)
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	4619      	mov	r1, r3
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7ff f956 	bl	8007d3c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008a90:	2303      	movs	r3, #3
 8008a92:	73fb      	strb	r3, [r7, #15]
    break;
 8008a94:	bf00      	nop
  }

  return ret;
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	2000037c 	.word	0x2000037c

08008aa4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	88db      	ldrh	r3, [r3, #6]
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d004      	beq.n	8008ac0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f8c9 	bl	8008c50 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008abe:	e021      	b.n	8008b04 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	db17      	blt.n	8008afa <USBD_GetConfig+0x56>
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	dd02      	ble.n	8008ad4 <USBD_GetConfig+0x30>
 8008ace:	2b03      	cmp	r3, #3
 8008ad0:	d00b      	beq.n	8008aea <USBD_GetConfig+0x46>
 8008ad2:	e012      	b.n	8008afa <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	3308      	adds	r3, #8
 8008ade:	2201      	movs	r2, #1
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f925 	bl	8008d32 <USBD_CtlSendData>
      break;
 8008ae8:	e00c      	b.n	8008b04 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	3304      	adds	r3, #4
 8008aee:	2201      	movs	r2, #1
 8008af0:	4619      	mov	r1, r3
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f91d 	bl	8008d32 <USBD_CtlSendData>
      break;
 8008af8:	e004      	b.n	8008b04 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f8a7 	bl	8008c50 <USBD_CtlError>
      break;
 8008b02:	bf00      	nop
}
 8008b04:	bf00      	nop
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d81e      	bhi.n	8008b60 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	88db      	ldrh	r3, [r3, #6]
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d004      	beq.n	8008b34 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f88f 	bl	8008c50 <USBD_CtlError>
      break;
 8008b32:	e01a      	b.n	8008b6a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d005      	beq.n	8008b50 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	f043 0202 	orr.w	r2, r3, #2
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	330c      	adds	r3, #12
 8008b54:	2202      	movs	r2, #2
 8008b56:	4619      	mov	r1, r3
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f8ea 	bl	8008d32 <USBD_CtlSendData>
    break;
 8008b5e:	e004      	b.n	8008b6a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f874 	bl	8008c50 <USBD_CtlError>
    break;
 8008b68:	bf00      	nop
  }
}
 8008b6a:	bf00      	nop
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b082      	sub	sp, #8
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
 8008b7a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	885b      	ldrh	r3, [r3, #2]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d106      	bne.n	8008b92 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 f92a 	bl	8008de6 <USBD_CtlSendStatus>
  }
}
 8008b92:	bf00      	nop
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b082      	sub	sp, #8
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008baa:	3b01      	subs	r3, #1
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d80b      	bhi.n	8008bc8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	885b      	ldrh	r3, [r3, #2]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d10c      	bne.n	8008bd2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 f910 	bl	8008de6 <USBD_CtlSendStatus>
      }
      break;
 8008bc6:	e004      	b.n	8008bd2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f840 	bl	8008c50 <USBD_CtlError>
      break;
 8008bd0:	e000      	b.n	8008bd4 <USBD_ClrFeature+0x3a>
      break;
 8008bd2:	bf00      	nop
  }
}
 8008bd4:	bf00      	nop
 8008bd6:	3708      	adds	r7, #8
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	781a      	ldrb	r2, [r3, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	781a      	ldrb	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	3301      	adds	r3, #1
 8008c04:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f7ff fad3 	bl	80081b2 <SWAPBYTE>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	461a      	mov	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	3301      	adds	r3, #1
 8008c18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f7ff fac6 	bl	80081b2 <SWAPBYTE>
 8008c26:	4603      	mov	r3, r0
 8008c28:	461a      	mov	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	3301      	adds	r3, #1
 8008c32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	3301      	adds	r3, #1
 8008c38:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f7ff fab9 	bl	80081b2 <SWAPBYTE>
 8008c40:	4603      	mov	r3, r0
 8008c42:	461a      	mov	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	80da      	strh	r2, [r3, #6]
}
 8008c48:	bf00      	nop
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c5a:	2180      	movs	r1, #128	; 0x80
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fce9 	bl	8009634 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008c62:	2100      	movs	r1, #0
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fce5 	bl	8009634 <USBD_LL_StallEP>
}
 8008c6a:	bf00      	nop
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b086      	sub	sp, #24
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	60f8      	str	r0, [r7, #12]
 8008c7a:	60b9      	str	r1, [r7, #8]
 8008c7c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d036      	beq.n	8008cf6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008c8c:	6938      	ldr	r0, [r7, #16]
 8008c8e:	f000 f836 	bl	8008cfe <USBD_GetLen>
 8008c92:	4603      	mov	r3, r0
 8008c94:	3301      	adds	r3, #1
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	005b      	lsls	r3, r3, #1
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008ca0:	7dfb      	ldrb	r3, [r7, #23]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	7812      	ldrb	r2, [r2, #0]
 8008caa:	701a      	strb	r2, [r3, #0]
  idx++;
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008cb2:	7dfb      	ldrb	r3, [r7, #23]
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	2203      	movs	r2, #3
 8008cba:	701a      	strb	r2, [r3, #0]
  idx++;
 8008cbc:	7dfb      	ldrb	r3, [r7, #23]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008cc2:	e013      	b.n	8008cec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008cc4:	7dfb      	ldrb	r3, [r7, #23]
 8008cc6:	68ba      	ldr	r2, [r7, #8]
 8008cc8:	4413      	add	r3, r2
 8008cca:	693a      	ldr	r2, [r7, #16]
 8008ccc:	7812      	ldrb	r2, [r2, #0]
 8008cce:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	613b      	str	r3, [r7, #16]
    idx++;
 8008cd6:	7dfb      	ldrb	r3, [r7, #23]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008cdc:	7dfb      	ldrb	r3, [r7, #23]
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	701a      	strb	r2, [r3, #0]
    idx++;
 8008ce6:	7dfb      	ldrb	r3, [r7, #23]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1e7      	bne.n	8008cc4 <USBD_GetString+0x52>
 8008cf4:	e000      	b.n	8008cf8 <USBD_GetString+0x86>
    return;
 8008cf6:	bf00      	nop
  }
}
 8008cf8:	3718      	adds	r7, #24
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b085      	sub	sp, #20
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d06:	2300      	movs	r3, #0
 8008d08:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008d0e:	e005      	b.n	8008d1c <USBD_GetLen+0x1e>
  {
    len++;
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
 8008d12:	3301      	adds	r3, #1
 8008d14:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1f5      	bne.n	8008d10 <USBD_GetLen+0x12>
  }

  return len;
 8008d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr

08008d32 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b084      	sub	sp, #16
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	60f8      	str	r0, [r7, #12]
 8008d3a:	60b9      	str	r1, [r7, #8]
 8008d3c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2202      	movs	r2, #2
 8008d42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	2100      	movs	r1, #0
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f000 fcf4 	bl	8009746 <USBD_LL_Transmit>

  return USBD_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	2100      	movs	r1, #0
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f000 fce3 	bl	8009746 <USBD_LL_Transmit>

  return USBD_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b084      	sub	sp, #16
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	60f8      	str	r0, [r7, #12]
 8008d92:	60b9      	str	r1, [r7, #8]
 8008d94:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2203      	movs	r2, #3
 8008d9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	68ba      	ldr	r2, [r7, #8]
 8008db2:	2100      	movs	r1, #0
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f000 fce7 	bl	8009788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	68ba      	ldr	r2, [r7, #8]
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f000 fcd6 	bl	8009788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b082      	sub	sp, #8
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2204      	movs	r2, #4
 8008df2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008df6:	2300      	movs	r3, #0
 8008df8:	2200      	movs	r2, #0
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fca2 	bl	8009746 <USBD_LL_Transmit>

  return USBD_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3708      	adds	r7, #8
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2205      	movs	r2, #5
 8008e18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	2200      	movs	r2, #0
 8008e20:	2100      	movs	r1, #0
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fcb0 	bl	8009788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
	...

08008e34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	4912      	ldr	r1, [pc, #72]	; (8008e84 <MX_USB_DEVICE_Init+0x50>)
 8008e3c:	4812      	ldr	r0, [pc, #72]	; (8008e88 <MX_USB_DEVICE_Init+0x54>)
 8008e3e:	f7fe fef3 	bl	8007c28 <USBD_Init>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d001      	beq.n	8008e4c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008e48:	f7f8 fd00 	bl	800184c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008e4c:	490f      	ldr	r1, [pc, #60]	; (8008e8c <MX_USB_DEVICE_Init+0x58>)
 8008e4e:	480e      	ldr	r0, [pc, #56]	; (8008e88 <MX_USB_DEVICE_Init+0x54>)
 8008e50:	f7fe ff20 	bl	8007c94 <USBD_RegisterClass>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d001      	beq.n	8008e5e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008e5a:	f7f8 fcf7 	bl	800184c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008e5e:	490c      	ldr	r1, [pc, #48]	; (8008e90 <MX_USB_DEVICE_Init+0x5c>)
 8008e60:	4809      	ldr	r0, [pc, #36]	; (8008e88 <MX_USB_DEVICE_Init+0x54>)
 8008e62:	f7fe fe45 	bl	8007af0 <USBD_CDC_RegisterInterface>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d001      	beq.n	8008e70 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008e6c:	f7f8 fcee 	bl	800184c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008e70:	4805      	ldr	r0, [pc, #20]	; (8008e88 <MX_USB_DEVICE_Init+0x54>)
 8008e72:	f7fe ff30 	bl	8007cd6 <USBD_Start>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d001      	beq.n	8008e80 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008e7c:	f7f8 fce6 	bl	800184c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008e80:	bf00      	nop
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	2000013c 	.word	0x2000013c
 8008e88:	200004c0 	.word	0x200004c0
 8008e8c:	2000001c 	.word	0x2000001c
 8008e90:	20000128 	.word	0x20000128

08008e94 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008e98:	2200      	movs	r2, #0
 8008e9a:	4905      	ldr	r1, [pc, #20]	; (8008eb0 <CDC_Init_FS+0x1c>)
 8008e9c:	4805      	ldr	r0, [pc, #20]	; (8008eb4 <CDC_Init_FS+0x20>)
 8008e9e:	f7fe fe3c 	bl	8007b1a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008ea2:	4905      	ldr	r1, [pc, #20]	; (8008eb8 <CDC_Init_FS+0x24>)
 8008ea4:	4803      	ldr	r0, [pc, #12]	; (8008eb4 <CDC_Init_FS+0x20>)
 8008ea6:	f7fe fe51 	bl	8007b4c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008eaa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	20000f90 	.word	0x20000f90
 8008eb4:	200004c0 	.word	0x200004c0
 8008eb8:	20000790 	.word	0x20000790

08008ebc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008ec0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	6039      	str	r1, [r7, #0]
 8008ed6:	71fb      	strb	r3, [r7, #7]
 8008ed8:	4613      	mov	r3, r2
 8008eda:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008edc:	79fb      	ldrb	r3, [r7, #7]
 8008ede:	2b23      	cmp	r3, #35	; 0x23
 8008ee0:	d85c      	bhi.n	8008f9c <CDC_Control_FS+0xd0>
 8008ee2:	a201      	add	r2, pc, #4	; (adr r2, 8008ee8 <CDC_Control_FS+0x1c>)
 8008ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee8:	08008f9d 	.word	0x08008f9d
 8008eec:	08008f9d 	.word	0x08008f9d
 8008ef0:	08008f9d 	.word	0x08008f9d
 8008ef4:	08008f9d 	.word	0x08008f9d
 8008ef8:	08008f9d 	.word	0x08008f9d
 8008efc:	08008f9d 	.word	0x08008f9d
 8008f00:	08008f9d 	.word	0x08008f9d
 8008f04:	08008f9d 	.word	0x08008f9d
 8008f08:	08008f9d 	.word	0x08008f9d
 8008f0c:	08008f9d 	.word	0x08008f9d
 8008f10:	08008f9d 	.word	0x08008f9d
 8008f14:	08008f9d 	.word	0x08008f9d
 8008f18:	08008f9d 	.word	0x08008f9d
 8008f1c:	08008f9d 	.word	0x08008f9d
 8008f20:	08008f9d 	.word	0x08008f9d
 8008f24:	08008f9d 	.word	0x08008f9d
 8008f28:	08008f9d 	.word	0x08008f9d
 8008f2c:	08008f9d 	.word	0x08008f9d
 8008f30:	08008f9d 	.word	0x08008f9d
 8008f34:	08008f9d 	.word	0x08008f9d
 8008f38:	08008f9d 	.word	0x08008f9d
 8008f3c:	08008f9d 	.word	0x08008f9d
 8008f40:	08008f9d 	.word	0x08008f9d
 8008f44:	08008f9d 	.word	0x08008f9d
 8008f48:	08008f9d 	.word	0x08008f9d
 8008f4c:	08008f9d 	.word	0x08008f9d
 8008f50:	08008f9d 	.word	0x08008f9d
 8008f54:	08008f9d 	.word	0x08008f9d
 8008f58:	08008f9d 	.word	0x08008f9d
 8008f5c:	08008f9d 	.word	0x08008f9d
 8008f60:	08008f9d 	.word	0x08008f9d
 8008f64:	08008f9d 	.word	0x08008f9d
 8008f68:	08008f79 	.word	0x08008f79
 8008f6c:	08008f8b 	.word	0x08008f8b
 8008f70:	08008f9d 	.word	0x08008f9d
 8008f74:	08008f9d 	.word	0x08008f9d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8008f78:	4b0c      	ldr	r3, [pc, #48]	; (8008fac <CDC_Control_FS+0xe0>)
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	6810      	ldr	r0, [r2, #0]
 8008f7e:	6018      	str	r0, [r3, #0]
 8008f80:	8891      	ldrh	r1, [r2, #4]
 8008f82:	7992      	ldrb	r2, [r2, #6]
 8008f84:	8099      	strh	r1, [r3, #4]
 8008f86:	719a      	strb	r2, [r3, #6]
    break;
 8008f88:	e009      	b.n	8008f9e <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
        memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	4a07      	ldr	r2, [pc, #28]	; (8008fac <CDC_Control_FS+0xe0>)
 8008f8e:	6810      	ldr	r0, [r2, #0]
 8008f90:	6018      	str	r0, [r3, #0]
 8008f92:	8891      	ldrh	r1, [r2, #4]
 8008f94:	7992      	ldrb	r2, [r2, #6]
 8008f96:	8099      	strh	r1, [r3, #4]
 8008f98:	719a      	strb	r2, [r3, #6]
    break;
 8008f9a:	e000      	b.n	8008f9e <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008f9c:	bf00      	nop
  }

  return (USBD_OK);
 8008f9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	20000120 	.word	0x20000120

08008fb0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008fba:	6879      	ldr	r1, [r7, #4]
 8008fbc:	4805      	ldr	r0, [pc, #20]	; (8008fd4 <CDC_Receive_FS+0x24>)
 8008fbe:	f7fe fdc5 	bl	8007b4c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008fc2:	4804      	ldr	r0, [pc, #16]	; (8008fd4 <CDC_Receive_FS+0x24>)
 8008fc4:	f7fe fe06 	bl	8007bd4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008fc8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	200004c0 	.word	0x200004c0

08008fd8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008fe8:	4b0d      	ldr	r3, [pc, #52]	; (8009020 <CDC_Transmit_FS+0x48>)
 8008fea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e00b      	b.n	8009016 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008ffe:	887b      	ldrh	r3, [r7, #2]
 8009000:	461a      	mov	r2, r3
 8009002:	6879      	ldr	r1, [r7, #4]
 8009004:	4806      	ldr	r0, [pc, #24]	; (8009020 <CDC_Transmit_FS+0x48>)
 8009006:	f7fe fd88 	bl	8007b1a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800900a:	4805      	ldr	r0, [pc, #20]	; (8009020 <CDC_Transmit_FS+0x48>)
 800900c:	f7fe fdb2 	bl	8007b74 <USBD_CDC_TransmitPacket>
 8009010:	4603      	mov	r3, r0
 8009012:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009014:	7bfb      	ldrb	r3, [r7, #15]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	200004c0 	.word	0x200004c0

08009024 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009024:	b480      	push	{r7}
 8009026:	b087      	sub	sp, #28
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	4613      	mov	r3, r2
 8009030:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009036:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800903a:	4618      	mov	r0, r3
 800903c:	371c      	adds	r7, #28
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
	...

08009048 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	4603      	mov	r3, r0
 8009050:	6039      	str	r1, [r7, #0]
 8009052:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	2212      	movs	r2, #18
 8009058:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800905a:	4b03      	ldr	r3, [pc, #12]	; (8009068 <USBD_FS_DeviceDescriptor+0x20>)
}
 800905c:	4618      	mov	r0, r3
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	20000158 	.word	0x20000158

0800906c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	4603      	mov	r3, r0
 8009074:	6039      	str	r1, [r7, #0]
 8009076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	2204      	movs	r2, #4
 800907c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800907e:	4b03      	ldr	r3, [pc, #12]	; (800908c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009080:	4618      	mov	r0, r3
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr
 800908c:	2000016c 	.word	0x2000016c

08009090 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	4603      	mov	r3, r0
 8009098:	6039      	str	r1, [r7, #0]
 800909a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800909c:	79fb      	ldrb	r3, [r7, #7]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d105      	bne.n	80090ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	4907      	ldr	r1, [pc, #28]	; (80090c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80090a6:	4808      	ldr	r0, [pc, #32]	; (80090c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80090a8:	f7ff fde3 	bl	8008c72 <USBD_GetString>
 80090ac:	e004      	b.n	80090b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090ae:	683a      	ldr	r2, [r7, #0]
 80090b0:	4904      	ldr	r1, [pc, #16]	; (80090c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80090b2:	4805      	ldr	r0, [pc, #20]	; (80090c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80090b4:	f7ff fddd 	bl	8008c72 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090b8:	4b02      	ldr	r3, [pc, #8]	; (80090c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	20001790 	.word	0x20001790
 80090c8:	0800ba28 	.word	0x0800ba28

080090cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	4603      	mov	r3, r0
 80090d4:	6039      	str	r1, [r7, #0]
 80090d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80090d8:	683a      	ldr	r2, [r7, #0]
 80090da:	4904      	ldr	r1, [pc, #16]	; (80090ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80090dc:	4804      	ldr	r0, [pc, #16]	; (80090f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80090de:	f7ff fdc8 	bl	8008c72 <USBD_GetString>
  return USBD_StrDesc;
 80090e2:	4b02      	ldr	r3, [pc, #8]	; (80090ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	20001790 	.word	0x20001790
 80090f0:	0800ba40 	.word	0x0800ba40

080090f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	4603      	mov	r3, r0
 80090fc:	6039      	str	r1, [r7, #0]
 80090fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	221a      	movs	r2, #26
 8009104:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009106:	f000 f843 	bl	8009190 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800910a:	4b02      	ldr	r3, [pc, #8]	; (8009114 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800910c:	4618      	mov	r0, r3
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	20000170 	.word	0x20000170

08009118 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	4603      	mov	r3, r0
 8009120:	6039      	str	r1, [r7, #0]
 8009122:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009124:	79fb      	ldrb	r3, [r7, #7]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d105      	bne.n	8009136 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	4907      	ldr	r1, [pc, #28]	; (800914c <USBD_FS_ConfigStrDescriptor+0x34>)
 800912e:	4808      	ldr	r0, [pc, #32]	; (8009150 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009130:	f7ff fd9f 	bl	8008c72 <USBD_GetString>
 8009134:	e004      	b.n	8009140 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	4904      	ldr	r1, [pc, #16]	; (800914c <USBD_FS_ConfigStrDescriptor+0x34>)
 800913a:	4805      	ldr	r0, [pc, #20]	; (8009150 <USBD_FS_ConfigStrDescriptor+0x38>)
 800913c:	f7ff fd99 	bl	8008c72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009140:	4b02      	ldr	r3, [pc, #8]	; (800914c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009142:	4618      	mov	r0, r3
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	20001790 	.word	0x20001790
 8009150:	0800ba54 	.word	0x0800ba54

08009154 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	4603      	mov	r3, r0
 800915c:	6039      	str	r1, [r7, #0]
 800915e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009160:	79fb      	ldrb	r3, [r7, #7]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d105      	bne.n	8009172 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009166:	683a      	ldr	r2, [r7, #0]
 8009168:	4907      	ldr	r1, [pc, #28]	; (8009188 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800916a:	4808      	ldr	r0, [pc, #32]	; (800918c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800916c:	f7ff fd81 	bl	8008c72 <USBD_GetString>
 8009170:	e004      	b.n	800917c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	4904      	ldr	r1, [pc, #16]	; (8009188 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009176:	4805      	ldr	r0, [pc, #20]	; (800918c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009178:	f7ff fd7b 	bl	8008c72 <USBD_GetString>
  }
  return USBD_StrDesc;
 800917c:	4b02      	ldr	r3, [pc, #8]	; (8009188 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800917e:	4618      	mov	r0, r3
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	20001790 	.word	0x20001790
 800918c:	0800ba60 	.word	0x0800ba60

08009190 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009196:	4b0f      	ldr	r3, [pc, #60]	; (80091d4 <Get_SerialNum+0x44>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800919c:	4b0e      	ldr	r3, [pc, #56]	; (80091d8 <Get_SerialNum+0x48>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80091a2:	4b0e      	ldr	r3, [pc, #56]	; (80091dc <Get_SerialNum+0x4c>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4413      	add	r3, r2
 80091ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d009      	beq.n	80091ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80091b6:	2208      	movs	r2, #8
 80091b8:	4909      	ldr	r1, [pc, #36]	; (80091e0 <Get_SerialNum+0x50>)
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	f000 f814 	bl	80091e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80091c0:	2204      	movs	r2, #4
 80091c2:	4908      	ldr	r1, [pc, #32]	; (80091e4 <Get_SerialNum+0x54>)
 80091c4:	68b8      	ldr	r0, [r7, #8]
 80091c6:	f000 f80f 	bl	80091e8 <IntToUnicode>
  }
}
 80091ca:	bf00      	nop
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	1fff7a10 	.word	0x1fff7a10
 80091d8:	1fff7a14 	.word	0x1fff7a14
 80091dc:	1fff7a18 	.word	0x1fff7a18
 80091e0:	20000172 	.word	0x20000172
 80091e4:	20000182 	.word	0x20000182

080091e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b087      	sub	sp, #28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	4613      	mov	r3, r2
 80091f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80091f6:	2300      	movs	r3, #0
 80091f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80091fa:	2300      	movs	r3, #0
 80091fc:	75fb      	strb	r3, [r7, #23]
 80091fe:	e027      	b.n	8009250 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	0f1b      	lsrs	r3, r3, #28
 8009204:	2b09      	cmp	r3, #9
 8009206:	d80b      	bhi.n	8009220 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	0f1b      	lsrs	r3, r3, #28
 800920c:	b2da      	uxtb	r2, r3
 800920e:	7dfb      	ldrb	r3, [r7, #23]
 8009210:	005b      	lsls	r3, r3, #1
 8009212:	4619      	mov	r1, r3
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	440b      	add	r3, r1
 8009218:	3230      	adds	r2, #48	; 0x30
 800921a:	b2d2      	uxtb	r2, r2
 800921c:	701a      	strb	r2, [r3, #0]
 800921e:	e00a      	b.n	8009236 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	0f1b      	lsrs	r3, r3, #28
 8009224:	b2da      	uxtb	r2, r3
 8009226:	7dfb      	ldrb	r3, [r7, #23]
 8009228:	005b      	lsls	r3, r3, #1
 800922a:	4619      	mov	r1, r3
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	440b      	add	r3, r1
 8009230:	3237      	adds	r2, #55	; 0x37
 8009232:	b2d2      	uxtb	r2, r2
 8009234:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	011b      	lsls	r3, r3, #4
 800923a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800923c:	7dfb      	ldrb	r3, [r7, #23]
 800923e:	005b      	lsls	r3, r3, #1
 8009240:	3301      	adds	r3, #1
 8009242:	68ba      	ldr	r2, [r7, #8]
 8009244:	4413      	add	r3, r2
 8009246:	2200      	movs	r2, #0
 8009248:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800924a:	7dfb      	ldrb	r3, [r7, #23]
 800924c:	3301      	adds	r3, #1
 800924e:	75fb      	strb	r3, [r7, #23]
 8009250:	7dfa      	ldrb	r2, [r7, #23]
 8009252:	79fb      	ldrb	r3, [r7, #7]
 8009254:	429a      	cmp	r2, r3
 8009256:	d3d3      	bcc.n	8009200 <IntToUnicode+0x18>
  }
}
 8009258:	bf00      	nop
 800925a:	371c      	adds	r7, #28
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b08a      	sub	sp, #40	; 0x28
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800926c:	f107 0314 	add.w	r3, r7, #20
 8009270:	2200      	movs	r2, #0
 8009272:	601a      	str	r2, [r3, #0]
 8009274:	605a      	str	r2, [r3, #4]
 8009276:	609a      	str	r2, [r3, #8]
 8009278:	60da      	str	r2, [r3, #12]
 800927a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009284:	d13a      	bne.n	80092fc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009286:	2300      	movs	r3, #0
 8009288:	613b      	str	r3, [r7, #16]
 800928a:	4b1e      	ldr	r3, [pc, #120]	; (8009304 <HAL_PCD_MspInit+0xa0>)
 800928c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928e:	4a1d      	ldr	r2, [pc, #116]	; (8009304 <HAL_PCD_MspInit+0xa0>)
 8009290:	f043 0301 	orr.w	r3, r3, #1
 8009294:	6313      	str	r3, [r2, #48]	; 0x30
 8009296:	4b1b      	ldr	r3, [pc, #108]	; (8009304 <HAL_PCD_MspInit+0xa0>)
 8009298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800929a:	f003 0301 	and.w	r3, r3, #1
 800929e:	613b      	str	r3, [r7, #16]
 80092a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80092a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80092a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092a8:	2302      	movs	r3, #2
 80092aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092ac:	2300      	movs	r3, #0
 80092ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092b0:	2303      	movs	r3, #3
 80092b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80092b4:	230a      	movs	r3, #10
 80092b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092b8:	f107 0314 	add.w	r3, r7, #20
 80092bc:	4619      	mov	r1, r3
 80092be:	4812      	ldr	r0, [pc, #72]	; (8009308 <HAL_PCD_MspInit+0xa4>)
 80092c0:	f7f9 fc96 	bl	8002bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80092c4:	4b0f      	ldr	r3, [pc, #60]	; (8009304 <HAL_PCD_MspInit+0xa0>)
 80092c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c8:	4a0e      	ldr	r2, [pc, #56]	; (8009304 <HAL_PCD_MspInit+0xa0>)
 80092ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092ce:	6353      	str	r3, [r2, #52]	; 0x34
 80092d0:	2300      	movs	r3, #0
 80092d2:	60fb      	str	r3, [r7, #12]
 80092d4:	4b0b      	ldr	r3, [pc, #44]	; (8009304 <HAL_PCD_MspInit+0xa0>)
 80092d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092d8:	4a0a      	ldr	r2, [pc, #40]	; (8009304 <HAL_PCD_MspInit+0xa0>)
 80092da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092de:	6453      	str	r3, [r2, #68]	; 0x44
 80092e0:	4b08      	ldr	r3, [pc, #32]	; (8009304 <HAL_PCD_MspInit+0xa0>)
 80092e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092e8:	60fb      	str	r3, [r7, #12]
 80092ea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80092ec:	2200      	movs	r2, #0
 80092ee:	2100      	movs	r1, #0
 80092f0:	2043      	movs	r0, #67	; 0x43
 80092f2:	f7f9 fc46 	bl	8002b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80092f6:	2043      	movs	r0, #67	; 0x43
 80092f8:	f7f9 fc5f 	bl	8002bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80092fc:	bf00      	nop
 80092fe:	3728      	adds	r7, #40	; 0x28
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	40023800 	.word	0x40023800
 8009308:	40020000 	.word	0x40020000

0800930c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009320:	4619      	mov	r1, r3
 8009322:	4610      	mov	r0, r2
 8009324:	f7fe fd22 	bl	8007d6c <USBD_LL_SetupStage>
}
 8009328:	bf00      	nop
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009342:	78fa      	ldrb	r2, [r7, #3]
 8009344:	6879      	ldr	r1, [r7, #4]
 8009346:	4613      	mov	r3, r2
 8009348:	00db      	lsls	r3, r3, #3
 800934a:	1a9b      	subs	r3, r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	440b      	add	r3, r1
 8009350:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	78fb      	ldrb	r3, [r7, #3]
 8009358:	4619      	mov	r1, r3
 800935a:	f7fe fd5a 	bl	8007e12 <USBD_LL_DataOutStage>
}
 800935e:	bf00      	nop
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b082      	sub	sp, #8
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
 800936e:	460b      	mov	r3, r1
 8009370:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009378:	78fa      	ldrb	r2, [r7, #3]
 800937a:	6879      	ldr	r1, [r7, #4]
 800937c:	4613      	mov	r3, r2
 800937e:	00db      	lsls	r3, r3, #3
 8009380:	1a9b      	subs	r3, r3, r2
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	440b      	add	r3, r1
 8009386:	3348      	adds	r3, #72	; 0x48
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	78fb      	ldrb	r3, [r7, #3]
 800938c:	4619      	mov	r1, r3
 800938e:	f7fe fda3 	bl	8007ed8 <USBD_LL_DataInStage>
}
 8009392:	bf00      	nop
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b082      	sub	sp, #8
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fe fea7 	bl	80080fc <USBD_LL_SOF>
}
 80093ae:	bf00      	nop
 80093b0:	3708      	adds	r7, #8
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b084      	sub	sp, #16
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80093be:	2301      	movs	r3, #1
 80093c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d001      	beq.n	80093ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80093ca:	f7f8 fa3f 	bl	800184c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093d4:	7bfa      	ldrb	r2, [r7, #15]
 80093d6:	4611      	mov	r1, r2
 80093d8:	4618      	mov	r0, r3
 80093da:	f7fe fe54 	bl	8008086 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7fe fe0d 	bl	8008004 <USBD_LL_Reset>
}
 80093ea:	bf00      	nop
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
	...

080093f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009402:	4618      	mov	r0, r3
 8009404:	f7fe fe4f 	bl	80080a6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	6812      	ldr	r2, [r2, #0]
 8009416:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800941a:	f043 0301 	orr.w	r3, r3, #1
 800941e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a1b      	ldr	r3, [r3, #32]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d005      	beq.n	8009434 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009428:	4b04      	ldr	r3, [pc, #16]	; (800943c <HAL_PCD_SuspendCallback+0x48>)
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	4a03      	ldr	r2, [pc, #12]	; (800943c <HAL_PCD_SuspendCallback+0x48>)
 800942e:	f043 0306 	orr.w	r3, r3, #6
 8009432:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009434:	bf00      	nop
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	e000ed00 	.word	0xe000ed00

08009440 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800944e:	4618      	mov	r0, r3
 8009450:	f7fe fe3e 	bl	80080d0 <USBD_LL_Resume>
}
 8009454:	bf00      	nop
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	460b      	mov	r3, r1
 8009466:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800946e:	78fa      	ldrb	r2, [r7, #3]
 8009470:	4611      	mov	r1, r2
 8009472:	4618      	mov	r0, r3
 8009474:	f7fe fe69 	bl	800814a <USBD_LL_IsoOUTIncomplete>
}
 8009478:	bf00      	nop
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	460b      	mov	r3, r1
 800948a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009492:	78fa      	ldrb	r2, [r7, #3]
 8009494:	4611      	mov	r1, r2
 8009496:	4618      	mov	r0, r3
 8009498:	f7fe fe4a 	bl	8008130 <USBD_LL_IsoINIncomplete>
}
 800949c:	bf00      	nop
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fe fe56 	bl	8008164 <USBD_LL_DevConnected>
}
 80094b8:	bf00      	nop
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fe fe53 	bl	800817a <USBD_LL_DevDisconnected>
}
 80094d4:	bf00      	nop
 80094d6:	3708      	adds	r7, #8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d13c      	bne.n	8009566 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80094ec:	4a20      	ldr	r2, [pc, #128]	; (8009570 <USBD_LL_Init+0x94>)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a1e      	ldr	r2, [pc, #120]	; (8009570 <USBD_LL_Init+0x94>)
 80094f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80094fc:	4b1c      	ldr	r3, [pc, #112]	; (8009570 <USBD_LL_Init+0x94>)
 80094fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009502:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009504:	4b1a      	ldr	r3, [pc, #104]	; (8009570 <USBD_LL_Init+0x94>)
 8009506:	2204      	movs	r2, #4
 8009508:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800950a:	4b19      	ldr	r3, [pc, #100]	; (8009570 <USBD_LL_Init+0x94>)
 800950c:	2202      	movs	r2, #2
 800950e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009510:	4b17      	ldr	r3, [pc, #92]	; (8009570 <USBD_LL_Init+0x94>)
 8009512:	2200      	movs	r2, #0
 8009514:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009516:	4b16      	ldr	r3, [pc, #88]	; (8009570 <USBD_LL_Init+0x94>)
 8009518:	2202      	movs	r2, #2
 800951a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800951c:	4b14      	ldr	r3, [pc, #80]	; (8009570 <USBD_LL_Init+0x94>)
 800951e:	2200      	movs	r2, #0
 8009520:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009522:	4b13      	ldr	r3, [pc, #76]	; (8009570 <USBD_LL_Init+0x94>)
 8009524:	2200      	movs	r2, #0
 8009526:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009528:	4b11      	ldr	r3, [pc, #68]	; (8009570 <USBD_LL_Init+0x94>)
 800952a:	2200      	movs	r2, #0
 800952c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800952e:	4b10      	ldr	r3, [pc, #64]	; (8009570 <USBD_LL_Init+0x94>)
 8009530:	2200      	movs	r2, #0
 8009532:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009534:	4b0e      	ldr	r3, [pc, #56]	; (8009570 <USBD_LL_Init+0x94>)
 8009536:	2200      	movs	r2, #0
 8009538:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800953a:	480d      	ldr	r0, [pc, #52]	; (8009570 <USBD_LL_Init+0x94>)
 800953c:	f7f9 fe44 	bl	80031c8 <HAL_PCD_Init>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009546:	f7f8 f981 	bl	800184c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800954a:	2180      	movs	r1, #128	; 0x80
 800954c:	4808      	ldr	r0, [pc, #32]	; (8009570 <USBD_LL_Init+0x94>)
 800954e:	f7fa ffa2 	bl	8004496 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009552:	2240      	movs	r2, #64	; 0x40
 8009554:	2100      	movs	r1, #0
 8009556:	4806      	ldr	r0, [pc, #24]	; (8009570 <USBD_LL_Init+0x94>)
 8009558:	f7fa ff56 	bl	8004408 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800955c:	2280      	movs	r2, #128	; 0x80
 800955e:	2101      	movs	r1, #1
 8009560:	4803      	ldr	r0, [pc, #12]	; (8009570 <USBD_LL_Init+0x94>)
 8009562:	f7fa ff51 	bl	8004408 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3708      	adds	r7, #8
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	20001990 	.word	0x20001990

08009574 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800958a:	4618      	mov	r0, r3
 800958c:	f7f9 ff39 	bl	8003402 <HAL_PCD_Start>
 8009590:	4603      	mov	r3, r0
 8009592:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009594:	7bfb      	ldrb	r3, [r7, #15]
 8009596:	4618      	mov	r0, r3
 8009598:	f000 f92a 	bl	80097f0 <USBD_Get_USB_Status>
 800959c:	4603      	mov	r3, r0
 800959e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b084      	sub	sp, #16
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
 80095b2:	4608      	mov	r0, r1
 80095b4:	4611      	mov	r1, r2
 80095b6:	461a      	mov	r2, r3
 80095b8:	4603      	mov	r3, r0
 80095ba:	70fb      	strb	r3, [r7, #3]
 80095bc:	460b      	mov	r3, r1
 80095be:	70bb      	strb	r3, [r7, #2]
 80095c0:	4613      	mov	r3, r2
 80095c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095c4:	2300      	movs	r3, #0
 80095c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095c8:	2300      	movs	r3, #0
 80095ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80095d2:	78bb      	ldrb	r3, [r7, #2]
 80095d4:	883a      	ldrh	r2, [r7, #0]
 80095d6:	78f9      	ldrb	r1, [r7, #3]
 80095d8:	f7fa fb1d 	bl	8003c16 <HAL_PCD_EP_Open>
 80095dc:	4603      	mov	r3, r0
 80095de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095e0:	7bfb      	ldrb	r3, [r7, #15]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 f904 	bl	80097f0 <USBD_Get_USB_Status>
 80095e8:	4603      	mov	r3, r0
 80095ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b084      	sub	sp, #16
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
 80095fe:	460b      	mov	r3, r1
 8009600:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009606:	2300      	movs	r3, #0
 8009608:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009610:	78fa      	ldrb	r2, [r7, #3]
 8009612:	4611      	mov	r1, r2
 8009614:	4618      	mov	r0, r3
 8009616:	f7fa fb66 	bl	8003ce6 <HAL_PCD_EP_Close>
 800961a:	4603      	mov	r3, r0
 800961c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800961e:	7bfb      	ldrb	r3, [r7, #15]
 8009620:	4618      	mov	r0, r3
 8009622:	f000 f8e5 	bl	80097f0 <USBD_Get_USB_Status>
 8009626:	4603      	mov	r3, r0
 8009628:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800962a:	7bbb      	ldrb	r3, [r7, #14]
}
 800962c:	4618      	mov	r0, r3
 800962e:	3710      	adds	r7, #16
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	460b      	mov	r3, r1
 800963e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009644:	2300      	movs	r3, #0
 8009646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800964e:	78fa      	ldrb	r2, [r7, #3]
 8009650:	4611      	mov	r1, r2
 8009652:	4618      	mov	r0, r3
 8009654:	f7fa fc3e 	bl	8003ed4 <HAL_PCD_EP_SetStall>
 8009658:	4603      	mov	r3, r0
 800965a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800965c:	7bfb      	ldrb	r3, [r7, #15]
 800965e:	4618      	mov	r0, r3
 8009660:	f000 f8c6 	bl	80097f0 <USBD_Get_USB_Status>
 8009664:	4603      	mov	r3, r0
 8009666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009668:	7bbb      	ldrb	r3, [r7, #14]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b084      	sub	sp, #16
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
 800967a:	460b      	mov	r3, r1
 800967c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800967e:	2300      	movs	r3, #0
 8009680:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800968c:	78fa      	ldrb	r2, [r7, #3]
 800968e:	4611      	mov	r1, r2
 8009690:	4618      	mov	r0, r3
 8009692:	f7fa fc83 	bl	8003f9c <HAL_PCD_EP_ClrStall>
 8009696:	4603      	mov	r3, r0
 8009698:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800969a:	7bfb      	ldrb	r3, [r7, #15]
 800969c:	4618      	mov	r0, r3
 800969e:	f000 f8a7 	bl	80097f0 <USBD_Get_USB_Status>
 80096a2:	4603      	mov	r3, r0
 80096a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	460b      	mov	r3, r1
 80096ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80096c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80096c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	da0b      	bge.n	80096e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80096cc:	78fb      	ldrb	r3, [r7, #3]
 80096ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096d2:	68f9      	ldr	r1, [r7, #12]
 80096d4:	4613      	mov	r3, r2
 80096d6:	00db      	lsls	r3, r3, #3
 80096d8:	1a9b      	subs	r3, r3, r2
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	440b      	add	r3, r1
 80096de:	333e      	adds	r3, #62	; 0x3e
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	e00b      	b.n	80096fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80096e4:	78fb      	ldrb	r3, [r7, #3]
 80096e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096ea:	68f9      	ldr	r1, [r7, #12]
 80096ec:	4613      	mov	r3, r2
 80096ee:	00db      	lsls	r3, r3, #3
 80096f0:	1a9b      	subs	r3, r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	440b      	add	r3, r1
 80096f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80096fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3714      	adds	r7, #20
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	460b      	mov	r3, r1
 8009712:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009718:	2300      	movs	r3, #0
 800971a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009722:	78fa      	ldrb	r2, [r7, #3]
 8009724:	4611      	mov	r1, r2
 8009726:	4618      	mov	r0, r3
 8009728:	f7fa fa50 	bl	8003bcc <HAL_PCD_SetAddress>
 800972c:	4603      	mov	r3, r0
 800972e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009730:	7bfb      	ldrb	r3, [r7, #15]
 8009732:	4618      	mov	r0, r3
 8009734:	f000 f85c 	bl	80097f0 <USBD_Get_USB_Status>
 8009738:	4603      	mov	r3, r0
 800973a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800973c:	7bbb      	ldrb	r3, [r7, #14]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b086      	sub	sp, #24
 800974a:	af00      	add	r7, sp, #0
 800974c:	60f8      	str	r0, [r7, #12]
 800974e:	607a      	str	r2, [r7, #4]
 8009750:	603b      	str	r3, [r7, #0]
 8009752:	460b      	mov	r3, r1
 8009754:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009764:	7af9      	ldrb	r1, [r7, #11]
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	f7fa fb69 	bl	8003e40 <HAL_PCD_EP_Transmit>
 800976e:	4603      	mov	r3, r0
 8009770:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009772:	7dfb      	ldrb	r3, [r7, #23]
 8009774:	4618      	mov	r0, r3
 8009776:	f000 f83b 	bl	80097f0 <USBD_Get_USB_Status>
 800977a:	4603      	mov	r3, r0
 800977c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800977e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009780:	4618      	mov	r0, r3
 8009782:	3718      	adds	r7, #24
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b086      	sub	sp, #24
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	607a      	str	r2, [r7, #4]
 8009792:	603b      	str	r3, [r7, #0]
 8009794:	460b      	mov	r3, r1
 8009796:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009798:	2300      	movs	r3, #0
 800979a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800979c:	2300      	movs	r3, #0
 800979e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80097a6:	7af9      	ldrb	r1, [r7, #11]
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	f7fa fae5 	bl	8003d7a <HAL_PCD_EP_Receive>
 80097b0:	4603      	mov	r3, r0
 80097b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097b4:	7dfb      	ldrb	r3, [r7, #23]
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 f81a 	bl	80097f0 <USBD_Get_USB_Status>
 80097bc:	4603      	mov	r3, r0
 80097be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80097c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3718      	adds	r7, #24
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b082      	sub	sp, #8
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	460b      	mov	r3, r1
 80097d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097dc:	78fa      	ldrb	r2, [r7, #3]
 80097de:	4611      	mov	r1, r2
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7fa fb15 	bl	8003e10 <HAL_PCD_EP_GetRxCount>
 80097e6:	4603      	mov	r3, r0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	4603      	mov	r3, r0
 80097f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80097fe:	79fb      	ldrb	r3, [r7, #7]
 8009800:	2b03      	cmp	r3, #3
 8009802:	d817      	bhi.n	8009834 <USBD_Get_USB_Status+0x44>
 8009804:	a201      	add	r2, pc, #4	; (adr r2, 800980c <USBD_Get_USB_Status+0x1c>)
 8009806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980a:	bf00      	nop
 800980c:	0800981d 	.word	0x0800981d
 8009810:	08009823 	.word	0x08009823
 8009814:	08009829 	.word	0x08009829
 8009818:	0800982f 	.word	0x0800982f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	73fb      	strb	r3, [r7, #15]
    break;
 8009820:	e00b      	b.n	800983a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009822:	2303      	movs	r3, #3
 8009824:	73fb      	strb	r3, [r7, #15]
    break;
 8009826:	e008      	b.n	800983a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009828:	2301      	movs	r3, #1
 800982a:	73fb      	strb	r3, [r7, #15]
    break;
 800982c:	e005      	b.n	800983a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800982e:	2303      	movs	r3, #3
 8009830:	73fb      	strb	r3, [r7, #15]
    break;
 8009832:	e002      	b.n	800983a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009834:	2303      	movs	r3, #3
 8009836:	73fb      	strb	r3, [r7, #15]
    break;
 8009838:	bf00      	nop
  }
  return usb_status;
 800983a:	7bfb      	ldrb	r3, [r7, #15]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3714      	adds	r7, #20
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <__errno>:
 8009848:	4b01      	ldr	r3, [pc, #4]	; (8009850 <__errno+0x8>)
 800984a:	6818      	ldr	r0, [r3, #0]
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	2000018c 	.word	0x2000018c

08009854 <__libc_init_array>:
 8009854:	b570      	push	{r4, r5, r6, lr}
 8009856:	4e0d      	ldr	r6, [pc, #52]	; (800988c <__libc_init_array+0x38>)
 8009858:	4c0d      	ldr	r4, [pc, #52]	; (8009890 <__libc_init_array+0x3c>)
 800985a:	1ba4      	subs	r4, r4, r6
 800985c:	10a4      	asrs	r4, r4, #2
 800985e:	2500      	movs	r5, #0
 8009860:	42a5      	cmp	r5, r4
 8009862:	d109      	bne.n	8009878 <__libc_init_array+0x24>
 8009864:	4e0b      	ldr	r6, [pc, #44]	; (8009894 <__libc_init_array+0x40>)
 8009866:	4c0c      	ldr	r4, [pc, #48]	; (8009898 <__libc_init_array+0x44>)
 8009868:	f002 f87a 	bl	800b960 <_init>
 800986c:	1ba4      	subs	r4, r4, r6
 800986e:	10a4      	asrs	r4, r4, #2
 8009870:	2500      	movs	r5, #0
 8009872:	42a5      	cmp	r5, r4
 8009874:	d105      	bne.n	8009882 <__libc_init_array+0x2e>
 8009876:	bd70      	pop	{r4, r5, r6, pc}
 8009878:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800987c:	4798      	blx	r3
 800987e:	3501      	adds	r5, #1
 8009880:	e7ee      	b.n	8009860 <__libc_init_array+0xc>
 8009882:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009886:	4798      	blx	r3
 8009888:	3501      	adds	r5, #1
 800988a:	e7f2      	b.n	8009872 <__libc_init_array+0x1e>
 800988c:	0800bd50 	.word	0x0800bd50
 8009890:	0800bd50 	.word	0x0800bd50
 8009894:	0800bd50 	.word	0x0800bd50
 8009898:	0800bd54 	.word	0x0800bd54

0800989c <malloc>:
 800989c:	4b02      	ldr	r3, [pc, #8]	; (80098a8 <malloc+0xc>)
 800989e:	4601      	mov	r1, r0
 80098a0:	6818      	ldr	r0, [r3, #0]
 80098a2:	f000 b861 	b.w	8009968 <_malloc_r>
 80098a6:	bf00      	nop
 80098a8:	2000018c 	.word	0x2000018c

080098ac <free>:
 80098ac:	4b02      	ldr	r3, [pc, #8]	; (80098b8 <free+0xc>)
 80098ae:	4601      	mov	r1, r0
 80098b0:	6818      	ldr	r0, [r3, #0]
 80098b2:	f000 b80b 	b.w	80098cc <_free_r>
 80098b6:	bf00      	nop
 80098b8:	2000018c 	.word	0x2000018c

080098bc <memset>:
 80098bc:	4402      	add	r2, r0
 80098be:	4603      	mov	r3, r0
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d100      	bne.n	80098c6 <memset+0xa>
 80098c4:	4770      	bx	lr
 80098c6:	f803 1b01 	strb.w	r1, [r3], #1
 80098ca:	e7f9      	b.n	80098c0 <memset+0x4>

080098cc <_free_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	4605      	mov	r5, r0
 80098d0:	2900      	cmp	r1, #0
 80098d2:	d045      	beq.n	8009960 <_free_r+0x94>
 80098d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098d8:	1f0c      	subs	r4, r1, #4
 80098da:	2b00      	cmp	r3, #0
 80098dc:	bfb8      	it	lt
 80098de:	18e4      	addlt	r4, r4, r3
 80098e0:	f001 fb9b 	bl	800b01a <__malloc_lock>
 80098e4:	4a1f      	ldr	r2, [pc, #124]	; (8009964 <_free_r+0x98>)
 80098e6:	6813      	ldr	r3, [r2, #0]
 80098e8:	4610      	mov	r0, r2
 80098ea:	b933      	cbnz	r3, 80098fa <_free_r+0x2e>
 80098ec:	6063      	str	r3, [r4, #4]
 80098ee:	6014      	str	r4, [r2, #0]
 80098f0:	4628      	mov	r0, r5
 80098f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098f6:	f001 bb91 	b.w	800b01c <__malloc_unlock>
 80098fa:	42a3      	cmp	r3, r4
 80098fc:	d90c      	bls.n	8009918 <_free_r+0x4c>
 80098fe:	6821      	ldr	r1, [r4, #0]
 8009900:	1862      	adds	r2, r4, r1
 8009902:	4293      	cmp	r3, r2
 8009904:	bf04      	itt	eq
 8009906:	681a      	ldreq	r2, [r3, #0]
 8009908:	685b      	ldreq	r3, [r3, #4]
 800990a:	6063      	str	r3, [r4, #4]
 800990c:	bf04      	itt	eq
 800990e:	1852      	addeq	r2, r2, r1
 8009910:	6022      	streq	r2, [r4, #0]
 8009912:	6004      	str	r4, [r0, #0]
 8009914:	e7ec      	b.n	80098f0 <_free_r+0x24>
 8009916:	4613      	mov	r3, r2
 8009918:	685a      	ldr	r2, [r3, #4]
 800991a:	b10a      	cbz	r2, 8009920 <_free_r+0x54>
 800991c:	42a2      	cmp	r2, r4
 800991e:	d9fa      	bls.n	8009916 <_free_r+0x4a>
 8009920:	6819      	ldr	r1, [r3, #0]
 8009922:	1858      	adds	r0, r3, r1
 8009924:	42a0      	cmp	r0, r4
 8009926:	d10b      	bne.n	8009940 <_free_r+0x74>
 8009928:	6820      	ldr	r0, [r4, #0]
 800992a:	4401      	add	r1, r0
 800992c:	1858      	adds	r0, r3, r1
 800992e:	4282      	cmp	r2, r0
 8009930:	6019      	str	r1, [r3, #0]
 8009932:	d1dd      	bne.n	80098f0 <_free_r+0x24>
 8009934:	6810      	ldr	r0, [r2, #0]
 8009936:	6852      	ldr	r2, [r2, #4]
 8009938:	605a      	str	r2, [r3, #4]
 800993a:	4401      	add	r1, r0
 800993c:	6019      	str	r1, [r3, #0]
 800993e:	e7d7      	b.n	80098f0 <_free_r+0x24>
 8009940:	d902      	bls.n	8009948 <_free_r+0x7c>
 8009942:	230c      	movs	r3, #12
 8009944:	602b      	str	r3, [r5, #0]
 8009946:	e7d3      	b.n	80098f0 <_free_r+0x24>
 8009948:	6820      	ldr	r0, [r4, #0]
 800994a:	1821      	adds	r1, r4, r0
 800994c:	428a      	cmp	r2, r1
 800994e:	bf04      	itt	eq
 8009950:	6811      	ldreq	r1, [r2, #0]
 8009952:	6852      	ldreq	r2, [r2, #4]
 8009954:	6062      	str	r2, [r4, #4]
 8009956:	bf04      	itt	eq
 8009958:	1809      	addeq	r1, r1, r0
 800995a:	6021      	streq	r1, [r4, #0]
 800995c:	605c      	str	r4, [r3, #4]
 800995e:	e7c7      	b.n	80098f0 <_free_r+0x24>
 8009960:	bd38      	pop	{r3, r4, r5, pc}
 8009962:	bf00      	nop
 8009964:	20000380 	.word	0x20000380

08009968 <_malloc_r>:
 8009968:	b570      	push	{r4, r5, r6, lr}
 800996a:	1ccd      	adds	r5, r1, #3
 800996c:	f025 0503 	bic.w	r5, r5, #3
 8009970:	3508      	adds	r5, #8
 8009972:	2d0c      	cmp	r5, #12
 8009974:	bf38      	it	cc
 8009976:	250c      	movcc	r5, #12
 8009978:	2d00      	cmp	r5, #0
 800997a:	4606      	mov	r6, r0
 800997c:	db01      	blt.n	8009982 <_malloc_r+0x1a>
 800997e:	42a9      	cmp	r1, r5
 8009980:	d903      	bls.n	800998a <_malloc_r+0x22>
 8009982:	230c      	movs	r3, #12
 8009984:	6033      	str	r3, [r6, #0]
 8009986:	2000      	movs	r0, #0
 8009988:	bd70      	pop	{r4, r5, r6, pc}
 800998a:	f001 fb46 	bl	800b01a <__malloc_lock>
 800998e:	4a21      	ldr	r2, [pc, #132]	; (8009a14 <_malloc_r+0xac>)
 8009990:	6814      	ldr	r4, [r2, #0]
 8009992:	4621      	mov	r1, r4
 8009994:	b991      	cbnz	r1, 80099bc <_malloc_r+0x54>
 8009996:	4c20      	ldr	r4, [pc, #128]	; (8009a18 <_malloc_r+0xb0>)
 8009998:	6823      	ldr	r3, [r4, #0]
 800999a:	b91b      	cbnz	r3, 80099a4 <_malloc_r+0x3c>
 800999c:	4630      	mov	r0, r6
 800999e:	f000 fc99 	bl	800a2d4 <_sbrk_r>
 80099a2:	6020      	str	r0, [r4, #0]
 80099a4:	4629      	mov	r1, r5
 80099a6:	4630      	mov	r0, r6
 80099a8:	f000 fc94 	bl	800a2d4 <_sbrk_r>
 80099ac:	1c43      	adds	r3, r0, #1
 80099ae:	d124      	bne.n	80099fa <_malloc_r+0x92>
 80099b0:	230c      	movs	r3, #12
 80099b2:	6033      	str	r3, [r6, #0]
 80099b4:	4630      	mov	r0, r6
 80099b6:	f001 fb31 	bl	800b01c <__malloc_unlock>
 80099ba:	e7e4      	b.n	8009986 <_malloc_r+0x1e>
 80099bc:	680b      	ldr	r3, [r1, #0]
 80099be:	1b5b      	subs	r3, r3, r5
 80099c0:	d418      	bmi.n	80099f4 <_malloc_r+0x8c>
 80099c2:	2b0b      	cmp	r3, #11
 80099c4:	d90f      	bls.n	80099e6 <_malloc_r+0x7e>
 80099c6:	600b      	str	r3, [r1, #0]
 80099c8:	50cd      	str	r5, [r1, r3]
 80099ca:	18cc      	adds	r4, r1, r3
 80099cc:	4630      	mov	r0, r6
 80099ce:	f001 fb25 	bl	800b01c <__malloc_unlock>
 80099d2:	f104 000b 	add.w	r0, r4, #11
 80099d6:	1d23      	adds	r3, r4, #4
 80099d8:	f020 0007 	bic.w	r0, r0, #7
 80099dc:	1ac3      	subs	r3, r0, r3
 80099de:	d0d3      	beq.n	8009988 <_malloc_r+0x20>
 80099e0:	425a      	negs	r2, r3
 80099e2:	50e2      	str	r2, [r4, r3]
 80099e4:	e7d0      	b.n	8009988 <_malloc_r+0x20>
 80099e6:	428c      	cmp	r4, r1
 80099e8:	684b      	ldr	r3, [r1, #4]
 80099ea:	bf16      	itet	ne
 80099ec:	6063      	strne	r3, [r4, #4]
 80099ee:	6013      	streq	r3, [r2, #0]
 80099f0:	460c      	movne	r4, r1
 80099f2:	e7eb      	b.n	80099cc <_malloc_r+0x64>
 80099f4:	460c      	mov	r4, r1
 80099f6:	6849      	ldr	r1, [r1, #4]
 80099f8:	e7cc      	b.n	8009994 <_malloc_r+0x2c>
 80099fa:	1cc4      	adds	r4, r0, #3
 80099fc:	f024 0403 	bic.w	r4, r4, #3
 8009a00:	42a0      	cmp	r0, r4
 8009a02:	d005      	beq.n	8009a10 <_malloc_r+0xa8>
 8009a04:	1a21      	subs	r1, r4, r0
 8009a06:	4630      	mov	r0, r6
 8009a08:	f000 fc64 	bl	800a2d4 <_sbrk_r>
 8009a0c:	3001      	adds	r0, #1
 8009a0e:	d0cf      	beq.n	80099b0 <_malloc_r+0x48>
 8009a10:	6025      	str	r5, [r4, #0]
 8009a12:	e7db      	b.n	80099cc <_malloc_r+0x64>
 8009a14:	20000380 	.word	0x20000380
 8009a18:	20000384 	.word	0x20000384

08009a1c <__cvt>:
 8009a1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a20:	ec55 4b10 	vmov	r4, r5, d0
 8009a24:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009a26:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009a2a:	2d00      	cmp	r5, #0
 8009a2c:	460e      	mov	r6, r1
 8009a2e:	4691      	mov	r9, r2
 8009a30:	4619      	mov	r1, r3
 8009a32:	bfb8      	it	lt
 8009a34:	4622      	movlt	r2, r4
 8009a36:	462b      	mov	r3, r5
 8009a38:	f027 0720 	bic.w	r7, r7, #32
 8009a3c:	bfbb      	ittet	lt
 8009a3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009a42:	461d      	movlt	r5, r3
 8009a44:	2300      	movge	r3, #0
 8009a46:	232d      	movlt	r3, #45	; 0x2d
 8009a48:	bfb8      	it	lt
 8009a4a:	4614      	movlt	r4, r2
 8009a4c:	2f46      	cmp	r7, #70	; 0x46
 8009a4e:	700b      	strb	r3, [r1, #0]
 8009a50:	d004      	beq.n	8009a5c <__cvt+0x40>
 8009a52:	2f45      	cmp	r7, #69	; 0x45
 8009a54:	d100      	bne.n	8009a58 <__cvt+0x3c>
 8009a56:	3601      	adds	r6, #1
 8009a58:	2102      	movs	r1, #2
 8009a5a:	e000      	b.n	8009a5e <__cvt+0x42>
 8009a5c:	2103      	movs	r1, #3
 8009a5e:	ab03      	add	r3, sp, #12
 8009a60:	9301      	str	r3, [sp, #4]
 8009a62:	ab02      	add	r3, sp, #8
 8009a64:	9300      	str	r3, [sp, #0]
 8009a66:	4632      	mov	r2, r6
 8009a68:	4653      	mov	r3, sl
 8009a6a:	ec45 4b10 	vmov	d0, r4, r5
 8009a6e:	f000 fd03 	bl	800a478 <_dtoa_r>
 8009a72:	2f47      	cmp	r7, #71	; 0x47
 8009a74:	4680      	mov	r8, r0
 8009a76:	d102      	bne.n	8009a7e <__cvt+0x62>
 8009a78:	f019 0f01 	tst.w	r9, #1
 8009a7c:	d026      	beq.n	8009acc <__cvt+0xb0>
 8009a7e:	2f46      	cmp	r7, #70	; 0x46
 8009a80:	eb08 0906 	add.w	r9, r8, r6
 8009a84:	d111      	bne.n	8009aaa <__cvt+0x8e>
 8009a86:	f898 3000 	ldrb.w	r3, [r8]
 8009a8a:	2b30      	cmp	r3, #48	; 0x30
 8009a8c:	d10a      	bne.n	8009aa4 <__cvt+0x88>
 8009a8e:	2200      	movs	r2, #0
 8009a90:	2300      	movs	r3, #0
 8009a92:	4620      	mov	r0, r4
 8009a94:	4629      	mov	r1, r5
 8009a96:	f7f7 f81f 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a9a:	b918      	cbnz	r0, 8009aa4 <__cvt+0x88>
 8009a9c:	f1c6 0601 	rsb	r6, r6, #1
 8009aa0:	f8ca 6000 	str.w	r6, [sl]
 8009aa4:	f8da 3000 	ldr.w	r3, [sl]
 8009aa8:	4499      	add	r9, r3
 8009aaa:	2200      	movs	r2, #0
 8009aac:	2300      	movs	r3, #0
 8009aae:	4620      	mov	r0, r4
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	f7f7 f811 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ab6:	b938      	cbnz	r0, 8009ac8 <__cvt+0xac>
 8009ab8:	2230      	movs	r2, #48	; 0x30
 8009aba:	9b03      	ldr	r3, [sp, #12]
 8009abc:	454b      	cmp	r3, r9
 8009abe:	d205      	bcs.n	8009acc <__cvt+0xb0>
 8009ac0:	1c59      	adds	r1, r3, #1
 8009ac2:	9103      	str	r1, [sp, #12]
 8009ac4:	701a      	strb	r2, [r3, #0]
 8009ac6:	e7f8      	b.n	8009aba <__cvt+0x9e>
 8009ac8:	f8cd 900c 	str.w	r9, [sp, #12]
 8009acc:	9b03      	ldr	r3, [sp, #12]
 8009ace:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ad0:	eba3 0308 	sub.w	r3, r3, r8
 8009ad4:	4640      	mov	r0, r8
 8009ad6:	6013      	str	r3, [r2, #0]
 8009ad8:	b004      	add	sp, #16
 8009ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009ade <__exponent>:
 8009ade:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ae0:	2900      	cmp	r1, #0
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	bfba      	itte	lt
 8009ae6:	4249      	neglt	r1, r1
 8009ae8:	232d      	movlt	r3, #45	; 0x2d
 8009aea:	232b      	movge	r3, #43	; 0x2b
 8009aec:	2909      	cmp	r1, #9
 8009aee:	f804 2b02 	strb.w	r2, [r4], #2
 8009af2:	7043      	strb	r3, [r0, #1]
 8009af4:	dd20      	ble.n	8009b38 <__exponent+0x5a>
 8009af6:	f10d 0307 	add.w	r3, sp, #7
 8009afa:	461f      	mov	r7, r3
 8009afc:	260a      	movs	r6, #10
 8009afe:	fb91 f5f6 	sdiv	r5, r1, r6
 8009b02:	fb06 1115 	mls	r1, r6, r5, r1
 8009b06:	3130      	adds	r1, #48	; 0x30
 8009b08:	2d09      	cmp	r5, #9
 8009b0a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009b0e:	f103 32ff 	add.w	r2, r3, #4294967295
 8009b12:	4629      	mov	r1, r5
 8009b14:	dc09      	bgt.n	8009b2a <__exponent+0x4c>
 8009b16:	3130      	adds	r1, #48	; 0x30
 8009b18:	3b02      	subs	r3, #2
 8009b1a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009b1e:	42bb      	cmp	r3, r7
 8009b20:	4622      	mov	r2, r4
 8009b22:	d304      	bcc.n	8009b2e <__exponent+0x50>
 8009b24:	1a10      	subs	r0, r2, r0
 8009b26:	b003      	add	sp, #12
 8009b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	e7e7      	b.n	8009afe <__exponent+0x20>
 8009b2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b32:	f804 2b01 	strb.w	r2, [r4], #1
 8009b36:	e7f2      	b.n	8009b1e <__exponent+0x40>
 8009b38:	2330      	movs	r3, #48	; 0x30
 8009b3a:	4419      	add	r1, r3
 8009b3c:	7083      	strb	r3, [r0, #2]
 8009b3e:	1d02      	adds	r2, r0, #4
 8009b40:	70c1      	strb	r1, [r0, #3]
 8009b42:	e7ef      	b.n	8009b24 <__exponent+0x46>

08009b44 <_printf_float>:
 8009b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b48:	b08d      	sub	sp, #52	; 0x34
 8009b4a:	460c      	mov	r4, r1
 8009b4c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009b50:	4616      	mov	r6, r2
 8009b52:	461f      	mov	r7, r3
 8009b54:	4605      	mov	r5, r0
 8009b56:	f001 fa47 	bl	800afe8 <_localeconv_r>
 8009b5a:	6803      	ldr	r3, [r0, #0]
 8009b5c:	9304      	str	r3, [sp, #16]
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7f6 fb3e 	bl	80001e0 <strlen>
 8009b64:	2300      	movs	r3, #0
 8009b66:	930a      	str	r3, [sp, #40]	; 0x28
 8009b68:	f8d8 3000 	ldr.w	r3, [r8]
 8009b6c:	9005      	str	r0, [sp, #20]
 8009b6e:	3307      	adds	r3, #7
 8009b70:	f023 0307 	bic.w	r3, r3, #7
 8009b74:	f103 0208 	add.w	r2, r3, #8
 8009b78:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009b7c:	f8d4 b000 	ldr.w	fp, [r4]
 8009b80:	f8c8 2000 	str.w	r2, [r8]
 8009b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b88:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009b8c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009b90:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b94:	9307      	str	r3, [sp, #28]
 8009b96:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b9e:	4ba7      	ldr	r3, [pc, #668]	; (8009e3c <_printf_float+0x2f8>)
 8009ba0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ba4:	f7f6 ffca 	bl	8000b3c <__aeabi_dcmpun>
 8009ba8:	bb70      	cbnz	r0, 8009c08 <_printf_float+0xc4>
 8009baa:	f04f 32ff 	mov.w	r2, #4294967295
 8009bae:	4ba3      	ldr	r3, [pc, #652]	; (8009e3c <_printf_float+0x2f8>)
 8009bb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bb4:	f7f6 ffa4 	bl	8000b00 <__aeabi_dcmple>
 8009bb8:	bb30      	cbnz	r0, 8009c08 <_printf_float+0xc4>
 8009bba:	2200      	movs	r2, #0
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	4640      	mov	r0, r8
 8009bc0:	4649      	mov	r1, r9
 8009bc2:	f7f6 ff93 	bl	8000aec <__aeabi_dcmplt>
 8009bc6:	b110      	cbz	r0, 8009bce <_printf_float+0x8a>
 8009bc8:	232d      	movs	r3, #45	; 0x2d
 8009bca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bce:	4a9c      	ldr	r2, [pc, #624]	; (8009e40 <_printf_float+0x2fc>)
 8009bd0:	4b9c      	ldr	r3, [pc, #624]	; (8009e44 <_printf_float+0x300>)
 8009bd2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009bd6:	bf8c      	ite	hi
 8009bd8:	4690      	movhi	r8, r2
 8009bda:	4698      	movls	r8, r3
 8009bdc:	2303      	movs	r3, #3
 8009bde:	f02b 0204 	bic.w	r2, fp, #4
 8009be2:	6123      	str	r3, [r4, #16]
 8009be4:	6022      	str	r2, [r4, #0]
 8009be6:	f04f 0900 	mov.w	r9, #0
 8009bea:	9700      	str	r7, [sp, #0]
 8009bec:	4633      	mov	r3, r6
 8009bee:	aa0b      	add	r2, sp, #44	; 0x2c
 8009bf0:	4621      	mov	r1, r4
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	f000 f9e6 	bl	8009fc4 <_printf_common>
 8009bf8:	3001      	adds	r0, #1
 8009bfa:	f040 808d 	bne.w	8009d18 <_printf_float+0x1d4>
 8009bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8009c02:	b00d      	add	sp, #52	; 0x34
 8009c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c08:	4642      	mov	r2, r8
 8009c0a:	464b      	mov	r3, r9
 8009c0c:	4640      	mov	r0, r8
 8009c0e:	4649      	mov	r1, r9
 8009c10:	f7f6 ff94 	bl	8000b3c <__aeabi_dcmpun>
 8009c14:	b110      	cbz	r0, 8009c1c <_printf_float+0xd8>
 8009c16:	4a8c      	ldr	r2, [pc, #560]	; (8009e48 <_printf_float+0x304>)
 8009c18:	4b8c      	ldr	r3, [pc, #560]	; (8009e4c <_printf_float+0x308>)
 8009c1a:	e7da      	b.n	8009bd2 <_printf_float+0x8e>
 8009c1c:	6861      	ldr	r1, [r4, #4]
 8009c1e:	1c4b      	adds	r3, r1, #1
 8009c20:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009c24:	a80a      	add	r0, sp, #40	; 0x28
 8009c26:	d13e      	bne.n	8009ca6 <_printf_float+0x162>
 8009c28:	2306      	movs	r3, #6
 8009c2a:	6063      	str	r3, [r4, #4]
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009c32:	ab09      	add	r3, sp, #36	; 0x24
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	ec49 8b10 	vmov	d0, r8, r9
 8009c3a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009c3e:	6022      	str	r2, [r4, #0]
 8009c40:	f8cd a004 	str.w	sl, [sp, #4]
 8009c44:	6861      	ldr	r1, [r4, #4]
 8009c46:	4628      	mov	r0, r5
 8009c48:	f7ff fee8 	bl	8009a1c <__cvt>
 8009c4c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009c50:	2b47      	cmp	r3, #71	; 0x47
 8009c52:	4680      	mov	r8, r0
 8009c54:	d109      	bne.n	8009c6a <_printf_float+0x126>
 8009c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c58:	1cd8      	adds	r0, r3, #3
 8009c5a:	db02      	blt.n	8009c62 <_printf_float+0x11e>
 8009c5c:	6862      	ldr	r2, [r4, #4]
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	dd47      	ble.n	8009cf2 <_printf_float+0x1ae>
 8009c62:	f1aa 0a02 	sub.w	sl, sl, #2
 8009c66:	fa5f fa8a 	uxtb.w	sl, sl
 8009c6a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009c6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c70:	d824      	bhi.n	8009cbc <_printf_float+0x178>
 8009c72:	3901      	subs	r1, #1
 8009c74:	4652      	mov	r2, sl
 8009c76:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c7a:	9109      	str	r1, [sp, #36]	; 0x24
 8009c7c:	f7ff ff2f 	bl	8009ade <__exponent>
 8009c80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c82:	1813      	adds	r3, r2, r0
 8009c84:	2a01      	cmp	r2, #1
 8009c86:	4681      	mov	r9, r0
 8009c88:	6123      	str	r3, [r4, #16]
 8009c8a:	dc02      	bgt.n	8009c92 <_printf_float+0x14e>
 8009c8c:	6822      	ldr	r2, [r4, #0]
 8009c8e:	07d1      	lsls	r1, r2, #31
 8009c90:	d501      	bpl.n	8009c96 <_printf_float+0x152>
 8009c92:	3301      	adds	r3, #1
 8009c94:	6123      	str	r3, [r4, #16]
 8009c96:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d0a5      	beq.n	8009bea <_printf_float+0xa6>
 8009c9e:	232d      	movs	r3, #45	; 0x2d
 8009ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ca4:	e7a1      	b.n	8009bea <_printf_float+0xa6>
 8009ca6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009caa:	f000 8177 	beq.w	8009f9c <_printf_float+0x458>
 8009cae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009cb2:	d1bb      	bne.n	8009c2c <_printf_float+0xe8>
 8009cb4:	2900      	cmp	r1, #0
 8009cb6:	d1b9      	bne.n	8009c2c <_printf_float+0xe8>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e7b6      	b.n	8009c2a <_printf_float+0xe6>
 8009cbc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009cc0:	d119      	bne.n	8009cf6 <_printf_float+0x1b2>
 8009cc2:	2900      	cmp	r1, #0
 8009cc4:	6863      	ldr	r3, [r4, #4]
 8009cc6:	dd0c      	ble.n	8009ce2 <_printf_float+0x19e>
 8009cc8:	6121      	str	r1, [r4, #16]
 8009cca:	b913      	cbnz	r3, 8009cd2 <_printf_float+0x18e>
 8009ccc:	6822      	ldr	r2, [r4, #0]
 8009cce:	07d2      	lsls	r2, r2, #31
 8009cd0:	d502      	bpl.n	8009cd8 <_printf_float+0x194>
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	440b      	add	r3, r1
 8009cd6:	6123      	str	r3, [r4, #16]
 8009cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cda:	65a3      	str	r3, [r4, #88]	; 0x58
 8009cdc:	f04f 0900 	mov.w	r9, #0
 8009ce0:	e7d9      	b.n	8009c96 <_printf_float+0x152>
 8009ce2:	b913      	cbnz	r3, 8009cea <_printf_float+0x1a6>
 8009ce4:	6822      	ldr	r2, [r4, #0]
 8009ce6:	07d0      	lsls	r0, r2, #31
 8009ce8:	d501      	bpl.n	8009cee <_printf_float+0x1aa>
 8009cea:	3302      	adds	r3, #2
 8009cec:	e7f3      	b.n	8009cd6 <_printf_float+0x192>
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e7f1      	b.n	8009cd6 <_printf_float+0x192>
 8009cf2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009cf6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	db05      	blt.n	8009d0a <_printf_float+0x1c6>
 8009cfe:	6822      	ldr	r2, [r4, #0]
 8009d00:	6123      	str	r3, [r4, #16]
 8009d02:	07d1      	lsls	r1, r2, #31
 8009d04:	d5e8      	bpl.n	8009cd8 <_printf_float+0x194>
 8009d06:	3301      	adds	r3, #1
 8009d08:	e7e5      	b.n	8009cd6 <_printf_float+0x192>
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	bfd4      	ite	le
 8009d0e:	f1c3 0302 	rsble	r3, r3, #2
 8009d12:	2301      	movgt	r3, #1
 8009d14:	4413      	add	r3, r2
 8009d16:	e7de      	b.n	8009cd6 <_printf_float+0x192>
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	055a      	lsls	r2, r3, #21
 8009d1c:	d407      	bmi.n	8009d2e <_printf_float+0x1ea>
 8009d1e:	6923      	ldr	r3, [r4, #16]
 8009d20:	4642      	mov	r2, r8
 8009d22:	4631      	mov	r1, r6
 8009d24:	4628      	mov	r0, r5
 8009d26:	47b8      	blx	r7
 8009d28:	3001      	adds	r0, #1
 8009d2a:	d12b      	bne.n	8009d84 <_printf_float+0x240>
 8009d2c:	e767      	b.n	8009bfe <_printf_float+0xba>
 8009d2e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009d32:	f240 80dc 	bls.w	8009eee <_printf_float+0x3aa>
 8009d36:	2200      	movs	r2, #0
 8009d38:	2300      	movs	r3, #0
 8009d3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d3e:	f7f6 fecb 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d42:	2800      	cmp	r0, #0
 8009d44:	d033      	beq.n	8009dae <_printf_float+0x26a>
 8009d46:	2301      	movs	r3, #1
 8009d48:	4a41      	ldr	r2, [pc, #260]	; (8009e50 <_printf_float+0x30c>)
 8009d4a:	4631      	mov	r1, r6
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	47b8      	blx	r7
 8009d50:	3001      	adds	r0, #1
 8009d52:	f43f af54 	beq.w	8009bfe <_printf_float+0xba>
 8009d56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	db02      	blt.n	8009d64 <_printf_float+0x220>
 8009d5e:	6823      	ldr	r3, [r4, #0]
 8009d60:	07d8      	lsls	r0, r3, #31
 8009d62:	d50f      	bpl.n	8009d84 <_printf_float+0x240>
 8009d64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d68:	4631      	mov	r1, r6
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	47b8      	blx	r7
 8009d6e:	3001      	adds	r0, #1
 8009d70:	f43f af45 	beq.w	8009bfe <_printf_float+0xba>
 8009d74:	f04f 0800 	mov.w	r8, #0
 8009d78:	f104 091a 	add.w	r9, r4, #26
 8009d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	4543      	cmp	r3, r8
 8009d82:	dc09      	bgt.n	8009d98 <_printf_float+0x254>
 8009d84:	6823      	ldr	r3, [r4, #0]
 8009d86:	079b      	lsls	r3, r3, #30
 8009d88:	f100 8103 	bmi.w	8009f92 <_printf_float+0x44e>
 8009d8c:	68e0      	ldr	r0, [r4, #12]
 8009d8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d90:	4298      	cmp	r0, r3
 8009d92:	bfb8      	it	lt
 8009d94:	4618      	movlt	r0, r3
 8009d96:	e734      	b.n	8009c02 <_printf_float+0xbe>
 8009d98:	2301      	movs	r3, #1
 8009d9a:	464a      	mov	r2, r9
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	4628      	mov	r0, r5
 8009da0:	47b8      	blx	r7
 8009da2:	3001      	adds	r0, #1
 8009da4:	f43f af2b 	beq.w	8009bfe <_printf_float+0xba>
 8009da8:	f108 0801 	add.w	r8, r8, #1
 8009dac:	e7e6      	b.n	8009d7c <_printf_float+0x238>
 8009dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	dc2b      	bgt.n	8009e0c <_printf_float+0x2c8>
 8009db4:	2301      	movs	r3, #1
 8009db6:	4a26      	ldr	r2, [pc, #152]	; (8009e50 <_printf_float+0x30c>)
 8009db8:	4631      	mov	r1, r6
 8009dba:	4628      	mov	r0, r5
 8009dbc:	47b8      	blx	r7
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	f43f af1d 	beq.w	8009bfe <_printf_float+0xba>
 8009dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dc6:	b923      	cbnz	r3, 8009dd2 <_printf_float+0x28e>
 8009dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dca:	b913      	cbnz	r3, 8009dd2 <_printf_float+0x28e>
 8009dcc:	6823      	ldr	r3, [r4, #0]
 8009dce:	07d9      	lsls	r1, r3, #31
 8009dd0:	d5d8      	bpl.n	8009d84 <_printf_float+0x240>
 8009dd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dd6:	4631      	mov	r1, r6
 8009dd8:	4628      	mov	r0, r5
 8009dda:	47b8      	blx	r7
 8009ddc:	3001      	adds	r0, #1
 8009dde:	f43f af0e 	beq.w	8009bfe <_printf_float+0xba>
 8009de2:	f04f 0900 	mov.w	r9, #0
 8009de6:	f104 0a1a 	add.w	sl, r4, #26
 8009dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dec:	425b      	negs	r3, r3
 8009dee:	454b      	cmp	r3, r9
 8009df0:	dc01      	bgt.n	8009df6 <_printf_float+0x2b2>
 8009df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009df4:	e794      	b.n	8009d20 <_printf_float+0x1dc>
 8009df6:	2301      	movs	r3, #1
 8009df8:	4652      	mov	r2, sl
 8009dfa:	4631      	mov	r1, r6
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	47b8      	blx	r7
 8009e00:	3001      	adds	r0, #1
 8009e02:	f43f aefc 	beq.w	8009bfe <_printf_float+0xba>
 8009e06:	f109 0901 	add.w	r9, r9, #1
 8009e0a:	e7ee      	b.n	8009dea <_printf_float+0x2a6>
 8009e0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e10:	429a      	cmp	r2, r3
 8009e12:	bfa8      	it	ge
 8009e14:	461a      	movge	r2, r3
 8009e16:	2a00      	cmp	r2, #0
 8009e18:	4691      	mov	r9, r2
 8009e1a:	dd07      	ble.n	8009e2c <_printf_float+0x2e8>
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	4631      	mov	r1, r6
 8009e20:	4642      	mov	r2, r8
 8009e22:	4628      	mov	r0, r5
 8009e24:	47b8      	blx	r7
 8009e26:	3001      	adds	r0, #1
 8009e28:	f43f aee9 	beq.w	8009bfe <_printf_float+0xba>
 8009e2c:	f104 031a 	add.w	r3, r4, #26
 8009e30:	f04f 0b00 	mov.w	fp, #0
 8009e34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e38:	9306      	str	r3, [sp, #24]
 8009e3a:	e015      	b.n	8009e68 <_printf_float+0x324>
 8009e3c:	7fefffff 	.word	0x7fefffff
 8009e40:	0800ba8c 	.word	0x0800ba8c
 8009e44:	0800ba88 	.word	0x0800ba88
 8009e48:	0800ba94 	.word	0x0800ba94
 8009e4c:	0800ba90 	.word	0x0800ba90
 8009e50:	0800ba98 	.word	0x0800ba98
 8009e54:	2301      	movs	r3, #1
 8009e56:	9a06      	ldr	r2, [sp, #24]
 8009e58:	4631      	mov	r1, r6
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	47b8      	blx	r7
 8009e5e:	3001      	adds	r0, #1
 8009e60:	f43f aecd 	beq.w	8009bfe <_printf_float+0xba>
 8009e64:	f10b 0b01 	add.w	fp, fp, #1
 8009e68:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009e6c:	ebaa 0309 	sub.w	r3, sl, r9
 8009e70:	455b      	cmp	r3, fp
 8009e72:	dcef      	bgt.n	8009e54 <_printf_float+0x310>
 8009e74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	44d0      	add	r8, sl
 8009e7c:	db15      	blt.n	8009eaa <_printf_float+0x366>
 8009e7e:	6823      	ldr	r3, [r4, #0]
 8009e80:	07da      	lsls	r2, r3, #31
 8009e82:	d412      	bmi.n	8009eaa <_printf_float+0x366>
 8009e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e88:	eba3 020a 	sub.w	r2, r3, sl
 8009e8c:	eba3 0a01 	sub.w	sl, r3, r1
 8009e90:	4592      	cmp	sl, r2
 8009e92:	bfa8      	it	ge
 8009e94:	4692      	movge	sl, r2
 8009e96:	f1ba 0f00 	cmp.w	sl, #0
 8009e9a:	dc0e      	bgt.n	8009eba <_printf_float+0x376>
 8009e9c:	f04f 0800 	mov.w	r8, #0
 8009ea0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ea4:	f104 091a 	add.w	r9, r4, #26
 8009ea8:	e019      	b.n	8009ede <_printf_float+0x39a>
 8009eaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009eae:	4631      	mov	r1, r6
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	47b8      	blx	r7
 8009eb4:	3001      	adds	r0, #1
 8009eb6:	d1e5      	bne.n	8009e84 <_printf_float+0x340>
 8009eb8:	e6a1      	b.n	8009bfe <_printf_float+0xba>
 8009eba:	4653      	mov	r3, sl
 8009ebc:	4642      	mov	r2, r8
 8009ebe:	4631      	mov	r1, r6
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	47b8      	blx	r7
 8009ec4:	3001      	adds	r0, #1
 8009ec6:	d1e9      	bne.n	8009e9c <_printf_float+0x358>
 8009ec8:	e699      	b.n	8009bfe <_printf_float+0xba>
 8009eca:	2301      	movs	r3, #1
 8009ecc:	464a      	mov	r2, r9
 8009ece:	4631      	mov	r1, r6
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	47b8      	blx	r7
 8009ed4:	3001      	adds	r0, #1
 8009ed6:	f43f ae92 	beq.w	8009bfe <_printf_float+0xba>
 8009eda:	f108 0801 	add.w	r8, r8, #1
 8009ede:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ee2:	1a9b      	subs	r3, r3, r2
 8009ee4:	eba3 030a 	sub.w	r3, r3, sl
 8009ee8:	4543      	cmp	r3, r8
 8009eea:	dcee      	bgt.n	8009eca <_printf_float+0x386>
 8009eec:	e74a      	b.n	8009d84 <_printf_float+0x240>
 8009eee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ef0:	2a01      	cmp	r2, #1
 8009ef2:	dc01      	bgt.n	8009ef8 <_printf_float+0x3b4>
 8009ef4:	07db      	lsls	r3, r3, #31
 8009ef6:	d53a      	bpl.n	8009f6e <_printf_float+0x42a>
 8009ef8:	2301      	movs	r3, #1
 8009efa:	4642      	mov	r2, r8
 8009efc:	4631      	mov	r1, r6
 8009efe:	4628      	mov	r0, r5
 8009f00:	47b8      	blx	r7
 8009f02:	3001      	adds	r0, #1
 8009f04:	f43f ae7b 	beq.w	8009bfe <_printf_float+0xba>
 8009f08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f0c:	4631      	mov	r1, r6
 8009f0e:	4628      	mov	r0, r5
 8009f10:	47b8      	blx	r7
 8009f12:	3001      	adds	r0, #1
 8009f14:	f108 0801 	add.w	r8, r8, #1
 8009f18:	f43f ae71 	beq.w	8009bfe <_printf_float+0xba>
 8009f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f103 3aff 	add.w	sl, r3, #4294967295
 8009f24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f28:	2300      	movs	r3, #0
 8009f2a:	f7f6 fdd5 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f2e:	b9c8      	cbnz	r0, 8009f64 <_printf_float+0x420>
 8009f30:	4653      	mov	r3, sl
 8009f32:	4642      	mov	r2, r8
 8009f34:	4631      	mov	r1, r6
 8009f36:	4628      	mov	r0, r5
 8009f38:	47b8      	blx	r7
 8009f3a:	3001      	adds	r0, #1
 8009f3c:	d10e      	bne.n	8009f5c <_printf_float+0x418>
 8009f3e:	e65e      	b.n	8009bfe <_printf_float+0xba>
 8009f40:	2301      	movs	r3, #1
 8009f42:	4652      	mov	r2, sl
 8009f44:	4631      	mov	r1, r6
 8009f46:	4628      	mov	r0, r5
 8009f48:	47b8      	blx	r7
 8009f4a:	3001      	adds	r0, #1
 8009f4c:	f43f ae57 	beq.w	8009bfe <_printf_float+0xba>
 8009f50:	f108 0801 	add.w	r8, r8, #1
 8009f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f56:	3b01      	subs	r3, #1
 8009f58:	4543      	cmp	r3, r8
 8009f5a:	dcf1      	bgt.n	8009f40 <_printf_float+0x3fc>
 8009f5c:	464b      	mov	r3, r9
 8009f5e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009f62:	e6de      	b.n	8009d22 <_printf_float+0x1de>
 8009f64:	f04f 0800 	mov.w	r8, #0
 8009f68:	f104 0a1a 	add.w	sl, r4, #26
 8009f6c:	e7f2      	b.n	8009f54 <_printf_float+0x410>
 8009f6e:	2301      	movs	r3, #1
 8009f70:	e7df      	b.n	8009f32 <_printf_float+0x3ee>
 8009f72:	2301      	movs	r3, #1
 8009f74:	464a      	mov	r2, r9
 8009f76:	4631      	mov	r1, r6
 8009f78:	4628      	mov	r0, r5
 8009f7a:	47b8      	blx	r7
 8009f7c:	3001      	adds	r0, #1
 8009f7e:	f43f ae3e 	beq.w	8009bfe <_printf_float+0xba>
 8009f82:	f108 0801 	add.w	r8, r8, #1
 8009f86:	68e3      	ldr	r3, [r4, #12]
 8009f88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f8a:	1a9b      	subs	r3, r3, r2
 8009f8c:	4543      	cmp	r3, r8
 8009f8e:	dcf0      	bgt.n	8009f72 <_printf_float+0x42e>
 8009f90:	e6fc      	b.n	8009d8c <_printf_float+0x248>
 8009f92:	f04f 0800 	mov.w	r8, #0
 8009f96:	f104 0919 	add.w	r9, r4, #25
 8009f9a:	e7f4      	b.n	8009f86 <_printf_float+0x442>
 8009f9c:	2900      	cmp	r1, #0
 8009f9e:	f43f ae8b 	beq.w	8009cb8 <_printf_float+0x174>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009fa8:	ab09      	add	r3, sp, #36	; 0x24
 8009faa:	9300      	str	r3, [sp, #0]
 8009fac:	ec49 8b10 	vmov	d0, r8, r9
 8009fb0:	6022      	str	r2, [r4, #0]
 8009fb2:	f8cd a004 	str.w	sl, [sp, #4]
 8009fb6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009fba:	4628      	mov	r0, r5
 8009fbc:	f7ff fd2e 	bl	8009a1c <__cvt>
 8009fc0:	4680      	mov	r8, r0
 8009fc2:	e648      	b.n	8009c56 <_printf_float+0x112>

08009fc4 <_printf_common>:
 8009fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc8:	4691      	mov	r9, r2
 8009fca:	461f      	mov	r7, r3
 8009fcc:	688a      	ldr	r2, [r1, #8]
 8009fce:	690b      	ldr	r3, [r1, #16]
 8009fd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	bfb8      	it	lt
 8009fd8:	4613      	movlt	r3, r2
 8009fda:	f8c9 3000 	str.w	r3, [r9]
 8009fde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fe2:	4606      	mov	r6, r0
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	b112      	cbz	r2, 8009fee <_printf_common+0x2a>
 8009fe8:	3301      	adds	r3, #1
 8009fea:	f8c9 3000 	str.w	r3, [r9]
 8009fee:	6823      	ldr	r3, [r4, #0]
 8009ff0:	0699      	lsls	r1, r3, #26
 8009ff2:	bf42      	ittt	mi
 8009ff4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009ff8:	3302      	addmi	r3, #2
 8009ffa:	f8c9 3000 	strmi.w	r3, [r9]
 8009ffe:	6825      	ldr	r5, [r4, #0]
 800a000:	f015 0506 	ands.w	r5, r5, #6
 800a004:	d107      	bne.n	800a016 <_printf_common+0x52>
 800a006:	f104 0a19 	add.w	sl, r4, #25
 800a00a:	68e3      	ldr	r3, [r4, #12]
 800a00c:	f8d9 2000 	ldr.w	r2, [r9]
 800a010:	1a9b      	subs	r3, r3, r2
 800a012:	42ab      	cmp	r3, r5
 800a014:	dc28      	bgt.n	800a068 <_printf_common+0xa4>
 800a016:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a01a:	6822      	ldr	r2, [r4, #0]
 800a01c:	3300      	adds	r3, #0
 800a01e:	bf18      	it	ne
 800a020:	2301      	movne	r3, #1
 800a022:	0692      	lsls	r2, r2, #26
 800a024:	d42d      	bmi.n	800a082 <_printf_common+0xbe>
 800a026:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a02a:	4639      	mov	r1, r7
 800a02c:	4630      	mov	r0, r6
 800a02e:	47c0      	blx	r8
 800a030:	3001      	adds	r0, #1
 800a032:	d020      	beq.n	800a076 <_printf_common+0xb2>
 800a034:	6823      	ldr	r3, [r4, #0]
 800a036:	68e5      	ldr	r5, [r4, #12]
 800a038:	f8d9 2000 	ldr.w	r2, [r9]
 800a03c:	f003 0306 	and.w	r3, r3, #6
 800a040:	2b04      	cmp	r3, #4
 800a042:	bf08      	it	eq
 800a044:	1aad      	subeq	r5, r5, r2
 800a046:	68a3      	ldr	r3, [r4, #8]
 800a048:	6922      	ldr	r2, [r4, #16]
 800a04a:	bf0c      	ite	eq
 800a04c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a050:	2500      	movne	r5, #0
 800a052:	4293      	cmp	r3, r2
 800a054:	bfc4      	itt	gt
 800a056:	1a9b      	subgt	r3, r3, r2
 800a058:	18ed      	addgt	r5, r5, r3
 800a05a:	f04f 0900 	mov.w	r9, #0
 800a05e:	341a      	adds	r4, #26
 800a060:	454d      	cmp	r5, r9
 800a062:	d11a      	bne.n	800a09a <_printf_common+0xd6>
 800a064:	2000      	movs	r0, #0
 800a066:	e008      	b.n	800a07a <_printf_common+0xb6>
 800a068:	2301      	movs	r3, #1
 800a06a:	4652      	mov	r2, sl
 800a06c:	4639      	mov	r1, r7
 800a06e:	4630      	mov	r0, r6
 800a070:	47c0      	blx	r8
 800a072:	3001      	adds	r0, #1
 800a074:	d103      	bne.n	800a07e <_printf_common+0xba>
 800a076:	f04f 30ff 	mov.w	r0, #4294967295
 800a07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a07e:	3501      	adds	r5, #1
 800a080:	e7c3      	b.n	800a00a <_printf_common+0x46>
 800a082:	18e1      	adds	r1, r4, r3
 800a084:	1c5a      	adds	r2, r3, #1
 800a086:	2030      	movs	r0, #48	; 0x30
 800a088:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a08c:	4422      	add	r2, r4
 800a08e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a092:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a096:	3302      	adds	r3, #2
 800a098:	e7c5      	b.n	800a026 <_printf_common+0x62>
 800a09a:	2301      	movs	r3, #1
 800a09c:	4622      	mov	r2, r4
 800a09e:	4639      	mov	r1, r7
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	47c0      	blx	r8
 800a0a4:	3001      	adds	r0, #1
 800a0a6:	d0e6      	beq.n	800a076 <_printf_common+0xb2>
 800a0a8:	f109 0901 	add.w	r9, r9, #1
 800a0ac:	e7d8      	b.n	800a060 <_printf_common+0x9c>
	...

0800a0b0 <_printf_i>:
 800a0b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a0b8:	460c      	mov	r4, r1
 800a0ba:	7e09      	ldrb	r1, [r1, #24]
 800a0bc:	b085      	sub	sp, #20
 800a0be:	296e      	cmp	r1, #110	; 0x6e
 800a0c0:	4617      	mov	r7, r2
 800a0c2:	4606      	mov	r6, r0
 800a0c4:	4698      	mov	r8, r3
 800a0c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0c8:	f000 80b3 	beq.w	800a232 <_printf_i+0x182>
 800a0cc:	d822      	bhi.n	800a114 <_printf_i+0x64>
 800a0ce:	2963      	cmp	r1, #99	; 0x63
 800a0d0:	d036      	beq.n	800a140 <_printf_i+0x90>
 800a0d2:	d80a      	bhi.n	800a0ea <_printf_i+0x3a>
 800a0d4:	2900      	cmp	r1, #0
 800a0d6:	f000 80b9 	beq.w	800a24c <_printf_i+0x19c>
 800a0da:	2958      	cmp	r1, #88	; 0x58
 800a0dc:	f000 8083 	beq.w	800a1e6 <_printf_i+0x136>
 800a0e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a0e8:	e032      	b.n	800a150 <_printf_i+0xa0>
 800a0ea:	2964      	cmp	r1, #100	; 0x64
 800a0ec:	d001      	beq.n	800a0f2 <_printf_i+0x42>
 800a0ee:	2969      	cmp	r1, #105	; 0x69
 800a0f0:	d1f6      	bne.n	800a0e0 <_printf_i+0x30>
 800a0f2:	6820      	ldr	r0, [r4, #0]
 800a0f4:	6813      	ldr	r3, [r2, #0]
 800a0f6:	0605      	lsls	r5, r0, #24
 800a0f8:	f103 0104 	add.w	r1, r3, #4
 800a0fc:	d52a      	bpl.n	800a154 <_printf_i+0xa4>
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	6011      	str	r1, [r2, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	da03      	bge.n	800a10e <_printf_i+0x5e>
 800a106:	222d      	movs	r2, #45	; 0x2d
 800a108:	425b      	negs	r3, r3
 800a10a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a10e:	486f      	ldr	r0, [pc, #444]	; (800a2cc <_printf_i+0x21c>)
 800a110:	220a      	movs	r2, #10
 800a112:	e039      	b.n	800a188 <_printf_i+0xd8>
 800a114:	2973      	cmp	r1, #115	; 0x73
 800a116:	f000 809d 	beq.w	800a254 <_printf_i+0x1a4>
 800a11a:	d808      	bhi.n	800a12e <_printf_i+0x7e>
 800a11c:	296f      	cmp	r1, #111	; 0x6f
 800a11e:	d020      	beq.n	800a162 <_printf_i+0xb2>
 800a120:	2970      	cmp	r1, #112	; 0x70
 800a122:	d1dd      	bne.n	800a0e0 <_printf_i+0x30>
 800a124:	6823      	ldr	r3, [r4, #0]
 800a126:	f043 0320 	orr.w	r3, r3, #32
 800a12a:	6023      	str	r3, [r4, #0]
 800a12c:	e003      	b.n	800a136 <_printf_i+0x86>
 800a12e:	2975      	cmp	r1, #117	; 0x75
 800a130:	d017      	beq.n	800a162 <_printf_i+0xb2>
 800a132:	2978      	cmp	r1, #120	; 0x78
 800a134:	d1d4      	bne.n	800a0e0 <_printf_i+0x30>
 800a136:	2378      	movs	r3, #120	; 0x78
 800a138:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a13c:	4864      	ldr	r0, [pc, #400]	; (800a2d0 <_printf_i+0x220>)
 800a13e:	e055      	b.n	800a1ec <_printf_i+0x13c>
 800a140:	6813      	ldr	r3, [r2, #0]
 800a142:	1d19      	adds	r1, r3, #4
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	6011      	str	r1, [r2, #0]
 800a148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a14c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a150:	2301      	movs	r3, #1
 800a152:	e08c      	b.n	800a26e <_printf_i+0x1be>
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	6011      	str	r1, [r2, #0]
 800a158:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a15c:	bf18      	it	ne
 800a15e:	b21b      	sxthne	r3, r3
 800a160:	e7cf      	b.n	800a102 <_printf_i+0x52>
 800a162:	6813      	ldr	r3, [r2, #0]
 800a164:	6825      	ldr	r5, [r4, #0]
 800a166:	1d18      	adds	r0, r3, #4
 800a168:	6010      	str	r0, [r2, #0]
 800a16a:	0628      	lsls	r0, r5, #24
 800a16c:	d501      	bpl.n	800a172 <_printf_i+0xc2>
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	e002      	b.n	800a178 <_printf_i+0xc8>
 800a172:	0668      	lsls	r0, r5, #25
 800a174:	d5fb      	bpl.n	800a16e <_printf_i+0xbe>
 800a176:	881b      	ldrh	r3, [r3, #0]
 800a178:	4854      	ldr	r0, [pc, #336]	; (800a2cc <_printf_i+0x21c>)
 800a17a:	296f      	cmp	r1, #111	; 0x6f
 800a17c:	bf14      	ite	ne
 800a17e:	220a      	movne	r2, #10
 800a180:	2208      	moveq	r2, #8
 800a182:	2100      	movs	r1, #0
 800a184:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a188:	6865      	ldr	r5, [r4, #4]
 800a18a:	60a5      	str	r5, [r4, #8]
 800a18c:	2d00      	cmp	r5, #0
 800a18e:	f2c0 8095 	blt.w	800a2bc <_printf_i+0x20c>
 800a192:	6821      	ldr	r1, [r4, #0]
 800a194:	f021 0104 	bic.w	r1, r1, #4
 800a198:	6021      	str	r1, [r4, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d13d      	bne.n	800a21a <_printf_i+0x16a>
 800a19e:	2d00      	cmp	r5, #0
 800a1a0:	f040 808e 	bne.w	800a2c0 <_printf_i+0x210>
 800a1a4:	4665      	mov	r5, ip
 800a1a6:	2a08      	cmp	r2, #8
 800a1a8:	d10b      	bne.n	800a1c2 <_printf_i+0x112>
 800a1aa:	6823      	ldr	r3, [r4, #0]
 800a1ac:	07db      	lsls	r3, r3, #31
 800a1ae:	d508      	bpl.n	800a1c2 <_printf_i+0x112>
 800a1b0:	6923      	ldr	r3, [r4, #16]
 800a1b2:	6862      	ldr	r2, [r4, #4]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	bfde      	ittt	le
 800a1b8:	2330      	movle	r3, #48	; 0x30
 800a1ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a1be:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a1c2:	ebac 0305 	sub.w	r3, ip, r5
 800a1c6:	6123      	str	r3, [r4, #16]
 800a1c8:	f8cd 8000 	str.w	r8, [sp]
 800a1cc:	463b      	mov	r3, r7
 800a1ce:	aa03      	add	r2, sp, #12
 800a1d0:	4621      	mov	r1, r4
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	f7ff fef6 	bl	8009fc4 <_printf_common>
 800a1d8:	3001      	adds	r0, #1
 800a1da:	d14d      	bne.n	800a278 <_printf_i+0x1c8>
 800a1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e0:	b005      	add	sp, #20
 800a1e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1e6:	4839      	ldr	r0, [pc, #228]	; (800a2cc <_printf_i+0x21c>)
 800a1e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a1ec:	6813      	ldr	r3, [r2, #0]
 800a1ee:	6821      	ldr	r1, [r4, #0]
 800a1f0:	1d1d      	adds	r5, r3, #4
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	6015      	str	r5, [r2, #0]
 800a1f6:	060a      	lsls	r2, r1, #24
 800a1f8:	d50b      	bpl.n	800a212 <_printf_i+0x162>
 800a1fa:	07ca      	lsls	r2, r1, #31
 800a1fc:	bf44      	itt	mi
 800a1fe:	f041 0120 	orrmi.w	r1, r1, #32
 800a202:	6021      	strmi	r1, [r4, #0]
 800a204:	b91b      	cbnz	r3, 800a20e <_printf_i+0x15e>
 800a206:	6822      	ldr	r2, [r4, #0]
 800a208:	f022 0220 	bic.w	r2, r2, #32
 800a20c:	6022      	str	r2, [r4, #0]
 800a20e:	2210      	movs	r2, #16
 800a210:	e7b7      	b.n	800a182 <_printf_i+0xd2>
 800a212:	064d      	lsls	r5, r1, #25
 800a214:	bf48      	it	mi
 800a216:	b29b      	uxthmi	r3, r3
 800a218:	e7ef      	b.n	800a1fa <_printf_i+0x14a>
 800a21a:	4665      	mov	r5, ip
 800a21c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a220:	fb02 3311 	mls	r3, r2, r1, r3
 800a224:	5cc3      	ldrb	r3, [r0, r3]
 800a226:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a22a:	460b      	mov	r3, r1
 800a22c:	2900      	cmp	r1, #0
 800a22e:	d1f5      	bne.n	800a21c <_printf_i+0x16c>
 800a230:	e7b9      	b.n	800a1a6 <_printf_i+0xf6>
 800a232:	6813      	ldr	r3, [r2, #0]
 800a234:	6825      	ldr	r5, [r4, #0]
 800a236:	6961      	ldr	r1, [r4, #20]
 800a238:	1d18      	adds	r0, r3, #4
 800a23a:	6010      	str	r0, [r2, #0]
 800a23c:	0628      	lsls	r0, r5, #24
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	d501      	bpl.n	800a246 <_printf_i+0x196>
 800a242:	6019      	str	r1, [r3, #0]
 800a244:	e002      	b.n	800a24c <_printf_i+0x19c>
 800a246:	066a      	lsls	r2, r5, #25
 800a248:	d5fb      	bpl.n	800a242 <_printf_i+0x192>
 800a24a:	8019      	strh	r1, [r3, #0]
 800a24c:	2300      	movs	r3, #0
 800a24e:	6123      	str	r3, [r4, #16]
 800a250:	4665      	mov	r5, ip
 800a252:	e7b9      	b.n	800a1c8 <_printf_i+0x118>
 800a254:	6813      	ldr	r3, [r2, #0]
 800a256:	1d19      	adds	r1, r3, #4
 800a258:	6011      	str	r1, [r2, #0]
 800a25a:	681d      	ldr	r5, [r3, #0]
 800a25c:	6862      	ldr	r2, [r4, #4]
 800a25e:	2100      	movs	r1, #0
 800a260:	4628      	mov	r0, r5
 800a262:	f7f5 ffc5 	bl	80001f0 <memchr>
 800a266:	b108      	cbz	r0, 800a26c <_printf_i+0x1bc>
 800a268:	1b40      	subs	r0, r0, r5
 800a26a:	6060      	str	r0, [r4, #4]
 800a26c:	6863      	ldr	r3, [r4, #4]
 800a26e:	6123      	str	r3, [r4, #16]
 800a270:	2300      	movs	r3, #0
 800a272:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a276:	e7a7      	b.n	800a1c8 <_printf_i+0x118>
 800a278:	6923      	ldr	r3, [r4, #16]
 800a27a:	462a      	mov	r2, r5
 800a27c:	4639      	mov	r1, r7
 800a27e:	4630      	mov	r0, r6
 800a280:	47c0      	blx	r8
 800a282:	3001      	adds	r0, #1
 800a284:	d0aa      	beq.n	800a1dc <_printf_i+0x12c>
 800a286:	6823      	ldr	r3, [r4, #0]
 800a288:	079b      	lsls	r3, r3, #30
 800a28a:	d413      	bmi.n	800a2b4 <_printf_i+0x204>
 800a28c:	68e0      	ldr	r0, [r4, #12]
 800a28e:	9b03      	ldr	r3, [sp, #12]
 800a290:	4298      	cmp	r0, r3
 800a292:	bfb8      	it	lt
 800a294:	4618      	movlt	r0, r3
 800a296:	e7a3      	b.n	800a1e0 <_printf_i+0x130>
 800a298:	2301      	movs	r3, #1
 800a29a:	464a      	mov	r2, r9
 800a29c:	4639      	mov	r1, r7
 800a29e:	4630      	mov	r0, r6
 800a2a0:	47c0      	blx	r8
 800a2a2:	3001      	adds	r0, #1
 800a2a4:	d09a      	beq.n	800a1dc <_printf_i+0x12c>
 800a2a6:	3501      	adds	r5, #1
 800a2a8:	68e3      	ldr	r3, [r4, #12]
 800a2aa:	9a03      	ldr	r2, [sp, #12]
 800a2ac:	1a9b      	subs	r3, r3, r2
 800a2ae:	42ab      	cmp	r3, r5
 800a2b0:	dcf2      	bgt.n	800a298 <_printf_i+0x1e8>
 800a2b2:	e7eb      	b.n	800a28c <_printf_i+0x1dc>
 800a2b4:	2500      	movs	r5, #0
 800a2b6:	f104 0919 	add.w	r9, r4, #25
 800a2ba:	e7f5      	b.n	800a2a8 <_printf_i+0x1f8>
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d1ac      	bne.n	800a21a <_printf_i+0x16a>
 800a2c0:	7803      	ldrb	r3, [r0, #0]
 800a2c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2ca:	e76c      	b.n	800a1a6 <_printf_i+0xf6>
 800a2cc:	0800ba9a 	.word	0x0800ba9a
 800a2d0:	0800baab 	.word	0x0800baab

0800a2d4 <_sbrk_r>:
 800a2d4:	b538      	push	{r3, r4, r5, lr}
 800a2d6:	4c06      	ldr	r4, [pc, #24]	; (800a2f0 <_sbrk_r+0x1c>)
 800a2d8:	2300      	movs	r3, #0
 800a2da:	4605      	mov	r5, r0
 800a2dc:	4608      	mov	r0, r1
 800a2de:	6023      	str	r3, [r4, #0]
 800a2e0:	f7f7 fed2 	bl	8002088 <_sbrk>
 800a2e4:	1c43      	adds	r3, r0, #1
 800a2e6:	d102      	bne.n	800a2ee <_sbrk_r+0x1a>
 800a2e8:	6823      	ldr	r3, [r4, #0]
 800a2ea:	b103      	cbz	r3, 800a2ee <_sbrk_r+0x1a>
 800a2ec:	602b      	str	r3, [r5, #0]
 800a2ee:	bd38      	pop	{r3, r4, r5, pc}
 800a2f0:	20001d98 	.word	0x20001d98

0800a2f4 <sniprintf>:
 800a2f4:	b40c      	push	{r2, r3}
 800a2f6:	b530      	push	{r4, r5, lr}
 800a2f8:	4b17      	ldr	r3, [pc, #92]	; (800a358 <sniprintf+0x64>)
 800a2fa:	1e0c      	subs	r4, r1, #0
 800a2fc:	b09d      	sub	sp, #116	; 0x74
 800a2fe:	681d      	ldr	r5, [r3, #0]
 800a300:	da08      	bge.n	800a314 <sniprintf+0x20>
 800a302:	238b      	movs	r3, #139	; 0x8b
 800a304:	602b      	str	r3, [r5, #0]
 800a306:	f04f 30ff 	mov.w	r0, #4294967295
 800a30a:	b01d      	add	sp, #116	; 0x74
 800a30c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a310:	b002      	add	sp, #8
 800a312:	4770      	bx	lr
 800a314:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a318:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a31c:	bf14      	ite	ne
 800a31e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a322:	4623      	moveq	r3, r4
 800a324:	9304      	str	r3, [sp, #16]
 800a326:	9307      	str	r3, [sp, #28]
 800a328:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a32c:	9002      	str	r0, [sp, #8]
 800a32e:	9006      	str	r0, [sp, #24]
 800a330:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a334:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a336:	ab21      	add	r3, sp, #132	; 0x84
 800a338:	a902      	add	r1, sp, #8
 800a33a:	4628      	mov	r0, r5
 800a33c:	9301      	str	r3, [sp, #4]
 800a33e:	f001 f9b1 	bl	800b6a4 <_svfiprintf_r>
 800a342:	1c43      	adds	r3, r0, #1
 800a344:	bfbc      	itt	lt
 800a346:	238b      	movlt	r3, #139	; 0x8b
 800a348:	602b      	strlt	r3, [r5, #0]
 800a34a:	2c00      	cmp	r4, #0
 800a34c:	d0dd      	beq.n	800a30a <sniprintf+0x16>
 800a34e:	9b02      	ldr	r3, [sp, #8]
 800a350:	2200      	movs	r2, #0
 800a352:	701a      	strb	r2, [r3, #0]
 800a354:	e7d9      	b.n	800a30a <sniprintf+0x16>
 800a356:	bf00      	nop
 800a358:	2000018c 	.word	0x2000018c

0800a35c <quorem>:
 800a35c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a360:	6903      	ldr	r3, [r0, #16]
 800a362:	690c      	ldr	r4, [r1, #16]
 800a364:	42a3      	cmp	r3, r4
 800a366:	4680      	mov	r8, r0
 800a368:	f2c0 8082 	blt.w	800a470 <quorem+0x114>
 800a36c:	3c01      	subs	r4, #1
 800a36e:	f101 0714 	add.w	r7, r1, #20
 800a372:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a376:	f100 0614 	add.w	r6, r0, #20
 800a37a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a37e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a382:	eb06 030c 	add.w	r3, r6, ip
 800a386:	3501      	adds	r5, #1
 800a388:	eb07 090c 	add.w	r9, r7, ip
 800a38c:	9301      	str	r3, [sp, #4]
 800a38e:	fbb0 f5f5 	udiv	r5, r0, r5
 800a392:	b395      	cbz	r5, 800a3fa <quorem+0x9e>
 800a394:	f04f 0a00 	mov.w	sl, #0
 800a398:	4638      	mov	r0, r7
 800a39a:	46b6      	mov	lr, r6
 800a39c:	46d3      	mov	fp, sl
 800a39e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a3a2:	b293      	uxth	r3, r2
 800a3a4:	fb05 a303 	mla	r3, r5, r3, sl
 800a3a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	ebab 0303 	sub.w	r3, fp, r3
 800a3b2:	0c12      	lsrs	r2, r2, #16
 800a3b4:	f8de b000 	ldr.w	fp, [lr]
 800a3b8:	fb05 a202 	mla	r2, r5, r2, sl
 800a3bc:	fa13 f38b 	uxtah	r3, r3, fp
 800a3c0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a3c4:	fa1f fb82 	uxth.w	fp, r2
 800a3c8:	f8de 2000 	ldr.w	r2, [lr]
 800a3cc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a3d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3da:	4581      	cmp	r9, r0
 800a3dc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a3e0:	f84e 3b04 	str.w	r3, [lr], #4
 800a3e4:	d2db      	bcs.n	800a39e <quorem+0x42>
 800a3e6:	f856 300c 	ldr.w	r3, [r6, ip]
 800a3ea:	b933      	cbnz	r3, 800a3fa <quorem+0x9e>
 800a3ec:	9b01      	ldr	r3, [sp, #4]
 800a3ee:	3b04      	subs	r3, #4
 800a3f0:	429e      	cmp	r6, r3
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	d330      	bcc.n	800a458 <quorem+0xfc>
 800a3f6:	f8c8 4010 	str.w	r4, [r8, #16]
 800a3fa:	4640      	mov	r0, r8
 800a3fc:	f001 f824 	bl	800b448 <__mcmp>
 800a400:	2800      	cmp	r0, #0
 800a402:	db25      	blt.n	800a450 <quorem+0xf4>
 800a404:	3501      	adds	r5, #1
 800a406:	4630      	mov	r0, r6
 800a408:	f04f 0c00 	mov.w	ip, #0
 800a40c:	f857 2b04 	ldr.w	r2, [r7], #4
 800a410:	f8d0 e000 	ldr.w	lr, [r0]
 800a414:	b293      	uxth	r3, r2
 800a416:	ebac 0303 	sub.w	r3, ip, r3
 800a41a:	0c12      	lsrs	r2, r2, #16
 800a41c:	fa13 f38e 	uxtah	r3, r3, lr
 800a420:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a424:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a428:	b29b      	uxth	r3, r3
 800a42a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a42e:	45b9      	cmp	r9, r7
 800a430:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a434:	f840 3b04 	str.w	r3, [r0], #4
 800a438:	d2e8      	bcs.n	800a40c <quorem+0xb0>
 800a43a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a43e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a442:	b92a      	cbnz	r2, 800a450 <quorem+0xf4>
 800a444:	3b04      	subs	r3, #4
 800a446:	429e      	cmp	r6, r3
 800a448:	461a      	mov	r2, r3
 800a44a:	d30b      	bcc.n	800a464 <quorem+0x108>
 800a44c:	f8c8 4010 	str.w	r4, [r8, #16]
 800a450:	4628      	mov	r0, r5
 800a452:	b003      	add	sp, #12
 800a454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a458:	6812      	ldr	r2, [r2, #0]
 800a45a:	3b04      	subs	r3, #4
 800a45c:	2a00      	cmp	r2, #0
 800a45e:	d1ca      	bne.n	800a3f6 <quorem+0x9a>
 800a460:	3c01      	subs	r4, #1
 800a462:	e7c5      	b.n	800a3f0 <quorem+0x94>
 800a464:	6812      	ldr	r2, [r2, #0]
 800a466:	3b04      	subs	r3, #4
 800a468:	2a00      	cmp	r2, #0
 800a46a:	d1ef      	bne.n	800a44c <quorem+0xf0>
 800a46c:	3c01      	subs	r4, #1
 800a46e:	e7ea      	b.n	800a446 <quorem+0xea>
 800a470:	2000      	movs	r0, #0
 800a472:	e7ee      	b.n	800a452 <quorem+0xf6>
 800a474:	0000      	movs	r0, r0
	...

0800a478 <_dtoa_r>:
 800a478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a47c:	ec57 6b10 	vmov	r6, r7, d0
 800a480:	b097      	sub	sp, #92	; 0x5c
 800a482:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a484:	9106      	str	r1, [sp, #24]
 800a486:	4604      	mov	r4, r0
 800a488:	920b      	str	r2, [sp, #44]	; 0x2c
 800a48a:	9312      	str	r3, [sp, #72]	; 0x48
 800a48c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a490:	e9cd 6700 	strd	r6, r7, [sp]
 800a494:	b93d      	cbnz	r5, 800a4a6 <_dtoa_r+0x2e>
 800a496:	2010      	movs	r0, #16
 800a498:	f7ff fa00 	bl	800989c <malloc>
 800a49c:	6260      	str	r0, [r4, #36]	; 0x24
 800a49e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a4a2:	6005      	str	r5, [r0, #0]
 800a4a4:	60c5      	str	r5, [r0, #12]
 800a4a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4a8:	6819      	ldr	r1, [r3, #0]
 800a4aa:	b151      	cbz	r1, 800a4c2 <_dtoa_r+0x4a>
 800a4ac:	685a      	ldr	r2, [r3, #4]
 800a4ae:	604a      	str	r2, [r1, #4]
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	4093      	lsls	r3, r2
 800a4b4:	608b      	str	r3, [r1, #8]
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f000 fde5 	bl	800b086 <_Bfree>
 800a4bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4be:	2200      	movs	r2, #0
 800a4c0:	601a      	str	r2, [r3, #0]
 800a4c2:	1e3b      	subs	r3, r7, #0
 800a4c4:	bfbb      	ittet	lt
 800a4c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a4ca:	9301      	strlt	r3, [sp, #4]
 800a4cc:	2300      	movge	r3, #0
 800a4ce:	2201      	movlt	r2, #1
 800a4d0:	bfac      	ite	ge
 800a4d2:	f8c8 3000 	strge.w	r3, [r8]
 800a4d6:	f8c8 2000 	strlt.w	r2, [r8]
 800a4da:	4baf      	ldr	r3, [pc, #700]	; (800a798 <_dtoa_r+0x320>)
 800a4dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a4e0:	ea33 0308 	bics.w	r3, r3, r8
 800a4e4:	d114      	bne.n	800a510 <_dtoa_r+0x98>
 800a4e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a4e8:	f242 730f 	movw	r3, #9999	; 0x270f
 800a4ec:	6013      	str	r3, [r2, #0]
 800a4ee:	9b00      	ldr	r3, [sp, #0]
 800a4f0:	b923      	cbnz	r3, 800a4fc <_dtoa_r+0x84>
 800a4f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	f000 8542 	beq.w	800af80 <_dtoa_r+0xb08>
 800a4fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a7ac <_dtoa_r+0x334>
 800a502:	2b00      	cmp	r3, #0
 800a504:	f000 8544 	beq.w	800af90 <_dtoa_r+0xb18>
 800a508:	f10b 0303 	add.w	r3, fp, #3
 800a50c:	f000 bd3e 	b.w	800af8c <_dtoa_r+0xb14>
 800a510:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a514:	2200      	movs	r2, #0
 800a516:	2300      	movs	r3, #0
 800a518:	4630      	mov	r0, r6
 800a51a:	4639      	mov	r1, r7
 800a51c:	f7f6 fadc 	bl	8000ad8 <__aeabi_dcmpeq>
 800a520:	4681      	mov	r9, r0
 800a522:	b168      	cbz	r0, 800a540 <_dtoa_r+0xc8>
 800a524:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a526:	2301      	movs	r3, #1
 800a528:	6013      	str	r3, [r2, #0]
 800a52a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f000 8524 	beq.w	800af7a <_dtoa_r+0xb02>
 800a532:	4b9a      	ldr	r3, [pc, #616]	; (800a79c <_dtoa_r+0x324>)
 800a534:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a536:	f103 3bff 	add.w	fp, r3, #4294967295
 800a53a:	6013      	str	r3, [r2, #0]
 800a53c:	f000 bd28 	b.w	800af90 <_dtoa_r+0xb18>
 800a540:	aa14      	add	r2, sp, #80	; 0x50
 800a542:	a915      	add	r1, sp, #84	; 0x54
 800a544:	ec47 6b10 	vmov	d0, r6, r7
 800a548:	4620      	mov	r0, r4
 800a54a:	f000 fff4 	bl	800b536 <__d2b>
 800a54e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a552:	9004      	str	r0, [sp, #16]
 800a554:	2d00      	cmp	r5, #0
 800a556:	d07c      	beq.n	800a652 <_dtoa_r+0x1da>
 800a558:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a55c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a560:	46b2      	mov	sl, r6
 800a562:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a566:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a56a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a56e:	2200      	movs	r2, #0
 800a570:	4b8b      	ldr	r3, [pc, #556]	; (800a7a0 <_dtoa_r+0x328>)
 800a572:	4650      	mov	r0, sl
 800a574:	4659      	mov	r1, fp
 800a576:	f7f5 fe8f 	bl	8000298 <__aeabi_dsub>
 800a57a:	a381      	add	r3, pc, #516	; (adr r3, 800a780 <_dtoa_r+0x308>)
 800a57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a580:	f7f6 f842 	bl	8000608 <__aeabi_dmul>
 800a584:	a380      	add	r3, pc, #512	; (adr r3, 800a788 <_dtoa_r+0x310>)
 800a586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58a:	f7f5 fe87 	bl	800029c <__adddf3>
 800a58e:	4606      	mov	r6, r0
 800a590:	4628      	mov	r0, r5
 800a592:	460f      	mov	r7, r1
 800a594:	f7f5 ffce 	bl	8000534 <__aeabi_i2d>
 800a598:	a37d      	add	r3, pc, #500	; (adr r3, 800a790 <_dtoa_r+0x318>)
 800a59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59e:	f7f6 f833 	bl	8000608 <__aeabi_dmul>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	4630      	mov	r0, r6
 800a5a8:	4639      	mov	r1, r7
 800a5aa:	f7f5 fe77 	bl	800029c <__adddf3>
 800a5ae:	4606      	mov	r6, r0
 800a5b0:	460f      	mov	r7, r1
 800a5b2:	f7f6 fad9 	bl	8000b68 <__aeabi_d2iz>
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	4682      	mov	sl, r0
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	4630      	mov	r0, r6
 800a5be:	4639      	mov	r1, r7
 800a5c0:	f7f6 fa94 	bl	8000aec <__aeabi_dcmplt>
 800a5c4:	b148      	cbz	r0, 800a5da <_dtoa_r+0x162>
 800a5c6:	4650      	mov	r0, sl
 800a5c8:	f7f5 ffb4 	bl	8000534 <__aeabi_i2d>
 800a5cc:	4632      	mov	r2, r6
 800a5ce:	463b      	mov	r3, r7
 800a5d0:	f7f6 fa82 	bl	8000ad8 <__aeabi_dcmpeq>
 800a5d4:	b908      	cbnz	r0, 800a5da <_dtoa_r+0x162>
 800a5d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5da:	f1ba 0f16 	cmp.w	sl, #22
 800a5de:	d859      	bhi.n	800a694 <_dtoa_r+0x21c>
 800a5e0:	4970      	ldr	r1, [pc, #448]	; (800a7a4 <_dtoa_r+0x32c>)
 800a5e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a5e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5ee:	f7f6 fa9b 	bl	8000b28 <__aeabi_dcmpgt>
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	d050      	beq.n	800a698 <_dtoa_r+0x220>
 800a5f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a600:	1b5d      	subs	r5, r3, r5
 800a602:	f1b5 0801 	subs.w	r8, r5, #1
 800a606:	bf49      	itett	mi
 800a608:	f1c5 0301 	rsbmi	r3, r5, #1
 800a60c:	2300      	movpl	r3, #0
 800a60e:	9305      	strmi	r3, [sp, #20]
 800a610:	f04f 0800 	movmi.w	r8, #0
 800a614:	bf58      	it	pl
 800a616:	9305      	strpl	r3, [sp, #20]
 800a618:	f1ba 0f00 	cmp.w	sl, #0
 800a61c:	db3e      	blt.n	800a69c <_dtoa_r+0x224>
 800a61e:	2300      	movs	r3, #0
 800a620:	44d0      	add	r8, sl
 800a622:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a626:	9307      	str	r3, [sp, #28]
 800a628:	9b06      	ldr	r3, [sp, #24]
 800a62a:	2b09      	cmp	r3, #9
 800a62c:	f200 8090 	bhi.w	800a750 <_dtoa_r+0x2d8>
 800a630:	2b05      	cmp	r3, #5
 800a632:	bfc4      	itt	gt
 800a634:	3b04      	subgt	r3, #4
 800a636:	9306      	strgt	r3, [sp, #24]
 800a638:	9b06      	ldr	r3, [sp, #24]
 800a63a:	f1a3 0302 	sub.w	r3, r3, #2
 800a63e:	bfcc      	ite	gt
 800a640:	2500      	movgt	r5, #0
 800a642:	2501      	movle	r5, #1
 800a644:	2b03      	cmp	r3, #3
 800a646:	f200 808f 	bhi.w	800a768 <_dtoa_r+0x2f0>
 800a64a:	e8df f003 	tbb	[pc, r3]
 800a64e:	7f7d      	.short	0x7f7d
 800a650:	7131      	.short	0x7131
 800a652:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a656:	441d      	add	r5, r3
 800a658:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a65c:	2820      	cmp	r0, #32
 800a65e:	dd13      	ble.n	800a688 <_dtoa_r+0x210>
 800a660:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a664:	9b00      	ldr	r3, [sp, #0]
 800a666:	fa08 f800 	lsl.w	r8, r8, r0
 800a66a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a66e:	fa23 f000 	lsr.w	r0, r3, r0
 800a672:	ea48 0000 	orr.w	r0, r8, r0
 800a676:	f7f5 ff4d 	bl	8000514 <__aeabi_ui2d>
 800a67a:	2301      	movs	r3, #1
 800a67c:	4682      	mov	sl, r0
 800a67e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a682:	3d01      	subs	r5, #1
 800a684:	9313      	str	r3, [sp, #76]	; 0x4c
 800a686:	e772      	b.n	800a56e <_dtoa_r+0xf6>
 800a688:	9b00      	ldr	r3, [sp, #0]
 800a68a:	f1c0 0020 	rsb	r0, r0, #32
 800a68e:	fa03 f000 	lsl.w	r0, r3, r0
 800a692:	e7f0      	b.n	800a676 <_dtoa_r+0x1fe>
 800a694:	2301      	movs	r3, #1
 800a696:	e7b1      	b.n	800a5fc <_dtoa_r+0x184>
 800a698:	900f      	str	r0, [sp, #60]	; 0x3c
 800a69a:	e7b0      	b.n	800a5fe <_dtoa_r+0x186>
 800a69c:	9b05      	ldr	r3, [sp, #20]
 800a69e:	eba3 030a 	sub.w	r3, r3, sl
 800a6a2:	9305      	str	r3, [sp, #20]
 800a6a4:	f1ca 0300 	rsb	r3, sl, #0
 800a6a8:	9307      	str	r3, [sp, #28]
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	930e      	str	r3, [sp, #56]	; 0x38
 800a6ae:	e7bb      	b.n	800a628 <_dtoa_r+0x1b0>
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	930a      	str	r3, [sp, #40]	; 0x28
 800a6b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	dd59      	ble.n	800a76e <_dtoa_r+0x2f6>
 800a6ba:	9302      	str	r3, [sp, #8]
 800a6bc:	4699      	mov	r9, r3
 800a6be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	6072      	str	r2, [r6, #4]
 800a6c4:	2204      	movs	r2, #4
 800a6c6:	f102 0014 	add.w	r0, r2, #20
 800a6ca:	4298      	cmp	r0, r3
 800a6cc:	6871      	ldr	r1, [r6, #4]
 800a6ce:	d953      	bls.n	800a778 <_dtoa_r+0x300>
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f000 fca4 	bl	800b01e <_Balloc>
 800a6d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6d8:	6030      	str	r0, [r6, #0]
 800a6da:	f1b9 0f0e 	cmp.w	r9, #14
 800a6de:	f8d3 b000 	ldr.w	fp, [r3]
 800a6e2:	f200 80e6 	bhi.w	800a8b2 <_dtoa_r+0x43a>
 800a6e6:	2d00      	cmp	r5, #0
 800a6e8:	f000 80e3 	beq.w	800a8b2 <_dtoa_r+0x43a>
 800a6ec:	ed9d 7b00 	vldr	d7, [sp]
 800a6f0:	f1ba 0f00 	cmp.w	sl, #0
 800a6f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a6f8:	dd74      	ble.n	800a7e4 <_dtoa_r+0x36c>
 800a6fa:	4a2a      	ldr	r2, [pc, #168]	; (800a7a4 <_dtoa_r+0x32c>)
 800a6fc:	f00a 030f 	and.w	r3, sl, #15
 800a700:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a704:	ed93 7b00 	vldr	d7, [r3]
 800a708:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a70c:	06f0      	lsls	r0, r6, #27
 800a70e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a712:	d565      	bpl.n	800a7e0 <_dtoa_r+0x368>
 800a714:	4b24      	ldr	r3, [pc, #144]	; (800a7a8 <_dtoa_r+0x330>)
 800a716:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a71a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a71e:	f7f6 f89d 	bl	800085c <__aeabi_ddiv>
 800a722:	e9cd 0100 	strd	r0, r1, [sp]
 800a726:	f006 060f 	and.w	r6, r6, #15
 800a72a:	2503      	movs	r5, #3
 800a72c:	4f1e      	ldr	r7, [pc, #120]	; (800a7a8 <_dtoa_r+0x330>)
 800a72e:	e04c      	b.n	800a7ca <_dtoa_r+0x352>
 800a730:	2301      	movs	r3, #1
 800a732:	930a      	str	r3, [sp, #40]	; 0x28
 800a734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a736:	4453      	add	r3, sl
 800a738:	f103 0901 	add.w	r9, r3, #1
 800a73c:	9302      	str	r3, [sp, #8]
 800a73e:	464b      	mov	r3, r9
 800a740:	2b01      	cmp	r3, #1
 800a742:	bfb8      	it	lt
 800a744:	2301      	movlt	r3, #1
 800a746:	e7ba      	b.n	800a6be <_dtoa_r+0x246>
 800a748:	2300      	movs	r3, #0
 800a74a:	e7b2      	b.n	800a6b2 <_dtoa_r+0x23a>
 800a74c:	2300      	movs	r3, #0
 800a74e:	e7f0      	b.n	800a732 <_dtoa_r+0x2ba>
 800a750:	2501      	movs	r5, #1
 800a752:	2300      	movs	r3, #0
 800a754:	9306      	str	r3, [sp, #24]
 800a756:	950a      	str	r5, [sp, #40]	; 0x28
 800a758:	f04f 33ff 	mov.w	r3, #4294967295
 800a75c:	9302      	str	r3, [sp, #8]
 800a75e:	4699      	mov	r9, r3
 800a760:	2200      	movs	r2, #0
 800a762:	2312      	movs	r3, #18
 800a764:	920b      	str	r2, [sp, #44]	; 0x2c
 800a766:	e7aa      	b.n	800a6be <_dtoa_r+0x246>
 800a768:	2301      	movs	r3, #1
 800a76a:	930a      	str	r3, [sp, #40]	; 0x28
 800a76c:	e7f4      	b.n	800a758 <_dtoa_r+0x2e0>
 800a76e:	2301      	movs	r3, #1
 800a770:	9302      	str	r3, [sp, #8]
 800a772:	4699      	mov	r9, r3
 800a774:	461a      	mov	r2, r3
 800a776:	e7f5      	b.n	800a764 <_dtoa_r+0x2ec>
 800a778:	3101      	adds	r1, #1
 800a77a:	6071      	str	r1, [r6, #4]
 800a77c:	0052      	lsls	r2, r2, #1
 800a77e:	e7a2      	b.n	800a6c6 <_dtoa_r+0x24e>
 800a780:	636f4361 	.word	0x636f4361
 800a784:	3fd287a7 	.word	0x3fd287a7
 800a788:	8b60c8b3 	.word	0x8b60c8b3
 800a78c:	3fc68a28 	.word	0x3fc68a28
 800a790:	509f79fb 	.word	0x509f79fb
 800a794:	3fd34413 	.word	0x3fd34413
 800a798:	7ff00000 	.word	0x7ff00000
 800a79c:	0800ba99 	.word	0x0800ba99
 800a7a0:	3ff80000 	.word	0x3ff80000
 800a7a4:	0800bb58 	.word	0x0800bb58
 800a7a8:	0800bb30 	.word	0x0800bb30
 800a7ac:	0800bac5 	.word	0x0800bac5
 800a7b0:	07f1      	lsls	r1, r6, #31
 800a7b2:	d508      	bpl.n	800a7c6 <_dtoa_r+0x34e>
 800a7b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a7b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7bc:	f7f5 ff24 	bl	8000608 <__aeabi_dmul>
 800a7c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a7c4:	3501      	adds	r5, #1
 800a7c6:	1076      	asrs	r6, r6, #1
 800a7c8:	3708      	adds	r7, #8
 800a7ca:	2e00      	cmp	r6, #0
 800a7cc:	d1f0      	bne.n	800a7b0 <_dtoa_r+0x338>
 800a7ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a7d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7d6:	f7f6 f841 	bl	800085c <__aeabi_ddiv>
 800a7da:	e9cd 0100 	strd	r0, r1, [sp]
 800a7de:	e01a      	b.n	800a816 <_dtoa_r+0x39e>
 800a7e0:	2502      	movs	r5, #2
 800a7e2:	e7a3      	b.n	800a72c <_dtoa_r+0x2b4>
 800a7e4:	f000 80a0 	beq.w	800a928 <_dtoa_r+0x4b0>
 800a7e8:	f1ca 0600 	rsb	r6, sl, #0
 800a7ec:	4b9f      	ldr	r3, [pc, #636]	; (800aa6c <_dtoa_r+0x5f4>)
 800a7ee:	4fa0      	ldr	r7, [pc, #640]	; (800aa70 <_dtoa_r+0x5f8>)
 800a7f0:	f006 020f 	and.w	r2, r6, #15
 800a7f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a800:	f7f5 ff02 	bl	8000608 <__aeabi_dmul>
 800a804:	e9cd 0100 	strd	r0, r1, [sp]
 800a808:	1136      	asrs	r6, r6, #4
 800a80a:	2300      	movs	r3, #0
 800a80c:	2502      	movs	r5, #2
 800a80e:	2e00      	cmp	r6, #0
 800a810:	d17f      	bne.n	800a912 <_dtoa_r+0x49a>
 800a812:	2b00      	cmp	r3, #0
 800a814:	d1e1      	bne.n	800a7da <_dtoa_r+0x362>
 800a816:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a818:	2b00      	cmp	r3, #0
 800a81a:	f000 8087 	beq.w	800a92c <_dtoa_r+0x4b4>
 800a81e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a822:	2200      	movs	r2, #0
 800a824:	4b93      	ldr	r3, [pc, #588]	; (800aa74 <_dtoa_r+0x5fc>)
 800a826:	4630      	mov	r0, r6
 800a828:	4639      	mov	r1, r7
 800a82a:	f7f6 f95f 	bl	8000aec <__aeabi_dcmplt>
 800a82e:	2800      	cmp	r0, #0
 800a830:	d07c      	beq.n	800a92c <_dtoa_r+0x4b4>
 800a832:	f1b9 0f00 	cmp.w	r9, #0
 800a836:	d079      	beq.n	800a92c <_dtoa_r+0x4b4>
 800a838:	9b02      	ldr	r3, [sp, #8]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	dd35      	ble.n	800a8aa <_dtoa_r+0x432>
 800a83e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a842:	9308      	str	r3, [sp, #32]
 800a844:	4639      	mov	r1, r7
 800a846:	2200      	movs	r2, #0
 800a848:	4b8b      	ldr	r3, [pc, #556]	; (800aa78 <_dtoa_r+0x600>)
 800a84a:	4630      	mov	r0, r6
 800a84c:	f7f5 fedc 	bl	8000608 <__aeabi_dmul>
 800a850:	e9cd 0100 	strd	r0, r1, [sp]
 800a854:	9f02      	ldr	r7, [sp, #8]
 800a856:	3501      	adds	r5, #1
 800a858:	4628      	mov	r0, r5
 800a85a:	f7f5 fe6b 	bl	8000534 <__aeabi_i2d>
 800a85e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a862:	f7f5 fed1 	bl	8000608 <__aeabi_dmul>
 800a866:	2200      	movs	r2, #0
 800a868:	4b84      	ldr	r3, [pc, #528]	; (800aa7c <_dtoa_r+0x604>)
 800a86a:	f7f5 fd17 	bl	800029c <__adddf3>
 800a86e:	4605      	mov	r5, r0
 800a870:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a874:	2f00      	cmp	r7, #0
 800a876:	d15d      	bne.n	800a934 <_dtoa_r+0x4bc>
 800a878:	2200      	movs	r2, #0
 800a87a:	4b81      	ldr	r3, [pc, #516]	; (800aa80 <_dtoa_r+0x608>)
 800a87c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a880:	f7f5 fd0a 	bl	8000298 <__aeabi_dsub>
 800a884:	462a      	mov	r2, r5
 800a886:	4633      	mov	r3, r6
 800a888:	e9cd 0100 	strd	r0, r1, [sp]
 800a88c:	f7f6 f94c 	bl	8000b28 <__aeabi_dcmpgt>
 800a890:	2800      	cmp	r0, #0
 800a892:	f040 8288 	bne.w	800ada6 <_dtoa_r+0x92e>
 800a896:	462a      	mov	r2, r5
 800a898:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a89c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8a0:	f7f6 f924 	bl	8000aec <__aeabi_dcmplt>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	f040 827c 	bne.w	800ada2 <_dtoa_r+0x92a>
 800a8aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a8ae:	e9cd 2300 	strd	r2, r3, [sp]
 800a8b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	f2c0 8150 	blt.w	800ab5a <_dtoa_r+0x6e2>
 800a8ba:	f1ba 0f0e 	cmp.w	sl, #14
 800a8be:	f300 814c 	bgt.w	800ab5a <_dtoa_r+0x6e2>
 800a8c2:	4b6a      	ldr	r3, [pc, #424]	; (800aa6c <_dtoa_r+0x5f4>)
 800a8c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a8c8:	ed93 7b00 	vldr	d7, [r3]
 800a8cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a8d4:	f280 80d8 	bge.w	800aa88 <_dtoa_r+0x610>
 800a8d8:	f1b9 0f00 	cmp.w	r9, #0
 800a8dc:	f300 80d4 	bgt.w	800aa88 <_dtoa_r+0x610>
 800a8e0:	f040 825e 	bne.w	800ada0 <_dtoa_r+0x928>
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	4b66      	ldr	r3, [pc, #408]	; (800aa80 <_dtoa_r+0x608>)
 800a8e8:	ec51 0b17 	vmov	r0, r1, d7
 800a8ec:	f7f5 fe8c 	bl	8000608 <__aeabi_dmul>
 800a8f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8f4:	f7f6 f90e 	bl	8000b14 <__aeabi_dcmpge>
 800a8f8:	464f      	mov	r7, r9
 800a8fa:	464e      	mov	r6, r9
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	f040 8234 	bne.w	800ad6a <_dtoa_r+0x8f2>
 800a902:	2331      	movs	r3, #49	; 0x31
 800a904:	f10b 0501 	add.w	r5, fp, #1
 800a908:	f88b 3000 	strb.w	r3, [fp]
 800a90c:	f10a 0a01 	add.w	sl, sl, #1
 800a910:	e22f      	b.n	800ad72 <_dtoa_r+0x8fa>
 800a912:	07f2      	lsls	r2, r6, #31
 800a914:	d505      	bpl.n	800a922 <_dtoa_r+0x4aa>
 800a916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a91a:	f7f5 fe75 	bl	8000608 <__aeabi_dmul>
 800a91e:	3501      	adds	r5, #1
 800a920:	2301      	movs	r3, #1
 800a922:	1076      	asrs	r6, r6, #1
 800a924:	3708      	adds	r7, #8
 800a926:	e772      	b.n	800a80e <_dtoa_r+0x396>
 800a928:	2502      	movs	r5, #2
 800a92a:	e774      	b.n	800a816 <_dtoa_r+0x39e>
 800a92c:	f8cd a020 	str.w	sl, [sp, #32]
 800a930:	464f      	mov	r7, r9
 800a932:	e791      	b.n	800a858 <_dtoa_r+0x3e0>
 800a934:	4b4d      	ldr	r3, [pc, #308]	; (800aa6c <_dtoa_r+0x5f4>)
 800a936:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a93a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a93e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a940:	2b00      	cmp	r3, #0
 800a942:	d047      	beq.n	800a9d4 <_dtoa_r+0x55c>
 800a944:	4602      	mov	r2, r0
 800a946:	460b      	mov	r3, r1
 800a948:	2000      	movs	r0, #0
 800a94a:	494e      	ldr	r1, [pc, #312]	; (800aa84 <_dtoa_r+0x60c>)
 800a94c:	f7f5 ff86 	bl	800085c <__aeabi_ddiv>
 800a950:	462a      	mov	r2, r5
 800a952:	4633      	mov	r3, r6
 800a954:	f7f5 fca0 	bl	8000298 <__aeabi_dsub>
 800a958:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a95c:	465d      	mov	r5, fp
 800a95e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a962:	f7f6 f901 	bl	8000b68 <__aeabi_d2iz>
 800a966:	4606      	mov	r6, r0
 800a968:	f7f5 fde4 	bl	8000534 <__aeabi_i2d>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a974:	f7f5 fc90 	bl	8000298 <__aeabi_dsub>
 800a978:	3630      	adds	r6, #48	; 0x30
 800a97a:	f805 6b01 	strb.w	r6, [r5], #1
 800a97e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a982:	e9cd 0100 	strd	r0, r1, [sp]
 800a986:	f7f6 f8b1 	bl	8000aec <__aeabi_dcmplt>
 800a98a:	2800      	cmp	r0, #0
 800a98c:	d163      	bne.n	800aa56 <_dtoa_r+0x5de>
 800a98e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a992:	2000      	movs	r0, #0
 800a994:	4937      	ldr	r1, [pc, #220]	; (800aa74 <_dtoa_r+0x5fc>)
 800a996:	f7f5 fc7f 	bl	8000298 <__aeabi_dsub>
 800a99a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a99e:	f7f6 f8a5 	bl	8000aec <__aeabi_dcmplt>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	f040 80b7 	bne.w	800ab16 <_dtoa_r+0x69e>
 800a9a8:	eba5 030b 	sub.w	r3, r5, fp
 800a9ac:	429f      	cmp	r7, r3
 800a9ae:	f77f af7c 	ble.w	800a8aa <_dtoa_r+0x432>
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	4b30      	ldr	r3, [pc, #192]	; (800aa78 <_dtoa_r+0x600>)
 800a9b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a9ba:	f7f5 fe25 	bl	8000608 <__aeabi_dmul>
 800a9be:	2200      	movs	r2, #0
 800a9c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a9c4:	4b2c      	ldr	r3, [pc, #176]	; (800aa78 <_dtoa_r+0x600>)
 800a9c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9ca:	f7f5 fe1d 	bl	8000608 <__aeabi_dmul>
 800a9ce:	e9cd 0100 	strd	r0, r1, [sp]
 800a9d2:	e7c4      	b.n	800a95e <_dtoa_r+0x4e6>
 800a9d4:	462a      	mov	r2, r5
 800a9d6:	4633      	mov	r3, r6
 800a9d8:	f7f5 fe16 	bl	8000608 <__aeabi_dmul>
 800a9dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a9e0:	eb0b 0507 	add.w	r5, fp, r7
 800a9e4:	465e      	mov	r6, fp
 800a9e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9ea:	f7f6 f8bd 	bl	8000b68 <__aeabi_d2iz>
 800a9ee:	4607      	mov	r7, r0
 800a9f0:	f7f5 fda0 	bl	8000534 <__aeabi_i2d>
 800a9f4:	3730      	adds	r7, #48	; 0x30
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9fe:	f7f5 fc4b 	bl	8000298 <__aeabi_dsub>
 800aa02:	f806 7b01 	strb.w	r7, [r6], #1
 800aa06:	42ae      	cmp	r6, r5
 800aa08:	e9cd 0100 	strd	r0, r1, [sp]
 800aa0c:	f04f 0200 	mov.w	r2, #0
 800aa10:	d126      	bne.n	800aa60 <_dtoa_r+0x5e8>
 800aa12:	4b1c      	ldr	r3, [pc, #112]	; (800aa84 <_dtoa_r+0x60c>)
 800aa14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa18:	f7f5 fc40 	bl	800029c <__adddf3>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	460b      	mov	r3, r1
 800aa20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa24:	f7f6 f880 	bl	8000b28 <__aeabi_dcmpgt>
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	d174      	bne.n	800ab16 <_dtoa_r+0x69e>
 800aa2c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aa30:	2000      	movs	r0, #0
 800aa32:	4914      	ldr	r1, [pc, #80]	; (800aa84 <_dtoa_r+0x60c>)
 800aa34:	f7f5 fc30 	bl	8000298 <__aeabi_dsub>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa40:	f7f6 f854 	bl	8000aec <__aeabi_dcmplt>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	f43f af30 	beq.w	800a8aa <_dtoa_r+0x432>
 800aa4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aa4e:	2b30      	cmp	r3, #48	; 0x30
 800aa50:	f105 32ff 	add.w	r2, r5, #4294967295
 800aa54:	d002      	beq.n	800aa5c <_dtoa_r+0x5e4>
 800aa56:	f8dd a020 	ldr.w	sl, [sp, #32]
 800aa5a:	e04a      	b.n	800aaf2 <_dtoa_r+0x67a>
 800aa5c:	4615      	mov	r5, r2
 800aa5e:	e7f4      	b.n	800aa4a <_dtoa_r+0x5d2>
 800aa60:	4b05      	ldr	r3, [pc, #20]	; (800aa78 <_dtoa_r+0x600>)
 800aa62:	f7f5 fdd1 	bl	8000608 <__aeabi_dmul>
 800aa66:	e9cd 0100 	strd	r0, r1, [sp]
 800aa6a:	e7bc      	b.n	800a9e6 <_dtoa_r+0x56e>
 800aa6c:	0800bb58 	.word	0x0800bb58
 800aa70:	0800bb30 	.word	0x0800bb30
 800aa74:	3ff00000 	.word	0x3ff00000
 800aa78:	40240000 	.word	0x40240000
 800aa7c:	401c0000 	.word	0x401c0000
 800aa80:	40140000 	.word	0x40140000
 800aa84:	3fe00000 	.word	0x3fe00000
 800aa88:	e9dd 6700 	ldrd	r6, r7, [sp]
 800aa8c:	465d      	mov	r5, fp
 800aa8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa92:	4630      	mov	r0, r6
 800aa94:	4639      	mov	r1, r7
 800aa96:	f7f5 fee1 	bl	800085c <__aeabi_ddiv>
 800aa9a:	f7f6 f865 	bl	8000b68 <__aeabi_d2iz>
 800aa9e:	4680      	mov	r8, r0
 800aaa0:	f7f5 fd48 	bl	8000534 <__aeabi_i2d>
 800aaa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aaa8:	f7f5 fdae 	bl	8000608 <__aeabi_dmul>
 800aaac:	4602      	mov	r2, r0
 800aaae:	460b      	mov	r3, r1
 800aab0:	4630      	mov	r0, r6
 800aab2:	4639      	mov	r1, r7
 800aab4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800aab8:	f7f5 fbee 	bl	8000298 <__aeabi_dsub>
 800aabc:	f805 6b01 	strb.w	r6, [r5], #1
 800aac0:	eba5 060b 	sub.w	r6, r5, fp
 800aac4:	45b1      	cmp	r9, r6
 800aac6:	4602      	mov	r2, r0
 800aac8:	460b      	mov	r3, r1
 800aaca:	d139      	bne.n	800ab40 <_dtoa_r+0x6c8>
 800aacc:	f7f5 fbe6 	bl	800029c <__adddf3>
 800aad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aad4:	4606      	mov	r6, r0
 800aad6:	460f      	mov	r7, r1
 800aad8:	f7f6 f826 	bl	8000b28 <__aeabi_dcmpgt>
 800aadc:	b9c8      	cbnz	r0, 800ab12 <_dtoa_r+0x69a>
 800aade:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aae2:	4630      	mov	r0, r6
 800aae4:	4639      	mov	r1, r7
 800aae6:	f7f5 fff7 	bl	8000ad8 <__aeabi_dcmpeq>
 800aaea:	b110      	cbz	r0, 800aaf2 <_dtoa_r+0x67a>
 800aaec:	f018 0f01 	tst.w	r8, #1
 800aaf0:	d10f      	bne.n	800ab12 <_dtoa_r+0x69a>
 800aaf2:	9904      	ldr	r1, [sp, #16]
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	f000 fac6 	bl	800b086 <_Bfree>
 800aafa:	2300      	movs	r3, #0
 800aafc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aafe:	702b      	strb	r3, [r5, #0]
 800ab00:	f10a 0301 	add.w	r3, sl, #1
 800ab04:	6013      	str	r3, [r2, #0]
 800ab06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f000 8241 	beq.w	800af90 <_dtoa_r+0xb18>
 800ab0e:	601d      	str	r5, [r3, #0]
 800ab10:	e23e      	b.n	800af90 <_dtoa_r+0xb18>
 800ab12:	f8cd a020 	str.w	sl, [sp, #32]
 800ab16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ab1a:	2a39      	cmp	r2, #57	; 0x39
 800ab1c:	f105 33ff 	add.w	r3, r5, #4294967295
 800ab20:	d108      	bne.n	800ab34 <_dtoa_r+0x6bc>
 800ab22:	459b      	cmp	fp, r3
 800ab24:	d10a      	bne.n	800ab3c <_dtoa_r+0x6c4>
 800ab26:	9b08      	ldr	r3, [sp, #32]
 800ab28:	3301      	adds	r3, #1
 800ab2a:	9308      	str	r3, [sp, #32]
 800ab2c:	2330      	movs	r3, #48	; 0x30
 800ab2e:	f88b 3000 	strb.w	r3, [fp]
 800ab32:	465b      	mov	r3, fp
 800ab34:	781a      	ldrb	r2, [r3, #0]
 800ab36:	3201      	adds	r2, #1
 800ab38:	701a      	strb	r2, [r3, #0]
 800ab3a:	e78c      	b.n	800aa56 <_dtoa_r+0x5de>
 800ab3c:	461d      	mov	r5, r3
 800ab3e:	e7ea      	b.n	800ab16 <_dtoa_r+0x69e>
 800ab40:	2200      	movs	r2, #0
 800ab42:	4b9b      	ldr	r3, [pc, #620]	; (800adb0 <_dtoa_r+0x938>)
 800ab44:	f7f5 fd60 	bl	8000608 <__aeabi_dmul>
 800ab48:	2200      	movs	r2, #0
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	4606      	mov	r6, r0
 800ab4e:	460f      	mov	r7, r1
 800ab50:	f7f5 ffc2 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d09a      	beq.n	800aa8e <_dtoa_r+0x616>
 800ab58:	e7cb      	b.n	800aaf2 <_dtoa_r+0x67a>
 800ab5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab5c:	2a00      	cmp	r2, #0
 800ab5e:	f000 808b 	beq.w	800ac78 <_dtoa_r+0x800>
 800ab62:	9a06      	ldr	r2, [sp, #24]
 800ab64:	2a01      	cmp	r2, #1
 800ab66:	dc6e      	bgt.n	800ac46 <_dtoa_r+0x7ce>
 800ab68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab6a:	2a00      	cmp	r2, #0
 800ab6c:	d067      	beq.n	800ac3e <_dtoa_r+0x7c6>
 800ab6e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab72:	9f07      	ldr	r7, [sp, #28]
 800ab74:	9d05      	ldr	r5, [sp, #20]
 800ab76:	9a05      	ldr	r2, [sp, #20]
 800ab78:	2101      	movs	r1, #1
 800ab7a:	441a      	add	r2, r3
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	9205      	str	r2, [sp, #20]
 800ab80:	4498      	add	r8, r3
 800ab82:	f000 fb20 	bl	800b1c6 <__i2b>
 800ab86:	4606      	mov	r6, r0
 800ab88:	2d00      	cmp	r5, #0
 800ab8a:	dd0c      	ble.n	800aba6 <_dtoa_r+0x72e>
 800ab8c:	f1b8 0f00 	cmp.w	r8, #0
 800ab90:	dd09      	ble.n	800aba6 <_dtoa_r+0x72e>
 800ab92:	4545      	cmp	r5, r8
 800ab94:	9a05      	ldr	r2, [sp, #20]
 800ab96:	462b      	mov	r3, r5
 800ab98:	bfa8      	it	ge
 800ab9a:	4643      	movge	r3, r8
 800ab9c:	1ad2      	subs	r2, r2, r3
 800ab9e:	9205      	str	r2, [sp, #20]
 800aba0:	1aed      	subs	r5, r5, r3
 800aba2:	eba8 0803 	sub.w	r8, r8, r3
 800aba6:	9b07      	ldr	r3, [sp, #28]
 800aba8:	b1eb      	cbz	r3, 800abe6 <_dtoa_r+0x76e>
 800abaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abac:	2b00      	cmp	r3, #0
 800abae:	d067      	beq.n	800ac80 <_dtoa_r+0x808>
 800abb0:	b18f      	cbz	r7, 800abd6 <_dtoa_r+0x75e>
 800abb2:	4631      	mov	r1, r6
 800abb4:	463a      	mov	r2, r7
 800abb6:	4620      	mov	r0, r4
 800abb8:	f000 fba4 	bl	800b304 <__pow5mult>
 800abbc:	9a04      	ldr	r2, [sp, #16]
 800abbe:	4601      	mov	r1, r0
 800abc0:	4606      	mov	r6, r0
 800abc2:	4620      	mov	r0, r4
 800abc4:	f000 fb08 	bl	800b1d8 <__multiply>
 800abc8:	9904      	ldr	r1, [sp, #16]
 800abca:	9008      	str	r0, [sp, #32]
 800abcc:	4620      	mov	r0, r4
 800abce:	f000 fa5a 	bl	800b086 <_Bfree>
 800abd2:	9b08      	ldr	r3, [sp, #32]
 800abd4:	9304      	str	r3, [sp, #16]
 800abd6:	9b07      	ldr	r3, [sp, #28]
 800abd8:	1bda      	subs	r2, r3, r7
 800abda:	d004      	beq.n	800abe6 <_dtoa_r+0x76e>
 800abdc:	9904      	ldr	r1, [sp, #16]
 800abde:	4620      	mov	r0, r4
 800abe0:	f000 fb90 	bl	800b304 <__pow5mult>
 800abe4:	9004      	str	r0, [sp, #16]
 800abe6:	2101      	movs	r1, #1
 800abe8:	4620      	mov	r0, r4
 800abea:	f000 faec 	bl	800b1c6 <__i2b>
 800abee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abf0:	4607      	mov	r7, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	f000 81d0 	beq.w	800af98 <_dtoa_r+0xb20>
 800abf8:	461a      	mov	r2, r3
 800abfa:	4601      	mov	r1, r0
 800abfc:	4620      	mov	r0, r4
 800abfe:	f000 fb81 	bl	800b304 <__pow5mult>
 800ac02:	9b06      	ldr	r3, [sp, #24]
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	4607      	mov	r7, r0
 800ac08:	dc40      	bgt.n	800ac8c <_dtoa_r+0x814>
 800ac0a:	9b00      	ldr	r3, [sp, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d139      	bne.n	800ac84 <_dtoa_r+0x80c>
 800ac10:	9b01      	ldr	r3, [sp, #4]
 800ac12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d136      	bne.n	800ac88 <_dtoa_r+0x810>
 800ac1a:	9b01      	ldr	r3, [sp, #4]
 800ac1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac20:	0d1b      	lsrs	r3, r3, #20
 800ac22:	051b      	lsls	r3, r3, #20
 800ac24:	b12b      	cbz	r3, 800ac32 <_dtoa_r+0x7ba>
 800ac26:	9b05      	ldr	r3, [sp, #20]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	9305      	str	r3, [sp, #20]
 800ac2c:	f108 0801 	add.w	r8, r8, #1
 800ac30:	2301      	movs	r3, #1
 800ac32:	9307      	str	r3, [sp, #28]
 800ac34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d12a      	bne.n	800ac90 <_dtoa_r+0x818>
 800ac3a:	2001      	movs	r0, #1
 800ac3c:	e030      	b.n	800aca0 <_dtoa_r+0x828>
 800ac3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac40:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac44:	e795      	b.n	800ab72 <_dtoa_r+0x6fa>
 800ac46:	9b07      	ldr	r3, [sp, #28]
 800ac48:	f109 37ff 	add.w	r7, r9, #4294967295
 800ac4c:	42bb      	cmp	r3, r7
 800ac4e:	bfbf      	itttt	lt
 800ac50:	9b07      	ldrlt	r3, [sp, #28]
 800ac52:	9707      	strlt	r7, [sp, #28]
 800ac54:	1afa      	sublt	r2, r7, r3
 800ac56:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ac58:	bfbb      	ittet	lt
 800ac5a:	189b      	addlt	r3, r3, r2
 800ac5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ac5e:	1bdf      	subge	r7, r3, r7
 800ac60:	2700      	movlt	r7, #0
 800ac62:	f1b9 0f00 	cmp.w	r9, #0
 800ac66:	bfb5      	itete	lt
 800ac68:	9b05      	ldrlt	r3, [sp, #20]
 800ac6a:	9d05      	ldrge	r5, [sp, #20]
 800ac6c:	eba3 0509 	sublt.w	r5, r3, r9
 800ac70:	464b      	movge	r3, r9
 800ac72:	bfb8      	it	lt
 800ac74:	2300      	movlt	r3, #0
 800ac76:	e77e      	b.n	800ab76 <_dtoa_r+0x6fe>
 800ac78:	9f07      	ldr	r7, [sp, #28]
 800ac7a:	9d05      	ldr	r5, [sp, #20]
 800ac7c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ac7e:	e783      	b.n	800ab88 <_dtoa_r+0x710>
 800ac80:	9a07      	ldr	r2, [sp, #28]
 800ac82:	e7ab      	b.n	800abdc <_dtoa_r+0x764>
 800ac84:	2300      	movs	r3, #0
 800ac86:	e7d4      	b.n	800ac32 <_dtoa_r+0x7ba>
 800ac88:	9b00      	ldr	r3, [sp, #0]
 800ac8a:	e7d2      	b.n	800ac32 <_dtoa_r+0x7ba>
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	9307      	str	r3, [sp, #28]
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ac96:	6918      	ldr	r0, [r3, #16]
 800ac98:	f000 fa47 	bl	800b12a <__hi0bits>
 800ac9c:	f1c0 0020 	rsb	r0, r0, #32
 800aca0:	4440      	add	r0, r8
 800aca2:	f010 001f 	ands.w	r0, r0, #31
 800aca6:	d047      	beq.n	800ad38 <_dtoa_r+0x8c0>
 800aca8:	f1c0 0320 	rsb	r3, r0, #32
 800acac:	2b04      	cmp	r3, #4
 800acae:	dd3b      	ble.n	800ad28 <_dtoa_r+0x8b0>
 800acb0:	9b05      	ldr	r3, [sp, #20]
 800acb2:	f1c0 001c 	rsb	r0, r0, #28
 800acb6:	4403      	add	r3, r0
 800acb8:	9305      	str	r3, [sp, #20]
 800acba:	4405      	add	r5, r0
 800acbc:	4480      	add	r8, r0
 800acbe:	9b05      	ldr	r3, [sp, #20]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	dd05      	ble.n	800acd0 <_dtoa_r+0x858>
 800acc4:	461a      	mov	r2, r3
 800acc6:	9904      	ldr	r1, [sp, #16]
 800acc8:	4620      	mov	r0, r4
 800acca:	f000 fb69 	bl	800b3a0 <__lshift>
 800acce:	9004      	str	r0, [sp, #16]
 800acd0:	f1b8 0f00 	cmp.w	r8, #0
 800acd4:	dd05      	ble.n	800ace2 <_dtoa_r+0x86a>
 800acd6:	4639      	mov	r1, r7
 800acd8:	4642      	mov	r2, r8
 800acda:	4620      	mov	r0, r4
 800acdc:	f000 fb60 	bl	800b3a0 <__lshift>
 800ace0:	4607      	mov	r7, r0
 800ace2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ace4:	b353      	cbz	r3, 800ad3c <_dtoa_r+0x8c4>
 800ace6:	4639      	mov	r1, r7
 800ace8:	9804      	ldr	r0, [sp, #16]
 800acea:	f000 fbad 	bl	800b448 <__mcmp>
 800acee:	2800      	cmp	r0, #0
 800acf0:	da24      	bge.n	800ad3c <_dtoa_r+0x8c4>
 800acf2:	2300      	movs	r3, #0
 800acf4:	220a      	movs	r2, #10
 800acf6:	9904      	ldr	r1, [sp, #16]
 800acf8:	4620      	mov	r0, r4
 800acfa:	f000 f9db 	bl	800b0b4 <__multadd>
 800acfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad00:	9004      	str	r0, [sp, #16]
 800ad02:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	f000 814d 	beq.w	800afa6 <_dtoa_r+0xb2e>
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	4631      	mov	r1, r6
 800ad10:	220a      	movs	r2, #10
 800ad12:	4620      	mov	r0, r4
 800ad14:	f000 f9ce 	bl	800b0b4 <__multadd>
 800ad18:	9b02      	ldr	r3, [sp, #8]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	4606      	mov	r6, r0
 800ad1e:	dc4f      	bgt.n	800adc0 <_dtoa_r+0x948>
 800ad20:	9b06      	ldr	r3, [sp, #24]
 800ad22:	2b02      	cmp	r3, #2
 800ad24:	dd4c      	ble.n	800adc0 <_dtoa_r+0x948>
 800ad26:	e011      	b.n	800ad4c <_dtoa_r+0x8d4>
 800ad28:	d0c9      	beq.n	800acbe <_dtoa_r+0x846>
 800ad2a:	9a05      	ldr	r2, [sp, #20]
 800ad2c:	331c      	adds	r3, #28
 800ad2e:	441a      	add	r2, r3
 800ad30:	9205      	str	r2, [sp, #20]
 800ad32:	441d      	add	r5, r3
 800ad34:	4498      	add	r8, r3
 800ad36:	e7c2      	b.n	800acbe <_dtoa_r+0x846>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	e7f6      	b.n	800ad2a <_dtoa_r+0x8b2>
 800ad3c:	f1b9 0f00 	cmp.w	r9, #0
 800ad40:	dc38      	bgt.n	800adb4 <_dtoa_r+0x93c>
 800ad42:	9b06      	ldr	r3, [sp, #24]
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	dd35      	ble.n	800adb4 <_dtoa_r+0x93c>
 800ad48:	f8cd 9008 	str.w	r9, [sp, #8]
 800ad4c:	9b02      	ldr	r3, [sp, #8]
 800ad4e:	b963      	cbnz	r3, 800ad6a <_dtoa_r+0x8f2>
 800ad50:	4639      	mov	r1, r7
 800ad52:	2205      	movs	r2, #5
 800ad54:	4620      	mov	r0, r4
 800ad56:	f000 f9ad 	bl	800b0b4 <__multadd>
 800ad5a:	4601      	mov	r1, r0
 800ad5c:	4607      	mov	r7, r0
 800ad5e:	9804      	ldr	r0, [sp, #16]
 800ad60:	f000 fb72 	bl	800b448 <__mcmp>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	f73f adcc 	bgt.w	800a902 <_dtoa_r+0x48a>
 800ad6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad6c:	465d      	mov	r5, fp
 800ad6e:	ea6f 0a03 	mvn.w	sl, r3
 800ad72:	f04f 0900 	mov.w	r9, #0
 800ad76:	4639      	mov	r1, r7
 800ad78:	4620      	mov	r0, r4
 800ad7a:	f000 f984 	bl	800b086 <_Bfree>
 800ad7e:	2e00      	cmp	r6, #0
 800ad80:	f43f aeb7 	beq.w	800aaf2 <_dtoa_r+0x67a>
 800ad84:	f1b9 0f00 	cmp.w	r9, #0
 800ad88:	d005      	beq.n	800ad96 <_dtoa_r+0x91e>
 800ad8a:	45b1      	cmp	r9, r6
 800ad8c:	d003      	beq.n	800ad96 <_dtoa_r+0x91e>
 800ad8e:	4649      	mov	r1, r9
 800ad90:	4620      	mov	r0, r4
 800ad92:	f000 f978 	bl	800b086 <_Bfree>
 800ad96:	4631      	mov	r1, r6
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f000 f974 	bl	800b086 <_Bfree>
 800ad9e:	e6a8      	b.n	800aaf2 <_dtoa_r+0x67a>
 800ada0:	2700      	movs	r7, #0
 800ada2:	463e      	mov	r6, r7
 800ada4:	e7e1      	b.n	800ad6a <_dtoa_r+0x8f2>
 800ada6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800adaa:	463e      	mov	r6, r7
 800adac:	e5a9      	b.n	800a902 <_dtoa_r+0x48a>
 800adae:	bf00      	nop
 800adb0:	40240000 	.word	0x40240000
 800adb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adb6:	f8cd 9008 	str.w	r9, [sp, #8]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f000 80fa 	beq.w	800afb4 <_dtoa_r+0xb3c>
 800adc0:	2d00      	cmp	r5, #0
 800adc2:	dd05      	ble.n	800add0 <_dtoa_r+0x958>
 800adc4:	4631      	mov	r1, r6
 800adc6:	462a      	mov	r2, r5
 800adc8:	4620      	mov	r0, r4
 800adca:	f000 fae9 	bl	800b3a0 <__lshift>
 800adce:	4606      	mov	r6, r0
 800add0:	9b07      	ldr	r3, [sp, #28]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d04c      	beq.n	800ae70 <_dtoa_r+0x9f8>
 800add6:	6871      	ldr	r1, [r6, #4]
 800add8:	4620      	mov	r0, r4
 800adda:	f000 f920 	bl	800b01e <_Balloc>
 800adde:	6932      	ldr	r2, [r6, #16]
 800ade0:	3202      	adds	r2, #2
 800ade2:	4605      	mov	r5, r0
 800ade4:	0092      	lsls	r2, r2, #2
 800ade6:	f106 010c 	add.w	r1, r6, #12
 800adea:	300c      	adds	r0, #12
 800adec:	f000 f90a 	bl	800b004 <memcpy>
 800adf0:	2201      	movs	r2, #1
 800adf2:	4629      	mov	r1, r5
 800adf4:	4620      	mov	r0, r4
 800adf6:	f000 fad3 	bl	800b3a0 <__lshift>
 800adfa:	9b00      	ldr	r3, [sp, #0]
 800adfc:	f8cd b014 	str.w	fp, [sp, #20]
 800ae00:	f003 0301 	and.w	r3, r3, #1
 800ae04:	46b1      	mov	r9, r6
 800ae06:	9307      	str	r3, [sp, #28]
 800ae08:	4606      	mov	r6, r0
 800ae0a:	4639      	mov	r1, r7
 800ae0c:	9804      	ldr	r0, [sp, #16]
 800ae0e:	f7ff faa5 	bl	800a35c <quorem>
 800ae12:	4649      	mov	r1, r9
 800ae14:	4605      	mov	r5, r0
 800ae16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ae1a:	9804      	ldr	r0, [sp, #16]
 800ae1c:	f000 fb14 	bl	800b448 <__mcmp>
 800ae20:	4632      	mov	r2, r6
 800ae22:	9000      	str	r0, [sp, #0]
 800ae24:	4639      	mov	r1, r7
 800ae26:	4620      	mov	r0, r4
 800ae28:	f000 fb28 	bl	800b47c <__mdiff>
 800ae2c:	68c3      	ldr	r3, [r0, #12]
 800ae2e:	4602      	mov	r2, r0
 800ae30:	bb03      	cbnz	r3, 800ae74 <_dtoa_r+0x9fc>
 800ae32:	4601      	mov	r1, r0
 800ae34:	9008      	str	r0, [sp, #32]
 800ae36:	9804      	ldr	r0, [sp, #16]
 800ae38:	f000 fb06 	bl	800b448 <__mcmp>
 800ae3c:	9a08      	ldr	r2, [sp, #32]
 800ae3e:	4603      	mov	r3, r0
 800ae40:	4611      	mov	r1, r2
 800ae42:	4620      	mov	r0, r4
 800ae44:	9308      	str	r3, [sp, #32]
 800ae46:	f000 f91e 	bl	800b086 <_Bfree>
 800ae4a:	9b08      	ldr	r3, [sp, #32]
 800ae4c:	b9a3      	cbnz	r3, 800ae78 <_dtoa_r+0xa00>
 800ae4e:	9a06      	ldr	r2, [sp, #24]
 800ae50:	b992      	cbnz	r2, 800ae78 <_dtoa_r+0xa00>
 800ae52:	9a07      	ldr	r2, [sp, #28]
 800ae54:	b982      	cbnz	r2, 800ae78 <_dtoa_r+0xa00>
 800ae56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ae5a:	d029      	beq.n	800aeb0 <_dtoa_r+0xa38>
 800ae5c:	9b00      	ldr	r3, [sp, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	dd01      	ble.n	800ae66 <_dtoa_r+0x9ee>
 800ae62:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ae66:	9b05      	ldr	r3, [sp, #20]
 800ae68:	1c5d      	adds	r5, r3, #1
 800ae6a:	f883 8000 	strb.w	r8, [r3]
 800ae6e:	e782      	b.n	800ad76 <_dtoa_r+0x8fe>
 800ae70:	4630      	mov	r0, r6
 800ae72:	e7c2      	b.n	800adfa <_dtoa_r+0x982>
 800ae74:	2301      	movs	r3, #1
 800ae76:	e7e3      	b.n	800ae40 <_dtoa_r+0x9c8>
 800ae78:	9a00      	ldr	r2, [sp, #0]
 800ae7a:	2a00      	cmp	r2, #0
 800ae7c:	db04      	blt.n	800ae88 <_dtoa_r+0xa10>
 800ae7e:	d125      	bne.n	800aecc <_dtoa_r+0xa54>
 800ae80:	9a06      	ldr	r2, [sp, #24]
 800ae82:	bb1a      	cbnz	r2, 800aecc <_dtoa_r+0xa54>
 800ae84:	9a07      	ldr	r2, [sp, #28]
 800ae86:	bb0a      	cbnz	r2, 800aecc <_dtoa_r+0xa54>
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	ddec      	ble.n	800ae66 <_dtoa_r+0x9ee>
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	9904      	ldr	r1, [sp, #16]
 800ae90:	4620      	mov	r0, r4
 800ae92:	f000 fa85 	bl	800b3a0 <__lshift>
 800ae96:	4639      	mov	r1, r7
 800ae98:	9004      	str	r0, [sp, #16]
 800ae9a:	f000 fad5 	bl	800b448 <__mcmp>
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	dc03      	bgt.n	800aeaa <_dtoa_r+0xa32>
 800aea2:	d1e0      	bne.n	800ae66 <_dtoa_r+0x9ee>
 800aea4:	f018 0f01 	tst.w	r8, #1
 800aea8:	d0dd      	beq.n	800ae66 <_dtoa_r+0x9ee>
 800aeaa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aeae:	d1d8      	bne.n	800ae62 <_dtoa_r+0x9ea>
 800aeb0:	9b05      	ldr	r3, [sp, #20]
 800aeb2:	9a05      	ldr	r2, [sp, #20]
 800aeb4:	1c5d      	adds	r5, r3, #1
 800aeb6:	2339      	movs	r3, #57	; 0x39
 800aeb8:	7013      	strb	r3, [r2, #0]
 800aeba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aebe:	2b39      	cmp	r3, #57	; 0x39
 800aec0:	f105 32ff 	add.w	r2, r5, #4294967295
 800aec4:	d04f      	beq.n	800af66 <_dtoa_r+0xaee>
 800aec6:	3301      	adds	r3, #1
 800aec8:	7013      	strb	r3, [r2, #0]
 800aeca:	e754      	b.n	800ad76 <_dtoa_r+0x8fe>
 800aecc:	9a05      	ldr	r2, [sp, #20]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	f102 0501 	add.w	r5, r2, #1
 800aed4:	dd06      	ble.n	800aee4 <_dtoa_r+0xa6c>
 800aed6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aeda:	d0e9      	beq.n	800aeb0 <_dtoa_r+0xa38>
 800aedc:	f108 0801 	add.w	r8, r8, #1
 800aee0:	9b05      	ldr	r3, [sp, #20]
 800aee2:	e7c2      	b.n	800ae6a <_dtoa_r+0x9f2>
 800aee4:	9a02      	ldr	r2, [sp, #8]
 800aee6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800aeea:	eba5 030b 	sub.w	r3, r5, fp
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d021      	beq.n	800af36 <_dtoa_r+0xabe>
 800aef2:	2300      	movs	r3, #0
 800aef4:	220a      	movs	r2, #10
 800aef6:	9904      	ldr	r1, [sp, #16]
 800aef8:	4620      	mov	r0, r4
 800aefa:	f000 f8db 	bl	800b0b4 <__multadd>
 800aefe:	45b1      	cmp	r9, r6
 800af00:	9004      	str	r0, [sp, #16]
 800af02:	f04f 0300 	mov.w	r3, #0
 800af06:	f04f 020a 	mov.w	r2, #10
 800af0a:	4649      	mov	r1, r9
 800af0c:	4620      	mov	r0, r4
 800af0e:	d105      	bne.n	800af1c <_dtoa_r+0xaa4>
 800af10:	f000 f8d0 	bl	800b0b4 <__multadd>
 800af14:	4681      	mov	r9, r0
 800af16:	4606      	mov	r6, r0
 800af18:	9505      	str	r5, [sp, #20]
 800af1a:	e776      	b.n	800ae0a <_dtoa_r+0x992>
 800af1c:	f000 f8ca 	bl	800b0b4 <__multadd>
 800af20:	4631      	mov	r1, r6
 800af22:	4681      	mov	r9, r0
 800af24:	2300      	movs	r3, #0
 800af26:	220a      	movs	r2, #10
 800af28:	4620      	mov	r0, r4
 800af2a:	f000 f8c3 	bl	800b0b4 <__multadd>
 800af2e:	4606      	mov	r6, r0
 800af30:	e7f2      	b.n	800af18 <_dtoa_r+0xaa0>
 800af32:	f04f 0900 	mov.w	r9, #0
 800af36:	2201      	movs	r2, #1
 800af38:	9904      	ldr	r1, [sp, #16]
 800af3a:	4620      	mov	r0, r4
 800af3c:	f000 fa30 	bl	800b3a0 <__lshift>
 800af40:	4639      	mov	r1, r7
 800af42:	9004      	str	r0, [sp, #16]
 800af44:	f000 fa80 	bl	800b448 <__mcmp>
 800af48:	2800      	cmp	r0, #0
 800af4a:	dcb6      	bgt.n	800aeba <_dtoa_r+0xa42>
 800af4c:	d102      	bne.n	800af54 <_dtoa_r+0xadc>
 800af4e:	f018 0f01 	tst.w	r8, #1
 800af52:	d1b2      	bne.n	800aeba <_dtoa_r+0xa42>
 800af54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800af58:	2b30      	cmp	r3, #48	; 0x30
 800af5a:	f105 32ff 	add.w	r2, r5, #4294967295
 800af5e:	f47f af0a 	bne.w	800ad76 <_dtoa_r+0x8fe>
 800af62:	4615      	mov	r5, r2
 800af64:	e7f6      	b.n	800af54 <_dtoa_r+0xadc>
 800af66:	4593      	cmp	fp, r2
 800af68:	d105      	bne.n	800af76 <_dtoa_r+0xafe>
 800af6a:	2331      	movs	r3, #49	; 0x31
 800af6c:	f10a 0a01 	add.w	sl, sl, #1
 800af70:	f88b 3000 	strb.w	r3, [fp]
 800af74:	e6ff      	b.n	800ad76 <_dtoa_r+0x8fe>
 800af76:	4615      	mov	r5, r2
 800af78:	e79f      	b.n	800aeba <_dtoa_r+0xa42>
 800af7a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800afe0 <_dtoa_r+0xb68>
 800af7e:	e007      	b.n	800af90 <_dtoa_r+0xb18>
 800af80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af82:	f8df b060 	ldr.w	fp, [pc, #96]	; 800afe4 <_dtoa_r+0xb6c>
 800af86:	b11b      	cbz	r3, 800af90 <_dtoa_r+0xb18>
 800af88:	f10b 0308 	add.w	r3, fp, #8
 800af8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af8e:	6013      	str	r3, [r2, #0]
 800af90:	4658      	mov	r0, fp
 800af92:	b017      	add	sp, #92	; 0x5c
 800af94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af98:	9b06      	ldr	r3, [sp, #24]
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	f77f ae35 	ble.w	800ac0a <_dtoa_r+0x792>
 800afa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afa2:	9307      	str	r3, [sp, #28]
 800afa4:	e649      	b.n	800ac3a <_dtoa_r+0x7c2>
 800afa6:	9b02      	ldr	r3, [sp, #8]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	dc03      	bgt.n	800afb4 <_dtoa_r+0xb3c>
 800afac:	9b06      	ldr	r3, [sp, #24]
 800afae:	2b02      	cmp	r3, #2
 800afb0:	f73f aecc 	bgt.w	800ad4c <_dtoa_r+0x8d4>
 800afb4:	465d      	mov	r5, fp
 800afb6:	4639      	mov	r1, r7
 800afb8:	9804      	ldr	r0, [sp, #16]
 800afba:	f7ff f9cf 	bl	800a35c <quorem>
 800afbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800afc2:	f805 8b01 	strb.w	r8, [r5], #1
 800afc6:	9a02      	ldr	r2, [sp, #8]
 800afc8:	eba5 030b 	sub.w	r3, r5, fp
 800afcc:	429a      	cmp	r2, r3
 800afce:	ddb0      	ble.n	800af32 <_dtoa_r+0xaba>
 800afd0:	2300      	movs	r3, #0
 800afd2:	220a      	movs	r2, #10
 800afd4:	9904      	ldr	r1, [sp, #16]
 800afd6:	4620      	mov	r0, r4
 800afd8:	f000 f86c 	bl	800b0b4 <__multadd>
 800afdc:	9004      	str	r0, [sp, #16]
 800afde:	e7ea      	b.n	800afb6 <_dtoa_r+0xb3e>
 800afe0:	0800ba98 	.word	0x0800ba98
 800afe4:	0800babc 	.word	0x0800babc

0800afe8 <_localeconv_r>:
 800afe8:	4b04      	ldr	r3, [pc, #16]	; (800affc <_localeconv_r+0x14>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	6a18      	ldr	r0, [r3, #32]
 800afee:	4b04      	ldr	r3, [pc, #16]	; (800b000 <_localeconv_r+0x18>)
 800aff0:	2800      	cmp	r0, #0
 800aff2:	bf08      	it	eq
 800aff4:	4618      	moveq	r0, r3
 800aff6:	30f0      	adds	r0, #240	; 0xf0
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	2000018c 	.word	0x2000018c
 800b000:	200001f0 	.word	0x200001f0

0800b004 <memcpy>:
 800b004:	b510      	push	{r4, lr}
 800b006:	1e43      	subs	r3, r0, #1
 800b008:	440a      	add	r2, r1
 800b00a:	4291      	cmp	r1, r2
 800b00c:	d100      	bne.n	800b010 <memcpy+0xc>
 800b00e:	bd10      	pop	{r4, pc}
 800b010:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b014:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b018:	e7f7      	b.n	800b00a <memcpy+0x6>

0800b01a <__malloc_lock>:
 800b01a:	4770      	bx	lr

0800b01c <__malloc_unlock>:
 800b01c:	4770      	bx	lr

0800b01e <_Balloc>:
 800b01e:	b570      	push	{r4, r5, r6, lr}
 800b020:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b022:	4604      	mov	r4, r0
 800b024:	460e      	mov	r6, r1
 800b026:	b93d      	cbnz	r5, 800b038 <_Balloc+0x1a>
 800b028:	2010      	movs	r0, #16
 800b02a:	f7fe fc37 	bl	800989c <malloc>
 800b02e:	6260      	str	r0, [r4, #36]	; 0x24
 800b030:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b034:	6005      	str	r5, [r0, #0]
 800b036:	60c5      	str	r5, [r0, #12]
 800b038:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b03a:	68eb      	ldr	r3, [r5, #12]
 800b03c:	b183      	cbz	r3, 800b060 <_Balloc+0x42>
 800b03e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b046:	b9b8      	cbnz	r0, 800b078 <_Balloc+0x5a>
 800b048:	2101      	movs	r1, #1
 800b04a:	fa01 f506 	lsl.w	r5, r1, r6
 800b04e:	1d6a      	adds	r2, r5, #5
 800b050:	0092      	lsls	r2, r2, #2
 800b052:	4620      	mov	r0, r4
 800b054:	f000 fabe 	bl	800b5d4 <_calloc_r>
 800b058:	b160      	cbz	r0, 800b074 <_Balloc+0x56>
 800b05a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b05e:	e00e      	b.n	800b07e <_Balloc+0x60>
 800b060:	2221      	movs	r2, #33	; 0x21
 800b062:	2104      	movs	r1, #4
 800b064:	4620      	mov	r0, r4
 800b066:	f000 fab5 	bl	800b5d4 <_calloc_r>
 800b06a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b06c:	60e8      	str	r0, [r5, #12]
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d1e4      	bne.n	800b03e <_Balloc+0x20>
 800b074:	2000      	movs	r0, #0
 800b076:	bd70      	pop	{r4, r5, r6, pc}
 800b078:	6802      	ldr	r2, [r0, #0]
 800b07a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b07e:	2300      	movs	r3, #0
 800b080:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b084:	e7f7      	b.n	800b076 <_Balloc+0x58>

0800b086 <_Bfree>:
 800b086:	b570      	push	{r4, r5, r6, lr}
 800b088:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b08a:	4606      	mov	r6, r0
 800b08c:	460d      	mov	r5, r1
 800b08e:	b93c      	cbnz	r4, 800b0a0 <_Bfree+0x1a>
 800b090:	2010      	movs	r0, #16
 800b092:	f7fe fc03 	bl	800989c <malloc>
 800b096:	6270      	str	r0, [r6, #36]	; 0x24
 800b098:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b09c:	6004      	str	r4, [r0, #0]
 800b09e:	60c4      	str	r4, [r0, #12]
 800b0a0:	b13d      	cbz	r5, 800b0b2 <_Bfree+0x2c>
 800b0a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b0a4:	686a      	ldr	r2, [r5, #4]
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0ac:	6029      	str	r1, [r5, #0]
 800b0ae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b0b2:	bd70      	pop	{r4, r5, r6, pc}

0800b0b4 <__multadd>:
 800b0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0b8:	690d      	ldr	r5, [r1, #16]
 800b0ba:	461f      	mov	r7, r3
 800b0bc:	4606      	mov	r6, r0
 800b0be:	460c      	mov	r4, r1
 800b0c0:	f101 0c14 	add.w	ip, r1, #20
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	f8dc 0000 	ldr.w	r0, [ip]
 800b0ca:	b281      	uxth	r1, r0
 800b0cc:	fb02 7101 	mla	r1, r2, r1, r7
 800b0d0:	0c0f      	lsrs	r7, r1, #16
 800b0d2:	0c00      	lsrs	r0, r0, #16
 800b0d4:	fb02 7000 	mla	r0, r2, r0, r7
 800b0d8:	b289      	uxth	r1, r1
 800b0da:	3301      	adds	r3, #1
 800b0dc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b0e0:	429d      	cmp	r5, r3
 800b0e2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b0e6:	f84c 1b04 	str.w	r1, [ip], #4
 800b0ea:	dcec      	bgt.n	800b0c6 <__multadd+0x12>
 800b0ec:	b1d7      	cbz	r7, 800b124 <__multadd+0x70>
 800b0ee:	68a3      	ldr	r3, [r4, #8]
 800b0f0:	42ab      	cmp	r3, r5
 800b0f2:	dc12      	bgt.n	800b11a <__multadd+0x66>
 800b0f4:	6861      	ldr	r1, [r4, #4]
 800b0f6:	4630      	mov	r0, r6
 800b0f8:	3101      	adds	r1, #1
 800b0fa:	f7ff ff90 	bl	800b01e <_Balloc>
 800b0fe:	6922      	ldr	r2, [r4, #16]
 800b100:	3202      	adds	r2, #2
 800b102:	f104 010c 	add.w	r1, r4, #12
 800b106:	4680      	mov	r8, r0
 800b108:	0092      	lsls	r2, r2, #2
 800b10a:	300c      	adds	r0, #12
 800b10c:	f7ff ff7a 	bl	800b004 <memcpy>
 800b110:	4621      	mov	r1, r4
 800b112:	4630      	mov	r0, r6
 800b114:	f7ff ffb7 	bl	800b086 <_Bfree>
 800b118:	4644      	mov	r4, r8
 800b11a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b11e:	3501      	adds	r5, #1
 800b120:	615f      	str	r7, [r3, #20]
 800b122:	6125      	str	r5, [r4, #16]
 800b124:	4620      	mov	r0, r4
 800b126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b12a <__hi0bits>:
 800b12a:	0c02      	lsrs	r2, r0, #16
 800b12c:	0412      	lsls	r2, r2, #16
 800b12e:	4603      	mov	r3, r0
 800b130:	b9b2      	cbnz	r2, 800b160 <__hi0bits+0x36>
 800b132:	0403      	lsls	r3, r0, #16
 800b134:	2010      	movs	r0, #16
 800b136:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b13a:	bf04      	itt	eq
 800b13c:	021b      	lsleq	r3, r3, #8
 800b13e:	3008      	addeq	r0, #8
 800b140:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b144:	bf04      	itt	eq
 800b146:	011b      	lsleq	r3, r3, #4
 800b148:	3004      	addeq	r0, #4
 800b14a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b14e:	bf04      	itt	eq
 800b150:	009b      	lsleq	r3, r3, #2
 800b152:	3002      	addeq	r0, #2
 800b154:	2b00      	cmp	r3, #0
 800b156:	db06      	blt.n	800b166 <__hi0bits+0x3c>
 800b158:	005b      	lsls	r3, r3, #1
 800b15a:	d503      	bpl.n	800b164 <__hi0bits+0x3a>
 800b15c:	3001      	adds	r0, #1
 800b15e:	4770      	bx	lr
 800b160:	2000      	movs	r0, #0
 800b162:	e7e8      	b.n	800b136 <__hi0bits+0xc>
 800b164:	2020      	movs	r0, #32
 800b166:	4770      	bx	lr

0800b168 <__lo0bits>:
 800b168:	6803      	ldr	r3, [r0, #0]
 800b16a:	f013 0207 	ands.w	r2, r3, #7
 800b16e:	4601      	mov	r1, r0
 800b170:	d00b      	beq.n	800b18a <__lo0bits+0x22>
 800b172:	07da      	lsls	r2, r3, #31
 800b174:	d423      	bmi.n	800b1be <__lo0bits+0x56>
 800b176:	0798      	lsls	r0, r3, #30
 800b178:	bf49      	itett	mi
 800b17a:	085b      	lsrmi	r3, r3, #1
 800b17c:	089b      	lsrpl	r3, r3, #2
 800b17e:	2001      	movmi	r0, #1
 800b180:	600b      	strmi	r3, [r1, #0]
 800b182:	bf5c      	itt	pl
 800b184:	600b      	strpl	r3, [r1, #0]
 800b186:	2002      	movpl	r0, #2
 800b188:	4770      	bx	lr
 800b18a:	b298      	uxth	r0, r3
 800b18c:	b9a8      	cbnz	r0, 800b1ba <__lo0bits+0x52>
 800b18e:	0c1b      	lsrs	r3, r3, #16
 800b190:	2010      	movs	r0, #16
 800b192:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b196:	bf04      	itt	eq
 800b198:	0a1b      	lsreq	r3, r3, #8
 800b19a:	3008      	addeq	r0, #8
 800b19c:	071a      	lsls	r2, r3, #28
 800b19e:	bf04      	itt	eq
 800b1a0:	091b      	lsreq	r3, r3, #4
 800b1a2:	3004      	addeq	r0, #4
 800b1a4:	079a      	lsls	r2, r3, #30
 800b1a6:	bf04      	itt	eq
 800b1a8:	089b      	lsreq	r3, r3, #2
 800b1aa:	3002      	addeq	r0, #2
 800b1ac:	07da      	lsls	r2, r3, #31
 800b1ae:	d402      	bmi.n	800b1b6 <__lo0bits+0x4e>
 800b1b0:	085b      	lsrs	r3, r3, #1
 800b1b2:	d006      	beq.n	800b1c2 <__lo0bits+0x5a>
 800b1b4:	3001      	adds	r0, #1
 800b1b6:	600b      	str	r3, [r1, #0]
 800b1b8:	4770      	bx	lr
 800b1ba:	4610      	mov	r0, r2
 800b1bc:	e7e9      	b.n	800b192 <__lo0bits+0x2a>
 800b1be:	2000      	movs	r0, #0
 800b1c0:	4770      	bx	lr
 800b1c2:	2020      	movs	r0, #32
 800b1c4:	4770      	bx	lr

0800b1c6 <__i2b>:
 800b1c6:	b510      	push	{r4, lr}
 800b1c8:	460c      	mov	r4, r1
 800b1ca:	2101      	movs	r1, #1
 800b1cc:	f7ff ff27 	bl	800b01e <_Balloc>
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	6144      	str	r4, [r0, #20]
 800b1d4:	6102      	str	r2, [r0, #16]
 800b1d6:	bd10      	pop	{r4, pc}

0800b1d8 <__multiply>:
 800b1d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1dc:	4614      	mov	r4, r2
 800b1de:	690a      	ldr	r2, [r1, #16]
 800b1e0:	6923      	ldr	r3, [r4, #16]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	bfb8      	it	lt
 800b1e6:	460b      	movlt	r3, r1
 800b1e8:	4688      	mov	r8, r1
 800b1ea:	bfbc      	itt	lt
 800b1ec:	46a0      	movlt	r8, r4
 800b1ee:	461c      	movlt	r4, r3
 800b1f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b1f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b1f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b1fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b200:	eb07 0609 	add.w	r6, r7, r9
 800b204:	42b3      	cmp	r3, r6
 800b206:	bfb8      	it	lt
 800b208:	3101      	addlt	r1, #1
 800b20a:	f7ff ff08 	bl	800b01e <_Balloc>
 800b20e:	f100 0514 	add.w	r5, r0, #20
 800b212:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b216:	462b      	mov	r3, r5
 800b218:	2200      	movs	r2, #0
 800b21a:	4573      	cmp	r3, lr
 800b21c:	d316      	bcc.n	800b24c <__multiply+0x74>
 800b21e:	f104 0214 	add.w	r2, r4, #20
 800b222:	f108 0114 	add.w	r1, r8, #20
 800b226:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b22a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	9b00      	ldr	r3, [sp, #0]
 800b232:	9201      	str	r2, [sp, #4]
 800b234:	4293      	cmp	r3, r2
 800b236:	d80c      	bhi.n	800b252 <__multiply+0x7a>
 800b238:	2e00      	cmp	r6, #0
 800b23a:	dd03      	ble.n	800b244 <__multiply+0x6c>
 800b23c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b240:	2b00      	cmp	r3, #0
 800b242:	d05d      	beq.n	800b300 <__multiply+0x128>
 800b244:	6106      	str	r6, [r0, #16]
 800b246:	b003      	add	sp, #12
 800b248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b24c:	f843 2b04 	str.w	r2, [r3], #4
 800b250:	e7e3      	b.n	800b21a <__multiply+0x42>
 800b252:	f8b2 b000 	ldrh.w	fp, [r2]
 800b256:	f1bb 0f00 	cmp.w	fp, #0
 800b25a:	d023      	beq.n	800b2a4 <__multiply+0xcc>
 800b25c:	4689      	mov	r9, r1
 800b25e:	46ac      	mov	ip, r5
 800b260:	f04f 0800 	mov.w	r8, #0
 800b264:	f859 4b04 	ldr.w	r4, [r9], #4
 800b268:	f8dc a000 	ldr.w	sl, [ip]
 800b26c:	b2a3      	uxth	r3, r4
 800b26e:	fa1f fa8a 	uxth.w	sl, sl
 800b272:	fb0b a303 	mla	r3, fp, r3, sl
 800b276:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b27a:	f8dc 4000 	ldr.w	r4, [ip]
 800b27e:	4443      	add	r3, r8
 800b280:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b284:	fb0b 840a 	mla	r4, fp, sl, r8
 800b288:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b28c:	46e2      	mov	sl, ip
 800b28e:	b29b      	uxth	r3, r3
 800b290:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b294:	454f      	cmp	r7, r9
 800b296:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b29a:	f84a 3b04 	str.w	r3, [sl], #4
 800b29e:	d82b      	bhi.n	800b2f8 <__multiply+0x120>
 800b2a0:	f8cc 8004 	str.w	r8, [ip, #4]
 800b2a4:	9b01      	ldr	r3, [sp, #4]
 800b2a6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b2aa:	3204      	adds	r2, #4
 800b2ac:	f1ba 0f00 	cmp.w	sl, #0
 800b2b0:	d020      	beq.n	800b2f4 <__multiply+0x11c>
 800b2b2:	682b      	ldr	r3, [r5, #0]
 800b2b4:	4689      	mov	r9, r1
 800b2b6:	46a8      	mov	r8, r5
 800b2b8:	f04f 0b00 	mov.w	fp, #0
 800b2bc:	f8b9 c000 	ldrh.w	ip, [r9]
 800b2c0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b2c4:	fb0a 440c 	mla	r4, sl, ip, r4
 800b2c8:	445c      	add	r4, fp
 800b2ca:	46c4      	mov	ip, r8
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b2d2:	f84c 3b04 	str.w	r3, [ip], #4
 800b2d6:	f859 3b04 	ldr.w	r3, [r9], #4
 800b2da:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b2de:	0c1b      	lsrs	r3, r3, #16
 800b2e0:	fb0a b303 	mla	r3, sl, r3, fp
 800b2e4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b2e8:	454f      	cmp	r7, r9
 800b2ea:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b2ee:	d805      	bhi.n	800b2fc <__multiply+0x124>
 800b2f0:	f8c8 3004 	str.w	r3, [r8, #4]
 800b2f4:	3504      	adds	r5, #4
 800b2f6:	e79b      	b.n	800b230 <__multiply+0x58>
 800b2f8:	46d4      	mov	ip, sl
 800b2fa:	e7b3      	b.n	800b264 <__multiply+0x8c>
 800b2fc:	46e0      	mov	r8, ip
 800b2fe:	e7dd      	b.n	800b2bc <__multiply+0xe4>
 800b300:	3e01      	subs	r6, #1
 800b302:	e799      	b.n	800b238 <__multiply+0x60>

0800b304 <__pow5mult>:
 800b304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b308:	4615      	mov	r5, r2
 800b30a:	f012 0203 	ands.w	r2, r2, #3
 800b30e:	4606      	mov	r6, r0
 800b310:	460f      	mov	r7, r1
 800b312:	d007      	beq.n	800b324 <__pow5mult+0x20>
 800b314:	3a01      	subs	r2, #1
 800b316:	4c21      	ldr	r4, [pc, #132]	; (800b39c <__pow5mult+0x98>)
 800b318:	2300      	movs	r3, #0
 800b31a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b31e:	f7ff fec9 	bl	800b0b4 <__multadd>
 800b322:	4607      	mov	r7, r0
 800b324:	10ad      	asrs	r5, r5, #2
 800b326:	d035      	beq.n	800b394 <__pow5mult+0x90>
 800b328:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b32a:	b93c      	cbnz	r4, 800b33c <__pow5mult+0x38>
 800b32c:	2010      	movs	r0, #16
 800b32e:	f7fe fab5 	bl	800989c <malloc>
 800b332:	6270      	str	r0, [r6, #36]	; 0x24
 800b334:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b338:	6004      	str	r4, [r0, #0]
 800b33a:	60c4      	str	r4, [r0, #12]
 800b33c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b340:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b344:	b94c      	cbnz	r4, 800b35a <__pow5mult+0x56>
 800b346:	f240 2171 	movw	r1, #625	; 0x271
 800b34a:	4630      	mov	r0, r6
 800b34c:	f7ff ff3b 	bl	800b1c6 <__i2b>
 800b350:	2300      	movs	r3, #0
 800b352:	f8c8 0008 	str.w	r0, [r8, #8]
 800b356:	4604      	mov	r4, r0
 800b358:	6003      	str	r3, [r0, #0]
 800b35a:	f04f 0800 	mov.w	r8, #0
 800b35e:	07eb      	lsls	r3, r5, #31
 800b360:	d50a      	bpl.n	800b378 <__pow5mult+0x74>
 800b362:	4639      	mov	r1, r7
 800b364:	4622      	mov	r2, r4
 800b366:	4630      	mov	r0, r6
 800b368:	f7ff ff36 	bl	800b1d8 <__multiply>
 800b36c:	4639      	mov	r1, r7
 800b36e:	4681      	mov	r9, r0
 800b370:	4630      	mov	r0, r6
 800b372:	f7ff fe88 	bl	800b086 <_Bfree>
 800b376:	464f      	mov	r7, r9
 800b378:	106d      	asrs	r5, r5, #1
 800b37a:	d00b      	beq.n	800b394 <__pow5mult+0x90>
 800b37c:	6820      	ldr	r0, [r4, #0]
 800b37e:	b938      	cbnz	r0, 800b390 <__pow5mult+0x8c>
 800b380:	4622      	mov	r2, r4
 800b382:	4621      	mov	r1, r4
 800b384:	4630      	mov	r0, r6
 800b386:	f7ff ff27 	bl	800b1d8 <__multiply>
 800b38a:	6020      	str	r0, [r4, #0]
 800b38c:	f8c0 8000 	str.w	r8, [r0]
 800b390:	4604      	mov	r4, r0
 800b392:	e7e4      	b.n	800b35e <__pow5mult+0x5a>
 800b394:	4638      	mov	r0, r7
 800b396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b39a:	bf00      	nop
 800b39c:	0800bc20 	.word	0x0800bc20

0800b3a0 <__lshift>:
 800b3a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3a4:	460c      	mov	r4, r1
 800b3a6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3aa:	6923      	ldr	r3, [r4, #16]
 800b3ac:	6849      	ldr	r1, [r1, #4]
 800b3ae:	eb0a 0903 	add.w	r9, sl, r3
 800b3b2:	68a3      	ldr	r3, [r4, #8]
 800b3b4:	4607      	mov	r7, r0
 800b3b6:	4616      	mov	r6, r2
 800b3b8:	f109 0501 	add.w	r5, r9, #1
 800b3bc:	42ab      	cmp	r3, r5
 800b3be:	db32      	blt.n	800b426 <__lshift+0x86>
 800b3c0:	4638      	mov	r0, r7
 800b3c2:	f7ff fe2c 	bl	800b01e <_Balloc>
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	4680      	mov	r8, r0
 800b3ca:	f100 0114 	add.w	r1, r0, #20
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	4553      	cmp	r3, sl
 800b3d2:	db2b      	blt.n	800b42c <__lshift+0x8c>
 800b3d4:	6920      	ldr	r0, [r4, #16]
 800b3d6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3da:	f104 0314 	add.w	r3, r4, #20
 800b3de:	f016 021f 	ands.w	r2, r6, #31
 800b3e2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3e6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b3ea:	d025      	beq.n	800b438 <__lshift+0x98>
 800b3ec:	f1c2 0e20 	rsb	lr, r2, #32
 800b3f0:	2000      	movs	r0, #0
 800b3f2:	681e      	ldr	r6, [r3, #0]
 800b3f4:	468a      	mov	sl, r1
 800b3f6:	4096      	lsls	r6, r2
 800b3f8:	4330      	orrs	r0, r6
 800b3fa:	f84a 0b04 	str.w	r0, [sl], #4
 800b3fe:	f853 0b04 	ldr.w	r0, [r3], #4
 800b402:	459c      	cmp	ip, r3
 800b404:	fa20 f00e 	lsr.w	r0, r0, lr
 800b408:	d814      	bhi.n	800b434 <__lshift+0x94>
 800b40a:	6048      	str	r0, [r1, #4]
 800b40c:	b108      	cbz	r0, 800b412 <__lshift+0x72>
 800b40e:	f109 0502 	add.w	r5, r9, #2
 800b412:	3d01      	subs	r5, #1
 800b414:	4638      	mov	r0, r7
 800b416:	f8c8 5010 	str.w	r5, [r8, #16]
 800b41a:	4621      	mov	r1, r4
 800b41c:	f7ff fe33 	bl	800b086 <_Bfree>
 800b420:	4640      	mov	r0, r8
 800b422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b426:	3101      	adds	r1, #1
 800b428:	005b      	lsls	r3, r3, #1
 800b42a:	e7c7      	b.n	800b3bc <__lshift+0x1c>
 800b42c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b430:	3301      	adds	r3, #1
 800b432:	e7cd      	b.n	800b3d0 <__lshift+0x30>
 800b434:	4651      	mov	r1, sl
 800b436:	e7dc      	b.n	800b3f2 <__lshift+0x52>
 800b438:	3904      	subs	r1, #4
 800b43a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b43e:	f841 2f04 	str.w	r2, [r1, #4]!
 800b442:	459c      	cmp	ip, r3
 800b444:	d8f9      	bhi.n	800b43a <__lshift+0x9a>
 800b446:	e7e4      	b.n	800b412 <__lshift+0x72>

0800b448 <__mcmp>:
 800b448:	6903      	ldr	r3, [r0, #16]
 800b44a:	690a      	ldr	r2, [r1, #16]
 800b44c:	1a9b      	subs	r3, r3, r2
 800b44e:	b530      	push	{r4, r5, lr}
 800b450:	d10c      	bne.n	800b46c <__mcmp+0x24>
 800b452:	0092      	lsls	r2, r2, #2
 800b454:	3014      	adds	r0, #20
 800b456:	3114      	adds	r1, #20
 800b458:	1884      	adds	r4, r0, r2
 800b45a:	4411      	add	r1, r2
 800b45c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b460:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b464:	4295      	cmp	r5, r2
 800b466:	d003      	beq.n	800b470 <__mcmp+0x28>
 800b468:	d305      	bcc.n	800b476 <__mcmp+0x2e>
 800b46a:	2301      	movs	r3, #1
 800b46c:	4618      	mov	r0, r3
 800b46e:	bd30      	pop	{r4, r5, pc}
 800b470:	42a0      	cmp	r0, r4
 800b472:	d3f3      	bcc.n	800b45c <__mcmp+0x14>
 800b474:	e7fa      	b.n	800b46c <__mcmp+0x24>
 800b476:	f04f 33ff 	mov.w	r3, #4294967295
 800b47a:	e7f7      	b.n	800b46c <__mcmp+0x24>

0800b47c <__mdiff>:
 800b47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b480:	460d      	mov	r5, r1
 800b482:	4607      	mov	r7, r0
 800b484:	4611      	mov	r1, r2
 800b486:	4628      	mov	r0, r5
 800b488:	4614      	mov	r4, r2
 800b48a:	f7ff ffdd 	bl	800b448 <__mcmp>
 800b48e:	1e06      	subs	r6, r0, #0
 800b490:	d108      	bne.n	800b4a4 <__mdiff+0x28>
 800b492:	4631      	mov	r1, r6
 800b494:	4638      	mov	r0, r7
 800b496:	f7ff fdc2 	bl	800b01e <_Balloc>
 800b49a:	2301      	movs	r3, #1
 800b49c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4a4:	bfa4      	itt	ge
 800b4a6:	4623      	movge	r3, r4
 800b4a8:	462c      	movge	r4, r5
 800b4aa:	4638      	mov	r0, r7
 800b4ac:	6861      	ldr	r1, [r4, #4]
 800b4ae:	bfa6      	itte	ge
 800b4b0:	461d      	movge	r5, r3
 800b4b2:	2600      	movge	r6, #0
 800b4b4:	2601      	movlt	r6, #1
 800b4b6:	f7ff fdb2 	bl	800b01e <_Balloc>
 800b4ba:	692b      	ldr	r3, [r5, #16]
 800b4bc:	60c6      	str	r6, [r0, #12]
 800b4be:	6926      	ldr	r6, [r4, #16]
 800b4c0:	f105 0914 	add.w	r9, r5, #20
 800b4c4:	f104 0214 	add.w	r2, r4, #20
 800b4c8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b4cc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b4d0:	f100 0514 	add.w	r5, r0, #20
 800b4d4:	f04f 0e00 	mov.w	lr, #0
 800b4d8:	f852 ab04 	ldr.w	sl, [r2], #4
 800b4dc:	f859 4b04 	ldr.w	r4, [r9], #4
 800b4e0:	fa1e f18a 	uxtah	r1, lr, sl
 800b4e4:	b2a3      	uxth	r3, r4
 800b4e6:	1ac9      	subs	r1, r1, r3
 800b4e8:	0c23      	lsrs	r3, r4, #16
 800b4ea:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b4ee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b4f2:	b289      	uxth	r1, r1
 800b4f4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b4f8:	45c8      	cmp	r8, r9
 800b4fa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b4fe:	4694      	mov	ip, r2
 800b500:	f845 3b04 	str.w	r3, [r5], #4
 800b504:	d8e8      	bhi.n	800b4d8 <__mdiff+0x5c>
 800b506:	45bc      	cmp	ip, r7
 800b508:	d304      	bcc.n	800b514 <__mdiff+0x98>
 800b50a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b50e:	b183      	cbz	r3, 800b532 <__mdiff+0xb6>
 800b510:	6106      	str	r6, [r0, #16]
 800b512:	e7c5      	b.n	800b4a0 <__mdiff+0x24>
 800b514:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b518:	fa1e f381 	uxtah	r3, lr, r1
 800b51c:	141a      	asrs	r2, r3, #16
 800b51e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b522:	b29b      	uxth	r3, r3
 800b524:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b528:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b52c:	f845 3b04 	str.w	r3, [r5], #4
 800b530:	e7e9      	b.n	800b506 <__mdiff+0x8a>
 800b532:	3e01      	subs	r6, #1
 800b534:	e7e9      	b.n	800b50a <__mdiff+0x8e>

0800b536 <__d2b>:
 800b536:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b53a:	460e      	mov	r6, r1
 800b53c:	2101      	movs	r1, #1
 800b53e:	ec59 8b10 	vmov	r8, r9, d0
 800b542:	4615      	mov	r5, r2
 800b544:	f7ff fd6b 	bl	800b01e <_Balloc>
 800b548:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b54c:	4607      	mov	r7, r0
 800b54e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b552:	bb34      	cbnz	r4, 800b5a2 <__d2b+0x6c>
 800b554:	9301      	str	r3, [sp, #4]
 800b556:	f1b8 0300 	subs.w	r3, r8, #0
 800b55a:	d027      	beq.n	800b5ac <__d2b+0x76>
 800b55c:	a802      	add	r0, sp, #8
 800b55e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b562:	f7ff fe01 	bl	800b168 <__lo0bits>
 800b566:	9900      	ldr	r1, [sp, #0]
 800b568:	b1f0      	cbz	r0, 800b5a8 <__d2b+0x72>
 800b56a:	9a01      	ldr	r2, [sp, #4]
 800b56c:	f1c0 0320 	rsb	r3, r0, #32
 800b570:	fa02 f303 	lsl.w	r3, r2, r3
 800b574:	430b      	orrs	r3, r1
 800b576:	40c2      	lsrs	r2, r0
 800b578:	617b      	str	r3, [r7, #20]
 800b57a:	9201      	str	r2, [sp, #4]
 800b57c:	9b01      	ldr	r3, [sp, #4]
 800b57e:	61bb      	str	r3, [r7, #24]
 800b580:	2b00      	cmp	r3, #0
 800b582:	bf14      	ite	ne
 800b584:	2102      	movne	r1, #2
 800b586:	2101      	moveq	r1, #1
 800b588:	6139      	str	r1, [r7, #16]
 800b58a:	b1c4      	cbz	r4, 800b5be <__d2b+0x88>
 800b58c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b590:	4404      	add	r4, r0
 800b592:	6034      	str	r4, [r6, #0]
 800b594:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b598:	6028      	str	r0, [r5, #0]
 800b59a:	4638      	mov	r0, r7
 800b59c:	b003      	add	sp, #12
 800b59e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5a6:	e7d5      	b.n	800b554 <__d2b+0x1e>
 800b5a8:	6179      	str	r1, [r7, #20]
 800b5aa:	e7e7      	b.n	800b57c <__d2b+0x46>
 800b5ac:	a801      	add	r0, sp, #4
 800b5ae:	f7ff fddb 	bl	800b168 <__lo0bits>
 800b5b2:	9b01      	ldr	r3, [sp, #4]
 800b5b4:	617b      	str	r3, [r7, #20]
 800b5b6:	2101      	movs	r1, #1
 800b5b8:	6139      	str	r1, [r7, #16]
 800b5ba:	3020      	adds	r0, #32
 800b5bc:	e7e5      	b.n	800b58a <__d2b+0x54>
 800b5be:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b5c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b5c6:	6030      	str	r0, [r6, #0]
 800b5c8:	6918      	ldr	r0, [r3, #16]
 800b5ca:	f7ff fdae 	bl	800b12a <__hi0bits>
 800b5ce:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b5d2:	e7e1      	b.n	800b598 <__d2b+0x62>

0800b5d4 <_calloc_r>:
 800b5d4:	b538      	push	{r3, r4, r5, lr}
 800b5d6:	fb02 f401 	mul.w	r4, r2, r1
 800b5da:	4621      	mov	r1, r4
 800b5dc:	f7fe f9c4 	bl	8009968 <_malloc_r>
 800b5e0:	4605      	mov	r5, r0
 800b5e2:	b118      	cbz	r0, 800b5ec <_calloc_r+0x18>
 800b5e4:	4622      	mov	r2, r4
 800b5e6:	2100      	movs	r1, #0
 800b5e8:	f7fe f968 	bl	80098bc <memset>
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	bd38      	pop	{r3, r4, r5, pc}

0800b5f0 <__ssputs_r>:
 800b5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f4:	688e      	ldr	r6, [r1, #8]
 800b5f6:	429e      	cmp	r6, r3
 800b5f8:	4682      	mov	sl, r0
 800b5fa:	460c      	mov	r4, r1
 800b5fc:	4690      	mov	r8, r2
 800b5fe:	4699      	mov	r9, r3
 800b600:	d837      	bhi.n	800b672 <__ssputs_r+0x82>
 800b602:	898a      	ldrh	r2, [r1, #12]
 800b604:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b608:	d031      	beq.n	800b66e <__ssputs_r+0x7e>
 800b60a:	6825      	ldr	r5, [r4, #0]
 800b60c:	6909      	ldr	r1, [r1, #16]
 800b60e:	1a6f      	subs	r7, r5, r1
 800b610:	6965      	ldr	r5, [r4, #20]
 800b612:	2302      	movs	r3, #2
 800b614:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b618:	fb95 f5f3 	sdiv	r5, r5, r3
 800b61c:	f109 0301 	add.w	r3, r9, #1
 800b620:	443b      	add	r3, r7
 800b622:	429d      	cmp	r5, r3
 800b624:	bf38      	it	cc
 800b626:	461d      	movcc	r5, r3
 800b628:	0553      	lsls	r3, r2, #21
 800b62a:	d530      	bpl.n	800b68e <__ssputs_r+0x9e>
 800b62c:	4629      	mov	r1, r5
 800b62e:	f7fe f99b 	bl	8009968 <_malloc_r>
 800b632:	4606      	mov	r6, r0
 800b634:	b950      	cbnz	r0, 800b64c <__ssputs_r+0x5c>
 800b636:	230c      	movs	r3, #12
 800b638:	f8ca 3000 	str.w	r3, [sl]
 800b63c:	89a3      	ldrh	r3, [r4, #12]
 800b63e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b642:	81a3      	strh	r3, [r4, #12]
 800b644:	f04f 30ff 	mov.w	r0, #4294967295
 800b648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b64c:	463a      	mov	r2, r7
 800b64e:	6921      	ldr	r1, [r4, #16]
 800b650:	f7ff fcd8 	bl	800b004 <memcpy>
 800b654:	89a3      	ldrh	r3, [r4, #12]
 800b656:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b65a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b65e:	81a3      	strh	r3, [r4, #12]
 800b660:	6126      	str	r6, [r4, #16]
 800b662:	6165      	str	r5, [r4, #20]
 800b664:	443e      	add	r6, r7
 800b666:	1bed      	subs	r5, r5, r7
 800b668:	6026      	str	r6, [r4, #0]
 800b66a:	60a5      	str	r5, [r4, #8]
 800b66c:	464e      	mov	r6, r9
 800b66e:	454e      	cmp	r6, r9
 800b670:	d900      	bls.n	800b674 <__ssputs_r+0x84>
 800b672:	464e      	mov	r6, r9
 800b674:	4632      	mov	r2, r6
 800b676:	4641      	mov	r1, r8
 800b678:	6820      	ldr	r0, [r4, #0]
 800b67a:	f000 f91d 	bl	800b8b8 <memmove>
 800b67e:	68a3      	ldr	r3, [r4, #8]
 800b680:	1b9b      	subs	r3, r3, r6
 800b682:	60a3      	str	r3, [r4, #8]
 800b684:	6823      	ldr	r3, [r4, #0]
 800b686:	441e      	add	r6, r3
 800b688:	6026      	str	r6, [r4, #0]
 800b68a:	2000      	movs	r0, #0
 800b68c:	e7dc      	b.n	800b648 <__ssputs_r+0x58>
 800b68e:	462a      	mov	r2, r5
 800b690:	f000 f92b 	bl	800b8ea <_realloc_r>
 800b694:	4606      	mov	r6, r0
 800b696:	2800      	cmp	r0, #0
 800b698:	d1e2      	bne.n	800b660 <__ssputs_r+0x70>
 800b69a:	6921      	ldr	r1, [r4, #16]
 800b69c:	4650      	mov	r0, sl
 800b69e:	f7fe f915 	bl	80098cc <_free_r>
 800b6a2:	e7c8      	b.n	800b636 <__ssputs_r+0x46>

0800b6a4 <_svfiprintf_r>:
 800b6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a8:	461d      	mov	r5, r3
 800b6aa:	898b      	ldrh	r3, [r1, #12]
 800b6ac:	061f      	lsls	r7, r3, #24
 800b6ae:	b09d      	sub	sp, #116	; 0x74
 800b6b0:	4680      	mov	r8, r0
 800b6b2:	460c      	mov	r4, r1
 800b6b4:	4616      	mov	r6, r2
 800b6b6:	d50f      	bpl.n	800b6d8 <_svfiprintf_r+0x34>
 800b6b8:	690b      	ldr	r3, [r1, #16]
 800b6ba:	b96b      	cbnz	r3, 800b6d8 <_svfiprintf_r+0x34>
 800b6bc:	2140      	movs	r1, #64	; 0x40
 800b6be:	f7fe f953 	bl	8009968 <_malloc_r>
 800b6c2:	6020      	str	r0, [r4, #0]
 800b6c4:	6120      	str	r0, [r4, #16]
 800b6c6:	b928      	cbnz	r0, 800b6d4 <_svfiprintf_r+0x30>
 800b6c8:	230c      	movs	r3, #12
 800b6ca:	f8c8 3000 	str.w	r3, [r8]
 800b6ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d2:	e0c8      	b.n	800b866 <_svfiprintf_r+0x1c2>
 800b6d4:	2340      	movs	r3, #64	; 0x40
 800b6d6:	6163      	str	r3, [r4, #20]
 800b6d8:	2300      	movs	r3, #0
 800b6da:	9309      	str	r3, [sp, #36]	; 0x24
 800b6dc:	2320      	movs	r3, #32
 800b6de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6e2:	2330      	movs	r3, #48	; 0x30
 800b6e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6e8:	9503      	str	r5, [sp, #12]
 800b6ea:	f04f 0b01 	mov.w	fp, #1
 800b6ee:	4637      	mov	r7, r6
 800b6f0:	463d      	mov	r5, r7
 800b6f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b6f6:	b10b      	cbz	r3, 800b6fc <_svfiprintf_r+0x58>
 800b6f8:	2b25      	cmp	r3, #37	; 0x25
 800b6fa:	d13e      	bne.n	800b77a <_svfiprintf_r+0xd6>
 800b6fc:	ebb7 0a06 	subs.w	sl, r7, r6
 800b700:	d00b      	beq.n	800b71a <_svfiprintf_r+0x76>
 800b702:	4653      	mov	r3, sl
 800b704:	4632      	mov	r2, r6
 800b706:	4621      	mov	r1, r4
 800b708:	4640      	mov	r0, r8
 800b70a:	f7ff ff71 	bl	800b5f0 <__ssputs_r>
 800b70e:	3001      	adds	r0, #1
 800b710:	f000 80a4 	beq.w	800b85c <_svfiprintf_r+0x1b8>
 800b714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b716:	4453      	add	r3, sl
 800b718:	9309      	str	r3, [sp, #36]	; 0x24
 800b71a:	783b      	ldrb	r3, [r7, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	f000 809d 	beq.w	800b85c <_svfiprintf_r+0x1b8>
 800b722:	2300      	movs	r3, #0
 800b724:	f04f 32ff 	mov.w	r2, #4294967295
 800b728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b72c:	9304      	str	r3, [sp, #16]
 800b72e:	9307      	str	r3, [sp, #28]
 800b730:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b734:	931a      	str	r3, [sp, #104]	; 0x68
 800b736:	462f      	mov	r7, r5
 800b738:	2205      	movs	r2, #5
 800b73a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b73e:	4850      	ldr	r0, [pc, #320]	; (800b880 <_svfiprintf_r+0x1dc>)
 800b740:	f7f4 fd56 	bl	80001f0 <memchr>
 800b744:	9b04      	ldr	r3, [sp, #16]
 800b746:	b9d0      	cbnz	r0, 800b77e <_svfiprintf_r+0xda>
 800b748:	06d9      	lsls	r1, r3, #27
 800b74a:	bf44      	itt	mi
 800b74c:	2220      	movmi	r2, #32
 800b74e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b752:	071a      	lsls	r2, r3, #28
 800b754:	bf44      	itt	mi
 800b756:	222b      	movmi	r2, #43	; 0x2b
 800b758:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b75c:	782a      	ldrb	r2, [r5, #0]
 800b75e:	2a2a      	cmp	r2, #42	; 0x2a
 800b760:	d015      	beq.n	800b78e <_svfiprintf_r+0xea>
 800b762:	9a07      	ldr	r2, [sp, #28]
 800b764:	462f      	mov	r7, r5
 800b766:	2000      	movs	r0, #0
 800b768:	250a      	movs	r5, #10
 800b76a:	4639      	mov	r1, r7
 800b76c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b770:	3b30      	subs	r3, #48	; 0x30
 800b772:	2b09      	cmp	r3, #9
 800b774:	d94d      	bls.n	800b812 <_svfiprintf_r+0x16e>
 800b776:	b1b8      	cbz	r0, 800b7a8 <_svfiprintf_r+0x104>
 800b778:	e00f      	b.n	800b79a <_svfiprintf_r+0xf6>
 800b77a:	462f      	mov	r7, r5
 800b77c:	e7b8      	b.n	800b6f0 <_svfiprintf_r+0x4c>
 800b77e:	4a40      	ldr	r2, [pc, #256]	; (800b880 <_svfiprintf_r+0x1dc>)
 800b780:	1a80      	subs	r0, r0, r2
 800b782:	fa0b f000 	lsl.w	r0, fp, r0
 800b786:	4318      	orrs	r0, r3
 800b788:	9004      	str	r0, [sp, #16]
 800b78a:	463d      	mov	r5, r7
 800b78c:	e7d3      	b.n	800b736 <_svfiprintf_r+0x92>
 800b78e:	9a03      	ldr	r2, [sp, #12]
 800b790:	1d11      	adds	r1, r2, #4
 800b792:	6812      	ldr	r2, [r2, #0]
 800b794:	9103      	str	r1, [sp, #12]
 800b796:	2a00      	cmp	r2, #0
 800b798:	db01      	blt.n	800b79e <_svfiprintf_r+0xfa>
 800b79a:	9207      	str	r2, [sp, #28]
 800b79c:	e004      	b.n	800b7a8 <_svfiprintf_r+0x104>
 800b79e:	4252      	negs	r2, r2
 800b7a0:	f043 0302 	orr.w	r3, r3, #2
 800b7a4:	9207      	str	r2, [sp, #28]
 800b7a6:	9304      	str	r3, [sp, #16]
 800b7a8:	783b      	ldrb	r3, [r7, #0]
 800b7aa:	2b2e      	cmp	r3, #46	; 0x2e
 800b7ac:	d10c      	bne.n	800b7c8 <_svfiprintf_r+0x124>
 800b7ae:	787b      	ldrb	r3, [r7, #1]
 800b7b0:	2b2a      	cmp	r3, #42	; 0x2a
 800b7b2:	d133      	bne.n	800b81c <_svfiprintf_r+0x178>
 800b7b4:	9b03      	ldr	r3, [sp, #12]
 800b7b6:	1d1a      	adds	r2, r3, #4
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	9203      	str	r2, [sp, #12]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	bfb8      	it	lt
 800b7c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b7c4:	3702      	adds	r7, #2
 800b7c6:	9305      	str	r3, [sp, #20]
 800b7c8:	4d2e      	ldr	r5, [pc, #184]	; (800b884 <_svfiprintf_r+0x1e0>)
 800b7ca:	7839      	ldrb	r1, [r7, #0]
 800b7cc:	2203      	movs	r2, #3
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	f7f4 fd0e 	bl	80001f0 <memchr>
 800b7d4:	b138      	cbz	r0, 800b7e6 <_svfiprintf_r+0x142>
 800b7d6:	2340      	movs	r3, #64	; 0x40
 800b7d8:	1b40      	subs	r0, r0, r5
 800b7da:	fa03 f000 	lsl.w	r0, r3, r0
 800b7de:	9b04      	ldr	r3, [sp, #16]
 800b7e0:	4303      	orrs	r3, r0
 800b7e2:	3701      	adds	r7, #1
 800b7e4:	9304      	str	r3, [sp, #16]
 800b7e6:	7839      	ldrb	r1, [r7, #0]
 800b7e8:	4827      	ldr	r0, [pc, #156]	; (800b888 <_svfiprintf_r+0x1e4>)
 800b7ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7ee:	2206      	movs	r2, #6
 800b7f0:	1c7e      	adds	r6, r7, #1
 800b7f2:	f7f4 fcfd 	bl	80001f0 <memchr>
 800b7f6:	2800      	cmp	r0, #0
 800b7f8:	d038      	beq.n	800b86c <_svfiprintf_r+0x1c8>
 800b7fa:	4b24      	ldr	r3, [pc, #144]	; (800b88c <_svfiprintf_r+0x1e8>)
 800b7fc:	bb13      	cbnz	r3, 800b844 <_svfiprintf_r+0x1a0>
 800b7fe:	9b03      	ldr	r3, [sp, #12]
 800b800:	3307      	adds	r3, #7
 800b802:	f023 0307 	bic.w	r3, r3, #7
 800b806:	3308      	adds	r3, #8
 800b808:	9303      	str	r3, [sp, #12]
 800b80a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b80c:	444b      	add	r3, r9
 800b80e:	9309      	str	r3, [sp, #36]	; 0x24
 800b810:	e76d      	b.n	800b6ee <_svfiprintf_r+0x4a>
 800b812:	fb05 3202 	mla	r2, r5, r2, r3
 800b816:	2001      	movs	r0, #1
 800b818:	460f      	mov	r7, r1
 800b81a:	e7a6      	b.n	800b76a <_svfiprintf_r+0xc6>
 800b81c:	2300      	movs	r3, #0
 800b81e:	3701      	adds	r7, #1
 800b820:	9305      	str	r3, [sp, #20]
 800b822:	4619      	mov	r1, r3
 800b824:	250a      	movs	r5, #10
 800b826:	4638      	mov	r0, r7
 800b828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b82c:	3a30      	subs	r2, #48	; 0x30
 800b82e:	2a09      	cmp	r2, #9
 800b830:	d903      	bls.n	800b83a <_svfiprintf_r+0x196>
 800b832:	2b00      	cmp	r3, #0
 800b834:	d0c8      	beq.n	800b7c8 <_svfiprintf_r+0x124>
 800b836:	9105      	str	r1, [sp, #20]
 800b838:	e7c6      	b.n	800b7c8 <_svfiprintf_r+0x124>
 800b83a:	fb05 2101 	mla	r1, r5, r1, r2
 800b83e:	2301      	movs	r3, #1
 800b840:	4607      	mov	r7, r0
 800b842:	e7f0      	b.n	800b826 <_svfiprintf_r+0x182>
 800b844:	ab03      	add	r3, sp, #12
 800b846:	9300      	str	r3, [sp, #0]
 800b848:	4622      	mov	r2, r4
 800b84a:	4b11      	ldr	r3, [pc, #68]	; (800b890 <_svfiprintf_r+0x1ec>)
 800b84c:	a904      	add	r1, sp, #16
 800b84e:	4640      	mov	r0, r8
 800b850:	f7fe f978 	bl	8009b44 <_printf_float>
 800b854:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b858:	4681      	mov	r9, r0
 800b85a:	d1d6      	bne.n	800b80a <_svfiprintf_r+0x166>
 800b85c:	89a3      	ldrh	r3, [r4, #12]
 800b85e:	065b      	lsls	r3, r3, #25
 800b860:	f53f af35 	bmi.w	800b6ce <_svfiprintf_r+0x2a>
 800b864:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b866:	b01d      	add	sp, #116	; 0x74
 800b868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b86c:	ab03      	add	r3, sp, #12
 800b86e:	9300      	str	r3, [sp, #0]
 800b870:	4622      	mov	r2, r4
 800b872:	4b07      	ldr	r3, [pc, #28]	; (800b890 <_svfiprintf_r+0x1ec>)
 800b874:	a904      	add	r1, sp, #16
 800b876:	4640      	mov	r0, r8
 800b878:	f7fe fc1a 	bl	800a0b0 <_printf_i>
 800b87c:	e7ea      	b.n	800b854 <_svfiprintf_r+0x1b0>
 800b87e:	bf00      	nop
 800b880:	0800bc2c 	.word	0x0800bc2c
 800b884:	0800bc32 	.word	0x0800bc32
 800b888:	0800bc36 	.word	0x0800bc36
 800b88c:	08009b45 	.word	0x08009b45
 800b890:	0800b5f1 	.word	0x0800b5f1

0800b894 <__ascii_mbtowc>:
 800b894:	b082      	sub	sp, #8
 800b896:	b901      	cbnz	r1, 800b89a <__ascii_mbtowc+0x6>
 800b898:	a901      	add	r1, sp, #4
 800b89a:	b142      	cbz	r2, 800b8ae <__ascii_mbtowc+0x1a>
 800b89c:	b14b      	cbz	r3, 800b8b2 <__ascii_mbtowc+0x1e>
 800b89e:	7813      	ldrb	r3, [r2, #0]
 800b8a0:	600b      	str	r3, [r1, #0]
 800b8a2:	7812      	ldrb	r2, [r2, #0]
 800b8a4:	1c10      	adds	r0, r2, #0
 800b8a6:	bf18      	it	ne
 800b8a8:	2001      	movne	r0, #1
 800b8aa:	b002      	add	sp, #8
 800b8ac:	4770      	bx	lr
 800b8ae:	4610      	mov	r0, r2
 800b8b0:	e7fb      	b.n	800b8aa <__ascii_mbtowc+0x16>
 800b8b2:	f06f 0001 	mvn.w	r0, #1
 800b8b6:	e7f8      	b.n	800b8aa <__ascii_mbtowc+0x16>

0800b8b8 <memmove>:
 800b8b8:	4288      	cmp	r0, r1
 800b8ba:	b510      	push	{r4, lr}
 800b8bc:	eb01 0302 	add.w	r3, r1, r2
 800b8c0:	d807      	bhi.n	800b8d2 <memmove+0x1a>
 800b8c2:	1e42      	subs	r2, r0, #1
 800b8c4:	4299      	cmp	r1, r3
 800b8c6:	d00a      	beq.n	800b8de <memmove+0x26>
 800b8c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8cc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b8d0:	e7f8      	b.n	800b8c4 <memmove+0xc>
 800b8d2:	4283      	cmp	r3, r0
 800b8d4:	d9f5      	bls.n	800b8c2 <memmove+0xa>
 800b8d6:	1881      	adds	r1, r0, r2
 800b8d8:	1ad2      	subs	r2, r2, r3
 800b8da:	42d3      	cmn	r3, r2
 800b8dc:	d100      	bne.n	800b8e0 <memmove+0x28>
 800b8de:	bd10      	pop	{r4, pc}
 800b8e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8e4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b8e8:	e7f7      	b.n	800b8da <memmove+0x22>

0800b8ea <_realloc_r>:
 800b8ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ec:	4607      	mov	r7, r0
 800b8ee:	4614      	mov	r4, r2
 800b8f0:	460e      	mov	r6, r1
 800b8f2:	b921      	cbnz	r1, 800b8fe <_realloc_r+0x14>
 800b8f4:	4611      	mov	r1, r2
 800b8f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b8fa:	f7fe b835 	b.w	8009968 <_malloc_r>
 800b8fe:	b922      	cbnz	r2, 800b90a <_realloc_r+0x20>
 800b900:	f7fd ffe4 	bl	80098cc <_free_r>
 800b904:	4625      	mov	r5, r4
 800b906:	4628      	mov	r0, r5
 800b908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b90a:	f000 f821 	bl	800b950 <_malloc_usable_size_r>
 800b90e:	42a0      	cmp	r0, r4
 800b910:	d20f      	bcs.n	800b932 <_realloc_r+0x48>
 800b912:	4621      	mov	r1, r4
 800b914:	4638      	mov	r0, r7
 800b916:	f7fe f827 	bl	8009968 <_malloc_r>
 800b91a:	4605      	mov	r5, r0
 800b91c:	2800      	cmp	r0, #0
 800b91e:	d0f2      	beq.n	800b906 <_realloc_r+0x1c>
 800b920:	4631      	mov	r1, r6
 800b922:	4622      	mov	r2, r4
 800b924:	f7ff fb6e 	bl	800b004 <memcpy>
 800b928:	4631      	mov	r1, r6
 800b92a:	4638      	mov	r0, r7
 800b92c:	f7fd ffce 	bl	80098cc <_free_r>
 800b930:	e7e9      	b.n	800b906 <_realloc_r+0x1c>
 800b932:	4635      	mov	r5, r6
 800b934:	e7e7      	b.n	800b906 <_realloc_r+0x1c>

0800b936 <__ascii_wctomb>:
 800b936:	b149      	cbz	r1, 800b94c <__ascii_wctomb+0x16>
 800b938:	2aff      	cmp	r2, #255	; 0xff
 800b93a:	bf85      	ittet	hi
 800b93c:	238a      	movhi	r3, #138	; 0x8a
 800b93e:	6003      	strhi	r3, [r0, #0]
 800b940:	700a      	strbls	r2, [r1, #0]
 800b942:	f04f 30ff 	movhi.w	r0, #4294967295
 800b946:	bf98      	it	ls
 800b948:	2001      	movls	r0, #1
 800b94a:	4770      	bx	lr
 800b94c:	4608      	mov	r0, r1
 800b94e:	4770      	bx	lr

0800b950 <_malloc_usable_size_r>:
 800b950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b954:	1f18      	subs	r0, r3, #4
 800b956:	2b00      	cmp	r3, #0
 800b958:	bfbc      	itt	lt
 800b95a:	580b      	ldrlt	r3, [r1, r0]
 800b95c:	18c0      	addlt	r0, r0, r3
 800b95e:	4770      	bx	lr

0800b960 <_init>:
 800b960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b962:	bf00      	nop
 800b964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b966:	bc08      	pop	{r3}
 800b968:	469e      	mov	lr, r3
 800b96a:	4770      	bx	lr

0800b96c <_fini>:
 800b96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b96e:	bf00      	nop
 800b970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b972:	bc08      	pop	{r3}
 800b974:	469e      	mov	lr, r3
 800b976:	4770      	bx	lr
