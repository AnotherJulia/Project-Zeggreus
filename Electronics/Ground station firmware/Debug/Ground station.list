
Ground station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0800bbf8  0800bbf8  0001bbf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfd0  0800bfd0  0002035c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bfd0  0800bfd0  0001bfd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bfd8  0800bfd8  0002035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfd8  0800bfd8  0001bfd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfdc  0800bfdc  0001bfdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  0800bfe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a40  2000035c  0800c33c  0002035c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d9c  0800c33c  00021d9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002035c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b77a  00000000  00000000  0002038c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003922  00000000  00000000  0003bb06  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013d0  00000000  00000000  0003f428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001250  00000000  00000000  000407f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a6ff  00000000  00000000  00041a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012c60  00000000  00000000  0005c147  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009307b  00000000  00000000  0006eda7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00101e22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005df4  00000000  00000000  00101ea0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000035c 	.word	0x2000035c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bbe0 	.word	0x0800bbe0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000360 	.word	0x20000360
 80001dc:	0800bbe0 	.word	0x0800bbe0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <switchAntenna>:
static void MX_I2C1_Init(void);
static void MX_SPI3_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

void switchAntenna() {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
    is_ant1 = !is_ant1;
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <switchAntenna+0x3c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	bf0c      	ite	eq
 8000f64:	2301      	moveq	r3, #1
 8000f66:	2300      	movne	r3, #0
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <switchAntenna+0x3c>)
 8000f6e:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(SWANT_GPIO_Port, SWANT_Pin, is_ant1);
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <switchAntenna+0x3c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7a:	4807      	ldr	r0, [pc, #28]	; (8000f98 <switchAntenna+0x40>)
 8000f7c:	f002 f912 	bl	80031a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, is_ant1);
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <switchAntenna+0x3c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	2102      	movs	r1, #2
 8000f88:	4804      	ldr	r0, [pc, #16]	; (8000f9c <switchAntenna+0x44>)
 8000f8a:	f002 f90b 	bl	80031a4 <HAL_GPIO_WritePin>
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000000 	.word	0x20000000
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	40020000 	.word	0x40020000

08000fa0 <loraTelemetry>:
        }

    }
}

void loraTelemetry() {
 8000fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fa4:	f5ad 7d43 	sub.w	sp, sp, #780	; 0x30c
 8000fa8:	af2c      	add	r7, sp, #176	; 0xb0
    TLM_decoded TLM_dec;
    TLM_encoded TLM_enc;

    sx1280_custom radio;

    sxInit(&radio, &hspi3, LORA_NSS_GPIO_Port, LORA_NSS_Pin);
 8000faa:	f507 70c2 	add.w	r0, r7, #388	; 0x184
 8000fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fb2:	4abc      	ldr	r2, [pc, #752]	; (80012a4 <loraTelemetry+0x304>)
 8000fb4:	49bc      	ldr	r1, [pc, #752]	; (80012a8 <loraTelemetry+0x308>)
 8000fb6:	f000 feef 	bl	8001d98 <sxInit>
    sxSetDio1Pin(&radio, LORA_DIO1_GPIO_Port, LORA_DIO1_Pin);
 8000fba:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8000fbe:	2220      	movs	r2, #32
 8000fc0:	49ba      	ldr	r1, [pc, #744]	; (80012ac <loraTelemetry+0x30c>)
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 ff48 	bl	8001e58 <sxSetDio1Pin>

    char printBuffer[256];

    // rx mode
    SetDioIrqParams(&radio, 1 | (1 << 1) | (1 << 6), 1 | 1 << 1, 0, 0); //rxdone/txdone on gpio1, crcerror on as well
 8000fc8:	f507 70c2 	add.w	r0, r7, #388	; 0x184
 8000fcc:	2300      	movs	r3, #0
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	2143      	movs	r1, #67	; 0x43
 8000fd6:	f001 f875 	bl	80020c4 <SetDioIrqParams>
    HAL_Delay(1);
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f001 fba2 	bl	8002724 <HAL_Delay>
    SetTxParams(&radio, 0x1F, 0xE0);
 8000fe0:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8000fe4:	22e0      	movs	r2, #224	; 0xe0
 8000fe6:	211f      	movs	r1, #31
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 ff89 	bl	8001f00 <SetTxParams>
    HAL_Delay(1);
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f001 fb98 	bl	8002724 <HAL_Delay>

    uint8_t rxStartBufferPointer = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
    TLM_dec.debug = 1337;
    TLM_dec.ranging = 15212;

     */

    float latitude = 52.394821;
 8000ffa:	4bad      	ldr	r3, [pc, #692]	; (80012b0 <loraTelemetry+0x310>)
 8000ffc:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    float longitude = 5.922696;
 8001000:	4bac      	ldr	r3, [pc, #688]	; (80012b4 <loraTelemetry+0x314>)
 8001002:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c

    float acc_conversion = 0.0095712904;
 8001006:	4bac      	ldr	r3, [pc, #688]	; (80012b8 <loraTelemetry+0x318>)
 8001008:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    float gyro_conversion = 0.00122173047; //0.070;
 800100c:	4bab      	ldr	r3, [pc, #684]	; (80012bc <loraTelemetry+0x31c>)
 800100e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224

    uint32_t pkt_count = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

    //changeLed(0, 100, 0);
    uint8_t data[4];
    uint32_t lasttime = HAL_GetTick();
 8001018:	f001 fb78 	bl	800270c <HAL_GetTick>
 800101c:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250
    uint32_t nowtime = HAL_GetTick();
 8001020:	f001 fb74 	bl	800270c <HAL_GetTick>
 8001024:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
    uint32_t delay = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    uint8_t is_soft_enabled;
    uint8_t is_armed ;
    uint8_t is_breakwire_connected;
    uint8_t is_camera_on;

    uint8_t button_pressed = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

    uint8_t controlData[4];

    uint8_t last_cam_control_state = 1;
 8001034:	2301      	movs	r3, #1
 8001036:	f887 324a 	strb.w	r3, [r7, #586]	; 0x24a
    uint8_t debounce_helper = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	f887 3249 	strb.w	r3, [r7, #585]	; 0x249
    while (1) {

        //SetRx(0x00, 0xffff); // continous rx
        SetRx(&radio, 0x00, 0); // No timeout
 8001040:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001044:	2200      	movs	r2, #0
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f001 f8e0 	bl	800220e <SetRx>
        //SetRx(0x02, 200); // 200 ms timeout
        HAL_Delay(1);
 800104e:	2001      	movs	r0, #1
 8001050:	f001 fb68 	bl	8002724 <HAL_Delay>
        // wait for reception:
        for (int i = 0; i < 70; i++) { // 50 ms timeout
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800105a:	e01e      	b.n	800109a <loraTelemetry+0xfa>
            if (HAL_GPIO_ReadPin(LORA_DIO1_GPIO_Port, LORA_DIO1_Pin)) {
 800105c:	2120      	movs	r1, #32
 800105e:	4893      	ldr	r0, [pc, #588]	; (80012ac <loraTelemetry+0x30c>)
 8001060:	f002 f888 	bl	8003174 <HAL_GPIO_ReadPin>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00f      	beq.n	800108a <loraTelemetry+0xea>
                nowtime = HAL_GetTick();
 800106a:	f001 fb4f 	bl	800270c <HAL_GetTick>
 800106e:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
                delay = nowtime - lasttime  ;
 8001072:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8001076:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
                lasttime = nowtime;
 8001080:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001084:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
                break;
 8001088:	e00b      	b.n	80010a2 <loraTelemetry+0x102>
            }
            HAL_Delay(1);
 800108a:	2001      	movs	r0, #1
 800108c:	f001 fb4a 	bl	8002724 <HAL_Delay>
        for (int i = 0; i < 70; i++) { // 50 ms timeout
 8001090:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8001094:	3301      	adds	r3, #1
 8001096:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800109a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800109e:	2b45      	cmp	r3, #69	; 0x45
 80010a0:	dddc      	ble.n	800105c <loraTelemetry+0xbc>
        }

        if (HAL_GPIO_ReadPin(LORA_DIO1_GPIO_Port, LORA_DIO1_Pin)) {
 80010a2:	2120      	movs	r1, #32
 80010a4:	4881      	ldr	r0, [pc, #516]	; (80012ac <loraTelemetry+0x30c>)
 80010a6:	f002 f865 	bl	8003174 <HAL_GPIO_ReadPin>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 8180 	beq.w	80013b2 <loraTelemetry+0x412>

            pkt_count++;
 80010b2:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80010b6:	3301      	adds	r3, #1
 80010b8:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

            GetPacketStatusLora(&radio);
 80010bc:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 f8c3 	bl	800224c <GetPacketStatusLora>
            GetIrqStatus(&radio);
 80010c6:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 f84f 	bl	800216e <GetIrqStatus>

            ClrIrqStatus(&radio, 1 | (1 << 1) | (1 << 6)); // clear rxdone/txdone Irq and crcerror
 80010d0:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80010d4:	2143      	movs	r1, #67	; 0x43
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 f82e 	bl	8002138 <ClrIrqStatus>
            HAL_Delay(1);
 80010dc:	2001      	movs	r0, #1
 80010de:	f001 fb21 	bl	8002724 <HAL_Delay>
            //GetRxBufferStatus(); // TODO

            ReadBuffer(&radio, rxStartBufferPointer, sizeof(TLM_enc),
 80010e2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80010e6:	f897 1237 	ldrb.w	r1, [r7, #567]	; 0x237
 80010ea:	f507 70c2 	add.w	r0, r7, #388	; 0x184
 80010ee:	221f      	movs	r2, #31
 80010f0:	f000 ffb3 	bl	800205a <ReadBuffer>
                    (uint8_t*) &TLM_enc);
            //ReadBuffer(&radio, rxStartBufferPointer, sizeof(data), (uint8_t*) data);
            decode_TLM(&TLM_enc, &TLM_dec);
 80010f4:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 80010f8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80010fc:	4611      	mov	r1, r2
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 f94e 	bl	80023a0 <decode_TLM>
            //snprintf(printBuffer, 128, "%d,%d,%d,%d,%d,%d,%f,%d,%f,%d,%d,%f,%f,%f,%f,%f\r\n", TLM_dec.packet_type,TLM_dec.flight_state,TLM_dec.is_playing_music,TLM_dec.is_data_logging,
            //        TLM_dec.pin_states,TLM_dec.servo_state, TLM_dec.vbat, TLM_dec.systick, TLM_dec.orientation_quat[0], TLM_dec.acc[2],TLM_dec.gyro[2],TLM_dec.baro, TLM_dec.temp, TLM_dec.vertical_velocity,
            //        TLM_dec.altitude, TLM_dec.ranging);

            is_soft_enabled = (TLM_dec.pin_states & 1);
 8001104:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
            is_armed = (TLM_dec.pin_states & (1 << 1)) >> 1;
 8001110:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8001114:	105b      	asrs	r3, r3, #1
 8001116:	b2db      	uxtb	r3, r3
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
            is_breakwire_connected = (TLM_dec.pin_states & (1 << 2)) >> 2;
 8001120:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8001124:	109b      	asrs	r3, r3, #2
 8001126:	b2db      	uxtb	r3, r3
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	f887 321d 	strb.w	r3, [r7, #541]	; 0x21d
            is_camera_on = (TLM_dec.pin_states & (1 << 3)) >> 3;
 8001130:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8001134:	10db      	asrs	r3, r3, #3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	f887 321c 	strb.w	r3, [r7, #540]	; 0x21c

            snprintf(printBuffer, 256,
 8001140:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001144:	677b      	str	r3, [r7, #116]	; 0x74
                    "/*Project Zeggreus,%ld,%ld,%f,%f,%f,%f,%f,%ld,%ld,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%d,%d,%d,%d,%d,%d,%d,%f,%f,%f,%f*/\r\n",
                    TLM_dec.systick, pkt_count, TLM_dec.vbat, TLM_dec.temp,
 8001146:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
            snprintf(printBuffer, 256,
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fa04 	bl	8000558 <__aeabi_f2d>
 8001150:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
                    TLM_dec.systick, pkt_count, TLM_dec.vbat, TLM_dec.temp,
 8001154:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
            snprintf(printBuffer, 256,
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f9fd 	bl	8000558 <__aeabi_f2d>
 800115e:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
                    TLM_dec.altitude, TLM_dec.baro / 1000, TLM_dec.temp, delay,
 8001162:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
            snprintf(printBuffer, 256,
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f9f6 	bl	8000558 <__aeabi_f2d>
 800116c:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
                    TLM_dec.altitude, TLM_dec.baro / 1000, TLM_dec.temp, delay,
 8001170:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 8001174:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80012c0 <loraTelemetry+0x320>
 8001178:	eec7 6a87 	vdiv.f32	s13, s15, s14
            snprintf(printBuffer, 256,
 800117c:	ee16 0a90 	vmov	r0, s13
 8001180:	f7ff f9ea 	bl	8000558 <__aeabi_f2d>
 8001184:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
                    TLM_dec.altitude, TLM_dec.baro / 1000, TLM_dec.temp, delay,
 8001188:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
            snprintf(printBuffer, 256,
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f9e3 	bl	8000558 <__aeabi_f2d>
 8001192:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8001196:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800119a:	673b      	str	r3, [r7, #112]	; 0x70
 800119c:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 80011a0:	f7ff f9da 	bl	8000558 <__aeabi_f2d>
 80011a4:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 80011a8:	f8d7 0230 	ldr.w	r0, [r7, #560]	; 0x230
 80011ac:	f7ff f9d4 	bl	8000558 <__aeabi_f2d>
 80011b0:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
                    TLM_dec.systick, longitude, latitude, TLM_dec.altitude, 0.0,
 80011b4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
            snprintf(printBuffer, 256,
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f9cd 	bl	8000558 <__aeabi_f2d>
 80011be:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
                    TLM_dec.acc[0] * acc_conversion,
 80011c2:	f9b7 31f8 	ldrsh.w	r3, [r7, #504]	; 0x1f8
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ce:	edd7 7a8a 	vldr	s15, [r7, #552]	; 0x228
 80011d2:	ee67 7a27 	vmul.f32	s15, s14, s15
            snprintf(printBuffer, 256,
 80011d6:	ee17 0a90 	vmov	r0, s15
 80011da:	f7ff f9bd 	bl	8000558 <__aeabi_f2d>
 80011de:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
                    TLM_dec.acc[1] * acc_conversion,
 80011e2:	f9b7 31fa 	ldrsh.w	r3, [r7, #506]	; 0x1fa
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ee:	edd7 7a8a 	vldr	s15, [r7, #552]	; 0x228
 80011f2:	ee67 7a27 	vmul.f32	s15, s14, s15
            snprintf(printBuffer, 256,
 80011f6:	ee17 0a90 	vmov	r0, s15
 80011fa:	f7ff f9ad 	bl	8000558 <__aeabi_f2d>
 80011fe:	e9c7 0108 	strd	r0, r1, [r7, #32]
                    TLM_dec.acc[2] * acc_conversion,
 8001202:	f9b7 31fc 	ldrsh.w	r3, [r7, #508]	; 0x1fc
 8001206:	ee07 3a90 	vmov	s15, r3
 800120a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800120e:	edd7 7a8a 	vldr	s15, [r7, #552]	; 0x228
 8001212:	ee67 7a27 	vmul.f32	s15, s14, s15
            snprintf(printBuffer, 256,
 8001216:	ee17 0a90 	vmov	r0, s15
 800121a:	f7ff f99d 	bl	8000558 <__aeabi_f2d>
 800121e:	e9c7 0106 	strd	r0, r1, [r7, #24]
                    TLM_dec.gyro[0] * gyro_conversion,
 8001222:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
 8001226:	ee07 3a90 	vmov	s15, r3
 800122a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800122e:	edd7 7a89 	vldr	s15, [r7, #548]	; 0x224
 8001232:	ee67 7a27 	vmul.f32	s15, s14, s15
            snprintf(printBuffer, 256,
 8001236:	ee17 0a90 	vmov	r0, s15
 800123a:	f7ff f98d 	bl	8000558 <__aeabi_f2d>
 800123e:	e9c7 0104 	strd	r0, r1, [r7, #16]
                    TLM_dec.gyro[1] * gyro_conversion,
 8001242:	f9b7 3200 	ldrsh.w	r3, [r7, #512]	; 0x200
 8001246:	ee07 3a90 	vmov	s15, r3
 800124a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800124e:	edd7 7a89 	vldr	s15, [r7, #548]	; 0x224
 8001252:	ee67 7a27 	vmul.f32	s15, s14, s15
            snprintf(printBuffer, 256,
 8001256:	ee17 0a90 	vmov	r0, s15
 800125a:	f7ff f97d 	bl	8000558 <__aeabi_f2d>
 800125e:	e9c7 0102 	strd	r0, r1, [r7, #8]
                    TLM_dec.gyro[2] * gyro_conversion, radio.rssi,
 8001262:	f9b7 3202 	ldrsh.w	r3, [r7, #514]	; 0x202
 8001266:	ee07 3a90 	vmov	s15, r3
 800126a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800126e:	edd7 7a89 	vldr	s15, [r7, #548]	; 0x224
 8001272:	ee67 7a27 	vmul.f32	s15, s14, s15
            snprintf(printBuffer, 256,
 8001276:	ee17 0a90 	vmov	r0, s15
 800127a:	f7ff f96d 	bl	8000558 <__aeabi_f2d>
 800127e:	4682      	mov	sl, r0
 8001280:	468b      	mov	fp, r1
                    TLM_dec.gyro[2] * gyro_conversion, radio.rssi,
 8001282:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
            snprintf(printBuffer, 256,
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f966 	bl	8000558 <__aeabi_f2d>
 800128c:	4680      	mov	r8, r0
 800128e:	4689      	mov	r9, r1
                    radio.crcError, is_ant1 ? 1 : 2, is_soft_enabled, is_armed,
 8001290:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
            snprintf(printBuffer, 256,
 8001294:	607b      	str	r3, [r7, #4]
                    radio.crcError, is_ant1 ? 1 : 2, is_soft_enabled, is_armed,
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <loraTelemetry+0x324>)
 8001298:	781b      	ldrb	r3, [r3, #0]
            snprintf(printBuffer, 256,
 800129a:	2b00      	cmp	r3, #0
 800129c:	d014      	beq.n	80012c8 <loraTelemetry+0x328>
 800129e:	2501      	movs	r5, #1
 80012a0:	e013      	b.n	80012ca <loraTelemetry+0x32a>
 80012a2:	bf00      	nop
 80012a4:	40020000 	.word	0x40020000
 80012a8:	200003dc 	.word	0x200003dc
 80012ac:	40020400 	.word	0x40020400
 80012b0:	4251944c 	.word	0x4251944c
 80012b4:	40bd86ba 	.word	0x40bd86ba
 80012b8:	3c1cd0e7 	.word	0x3c1cd0e7
 80012bc:	3aa02279 	.word	0x3aa02279
 80012c0:	447a0000 	.word	0x447a0000
 80012c4:	20000000 	.word	0x20000000
 80012c8:	2502      	movs	r5, #2
 80012ca:	f897 421f 	ldrb.w	r4, [r7, #543]	; 0x21f
 80012ce:	f897 021e 	ldrb.w	r0, [r7, #542]	; 0x21e
 80012d2:	f897 121d 	ldrb.w	r1, [r7, #541]	; 0x21d
 80012d6:	f897 221c 	ldrb.w	r2, [r7, #540]	; 0x21c
                    is_breakwire_connected, is_camera_on,TLM_dec.flight_state), TLM_dec.orientation_quat[0],TLM_dec.orientation_quat[1],TLM_dec.orientation_quat[2],TLM_dec.orientation_quat[3];
 80012da:	f897 31d9 	ldrb.w	r3, [r7, #473]	; 0x1d9
            snprintf(printBuffer, 256,
 80012de:	f107 0684 	add.w	r6, r7, #132	; 0x84
 80012e2:	932a      	str	r3, [sp, #168]	; 0xa8
 80012e4:	9229      	str	r2, [sp, #164]	; 0xa4
 80012e6:	9128      	str	r1, [sp, #160]	; 0xa0
 80012e8:	9027      	str	r0, [sp, #156]	; 0x9c
 80012ea:	9426      	str	r4, [sp, #152]	; 0x98
 80012ec:	9525      	str	r5, [sp, #148]	; 0x94
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	9324      	str	r3, [sp, #144]	; 0x90
 80012f2:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88
 80012f6:	e9cd ab20 	strd	sl, fp, [sp, #128]	; 0x80
 80012fa:	ed97 7b02 	vldr	d7, [r7, #8]
 80012fe:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 8001302:	ed97 7b04 	vldr	d7, [r7, #16]
 8001306:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 800130a:	ed97 7b06 	vldr	d7, [r7, #24]
 800130e:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8001312:	ed97 7b08 	vldr	d7, [r7, #32]
 8001316:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 800131a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800131e:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8001322:	f04f 0300 	mov.w	r3, #0
 8001326:	f04f 0400 	mov.w	r4, #0
 800132a:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 800132e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001332:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8001336:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800133a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800133e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001342:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001346:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001348:	930d      	str	r3, [sp, #52]	; 0x34
 800134a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800134e:	930c      	str	r3, [sp, #48]	; 0x30
 8001350:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001354:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001358:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800135c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001360:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8001364:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001368:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 800136c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001370:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8001374:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001378:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001380:	4a7d      	ldr	r2, [pc, #500]	; (8001578 <loraTelemetry+0x5d8>)
 8001382:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001386:	4630      	mov	r0, r6
 8001388:	f009 f8f4 	bl	800a574 <sniprintf>

            //snprintf(printBuffer, 128, "Quaternion:%f, %f, %f, %f\r\n", TLM_dec.orientation_quat[0], TLM_dec.orientation_quat[1], TLM_dec.orientation_quat[2], TLM_dec.orientation_quat[3]);
            //snprintf(printBuffer, 128,
            //       "Quaternion: %d, %d, %d, %d, RSSI: %f, SNR: %f\r\n",
            //       data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
            CDC_Transmit_FS((uint8_t*) printBuffer, strlen(printBuffer));
 800138c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001390:	4618      	mov	r0, r3
 8001392:	f7fe ff25 	bl	80001e0 <strlen>
 8001396:	4603      	mov	r3, r0
 8001398:	b29a      	uxth	r2, r3
 800139a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800139e:	4611      	mov	r1, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f007 ff59 	bl	8009258 <CDC_Transmit_FS>
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80013a6:	2201      	movs	r2, #1
 80013a8:	2101      	movs	r1, #1
 80013aa:	4874      	ldr	r0, [pc, #464]	; (800157c <loraTelemetry+0x5dc>)
 80013ac:	f001 fefa 	bl	80031a4 <HAL_GPIO_WritePin>
 80013b0:	e006      	b.n	80013c0 <loraTelemetry+0x420>

        } else {
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2101      	movs	r1, #1
 80013b6:	4871      	ldr	r0, [pc, #452]	; (800157c <loraTelemetry+0x5dc>)
 80013b8:	f001 fef4 	bl	80031a4 <HAL_GPIO_WritePin>
            // try other antenna
            switchAntenna();
 80013bc:	f7ff fdcc 	bl	8000f58 <switchAntenna>
        }

        if (!HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin)) {
 80013c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c4:	486e      	ldr	r0, [pc, #440]	; (8001580 <loraTelemetry+0x5e0>)
 80013c6:	f001 fed5 	bl	8003174 <HAL_GPIO_ReadPin>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d109      	bne.n	80013e4 <loraTelemetry+0x444>
            if (!button_pressed) {
 80013d0:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d108      	bne.n	80013ea <loraTelemetry+0x44a>
                switchAntenna();
 80013d8:	f7ff fdbe 	bl	8000f58 <switchAntenna>
                button_pressed = 1;
 80013dc:	2301      	movs	r3, #1
 80013de:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
 80013e2:	e002      	b.n	80013ea <loraTelemetry+0x44a>
            }
        }
        else {
            button_pressed = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
        }

        // two way telemetry
        if (last_cam_control_state != HAL_GPIO_ReadPin(DEBUG_GPIO_Port, DEBUG_Pin)) {
 80013ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ee:	4865      	ldr	r0, [pc, #404]	; (8001584 <loraTelemetry+0x5e4>)
 80013f0:	f001 fec0 	bl	8003174 <HAL_GPIO_ReadPin>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 80013fc:	4293      	cmp	r3, r2
 80013fe:	f000 80b6 	beq.w	800156e <loraTelemetry+0x5ce>
            last_cam_control_state = HAL_GPIO_ReadPin(DEBUG_GPIO_Port, DEBUG_Pin);
 8001402:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001406:	485f      	ldr	r0, [pc, #380]	; (8001584 <loraTelemetry+0x5e4>)
 8001408:	f001 feb4 	bl	8003174 <HAL_GPIO_ReadPin>
 800140c:	4603      	mov	r3, r0
 800140e:	f887 324a 	strb.w	r3, [r7, #586]	; 0x24a
            debounce_helper = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	f887 3249 	strb.w	r3, [r7, #585]	; 0x249
            for (int i = 0; i < 5; i++) {
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 800141e:	e01f      	b.n	8001460 <loraTelemetry+0x4c0>
                if (last_cam_control_state != HAL_GPIO_ReadPin(DEBUG_GPIO_Port, DEBUG_Pin)) {
 8001420:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001424:	4857      	ldr	r0, [pc, #348]	; (8001584 <loraTelemetry+0x5e4>)
 8001426:	f001 fea5 	bl	8003174 <HAL_GPIO_ReadPin>
 800142a:	4603      	mov	r3, r0
 800142c:	461a      	mov	r2, r3
 800142e:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 8001432:	4293      	cmp	r3, r2
 8001434:	d00c      	beq.n	8001450 <loraTelemetry+0x4b0>
                    debounce_helper = 1;
 8001436:	2301      	movs	r3, #1
 8001438:	f887 3249 	strb.w	r3, [r7, #585]	; 0x249
                    last_cam_control_state = !last_cam_control_state; // back to previous state
 800143c:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 8001440:	2b00      	cmp	r3, #0
 8001442:	bf0c      	ite	eq
 8001444:	2301      	moveq	r3, #1
 8001446:	2300      	movne	r3, #0
 8001448:	b2db      	uxtb	r3, r3
 800144a:	f887 324a 	strb.w	r3, [r7, #586]	; 0x24a
                    break;
 800144e:	e00b      	b.n	8001468 <loraTelemetry+0x4c8>
                }
                HAL_Delay(1);
 8001450:	2001      	movs	r0, #1
 8001452:	f001 f967 	bl	8002724 <HAL_Delay>
            for (int i = 0; i < 5; i++) {
 8001456:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800145a:	3301      	adds	r3, #1
 800145c:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8001460:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8001464:	2b04      	cmp	r3, #4
 8001466:	dddb      	ble.n	8001420 <loraTelemetry+0x480>
            }
            if (debounce_helper == 0) {
 8001468:	f897 3249 	ldrb.w	r3, [r7, #585]	; 0x249
 800146c:	2b00      	cmp	r3, #0
 800146e:	d17e      	bne.n	800156e <loraTelemetry+0x5ce>
                if (last_cam_control_state) {
 8001470:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 8001474:	2b00      	cmp	r3, #0
 8001476:	d010      	beq.n	800149a <loraTelemetry+0x4fa>
                    // secret enable camera code
                    controlData[0] = 123;
 8001478:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800147c:	227b      	movs	r2, #123	; 0x7b
 800147e:	701a      	strb	r2, [r3, #0]
                    controlData[1] = 100;
 8001480:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001484:	2264      	movs	r2, #100	; 0x64
 8001486:	705a      	strb	r2, [r3, #1]
                    controlData[2] = 123;
 8001488:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800148c:	227b      	movs	r2, #123	; 0x7b
 800148e:	709a      	strb	r2, [r3, #2]
                    controlData[3] = 100;
 8001490:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001494:	2264      	movs	r2, #100	; 0x64
 8001496:	70da      	strb	r2, [r3, #3]
 8001498:	e00f      	b.n	80014ba <loraTelemetry+0x51a>
                }
                else {
                    // super secret disable camera code
                    controlData[0] = 12;
 800149a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800149e:	220c      	movs	r2, #12
 80014a0:	701a      	strb	r2, [r3, #0]
                    controlData[1] = 34;
 80014a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80014a6:	2222      	movs	r2, #34	; 0x22
 80014a8:	705a      	strb	r2, [r3, #1]
                    controlData[2] = 56;
 80014aa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80014ae:	2238      	movs	r2, #56	; 0x38
 80014b0:	709a      	strb	r2, [r3, #2]
                    controlData[3] = 78;
 80014b2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80014b6:	224e      	movs	r2, #78	; 0x4e
 80014b8:	70da      	strb	r2, [r3, #3]
                }

                SetPacketParamsLora(&radio, 12, 0x80, 4, 0x20, 0x40); // 4 byte payload
 80014ba:	f507 70c2 	add.w	r0, r7, #388	; 0x184
 80014be:	2340      	movs	r3, #64	; 0x40
 80014c0:	9301      	str	r3, [sp, #4]
 80014c2:	2320      	movs	r3, #32
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	2304      	movs	r3, #4
 80014c8:	2280      	movs	r2, #128	; 0x80
 80014ca:	210c      	movs	r1, #12
 80014cc:	f000 fd6d 	bl	8001faa <SetPacketParamsLora>
                HAL_Delay(1);
 80014d0:	2001      	movs	r0, #1
 80014d2:	f001 f927 	bl	8002724 <HAL_Delay>
                WriteBuffer(&radio, 0, controlData, sizeof(controlData));
 80014d6:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80014da:	f507 70c2 	add.w	r0, r7, #388	; 0x184
 80014de:	2304      	movs	r3, #4
 80014e0:	2100      	movs	r1, #0
 80014e2:	f000 fd86 	bl	8001ff2 <WriteBuffer>

                for (int packetnum = 0; packetnum < 200; packetnum++) { // blast out 50 packets, hopefully one of them is received.
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 80014ec:	e02d      	b.n	800154a <loraTelemetry+0x5aa>

                    for (int i = 0; i < 100; i++) {
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80014f4:	e00e      	b.n	8001514 <loraTelemetry+0x574>
                        if (HAL_GPIO_ReadPin(LORA_DIO1_GPIO_Port, LORA_DIO1_Pin)) {
 80014f6:	2120      	movs	r1, #32
 80014f8:	4822      	ldr	r0, [pc, #136]	; (8001584 <loraTelemetry+0x5e4>)
 80014fa:	f001 fe3b 	bl	8003174 <HAL_GPIO_ReadPin>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d10c      	bne.n	800151e <loraTelemetry+0x57e>
                            break;
                        }
                        HAL_Delay(1);
 8001504:	2001      	movs	r0, #1
 8001506:	f001 f90d 	bl	8002724 <HAL_Delay>
                    for (int i = 0; i < 100; i++) {
 800150a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800150e:	3301      	adds	r3, #1
 8001510:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8001514:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001518:	2b63      	cmp	r3, #99	; 0x63
 800151a:	ddec      	ble.n	80014f6 <loraTelemetry+0x556>
 800151c:	e000      	b.n	8001520 <loraTelemetry+0x580>
                            break;
 800151e:	bf00      	nop
                    }

                    ClrIrqStatus(&radio, 1 | (1 << 1));
 8001520:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001524:	2103      	movs	r1, #3
 8001526:	4618      	mov	r0, r3
 8001528:	f000 fe06 	bl	8002138 <ClrIrqStatus>
                    HAL_Delay(1);
 800152c:	2001      	movs	r0, #1
 800152e:	f001 f8f9 	bl	8002724 <HAL_Delay>
                    SetTx(&radio, 0x02, 50); // time-out of 1ms * 50 = 50ms
 8001532:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001536:	2232      	movs	r2, #50	; 0x32
 8001538:	2102      	movs	r1, #2
 800153a:	4618      	mov	r0, r3
 800153c:	f000 fe48 	bl	80021d0 <SetTx>
                for (int packetnum = 0; packetnum < 200; packetnum++) { // blast out 50 packets, hopefully one of them is received.
 8001540:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8001544:	3301      	adds	r3, #1
 8001546:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800154a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800154e:	2bc7      	cmp	r3, #199	; 0xc7
 8001550:	ddcd      	ble.n	80014ee <loraTelemetry+0x54e>
                }


                HAL_Delay(1);
 8001552:	2001      	movs	r0, #1
 8001554:	f001 f8e6 	bl	8002724 <HAL_Delay>
                SetPacketParamsLora(&radio, 12, 0x80, 32, 0x20, 0x40);
 8001558:	f507 70c2 	add.w	r0, r7, #388	; 0x184
 800155c:	2340      	movs	r3, #64	; 0x40
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	2320      	movs	r3, #32
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2320      	movs	r3, #32
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	210c      	movs	r1, #12
 800156a:	f000 fd1e 	bl	8001faa <SetPacketParamsLora>
            }
        }

        HAL_Delay(1);
 800156e:	2001      	movs	r0, #1
 8001570:	f001 f8d8 	bl	8002724 <HAL_Delay>
        SetRx(&radio, 0x00, 0); // No timeout
 8001574:	e564      	b.n	8001040 <loraTelemetry+0xa0>
 8001576:	bf00      	nop
 8001578:	0800bc28 	.word	0x0800bc28
 800157c:	40020000 	.word	0x40020000
 8001580:	40020800 	.word	0x40020800
 8001584:	40020400 	.word	0x40020400

08001588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800158c:	f001 f858 	bl	8002640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001590:	f000 f814 	bl	80015bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001594:	f000 f95a 	bl	800184c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001598:	f000 f878 	bl	800168c <MX_ADC1_Init>
  MX_I2C1_Init();
 800159c:	f000 f8c8 	bl	8001730 <MX_I2C1_Init>
  MX_SPI3_Init();
 80015a0:	f000 f8f4 	bl	800178c <MX_SPI3_Init>
  MX_USART2_UART_Init();
 80015a4:	f000 f928 	bl	80017f8 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80015a8:	f007 fd84 	bl	80090b4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  loraTelemetry(0);
 80015ac:	2000      	movs	r0, #0
 80015ae:	f7ff fcf7 	bl	8000fa0 <loraTelemetry>

  HAL_Delay(200);
 80015b2:	20c8      	movs	r0, #200	; 0xc8
 80015b4:	f001 f8b6 	bl	8002724 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <main+0x30>
	...

080015bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b094      	sub	sp, #80	; 0x50
 80015c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c2:	f107 0320 	add.w	r3, r7, #32
 80015c6:	2230      	movs	r2, #48	; 0x30
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f008 fab6 	bl	8009b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	4b27      	ldr	r3, [pc, #156]	; (8001684 <SystemClock_Config+0xc8>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	4a26      	ldr	r2, [pc, #152]	; (8001684 <SystemClock_Config+0xc8>)
 80015ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ee:	6413      	str	r3, [r2, #64]	; 0x40
 80015f0:	4b24      	ldr	r3, [pc, #144]	; (8001684 <SystemClock_Config+0xc8>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015fc:	2300      	movs	r3, #0
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <SystemClock_Config+0xcc>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a20      	ldr	r2, [pc, #128]	; (8001688 <SystemClock_Config+0xcc>)
 8001606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <SystemClock_Config+0xcc>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001618:	2301      	movs	r3, #1
 800161a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800161c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001622:	2302      	movs	r3, #2
 8001624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800162a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800162c:	2304      	movs	r3, #4
 800162e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001630:	2348      	movs	r3, #72	; 0x48
 8001632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001634:	2302      	movs	r3, #2
 8001636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001638:	2303      	movs	r3, #3
 800163a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163c:	f107 0320 	add.w	r3, r7, #32
 8001640:	4618      	mov	r0, r3
 8001642:	f003 f885 	bl	8004750 <HAL_RCC_OscConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800164c:	f000 f9d2 	bl	80019f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001650:	230f      	movs	r3, #15
 8001652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001654:	2302      	movs	r3, #2
 8001656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800165c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001666:	f107 030c 	add.w	r3, r7, #12
 800166a:	2102      	movs	r1, #2
 800166c:	4618      	mov	r0, r3
 800166e:	f003 fadf 	bl	8004c30 <HAL_RCC_ClockConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001678:	f000 f9bc 	bl	80019f4 <Error_Handler>
  }
}
 800167c:	bf00      	nop
 800167e:	3750      	adds	r7, #80	; 0x50
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40023800 	.word	0x40023800
 8001688:	40007000 	.word	0x40007000

0800168c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001692:	463b      	mov	r3, r7
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <MX_ADC1_Init+0x98>)
 80016a0:	4a21      	ldr	r2, [pc, #132]	; (8001728 <MX_ADC1_Init+0x9c>)
 80016a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016a4:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <MX_ADC1_Init+0x98>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016aa:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <MX_ADC1_Init+0x98>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016b0:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <MX_ADC1_Init+0x98>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016b6:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <MX_ADC1_Init+0x98>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016bc:	4b19      	ldr	r3, [pc, #100]	; (8001724 <MX_ADC1_Init+0x98>)
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016c4:	4b17      	ldr	r3, [pc, #92]	; (8001724 <MX_ADC1_Init+0x98>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <MX_ADC1_Init+0x98>)
 80016cc:	4a17      	ldr	r2, [pc, #92]	; (800172c <MX_ADC1_Init+0xa0>)
 80016ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <MX_ADC1_Init+0x98>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016d6:	4b13      	ldr	r3, [pc, #76]	; (8001724 <MX_ADC1_Init+0x98>)
 80016d8:	2201      	movs	r2, #1
 80016da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <MX_ADC1_Init+0x98>)
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <MX_ADC1_Init+0x98>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016ea:	480e      	ldr	r0, [pc, #56]	; (8001724 <MX_ADC1_Init+0x98>)
 80016ec:	f001 f83c 	bl	8002768 <HAL_ADC_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80016f6:	f000 f97d 	bl	80019f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80016fa:	230a      	movs	r3, #10
 80016fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016fe:	2301      	movs	r3, #1
 8001700:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001706:	463b      	mov	r3, r7
 8001708:	4619      	mov	r1, r3
 800170a:	4806      	ldr	r0, [pc, #24]	; (8001724 <MX_ADC1_Init+0x98>)
 800170c:	f001 f870 	bl	80027f0 <HAL_ADC_ConfigChannel>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001716:	f000 f96d 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000434 	.word	0x20000434
 8001728:	40012000 	.word	0x40012000
 800172c:	0f000001 	.word	0x0f000001

08001730 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <MX_I2C1_Init+0x50>)
 8001736:	4a13      	ldr	r2, [pc, #76]	; (8001784 <MX_I2C1_Init+0x54>)
 8001738:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <MX_I2C1_Init+0x50>)
 800173c:	4a12      	ldr	r2, [pc, #72]	; (8001788 <MX_I2C1_Init+0x58>)
 800173e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001740:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <MX_I2C1_Init+0x50>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <MX_I2C1_Init+0x50>)
 8001748:	2200      	movs	r2, #0
 800174a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <MX_I2C1_Init+0x50>)
 800174e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001752:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <MX_I2C1_Init+0x50>)
 8001756:	2200      	movs	r2, #0
 8001758:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <MX_I2C1_Init+0x50>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001760:	4b07      	ldr	r3, [pc, #28]	; (8001780 <MX_I2C1_Init+0x50>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <MX_I2C1_Init+0x50>)
 8001768:	2200      	movs	r2, #0
 800176a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800176c:	4804      	ldr	r0, [pc, #16]	; (8001780 <MX_I2C1_Init+0x50>)
 800176e:	f001 fd33 	bl	80031d8 <HAL_I2C_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001778:	f000 f93c 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000388 	.word	0x20000388
 8001784:	40005400 	.word	0x40005400
 8001788:	000186a0 	.word	0x000186a0

0800178c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <MX_SPI3_Init+0x64>)
 8001792:	4a18      	ldr	r2, [pc, #96]	; (80017f4 <MX_SPI3_Init+0x68>)
 8001794:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <MX_SPI3_Init+0x64>)
 8001798:	f44f 7282 	mov.w	r2, #260	; 0x104
 800179c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_SPI3_Init+0x64>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <MX_SPI3_Init+0x64>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_SPI3_Init+0x64>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_SPI3_Init+0x64>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_SPI3_Init+0x64>)
 80017b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017bc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_SPI3_Init+0x64>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <MX_SPI3_Init+0x64>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_SPI3_Init+0x64>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d0:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <MX_SPI3_Init+0x64>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_SPI3_Init+0x64>)
 80017d8:	220a      	movs	r2, #10
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80017dc:	4804      	ldr	r0, [pc, #16]	; (80017f0 <MX_SPI3_Init+0x64>)
 80017de:	f003 fc19 	bl	8005014 <HAL_SPI_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80017e8:	f000 f904 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200003dc 	.word	0x200003dc
 80017f4:	40003c00 	.word	0x40003c00

080017f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 80017fe:	4a12      	ldr	r2, [pc, #72]	; (8001848 <MX_USART2_UART_Init+0x50>)
 8001800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 8001804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 800181e:	220c      	movs	r2, #12
 8001820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800182e:	4805      	ldr	r0, [pc, #20]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 8001830:	f004 f944 	bl	8005abc <HAL_UART_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800183a:	f000 f8db 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2000047c 	.word	0x2000047c
 8001848:	40004400 	.word	0x40004400

0800184c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	; 0x28
 8001850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b5e      	ldr	r3, [pc, #376]	; (80019e0 <MX_GPIO_Init+0x194>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a5d      	ldr	r2, [pc, #372]	; (80019e0 <MX_GPIO_Init+0x194>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b5b      	ldr	r3, [pc, #364]	; (80019e0 <MX_GPIO_Init+0x194>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b57      	ldr	r3, [pc, #348]	; (80019e0 <MX_GPIO_Init+0x194>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a56      	ldr	r2, [pc, #344]	; (80019e0 <MX_GPIO_Init+0x194>)
 8001888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b54      	ldr	r3, [pc, #336]	; (80019e0 <MX_GPIO_Init+0x194>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	4b50      	ldr	r3, [pc, #320]	; (80019e0 <MX_GPIO_Init+0x194>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a4f      	ldr	r2, [pc, #316]	; (80019e0 <MX_GPIO_Init+0x194>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b4d      	ldr	r3, [pc, #308]	; (80019e0 <MX_GPIO_Init+0x194>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	4b49      	ldr	r3, [pc, #292]	; (80019e0 <MX_GPIO_Init+0x194>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a48      	ldr	r2, [pc, #288]	; (80019e0 <MX_GPIO_Init+0x194>)
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b46      	ldr	r3, [pc, #280]	; (80019e0 <MX_GPIO_Init+0x194>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	603b      	str	r3, [r7, #0]
 80018d6:	4b42      	ldr	r3, [pc, #264]	; (80019e0 <MX_GPIO_Init+0x194>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a41      	ldr	r2, [pc, #260]	; (80019e0 <MX_GPIO_Init+0x194>)
 80018dc:	f043 0308 	orr.w	r3, r3, #8
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b3f      	ldr	r3, [pc, #252]	; (80019e0 <MX_GPIO_Init+0x194>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|RXEN_Pin|TXEN_Pin
 80018ee:	2200      	movs	r2, #0
 80018f0:	f248 6103 	movw	r1, #34307	; 0x8603
 80018f4:	483b      	ldr	r0, [pc, #236]	; (80019e4 <MX_GPIO_Init+0x198>)
 80018f6:	f001 fc55 	bl	80031a4 <HAL_GPIO_WritePin>
                          |LORA_NSS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SWANT_GPIO_Port, SWANT_Pin, GPIO_PIN_SET);
 80018fa:	2201      	movs	r2, #1
 80018fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001900:	4839      	ldr	r0, [pc, #228]	; (80019e8 <MX_GPIO_Init+0x19c>)
 8001902:	f001 fc4f 	bl	80031a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 8001906:	2201      	movs	r2, #1
 8001908:	f44f 7180 	mov.w	r1, #256	; 0x100
 800190c:	4835      	ldr	r0, [pc, #212]	; (80019e4 <MX_GPIO_Init+0x198>)
 800190e:	f001 fc49 	bl	80031a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	2180      	movs	r1, #128	; 0x80
 8001916:	4835      	ldr	r0, [pc, #212]	; (80019ec <MX_GPIO_Init+0x1a0>)
 8001918:	f001 fc44 	bl	80031a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 800191c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001922:	2300      	movs	r3, #0
 8001924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	482d      	ldr	r0, [pc, #180]	; (80019e8 <MX_GPIO_Init+0x19c>)
 8001932:	f001 fa9d 	bl	8002e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin MODE_Pin RXEN_Pin
                           TXEN_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|MODE_Pin|RXEN_Pin
 8001936:	f248 7303 	movw	r3, #34563	; 0x8703
 800193a:	617b      	str	r3, [r7, #20]
                          |TXEN_Pin|LORA_NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193c:	2301      	movs	r3, #1
 800193e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	4825      	ldr	r0, [pc, #148]	; (80019e4 <MX_GPIO_Init+0x198>)
 8001950:	f001 fa8e 	bl	8002e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_Pin */
  GPIO_InitStruct.Pin = DEBUG_Pin;
 8001954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800195e:	2301      	movs	r3, #1
 8001960:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEBUG_GPIO_Port, &GPIO_InitStruct);
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4619      	mov	r1, r3
 8001968:	4820      	ldr	r0, [pc, #128]	; (80019ec <MX_GPIO_Init+0x1a0>)
 800196a:	f001 fa81 	bl	8002e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWANT_Pin */
  GPIO_InitStruct.Pin = SWANT_Pin;
 800196e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001974:	2301      	movs	r3, #1
 8001976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SWANT_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4619      	mov	r1, r3
 8001986:	4818      	ldr	r0, [pc, #96]	; (80019e8 <MX_GPIO_Init+0x19c>)
 8001988:	f001 fa72 	bl	8002e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO3_Pin */
  GPIO_InitStruct.Pin = DIO3_Pin;
 800198c:	2304      	movs	r3, #4
 800198e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001990:	2300      	movs	r3, #0
 8001992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO3_GPIO_Port, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	4814      	ldr	r0, [pc, #80]	; (80019f0 <MX_GPIO_Init+0x1a4>)
 80019a0:	f001 fa66 	bl	8002e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO2_Pin LORA_DIO1_Pin LORA_BUSY_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin|LORA_DIO1_Pin|LORA_BUSY_Pin;
 80019a4:	2370      	movs	r3, #112	; 0x70
 80019a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	4619      	mov	r1, r3
 80019b6:	480d      	ldr	r0, [pc, #52]	; (80019ec <MX_GPIO_Init+0x1a0>)
 80019b8:	f001 fa5a 	bl	8002e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RESET_Pin */
  GPIO_InitStruct.Pin = LORA_RESET_Pin;
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LORA_RESET_GPIO_Port, &GPIO_InitStruct);
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	4619      	mov	r1, r3
 80019d2:	4806      	ldr	r0, [pc, #24]	; (80019ec <MX_GPIO_Init+0x1a0>)
 80019d4:	f001 fa4c 	bl	8002e70 <HAL_GPIO_Init>

}
 80019d8:	bf00      	nop
 80019da:	3728      	adds	r7, #40	; 0x28
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020000 	.word	0x40020000
 80019e8:	40020800 	.word	0x40020800
 80019ec:	40020400 	.word	0x40020400
 80019f0:	40020c00 	.word	0x40020c00

080019f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019fa:	e7fe      	b.n	80019fa <Error_Handler+0x6>

080019fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	4a0f      	ldr	r2, [pc, #60]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a10:	6453      	str	r3, [r2, #68]	; 0x44
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800

08001a4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a17      	ldr	r2, [pc, #92]	; (8001ac8 <HAL_ADC_MspInit+0x7c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d127      	bne.n	8001abe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	4b16      	ldr	r3, [pc, #88]	; (8001acc <HAL_ADC_MspInit+0x80>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a15      	ldr	r2, [pc, #84]	; (8001acc <HAL_ADC_MspInit+0x80>)
 8001a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b13      	ldr	r3, [pc, #76]	; (8001acc <HAL_ADC_MspInit+0x80>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <HAL_ADC_MspInit+0x80>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <HAL_ADC_MspInit+0x80>)
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <HAL_ADC_MspInit+0x80>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = PDET_Pin;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PDET_GPIO_Port, &GPIO_InitStruct);
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <HAL_ADC_MspInit+0x84>)
 8001aba:	f001 f9d9 	bl	8002e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001abe:	bf00      	nop
 8001ac0:	3728      	adds	r7, #40	; 0x28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40012000 	.word	0x40012000
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40020800 	.word	0x40020800

08001ad4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a19      	ldr	r2, [pc, #100]	; (8001b58 <HAL_I2C_MspInit+0x84>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d12c      	bne.n	8001b50 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <HAL_I2C_MspInit+0x88>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a17      	ldr	r2, [pc, #92]	; (8001b5c <HAL_I2C_MspInit+0x88>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <HAL_I2C_MspInit+0x88>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b18:	2312      	movs	r3, #18
 8001b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b20:	2303      	movs	r3, #3
 8001b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b24:	2304      	movs	r3, #4
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	480c      	ldr	r0, [pc, #48]	; (8001b60 <HAL_I2C_MspInit+0x8c>)
 8001b30:	f001 f99e 	bl	8002e70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <HAL_I2C_MspInit+0x88>)
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <HAL_I2C_MspInit+0x88>)
 8001b3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b42:	6413      	str	r3, [r2, #64]	; 0x40
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <HAL_I2C_MspInit+0x88>)
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b50:	bf00      	nop
 8001b52:	3728      	adds	r7, #40	; 0x28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40005400 	.word	0x40005400
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020400 	.word	0x40020400

08001b64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a19      	ldr	r2, [pc, #100]	; (8001be8 <HAL_SPI_MspInit+0x84>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d12c      	bne.n	8001be0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <HAL_SPI_MspInit+0x88>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	4a17      	ldr	r2, [pc, #92]	; (8001bec <HAL_SPI_MspInit+0x88>)
 8001b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_SPI_MspInit+0x88>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b11      	ldr	r3, [pc, #68]	; (8001bec <HAL_SPI_MspInit+0x88>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a10      	ldr	r2, [pc, #64]	; (8001bec <HAL_SPI_MspInit+0x88>)
 8001bac:	f043 0304 	orr.w	r3, r3, #4
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <HAL_SPI_MspInit+0x88>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001bbe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bd0:	2306      	movs	r3, #6
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <HAL_SPI_MspInit+0x8c>)
 8001bdc:	f001 f948 	bl	8002e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001be0:	bf00      	nop
 8001be2:	3728      	adds	r7, #40	; 0x28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40003c00 	.word	0x40003c00
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40020800 	.word	0x40020800

08001bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	; 0x28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a19      	ldr	r2, [pc, #100]	; (8001c78 <HAL_UART_MspInit+0x84>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d12b      	bne.n	8001c6e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <HAL_UART_MspInit+0x88>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a17      	ldr	r2, [pc, #92]	; (8001c7c <HAL_UART_MspInit+0x88>)
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <HAL_UART_MspInit+0x88>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <HAL_UART_MspInit+0x88>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	4a10      	ldr	r2, [pc, #64]	; (8001c7c <HAL_UART_MspInit+0x88>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <HAL_UART_MspInit+0x88>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c4e:	230c      	movs	r3, #12
 8001c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c5e:	2307      	movs	r3, #7
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	4805      	ldr	r0, [pc, #20]	; (8001c80 <HAL_UART_MspInit+0x8c>)
 8001c6a:	f001 f901 	bl	8002e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c6e:	bf00      	nop
 8001c70:	3728      	adds	r7, #40	; 0x28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40004400 	.word	0x40004400
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40020000 	.word	0x40020000

08001c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <NMI_Handler+0x4>

08001c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8e:	e7fe      	b.n	8001c8e <HardFault_Handler+0x4>

08001c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <MemManage_Handler+0x4>

08001c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9a:	e7fe      	b.n	8001c9a <BusFault_Handler+0x4>

08001c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <UsageFault_Handler+0x4>

08001ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd0:	f000 fd08 	bl	80026e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001cdc:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <OTG_FS_IRQHandler+0x10>)
 8001cde:	f001 fd03 	bl	80036e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20001990 	.word	0x20001990

08001cec <sxSpiTransmit>:
#include "main.h"
#include "sx1280_custom.h"


void sxSpiTransmit(sx1280_custom *radio, uint8_t *txBuf, uint8_t size) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6858      	ldr	r0, [r3, #4]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	891b      	ldrh	r3, [r3, #8]
 8001d02:	2200      	movs	r2, #0
 8001d04:	4619      	mov	r1, r3
 8001d06:	f001 fa4d 	bl	80031a4 <HAL_GPIO_WritePin>
    radio->spi_return = HAL_SPI_Transmit(radio->spiHandle, txBuf, size, 1000);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6818      	ldr	r0, [r3, #0]
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d16:	68b9      	ldr	r1, [r7, #8]
 8001d18:	f003 f9e0 	bl	80050dc <HAL_SPI_Transmit>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6858      	ldr	r0, [r3, #4]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	891b      	ldrh	r3, [r3, #8]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	4619      	mov	r1, r3
 8001d32:	f001 fa37 	bl	80031a4 <HAL_GPIO_WritePin>
}
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <sxSpiTransmitReceive>:
void sxSpiTransmitReceive(sx1280_custom *radio, uint8_t *txBuf, uint8_t *rxBuf, uint8_t size) {
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af02      	add	r7, sp, #8
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6858      	ldr	r0, [r3, #4]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	891b      	ldrh	r3, [r3, #8]
 8001d54:	2200      	movs	r2, #0
 8001d56:	4619      	mov	r1, r3
 8001d58:	f001 fa24 	bl	80031a4 <HAL_GPIO_WritePin>
    radio->spi_return = HAL_SPI_TransmitReceive(radio->spiHandle,txBuf,rxBuf,size,1000);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6818      	ldr	r0, [r3, #0]
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	68b9      	ldr	r1, [r7, #8]
 8001d70:	f003 fbf1 	bl	8005556 <HAL_SPI_TransmitReceive>
 8001d74:	4603      	mov	r3, r0
 8001d76:	461a      	mov	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6858      	ldr	r0, [r3, #4]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	891b      	ldrh	r3, [r3, #8]
 8001d86:	2201      	movs	r2, #1
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f001 fa0b 	bl	80031a4 <HAL_GPIO_WritePin>
}
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <sxInit>:


void sxInit(sx1280_custom *radio, SPI_HandleTypeDef *spiHandle,
        GPIO_TypeDef *csPinBank, uint16_t csPin) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af02      	add	r7, sp, #8
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	807b      	strh	r3, [r7, #2]

    radio->spiHandle = spiHandle;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	601a      	str	r2, [r3, #0]
    radio->csPinBank = csPinBank;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	605a      	str	r2, [r3, #4]
    radio->csPin = csPin;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	887a      	ldrh	r2, [r7, #2]
 8001db6:	811a      	strh	r2, [r3, #8]


    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 8001db8:	2200      	movs	r2, #0
 8001dba:	2180      	movs	r1, #128	; 0x80
 8001dbc:	4825      	ldr	r0, [pc, #148]	; (8001e54 <sxInit+0xbc>)
 8001dbe:	f001 f9f1 	bl	80031a4 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001dc2:	2002      	movs	r0, #2
 8001dc4:	f000 fcae 	bl	8002724 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	2180      	movs	r1, #128	; 0x80
 8001dcc:	4821      	ldr	r0, [pc, #132]	; (8001e54 <sxInit+0xbc>)
 8001dce:	f001 f9e9 	bl	80031a4 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	f000 fca6 	bl	8002724 <HAL_Delay>

    SetStandbyRC(radio);
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 f850 	bl	8001e7e <SetStandbyRC>
    HAL_Delay(3);
 8001dde:	2003      	movs	r0, #3
 8001de0:	f000 fca0 	bl	8002724 <HAL_Delay>
    setPacketLora(radio);
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f000 f875 	bl	8001ed4 <setPacketLora>
    HAL_Delay(2);
 8001dea:	2002      	movs	r0, #2
 8001dec:	f000 fc9a 	bl	8002724 <HAL_Delay>
    SetRfFrequency2(radio);
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 f859 	bl	8001ea8 <SetRfFrequency2>
    HAL_Delay(2);
 8001df6:	2002      	movs	r0, #2
 8001df8:	f000 fc94 	bl	8002724 <HAL_Delay>

    SetBufferBaseAddresses(radio, 0, 0); // 127
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2100      	movs	r1, #0
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f000 f897 	bl	8001f34 <SetBufferBaseAddresses>
    HAL_Delay(1);
 8001e06:	2001      	movs	r0, #1
 8001e08:	f000 fc8c 	bl	8002724 <HAL_Delay>
    //SetModulationParams(radio, 0x90, 0x0A, 0x01); // Spreading factor 9, 1600 BW (0x0A), CR 4/5. Sensitivity: -111
    SetModulationParams(radio, 0x80, 0x18, 0x01); // Spreading factor 8, 800 BW (0x0A), CR 4/5. Sensitivity: -115
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	2218      	movs	r2, #24
 8001e10:	2180      	movs	r1, #128	; 0x80
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f000 f8a8 	bl	8001f68 <SetModulationParams>
    HAL_Delay(1);
 8001e18:	2001      	movs	r0, #1
 8001e1a:	f000 fc83 	bl	8002724 <HAL_Delay>

    WriteRegisterByte(radio, 0x925, 0x32); // must be used for SF9-12. Different for 5-8 (page 112)
 8001e1e:	2232      	movs	r2, #50	; 0x32
 8001e20:	f640 1125 	movw	r1, #2341	; 0x925
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 fa50 	bl	80022ca <WriteRegisterByte>

    HAL_Delay(1);
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f000 fc7a 	bl	8002724 <HAL_Delay>
    SetPacketParamsLora(radio, 12, 0x80, 32, 0x20, 0x40); // 12 symbol preamble, implicit header, 32 byte payload, CRC enabled, Normal IQ
 8001e30:	2340      	movs	r3, #64	; 0x40
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	2320      	movs	r3, #32
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2320      	movs	r3, #32
 8001e3a:	2280      	movs	r2, #128	; 0x80
 8001e3c:	210c      	movs	r1, #12
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 f8b3 	bl	8001faa <SetPacketParamsLora>
    HAL_Delay(1);
 8001e44:	2001      	movs	r0, #1
 8001e46:	f000 fc6d 	bl	8002724 <HAL_Delay>
}
 8001e4a:	bf00      	nop
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40020400 	.word	0x40020400

08001e58 <sxSetDio1Pin>:

void sxSetDio1Pin(sx1280_custom *radio, GPIO_TypeDef *Dio1PinBank, uint16_t Dio1Pin) {
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	4613      	mov	r3, r2
 8001e64:	80fb      	strh	r3, [r7, #6]
    radio->Dio1PinBank = Dio1PinBank;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
    radio->Dio1Pin = Dio1Pin;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	88fa      	ldrh	r2, [r7, #6]
 8001e70:	821a      	strh	r2, [r3, #16]
}
 8001e72:	bf00      	nop
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <SetStandbyRC>:

void SetStandbyRC(sx1280_custom *radio) {
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[2];
    uint8_t loraTxBuf[] = { 0x80, 0x00 }; // Standby RC
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	723b      	strb	r3, [r7, #8]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	727b      	strb	r3, [r7, #9]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 2);
 8001e8e:	f107 020c 	add.w	r2, r7, #12
 8001e92:	f107 0108 	add.w	r1, r7, #8
 8001e96:	2302      	movs	r3, #2
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ff50 	bl	8001d3e <sxSpiTransmitReceive>
}
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <SetRfFrequency2>:
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x86, 0xBD, 0x3B, 0x14 }; // SetRfFrequency
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 4);
}

void SetRfFrequency2(sx1280_custom *radio) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
    // 52e6/(2^18) multiples of
    // 2.46 = 2.46 * 10^9/(52e6/(2^18)) = 12401428 = 0xBD3B14
    // uint32_t rfFreq = 12401428;

    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x86, 0xBE, 0xC4, 0xEC }; // SetRfFrequency
 8001eb0:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <SetRfFrequency2+0x28>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	60bb      	str	r3, [r7, #8]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 4);
 8001eb6:	f107 020c 	add.w	r2, r7, #12
 8001eba:	f107 0108 	add.w	r1, r7, #8
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ff3c 	bl	8001d3e <sxSpiTransmitReceive>
}
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	0800bca4 	.word	0x0800bca4

08001ed4 <setPacketLora>:

void setPacketLora(sx1280_custom *radio) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[2];
    uint8_t loraTxBuf[] = { 0x8A, 0x01 }; // Set packet to lora
 8001edc:	4b07      	ldr	r3, [pc, #28]	; (8001efc <setPacketLora+0x28>)
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	813b      	strh	r3, [r7, #8]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 2);
 8001ee2:	f107 020c 	add.w	r2, r7, #12
 8001ee6:	f107 0108 	add.w	r1, r7, #8
 8001eea:	2302      	movs	r3, #2
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ff26 	bl	8001d3e <sxSpiTransmitReceive>
}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	0800bca8 	.word	0x0800bca8

08001f00 <SetTxParams>:
    WriteRegisterBytes(radio, 0x916, rangingAddress, 4);


}

void SetTxParams(sx1280_custom *radio, uint8_t power, uint8_t rampTime) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	70fb      	strb	r3, [r7, #3]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	70bb      	strb	r3, [r7, #2]
    uint8_t loraRxBuf[3];
    // Set to -12 dBm = 0.06 mW
    uint8_t loraTxBuf[] = { 0x8E, power, rampTime };
 8001f10:	238e      	movs	r3, #142	; 0x8e
 8001f12:	723b      	strb	r3, [r7, #8]
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	727b      	strb	r3, [r7, #9]
 8001f18:	78bb      	ldrb	r3, [r7, #2]
 8001f1a:	72bb      	strb	r3, [r7, #10]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 3);
 8001f1c:	f107 020c 	add.w	r2, r7, #12
 8001f20:	f107 0108 	add.w	r1, r7, #8
 8001f24:	2303      	movs	r3, #3
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ff09 	bl	8001d3e <sxSpiTransmitReceive>
}
 8001f2c:	bf00      	nop
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <SetBufferBaseAddresses>:

void SetBufferBaseAddresses(sx1280_custom *radio, uint8_t txBaseAddress, uint8_t rxBaseAddress) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	70fb      	strb	r3, [r7, #3]
 8001f40:	4613      	mov	r3, r2
 8001f42:	70bb      	strb	r3, [r7, #2]
    uint8_t loraRxBuf[3];
    uint8_t loraTxBuf[] = { 0x8F, txBaseAddress, rxBaseAddress };
 8001f44:	238f      	movs	r3, #143	; 0x8f
 8001f46:	723b      	strb	r3, [r7, #8]
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	727b      	strb	r3, [r7, #9]
 8001f4c:	78bb      	ldrb	r3, [r7, #2]
 8001f4e:	72bb      	strb	r3, [r7, #10]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001f50:	f107 020c 	add.w	r2, r7, #12
 8001f54:	f107 0108 	add.w	r1, r7, #8
 8001f58:	2303      	movs	r3, #3
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff feef 	bl	8001d3e <sxSpiTransmitReceive>
}
 8001f60:	bf00      	nop
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <SetModulationParams>:

void SetModulationParams(sx1280_custom *radio, uint8_t modParam1, uint8_t modParam2,
        uint8_t modParam3) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	4608      	mov	r0, r1
 8001f72:	4611      	mov	r1, r2
 8001f74:	461a      	mov	r2, r3
 8001f76:	4603      	mov	r3, r0
 8001f78:	70fb      	strb	r3, [r7, #3]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	70bb      	strb	r3, [r7, #2]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	707b      	strb	r3, [r7, #1]
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x8B, modParam1, modParam2, modParam3 };
 8001f82:	238b      	movs	r3, #139	; 0x8b
 8001f84:	723b      	strb	r3, [r7, #8]
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	727b      	strb	r3, [r7, #9]
 8001f8a:	78bb      	ldrb	r3, [r7, #2]
 8001f8c:	72bb      	strb	r3, [r7, #10]
 8001f8e:	787b      	ldrb	r3, [r7, #1]
 8001f90:	72fb      	strb	r3, [r7, #11]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001f92:	f107 020c 	add.w	r2, r7, #12
 8001f96:	f107 0108 	add.w	r1, r7, #8
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff fece 	bl	8001d3e <sxSpiTransmitReceive>
}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <SetPacketParamsLora>:

void SetPacketParamsLora(sx1280_custom *radio, uint8_t param1, uint8_t param2, uint8_t param3,
        uint8_t param4, uint8_t param5) {
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	4608      	mov	r0, r1
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4603      	mov	r3, r0
 8001fba:	70fb      	strb	r3, [r7, #3]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	70bb      	strb	r3, [r7, #2]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	707b      	strb	r3, [r7, #1]
    uint8_t loraTxBuf[] = { 0x8C, param1, param2, param3, param4, param5 };
 8001fc4:	238c      	movs	r3, #140	; 0x8c
 8001fc6:	723b      	strb	r3, [r7, #8]
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	727b      	strb	r3, [r7, #9]
 8001fcc:	78bb      	ldrb	r3, [r7, #2]
 8001fce:	72bb      	strb	r3, [r7, #10]
 8001fd0:	787b      	ldrb	r3, [r7, #1]
 8001fd2:	72fb      	strb	r3, [r7, #11]
 8001fd4:	7e3b      	ldrb	r3, [r7, #24]
 8001fd6:	733b      	strb	r3, [r7, #12]
 8001fd8:	7f3b      	ldrb	r3, [r7, #28]
 8001fda:	737b      	strb	r3, [r7, #13]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8001fdc:	f107 0308 	add.w	r3, r7, #8
 8001fe0:	2206      	movs	r2, #6
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff fe81 	bl	8001cec <sxSpiTransmit>
}
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <WriteBuffer>:

void WriteBuffer(sx1280_custom *radio, uint8_t offset, uint8_t *data, uint8_t size) {
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	460b      	mov	r3, r1
 8002000:	72fb      	strb	r3, [r7, #11]
 8002002:	4613      	mov	r3, r2
 8002004:	72bb      	strb	r3, [r7, #10]
    uint8_t loraTxBuf[] = { 0x1A, offset };
 8002006:	231a      	movs	r3, #26
 8002008:	753b      	strb	r3, [r7, #20]
 800200a:	7afb      	ldrb	r3, [r7, #11]
 800200c:	757b      	strb	r3, [r7, #21]

    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6858      	ldr	r0, [r3, #4]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	891b      	ldrh	r3, [r3, #8]
 8002016:	2200      	movs	r2, #0
 8002018:	4619      	mov	r1, r3
 800201a:	f001 f8c3 	bl	80031a4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(radio->spiHandle, loraTxBuf, sizeof(loraTxBuf), 1000);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	f107 0114 	add.w	r1, r7, #20
 8002026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800202a:	2202      	movs	r2, #2
 800202c:	f003 f856 	bl	80050dc <HAL_SPI_Transmit>
    HAL_SPI_Transmit(radio->spiHandle, data, size, 1000);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6818      	ldr	r0, [r3, #0]
 8002034:	7abb      	ldrb	r3, [r7, #10]
 8002036:	b29a      	uxth	r2, r3
 8002038:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	f003 f84d 	bl	80050dc <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6858      	ldr	r0, [r3, #4]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	891b      	ldrh	r3, [r3, #8]
 800204a:	2201      	movs	r2, #1
 800204c:	4619      	mov	r1, r3
 800204e:	f001 f8a9 	bl	80031a4 <HAL_GPIO_WritePin>

}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <ReadBuffer>:

void ReadBuffer(sx1280_custom *radio, uint8_t offset, uint8_t size, uint8_t *data) {
 800205a:	b580      	push	{r7, lr}
 800205c:	b086      	sub	sp, #24
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	72fb      	strb	r3, [r7, #11]
 8002068:	4613      	mov	r3, r2
 800206a:	72bb      	strb	r3, [r7, #10]
    uint8_t loraTxBuf[] = { 0x1B, offset, 0x00};
 800206c:	231b      	movs	r3, #27
 800206e:	753b      	strb	r3, [r7, #20]
 8002070:	7afb      	ldrb	r3, [r7, #11]
 8002072:	757b      	strb	r3, [r7, #21]
 8002074:	2300      	movs	r3, #0
 8002076:	75bb      	strb	r3, [r7, #22]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6858      	ldr	r0, [r3, #4]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	891b      	ldrh	r3, [r3, #8]
 8002080:	2200      	movs	r2, #0
 8002082:	4619      	mov	r1, r3
 8002084:	f001 f88e 	bl	80031a4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(radio->spiHandle, loraTxBuf, sizeof(loraTxBuf), 1000);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6818      	ldr	r0, [r3, #0]
 800208c:	f107 0114 	add.w	r1, r7, #20
 8002090:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002094:	2203      	movs	r2, #3
 8002096:	f003 f821 	bl	80050dc <HAL_SPI_Transmit>
    HAL_SPI_Receive(radio->spiHandle, data, size, 1000);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6818      	ldr	r0, [r3, #0]
 800209e:	7abb      	ldrb	r3, [r7, #10]
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	f003 f94c 	bl	8005344 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6858      	ldr	r0, [r3, #4]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	891b      	ldrh	r3, [r3, #8]
 80020b4:	2201      	movs	r2, #1
 80020b6:	4619      	mov	r1, r3
 80020b8:	f001 f874 	bl	80031a4 <HAL_GPIO_WritePin>
}
 80020bc:	bf00      	nop
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <SetDioIrqParams>:

void SetDioIrqParams(sx1280_custom *radio, uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask,
        uint16_t dio3Mask) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	4608      	mov	r0, r1
 80020ce:	4611      	mov	r1, r2
 80020d0:	461a      	mov	r2, r3
 80020d2:	4603      	mov	r3, r0
 80020d4:	817b      	strh	r3, [r7, #10]
 80020d6:	460b      	mov	r3, r1
 80020d8:	813b      	strh	r3, [r7, #8]
 80020da:	4613      	mov	r3, r2
 80020dc:	80fb      	strh	r3, [r7, #6]
    uint8_t loraTxBuf[9];
    loraTxBuf[0] = 0x8D;
 80020de:	238d      	movs	r3, #141	; 0x8d
 80020e0:	753b      	strb	r3, [r7, #20]
    loraTxBuf[1] = (uint8_t) ((irqMask >> 8) & 0x00FF);
 80020e2:	897b      	ldrh	r3, [r7, #10]
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	757b      	strb	r3, [r7, #21]
    loraTxBuf[2] = (uint8_t) (irqMask & 0x00FF);
 80020ec:	897b      	ldrh	r3, [r7, #10]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	75bb      	strb	r3, [r7, #22]
    loraTxBuf[3] = (uint8_t) ((dio1Mask >> 8) & 0x00FF);
 80020f2:	893b      	ldrh	r3, [r7, #8]
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	75fb      	strb	r3, [r7, #23]
    loraTxBuf[4] = (uint8_t) (dio1Mask & 0x00FF);
 80020fc:	893b      	ldrh	r3, [r7, #8]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	763b      	strb	r3, [r7, #24]
    loraTxBuf[5] = (uint8_t) ((dio2Mask >> 8) & 0x00FF);
 8002102:	88fb      	ldrh	r3, [r7, #6]
 8002104:	0a1b      	lsrs	r3, r3, #8
 8002106:	b29b      	uxth	r3, r3
 8002108:	b2db      	uxtb	r3, r3
 800210a:	767b      	strb	r3, [r7, #25]
    loraTxBuf[6] = (uint8_t) (dio2Mask & 0x00FF);
 800210c:	88fb      	ldrh	r3, [r7, #6]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	76bb      	strb	r3, [r7, #26]
    loraTxBuf[7] = (uint8_t) ((dio3Mask >> 8) & 0x00FF);
 8002112:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002114:	0a1b      	lsrs	r3, r3, #8
 8002116:	b29b      	uxth	r3, r3
 8002118:	b2db      	uxtb	r3, r3
 800211a:	76fb      	strb	r3, [r7, #27]
    loraTxBuf[8] = (uint8_t) (dio3Mask & 0x00FF);
 800211c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800211e:	b2db      	uxtb	r3, r3
 8002120:	773b      	strb	r3, [r7, #28]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	2209      	movs	r2, #9
 8002128:	4619      	mov	r1, r3
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f7ff fdde 	bl	8001cec <sxSpiTransmit>
}
 8002130:	bf00      	nop
 8002132:	3720      	adds	r7, #32
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <ClrIrqStatus>:

void ClrIrqStatus(sx1280_custom *radio, uint16_t irqMask) {
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	807b      	strh	r3, [r7, #2]
    uint8_t buf[3];
    buf[0] = 0X97;
 8002144:	2397      	movs	r3, #151	; 0x97
 8002146:	733b      	strb	r3, [r7, #12]
    buf[1] = (uint8_t) (((uint16_t) irqMask >> 8) & 0x00FF);
 8002148:	887b      	ldrh	r3, [r7, #2]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	b29b      	uxth	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) ((uint16_t) irqMask & 0x00FF);
 8002152:	887b      	ldrh	r3, [r7, #2]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	73bb      	strb	r3, [r7, #14]
    sxSpiTransmit(radio, buf, sizeof(buf));
 8002158:	f107 030c 	add.w	r3, r7, #12
 800215c:	2203      	movs	r2, #3
 800215e:	4619      	mov	r1, r3
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff fdc3 	bl	8001cec <sxSpiTransmit>
}
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <GetIrqStatus>:

void GetIrqStatus(sx1280_custom *radio) {
 800216e:	b580      	push	{r7, lr}
 8002170:	b084      	sub	sp, #16
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]

    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x15, 0x00, 0x00, 0x00 };
 8002176:	2315      	movs	r3, #21
 8002178:	723b      	strb	r3, [r7, #8]
 800217a:	2300      	movs	r3, #0
 800217c:	727b      	strb	r3, [r7, #9]
 800217e:	2300      	movs	r3, #0
 8002180:	72bb      	strb	r3, [r7, #10]
 8002182:	2300      	movs	r3, #0
 8002184:	72fb      	strb	r3, [r7, #11]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8002186:	f107 020c 	add.w	r2, r7, #12
 800218a:	f107 0108 	add.w	r1, r7, #8
 800218e:	2304      	movs	r3, #4
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff fdd4 	bl	8001d3e <sxSpiTransmitReceive>

    radio->IrqStatus = (uint16_t) (loraRxBuf[2] << 8 | loraRxBuf[3]);
 8002196:	7bbb      	ldrb	r3, [r7, #14]
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	b21a      	sxth	r2, r3
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	b21b      	sxth	r3, r3
 80021a0:	4313      	orrs	r3, r2
 80021a2:	b21b      	sxth	r3, r3
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	84da      	strh	r2, [r3, #38]	; 0x26

    if (radio->IrqStatus & (1 << 6)) {
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d004      	beq.n	80021c0 <GetIrqStatus+0x52>
        radio->crcError = 1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
    else {
        radio->crcError = 0;
    }
}
 80021be:	e003      	b.n	80021c8 <GetIrqStatus+0x5a>
        radio->crcError = 0;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80021c8:	bf00      	nop
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <SetTx>:

void SetTx(sx1280_custom *radio, uint8_t periodBase, uint16_t periodBaseCount) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	70fb      	strb	r3, [r7, #3]
 80021dc:	4613      	mov	r3, r2
 80021de:	803b      	strh	r3, [r7, #0]
    uint8_t buf[4];
    buf[0] = 0X83;
 80021e0:	2383      	movs	r3, #131	; 0x83
 80021e2:	733b      	strb	r3, [r7, #12]
    buf[1] = periodBase;
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) (((uint16_t) periodBaseCount >> 8) & 0x00FF);
 80021e8:	883b      	ldrh	r3, [r7, #0]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	73bb      	strb	r3, [r7, #14]
    buf[3] = (uint8_t) ((uint16_t) periodBaseCount & 0x00FF);
 80021f2:	883b      	ldrh	r3, [r7, #0]
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, buf, sizeof(buf));
 80021f8:	f107 030c 	add.w	r3, r7, #12
 80021fc:	2204      	movs	r2, #4
 80021fe:	4619      	mov	r1, r3
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff fd73 	bl	8001cec <sxSpiTransmit>
}
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <SetRx>:

void SetRx(sx1280_custom *radio, uint8_t periodBase, uint16_t periodBaseCount) {
 800220e:	b580      	push	{r7, lr}
 8002210:	b084      	sub	sp, #16
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	460b      	mov	r3, r1
 8002218:	70fb      	strb	r3, [r7, #3]
 800221a:	4613      	mov	r3, r2
 800221c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[4];
    buf[0] = 0X82;
 800221e:	2382      	movs	r3, #130	; 0x82
 8002220:	733b      	strb	r3, [r7, #12]
    buf[1] = periodBase;
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) (((uint16_t) periodBaseCount >> 8) & 0x00FF);
 8002226:	883b      	ldrh	r3, [r7, #0]
 8002228:	0a1b      	lsrs	r3, r3, #8
 800222a:	b29b      	uxth	r3, r3
 800222c:	b2db      	uxtb	r3, r3
 800222e:	73bb      	strb	r3, [r7, #14]
    buf[3] = (uint8_t) ((uint16_t) periodBaseCount & 0x00FF);
 8002230:	883b      	ldrh	r3, [r7, #0]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, buf, sizeof(buf));
 8002236:	f107 030c 	add.w	r3, r7, #12
 800223a:	2204      	movs	r2, #4
 800223c:	4619      	mov	r1, r3
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff fd54 	bl	8001cec <sxSpiTransmit>
}
 8002244:	bf00      	nop
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <GetPacketStatusLora>:

void GetPacketStatusLora(sx1280_custom *radio) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x1D, 0x00, 0x00, 0x00};
 8002254:	231d      	movs	r3, #29
 8002256:	723b      	strb	r3, [r7, #8]
 8002258:	2300      	movs	r3, #0
 800225a:	727b      	strb	r3, [r7, #9]
 800225c:	2300      	movs	r3, #0
 800225e:	72bb      	strb	r3, [r7, #10]
 8002260:	2300      	movs	r3, #0
 8002262:	72fb      	strb	r3, [r7, #11]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8002264:	f107 020c 	add.w	r2, r7, #12
 8002268:	f107 0108 	add.w	r1, r7, #8
 800226c:	2304      	movs	r3, #4
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff fd65 	bl	8001d3e <sxSpiTransmitReceive>

    radio->rssiSync = loraRxBuf[2];
 8002274:	7bba      	ldrb	r2, [r7, #14]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    radio->rawSnr = loraRxBuf[3];
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	b25a      	sxtb	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    radio->rssi = -((float) radio->rssiSync)/2;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800228c:	ee07 3a90 	vmov	s15, r3
 8002290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002294:	eeb1 7a67 	vneg.f32	s14, s15
 8002298:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800229c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    radio->snr = ((float) radio->rawSnr)/4;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 80022ac:	ee07 3a90 	vmov	s15, r3
 80022b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022b4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80022b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <WriteRegisterByte>:

void GetRxBufferStatus(sx1280_custom *radio) {

}

void WriteRegisterByte(sx1280_custom *radio, uint16_t address, uint8_t data) {
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	460b      	mov	r3, r1
 80022d4:	807b      	strh	r3, [r7, #2]
 80022d6:	4613      	mov	r3, r2
 80022d8:	707b      	strb	r3, [r7, #1]
    uint8_t loraTxBuf[4];
    loraTxBuf[0] = 0x18;
 80022da:	2318      	movs	r3, #24
 80022dc:	733b      	strb	r3, [r7, #12]
    loraTxBuf[1] = (uint8_t) (((uint16_t) address >> 8) & 0x00FF);
 80022de:	887b      	ldrh	r3, [r7, #2]
 80022e0:	0a1b      	lsrs	r3, r3, #8
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	737b      	strb	r3, [r7, #13]
    loraTxBuf[2] = (uint8_t) ((uint16_t) address & 0x00FF);
 80022e8:	887b      	ldrh	r3, [r7, #2]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	73bb      	strb	r3, [r7, #14]
    loraTxBuf[3] = data;
 80022ee:	787b      	ldrb	r3, [r7, #1]
 80022f0:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 80022f2:	f107 030c 	add.w	r3, r7, #12
 80022f6:	2204      	movs	r2, #4
 80022f8:	4619      	mov	r1, r3
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff fcf6 	bl	8001cec <sxSpiTransmit>
}
 8002300:	bf00      	nop
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002310:	4a14      	ldr	r2, [pc, #80]	; (8002364 <_sbrk+0x5c>)
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <_sbrk+0x60>)
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800231c:	4b13      	ldr	r3, [pc, #76]	; (800236c <_sbrk+0x64>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d102      	bne.n	800232a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <_sbrk+0x64>)
 8002326:	4a12      	ldr	r2, [pc, #72]	; (8002370 <_sbrk+0x68>)
 8002328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <_sbrk+0x64>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	429a      	cmp	r2, r3
 8002336:	d207      	bcs.n	8002348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002338:	f007 fbc6 	bl	8009ac8 <__errno>
 800233c:	4602      	mov	r2, r0
 800233e:	230c      	movs	r3, #12
 8002340:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002342:	f04f 33ff 	mov.w	r3, #4294967295
 8002346:	e009      	b.n	800235c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002348:	4b08      	ldr	r3, [pc, #32]	; (800236c <_sbrk+0x64>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800234e:	4b07      	ldr	r3, [pc, #28]	; (800236c <_sbrk+0x64>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	4a05      	ldr	r2, [pc, #20]	; (800236c <_sbrk+0x64>)
 8002358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800235a:	68fb      	ldr	r3, [r7, #12]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20020000 	.word	0x20020000
 8002368:	00000400 	.word	0x00000400
 800236c:	20000378 	.word	0x20000378
 8002370:	20001da0 	.word	0x20001da0

08002374 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <SystemInit+0x28>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237e:	4a07      	ldr	r2, [pc, #28]	; (800239c <SystemInit+0x28>)
 8002380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <SystemInit+0x28>)
 800238a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800238e:	609a      	str	r2, [r3, #8]
#endif
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <decode_TLM>:
    else {
        enc->debug_ranging = dec->debug;
    }
}

void decode_TLM(TLM_encoded *enc, TLM_decoded *dec) {
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
    dec->packet_type = enc->packet_state_bits & 1;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	701a      	strb	r2, [r3, #0]
    dec->flight_state = (enc->packet_state_bits >> 1) & 0b00011111;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	085b      	lsrs	r3, r3, #1
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	705a      	strb	r2, [r3, #1]
    dec->is_playing_music = (enc->packet_state_bits >> 6) & 1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	099b      	lsrs	r3, r3, #6
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	709a      	strb	r2, [r3, #2]
    dec->is_data_logging = (enc->packet_state_bits >> 7) & 1;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	09db      	lsrs	r3, r3, #7
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	70da      	strb	r2, [r3, #3]

    dec->pin_states = (enc->pin_states_servo & 0b00111111);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	785b      	ldrb	r3, [r3, #1]
 80023ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	711a      	strb	r2, [r3, #4]
    dec->servo_state = (enc->pin_states_servo >> 6) & 0b00000011;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	785b      	ldrb	r3, [r3, #1]
 80023fa:	099b      	lsrs	r3, r3, #6
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	715a      	strb	r2, [r3, #5]

    dec->systick = (enc->systick[0] << 16) | (enc->systick[1] << 8) | (enc->systick[2]);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	789b      	ldrb	r3, [r3, #2]
 8002406:	041a      	lsls	r2, r3, #16
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	78db      	ldrb	r3, [r3, #3]
 800240c:	021b      	lsls	r3, r3, #8
 800240e:	4313      	orrs	r3, r2
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	7912      	ldrb	r2, [r2, #4]
 8002414:	4313      	orrs	r3, r2
 8002416:	461a      	mov	r2, r3
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	609a      	str	r2, [r3, #8]

    dec->vbat = ((((uint16_t) enc->vbat_MSB) << 2) | ((uint16_t) enc->padding_vbat_LSB & 0b00000011 ) )*0.01;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	795b      	ldrb	r3, [r3, #5]
 8002420:	009a      	lsls	r2, r3, #2
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	799b      	ldrb	r3, [r3, #6]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	4313      	orrs	r3, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe f881 	bl	8000534 <__aeabi_i2d>
 8002432:	a36c      	add	r3, pc, #432	; (adr r3, 80025e4 <decode_TLM+0x244>)
 8002434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002438:	f7fe f8e6 	bl	8000608 <__aeabi_dmul>
 800243c:	4603      	mov	r3, r0
 800243e:	460c      	mov	r4, r1
 8002440:	4618      	mov	r0, r3
 8002442:	4621      	mov	r1, r4
 8002444:	f7fe fbb8 	bl	8000bb8 <__aeabi_d2f>
 8002448:	4602      	mov	r2, r0
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	60da      	str	r2, [r3, #12]

    dec->orientation_quat[0] = ((float) enc->orientation_quat[0])/127;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8002454:	ee07 3a90 	vmov	s15, r3
 8002458:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800245c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80025d8 <decode_TLM+0x238>
 8002460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	edc3 7a04 	vstr	s15, [r3, #16]
    dec->orientation_quat[1] = ((float) enc->orientation_quat[1])/127;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002470:	ee07 3a90 	vmov	s15, r3
 8002474:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002478:	eddf 6a57 	vldr	s13, [pc, #348]	; 80025d8 <decode_TLM+0x238>
 800247c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	edc3 7a05 	vstr	s15, [r3, #20]
    dec->orientation_quat[2] = ((float) enc->orientation_quat[2])/127;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800248c:	ee07 3a90 	vmov	s15, r3
 8002490:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002494:	eddf 6a50 	vldr	s13, [pc, #320]	; 80025d8 <decode_TLM+0x238>
 8002498:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	edc3 7a06 	vstr	s15, [r3, #24]
    dec->orientation_quat[3] = ((float) enc->orientation_quat[3])/127;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80024a8:	ee07 3a90 	vmov	s15, r3
 80024ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024b0:	eddf 6a49 	vldr	s13, [pc, #292]	; 80025d8 <decode_TLM+0x238>
 80024b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	edc3 7a07 	vstr	s15, [r3, #28]

    for (int i = 0; i < 3; i++) {
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	e01e      	b.n	8002502 <decode_TLM+0x162>
        dec->acc[i] = enc->acc[i];
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3304      	adds	r3, #4
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4413      	add	r3, r2
 80024ce:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 80024d2:	b219      	sxth	r1, r3
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	3210      	adds	r2, #16
 80024da:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        dec->gyro[i] = enc->gyro[i];
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	3308      	adds	r3, #8
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	4413      	add	r3, r2
 80024e8:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 80024ec:	b219      	sxth	r1, r3
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	3310      	adds	r3, #16
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	4413      	add	r3, r2
 80024f8:	460a      	mov	r2, r1
 80024fa:	80da      	strh	r2, [r3, #6]
    for (int i = 0; i < 3; i++) {
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	3301      	adds	r3, #1
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2b02      	cmp	r3, #2
 8002506:	dddd      	ble.n	80024c4 <decode_TLM+0x124>
    }

    dec->baro = (float) (enc->baro + 50000);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8b3 3017 	ldrh.w	r3, [r3, #23]
 800250e:	b29b      	uxth	r3, r3
 8002510:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8002514:	3350      	adds	r3, #80	; 0x50
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    dec->temp = ((float) enc->temp)/4;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	7e5b      	ldrb	r3, [r3, #25]
 8002528:	ee07 3a90 	vmov	s15, r3
 800252c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002530:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002534:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    dec->altitude = ((float) enc->altitude) * 0.0625 - 48;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	8b5b      	ldrh	r3, [r3, #26]
 8002542:	b29b      	uxth	r3, r3
 8002544:	ee07 3a90 	vmov	s15, r3
 8002548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800254c:	ee17 0a90 	vmov	r0, s15
 8002550:	f7fe f802 	bl	8000558 <__aeabi_f2d>
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	4b20      	ldr	r3, [pc, #128]	; (80025dc <decode_TLM+0x23c>)
 800255a:	f7fe f855 	bl	8000608 <__aeabi_dmul>
 800255e:	4603      	mov	r3, r0
 8002560:	460c      	mov	r4, r1
 8002562:	4618      	mov	r0, r3
 8002564:	4621      	mov	r1, r4
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <decode_TLM+0x240>)
 800256c:	f7fd fe94 	bl	8000298 <__aeabi_dsub>
 8002570:	4603      	mov	r3, r0
 8002572:	460c      	mov	r4, r1
 8002574:	4618      	mov	r0, r3
 8002576:	4621      	mov	r1, r4
 8002578:	f7fe fb1e 	bl	8000bb8 <__aeabi_d2f>
 800257c:	4602      	mov	r2, r0
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	635a      	str	r2, [r3, #52]	; 0x34

    dec->vertical_velocity = (float) (enc->vertical_velocity - 80);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	7f1b      	ldrb	r3, [r3, #28]
 8002586:	3b50      	subs	r3, #80	; 0x50
 8002588:	ee07 3a90 	vmov	s15, r3
 800258c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    if (dec->packet_type == 1) {
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d10f      	bne.n	80025be <decode_TLM+0x21e>
        dec->ranging = ((float) enc->debug_ranging) * 0.25;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f8b3 301d 	ldrh.w	r3, [r3, #29]
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	ee07 3a90 	vmov	s15, r3
 80025aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ae:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80025b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    }
    else {
        dec->debug = (uint16_t) enc->debug_ranging;
    }
}
 80025bc:	e005      	b.n	80025ca <decode_TLM+0x22a>
        dec->debug = (uint16_t) enc->debug_ranging;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f8b3 301d 	ldrh.w	r3, [r3, #29]
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd90      	pop	{r4, r7, pc}
 80025d2:	bf00      	nop
 80025d4:	f3af 8000 	nop.w
 80025d8:	42fe0000 	.word	0x42fe0000
 80025dc:	3fb00000 	.word	0x3fb00000
 80025e0:	40480000 	.word	0x40480000
 80025e4:	47ae147b 	.word	0x47ae147b
 80025e8:	3f847ae1 	.word	0x3f847ae1

080025ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002624 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025f2:	e003      	b.n	80025fc <LoopCopyDataInit>

080025f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025f4:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025fa:	3104      	adds	r1, #4

080025fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025fc:	480b      	ldr	r0, [pc, #44]	; (800262c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025fe:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002600:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002602:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002604:	d3f6      	bcc.n	80025f4 <CopyDataInit>
  ldr  r2, =_sbss
 8002606:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002608:	e002      	b.n	8002610 <LoopFillZerobss>

0800260a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800260a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800260c:	f842 3b04 	str.w	r3, [r2], #4

08002610 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002612:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002614:	d3f9      	bcc.n	800260a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002616:	f7ff fead 	bl	8002374 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800261a:	f007 fa5b 	bl	8009ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800261e:	f7fe ffb3 	bl	8001588 <main>
  bx  lr    
 8002622:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002624:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002628:	0800bfe0 	.word	0x0800bfe0
  ldr  r0, =_sdata
 800262c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002630:	2000035c 	.word	0x2000035c
  ldr  r2, =_sbss
 8002634:	2000035c 	.word	0x2000035c
  ldr  r3, = _ebss
 8002638:	20001d9c 	.word	0x20001d9c

0800263c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800263c:	e7fe      	b.n	800263c <ADC_IRQHandler>
	...

08002640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002644:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <HAL_Init+0x40>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a0d      	ldr	r2, [pc, #52]	; (8002680 <HAL_Init+0x40>)
 800264a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800264e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_Init+0x40>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <HAL_Init+0x40>)
 8002656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800265a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800265c:	4b08      	ldr	r3, [pc, #32]	; (8002680 <HAL_Init+0x40>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a07      	ldr	r2, [pc, #28]	; (8002680 <HAL_Init+0x40>)
 8002662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002666:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002668:	2003      	movs	r0, #3
 800266a:	f000 fbbf 	bl	8002dec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800266e:	2000      	movs	r0, #0
 8002670:	f000 f808 	bl	8002684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002674:	f7ff f9c2 	bl	80019fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40023c00 	.word	0x40023c00

08002684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <HAL_InitTick+0x54>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_InitTick+0x58>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	4619      	mov	r1, r3
 8002696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800269a:	fbb3 f3f1 	udiv	r3, r3, r1
 800269e:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fbd7 	bl	8002e56 <HAL_SYSTICK_Config>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e00e      	b.n	80026d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b0f      	cmp	r3, #15
 80026b6:	d80a      	bhi.n	80026ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026b8:	2200      	movs	r2, #0
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	f04f 30ff 	mov.w	r0, #4294967295
 80026c0:	f000 fb9f 	bl	8002e02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026c4:	4a06      	ldr	r2, [pc, #24]	; (80026e0 <HAL_InitTick+0x5c>)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e000      	b.n	80026d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20000004 	.word	0x20000004
 80026dc:	2000000c 	.word	0x2000000c
 80026e0:	20000008 	.word	0x20000008

080026e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_IncTick+0x20>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_IncTick+0x24>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	4a04      	ldr	r2, [pc, #16]	; (8002708 <HAL_IncTick+0x24>)
 80026f6:	6013      	str	r3, [r2, #0]
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	2000000c 	.word	0x2000000c
 8002708:	200004bc 	.word	0x200004bc

0800270c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return uwTick;
 8002710:	4b03      	ldr	r3, [pc, #12]	; (8002720 <HAL_GetTick+0x14>)
 8002712:	681b      	ldr	r3, [r3, #0]
}
 8002714:	4618      	mov	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	200004bc 	.word	0x200004bc

08002724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800272c:	f7ff ffee 	bl	800270c <HAL_GetTick>
 8002730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273c:	d005      	beq.n	800274a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_Delay+0x40>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800274a:	bf00      	nop
 800274c:	f7ff ffde 	bl	800270c <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	429a      	cmp	r2, r3
 800275a:	d8f7      	bhi.n	800274c <HAL_Delay+0x28>
  {
  }
}
 800275c:	bf00      	nop
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	2000000c 	.word	0x2000000c

08002768 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e033      	b.n	80027e6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff f960 	bl	8001a4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d118      	bne.n	80027d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027ae:	f023 0302 	bic.w	r3, r3, #2
 80027b2:	f043 0202 	orr.w	r2, r3, #2
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f94a 	bl	8002a54 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f023 0303 	bic.w	r3, r3, #3
 80027ce:	f043 0201 	orr.w	r2, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	641a      	str	r2, [r3, #64]	; 0x40
 80027d6:	e001      	b.n	80027dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_ADC_ConfigChannel+0x1c>
 8002808:	2302      	movs	r3, #2
 800280a:	e113      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x244>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b09      	cmp	r3, #9
 800281a:	d925      	bls.n	8002868 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68d9      	ldr	r1, [r3, #12]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	b29b      	uxth	r3, r3
 8002828:	461a      	mov	r2, r3
 800282a:	4613      	mov	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	3b1e      	subs	r3, #30
 8002832:	2207      	movs	r2, #7
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43da      	mvns	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	400a      	ands	r2, r1
 8002840:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68d9      	ldr	r1, [r3, #12]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	b29b      	uxth	r3, r3
 8002852:	4618      	mov	r0, r3
 8002854:	4603      	mov	r3, r0
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4403      	add	r3, r0
 800285a:	3b1e      	subs	r3, #30
 800285c:	409a      	lsls	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	e022      	b.n	80028ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6919      	ldr	r1, [r3, #16]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	b29b      	uxth	r3, r3
 8002874:	461a      	mov	r2, r3
 8002876:	4613      	mov	r3, r2
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	4413      	add	r3, r2
 800287c:	2207      	movs	r2, #7
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43da      	mvns	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	400a      	ands	r2, r1
 800288a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6919      	ldr	r1, [r3, #16]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	b29b      	uxth	r3, r3
 800289c:	4618      	mov	r0, r3
 800289e:	4603      	mov	r3, r0
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	4403      	add	r3, r0
 80028a4:	409a      	lsls	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b06      	cmp	r3, #6
 80028b4:	d824      	bhi.n	8002900 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	3b05      	subs	r3, #5
 80028c8:	221f      	movs	r2, #31
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43da      	mvns	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	400a      	ands	r2, r1
 80028d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	4618      	mov	r0, r3
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	3b05      	subs	r3, #5
 80028f2:	fa00 f203 	lsl.w	r2, r0, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	635a      	str	r2, [r3, #52]	; 0x34
 80028fe:	e04c      	b.n	800299a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b0c      	cmp	r3, #12
 8002906:	d824      	bhi.n	8002952 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	3b23      	subs	r3, #35	; 0x23
 800291a:	221f      	movs	r2, #31
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43da      	mvns	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	400a      	ands	r2, r1
 8002928:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	b29b      	uxth	r3, r3
 8002936:	4618      	mov	r0, r3
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	3b23      	subs	r3, #35	; 0x23
 8002944:	fa00 f203 	lsl.w	r2, r0, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	631a      	str	r2, [r3, #48]	; 0x30
 8002950:	e023      	b.n	800299a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	3b41      	subs	r3, #65	; 0x41
 8002964:	221f      	movs	r2, #31
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43da      	mvns	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	400a      	ands	r2, r1
 8002972:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	b29b      	uxth	r3, r3
 8002980:	4618      	mov	r0, r3
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	3b41      	subs	r3, #65	; 0x41
 800298e:	fa00 f203 	lsl.w	r2, r0, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800299a:	4b29      	ldr	r3, [pc, #164]	; (8002a40 <HAL_ADC_ConfigChannel+0x250>)
 800299c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a28      	ldr	r2, [pc, #160]	; (8002a44 <HAL_ADC_ConfigChannel+0x254>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d10f      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x1d8>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b12      	cmp	r3, #18
 80029ae:	d10b      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a1d      	ldr	r2, [pc, #116]	; (8002a44 <HAL_ADC_ConfigChannel+0x254>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d12b      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x23a>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1c      	ldr	r2, [pc, #112]	; (8002a48 <HAL_ADC_ConfigChannel+0x258>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d003      	beq.n	80029e4 <HAL_ADC_ConfigChannel+0x1f4>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b11      	cmp	r3, #17
 80029e2:	d122      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a11      	ldr	r2, [pc, #68]	; (8002a48 <HAL_ADC_ConfigChannel+0x258>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d111      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a06:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <HAL_ADC_ConfigChannel+0x25c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a11      	ldr	r2, [pc, #68]	; (8002a50 <HAL_ADC_ConfigChannel+0x260>)
 8002a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a10:	0c9a      	lsrs	r2, r3, #18
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a1c:	e002      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	3b01      	subs	r3, #1
 8002a22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f9      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	40012300 	.word	0x40012300
 8002a44:	40012000 	.word	0x40012000
 8002a48:	10000012 	.word	0x10000012
 8002a4c:	20000004 	.word	0x20000004
 8002a50:	431bde83 	.word	0x431bde83

08002a54 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a5c:	4b79      	ldr	r3, [pc, #484]	; (8002c44 <ADC_Init+0x1f0>)
 8002a5e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	431a      	orrs	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6859      	ldr	r1, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	021a      	lsls	r2, r3, #8
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002aac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6859      	ldr	r1, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ace:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6899      	ldr	r1, [r3, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae6:	4a58      	ldr	r2, [pc, #352]	; (8002c48 <ADC_Init+0x1f4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d022      	beq.n	8002b32 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002afa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6899      	ldr	r1, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6899      	ldr	r1, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	e00f      	b.n	8002b52 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b50:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0202 	bic.w	r2, r2, #2
 8002b60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6899      	ldr	r1, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	7e1b      	ldrb	r3, [r3, #24]
 8002b6c:	005a      	lsls	r2, r3, #1
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d01b      	beq.n	8002bb8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b8e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b9e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6859      	ldr	r1, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	3b01      	subs	r3, #1
 8002bac:	035a      	lsls	r2, r3, #13
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	e007      	b.n	8002bc8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bc6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	051a      	lsls	r2, r3, #20
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6899      	ldr	r1, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c0a:	025a      	lsls	r2, r3, #9
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6899      	ldr	r1, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	029a      	lsls	r2, r3, #10
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	609a      	str	r2, [r3, #8]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	40012300 	.word	0x40012300
 8002c48:	0f000001 	.word	0x0f000001

08002c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <__NVIC_SetPriorityGrouping+0x44>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c7e:	4a04      	ldr	r2, [pc, #16]	; (8002c90 <__NVIC_SetPriorityGrouping+0x44>)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	60d3      	str	r3, [r2, #12]
}
 8002c84:	bf00      	nop
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c98:	4b04      	ldr	r3, [pc, #16]	; (8002cac <__NVIC_GetPriorityGrouping+0x18>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	0a1b      	lsrs	r3, r3, #8
 8002c9e:	f003 0307 	and.w	r3, r3, #7
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	db0b      	blt.n	8002cda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	f003 021f 	and.w	r2, r3, #31
 8002cc8:	4907      	ldr	r1, [pc, #28]	; (8002ce8 <__NVIC_EnableIRQ+0x38>)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	e000e100 	.word	0xe000e100

08002cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	6039      	str	r1, [r7, #0]
 8002cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	db0a      	blt.n	8002d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	490c      	ldr	r1, [pc, #48]	; (8002d38 <__NVIC_SetPriority+0x4c>)
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	0112      	lsls	r2, r2, #4
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	440b      	add	r3, r1
 8002d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d14:	e00a      	b.n	8002d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	4908      	ldr	r1, [pc, #32]	; (8002d3c <__NVIC_SetPriority+0x50>)
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	3b04      	subs	r3, #4
 8002d24:	0112      	lsls	r2, r2, #4
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	440b      	add	r3, r1
 8002d2a:	761a      	strb	r2, [r3, #24]
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	e000e100 	.word	0xe000e100
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b089      	sub	sp, #36	; 0x24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f1c3 0307 	rsb	r3, r3, #7
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	bf28      	it	cs
 8002d5e:	2304      	movcs	r3, #4
 8002d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	3304      	adds	r3, #4
 8002d66:	2b06      	cmp	r3, #6
 8002d68:	d902      	bls.n	8002d70 <NVIC_EncodePriority+0x30>
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	3b03      	subs	r3, #3
 8002d6e:	e000      	b.n	8002d72 <NVIC_EncodePriority+0x32>
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d74:	f04f 32ff 	mov.w	r2, #4294967295
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43da      	mvns	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	401a      	ands	r2, r3
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d88:	f04f 31ff 	mov.w	r1, #4294967295
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d92:	43d9      	mvns	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d98:	4313      	orrs	r3, r2
         );
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3724      	adds	r7, #36	; 0x24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002db8:	d301      	bcc.n	8002dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e00f      	b.n	8002dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dbe:	4a0a      	ldr	r2, [pc, #40]	; (8002de8 <SysTick_Config+0x40>)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dc6:	210f      	movs	r1, #15
 8002dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dcc:	f7ff ff8e 	bl	8002cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dd0:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <SysTick_Config+0x40>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dd6:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <SysTick_Config+0x40>)
 8002dd8:	2207      	movs	r2, #7
 8002dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	e000e010 	.word	0xe000e010

08002dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff ff29 	bl	8002c4c <__NVIC_SetPriorityGrouping>
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b086      	sub	sp, #24
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	4603      	mov	r3, r0
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	607a      	str	r2, [r7, #4]
 8002e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e14:	f7ff ff3e 	bl	8002c94 <__NVIC_GetPriorityGrouping>
 8002e18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	68b9      	ldr	r1, [r7, #8]
 8002e1e:	6978      	ldr	r0, [r7, #20]
 8002e20:	f7ff ff8e 	bl	8002d40 <NVIC_EncodePriority>
 8002e24:	4602      	mov	r2, r0
 8002e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff5d 	bl	8002cec <__NVIC_SetPriority>
}
 8002e32:	bf00      	nop
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	4603      	mov	r3, r0
 8002e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff31 	bl	8002cb0 <__NVIC_EnableIRQ>
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff ffa2 	bl	8002da8 <SysTick_Config>
 8002e64:	4603      	mov	r3, r0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b089      	sub	sp, #36	; 0x24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e86:	2300      	movs	r3, #0
 8002e88:	61fb      	str	r3, [r7, #28]
 8002e8a:	e159      	b.n	8003140 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	f040 8148 	bne.w	800313a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d00b      	beq.n	8002eca <HAL_GPIO_Init+0x5a>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d007      	beq.n	8002eca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ebe:	2b11      	cmp	r3, #17
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b12      	cmp	r3, #18
 8002ec8:	d130      	bne.n	8002f2c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f00:	2201      	movs	r2, #1
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f003 0201 	and.w	r2, r3, #1
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	2203      	movs	r2, #3
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d003      	beq.n	8002f6c <HAL_GPIO_Init+0xfc>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b12      	cmp	r3, #18
 8002f6a:	d123      	bne.n	8002fb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	08da      	lsrs	r2, r3, #3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3208      	adds	r2, #8
 8002f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	220f      	movs	r2, #15
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	691a      	ldr	r2, [r3, #16]
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	08da      	lsrs	r2, r3, #3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3208      	adds	r2, #8
 8002fae:	69b9      	ldr	r1, [r7, #24]
 8002fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0203 	and.w	r2, r3, #3
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 80a2 	beq.w	800313a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	4b56      	ldr	r3, [pc, #344]	; (8003154 <HAL_GPIO_Init+0x2e4>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	4a55      	ldr	r2, [pc, #340]	; (8003154 <HAL_GPIO_Init+0x2e4>)
 8003000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003004:	6453      	str	r3, [r2, #68]	; 0x44
 8003006:	4b53      	ldr	r3, [pc, #332]	; (8003154 <HAL_GPIO_Init+0x2e4>)
 8003008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003012:	4a51      	ldr	r2, [pc, #324]	; (8003158 <HAL_GPIO_Init+0x2e8>)
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	089b      	lsrs	r3, r3, #2
 8003018:	3302      	adds	r3, #2
 800301a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	220f      	movs	r2, #15
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43db      	mvns	r3, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4013      	ands	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a48      	ldr	r2, [pc, #288]	; (800315c <HAL_GPIO_Init+0x2ec>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d019      	beq.n	8003072 <HAL_GPIO_Init+0x202>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a47      	ldr	r2, [pc, #284]	; (8003160 <HAL_GPIO_Init+0x2f0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d013      	beq.n	800306e <HAL_GPIO_Init+0x1fe>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a46      	ldr	r2, [pc, #280]	; (8003164 <HAL_GPIO_Init+0x2f4>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d00d      	beq.n	800306a <HAL_GPIO_Init+0x1fa>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a45      	ldr	r2, [pc, #276]	; (8003168 <HAL_GPIO_Init+0x2f8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d007      	beq.n	8003066 <HAL_GPIO_Init+0x1f6>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a44      	ldr	r2, [pc, #272]	; (800316c <HAL_GPIO_Init+0x2fc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d101      	bne.n	8003062 <HAL_GPIO_Init+0x1f2>
 800305e:	2304      	movs	r3, #4
 8003060:	e008      	b.n	8003074 <HAL_GPIO_Init+0x204>
 8003062:	2307      	movs	r3, #7
 8003064:	e006      	b.n	8003074 <HAL_GPIO_Init+0x204>
 8003066:	2303      	movs	r3, #3
 8003068:	e004      	b.n	8003074 <HAL_GPIO_Init+0x204>
 800306a:	2302      	movs	r3, #2
 800306c:	e002      	b.n	8003074 <HAL_GPIO_Init+0x204>
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <HAL_GPIO_Init+0x204>
 8003072:	2300      	movs	r3, #0
 8003074:	69fa      	ldr	r2, [r7, #28]
 8003076:	f002 0203 	and.w	r2, r2, #3
 800307a:	0092      	lsls	r2, r2, #2
 800307c:	4093      	lsls	r3, r2
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4313      	orrs	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003084:	4934      	ldr	r1, [pc, #208]	; (8003158 <HAL_GPIO_Init+0x2e8>)
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	089b      	lsrs	r3, r3, #2
 800308a:	3302      	adds	r3, #2
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003092:	4b37      	ldr	r3, [pc, #220]	; (8003170 <HAL_GPIO_Init+0x300>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	43db      	mvns	r3, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4013      	ands	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030b6:	4a2e      	ldr	r2, [pc, #184]	; (8003170 <HAL_GPIO_Init+0x300>)
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030bc:	4b2c      	ldr	r3, [pc, #176]	; (8003170 <HAL_GPIO_Init+0x300>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030e0:	4a23      	ldr	r2, [pc, #140]	; (8003170 <HAL_GPIO_Init+0x300>)
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030e6:	4b22      	ldr	r3, [pc, #136]	; (8003170 <HAL_GPIO_Init+0x300>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	43db      	mvns	r3, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4013      	ands	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800310a:	4a19      	ldr	r2, [pc, #100]	; (8003170 <HAL_GPIO_Init+0x300>)
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003110:	4b17      	ldr	r3, [pc, #92]	; (8003170 <HAL_GPIO_Init+0x300>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003134:	4a0e      	ldr	r2, [pc, #56]	; (8003170 <HAL_GPIO_Init+0x300>)
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3301      	adds	r3, #1
 800313e:	61fb      	str	r3, [r7, #28]
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	2b0f      	cmp	r3, #15
 8003144:	f67f aea2 	bls.w	8002e8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003148:	bf00      	nop
 800314a:	3724      	adds	r7, #36	; 0x24
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	40023800 	.word	0x40023800
 8003158:	40013800 	.word	0x40013800
 800315c:	40020000 	.word	0x40020000
 8003160:	40020400 	.word	0x40020400
 8003164:	40020800 	.word	0x40020800
 8003168:	40020c00 	.word	0x40020c00
 800316c:	40021000 	.word	0x40021000
 8003170:	40013c00 	.word	0x40013c00

08003174 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	887b      	ldrh	r3, [r7, #2]
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800318c:	2301      	movs	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
 8003190:	e001      	b.n	8003196 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003192:	2300      	movs	r3, #0
 8003194:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003196:	7bfb      	ldrb	r3, [r7, #15]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	807b      	strh	r3, [r7, #2]
 80031b0:	4613      	mov	r3, r2
 80031b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031b4:	787b      	ldrb	r3, [r7, #1]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031ba:	887a      	ldrh	r2, [r7, #2]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031c0:	e003      	b.n	80031ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031c2:	887b      	ldrh	r3, [r7, #2]
 80031c4:	041a      	lsls	r2, r3, #16
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	619a      	str	r2, [r3, #24]
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e11f      	b.n	800342a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fe fc68 	bl	8001ad4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2224      	movs	r2, #36	; 0x24
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0201 	bic.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800322a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800323a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800323c:	f001 fec2 	bl	8004fc4 <HAL_RCC_GetPCLK1Freq>
 8003240:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4a7b      	ldr	r2, [pc, #492]	; (8003434 <HAL_I2C_Init+0x25c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d807      	bhi.n	800325c <HAL_I2C_Init+0x84>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4a7a      	ldr	r2, [pc, #488]	; (8003438 <HAL_I2C_Init+0x260>)
 8003250:	4293      	cmp	r3, r2
 8003252:	bf94      	ite	ls
 8003254:	2301      	movls	r3, #1
 8003256:	2300      	movhi	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	e006      	b.n	800326a <HAL_I2C_Init+0x92>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4a77      	ldr	r2, [pc, #476]	; (800343c <HAL_I2C_Init+0x264>)
 8003260:	4293      	cmp	r3, r2
 8003262:	bf94      	ite	ls
 8003264:	2301      	movls	r3, #1
 8003266:	2300      	movhi	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e0db      	b.n	800342a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4a72      	ldr	r2, [pc, #456]	; (8003440 <HAL_I2C_Init+0x268>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	0c9b      	lsrs	r3, r3, #18
 800327c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	4a64      	ldr	r2, [pc, #400]	; (8003434 <HAL_I2C_Init+0x25c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d802      	bhi.n	80032ac <HAL_I2C_Init+0xd4>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	3301      	adds	r3, #1
 80032aa:	e009      	b.n	80032c0 <HAL_I2C_Init+0xe8>
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	4a63      	ldr	r2, [pc, #396]	; (8003444 <HAL_I2C_Init+0x26c>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	099b      	lsrs	r3, r3, #6
 80032be:	3301      	adds	r3, #1
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	430b      	orrs	r3, r1
 80032c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	4956      	ldr	r1, [pc, #344]	; (8003434 <HAL_I2C_Init+0x25c>)
 80032dc:	428b      	cmp	r3, r1
 80032de:	d80d      	bhi.n	80032fc <HAL_I2C_Init+0x124>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	1e59      	subs	r1, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80032ee:	3301      	adds	r3, #1
 80032f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	bf38      	it	cc
 80032f8:	2304      	movcc	r3, #4
 80032fa:	e04f      	b.n	800339c <HAL_I2C_Init+0x1c4>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d111      	bne.n	8003328 <HAL_I2C_Init+0x150>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	1e58      	subs	r0, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6859      	ldr	r1, [r3, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	440b      	add	r3, r1
 8003312:	fbb0 f3f3 	udiv	r3, r0, r3
 8003316:	3301      	adds	r3, #1
 8003318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800331c:	2b00      	cmp	r3, #0
 800331e:	bf0c      	ite	eq
 8003320:	2301      	moveq	r3, #1
 8003322:	2300      	movne	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	e012      	b.n	800334e <HAL_I2C_Init+0x176>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	1e58      	subs	r0, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6859      	ldr	r1, [r3, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	0099      	lsls	r1, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	fbb0 f3f3 	udiv	r3, r0, r3
 800333e:	3301      	adds	r3, #1
 8003340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003344:	2b00      	cmp	r3, #0
 8003346:	bf0c      	ite	eq
 8003348:	2301      	moveq	r3, #1
 800334a:	2300      	movne	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_I2C_Init+0x17e>
 8003352:	2301      	movs	r3, #1
 8003354:	e022      	b.n	800339c <HAL_I2C_Init+0x1c4>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10e      	bne.n	800337c <HAL_I2C_Init+0x1a4>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1e58      	subs	r0, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6859      	ldr	r1, [r3, #4]
 8003366:	460b      	mov	r3, r1
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	440b      	add	r3, r1
 800336c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003370:	3301      	adds	r3, #1
 8003372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800337a:	e00f      	b.n	800339c <HAL_I2C_Init+0x1c4>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	1e58      	subs	r0, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6859      	ldr	r1, [r3, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	0099      	lsls	r1, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003392:	3301      	adds	r3, #1
 8003394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003398:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	6809      	ldr	r1, [r1, #0]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69da      	ldr	r2, [r3, #28]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6911      	ldr	r1, [r2, #16]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	68d2      	ldr	r2, [r2, #12]
 80033d6:	4311      	orrs	r1, r2
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	430b      	orrs	r3, r1
 80033de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695a      	ldr	r2, [r3, #20]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	000186a0 	.word	0x000186a0
 8003438:	001e847f 	.word	0x001e847f
 800343c:	003d08ff 	.word	0x003d08ff
 8003440:	431bde83 	.word	0x431bde83
 8003444:	10624dd3 	.word	0x10624dd3

08003448 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800344a:	b08f      	sub	sp, #60	; 0x3c
 800344c:	af0a      	add	r7, sp, #40	; 0x28
 800344e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e10f      	b.n	800367a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d106      	bne.n	800347a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f006 f835 	bl	80094e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2203      	movs	r2, #3
 800347e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348a:	2b00      	cmp	r3, #0
 800348c:	d102      	bne.n	8003494 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f002 ffee 	bl	800647a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	603b      	str	r3, [r7, #0]
 80034a4:	687e      	ldr	r6, [r7, #4]
 80034a6:	466d      	mov	r5, sp
 80034a8:	f106 0410 	add.w	r4, r6, #16
 80034ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80034bc:	1d33      	adds	r3, r6, #4
 80034be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034c0:	6838      	ldr	r0, [r7, #0]
 80034c2:	f002 fec5 	bl	8006250 <USB_CoreInit>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0d0      	b.n	800367a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2100      	movs	r1, #0
 80034de:	4618      	mov	r0, r3
 80034e0:	f002 ffdc 	bl	800649c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034e4:	2300      	movs	r3, #0
 80034e6:	73fb      	strb	r3, [r7, #15]
 80034e8:	e04a      	b.n	8003580 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034ea:	7bfa      	ldrb	r2, [r7, #15]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	333d      	adds	r3, #61	; 0x3d
 80034fa:	2201      	movs	r2, #1
 80034fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034fe:	7bfa      	ldrb	r2, [r7, #15]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	333c      	adds	r3, #60	; 0x3c
 800350e:	7bfa      	ldrb	r2, [r7, #15]
 8003510:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003512:	7bfa      	ldrb	r2, [r7, #15]
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	b298      	uxth	r0, r3
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	3342      	adds	r3, #66	; 0x42
 8003526:	4602      	mov	r2, r0
 8003528:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800352a:	7bfa      	ldrb	r2, [r7, #15]
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	1a9b      	subs	r3, r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	333f      	adds	r3, #63	; 0x3f
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800353e:	7bfa      	ldrb	r2, [r7, #15]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	1a9b      	subs	r3, r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	3344      	adds	r3, #68	; 0x44
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003552:	7bfa      	ldrb	r2, [r7, #15]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	3348      	adds	r3, #72	; 0x48
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003566:	7bfa      	ldrb	r2, [r7, #15]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	3350      	adds	r3, #80	; 0x50
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	3301      	adds	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	429a      	cmp	r2, r3
 8003588:	d3af      	bcc.n	80034ea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800358a:	2300      	movs	r3, #0
 800358c:	73fb      	strb	r3, [r7, #15]
 800358e:	e044      	b.n	800361a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003590:	7bfa      	ldrb	r2, [r7, #15]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80035a2:	2200      	movs	r2, #0
 80035a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035a6:	7bfa      	ldrb	r2, [r7, #15]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80035b8:	7bfa      	ldrb	r2, [r7, #15]
 80035ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80035ce:	2200      	movs	r2, #0
 80035d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035d2:	7bfa      	ldrb	r2, [r7, #15]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035e8:	7bfa      	ldrb	r2, [r7, #15]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035fe:	7bfa      	ldrb	r2, [r7, #15]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	3301      	adds	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
 800361a:	7bfa      	ldrb	r2, [r7, #15]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	429a      	cmp	r2, r3
 8003622:	d3b5      	bcc.n	8003590 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	603b      	str	r3, [r7, #0]
 800362a:	687e      	ldr	r6, [r7, #4]
 800362c:	466d      	mov	r5, sp
 800362e:	f106 0410 	add.w	r4, r6, #16
 8003632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800363a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800363e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003642:	1d33      	adds	r3, r6, #4
 8003644:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003646:	6838      	ldr	r0, [r7, #0]
 8003648:	f002 ff52 	bl	80064f0 <USB_DevInit>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2202      	movs	r2, #2
 8003656:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e00d      	b.n	800367a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f003 ff9a 	bl	80075ac <USB_DevDisconnect>

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003682 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_PCD_Start+0x1c>
 800369a:	2302      	movs	r3, #2
 800369c:	e020      	b.n	80036e0 <HAL_PCD_Start+0x5e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d109      	bne.n	80036c2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d005      	beq.n	80036c2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f002 fec6 	bl	8006458 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f003 ff4a 	bl	800756a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036e8:	b590      	push	{r4, r7, lr}
 80036ea:	b08d      	sub	sp, #52	; 0x34
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f004 f808 	bl	8007714 <USB_GetMode>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	f040 839d 	bne.w	8003e46 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f003 ff6c 	bl	80075ee <USB_ReadInterrupts>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8393 	beq.w	8003e44 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f003 ff63 	bl	80075ee <USB_ReadInterrupts>
 8003728:	4603      	mov	r3, r0
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b02      	cmp	r3, #2
 8003730:	d107      	bne.n	8003742 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695a      	ldr	r2, [r3, #20]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f002 0202 	and.w	r2, r2, #2
 8003740:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f003 ff51 	bl	80075ee <USB_ReadInterrupts>
 800374c:	4603      	mov	r3, r0
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	2b10      	cmp	r3, #16
 8003754:	d161      	bne.n	800381a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699a      	ldr	r2, [r3, #24]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0210 	bic.w	r2, r2, #16
 8003764:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	f003 020f 	and.w	r2, r3, #15
 8003772:	4613      	mov	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	1a9b      	subs	r3, r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	4413      	add	r3, r2
 8003782:	3304      	adds	r3, #4
 8003784:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	0c5b      	lsrs	r3, r3, #17
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	2b02      	cmp	r3, #2
 8003790:	d124      	bne.n	80037dc <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003798:	4013      	ands	r3, r2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d035      	beq.n	800380a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	091b      	lsrs	r3, r3, #4
 80037a6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	461a      	mov	r2, r3
 80037b0:	6a38      	ldr	r0, [r7, #32]
 80037b2:	f003 fdb7 	bl	8007324 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037c2:	441a      	add	r2, r3
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	699a      	ldr	r2, [r3, #24]
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	091b      	lsrs	r3, r3, #4
 80037d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037d4:	441a      	add	r2, r3
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	619a      	str	r2, [r3, #24]
 80037da:	e016      	b.n	800380a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	0c5b      	lsrs	r3, r3, #17
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	2b06      	cmp	r3, #6
 80037e6:	d110      	bne.n	800380a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037ee:	2208      	movs	r2, #8
 80037f0:	4619      	mov	r1, r3
 80037f2:	6a38      	ldr	r0, [r7, #32]
 80037f4:	f003 fd96 	bl	8007324 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	699a      	ldr	r2, [r3, #24]
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	091b      	lsrs	r3, r3, #4
 8003800:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003804:	441a      	add	r2, r3
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699a      	ldr	r2, [r3, #24]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0210 	orr.w	r2, r2, #16
 8003818:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f003 fee5 	bl	80075ee <USB_ReadInterrupts>
 8003824:	4603      	mov	r3, r0
 8003826:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800382a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800382e:	d16e      	bne.n	800390e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f003 feeb 	bl	8007614 <USB_ReadDevAllOutEpInterrupt>
 800383e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003840:	e062      	b.n	8003908 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d057      	beq.n	80038fc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	4611      	mov	r1, r2
 8003856:	4618      	mov	r0, r3
 8003858:	f003 ff10 	bl	800767c <USB_ReadDevOutEPInterrupt>
 800385c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00c      	beq.n	8003882 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	4413      	add	r3, r2
 8003870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003874:	461a      	mov	r2, r3
 8003876:	2301      	movs	r3, #1
 8003878:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800387a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fdb1 	bl	80043e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00c      	beq.n	80038a6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003898:	461a      	mov	r2, r3
 800389a:	2308      	movs	r3, #8
 800389c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800389e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 feab 	bl	80045fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038bc:	461a      	mov	r2, r3
 80038be:	2310      	movs	r3, #16
 80038c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d8:	461a      	mov	r2, r3
 80038da:	2320      	movs	r3, #32
 80038dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d009      	beq.n	80038fc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f4:	461a      	mov	r2, r3
 80038f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038fa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	3301      	adds	r3, #1
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003904:	085b      	lsrs	r3, r3, #1
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390a:	2b00      	cmp	r3, #0
 800390c:	d199      	bne.n	8003842 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f003 fe6b 	bl	80075ee <USB_ReadInterrupts>
 8003918:	4603      	mov	r3, r0
 800391a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800391e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003922:	f040 80c0 	bne.w	8003aa6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f003 fe8c 	bl	8007648 <USB_ReadDevAllInEpInterrupt>
 8003930:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003936:	e0b2      	b.n	8003a9e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 80a7 	beq.w	8003a92 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	4611      	mov	r1, r2
 800394e:	4618      	mov	r0, r3
 8003950:	f003 feb2 	bl	80076b8 <USB_ReadDevInEPInterrupt>
 8003954:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d057      	beq.n	8003a10 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	2201      	movs	r2, #1
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	43db      	mvns	r3, r3
 800397a:	69f9      	ldr	r1, [r7, #28]
 800397c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003980:	4013      	ands	r3, r2
 8003982:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	4413      	add	r3, r2
 800398c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003990:	461a      	mov	r2, r3
 8003992:	2301      	movs	r3, #1
 8003994:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d132      	bne.n	8003a04 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a2:	4613      	mov	r3, r2
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	1a9b      	subs	r3, r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	3348      	adds	r3, #72	; 0x48
 80039ae:	6819      	ldr	r1, [r3, #0]
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b4:	4613      	mov	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4403      	add	r3, r0
 80039be:	3344      	adds	r3, #68	; 0x44
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4419      	add	r1, r3
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4403      	add	r3, r0
 80039d2:	3348      	adds	r3, #72	; 0x48
 80039d4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d113      	bne.n	8003a04 <HAL_PCD_IRQHandler+0x31c>
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e0:	4613      	mov	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	1a9b      	subs	r3, r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	440b      	add	r3, r1
 80039ea:	3350      	adds	r3, #80	; 0x50
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d108      	bne.n	8003a04 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039fc:	461a      	mov	r2, r3
 80039fe:	2101      	movs	r1, #1
 8003a00:	f003 feba 	bl	8007778 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	4619      	mov	r1, r3
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f005 fdeb 	bl	80095e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d008      	beq.n	8003a2c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	015a      	lsls	r2, r3, #5
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a26:	461a      	mov	r2, r3
 8003a28:	2308      	movs	r3, #8
 8003a2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f003 0310 	and.w	r3, r3, #16
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d008      	beq.n	8003a48 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a42:	461a      	mov	r2, r3
 8003a44:	2310      	movs	r3, #16
 8003a46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d008      	beq.n	8003a64 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5e:	461a      	mov	r2, r3
 8003a60:	2340      	movs	r3, #64	; 0x40
 8003a62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d008      	beq.n	8003a80 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 fc1b 	bl	80042c8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	3301      	adds	r3, #1
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9a:	085b      	lsrs	r3, r3, #1
 8003a9c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f47f af49 	bne.w	8003938 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f003 fd9f 	bl	80075ee <USB_ReadInterrupts>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aba:	d122      	bne.n	8003b02 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	69fa      	ldr	r2, [r7, #28]
 8003ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aca:	f023 0301 	bic.w	r3, r3, #1
 8003ace:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d108      	bne.n	8003aec <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 fe27 	bl	8004738 <HAL_PCDEx_LPM_Callback>
 8003aea:	e002      	b.n	8003af2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f005 fde7 	bl	80096c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695a      	ldr	r2, [r3, #20]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f003 fd71 	bl	80075ee <USB_ReadInterrupts>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b16:	d112      	bne.n	8003b3e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d102      	bne.n	8003b2e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f005 fda3 	bl	8009674 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695a      	ldr	r2, [r3, #20]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003b3c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f003 fd53 	bl	80075ee <USB_ReadInterrupts>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b52:	f040 80c7 	bne.w	8003ce4 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b64:	f023 0301 	bic.w	r3, r3, #1
 8003b68:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2110      	movs	r1, #16
 8003b70:	4618      	mov	r0, r3
 8003b72:	f002 fe21 	bl	80067b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b76:	2300      	movs	r3, #0
 8003b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b7a:	e056      	b.n	8003c2a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b88:	461a      	mov	r2, r3
 8003b8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b8e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ba0:	0151      	lsls	r1, r2, #5
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	440a      	add	r2, r1
 8003ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003baa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bae:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bc0:	0151      	lsls	r1, r2, #5
 8003bc2:	69fa      	ldr	r2, [r7, #28]
 8003bc4:	440a      	add	r2, r1
 8003bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003bce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003be2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bf4:	0151      	lsls	r1, r2, #5
 8003bf6:	69fa      	ldr	r2, [r7, #28]
 8003bf8:	440a      	add	r2, r1
 8003bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c02:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c14:	0151      	lsls	r1, r2, #5
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	440a      	add	r2, r1
 8003c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c22:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c26:	3301      	adds	r3, #1
 8003c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d3a3      	bcc.n	8003b7c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	69fa      	ldr	r2, [r7, #28]
 8003c3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c42:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003c46:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d016      	beq.n	8003c7e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c5a:	69fa      	ldr	r2, [r7, #28]
 8003c5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c60:	f043 030b 	orr.w	r3, r3, #11
 8003c64:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c76:	f043 030b 	orr.w	r3, r3, #11
 8003c7a:	6453      	str	r3, [r2, #68]	; 0x44
 8003c7c:	e015      	b.n	8003caa <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	69fa      	ldr	r2, [r7, #28]
 8003c88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c90:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003c94:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ca4:	f043 030b 	orr.w	r3, r3, #11
 8003ca8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cb8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003cbc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6818      	ldr	r0, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f003 fd52 	bl	8007778 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695a      	ldr	r2, [r3, #20]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003ce2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f003 fc80 	bl	80075ee <USB_ReadInterrupts>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cf8:	d124      	bne.n	8003d44 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f003 fd16 	bl	8007730 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f002 fdb6 	bl	800687a <USB_GetDevSpeed>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	461a      	mov	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681c      	ldr	r4, [r3, #0]
 8003d1a:	f001 f947 	bl	8004fac <HAL_RCC_GetHCLKFreq>
 8003d1e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	461a      	mov	r2, r3
 8003d28:	4620      	mov	r0, r4
 8003d2a:	f002 faf3 	bl	8006314 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f005 fc81 	bl	8009636 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695a      	ldr	r2, [r3, #20]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003d42:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f003 fc50 	bl	80075ee <USB_ReadInterrupts>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d10a      	bne.n	8003d6e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f005 fc5e 	bl	800961a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695a      	ldr	r2, [r3, #20]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f002 0208 	and.w	r2, r2, #8
 8003d6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f003 fc3b 	bl	80075ee <USB_ReadInterrupts>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d82:	d10f      	bne.n	8003da4 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f005 fcb6 	bl	8009700 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695a      	ldr	r2, [r3, #20]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003da2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f003 fc20 	bl	80075ee <USB_ReadInterrupts>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003db4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003db8:	d10f      	bne.n	8003dda <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f005 fc89 	bl	80096dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695a      	ldr	r2, [r3, #20]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f003 fc05 	bl	80075ee <USB_ReadInterrupts>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dee:	d10a      	bne.n	8003e06 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f005 fc97 	bl	8009724 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f003 fbef 	bl	80075ee <USB_ReadInterrupts>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d115      	bne.n	8003e46 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f005 fc87 	bl	8009740 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6859      	ldr	r1, [r3, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	605a      	str	r2, [r3, #4]
 8003e42:	e000      	b.n	8003e46 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003e44:	bf00      	nop
    }
  }
}
 8003e46:	3734      	adds	r7, #52	; 0x34
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd90      	pop	{r4, r7, pc}

08003e4c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <HAL_PCD_SetAddress+0x1a>
 8003e62:	2302      	movs	r3, #2
 8003e64:	e013      	b.n	8003e8e <HAL_PCD_SetAddress+0x42>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	78fa      	ldrb	r2, [r7, #3]
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f003 fb4d 	bl	800751e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	4608      	mov	r0, r1
 8003ea0:	4611      	mov	r1, r2
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	70fb      	strb	r3, [r7, #3]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	803b      	strh	r3, [r7, #0]
 8003eac:	4613      	mov	r3, r2
 8003eae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003eb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	da0f      	bge.n	8003edc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ebc:	78fb      	ldrb	r3, [r7, #3]
 8003ebe:	f003 020f 	and.w	r2, r3, #15
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	3338      	adds	r3, #56	; 0x38
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	4413      	add	r3, r2
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	705a      	strb	r2, [r3, #1]
 8003eda:	e00f      	b.n	8003efc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	f003 020f 	and.w	r2, r3, #15
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	1a9b      	subs	r3, r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f08:	883a      	ldrh	r2, [r7, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	78ba      	ldrb	r2, [r7, #2]
 8003f12:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	785b      	ldrb	r3, [r3, #1]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d004      	beq.n	8003f26 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f26:	78bb      	ldrb	r3, [r7, #2]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d102      	bne.n	8003f32 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <HAL_PCD_EP_Open+0xaa>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	e00e      	b.n	8003f5e <HAL_PCD_EP_Open+0xc8>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68f9      	ldr	r1, [r7, #12]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f002 fcb8 	bl	80068c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003f5c:	7afb      	ldrb	r3, [r7, #11]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b084      	sub	sp, #16
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	da0f      	bge.n	8003f9a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	f003 020f 	and.w	r2, r3, #15
 8003f80:	4613      	mov	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	1a9b      	subs	r3, r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	3338      	adds	r3, #56	; 0x38
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	3304      	adds	r3, #4
 8003f90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2201      	movs	r2, #1
 8003f96:	705a      	strb	r2, [r3, #1]
 8003f98:	e00f      	b.n	8003fba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f9a:	78fb      	ldrb	r3, [r7, #3]
 8003f9c:	f003 020f 	and.w	r2, r3, #15
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	4413      	add	r3, r2
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	f003 030f 	and.w	r3, r3, #15
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_PCD_EP_Close+0x6e>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e00e      	b.n	8003ff2 <HAL_PCD_EP_Close+0x8c>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68f9      	ldr	r1, [r7, #12]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f002 fcf6 	bl	80069d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b086      	sub	sp, #24
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
 8004006:	460b      	mov	r3, r1
 8004008:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800400a:	7afb      	ldrb	r3, [r7, #11]
 800400c:	f003 020f 	and.w	r2, r3, #15
 8004010:	4613      	mov	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	3304      	adds	r3, #4
 8004022:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2200      	movs	r2, #0
 8004034:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2200      	movs	r2, #0
 800403a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800403c:	7afb      	ldrb	r3, [r7, #11]
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	b2da      	uxtb	r2, r3
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d102      	bne.n	8004056 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004056:	7afb      	ldrb	r3, [r7, #11]
 8004058:	f003 030f 	and.w	r3, r3, #15
 800405c:	2b00      	cmp	r3, #0
 800405e:	d109      	bne.n	8004074 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	461a      	mov	r2, r3
 800406c:	6979      	ldr	r1, [r7, #20]
 800406e:	f002 ffd1 	bl	8007014 <USB_EP0StartXfer>
 8004072:	e008      	b.n	8004086 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	461a      	mov	r2, r3
 8004080:	6979      	ldr	r1, [r7, #20]
 8004082:	f002 fd83 	bl	8006b8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	460b      	mov	r3, r1
 800409a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	f003 020f 	and.w	r2, r3, #15
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80040b2:	681b      	ldr	r3, [r3, #0]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	607a      	str	r2, [r7, #4]
 80040ca:	603b      	str	r3, [r7, #0]
 80040cc:	460b      	mov	r3, r1
 80040ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040d0:	7afb      	ldrb	r3, [r7, #11]
 80040d2:	f003 020f 	and.w	r2, r3, #15
 80040d6:	4613      	mov	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	1a9b      	subs	r3, r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	3338      	adds	r3, #56	; 0x38
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4413      	add	r3, r2
 80040e4:	3304      	adds	r3, #4
 80040e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2200      	movs	r2, #0
 80040f8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2201      	movs	r2, #1
 80040fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004100:	7afb      	ldrb	r3, [r7, #11]
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	b2da      	uxtb	r2, r3
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d102      	bne.n	800411a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800411a:	7afb      	ldrb	r3, [r7, #11]
 800411c:	f003 030f 	and.w	r3, r3, #15
 8004120:	2b00      	cmp	r3, #0
 8004122:	d109      	bne.n	8004138 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6818      	ldr	r0, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	b2db      	uxtb	r3, r3
 800412e:	461a      	mov	r2, r3
 8004130:	6979      	ldr	r1, [r7, #20]
 8004132:	f002 ff6f 	bl	8007014 <USB_EP0StartXfer>
 8004136:	e008      	b.n	800414a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6818      	ldr	r0, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	461a      	mov	r2, r3
 8004144:	6979      	ldr	r1, [r7, #20]
 8004146:	f002 fd21 	bl	8006b8c <USB_EPStartXfer>
  }

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	f003 020f 	and.w	r2, r3, #15
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	429a      	cmp	r2, r3
 800416c:	d901      	bls.n	8004172 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e050      	b.n	8004214 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004172:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004176:	2b00      	cmp	r3, #0
 8004178:	da0f      	bge.n	800419a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800417a:	78fb      	ldrb	r3, [r7, #3]
 800417c:	f003 020f 	and.w	r2, r3, #15
 8004180:	4613      	mov	r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	1a9b      	subs	r3, r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	3338      	adds	r3, #56	; 0x38
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	4413      	add	r3, r2
 800418e:	3304      	adds	r3, #4
 8004190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2201      	movs	r2, #1
 8004196:	705a      	strb	r2, [r3, #1]
 8004198:	e00d      	b.n	80041b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800419a:	78fa      	ldrb	r2, [r7, #3]
 800419c:	4613      	mov	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	1a9b      	subs	r3, r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	4413      	add	r3, r2
 80041ac:	3304      	adds	r3, #4
 80041ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_PCD_EP_SetStall+0x82>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e01e      	b.n	8004214 <HAL_PCD_EP_SetStall+0xc0>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68f9      	ldr	r1, [r7, #12]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f003 f8c6 	bl	8007376 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041ea:	78fb      	ldrb	r3, [r7, #3]
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10a      	bne.n	800420a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6818      	ldr	r0, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	b2d9      	uxtb	r1, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004204:	461a      	mov	r2, r3
 8004206:	f003 fab7 	bl	8007778 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004228:	78fb      	ldrb	r3, [r7, #3]
 800422a:	f003 020f 	and.w	r2, r3, #15
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	429a      	cmp	r2, r3
 8004234:	d901      	bls.n	800423a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e042      	b.n	80042c0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800423a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800423e:	2b00      	cmp	r3, #0
 8004240:	da0f      	bge.n	8004262 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004242:	78fb      	ldrb	r3, [r7, #3]
 8004244:	f003 020f 	and.w	r2, r3, #15
 8004248:	4613      	mov	r3, r2
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	1a9b      	subs	r3, r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	3338      	adds	r3, #56	; 0x38
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	4413      	add	r3, r2
 8004256:	3304      	adds	r3, #4
 8004258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2201      	movs	r2, #1
 800425e:	705a      	strb	r2, [r3, #1]
 8004260:	e00f      	b.n	8004282 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	f003 020f 	and.w	r2, r3, #15
 8004268:	4613      	mov	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	1a9b      	subs	r3, r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	4413      	add	r3, r2
 8004278:	3304      	adds	r3, #4
 800427a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	b2da      	uxtb	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_PCD_EP_ClrStall+0x86>
 800429e:	2302      	movs	r3, #2
 80042a0:	e00e      	b.n	80042c0 <HAL_PCD_EP_ClrStall+0xa4>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68f9      	ldr	r1, [r7, #12]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f003 f8ce 	bl	8007452 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08a      	sub	sp, #40	; 0x28
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	4613      	mov	r3, r2
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	1a9b      	subs	r3, r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	3338      	adds	r3, #56	; 0x38
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	4413      	add	r3, r2
 80042ec:	3304      	adds	r3, #4
 80042ee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	699a      	ldr	r2, [r3, #24]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d901      	bls.n	8004300 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e06c      	b.n	80043da <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	695a      	ldr	r2, [r3, #20]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	69fa      	ldr	r2, [r7, #28]
 8004312:	429a      	cmp	r2, r3
 8004314:	d902      	bls.n	800431c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	3303      	adds	r3, #3
 8004320:	089b      	lsrs	r3, r3, #2
 8004322:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004324:	e02b      	b.n	800437e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	695a      	ldr	r2, [r3, #20]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	429a      	cmp	r2, r3
 800433a:	d902      	bls.n	8004342 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	3303      	adds	r3, #3
 8004346:	089b      	lsrs	r3, r3, #2
 8004348:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	68d9      	ldr	r1, [r3, #12]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	b2da      	uxtb	r2, r3
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800435a:	b2db      	uxtb	r3, r3
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	4603      	mov	r3, r0
 8004360:	6978      	ldr	r0, [r7, #20]
 8004362:	f002 ffaa 	bl	80072ba <USB_WritePacket>

    ep->xfer_buff  += len;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	441a      	add	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	699a      	ldr	r2, [r3, #24]
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	441a      	add	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	b29b      	uxth	r3, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	429a      	cmp	r2, r3
 8004392:	d809      	bhi.n	80043a8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	699a      	ldr	r2, [r3, #24]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800439c:	429a      	cmp	r2, r3
 800439e:	d203      	bcs.n	80043a8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1be      	bne.n	8004326 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	695a      	ldr	r2, [r3, #20]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d811      	bhi.n	80043d8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	2201      	movs	r2, #1
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	43db      	mvns	r3, r3
 80043ce:	6939      	ldr	r1, [r7, #16]
 80043d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043d4:	4013      	ands	r3, r2
 80043d6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3720      	adds	r7, #32
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	333c      	adds	r3, #60	; 0x3c
 80043fc:	3304      	adds	r3, #4
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4413      	add	r3, r2
 800440a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	2b01      	cmp	r3, #1
 8004418:	f040 80a0 	bne.w	800455c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b00      	cmp	r3, #0
 8004424:	d015      	beq.n	8004452 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4a72      	ldr	r2, [pc, #456]	; (80045f4 <PCD_EP_OutXfrComplete_int+0x210>)
 800442a:	4293      	cmp	r3, r2
 800442c:	f240 80dd 	bls.w	80045ea <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 80d7 	beq.w	80045ea <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004448:	461a      	mov	r2, r3
 800444a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800444e:	6093      	str	r3, [r2, #8]
 8004450:	e0cb      	b.n	80045ea <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f003 0320 	and.w	r3, r3, #32
 8004458:	2b00      	cmp	r3, #0
 800445a:	d009      	beq.n	8004470 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004468:	461a      	mov	r2, r3
 800446a:	2320      	movs	r3, #32
 800446c:	6093      	str	r3, [r2, #8]
 800446e:	e0bc      	b.n	80045ea <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004476:	2b00      	cmp	r3, #0
 8004478:	f040 80b7 	bne.w	80045ea <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4a5d      	ldr	r2, [pc, #372]	; (80045f4 <PCD_EP_OutXfrComplete_int+0x210>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d90f      	bls.n	80044a4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	4413      	add	r3, r2
 8004496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449a:	461a      	mov	r2, r3
 800449c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044a0:	6093      	str	r3, [r2, #8]
 80044a2:	e0a2      	b.n	80045ea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	4613      	mov	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	1a9b      	subs	r3, r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80044b6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	0159      	lsls	r1, r3, #5
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	440b      	add	r3, r1
 80044c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80044ca:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	4613      	mov	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	1a9b      	subs	r3, r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4403      	add	r3, r0
 80044da:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80044de:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	4613      	mov	r3, r2
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80044f2:	6819      	ldr	r1, [r3, #0]
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	4613      	mov	r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	1a9b      	subs	r3, r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4403      	add	r3, r0
 8004502:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4419      	add	r1, r3
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	4613      	mov	r3, r2
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	1a9b      	subs	r3, r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4403      	add	r3, r0
 8004518:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800451c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d114      	bne.n	800454e <PCD_EP_OutXfrComplete_int+0x16a>
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	4613      	mov	r3, r2
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	1a9b      	subs	r3, r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d108      	bne.n	800454e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6818      	ldr	r0, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004546:	461a      	mov	r2, r3
 8004548:	2101      	movs	r1, #1
 800454a:	f003 f915 	bl	8007778 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	4619      	mov	r1, r3
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f005 f82b 	bl	80095b0 <HAL_PCD_DataOutStageCallback>
 800455a:	e046      	b.n	80045ea <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4a26      	ldr	r2, [pc, #152]	; (80045f8 <PCD_EP_OutXfrComplete_int+0x214>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d124      	bne.n	80045ae <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	015a      	lsls	r2, r3, #5
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	4413      	add	r3, r2
 8004576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457a:	461a      	mov	r2, r3
 800457c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004580:	6093      	str	r3, [r2, #8]
 8004582:	e032      	b.n	80045ea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b00      	cmp	r3, #0
 800458c:	d008      	beq.n	80045a0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459a:	461a      	mov	r2, r3
 800459c:	2320      	movs	r3, #32
 800459e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	4619      	mov	r1, r3
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f005 f802 	bl	80095b0 <HAL_PCD_DataOutStageCallback>
 80045ac:	e01d      	b.n	80045ea <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d114      	bne.n	80045de <PCD_EP_OutXfrComplete_int+0x1fa>
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	4613      	mov	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d108      	bne.n	80045de <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80045d6:	461a      	mov	r2, r3
 80045d8:	2100      	movs	r1, #0
 80045da:	f003 f8cd 	bl	8007778 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	4619      	mov	r1, r3
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f004 ffe3 	bl	80095b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	4f54300a 	.word	0x4f54300a
 80045f8:	4f54310a 	.word	0x4f54310a

080045fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	333c      	adds	r3, #60	; 0x3c
 8004614:	3304      	adds	r3, #4
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4a15      	ldr	r2, [pc, #84]	; (8004684 <PCD_EP_OutSetupPacket_int+0x88>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d90e      	bls.n	8004650 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004638:	2b00      	cmp	r3, #0
 800463a:	d009      	beq.n	8004650 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	4413      	add	r3, r2
 8004644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004648:	461a      	mov	r2, r3
 800464a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800464e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f004 ff9b 	bl	800958c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4a0a      	ldr	r2, [pc, #40]	; (8004684 <PCD_EP_OutSetupPacket_int+0x88>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d90c      	bls.n	8004678 <PCD_EP_OutSetupPacket_int+0x7c>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d108      	bne.n	8004678 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004670:	461a      	mov	r2, r3
 8004672:	2101      	movs	r1, #1
 8004674:	f003 f880 	bl	8007778 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	4f54300a 	.word	0x4f54300a

08004688 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	70fb      	strb	r3, [r7, #3]
 8004694:	4613      	mov	r3, r2
 8004696:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d107      	bne.n	80046b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80046a6:	883b      	ldrh	r3, [r7, #0]
 80046a8:	0419      	lsls	r1, r3, #16
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	629a      	str	r2, [r3, #40]	; 0x28
 80046b4:	e028      	b.n	8004708 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046bc:	0c1b      	lsrs	r3, r3, #16
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	4413      	add	r3, r2
 80046c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80046c4:	2300      	movs	r3, #0
 80046c6:	73fb      	strb	r3, [r7, #15]
 80046c8:	e00d      	b.n	80046e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
 80046d0:	3340      	adds	r3, #64	; 0x40
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	0c1b      	lsrs	r3, r3, #16
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	4413      	add	r3, r2
 80046de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
 80046e2:	3301      	adds	r3, #1
 80046e4:	73fb      	strb	r3, [r7, #15]
 80046e6:	7bfa      	ldrb	r2, [r7, #15]
 80046e8:	78fb      	ldrb	r3, [r7, #3]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d3ec      	bcc.n	80046ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80046f0:	883b      	ldrh	r3, [r7, #0]
 80046f2:	0418      	lsls	r0, r3, #16
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6819      	ldr	r1, [r3, #0]
 80046f8:	78fb      	ldrb	r3, [r7, #3]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	4302      	orrs	r2, r0
 8004700:	3340      	adds	r3, #64	; 0x40
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	460b      	mov	r3, r1
 8004720:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	887a      	ldrh	r2, [r7, #2]
 8004728:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	460b      	mov	r3, r1
 8004742:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e25b      	b.n	8004c1a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d075      	beq.n	800485a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800476e:	4ba3      	ldr	r3, [pc, #652]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 030c 	and.w	r3, r3, #12
 8004776:	2b04      	cmp	r3, #4
 8004778:	d00c      	beq.n	8004794 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800477a:	4ba0      	ldr	r3, [pc, #640]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004782:	2b08      	cmp	r3, #8
 8004784:	d112      	bne.n	80047ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004786:	4b9d      	ldr	r3, [pc, #628]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800478e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004792:	d10b      	bne.n	80047ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004794:	4b99      	ldr	r3, [pc, #612]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d05b      	beq.n	8004858 <HAL_RCC_OscConfig+0x108>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d157      	bne.n	8004858 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e236      	b.n	8004c1a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b4:	d106      	bne.n	80047c4 <HAL_RCC_OscConfig+0x74>
 80047b6:	4b91      	ldr	r3, [pc, #580]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a90      	ldr	r2, [pc, #576]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 80047bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	e01d      	b.n	8004800 <HAL_RCC_OscConfig+0xb0>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047cc:	d10c      	bne.n	80047e8 <HAL_RCC_OscConfig+0x98>
 80047ce:	4b8b      	ldr	r3, [pc, #556]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a8a      	ldr	r2, [pc, #552]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 80047d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	4b88      	ldr	r3, [pc, #544]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a87      	ldr	r2, [pc, #540]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 80047e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	e00b      	b.n	8004800 <HAL_RCC_OscConfig+0xb0>
 80047e8:	4b84      	ldr	r3, [pc, #528]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a83      	ldr	r2, [pc, #524]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 80047ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f2:	6013      	str	r3, [r2, #0]
 80047f4:	4b81      	ldr	r3, [pc, #516]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a80      	ldr	r2, [pc, #512]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 80047fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d013      	beq.n	8004830 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004808:	f7fd ff80 	bl	800270c <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004810:	f7fd ff7c 	bl	800270c <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b64      	cmp	r3, #100	; 0x64
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e1fb      	b.n	8004c1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004822:	4b76      	ldr	r3, [pc, #472]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f0      	beq.n	8004810 <HAL_RCC_OscConfig+0xc0>
 800482e:	e014      	b.n	800485a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004830:	f7fd ff6c 	bl	800270c <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004838:	f7fd ff68 	bl	800270c <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b64      	cmp	r3, #100	; 0x64
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e1e7      	b.n	8004c1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800484a:	4b6c      	ldr	r3, [pc, #432]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f0      	bne.n	8004838 <HAL_RCC_OscConfig+0xe8>
 8004856:	e000      	b.n	800485a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d063      	beq.n	800492e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004866:	4b65      	ldr	r3, [pc, #404]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 030c 	and.w	r3, r3, #12
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00b      	beq.n	800488a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004872:	4b62      	ldr	r3, [pc, #392]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800487a:	2b08      	cmp	r3, #8
 800487c:	d11c      	bne.n	80048b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800487e:	4b5f      	ldr	r3, [pc, #380]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d116      	bne.n	80048b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800488a:	4b5c      	ldr	r3, [pc, #368]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d005      	beq.n	80048a2 <HAL_RCC_OscConfig+0x152>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d001      	beq.n	80048a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e1bb      	b.n	8004c1a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a2:	4b56      	ldr	r3, [pc, #344]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	4952      	ldr	r1, [pc, #328]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b6:	e03a      	b.n	800492e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d020      	beq.n	8004902 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048c0:	4b4f      	ldr	r3, [pc, #316]	; (8004a00 <HAL_RCC_OscConfig+0x2b0>)
 80048c2:	2201      	movs	r2, #1
 80048c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c6:	f7fd ff21 	bl	800270c <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048ce:	f7fd ff1d 	bl	800270c <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e19c      	b.n	8004c1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e0:	4b46      	ldr	r3, [pc, #280]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0f0      	beq.n	80048ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ec:	4b43      	ldr	r3, [pc, #268]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	4940      	ldr	r1, [pc, #256]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	600b      	str	r3, [r1, #0]
 8004900:	e015      	b.n	800492e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004902:	4b3f      	ldr	r3, [pc, #252]	; (8004a00 <HAL_RCC_OscConfig+0x2b0>)
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004908:	f7fd ff00 	bl	800270c <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004910:	f7fd fefc 	bl	800270c <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e17b      	b.n	8004c1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004922:	4b36      	ldr	r3, [pc, #216]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1f0      	bne.n	8004910 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b00      	cmp	r3, #0
 8004938:	d030      	beq.n	800499c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d016      	beq.n	8004970 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004942:	4b30      	ldr	r3, [pc, #192]	; (8004a04 <HAL_RCC_OscConfig+0x2b4>)
 8004944:	2201      	movs	r2, #1
 8004946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004948:	f7fd fee0 	bl	800270c <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004950:	f7fd fedc 	bl	800270c <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e15b      	b.n	8004c1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004962:	4b26      	ldr	r3, [pc, #152]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 8004964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0f0      	beq.n	8004950 <HAL_RCC_OscConfig+0x200>
 800496e:	e015      	b.n	800499c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004970:	4b24      	ldr	r3, [pc, #144]	; (8004a04 <HAL_RCC_OscConfig+0x2b4>)
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004976:	f7fd fec9 	bl	800270c <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800497e:	f7fd fec5 	bl	800270c <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e144      	b.n	8004c1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004990:	4b1a      	ldr	r3, [pc, #104]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 8004992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1f0      	bne.n	800497e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 80a0 	beq.w	8004aea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049aa:	2300      	movs	r3, #0
 80049ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ae:	4b13      	ldr	r3, [pc, #76]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10f      	bne.n	80049da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ba:	2300      	movs	r3, #0
 80049bc:	60bb      	str	r3, [r7, #8]
 80049be:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	4a0e      	ldr	r2, [pc, #56]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 80049c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c8:	6413      	str	r3, [r2, #64]	; 0x40
 80049ca:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <HAL_RCC_OscConfig+0x2ac>)
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d2:	60bb      	str	r3, [r7, #8]
 80049d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049d6:	2301      	movs	r3, #1
 80049d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049da:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <HAL_RCC_OscConfig+0x2b8>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d121      	bne.n	8004a2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049e6:	4b08      	ldr	r3, [pc, #32]	; (8004a08 <HAL_RCC_OscConfig+0x2b8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a07      	ldr	r2, [pc, #28]	; (8004a08 <HAL_RCC_OscConfig+0x2b8>)
 80049ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049f2:	f7fd fe8b 	bl	800270c <HAL_GetTick>
 80049f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f8:	e011      	b.n	8004a1e <HAL_RCC_OscConfig+0x2ce>
 80049fa:	bf00      	nop
 80049fc:	40023800 	.word	0x40023800
 8004a00:	42470000 	.word	0x42470000
 8004a04:	42470e80 	.word	0x42470e80
 8004a08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a0c:	f7fd fe7e 	bl	800270c <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e0fd      	b.n	8004c1a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a1e:	4b81      	ldr	r3, [pc, #516]	; (8004c24 <HAL_RCC_OscConfig+0x4d4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d106      	bne.n	8004a40 <HAL_RCC_OscConfig+0x2f0>
 8004a32:	4b7d      	ldr	r3, [pc, #500]	; (8004c28 <HAL_RCC_OscConfig+0x4d8>)
 8004a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a36:	4a7c      	ldr	r2, [pc, #496]	; (8004c28 <HAL_RCC_OscConfig+0x4d8>)
 8004a38:	f043 0301 	orr.w	r3, r3, #1
 8004a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a3e:	e01c      	b.n	8004a7a <HAL_RCC_OscConfig+0x32a>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	2b05      	cmp	r3, #5
 8004a46:	d10c      	bne.n	8004a62 <HAL_RCC_OscConfig+0x312>
 8004a48:	4b77      	ldr	r3, [pc, #476]	; (8004c28 <HAL_RCC_OscConfig+0x4d8>)
 8004a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4c:	4a76      	ldr	r2, [pc, #472]	; (8004c28 <HAL_RCC_OscConfig+0x4d8>)
 8004a4e:	f043 0304 	orr.w	r3, r3, #4
 8004a52:	6713      	str	r3, [r2, #112]	; 0x70
 8004a54:	4b74      	ldr	r3, [pc, #464]	; (8004c28 <HAL_RCC_OscConfig+0x4d8>)
 8004a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a58:	4a73      	ldr	r2, [pc, #460]	; (8004c28 <HAL_RCC_OscConfig+0x4d8>)
 8004a5a:	f043 0301 	orr.w	r3, r3, #1
 8004a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a60:	e00b      	b.n	8004a7a <HAL_RCC_OscConfig+0x32a>
 8004a62:	4b71      	ldr	r3, [pc, #452]	; (8004c28 <HAL_RCC_OscConfig+0x4d8>)
 8004a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a66:	4a70      	ldr	r2, [pc, #448]	; (8004c28 <HAL_RCC_OscConfig+0x4d8>)
 8004a68:	f023 0301 	bic.w	r3, r3, #1
 8004a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a6e:	4b6e      	ldr	r3, [pc, #440]	; (8004c28 <HAL_RCC_OscConfig+0x4d8>)
 8004a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a72:	4a6d      	ldr	r2, [pc, #436]	; (8004c28 <HAL_RCC_OscConfig+0x4d8>)
 8004a74:	f023 0304 	bic.w	r3, r3, #4
 8004a78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d015      	beq.n	8004aae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a82:	f7fd fe43 	bl	800270c <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a88:	e00a      	b.n	8004aa0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a8a:	f7fd fe3f 	bl	800270c <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e0bc      	b.n	8004c1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa0:	4b61      	ldr	r3, [pc, #388]	; (8004c28 <HAL_RCC_OscConfig+0x4d8>)
 8004aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0ee      	beq.n	8004a8a <HAL_RCC_OscConfig+0x33a>
 8004aac:	e014      	b.n	8004ad8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aae:	f7fd fe2d 	bl	800270c <HAL_GetTick>
 8004ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ab4:	e00a      	b.n	8004acc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab6:	f7fd fe29 	bl	800270c <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e0a6      	b.n	8004c1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004acc:	4b56      	ldr	r3, [pc, #344]	; (8004c28 <HAL_RCC_OscConfig+0x4d8>)
 8004ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1ee      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ad8:	7dfb      	ldrb	r3, [r7, #23]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d105      	bne.n	8004aea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ade:	4b52      	ldr	r3, [pc, #328]	; (8004c28 <HAL_RCC_OscConfig+0x4d8>)
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	4a51      	ldr	r2, [pc, #324]	; (8004c28 <HAL_RCC_OscConfig+0x4d8>)
 8004ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ae8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 8092 	beq.w	8004c18 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004af4:	4b4c      	ldr	r3, [pc, #304]	; (8004c28 <HAL_RCC_OscConfig+0x4d8>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 030c 	and.w	r3, r3, #12
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d05c      	beq.n	8004bba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d141      	bne.n	8004b8c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b08:	4b48      	ldr	r3, [pc, #288]	; (8004c2c <HAL_RCC_OscConfig+0x4dc>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b0e:	f7fd fdfd 	bl	800270c <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b14:	e008      	b.n	8004b28 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b16:	f7fd fdf9 	bl	800270c <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e078      	b.n	8004c1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b28:	4b3f      	ldr	r3, [pc, #252]	; (8004c28 <HAL_RCC_OscConfig+0x4d8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f0      	bne.n	8004b16 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	019b      	lsls	r3, r3, #6
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4a:	085b      	lsrs	r3, r3, #1
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	041b      	lsls	r3, r3, #16
 8004b50:	431a      	orrs	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	061b      	lsls	r3, r3, #24
 8004b58:	4933      	ldr	r1, [pc, #204]	; (8004c28 <HAL_RCC_OscConfig+0x4d8>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b5e:	4b33      	ldr	r3, [pc, #204]	; (8004c2c <HAL_RCC_OscConfig+0x4dc>)
 8004b60:	2201      	movs	r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b64:	f7fd fdd2 	bl	800270c <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b6c:	f7fd fdce 	bl	800270c <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e04d      	b.n	8004c1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b7e:	4b2a      	ldr	r3, [pc, #168]	; (8004c28 <HAL_RCC_OscConfig+0x4d8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0f0      	beq.n	8004b6c <HAL_RCC_OscConfig+0x41c>
 8004b8a:	e045      	b.n	8004c18 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b8c:	4b27      	ldr	r3, [pc, #156]	; (8004c2c <HAL_RCC_OscConfig+0x4dc>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b92:	f7fd fdbb 	bl	800270c <HAL_GetTick>
 8004b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b9a:	f7fd fdb7 	bl	800270c <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e036      	b.n	8004c1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bac:	4b1e      	ldr	r3, [pc, #120]	; (8004c28 <HAL_RCC_OscConfig+0x4d8>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1f0      	bne.n	8004b9a <HAL_RCC_OscConfig+0x44a>
 8004bb8:	e02e      	b.n	8004c18 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d101      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e029      	b.n	8004c1a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bc6:	4b18      	ldr	r3, [pc, #96]	; (8004c28 <HAL_RCC_OscConfig+0x4d8>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d11c      	bne.n	8004c14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d115      	bne.n	8004c14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bee:	4013      	ands	r3, r2
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d10d      	bne.n	8004c14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d106      	bne.n	8004c14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d001      	beq.n	8004c18 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e000      	b.n	8004c1a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	40007000 	.word	0x40007000
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	42470060 	.word	0x42470060

08004c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0cc      	b.n	8004dde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c44:	4b68      	ldr	r3, [pc, #416]	; (8004de8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 030f 	and.w	r3, r3, #15
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d90c      	bls.n	8004c6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c52:	4b65      	ldr	r3, [pc, #404]	; (8004de8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5a:	4b63      	ldr	r3, [pc, #396]	; (8004de8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d001      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e0b8      	b.n	8004dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d020      	beq.n	8004cba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c84:	4b59      	ldr	r3, [pc, #356]	; (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	4a58      	ldr	r2, [pc, #352]	; (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0308 	and.w	r3, r3, #8
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c9c:	4b53      	ldr	r3, [pc, #332]	; (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	4a52      	ldr	r2, [pc, #328]	; (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004ca2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ca6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca8:	4b50      	ldr	r3, [pc, #320]	; (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	494d      	ldr	r1, [pc, #308]	; (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d044      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d107      	bne.n	8004cde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cce:	4b47      	ldr	r3, [pc, #284]	; (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d119      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e07f      	b.n	8004dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d003      	beq.n	8004cee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	d107      	bne.n	8004cfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cee:	4b3f      	ldr	r3, [pc, #252]	; (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d109      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e06f      	b.n	8004dde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfe:	4b3b      	ldr	r3, [pc, #236]	; (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e067      	b.n	8004dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d0e:	4b37      	ldr	r3, [pc, #220]	; (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f023 0203 	bic.w	r2, r3, #3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	4934      	ldr	r1, [pc, #208]	; (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d20:	f7fd fcf4 	bl	800270c <HAL_GetTick>
 8004d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d26:	e00a      	b.n	8004d3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d28:	f7fd fcf0 	bl	800270c <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e04f      	b.n	8004dde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3e:	4b2b      	ldr	r3, [pc, #172]	; (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 020c 	and.w	r2, r3, #12
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d1eb      	bne.n	8004d28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d50:	4b25      	ldr	r3, [pc, #148]	; (8004de8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 030f 	and.w	r3, r3, #15
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d20c      	bcs.n	8004d78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5e:	4b22      	ldr	r3, [pc, #136]	; (8004de8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d66:	4b20      	ldr	r3, [pc, #128]	; (8004de8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d001      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e032      	b.n	8004dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d008      	beq.n	8004d96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d84:	4b19      	ldr	r3, [pc, #100]	; (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	4916      	ldr	r1, [pc, #88]	; (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d009      	beq.n	8004db6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004da2:	4b12      	ldr	r3, [pc, #72]	; (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	490e      	ldr	r1, [pc, #56]	; (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004db6:	f000 f821 	bl	8004dfc <HAL_RCC_GetSysClockFreq>
 8004dba:	4601      	mov	r1, r0
 8004dbc:	4b0b      	ldr	r3, [pc, #44]	; (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	091b      	lsrs	r3, r3, #4
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	4a0a      	ldr	r2, [pc, #40]	; (8004df0 <HAL_RCC_ClockConfig+0x1c0>)
 8004dc8:	5cd3      	ldrb	r3, [r2, r3]
 8004dca:	fa21 f303 	lsr.w	r3, r1, r3
 8004dce:	4a09      	ldr	r2, [pc, #36]	; (8004df4 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004dd2:	4b09      	ldr	r3, [pc, #36]	; (8004df8 <HAL_RCC_ClockConfig+0x1c8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fd fc54 	bl	8002684 <HAL_InitTick>

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40023c00 	.word	0x40023c00
 8004dec:	40023800 	.word	0x40023800
 8004df0:	0800bcfc 	.word	0x0800bcfc
 8004df4:	20000004 	.word	0x20000004
 8004df8:	20000008 	.word	0x20000008

08004dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	607b      	str	r3, [r7, #4]
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e12:	4b63      	ldr	r3, [pc, #396]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 030c 	and.w	r3, r3, #12
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d007      	beq.n	8004e2e <HAL_RCC_GetSysClockFreq+0x32>
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d008      	beq.n	8004e34 <HAL_RCC_GetSysClockFreq+0x38>
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f040 80b4 	bne.w	8004f90 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e28:	4b5e      	ldr	r3, [pc, #376]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004e2a:	60bb      	str	r3, [r7, #8]
       break;
 8004e2c:	e0b3      	b.n	8004f96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e2e:	4b5e      	ldr	r3, [pc, #376]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004e30:	60bb      	str	r3, [r7, #8]
      break;
 8004e32:	e0b0      	b.n	8004f96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e34:	4b5a      	ldr	r3, [pc, #360]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e3e:	4b58      	ldr	r3, [pc, #352]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d04a      	beq.n	8004ee0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e4a:	4b55      	ldr	r3, [pc, #340]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	099b      	lsrs	r3, r3, #6
 8004e50:	f04f 0400 	mov.w	r4, #0
 8004e54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	ea03 0501 	and.w	r5, r3, r1
 8004e60:	ea04 0602 	and.w	r6, r4, r2
 8004e64:	4629      	mov	r1, r5
 8004e66:	4632      	mov	r2, r6
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	f04f 0400 	mov.w	r4, #0
 8004e70:	0154      	lsls	r4, r2, #5
 8004e72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e76:	014b      	lsls	r3, r1, #5
 8004e78:	4619      	mov	r1, r3
 8004e7a:	4622      	mov	r2, r4
 8004e7c:	1b49      	subs	r1, r1, r5
 8004e7e:	eb62 0206 	sbc.w	r2, r2, r6
 8004e82:	f04f 0300 	mov.w	r3, #0
 8004e86:	f04f 0400 	mov.w	r4, #0
 8004e8a:	0194      	lsls	r4, r2, #6
 8004e8c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e90:	018b      	lsls	r3, r1, #6
 8004e92:	1a5b      	subs	r3, r3, r1
 8004e94:	eb64 0402 	sbc.w	r4, r4, r2
 8004e98:	f04f 0100 	mov.w	r1, #0
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	00e2      	lsls	r2, r4, #3
 8004ea2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ea6:	00d9      	lsls	r1, r3, #3
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	4614      	mov	r4, r2
 8004eac:	195b      	adds	r3, r3, r5
 8004eae:	eb44 0406 	adc.w	r4, r4, r6
 8004eb2:	f04f 0100 	mov.w	r1, #0
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	0262      	lsls	r2, r4, #9
 8004ebc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004ec0:	0259      	lsls	r1, r3, #9
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4614      	mov	r4, r2
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	4621      	mov	r1, r4
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f04f 0400 	mov.w	r4, #0
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4623      	mov	r3, r4
 8004ed4:	f7fb fec0 	bl	8000c58 <__aeabi_uldivmod>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	460c      	mov	r4, r1
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	e049      	b.n	8004f74 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ee0:	4b2f      	ldr	r3, [pc, #188]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	099b      	lsrs	r3, r3, #6
 8004ee6:	f04f 0400 	mov.w	r4, #0
 8004eea:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004eee:	f04f 0200 	mov.w	r2, #0
 8004ef2:	ea03 0501 	and.w	r5, r3, r1
 8004ef6:	ea04 0602 	and.w	r6, r4, r2
 8004efa:	4629      	mov	r1, r5
 8004efc:	4632      	mov	r2, r6
 8004efe:	f04f 0300 	mov.w	r3, #0
 8004f02:	f04f 0400 	mov.w	r4, #0
 8004f06:	0154      	lsls	r4, r2, #5
 8004f08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f0c:	014b      	lsls	r3, r1, #5
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4622      	mov	r2, r4
 8004f12:	1b49      	subs	r1, r1, r5
 8004f14:	eb62 0206 	sbc.w	r2, r2, r6
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	f04f 0400 	mov.w	r4, #0
 8004f20:	0194      	lsls	r4, r2, #6
 8004f22:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f26:	018b      	lsls	r3, r1, #6
 8004f28:	1a5b      	subs	r3, r3, r1
 8004f2a:	eb64 0402 	sbc.w	r4, r4, r2
 8004f2e:	f04f 0100 	mov.w	r1, #0
 8004f32:	f04f 0200 	mov.w	r2, #0
 8004f36:	00e2      	lsls	r2, r4, #3
 8004f38:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f3c:	00d9      	lsls	r1, r3, #3
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4614      	mov	r4, r2
 8004f42:	195b      	adds	r3, r3, r5
 8004f44:	eb44 0406 	adc.w	r4, r4, r6
 8004f48:	f04f 0100 	mov.w	r1, #0
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	02a2      	lsls	r2, r4, #10
 8004f52:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004f56:	0299      	lsls	r1, r3, #10
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4614      	mov	r4, r2
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	4621      	mov	r1, r4
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f04f 0400 	mov.w	r4, #0
 8004f66:	461a      	mov	r2, r3
 8004f68:	4623      	mov	r3, r4
 8004f6a:	f7fb fe75 	bl	8000c58 <__aeabi_uldivmod>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	460c      	mov	r4, r1
 8004f72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f74:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	0c1b      	lsrs	r3, r3, #16
 8004f7a:	f003 0303 	and.w	r3, r3, #3
 8004f7e:	3301      	adds	r3, #1
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8c:	60bb      	str	r3, [r7, #8]
      break;
 8004f8e:	e002      	b.n	8004f96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f90:	4b04      	ldr	r3, [pc, #16]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f92:	60bb      	str	r3, [r7, #8]
      break;
 8004f94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f96:	68bb      	ldr	r3, [r7, #8]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	00f42400 	.word	0x00f42400
 8004fa8:	007a1200 	.word	0x007a1200

08004fac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fb0:	4b03      	ldr	r3, [pc, #12]	; (8004fc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	20000004 	.word	0x20000004

08004fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fc8:	f7ff fff0 	bl	8004fac <HAL_RCC_GetHCLKFreq>
 8004fcc:	4601      	mov	r1, r0
 8004fce:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	0a9b      	lsrs	r3, r3, #10
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	4a03      	ldr	r2, [pc, #12]	; (8004fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fda:	5cd3      	ldrb	r3, [r2, r3]
 8004fdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	0800bd0c 	.word	0x0800bd0c

08004fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ff0:	f7ff ffdc 	bl	8004fac <HAL_RCC_GetHCLKFreq>
 8004ff4:	4601      	mov	r1, r0
 8004ff6:	4b05      	ldr	r3, [pc, #20]	; (800500c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	0b5b      	lsrs	r3, r3, #13
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	4a03      	ldr	r2, [pc, #12]	; (8005010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005002:	5cd3      	ldrb	r3, [r2, r3]
 8005004:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005008:	4618      	mov	r0, r3
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40023800 	.word	0x40023800
 8005010:	0800bd0c 	.word	0x0800bd0c

08005014 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e056      	b.n	80050d4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d106      	bne.n	8005046 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7fc fd8f 	bl	8001b64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2202      	movs	r2, #2
 800504a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800505c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	431a      	orrs	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	431a      	orrs	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	431a      	orrs	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	ea42 0103 	orr.w	r1, r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	0c1b      	lsrs	r3, r3, #16
 80050a4:	f003 0104 	and.w	r1, r3, #4
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	69da      	ldr	r2, [r3, #28]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	4613      	mov	r3, r2
 80050ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_SPI_Transmit+0x22>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e11e      	b.n	800533c <HAL_SPI_Transmit+0x260>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005106:	f7fd fb01 	bl	800270c <HAL_GetTick>
 800510a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800510c:	88fb      	ldrh	r3, [r7, #6]
 800510e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b01      	cmp	r3, #1
 800511a:	d002      	beq.n	8005122 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800511c:	2302      	movs	r3, #2
 800511e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005120:	e103      	b.n	800532a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <HAL_SPI_Transmit+0x52>
 8005128:	88fb      	ldrh	r3, [r7, #6]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d102      	bne.n	8005134 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005132:	e0fa      	b.n	800532a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2203      	movs	r2, #3
 8005138:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	88fa      	ldrh	r2, [r7, #6]
 800514c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	88fa      	ldrh	r2, [r7, #6]
 8005152:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800517a:	d107      	bne.n	800518c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800518a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005196:	2b40      	cmp	r3, #64	; 0x40
 8005198:	d007      	beq.n	80051aa <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051b2:	d14b      	bne.n	800524c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <HAL_SPI_Transmit+0xe6>
 80051bc:	8afb      	ldrh	r3, [r7, #22]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d13e      	bne.n	8005240 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c6:	881a      	ldrh	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d2:	1c9a      	adds	r2, r3, #2
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80051e6:	e02b      	b.n	8005240 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d112      	bne.n	800521c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fa:	881a      	ldrh	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005206:	1c9a      	adds	r2, r3, #2
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	86da      	strh	r2, [r3, #54]	; 0x36
 800521a:	e011      	b.n	8005240 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800521c:	f7fd fa76 	bl	800270c <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d803      	bhi.n	8005234 <HAL_SPI_Transmit+0x158>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005232:	d102      	bne.n	800523a <HAL_SPI_Transmit+0x15e>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d102      	bne.n	8005240 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800523e:	e074      	b.n	800532a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005244:	b29b      	uxth	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1ce      	bne.n	80051e8 <HAL_SPI_Transmit+0x10c>
 800524a:	e04c      	b.n	80052e6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <HAL_SPI_Transmit+0x17e>
 8005254:	8afb      	ldrh	r3, [r7, #22]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d140      	bne.n	80052dc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	330c      	adds	r3, #12
 8005264:	7812      	ldrb	r2, [r2, #0]
 8005266:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005280:	e02c      	b.n	80052dc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b02      	cmp	r3, #2
 800528e:	d113      	bne.n	80052b8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	330c      	adds	r3, #12
 800529a:	7812      	ldrb	r2, [r2, #0]
 800529c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	3b01      	subs	r3, #1
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80052b6:	e011      	b.n	80052dc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052b8:	f7fd fa28 	bl	800270c <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d803      	bhi.n	80052d0 <HAL_SPI_Transmit+0x1f4>
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ce:	d102      	bne.n	80052d6 <HAL_SPI_Transmit+0x1fa>
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d102      	bne.n	80052dc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80052da:	e026      	b.n	800532a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1cd      	bne.n	8005282 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	6839      	ldr	r1, [r7, #0]
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 fba4 	bl	8005a38 <SPI_EndRxTxTransaction>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2220      	movs	r2, #32
 80052fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10a      	bne.n	800531a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005304:	2300      	movs	r3, #0
 8005306:	613b      	str	r3, [r7, #16]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	613b      	str	r3, [r7, #16]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	613b      	str	r3, [r7, #16]
 8005318:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531e:	2b00      	cmp	r3, #0
 8005320:	d002      	beq.n	8005328 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	77fb      	strb	r3, [r7, #31]
 8005326:	e000      	b.n	800532a <HAL_SPI_Transmit+0x24e>
  }

error:
 8005328:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800533a:	7ffb      	ldrb	r3, [r7, #31]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3720      	adds	r7, #32
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af02      	add	r7, sp, #8
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	4613      	mov	r3, r2
 8005352:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005360:	d112      	bne.n	8005388 <HAL_SPI_Receive+0x44>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10e      	bne.n	8005388 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2204      	movs	r2, #4
 800536e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005372:	88fa      	ldrh	r2, [r7, #6]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	4613      	mov	r3, r2
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 f8e9 	bl	8005556 <HAL_SPI_TransmitReceive>
 8005384:	4603      	mov	r3, r0
 8005386:	e0e2      	b.n	800554e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800538e:	2b01      	cmp	r3, #1
 8005390:	d101      	bne.n	8005396 <HAL_SPI_Receive+0x52>
 8005392:	2302      	movs	r3, #2
 8005394:	e0db      	b.n	800554e <HAL_SPI_Receive+0x20a>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800539e:	f7fd f9b5 	bl	800270c <HAL_GetTick>
 80053a2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d002      	beq.n	80053b6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80053b0:	2302      	movs	r3, #2
 80053b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80053b4:	e0c2      	b.n	800553c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <HAL_SPI_Receive+0x7e>
 80053bc:	88fb      	ldrh	r3, [r7, #6]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d102      	bne.n	80053c8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80053c6:	e0b9      	b.n	800553c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2204      	movs	r2, #4
 80053cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	88fa      	ldrh	r2, [r7, #6]
 80053e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	88fa      	ldrh	r2, [r7, #6]
 80053e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800540e:	d107      	bne.n	8005420 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800541e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542a:	2b40      	cmp	r3, #64	; 0x40
 800542c:	d007      	beq.n	800543e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800543c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d162      	bne.n	800550c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005446:	e02e      	b.n	80054a6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b01      	cmp	r3, #1
 8005454:	d115      	bne.n	8005482 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f103 020c 	add.w	r2, r3, #12
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005462:	7812      	ldrb	r2, [r2, #0]
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005476:	b29b      	uxth	r3, r3
 8005478:	3b01      	subs	r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005480:	e011      	b.n	80054a6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005482:	f7fd f943 	bl	800270c <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	429a      	cmp	r2, r3
 8005490:	d803      	bhi.n	800549a <HAL_SPI_Receive+0x156>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005498:	d102      	bne.n	80054a0 <HAL_SPI_Receive+0x15c>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d102      	bne.n	80054a6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80054a4:	e04a      	b.n	800553c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1cb      	bne.n	8005448 <HAL_SPI_Receive+0x104>
 80054b0:	e031      	b.n	8005516 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d113      	bne.n	80054e8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68da      	ldr	r2, [r3, #12]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ca:	b292      	uxth	r2, r2
 80054cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d2:	1c9a      	adds	r2, r3, #2
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054dc:	b29b      	uxth	r3, r3
 80054de:	3b01      	subs	r3, #1
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054e6:	e011      	b.n	800550c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054e8:	f7fd f910 	bl	800270c <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d803      	bhi.n	8005500 <HAL_SPI_Receive+0x1bc>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fe:	d102      	bne.n	8005506 <HAL_SPI_Receive+0x1c2>
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d102      	bne.n	800550c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	75fb      	strb	r3, [r7, #23]
          goto error;
 800550a:	e017      	b.n	800553c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005510:	b29b      	uxth	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1cd      	bne.n	80054b2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	6839      	ldr	r1, [r7, #0]
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 fa27 	bl	800596e <SPI_EndRxTransaction>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2220      	movs	r2, #32
 800552a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	75fb      	strb	r3, [r7, #23]
 8005538:	e000      	b.n	800553c <HAL_SPI_Receive+0x1f8>
  }

error :
 800553a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800554c:	7dfb      	ldrb	r3, [r7, #23]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b08c      	sub	sp, #48	; 0x30
 800555a:	af00      	add	r7, sp, #0
 800555c:	60f8      	str	r0, [r7, #12]
 800555e:	60b9      	str	r1, [r7, #8]
 8005560:	607a      	str	r2, [r7, #4]
 8005562:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005564:	2301      	movs	r3, #1
 8005566:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <HAL_SPI_TransmitReceive+0x26>
 8005578:	2302      	movs	r3, #2
 800557a:	e18a      	b.n	8005892 <HAL_SPI_TransmitReceive+0x33c>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005584:	f7fd f8c2 	bl	800270c <HAL_GetTick>
 8005588:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005590:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800559a:	887b      	ldrh	r3, [r7, #2]
 800559c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800559e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d00f      	beq.n	80055c6 <HAL_SPI_TransmitReceive+0x70>
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055ac:	d107      	bne.n	80055be <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d103      	bne.n	80055be <HAL_SPI_TransmitReceive+0x68>
 80055b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d003      	beq.n	80055c6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80055be:	2302      	movs	r3, #2
 80055c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80055c4:	e15b      	b.n	800587e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d005      	beq.n	80055d8 <HAL_SPI_TransmitReceive+0x82>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <HAL_SPI_TransmitReceive+0x82>
 80055d2:	887b      	ldrh	r3, [r7, #2]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d103      	bne.n	80055e0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80055de:	e14e      	b.n	800587e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d003      	beq.n	80055f4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2205      	movs	r2, #5
 80055f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	887a      	ldrh	r2, [r7, #2]
 8005604:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	887a      	ldrh	r2, [r7, #2]
 800560a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	887a      	ldrh	r2, [r7, #2]
 8005616:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	887a      	ldrh	r2, [r7, #2]
 800561c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005634:	2b40      	cmp	r3, #64	; 0x40
 8005636:	d007      	beq.n	8005648 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005646:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005650:	d178      	bne.n	8005744 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d002      	beq.n	8005660 <HAL_SPI_TransmitReceive+0x10a>
 800565a:	8b7b      	ldrh	r3, [r7, #26]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d166      	bne.n	800572e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005664:	881a      	ldrh	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005670:	1c9a      	adds	r2, r3, #2
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800567a:	b29b      	uxth	r3, r3
 800567c:	3b01      	subs	r3, #1
 800567e:	b29a      	uxth	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005684:	e053      	b.n	800572e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b02      	cmp	r3, #2
 8005692:	d11b      	bne.n	80056cc <HAL_SPI_TransmitReceive+0x176>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d016      	beq.n	80056cc <HAL_SPI_TransmitReceive+0x176>
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d113      	bne.n	80056cc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a8:	881a      	ldrh	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b4:	1c9a      	adds	r2, r3, #2
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056be:	b29b      	uxth	r3, r3
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d119      	bne.n	800570e <HAL_SPI_TransmitReceive+0x1b8>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056de:	b29b      	uxth	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d014      	beq.n	800570e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ee:	b292      	uxth	r2, r2
 80056f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f6:	1c9a      	adds	r2, r3, #2
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005700:	b29b      	uxth	r3, r3
 8005702:	3b01      	subs	r3, #1
 8005704:	b29a      	uxth	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800570a:	2301      	movs	r3, #1
 800570c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800570e:	f7fc fffd 	bl	800270c <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800571a:	429a      	cmp	r2, r3
 800571c:	d807      	bhi.n	800572e <HAL_SPI_TransmitReceive+0x1d8>
 800571e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005724:	d003      	beq.n	800572e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800572c:	e0a7      	b.n	800587e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005732:	b29b      	uxth	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1a6      	bne.n	8005686 <HAL_SPI_TransmitReceive+0x130>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1a1      	bne.n	8005686 <HAL_SPI_TransmitReceive+0x130>
 8005742:	e07c      	b.n	800583e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <HAL_SPI_TransmitReceive+0x1fc>
 800574c:	8b7b      	ldrh	r3, [r7, #26]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d16b      	bne.n	800582a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	330c      	adds	r3, #12
 800575c:	7812      	ldrb	r2, [r2, #0]
 800575e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005778:	e057      	b.n	800582a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b02      	cmp	r3, #2
 8005786:	d11c      	bne.n	80057c2 <HAL_SPI_TransmitReceive+0x26c>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800578c:	b29b      	uxth	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d017      	beq.n	80057c2 <HAL_SPI_TransmitReceive+0x26c>
 8005792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005794:	2b01      	cmp	r3, #1
 8005796:	d114      	bne.n	80057c2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	330c      	adds	r3, #12
 80057a2:	7812      	ldrb	r2, [r2, #0]
 80057a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	3b01      	subs	r3, #1
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d119      	bne.n	8005804 <HAL_SPI_TransmitReceive+0x2ae>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d014      	beq.n	8005804 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e4:	b2d2      	uxtb	r2, r2
 80057e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005800:	2301      	movs	r3, #1
 8005802:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005804:	f7fc ff82 	bl	800270c <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005810:	429a      	cmp	r2, r3
 8005812:	d803      	bhi.n	800581c <HAL_SPI_TransmitReceive+0x2c6>
 8005814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581a:	d102      	bne.n	8005822 <HAL_SPI_TransmitReceive+0x2cc>
 800581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581e:	2b00      	cmp	r3, #0
 8005820:	d103      	bne.n	800582a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005828:	e029      	b.n	800587e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800582e:	b29b      	uxth	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1a2      	bne.n	800577a <HAL_SPI_TransmitReceive+0x224>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d19d      	bne.n	800577a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800583e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005840:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 f8f8 	bl	8005a38 <SPI_EndRxTxTransaction>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d006      	beq.n	800585c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2220      	movs	r2, #32
 8005858:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800585a:	e010      	b.n	800587e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10b      	bne.n	800587c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005864:	2300      	movs	r3, #0
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	e000      	b.n	800587e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800587c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800588e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005892:	4618      	mov	r0, r3
 8005894:	3730      	adds	r7, #48	; 0x30
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	603b      	str	r3, [r7, #0]
 80058a6:	4613      	mov	r3, r2
 80058a8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058aa:	e04c      	b.n	8005946 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b2:	d048      	beq.n	8005946 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80058b4:	f7fc ff2a 	bl	800270c <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d902      	bls.n	80058ca <SPI_WaitFlagStateUntilTimeout+0x30>
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d13d      	bne.n	8005946 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058e2:	d111      	bne.n	8005908 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ec:	d004      	beq.n	80058f8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058f6:	d107      	bne.n	8005908 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005906:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005910:	d10f      	bne.n	8005932 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005930:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e00f      	b.n	8005966 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	4013      	ands	r3, r2
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	429a      	cmp	r2, r3
 8005954:	bf0c      	ite	eq
 8005956:	2301      	moveq	r3, #1
 8005958:	2300      	movne	r3, #0
 800595a:	b2db      	uxtb	r3, r3
 800595c:	461a      	mov	r2, r3
 800595e:	79fb      	ldrb	r3, [r7, #7]
 8005960:	429a      	cmp	r2, r3
 8005962:	d1a3      	bne.n	80058ac <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b086      	sub	sp, #24
 8005972:	af02      	add	r7, sp, #8
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	60b9      	str	r1, [r7, #8]
 8005978:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005982:	d111      	bne.n	80059a8 <SPI_EndRxTransaction+0x3a>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800598c:	d004      	beq.n	8005998 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005996:	d107      	bne.n	80059a8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059a6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059b0:	d12a      	bne.n	8005a08 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ba:	d012      	beq.n	80059e2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2200      	movs	r2, #0
 80059c4:	2180      	movs	r1, #128	; 0x80
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f7ff ff67 	bl	800589a <SPI_WaitFlagStateUntilTimeout>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d02d      	beq.n	8005a2e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d6:	f043 0220 	orr.w	r2, r3, #32
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e026      	b.n	8005a30 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2200      	movs	r2, #0
 80059ea:	2101      	movs	r1, #1
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f7ff ff54 	bl	800589a <SPI_WaitFlagStateUntilTimeout>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d01a      	beq.n	8005a2e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059fc:	f043 0220 	orr.w	r2, r3, #32
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e013      	b.n	8005a30 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	2101      	movs	r1, #1
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f7ff ff41 	bl	800589a <SPI_WaitFlagStateUntilTimeout>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d007      	beq.n	8005a2e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a22:	f043 0220 	orr.w	r2, r3, #32
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e000      	b.n	8005a30 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b088      	sub	sp, #32
 8005a3c:	af02      	add	r7, sp, #8
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a44:	4b1b      	ldr	r3, [pc, #108]	; (8005ab4 <SPI_EndRxTxTransaction+0x7c>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a1b      	ldr	r2, [pc, #108]	; (8005ab8 <SPI_EndRxTxTransaction+0x80>)
 8005a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4e:	0d5b      	lsrs	r3, r3, #21
 8005a50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a54:	fb02 f303 	mul.w	r3, r2, r3
 8005a58:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a62:	d112      	bne.n	8005a8a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	2180      	movs	r1, #128	; 0x80
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f7ff ff13 	bl	800589a <SPI_WaitFlagStateUntilTimeout>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d016      	beq.n	8005aa8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7e:	f043 0220 	orr.w	r2, r3, #32
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e00f      	b.n	8005aaa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00a      	beq.n	8005aa6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa0:	2b80      	cmp	r3, #128	; 0x80
 8005aa2:	d0f2      	beq.n	8005a8a <SPI_EndRxTxTransaction+0x52>
 8005aa4:	e000      	b.n	8005aa8 <SPI_EndRxTxTransaction+0x70>
        break;
 8005aa6:	bf00      	nop
  }

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20000004 	.word	0x20000004
 8005ab8:	165e9f81 	.word	0x165e9f81

08005abc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e03f      	b.n	8005b4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d106      	bne.n	8005ae8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7fc f886 	bl	8001bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2224      	movs	r2, #36	; 0x24
 8005aec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005afe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f829 	bl	8005b58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	695a      	ldr	r2, [r3, #20]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68da      	ldr	r2, [r3, #12]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
	...

08005b58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b5c:	b085      	sub	sp, #20
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68da      	ldr	r2, [r3, #12]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	431a      	orrs	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005b9a:	f023 030c 	bic.w	r3, r3, #12
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6812      	ldr	r2, [r2, #0]
 8005ba2:	68f9      	ldr	r1, [r7, #12]
 8005ba4:	430b      	orrs	r3, r1
 8005ba6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	699a      	ldr	r2, [r3, #24]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bc6:	f040 818b 	bne.w	8005ee0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4ac1      	ldr	r2, [pc, #772]	; (8005ed4 <UART_SetConfig+0x37c>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d005      	beq.n	8005be0 <UART_SetConfig+0x88>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4abf      	ldr	r2, [pc, #764]	; (8005ed8 <UART_SetConfig+0x380>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	f040 80bd 	bne.w	8005d5a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005be0:	f7ff fa04 	bl	8004fec <HAL_RCC_GetPCLK2Freq>
 8005be4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	461d      	mov	r5, r3
 8005bea:	f04f 0600 	mov.w	r6, #0
 8005bee:	46a8      	mov	r8, r5
 8005bf0:	46b1      	mov	r9, r6
 8005bf2:	eb18 0308 	adds.w	r3, r8, r8
 8005bf6:	eb49 0409 	adc.w	r4, r9, r9
 8005bfa:	4698      	mov	r8, r3
 8005bfc:	46a1      	mov	r9, r4
 8005bfe:	eb18 0805 	adds.w	r8, r8, r5
 8005c02:	eb49 0906 	adc.w	r9, r9, r6
 8005c06:	f04f 0100 	mov.w	r1, #0
 8005c0a:	f04f 0200 	mov.w	r2, #0
 8005c0e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c12:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c16:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c1a:	4688      	mov	r8, r1
 8005c1c:	4691      	mov	r9, r2
 8005c1e:	eb18 0005 	adds.w	r0, r8, r5
 8005c22:	eb49 0106 	adc.w	r1, r9, r6
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	461d      	mov	r5, r3
 8005c2c:	f04f 0600 	mov.w	r6, #0
 8005c30:	196b      	adds	r3, r5, r5
 8005c32:	eb46 0406 	adc.w	r4, r6, r6
 8005c36:	461a      	mov	r2, r3
 8005c38:	4623      	mov	r3, r4
 8005c3a:	f7fb f80d 	bl	8000c58 <__aeabi_uldivmod>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	460c      	mov	r4, r1
 8005c42:	461a      	mov	r2, r3
 8005c44:	4ba5      	ldr	r3, [pc, #660]	; (8005edc <UART_SetConfig+0x384>)
 8005c46:	fba3 2302 	umull	r2, r3, r3, r2
 8005c4a:	095b      	lsrs	r3, r3, #5
 8005c4c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	461d      	mov	r5, r3
 8005c54:	f04f 0600 	mov.w	r6, #0
 8005c58:	46a9      	mov	r9, r5
 8005c5a:	46b2      	mov	sl, r6
 8005c5c:	eb19 0309 	adds.w	r3, r9, r9
 8005c60:	eb4a 040a 	adc.w	r4, sl, sl
 8005c64:	4699      	mov	r9, r3
 8005c66:	46a2      	mov	sl, r4
 8005c68:	eb19 0905 	adds.w	r9, r9, r5
 8005c6c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c70:	f04f 0100 	mov.w	r1, #0
 8005c74:	f04f 0200 	mov.w	r2, #0
 8005c78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c84:	4689      	mov	r9, r1
 8005c86:	4692      	mov	sl, r2
 8005c88:	eb19 0005 	adds.w	r0, r9, r5
 8005c8c:	eb4a 0106 	adc.w	r1, sl, r6
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	461d      	mov	r5, r3
 8005c96:	f04f 0600 	mov.w	r6, #0
 8005c9a:	196b      	adds	r3, r5, r5
 8005c9c:	eb46 0406 	adc.w	r4, r6, r6
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	4623      	mov	r3, r4
 8005ca4:	f7fa ffd8 	bl	8000c58 <__aeabi_uldivmod>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	460c      	mov	r4, r1
 8005cac:	461a      	mov	r2, r3
 8005cae:	4b8b      	ldr	r3, [pc, #556]	; (8005edc <UART_SetConfig+0x384>)
 8005cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cb4:	095b      	lsrs	r3, r3, #5
 8005cb6:	2164      	movs	r1, #100	; 0x64
 8005cb8:	fb01 f303 	mul.w	r3, r1, r3
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	3332      	adds	r3, #50	; 0x32
 8005cc2:	4a86      	ldr	r2, [pc, #536]	; (8005edc <UART_SetConfig+0x384>)
 8005cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc8:	095b      	lsrs	r3, r3, #5
 8005cca:	005b      	lsls	r3, r3, #1
 8005ccc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cd0:	4498      	add	r8, r3
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	461d      	mov	r5, r3
 8005cd6:	f04f 0600 	mov.w	r6, #0
 8005cda:	46a9      	mov	r9, r5
 8005cdc:	46b2      	mov	sl, r6
 8005cde:	eb19 0309 	adds.w	r3, r9, r9
 8005ce2:	eb4a 040a 	adc.w	r4, sl, sl
 8005ce6:	4699      	mov	r9, r3
 8005ce8:	46a2      	mov	sl, r4
 8005cea:	eb19 0905 	adds.w	r9, r9, r5
 8005cee:	eb4a 0a06 	adc.w	sl, sl, r6
 8005cf2:	f04f 0100 	mov.w	r1, #0
 8005cf6:	f04f 0200 	mov.w	r2, #0
 8005cfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cfe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d06:	4689      	mov	r9, r1
 8005d08:	4692      	mov	sl, r2
 8005d0a:	eb19 0005 	adds.w	r0, r9, r5
 8005d0e:	eb4a 0106 	adc.w	r1, sl, r6
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	461d      	mov	r5, r3
 8005d18:	f04f 0600 	mov.w	r6, #0
 8005d1c:	196b      	adds	r3, r5, r5
 8005d1e:	eb46 0406 	adc.w	r4, r6, r6
 8005d22:	461a      	mov	r2, r3
 8005d24:	4623      	mov	r3, r4
 8005d26:	f7fa ff97 	bl	8000c58 <__aeabi_uldivmod>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	460c      	mov	r4, r1
 8005d2e:	461a      	mov	r2, r3
 8005d30:	4b6a      	ldr	r3, [pc, #424]	; (8005edc <UART_SetConfig+0x384>)
 8005d32:	fba3 1302 	umull	r1, r3, r3, r2
 8005d36:	095b      	lsrs	r3, r3, #5
 8005d38:	2164      	movs	r1, #100	; 0x64
 8005d3a:	fb01 f303 	mul.w	r3, r1, r3
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	00db      	lsls	r3, r3, #3
 8005d42:	3332      	adds	r3, #50	; 0x32
 8005d44:	4a65      	ldr	r2, [pc, #404]	; (8005edc <UART_SetConfig+0x384>)
 8005d46:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4a:	095b      	lsrs	r3, r3, #5
 8005d4c:	f003 0207 	and.w	r2, r3, #7
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4442      	add	r2, r8
 8005d56:	609a      	str	r2, [r3, #8]
 8005d58:	e26f      	b.n	800623a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d5a:	f7ff f933 	bl	8004fc4 <HAL_RCC_GetPCLK1Freq>
 8005d5e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	461d      	mov	r5, r3
 8005d64:	f04f 0600 	mov.w	r6, #0
 8005d68:	46a8      	mov	r8, r5
 8005d6a:	46b1      	mov	r9, r6
 8005d6c:	eb18 0308 	adds.w	r3, r8, r8
 8005d70:	eb49 0409 	adc.w	r4, r9, r9
 8005d74:	4698      	mov	r8, r3
 8005d76:	46a1      	mov	r9, r4
 8005d78:	eb18 0805 	adds.w	r8, r8, r5
 8005d7c:	eb49 0906 	adc.w	r9, r9, r6
 8005d80:	f04f 0100 	mov.w	r1, #0
 8005d84:	f04f 0200 	mov.w	r2, #0
 8005d88:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d8c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d90:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d94:	4688      	mov	r8, r1
 8005d96:	4691      	mov	r9, r2
 8005d98:	eb18 0005 	adds.w	r0, r8, r5
 8005d9c:	eb49 0106 	adc.w	r1, r9, r6
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	461d      	mov	r5, r3
 8005da6:	f04f 0600 	mov.w	r6, #0
 8005daa:	196b      	adds	r3, r5, r5
 8005dac:	eb46 0406 	adc.w	r4, r6, r6
 8005db0:	461a      	mov	r2, r3
 8005db2:	4623      	mov	r3, r4
 8005db4:	f7fa ff50 	bl	8000c58 <__aeabi_uldivmod>
 8005db8:	4603      	mov	r3, r0
 8005dba:	460c      	mov	r4, r1
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	4b47      	ldr	r3, [pc, #284]	; (8005edc <UART_SetConfig+0x384>)
 8005dc0:	fba3 2302 	umull	r2, r3, r3, r2
 8005dc4:	095b      	lsrs	r3, r3, #5
 8005dc6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	461d      	mov	r5, r3
 8005dce:	f04f 0600 	mov.w	r6, #0
 8005dd2:	46a9      	mov	r9, r5
 8005dd4:	46b2      	mov	sl, r6
 8005dd6:	eb19 0309 	adds.w	r3, r9, r9
 8005dda:	eb4a 040a 	adc.w	r4, sl, sl
 8005dde:	4699      	mov	r9, r3
 8005de0:	46a2      	mov	sl, r4
 8005de2:	eb19 0905 	adds.w	r9, r9, r5
 8005de6:	eb4a 0a06 	adc.w	sl, sl, r6
 8005dea:	f04f 0100 	mov.w	r1, #0
 8005dee:	f04f 0200 	mov.w	r2, #0
 8005df2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005df6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005dfe:	4689      	mov	r9, r1
 8005e00:	4692      	mov	sl, r2
 8005e02:	eb19 0005 	adds.w	r0, r9, r5
 8005e06:	eb4a 0106 	adc.w	r1, sl, r6
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	461d      	mov	r5, r3
 8005e10:	f04f 0600 	mov.w	r6, #0
 8005e14:	196b      	adds	r3, r5, r5
 8005e16:	eb46 0406 	adc.w	r4, r6, r6
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	4623      	mov	r3, r4
 8005e1e:	f7fa ff1b 	bl	8000c58 <__aeabi_uldivmod>
 8005e22:	4603      	mov	r3, r0
 8005e24:	460c      	mov	r4, r1
 8005e26:	461a      	mov	r2, r3
 8005e28:	4b2c      	ldr	r3, [pc, #176]	; (8005edc <UART_SetConfig+0x384>)
 8005e2a:	fba3 1302 	umull	r1, r3, r3, r2
 8005e2e:	095b      	lsrs	r3, r3, #5
 8005e30:	2164      	movs	r1, #100	; 0x64
 8005e32:	fb01 f303 	mul.w	r3, r1, r3
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	3332      	adds	r3, #50	; 0x32
 8005e3c:	4a27      	ldr	r2, [pc, #156]	; (8005edc <UART_SetConfig+0x384>)
 8005e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e42:	095b      	lsrs	r3, r3, #5
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e4a:	4498      	add	r8, r3
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	461d      	mov	r5, r3
 8005e50:	f04f 0600 	mov.w	r6, #0
 8005e54:	46a9      	mov	r9, r5
 8005e56:	46b2      	mov	sl, r6
 8005e58:	eb19 0309 	adds.w	r3, r9, r9
 8005e5c:	eb4a 040a 	adc.w	r4, sl, sl
 8005e60:	4699      	mov	r9, r3
 8005e62:	46a2      	mov	sl, r4
 8005e64:	eb19 0905 	adds.w	r9, r9, r5
 8005e68:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e6c:	f04f 0100 	mov.w	r1, #0
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e80:	4689      	mov	r9, r1
 8005e82:	4692      	mov	sl, r2
 8005e84:	eb19 0005 	adds.w	r0, r9, r5
 8005e88:	eb4a 0106 	adc.w	r1, sl, r6
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	461d      	mov	r5, r3
 8005e92:	f04f 0600 	mov.w	r6, #0
 8005e96:	196b      	adds	r3, r5, r5
 8005e98:	eb46 0406 	adc.w	r4, r6, r6
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	4623      	mov	r3, r4
 8005ea0:	f7fa feda 	bl	8000c58 <__aeabi_uldivmod>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	4b0c      	ldr	r3, [pc, #48]	; (8005edc <UART_SetConfig+0x384>)
 8005eac:	fba3 1302 	umull	r1, r3, r3, r2
 8005eb0:	095b      	lsrs	r3, r3, #5
 8005eb2:	2164      	movs	r1, #100	; 0x64
 8005eb4:	fb01 f303 	mul.w	r3, r1, r3
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	3332      	adds	r3, #50	; 0x32
 8005ebe:	4a07      	ldr	r2, [pc, #28]	; (8005edc <UART_SetConfig+0x384>)
 8005ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec4:	095b      	lsrs	r3, r3, #5
 8005ec6:	f003 0207 	and.w	r2, r3, #7
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4442      	add	r2, r8
 8005ed0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005ed2:	e1b2      	b.n	800623a <UART_SetConfig+0x6e2>
 8005ed4:	40011000 	.word	0x40011000
 8005ed8:	40011400 	.word	0x40011400
 8005edc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4ad7      	ldr	r2, [pc, #860]	; (8006244 <UART_SetConfig+0x6ec>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d005      	beq.n	8005ef6 <UART_SetConfig+0x39e>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4ad6      	ldr	r2, [pc, #856]	; (8006248 <UART_SetConfig+0x6f0>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	f040 80d1 	bne.w	8006098 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ef6:	f7ff f879 	bl	8004fec <HAL_RCC_GetPCLK2Freq>
 8005efa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	469a      	mov	sl, r3
 8005f00:	f04f 0b00 	mov.w	fp, #0
 8005f04:	46d0      	mov	r8, sl
 8005f06:	46d9      	mov	r9, fp
 8005f08:	eb18 0308 	adds.w	r3, r8, r8
 8005f0c:	eb49 0409 	adc.w	r4, r9, r9
 8005f10:	4698      	mov	r8, r3
 8005f12:	46a1      	mov	r9, r4
 8005f14:	eb18 080a 	adds.w	r8, r8, sl
 8005f18:	eb49 090b 	adc.w	r9, r9, fp
 8005f1c:	f04f 0100 	mov.w	r1, #0
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f28:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f2c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f30:	4688      	mov	r8, r1
 8005f32:	4691      	mov	r9, r2
 8005f34:	eb1a 0508 	adds.w	r5, sl, r8
 8005f38:	eb4b 0609 	adc.w	r6, fp, r9
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	4619      	mov	r1, r3
 8005f42:	f04f 0200 	mov.w	r2, #0
 8005f46:	f04f 0300 	mov.w	r3, #0
 8005f4a:	f04f 0400 	mov.w	r4, #0
 8005f4e:	0094      	lsls	r4, r2, #2
 8005f50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f54:	008b      	lsls	r3, r1, #2
 8005f56:	461a      	mov	r2, r3
 8005f58:	4623      	mov	r3, r4
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	4631      	mov	r1, r6
 8005f5e:	f7fa fe7b 	bl	8000c58 <__aeabi_uldivmod>
 8005f62:	4603      	mov	r3, r0
 8005f64:	460c      	mov	r4, r1
 8005f66:	461a      	mov	r2, r3
 8005f68:	4bb8      	ldr	r3, [pc, #736]	; (800624c <UART_SetConfig+0x6f4>)
 8005f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f6e:	095b      	lsrs	r3, r3, #5
 8005f70:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	469b      	mov	fp, r3
 8005f78:	f04f 0c00 	mov.w	ip, #0
 8005f7c:	46d9      	mov	r9, fp
 8005f7e:	46e2      	mov	sl, ip
 8005f80:	eb19 0309 	adds.w	r3, r9, r9
 8005f84:	eb4a 040a 	adc.w	r4, sl, sl
 8005f88:	4699      	mov	r9, r3
 8005f8a:	46a2      	mov	sl, r4
 8005f8c:	eb19 090b 	adds.w	r9, r9, fp
 8005f90:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f94:	f04f 0100 	mov.w	r1, #0
 8005f98:	f04f 0200 	mov.w	r2, #0
 8005f9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fa0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fa4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fa8:	4689      	mov	r9, r1
 8005faa:	4692      	mov	sl, r2
 8005fac:	eb1b 0509 	adds.w	r5, fp, r9
 8005fb0:	eb4c 060a 	adc.w	r6, ip, sl
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	4619      	mov	r1, r3
 8005fba:	f04f 0200 	mov.w	r2, #0
 8005fbe:	f04f 0300 	mov.w	r3, #0
 8005fc2:	f04f 0400 	mov.w	r4, #0
 8005fc6:	0094      	lsls	r4, r2, #2
 8005fc8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fcc:	008b      	lsls	r3, r1, #2
 8005fce:	461a      	mov	r2, r3
 8005fd0:	4623      	mov	r3, r4
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	4631      	mov	r1, r6
 8005fd6:	f7fa fe3f 	bl	8000c58 <__aeabi_uldivmod>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	460c      	mov	r4, r1
 8005fde:	461a      	mov	r2, r3
 8005fe0:	4b9a      	ldr	r3, [pc, #616]	; (800624c <UART_SetConfig+0x6f4>)
 8005fe2:	fba3 1302 	umull	r1, r3, r3, r2
 8005fe6:	095b      	lsrs	r3, r3, #5
 8005fe8:	2164      	movs	r1, #100	; 0x64
 8005fea:	fb01 f303 	mul.w	r3, r1, r3
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	3332      	adds	r3, #50	; 0x32
 8005ff4:	4a95      	ldr	r2, [pc, #596]	; (800624c <UART_SetConfig+0x6f4>)
 8005ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffa:	095b      	lsrs	r3, r3, #5
 8005ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006000:	4498      	add	r8, r3
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	469b      	mov	fp, r3
 8006006:	f04f 0c00 	mov.w	ip, #0
 800600a:	46d9      	mov	r9, fp
 800600c:	46e2      	mov	sl, ip
 800600e:	eb19 0309 	adds.w	r3, r9, r9
 8006012:	eb4a 040a 	adc.w	r4, sl, sl
 8006016:	4699      	mov	r9, r3
 8006018:	46a2      	mov	sl, r4
 800601a:	eb19 090b 	adds.w	r9, r9, fp
 800601e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006022:	f04f 0100 	mov.w	r1, #0
 8006026:	f04f 0200 	mov.w	r2, #0
 800602a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800602e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006032:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006036:	4689      	mov	r9, r1
 8006038:	4692      	mov	sl, r2
 800603a:	eb1b 0509 	adds.w	r5, fp, r9
 800603e:	eb4c 060a 	adc.w	r6, ip, sl
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	4619      	mov	r1, r3
 8006048:	f04f 0200 	mov.w	r2, #0
 800604c:	f04f 0300 	mov.w	r3, #0
 8006050:	f04f 0400 	mov.w	r4, #0
 8006054:	0094      	lsls	r4, r2, #2
 8006056:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800605a:	008b      	lsls	r3, r1, #2
 800605c:	461a      	mov	r2, r3
 800605e:	4623      	mov	r3, r4
 8006060:	4628      	mov	r0, r5
 8006062:	4631      	mov	r1, r6
 8006064:	f7fa fdf8 	bl	8000c58 <__aeabi_uldivmod>
 8006068:	4603      	mov	r3, r0
 800606a:	460c      	mov	r4, r1
 800606c:	461a      	mov	r2, r3
 800606e:	4b77      	ldr	r3, [pc, #476]	; (800624c <UART_SetConfig+0x6f4>)
 8006070:	fba3 1302 	umull	r1, r3, r3, r2
 8006074:	095b      	lsrs	r3, r3, #5
 8006076:	2164      	movs	r1, #100	; 0x64
 8006078:	fb01 f303 	mul.w	r3, r1, r3
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	011b      	lsls	r3, r3, #4
 8006080:	3332      	adds	r3, #50	; 0x32
 8006082:	4a72      	ldr	r2, [pc, #456]	; (800624c <UART_SetConfig+0x6f4>)
 8006084:	fba2 2303 	umull	r2, r3, r2, r3
 8006088:	095b      	lsrs	r3, r3, #5
 800608a:	f003 020f 	and.w	r2, r3, #15
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4442      	add	r2, r8
 8006094:	609a      	str	r2, [r3, #8]
 8006096:	e0d0      	b.n	800623a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006098:	f7fe ff94 	bl	8004fc4 <HAL_RCC_GetPCLK1Freq>
 800609c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	469a      	mov	sl, r3
 80060a2:	f04f 0b00 	mov.w	fp, #0
 80060a6:	46d0      	mov	r8, sl
 80060a8:	46d9      	mov	r9, fp
 80060aa:	eb18 0308 	adds.w	r3, r8, r8
 80060ae:	eb49 0409 	adc.w	r4, r9, r9
 80060b2:	4698      	mov	r8, r3
 80060b4:	46a1      	mov	r9, r4
 80060b6:	eb18 080a 	adds.w	r8, r8, sl
 80060ba:	eb49 090b 	adc.w	r9, r9, fp
 80060be:	f04f 0100 	mov.w	r1, #0
 80060c2:	f04f 0200 	mov.w	r2, #0
 80060c6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060ca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060ce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060d2:	4688      	mov	r8, r1
 80060d4:	4691      	mov	r9, r2
 80060d6:	eb1a 0508 	adds.w	r5, sl, r8
 80060da:	eb4b 0609 	adc.w	r6, fp, r9
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	4619      	mov	r1, r3
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	f04f 0300 	mov.w	r3, #0
 80060ec:	f04f 0400 	mov.w	r4, #0
 80060f0:	0094      	lsls	r4, r2, #2
 80060f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060f6:	008b      	lsls	r3, r1, #2
 80060f8:	461a      	mov	r2, r3
 80060fa:	4623      	mov	r3, r4
 80060fc:	4628      	mov	r0, r5
 80060fe:	4631      	mov	r1, r6
 8006100:	f7fa fdaa 	bl	8000c58 <__aeabi_uldivmod>
 8006104:	4603      	mov	r3, r0
 8006106:	460c      	mov	r4, r1
 8006108:	461a      	mov	r2, r3
 800610a:	4b50      	ldr	r3, [pc, #320]	; (800624c <UART_SetConfig+0x6f4>)
 800610c:	fba3 2302 	umull	r2, r3, r3, r2
 8006110:	095b      	lsrs	r3, r3, #5
 8006112:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	469b      	mov	fp, r3
 800611a:	f04f 0c00 	mov.w	ip, #0
 800611e:	46d9      	mov	r9, fp
 8006120:	46e2      	mov	sl, ip
 8006122:	eb19 0309 	adds.w	r3, r9, r9
 8006126:	eb4a 040a 	adc.w	r4, sl, sl
 800612a:	4699      	mov	r9, r3
 800612c:	46a2      	mov	sl, r4
 800612e:	eb19 090b 	adds.w	r9, r9, fp
 8006132:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006136:	f04f 0100 	mov.w	r1, #0
 800613a:	f04f 0200 	mov.w	r2, #0
 800613e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006142:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006146:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800614a:	4689      	mov	r9, r1
 800614c:	4692      	mov	sl, r2
 800614e:	eb1b 0509 	adds.w	r5, fp, r9
 8006152:	eb4c 060a 	adc.w	r6, ip, sl
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	4619      	mov	r1, r3
 800615c:	f04f 0200 	mov.w	r2, #0
 8006160:	f04f 0300 	mov.w	r3, #0
 8006164:	f04f 0400 	mov.w	r4, #0
 8006168:	0094      	lsls	r4, r2, #2
 800616a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800616e:	008b      	lsls	r3, r1, #2
 8006170:	461a      	mov	r2, r3
 8006172:	4623      	mov	r3, r4
 8006174:	4628      	mov	r0, r5
 8006176:	4631      	mov	r1, r6
 8006178:	f7fa fd6e 	bl	8000c58 <__aeabi_uldivmod>
 800617c:	4603      	mov	r3, r0
 800617e:	460c      	mov	r4, r1
 8006180:	461a      	mov	r2, r3
 8006182:	4b32      	ldr	r3, [pc, #200]	; (800624c <UART_SetConfig+0x6f4>)
 8006184:	fba3 1302 	umull	r1, r3, r3, r2
 8006188:	095b      	lsrs	r3, r3, #5
 800618a:	2164      	movs	r1, #100	; 0x64
 800618c:	fb01 f303 	mul.w	r3, r1, r3
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	011b      	lsls	r3, r3, #4
 8006194:	3332      	adds	r3, #50	; 0x32
 8006196:	4a2d      	ldr	r2, [pc, #180]	; (800624c <UART_SetConfig+0x6f4>)
 8006198:	fba2 2303 	umull	r2, r3, r2, r3
 800619c:	095b      	lsrs	r3, r3, #5
 800619e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061a2:	4498      	add	r8, r3
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	469b      	mov	fp, r3
 80061a8:	f04f 0c00 	mov.w	ip, #0
 80061ac:	46d9      	mov	r9, fp
 80061ae:	46e2      	mov	sl, ip
 80061b0:	eb19 0309 	adds.w	r3, r9, r9
 80061b4:	eb4a 040a 	adc.w	r4, sl, sl
 80061b8:	4699      	mov	r9, r3
 80061ba:	46a2      	mov	sl, r4
 80061bc:	eb19 090b 	adds.w	r9, r9, fp
 80061c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061c4:	f04f 0100 	mov.w	r1, #0
 80061c8:	f04f 0200 	mov.w	r2, #0
 80061cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061d8:	4689      	mov	r9, r1
 80061da:	4692      	mov	sl, r2
 80061dc:	eb1b 0509 	adds.w	r5, fp, r9
 80061e0:	eb4c 060a 	adc.w	r6, ip, sl
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	4619      	mov	r1, r3
 80061ea:	f04f 0200 	mov.w	r2, #0
 80061ee:	f04f 0300 	mov.w	r3, #0
 80061f2:	f04f 0400 	mov.w	r4, #0
 80061f6:	0094      	lsls	r4, r2, #2
 80061f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061fc:	008b      	lsls	r3, r1, #2
 80061fe:	461a      	mov	r2, r3
 8006200:	4623      	mov	r3, r4
 8006202:	4628      	mov	r0, r5
 8006204:	4631      	mov	r1, r6
 8006206:	f7fa fd27 	bl	8000c58 <__aeabi_uldivmod>
 800620a:	4603      	mov	r3, r0
 800620c:	460c      	mov	r4, r1
 800620e:	461a      	mov	r2, r3
 8006210:	4b0e      	ldr	r3, [pc, #56]	; (800624c <UART_SetConfig+0x6f4>)
 8006212:	fba3 1302 	umull	r1, r3, r3, r2
 8006216:	095b      	lsrs	r3, r3, #5
 8006218:	2164      	movs	r1, #100	; 0x64
 800621a:	fb01 f303 	mul.w	r3, r1, r3
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	011b      	lsls	r3, r3, #4
 8006222:	3332      	adds	r3, #50	; 0x32
 8006224:	4a09      	ldr	r2, [pc, #36]	; (800624c <UART_SetConfig+0x6f4>)
 8006226:	fba2 2303 	umull	r2, r3, r2, r3
 800622a:	095b      	lsrs	r3, r3, #5
 800622c:	f003 020f 	and.w	r2, r3, #15
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4442      	add	r2, r8
 8006236:	609a      	str	r2, [r3, #8]
}
 8006238:	e7ff      	b.n	800623a <UART_SetConfig+0x6e2>
 800623a:	bf00      	nop
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006244:	40011000 	.word	0x40011000
 8006248:	40011400 	.word	0x40011400
 800624c:	51eb851f 	.word	0x51eb851f

08006250 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006250:	b084      	sub	sp, #16
 8006252:	b580      	push	{r7, lr}
 8006254:	b084      	sub	sp, #16
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
 800625a:	f107 001c 	add.w	r0, r7, #28
 800625e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	2b01      	cmp	r3, #1
 8006266:	d122      	bne.n	80062ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800627c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006292:	2b01      	cmp	r3, #1
 8006294:	d105      	bne.n	80062a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f001 fac6 	bl	8007834 <USB_CoreReset>
 80062a8:	4603      	mov	r3, r0
 80062aa:	73fb      	strb	r3, [r7, #15]
 80062ac:	e01a      	b.n	80062e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f001 faba 	bl	8007834 <USB_CoreReset>
 80062c0:	4603      	mov	r3, r0
 80062c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80062c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d106      	bne.n	80062d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	639a      	str	r2, [r3, #56]	; 0x38
 80062d6:	e005      	b.n	80062e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d10b      	bne.n	8006302 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f043 0206 	orr.w	r2, r3, #6
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f043 0220 	orr.w	r2, r3, #32
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006302:	7bfb      	ldrb	r3, [r7, #15]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800630e:	b004      	add	sp, #16
 8006310:	4770      	bx	lr
	...

08006314 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006314:	b480      	push	{r7}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	4613      	mov	r3, r2
 8006320:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	2b02      	cmp	r3, #2
 8006326:	d165      	bne.n	80063f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4a41      	ldr	r2, [pc, #260]	; (8006430 <USB_SetTurnaroundTime+0x11c>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d906      	bls.n	800633e <USB_SetTurnaroundTime+0x2a>
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	4a40      	ldr	r2, [pc, #256]	; (8006434 <USB_SetTurnaroundTime+0x120>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d802      	bhi.n	800633e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006338:	230f      	movs	r3, #15
 800633a:	617b      	str	r3, [r7, #20]
 800633c:	e062      	b.n	8006404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	4a3c      	ldr	r2, [pc, #240]	; (8006434 <USB_SetTurnaroundTime+0x120>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d906      	bls.n	8006354 <USB_SetTurnaroundTime+0x40>
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	4a3b      	ldr	r2, [pc, #236]	; (8006438 <USB_SetTurnaroundTime+0x124>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d802      	bhi.n	8006354 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800634e:	230e      	movs	r3, #14
 8006350:	617b      	str	r3, [r7, #20]
 8006352:	e057      	b.n	8006404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	4a38      	ldr	r2, [pc, #224]	; (8006438 <USB_SetTurnaroundTime+0x124>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d906      	bls.n	800636a <USB_SetTurnaroundTime+0x56>
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	4a37      	ldr	r2, [pc, #220]	; (800643c <USB_SetTurnaroundTime+0x128>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d802      	bhi.n	800636a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006364:	230d      	movs	r3, #13
 8006366:	617b      	str	r3, [r7, #20]
 8006368:	e04c      	b.n	8006404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	4a33      	ldr	r2, [pc, #204]	; (800643c <USB_SetTurnaroundTime+0x128>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d906      	bls.n	8006380 <USB_SetTurnaroundTime+0x6c>
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	4a32      	ldr	r2, [pc, #200]	; (8006440 <USB_SetTurnaroundTime+0x12c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d802      	bhi.n	8006380 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800637a:	230c      	movs	r3, #12
 800637c:	617b      	str	r3, [r7, #20]
 800637e:	e041      	b.n	8006404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	4a2f      	ldr	r2, [pc, #188]	; (8006440 <USB_SetTurnaroundTime+0x12c>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d906      	bls.n	8006396 <USB_SetTurnaroundTime+0x82>
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	4a2e      	ldr	r2, [pc, #184]	; (8006444 <USB_SetTurnaroundTime+0x130>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d802      	bhi.n	8006396 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006390:	230b      	movs	r3, #11
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	e036      	b.n	8006404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	4a2a      	ldr	r2, [pc, #168]	; (8006444 <USB_SetTurnaroundTime+0x130>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d906      	bls.n	80063ac <USB_SetTurnaroundTime+0x98>
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	4a29      	ldr	r2, [pc, #164]	; (8006448 <USB_SetTurnaroundTime+0x134>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d802      	bhi.n	80063ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80063a6:	230a      	movs	r3, #10
 80063a8:	617b      	str	r3, [r7, #20]
 80063aa:	e02b      	b.n	8006404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	4a26      	ldr	r2, [pc, #152]	; (8006448 <USB_SetTurnaroundTime+0x134>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d906      	bls.n	80063c2 <USB_SetTurnaroundTime+0xae>
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	4a25      	ldr	r2, [pc, #148]	; (800644c <USB_SetTurnaroundTime+0x138>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d802      	bhi.n	80063c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80063bc:	2309      	movs	r3, #9
 80063be:	617b      	str	r3, [r7, #20]
 80063c0:	e020      	b.n	8006404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	4a21      	ldr	r2, [pc, #132]	; (800644c <USB_SetTurnaroundTime+0x138>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d906      	bls.n	80063d8 <USB_SetTurnaroundTime+0xc4>
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	4a20      	ldr	r2, [pc, #128]	; (8006450 <USB_SetTurnaroundTime+0x13c>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d802      	bhi.n	80063d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80063d2:	2308      	movs	r3, #8
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	e015      	b.n	8006404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	4a1d      	ldr	r2, [pc, #116]	; (8006450 <USB_SetTurnaroundTime+0x13c>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d906      	bls.n	80063ee <USB_SetTurnaroundTime+0xda>
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	4a1c      	ldr	r2, [pc, #112]	; (8006454 <USB_SetTurnaroundTime+0x140>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d802      	bhi.n	80063ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80063e8:	2307      	movs	r3, #7
 80063ea:	617b      	str	r3, [r7, #20]
 80063ec:	e00a      	b.n	8006404 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80063ee:	2306      	movs	r3, #6
 80063f0:	617b      	str	r3, [r7, #20]
 80063f2:	e007      	b.n	8006404 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80063f4:	79fb      	ldrb	r3, [r7, #7]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d102      	bne.n	8006400 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80063fa:	2309      	movs	r3, #9
 80063fc:	617b      	str	r3, [r7, #20]
 80063fe:	e001      	b.n	8006404 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006400:	2309      	movs	r3, #9
 8006402:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	68da      	ldr	r2, [r3, #12]
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	029b      	lsls	r3, r3, #10
 8006418:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800641c:	431a      	orrs	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	371c      	adds	r7, #28
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	00d8acbf 	.word	0x00d8acbf
 8006434:	00e4e1bf 	.word	0x00e4e1bf
 8006438:	00f423ff 	.word	0x00f423ff
 800643c:	0106737f 	.word	0x0106737f
 8006440:	011a499f 	.word	0x011a499f
 8006444:	01312cff 	.word	0x01312cff
 8006448:	014ca43f 	.word	0x014ca43f
 800644c:	016e35ff 	.word	0x016e35ff
 8006450:	01a6ab1f 	.word	0x01a6ab1f
 8006454:	01e847ff 	.word	0x01e847ff

08006458 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f043 0201 	orr.w	r2, r3, #1
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f023 0201 	bic.w	r2, r3, #1
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80064b4:	78fb      	ldrb	r3, [r7, #3]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d106      	bne.n	80064c8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	60da      	str	r2, [r3, #12]
 80064c6:	e00b      	b.n	80064e0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80064c8:	78fb      	ldrb	r3, [r7, #3]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d106      	bne.n	80064dc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	60da      	str	r2, [r3, #12]
 80064da:	e001      	b.n	80064e0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e003      	b.n	80064e8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80064e0:	2032      	movs	r0, #50	; 0x32
 80064e2:	f7fc f91f 	bl	8002724 <HAL_Delay>

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064f0:	b084      	sub	sp, #16
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b086      	sub	sp, #24
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80064fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800650a:	2300      	movs	r3, #0
 800650c:	613b      	str	r3, [r7, #16]
 800650e:	e009      	b.n	8006524 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	3340      	adds	r3, #64	; 0x40
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	2200      	movs	r2, #0
 800651c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	3301      	adds	r3, #1
 8006522:	613b      	str	r3, [r7, #16]
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	2b0e      	cmp	r3, #14
 8006528:	d9f2      	bls.n	8006510 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800652a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800652c:	2b00      	cmp	r3, #0
 800652e:	d11c      	bne.n	800656a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800653e:	f043 0302 	orr.w	r3, r3, #2
 8006542:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006548:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006554:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	639a      	str	r2, [r3, #56]	; 0x38
 8006568:	e00b      	b.n	8006582 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006588:	461a      	mov	r2, r3
 800658a:	2300      	movs	r3, #0
 800658c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006594:	4619      	mov	r1, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800659c:	461a      	mov	r2, r3
 800659e:	680b      	ldr	r3, [r1, #0]
 80065a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d10c      	bne.n	80065c2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80065a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d104      	bne.n	80065b8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065ae:	2100      	movs	r1, #0
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f949 	bl	8006848 <USB_SetDevSpeed>
 80065b6:	e008      	b.n	80065ca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065b8:	2101      	movs	r1, #1
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f944 	bl	8006848 <USB_SetDevSpeed>
 80065c0:	e003      	b.n	80065ca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065c2:	2103      	movs	r1, #3
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f93f 	bl	8006848 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065ca:	2110      	movs	r1, #16
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f8f3 	bl	80067b8 <USB_FlushTxFifo>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f911 	bl	8006804 <USB_FlushRxFifo>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f2:	461a      	mov	r2, r3
 80065f4:	2300      	movs	r3, #0
 80065f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065fe:	461a      	mov	r2, r3
 8006600:	2300      	movs	r3, #0
 8006602:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660a:	461a      	mov	r2, r3
 800660c:	2300      	movs	r3, #0
 800660e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006610:	2300      	movs	r3, #0
 8006612:	613b      	str	r3, [r7, #16]
 8006614:	e043      	b.n	800669e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006628:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800662c:	d118      	bne.n	8006660 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10a      	bne.n	800664a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006640:	461a      	mov	r2, r3
 8006642:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006646:	6013      	str	r3, [r2, #0]
 8006648:	e013      	b.n	8006672 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006656:	461a      	mov	r2, r3
 8006658:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	e008      	b.n	8006672 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666c:	461a      	mov	r2, r3
 800666e:	2300      	movs	r3, #0
 8006670:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4413      	add	r3, r2
 800667a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800667e:	461a      	mov	r2, r3
 8006680:	2300      	movs	r3, #0
 8006682:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006690:	461a      	mov	r2, r3
 8006692:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006696:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	3301      	adds	r3, #1
 800669c:	613b      	str	r3, [r7, #16]
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d3b7      	bcc.n	8006616 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066a6:	2300      	movs	r3, #0
 80066a8:	613b      	str	r3, [r7, #16]
 80066aa:	e043      	b.n	8006734 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066c2:	d118      	bne.n	80066f6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10a      	bne.n	80066e0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d6:	461a      	mov	r2, r3
 80066d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	e013      	b.n	8006708 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ec:	461a      	mov	r2, r3
 80066ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066f2:	6013      	str	r3, [r2, #0]
 80066f4:	e008      	b.n	8006708 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006702:	461a      	mov	r2, r3
 8006704:	2300      	movs	r3, #0
 8006706:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006714:	461a      	mov	r2, r3
 8006716:	2300      	movs	r3, #0
 8006718:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	4413      	add	r3, r2
 8006722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006726:	461a      	mov	r2, r3
 8006728:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800672c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	3301      	adds	r3, #1
 8006732:	613b      	str	r3, [r7, #16]
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	429a      	cmp	r2, r3
 800673a:	d3b7      	bcc.n	80066ac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800674a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800674e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800675c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	2b00      	cmp	r3, #0
 8006762:	d105      	bne.n	8006770 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	f043 0210 	orr.w	r2, r3, #16
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699a      	ldr	r2, [r3, #24]
 8006774:	4b0f      	ldr	r3, [pc, #60]	; (80067b4 <USB_DevInit+0x2c4>)
 8006776:	4313      	orrs	r3, r2
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800677c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800677e:	2b00      	cmp	r3, #0
 8006780:	d005      	beq.n	800678e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	f043 0208 	orr.w	r2, r3, #8
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800678e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006790:	2b01      	cmp	r3, #1
 8006792:	d107      	bne.n	80067a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800679c:	f043 0304 	orr.w	r3, r3, #4
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3718      	adds	r7, #24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067b0:	b004      	add	sp, #16
 80067b2:	4770      	bx	lr
 80067b4:	803c3800 	.word	0x803c3800

080067b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	019b      	lsls	r3, r3, #6
 80067ca:	f043 0220 	orr.w	r2, r3, #32
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3301      	adds	r3, #1
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4a09      	ldr	r2, [pc, #36]	; (8006800 <USB_FlushTxFifo+0x48>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d901      	bls.n	80067e4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e006      	b.n	80067f2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	f003 0320 	and.w	r3, r3, #32
 80067ec:	2b20      	cmp	r3, #32
 80067ee:	d0f0      	beq.n	80067d2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	00030d40 	.word	0x00030d40

08006804 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800680c:	2300      	movs	r3, #0
 800680e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2210      	movs	r2, #16
 8006814:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	3301      	adds	r3, #1
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	4a09      	ldr	r2, [pc, #36]	; (8006844 <USB_FlushRxFifo+0x40>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d901      	bls.n	8006828 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e006      	b.n	8006836 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	f003 0310 	and.w	r3, r3, #16
 8006830:	2b10      	cmp	r3, #16
 8006832:	d0f0      	beq.n	8006816 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	00030d40 	.word	0x00030d40

08006848 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	78fb      	ldrb	r3, [r7, #3]
 8006862:	68f9      	ldr	r1, [r7, #12]
 8006864:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006868:	4313      	orrs	r3, r2
 800686a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800687a:	b480      	push	{r7}
 800687c:	b087      	sub	sp, #28
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 0306 	and.w	r3, r3, #6
 8006892:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d102      	bne.n	80068a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800689a:	2300      	movs	r3, #0
 800689c:	75fb      	strb	r3, [r7, #23]
 800689e:	e00a      	b.n	80068b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d002      	beq.n	80068ac <USB_GetDevSpeed+0x32>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b06      	cmp	r3, #6
 80068aa:	d102      	bne.n	80068b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80068ac:	2302      	movs	r3, #2
 80068ae:	75fb      	strb	r3, [r7, #23]
 80068b0:	e001      	b.n	80068b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80068b2:	230f      	movs	r3, #15
 80068b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80068b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	371c      	adds	r7, #28
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	785b      	ldrb	r3, [r3, #1]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d13a      	bne.n	8006956 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e6:	69da      	ldr	r2, [r3, #28]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	f003 030f 	and.w	r3, r3, #15
 80068f0:	2101      	movs	r1, #1
 80068f2:	fa01 f303 	lsl.w	r3, r1, r3
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	68f9      	ldr	r1, [r7, #12]
 80068fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068fe:	4313      	orrs	r3, r2
 8006900:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4413      	add	r3, r2
 800690a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d155      	bne.n	80069c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	4413      	add	r3, r2
 8006920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	78db      	ldrb	r3, [r3, #3]
 8006932:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006934:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	059b      	lsls	r3, r3, #22
 800693a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800693c:	4313      	orrs	r3, r2
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	0151      	lsls	r1, r2, #5
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	440a      	add	r2, r1
 8006946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800694a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800694e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006952:	6013      	str	r3, [r2, #0]
 8006954:	e036      	b.n	80069c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800695c:	69da      	ldr	r2, [r3, #28]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	f003 030f 	and.w	r3, r3, #15
 8006966:	2101      	movs	r1, #1
 8006968:	fa01 f303 	lsl.w	r3, r1, r3
 800696c:	041b      	lsls	r3, r3, #16
 800696e:	68f9      	ldr	r1, [r7, #12]
 8006970:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006974:	4313      	orrs	r3, r2
 8006976:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d11a      	bne.n	80069c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	4413      	add	r3, r2
 8006996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	78db      	ldrb	r3, [r3, #3]
 80069a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069aa:	430b      	orrs	r3, r1
 80069ac:	4313      	orrs	r3, r2
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	0151      	lsls	r1, r2, #5
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	440a      	add	r2, r1
 80069b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
	...

080069d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	785b      	ldrb	r3, [r3, #1]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d161      	bne.n	8006ab4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a06:	d11f      	bne.n	8006a48 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	0151      	lsls	r1, r2, #5
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	440a      	add	r2, r1
 8006a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a26:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	0151      	lsls	r1, r2, #5
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	440a      	add	r2, r1
 8006a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	f003 030f 	and.w	r3, r3, #15
 8006a58:	2101      	movs	r1, #1
 8006a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	43db      	mvns	r3, r3
 8006a62:	68f9      	ldr	r1, [r7, #12]
 8006a64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a68:	4013      	ands	r3, r2
 8006a6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a72:	69da      	ldr	r2, [r3, #28]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	f003 030f 	and.w	r3, r3, #15
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	43db      	mvns	r3, r3
 8006a86:	68f9      	ldr	r1, [r7, #12]
 8006a88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	0159      	lsls	r1, r3, #5
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	440b      	add	r3, r1
 8006aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aaa:	4619      	mov	r1, r3
 8006aac:	4b35      	ldr	r3, [pc, #212]	; (8006b84 <USB_DeactivateEndpoint+0x1b0>)
 8006aae:	4013      	ands	r3, r2
 8006ab0:	600b      	str	r3, [r1, #0]
 8006ab2:	e060      	b.n	8006b76 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006aca:	d11f      	bne.n	8006b0c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	0151      	lsls	r1, r2, #5
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	440a      	add	r2, r1
 8006ae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ae6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006aea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	0151      	lsls	r1, r2, #5
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	440a      	add	r2, r1
 8006b02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	f003 030f 	and.w	r3, r3, #15
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b22:	041b      	lsls	r3, r3, #16
 8006b24:	43db      	mvns	r3, r3
 8006b26:	68f9      	ldr	r1, [r7, #12]
 8006b28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b36:	69da      	ldr	r2, [r3, #28]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	f003 030f 	and.w	r3, r3, #15
 8006b40:	2101      	movs	r1, #1
 8006b42:	fa01 f303 	lsl.w	r3, r1, r3
 8006b46:	041b      	lsls	r3, r3, #16
 8006b48:	43db      	mvns	r3, r3
 8006b4a:	68f9      	ldr	r1, [r7, #12]
 8006b4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b50:	4013      	ands	r3, r2
 8006b52:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	015a      	lsls	r2, r3, #5
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	0159      	lsls	r1, r3, #5
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	440b      	add	r3, r1
 8006b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b6e:	4619      	mov	r1, r3
 8006b70:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <USB_DeactivateEndpoint+0x1b4>)
 8006b72:	4013      	ands	r3, r2
 8006b74:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	ec337800 	.word	0xec337800
 8006b88:	eff37800 	.word	0xeff37800

08006b8c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b08a      	sub	sp, #40	; 0x28
 8006b90:	af02      	add	r7, sp, #8
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	4613      	mov	r3, r2
 8006b98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	785b      	ldrb	r3, [r3, #1]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	f040 815c 	bne.w	8006e66 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d132      	bne.n	8006c1c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	015a      	lsls	r2, r3, #5
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	0151      	lsls	r1, r2, #5
 8006bc8:	69fa      	ldr	r2, [r7, #28]
 8006bca:	440a      	add	r2, r1
 8006bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	0151      	lsls	r1, r2, #5
 8006bec:	69fa      	ldr	r2, [r7, #28]
 8006bee:	440a      	add	r2, r1
 8006bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bf4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bf8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	0151      	lsls	r1, r2, #5
 8006c0c:	69fa      	ldr	r2, [r7, #28]
 8006c0e:	440a      	add	r2, r1
 8006c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c14:	0cdb      	lsrs	r3, r3, #19
 8006c16:	04db      	lsls	r3, r3, #19
 8006c18:	6113      	str	r3, [r2, #16]
 8006c1a:	e074      	b.n	8006d06 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	69ba      	ldr	r2, [r7, #24]
 8006c2c:	0151      	lsls	r1, r2, #5
 8006c2e:	69fa      	ldr	r2, [r7, #28]
 8006c30:	440a      	add	r2, r1
 8006c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c36:	0cdb      	lsrs	r3, r3, #19
 8006c38:	04db      	lsls	r3, r3, #19
 8006c3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	69ba      	ldr	r2, [r7, #24]
 8006c4c:	0151      	lsls	r1, r2, #5
 8006c4e:	69fa      	ldr	r2, [r7, #28]
 8006c50:	440a      	add	r2, r1
 8006c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6c:	691a      	ldr	r2, [r3, #16]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	6959      	ldr	r1, [r3, #20]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	440b      	add	r3, r1
 8006c78:	1e59      	subs	r1, r3, #1
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c82:	04d9      	lsls	r1, r3, #19
 8006c84:	4b9d      	ldr	r3, [pc, #628]	; (8006efc <USB_EPStartXfer+0x370>)
 8006c86:	400b      	ands	r3, r1
 8006c88:	69b9      	ldr	r1, [r7, #24]
 8006c8a:	0148      	lsls	r0, r1, #5
 8006c8c:	69f9      	ldr	r1, [r7, #28]
 8006c8e:	4401      	add	r1, r0
 8006c90:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c94:	4313      	orrs	r3, r2
 8006c96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca4:	691a      	ldr	r2, [r3, #16]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cae:	69b9      	ldr	r1, [r7, #24]
 8006cb0:	0148      	lsls	r0, r1, #5
 8006cb2:	69f9      	ldr	r1, [r7, #28]
 8006cb4:	4401      	add	r1, r0
 8006cb6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	78db      	ldrb	r3, [r3, #3]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d11f      	bne.n	8006d06 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	0151      	lsls	r1, r2, #5
 8006cd8:	69fa      	ldr	r2, [r7, #28]
 8006cda:	440a      	add	r2, r1
 8006cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ce0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006ce4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	0151      	lsls	r1, r2, #5
 8006cf8:	69fa      	ldr	r2, [r7, #28]
 8006cfa:	440a      	add	r2, r1
 8006cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d04:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006d06:	79fb      	ldrb	r3, [r7, #7]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d14b      	bne.n	8006da4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d009      	beq.n	8006d28 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d20:	461a      	mov	r2, r3
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	78db      	ldrb	r3, [r3, #3]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d128      	bne.n	8006d82 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d110      	bne.n	8006d62 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	69ba      	ldr	r2, [r7, #24]
 8006d50:	0151      	lsls	r1, r2, #5
 8006d52:	69fa      	ldr	r2, [r7, #28]
 8006d54:	440a      	add	r2, r1
 8006d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d5e:	6013      	str	r3, [r2, #0]
 8006d60:	e00f      	b.n	8006d82 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	0151      	lsls	r1, r2, #5
 8006d74:	69fa      	ldr	r2, [r7, #28]
 8006d76:	440a      	add	r2, r1
 8006d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d80:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	015a      	lsls	r2, r3, #5
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	4413      	add	r3, r2
 8006d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	0151      	lsls	r1, r2, #5
 8006d94:	69fa      	ldr	r2, [r7, #28]
 8006d96:	440a      	add	r2, r1
 8006d98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006da0:	6013      	str	r3, [r2, #0]
 8006da2:	e12f      	b.n	8007004 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	69ba      	ldr	r2, [r7, #24]
 8006db4:	0151      	lsls	r1, r2, #5
 8006db6:	69fa      	ldr	r2, [r7, #28]
 8006db8:	440a      	add	r2, r1
 8006dba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dc2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	78db      	ldrb	r3, [r3, #3]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d015      	beq.n	8006df8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 8117 	beq.w	8007004 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ddc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	f003 030f 	and.w	r3, r3, #15
 8006de6:	2101      	movs	r1, #1
 8006de8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dec:	69f9      	ldr	r1, [r7, #28]
 8006dee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006df2:	4313      	orrs	r3, r2
 8006df4:	634b      	str	r3, [r1, #52]	; 0x34
 8006df6:	e105      	b.n	8007004 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d110      	bne.n	8006e2a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	0151      	lsls	r1, r2, #5
 8006e1a:	69fa      	ldr	r2, [r7, #28]
 8006e1c:	440a      	add	r2, r1
 8006e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e26:	6013      	str	r3, [r2, #0]
 8006e28:	e00f      	b.n	8006e4a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	0151      	lsls	r1, r2, #5
 8006e3c:	69fa      	ldr	r2, [r7, #28]
 8006e3e:	440a      	add	r2, r1
 8006e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e48:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	68d9      	ldr	r1, [r3, #12]
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	781a      	ldrb	r2, [r3, #0]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	b298      	uxth	r0, r3
 8006e58:	79fb      	ldrb	r3, [r7, #7]
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f000 fa2b 	bl	80072ba <USB_WritePacket>
 8006e64:	e0ce      	b.n	8007004 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	0151      	lsls	r1, r2, #5
 8006e78:	69fa      	ldr	r2, [r7, #28]
 8006e7a:	440a      	add	r2, r1
 8006e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e80:	0cdb      	lsrs	r3, r3, #19
 8006e82:	04db      	lsls	r3, r3, #19
 8006e84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	0151      	lsls	r1, r2, #5
 8006e98:	69fa      	ldr	r2, [r7, #28]
 8006e9a:	440a      	add	r2, r1
 8006e9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ea0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ea4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ea8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d126      	bne.n	8006f00 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ebe:	691a      	ldr	r2, [r3, #16]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ec8:	69b9      	ldr	r1, [r7, #24]
 8006eca:	0148      	lsls	r0, r1, #5
 8006ecc:	69f9      	ldr	r1, [r7, #28]
 8006ece:	4401      	add	r1, r0
 8006ed0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	015a      	lsls	r2, r3, #5
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	0151      	lsls	r1, r2, #5
 8006eea:	69fa      	ldr	r2, [r7, #28]
 8006eec:	440a      	add	r2, r1
 8006eee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ef2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ef6:	6113      	str	r3, [r2, #16]
 8006ef8:	e036      	b.n	8006f68 <USB_EPStartXfer+0x3dc>
 8006efa:	bf00      	nop
 8006efc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	695a      	ldr	r2, [r3, #20]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	4413      	add	r3, r2
 8006f0a:	1e5a      	subs	r2, r3, #1
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f14:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	8afb      	ldrh	r3, [r7, #22]
 8006f26:	04d9      	lsls	r1, r3, #19
 8006f28:	4b39      	ldr	r3, [pc, #228]	; (8007010 <USB_EPStartXfer+0x484>)
 8006f2a:	400b      	ands	r3, r1
 8006f2c:	69b9      	ldr	r1, [r7, #24]
 8006f2e:	0148      	lsls	r0, r1, #5
 8006f30:	69f9      	ldr	r1, [r7, #28]
 8006f32:	4401      	add	r1, r0
 8006f34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f48:	691a      	ldr	r2, [r3, #16]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	8af9      	ldrh	r1, [r7, #22]
 8006f50:	fb01 f303 	mul.w	r3, r1, r3
 8006f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f58:	69b9      	ldr	r1, [r7, #24]
 8006f5a:	0148      	lsls	r0, r1, #5
 8006f5c:	69f9      	ldr	r1, [r7, #28]
 8006f5e:	4401      	add	r1, r0
 8006f60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f64:	4313      	orrs	r3, r2
 8006f66:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006f68:	79fb      	ldrb	r3, [r7, #7]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d10d      	bne.n	8006f8a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d009      	beq.n	8006f8a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	68d9      	ldr	r1, [r3, #12]
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f86:	460a      	mov	r2, r1
 8006f88:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	78db      	ldrb	r3, [r3, #3]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d128      	bne.n	8006fe4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d110      	bne.n	8006fc4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	69ba      	ldr	r2, [r7, #24]
 8006fb2:	0151      	lsls	r1, r2, #5
 8006fb4:	69fa      	ldr	r2, [r7, #28]
 8006fb6:	440a      	add	r2, r1
 8006fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fc0:	6013      	str	r3, [r2, #0]
 8006fc2:	e00f      	b.n	8006fe4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	69ba      	ldr	r2, [r7, #24]
 8006fd4:	0151      	lsls	r1, r2, #5
 8006fd6:	69fa      	ldr	r2, [r7, #28]
 8006fd8:	440a      	add	r2, r1
 8006fda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	69ba      	ldr	r2, [r7, #24]
 8006ff4:	0151      	lsls	r1, r2, #5
 8006ff6:	69fa      	ldr	r2, [r7, #28]
 8006ff8:	440a      	add	r2, r1
 8006ffa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ffe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007002:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3720      	adds	r7, #32
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	1ff80000 	.word	0x1ff80000

08007014 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007014:	b480      	push	{r7}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	4613      	mov	r3, r2
 8007020:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	785b      	ldrb	r3, [r3, #1]
 8007030:	2b01      	cmp	r3, #1
 8007032:	f040 80cd 	bne.w	80071d0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d132      	bne.n	80070a4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	4413      	add	r3, r2
 8007046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	0151      	lsls	r1, r2, #5
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	440a      	add	r2, r1
 8007054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007058:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800705c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007060:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	4413      	add	r3, r2
 800706a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	0151      	lsls	r1, r2, #5
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	440a      	add	r2, r1
 8007078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800707c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007080:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	4413      	add	r3, r2
 800708a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	0151      	lsls	r1, r2, #5
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	440a      	add	r2, r1
 8007098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800709c:	0cdb      	lsrs	r3, r3, #19
 800709e:	04db      	lsls	r3, r3, #19
 80070a0:	6113      	str	r3, [r2, #16]
 80070a2:	e04e      	b.n	8007142 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	0151      	lsls	r1, r2, #5
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	440a      	add	r2, r1
 80070ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070be:	0cdb      	lsrs	r3, r3, #19
 80070c0:	04db      	lsls	r3, r3, #19
 80070c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	0151      	lsls	r1, r2, #5
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	440a      	add	r2, r1
 80070da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070e6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	695a      	ldr	r2, [r3, #20]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d903      	bls.n	80070fc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	4413      	add	r3, r2
 8007104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	0151      	lsls	r1, r2, #5
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	440a      	add	r2, r1
 8007112:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007116:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800711a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	4413      	add	r3, r2
 8007124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007128:	691a      	ldr	r2, [r3, #16]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007132:	6939      	ldr	r1, [r7, #16]
 8007134:	0148      	lsls	r0, r1, #5
 8007136:	6979      	ldr	r1, [r7, #20]
 8007138:	4401      	add	r1, r0
 800713a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800713e:	4313      	orrs	r3, r2
 8007140:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007142:	79fb      	ldrb	r3, [r7, #7]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d11e      	bne.n	8007186 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d009      	beq.n	8007164 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	4413      	add	r3, r2
 8007158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800715c:	461a      	mov	r2, r3
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	0151      	lsls	r1, r2, #5
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	440a      	add	r2, r1
 800717a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800717e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007182:	6013      	str	r3, [r2, #0]
 8007184:	e092      	b.n	80072ac <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	4413      	add	r3, r2
 800718e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	0151      	lsls	r1, r2, #5
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	440a      	add	r2, r1
 800719c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071a4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d07e      	beq.n	80072ac <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	2101      	movs	r1, #1
 80071c0:	fa01 f303 	lsl.w	r3, r1, r3
 80071c4:	6979      	ldr	r1, [r7, #20]
 80071c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071ca:	4313      	orrs	r3, r2
 80071cc:	634b      	str	r3, [r1, #52]	; 0x34
 80071ce:	e06d      	b.n	80072ac <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	0151      	lsls	r1, r2, #5
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	440a      	add	r2, r1
 80071e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071ea:	0cdb      	lsrs	r3, r3, #19
 80071ec:	04db      	lsls	r3, r3, #19
 80071ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	015a      	lsls	r2, r3, #5
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	4413      	add	r3, r2
 80071f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	0151      	lsls	r1, r2, #5
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	440a      	add	r2, r1
 8007206:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800720a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800720e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007212:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	4413      	add	r3, r2
 800722c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	0151      	lsls	r1, r2, #5
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	440a      	add	r2, r1
 800723a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800723e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007242:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007250:	691a      	ldr	r2, [r3, #16]
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800725a:	6939      	ldr	r1, [r7, #16]
 800725c:	0148      	lsls	r0, r1, #5
 800725e:	6979      	ldr	r1, [r7, #20]
 8007260:	4401      	add	r1, r0
 8007262:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007266:	4313      	orrs	r3, r2
 8007268:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800726a:	79fb      	ldrb	r3, [r7, #7]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d10d      	bne.n	800728c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d009      	beq.n	800728c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	68d9      	ldr	r1, [r3, #12]
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007288:	460a      	mov	r2, r1
 800728a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	4413      	add	r3, r2
 8007294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	0151      	lsls	r1, r2, #5
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	440a      	add	r2, r1
 80072a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	371c      	adds	r7, #28
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b089      	sub	sp, #36	; 0x24
 80072be:	af00      	add	r7, sp, #0
 80072c0:	60f8      	str	r0, [r7, #12]
 80072c2:	60b9      	str	r1, [r7, #8]
 80072c4:	4611      	mov	r1, r2
 80072c6:	461a      	mov	r2, r3
 80072c8:	460b      	mov	r3, r1
 80072ca:	71fb      	strb	r3, [r7, #7]
 80072cc:	4613      	mov	r3, r2
 80072ce:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80072d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d11a      	bne.n	8007316 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80072e0:	88bb      	ldrh	r3, [r7, #4]
 80072e2:	3303      	adds	r3, #3
 80072e4:	089b      	lsrs	r3, r3, #2
 80072e6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80072e8:	2300      	movs	r3, #0
 80072ea:	61bb      	str	r3, [r7, #24]
 80072ec:	e00f      	b.n	800730e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80072ee:	79fb      	ldrb	r3, [r7, #7]
 80072f0:	031a      	lsls	r2, r3, #12
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072fa:	461a      	mov	r2, r3
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	3304      	adds	r3, #4
 8007306:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	3301      	adds	r3, #1
 800730c:	61bb      	str	r3, [r7, #24]
 800730e:	69ba      	ldr	r2, [r7, #24]
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	429a      	cmp	r2, r3
 8007314:	d3eb      	bcc.n	80072ee <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3724      	adds	r7, #36	; 0x24
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007324:	b480      	push	{r7}
 8007326:	b089      	sub	sp, #36	; 0x24
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	4613      	mov	r3, r2
 8007330:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800733a:	88fb      	ldrh	r3, [r7, #6]
 800733c:	3303      	adds	r3, #3
 800733e:	089b      	lsrs	r3, r3, #2
 8007340:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007342:	2300      	movs	r3, #0
 8007344:	61bb      	str	r3, [r7, #24]
 8007346:	e00b      	b.n	8007360 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	601a      	str	r2, [r3, #0]
    pDest++;
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	3304      	adds	r3, #4
 8007358:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	3301      	adds	r3, #1
 800735e:	61bb      	str	r3, [r7, #24]
 8007360:	69ba      	ldr	r2, [r7, #24]
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	429a      	cmp	r2, r3
 8007366:	d3ef      	bcc.n	8007348 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007368:	69fb      	ldr	r3, [r7, #28]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3724      	adds	r7, #36	; 0x24
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007376:	b480      	push	{r7}
 8007378:	b085      	sub	sp, #20
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
 800737e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	785b      	ldrb	r3, [r3, #1]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d12c      	bne.n	80073ec <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	015a      	lsls	r2, r3, #5
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	4413      	add	r3, r2
 800739a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	db12      	blt.n	80073ca <USB_EPSetStall+0x54>
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00f      	beq.n	80073ca <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	0151      	lsls	r1, r2, #5
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	440a      	add	r2, r1
 80073c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80073c8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	015a      	lsls	r2, r3, #5
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	4413      	add	r3, r2
 80073d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	0151      	lsls	r1, r2, #5
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	440a      	add	r2, r1
 80073e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073e8:	6013      	str	r3, [r2, #0]
 80073ea:	e02b      	b.n	8007444 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	015a      	lsls	r2, r3, #5
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4413      	add	r3, r2
 80073f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	db12      	blt.n	8007424 <USB_EPSetStall+0xae>
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00f      	beq.n	8007424 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	015a      	lsls	r2, r3, #5
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	4413      	add	r3, r2
 800740c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	0151      	lsls	r1, r2, #5
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	440a      	add	r2, r1
 800741a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800741e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007422:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	0151      	lsls	r1, r2, #5
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	440a      	add	r2, r1
 800743a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800743e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007442:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007452:	b480      	push	{r7}
 8007454:	b085      	sub	sp, #20
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	785b      	ldrb	r3, [r3, #1]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d128      	bne.n	80074c0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	015a      	lsls	r2, r3, #5
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	4413      	add	r3, r2
 8007476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	0151      	lsls	r1, r2, #5
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	440a      	add	r2, r1
 8007484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007488:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800748c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	78db      	ldrb	r3, [r3, #3]
 8007492:	2b03      	cmp	r3, #3
 8007494:	d003      	beq.n	800749e <USB_EPClearStall+0x4c>
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	78db      	ldrb	r3, [r3, #3]
 800749a:	2b02      	cmp	r3, #2
 800749c:	d138      	bne.n	8007510 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	015a      	lsls	r2, r3, #5
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	4413      	add	r3, r2
 80074a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	0151      	lsls	r1, r2, #5
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	440a      	add	r2, r1
 80074b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074bc:	6013      	str	r3, [r2, #0]
 80074be:	e027      	b.n	8007510 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	015a      	lsls	r2, r3, #5
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	0151      	lsls	r1, r2, #5
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	440a      	add	r2, r1
 80074d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80074de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	78db      	ldrb	r3, [r3, #3]
 80074e4:	2b03      	cmp	r3, #3
 80074e6:	d003      	beq.n	80074f0 <USB_EPClearStall+0x9e>
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	78db      	ldrb	r3, [r3, #3]
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d10f      	bne.n	8007510 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	0151      	lsls	r1, r2, #5
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	440a      	add	r2, r1
 8007506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800750a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800750e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800751e:	b480      	push	{r7}
 8007520:	b085      	sub	sp, #20
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	460b      	mov	r3, r1
 8007528:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800753c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007540:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	78fb      	ldrb	r3, [r7, #3]
 800754c:	011b      	lsls	r3, r3, #4
 800754e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007552:	68f9      	ldr	r1, [r7, #12]
 8007554:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007558:	4313      	orrs	r3, r2
 800755a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800756a:	b480      	push	{r7}
 800756c:	b085      	sub	sp, #20
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007584:	f023 0303 	bic.w	r3, r3, #3
 8007588:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007598:	f023 0302 	bic.w	r3, r3, #2
 800759c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3714      	adds	r7, #20
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075c6:	f023 0303 	bic.w	r3, r3, #3
 80075ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075da:	f043 0302 	orr.w	r3, r3, #2
 80075de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b085      	sub	sp, #20
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	4013      	ands	r3, r2
 8007604:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007606:	68fb      	ldr	r3, [r7, #12]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3714      	adds	r7, #20
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	4013      	ands	r3, r2
 8007636:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	0c1b      	lsrs	r3, r3, #16
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007664:	69db      	ldr	r3, [r3, #28]
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	4013      	ands	r3, r2
 800766a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	b29b      	uxth	r3, r3
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	460b      	mov	r3, r1
 8007686:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800768c:	78fb      	ldrb	r3, [r7, #3]
 800768e:	015a      	lsls	r2, r3, #5
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	4413      	add	r3, r2
 8007694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	4013      	ands	r3, r2
 80076a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80076aa:	68bb      	ldr	r3, [r7, #8]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b087      	sub	sp, #28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	460b      	mov	r3, r1
 80076c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076da:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	f003 030f 	and.w	r3, r3, #15
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	fa22 f303 	lsr.w	r3, r2, r3
 80076e8:	01db      	lsls	r3, r3, #7
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80076f2:	78fb      	ldrb	r3, [r7, #3]
 80076f4:	015a      	lsls	r2, r3, #5
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	4413      	add	r3, r2
 80076fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	4013      	ands	r3, r2
 8007704:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007706:	68bb      	ldr	r3, [r7, #8]
}
 8007708:	4618      	mov	r0, r3
 800770a:	371c      	adds	r7, #28
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	f003 0301 	and.w	r3, r3, #1
}
 8007724:	4618      	mov	r0, r3
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800774a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800774e:	f023 0307 	bic.w	r3, r3, #7
 8007752:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007766:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
	...

08007778 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007778:	b480      	push	{r7}
 800777a:	b087      	sub	sp, #28
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	460b      	mov	r3, r1
 8007782:	607a      	str	r2, [r7, #4]
 8007784:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	333c      	adds	r3, #60	; 0x3c
 800778e:	3304      	adds	r3, #4
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	4a26      	ldr	r2, [pc, #152]	; (8007830 <USB_EP0_OutStart+0xb8>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d90a      	bls.n	80077b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077ac:	d101      	bne.n	80077b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	e037      	b.n	8007822 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b8:	461a      	mov	r2, r3
 80077ba:	2300      	movs	r3, #0
 80077bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077e0:	f043 0318 	orr.w	r3, r3, #24
 80077e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80077f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80077fa:	7afb      	ldrb	r3, [r7, #11]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d10f      	bne.n	8007820 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007806:	461a      	mov	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800781a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800781e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	371c      	adds	r7, #28
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	4f54300a 	.word	0x4f54300a

08007834 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800783c:	2300      	movs	r3, #0
 800783e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	3301      	adds	r3, #1
 8007844:	60fb      	str	r3, [r7, #12]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	4a13      	ldr	r2, [pc, #76]	; (8007898 <USB_CoreReset+0x64>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d901      	bls.n	8007852 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	e01b      	b.n	800788a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	daf2      	bge.n	8007840 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800785a:	2300      	movs	r3, #0
 800785c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f043 0201 	orr.w	r2, r3, #1
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	3301      	adds	r3, #1
 800786e:	60fb      	str	r3, [r7, #12]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4a09      	ldr	r2, [pc, #36]	; (8007898 <USB_CoreReset+0x64>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d901      	bls.n	800787c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e006      	b.n	800788a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	2b01      	cmp	r3, #1
 8007886:	d0f0      	beq.n	800786a <USB_CoreReset+0x36>

  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3714      	adds	r7, #20
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	00030d40 	.word	0x00030d40

0800789c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80078a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80078ac:	f002 f936 	bl	8009b1c <malloc>
 80078b0:	4603      	mov	r3, r0
 80078b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d105      	bne.n	80078c6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80078c2:	2302      	movs	r3, #2
 80078c4:	e066      	b.n	8007994 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	7c1b      	ldrb	r3, [r3, #16]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d119      	bne.n	800790a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80078d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078da:	2202      	movs	r2, #2
 80078dc:	2181      	movs	r1, #129	; 0x81
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f001 ffa3 	bl	800982a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80078ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078ee:	2202      	movs	r2, #2
 80078f0:	2101      	movs	r1, #1
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f001 ff99 	bl	800982a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2210      	movs	r2, #16
 8007904:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007908:	e016      	b.n	8007938 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800790a:	2340      	movs	r3, #64	; 0x40
 800790c:	2202      	movs	r2, #2
 800790e:	2181      	movs	r1, #129	; 0x81
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f001 ff8a 	bl	800982a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800791c:	2340      	movs	r3, #64	; 0x40
 800791e:	2202      	movs	r2, #2
 8007920:	2101      	movs	r1, #1
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f001 ff81 	bl	800982a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2210      	movs	r2, #16
 8007934:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007938:	2308      	movs	r3, #8
 800793a:	2203      	movs	r2, #3
 800793c:	2182      	movs	r1, #130	; 0x82
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f001 ff73 	bl	800982a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	7c1b      	ldrb	r3, [r3, #16]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d109      	bne.n	8007982 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007974:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007978:	2101      	movs	r1, #1
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f002 f844 	bl	8009a08 <USBD_LL_PrepareReceive>
 8007980:	e007      	b.n	8007992 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007988:	2340      	movs	r3, #64	; 0x40
 800798a:	2101      	movs	r1, #1
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f002 f83b 	bl	8009a08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	460b      	mov	r3, r1
 80079a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80079a8:	2300      	movs	r3, #0
 80079aa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80079ac:	2181      	movs	r1, #129	; 0x81
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f001 ff61 	bl	8009876 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80079ba:	2101      	movs	r1, #1
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f001 ff5a 	bl	8009876 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80079ca:	2182      	movs	r1, #130	; 0x82
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f001 ff52 	bl	8009876 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00e      	beq.n	8007a0a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079fc:	4618      	mov	r0, r3
 80079fe:	f002 f895 	bl	8009b2c <free>
    pdev->pClassData = NULL;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a24:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d03a      	beq.n	8007ab4 <USBD_CDC_Setup+0xa0>
 8007a3e:	2b20      	cmp	r3, #32
 8007a40:	f040 8097 	bne.w	8007b72 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	88db      	ldrh	r3, [r3, #6]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d029      	beq.n	8007aa0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	b25b      	sxtb	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	da11      	bge.n	8007a7a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007a62:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	88d2      	ldrh	r2, [r2, #6]
 8007a68:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007a6a:	6939      	ldr	r1, [r7, #16]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	88db      	ldrh	r3, [r3, #6]
 8007a70:	461a      	mov	r2, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f001 fa9d 	bl	8008fb2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007a78:	e082      	b.n	8007b80 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	785a      	ldrb	r2, [r3, #1]
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	88db      	ldrh	r3, [r3, #6]
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007a90:	6939      	ldr	r1, [r7, #16]
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	88db      	ldrh	r3, [r3, #6]
 8007a96:	461a      	mov	r2, r3
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 fab6 	bl	800900a <USBD_CtlPrepareRx>
    break;
 8007a9e:	e06f      	b.n	8007b80 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	683a      	ldr	r2, [r7, #0]
 8007aaa:	7850      	ldrb	r0, [r2, #1]
 8007aac:	2200      	movs	r2, #0
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	4798      	blx	r3
    break;
 8007ab2:	e065      	b.n	8007b80 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	785b      	ldrb	r3, [r3, #1]
 8007ab8:	2b0b      	cmp	r3, #11
 8007aba:	d84f      	bhi.n	8007b5c <USBD_CDC_Setup+0x148>
 8007abc:	a201      	add	r2, pc, #4	; (adr r2, 8007ac4 <USBD_CDC_Setup+0xb0>)
 8007abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac2:	bf00      	nop
 8007ac4:	08007af5 	.word	0x08007af5
 8007ac8:	08007b6b 	.word	0x08007b6b
 8007acc:	08007b5d 	.word	0x08007b5d
 8007ad0:	08007b5d 	.word	0x08007b5d
 8007ad4:	08007b5d 	.word	0x08007b5d
 8007ad8:	08007b5d 	.word	0x08007b5d
 8007adc:	08007b5d 	.word	0x08007b5d
 8007ae0:	08007b5d 	.word	0x08007b5d
 8007ae4:	08007b5d 	.word	0x08007b5d
 8007ae8:	08007b5d 	.word	0x08007b5d
 8007aec:	08007b1d 	.word	0x08007b1d
 8007af0:	08007b45 	.word	0x08007b45
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007afa:	2b03      	cmp	r3, #3
 8007afc:	d107      	bne.n	8007b0e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007afe:	f107 030c 	add.w	r3, r7, #12
 8007b02:	2202      	movs	r2, #2
 8007b04:	4619      	mov	r1, r3
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f001 fa53 	bl	8008fb2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007b0c:	e030      	b.n	8007b70 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007b0e:	6839      	ldr	r1, [r7, #0]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f001 f9dd 	bl	8008ed0 <USBD_CtlError>
        ret = USBD_FAIL;
 8007b16:	2303      	movs	r3, #3
 8007b18:	75fb      	strb	r3, [r7, #23]
      break;
 8007b1a:	e029      	b.n	8007b70 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b22:	2b03      	cmp	r3, #3
 8007b24:	d107      	bne.n	8007b36 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b26:	f107 030f 	add.w	r3, r7, #15
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f001 fa3f 	bl	8008fb2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007b34:	e01c      	b.n	8007b70 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f001 f9c9 	bl	8008ed0 <USBD_CtlError>
        ret = USBD_FAIL;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	75fb      	strb	r3, [r7, #23]
      break;
 8007b42:	e015      	b.n	8007b70 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d00f      	beq.n	8007b6e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f001 f9bd 	bl	8008ed0 <USBD_CtlError>
        ret = USBD_FAIL;
 8007b56:	2303      	movs	r3, #3
 8007b58:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007b5a:	e008      	b.n	8007b6e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f001 f9b6 	bl	8008ed0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007b64:	2303      	movs	r3, #3
 8007b66:	75fb      	strb	r3, [r7, #23]
      break;
 8007b68:	e002      	b.n	8007b70 <USBD_CDC_Setup+0x15c>
      break;
 8007b6a:	bf00      	nop
 8007b6c:	e008      	b.n	8007b80 <USBD_CDC_Setup+0x16c>
      break;
 8007b6e:	bf00      	nop
    }
    break;
 8007b70:	e006      	b.n	8007b80 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f001 f9ab 	bl	8008ed0 <USBD_CtlError>
    ret = USBD_FAIL;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	75fb      	strb	r3, [r7, #23]
    break;
 8007b7e:	bf00      	nop
  }

  return (uint8_t)ret;
 8007b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3718      	adds	r7, #24
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop

08007b8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	460b      	mov	r3, r1
 8007b96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e049      	b.n	8007c42 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bb4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007bb6:	78fa      	ldrb	r2, [r7, #3]
 8007bb8:	6879      	ldr	r1, [r7, #4]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	440b      	add	r3, r1
 8007bc4:	3318      	adds	r3, #24
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d029      	beq.n	8007c20 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007bcc:	78fa      	ldrb	r2, [r7, #3]
 8007bce:	6879      	ldr	r1, [r7, #4]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	440b      	add	r3, r1
 8007bda:	3318      	adds	r3, #24
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	78f9      	ldrb	r1, [r7, #3]
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	460b      	mov	r3, r1
 8007be4:	00db      	lsls	r3, r3, #3
 8007be6:	1a5b      	subs	r3, r3, r1
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	4403      	add	r3, r0
 8007bec:	3344      	adds	r3, #68	; 0x44
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	fbb2 f1f3 	udiv	r1, r2, r3
 8007bf4:	fb03 f301 	mul.w	r3, r3, r1
 8007bf8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d110      	bne.n	8007c20 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007bfe:	78fa      	ldrb	r2, [r7, #3]
 8007c00:	6879      	ldr	r1, [r7, #4]
 8007c02:	4613      	mov	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4413      	add	r3, r2
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	440b      	add	r3, r1
 8007c0c:	3318      	adds	r3, #24
 8007c0e:	2200      	movs	r2, #0
 8007c10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c12:	78f9      	ldrb	r1, [r7, #3]
 8007c14:	2300      	movs	r3, #0
 8007c16:	2200      	movs	r2, #0
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f001 fed4 	bl	80099c6 <USBD_LL_Transmit>
 8007c1e:	e00f      	b.n	8007c40 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007c3c:	78fa      	ldrb	r2, [r7, #3]
 8007c3e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	460b      	mov	r3, r1
 8007c54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c5c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e015      	b.n	8007c98 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007c6c:	78fb      	ldrb	r3, [r7, #3]
 8007c6e:	4619      	mov	r1, r3
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f001 feea 	bl	8009a4a <USBD_LL_GetRxDataSize>
 8007c76:	4602      	mov	r2, r0
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007c92:	4611      	mov	r1, r2
 8007c94:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cae:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d015      	beq.n	8007ce6 <USBD_CDC_EP0_RxReady+0x46>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007cc0:	2bff      	cmp	r3, #255	; 0xff
 8007cc2:	d010      	beq.n	8007ce6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007cd2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007cda:	b292      	uxth	r2, r2
 8007cdc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	22ff      	movs	r2, #255	; 0xff
 8007ce2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2243      	movs	r2, #67	; 0x43
 8007cfc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007cfe:	4b03      	ldr	r3, [pc, #12]	; (8007d0c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr
 8007d0c:	20000098 	.word	0x20000098

08007d10 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2243      	movs	r2, #67	; 0x43
 8007d1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007d1e:	4b03      	ldr	r3, [pc, #12]	; (8007d2c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr
 8007d2c:	20000054 	.word	0x20000054

08007d30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2243      	movs	r2, #67	; 0x43
 8007d3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007d3e:	4b03      	ldr	r3, [pc, #12]	; (8007d4c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	200000dc 	.word	0x200000dc

08007d50 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	220a      	movs	r2, #10
 8007d5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007d5e:	4b03      	ldr	r3, [pc, #12]	; (8007d6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr
 8007d6c:	20000010 	.word	0x20000010

08007d70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e004      	b.n	8007d8e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b087      	sub	sp, #28
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	60f8      	str	r0, [r7, #12]
 8007da2:	60b9      	str	r1, [r7, #8]
 8007da4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dac:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	371c      	adds	r7, #28
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ddc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3714      	adds	r7, #20
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e02:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007e04:	2301      	movs	r3, #1
 8007e06:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e01a      	b.n	8007e4c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d114      	bne.n	8007e4a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007e3e:	2181      	movs	r1, #129	; 0x81
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f001 fdc0 	bl	80099c6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d101      	bne.n	8007e72 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e016      	b.n	8007ea0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	7c1b      	ldrb	r3, [r3, #16]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d109      	bne.n	8007e8e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e84:	2101      	movs	r1, #1
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f001 fdbe 	bl	8009a08 <USBD_LL_PrepareReceive>
 8007e8c:	e007      	b.n	8007e9e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e94:	2340      	movs	r3, #64	; 0x40
 8007e96:	2101      	movs	r1, #1
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f001 fdb5 	bl	8009a08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d101      	bne.n	8007ec0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	e025      	b.n	8007f0c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d003      	beq.n	8007ed2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d003      	beq.n	8007ee4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	79fa      	ldrb	r2, [r7, #7]
 8007efe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f001 fc2b 	bl	800975c <USBD_LL_Init>
 8007f06:	4603      	mov	r3, r0
 8007f08:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3718      	adds	r7, #24
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e010      	b.n	8007f4e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3c:	f107 020e 	add.w	r2, r7, #14
 8007f40:	4610      	mov	r0, r2
 8007f42:	4798      	blx	r3
 8007f44:	4602      	mov	r2, r0
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b082      	sub	sp, #8
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f001 fc48 	bl	80097f4 <USBD_LL_Start>
 8007f64:	4603      	mov	r3, r0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b083      	sub	sp, #12
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007f90:	2303      	movs	r3, #3
 8007f92:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d009      	beq.n	8007fb2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	78fa      	ldrb	r2, [r7, #3]
 8007fa8:	4611      	mov	r1, r2
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	4798      	blx	r3
 8007fae:	4603      	mov	r3, r0
 8007fb0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d007      	beq.n	8007fe2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	78fa      	ldrb	r2, [r7, #3]
 8007fdc:	4611      	mov	r1, r2
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	4798      	blx	r3
  }

  return USBD_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ffc:	6839      	ldr	r1, [r7, #0]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 ff2c 	bl	8008e5c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008012:	461a      	mov	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008020:	f003 031f 	and.w	r3, r3, #31
 8008024:	2b01      	cmp	r3, #1
 8008026:	d00e      	beq.n	8008046 <USBD_LL_SetupStage+0x5a>
 8008028:	2b01      	cmp	r3, #1
 800802a:	d302      	bcc.n	8008032 <USBD_LL_SetupStage+0x46>
 800802c:	2b02      	cmp	r3, #2
 800802e:	d014      	beq.n	800805a <USBD_LL_SetupStage+0x6e>
 8008030:	e01d      	b.n	800806e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fa18 	bl	8008470 <USBD_StdDevReq>
 8008040:	4603      	mov	r3, r0
 8008042:	73fb      	strb	r3, [r7, #15]
      break;
 8008044:	e020      	b.n	8008088 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800804c:	4619      	mov	r1, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fa7c 	bl	800854c <USBD_StdItfReq>
 8008054:	4603      	mov	r3, r0
 8008056:	73fb      	strb	r3, [r7, #15]
      break;
 8008058:	e016      	b.n	8008088 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fab8 	bl	80085d8 <USBD_StdEPReq>
 8008068:	4603      	mov	r3, r0
 800806a:	73fb      	strb	r3, [r7, #15]
      break;
 800806c:	e00c      	b.n	8008088 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008074:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008078:	b2db      	uxtb	r3, r3
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f001 fc19 	bl	80098b4 <USBD_LL_StallEP>
 8008082:	4603      	mov	r3, r0
 8008084:	73fb      	strb	r3, [r7, #15]
      break;
 8008086:	bf00      	nop
  }

  return ret;
 8008088:	7bfb      	ldrb	r3, [r7, #15]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b086      	sub	sp, #24
 8008096:	af00      	add	r7, sp, #0
 8008098:	60f8      	str	r0, [r7, #12]
 800809a:	460b      	mov	r3, r1
 800809c:	607a      	str	r2, [r7, #4]
 800809e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80080a0:	7afb      	ldrb	r3, [r7, #11]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d137      	bne.n	8008116 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80080ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080b4:	2b03      	cmp	r3, #3
 80080b6:	d14a      	bne.n	800814e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	689a      	ldr	r2, [r3, #8]
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d913      	bls.n	80080ec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	689a      	ldr	r2, [r3, #8]
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	1ad2      	subs	r2, r2, r3
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	68da      	ldr	r2, [r3, #12]
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	4293      	cmp	r3, r2
 80080dc:	bf28      	it	cs
 80080de:	4613      	movcs	r3, r2
 80080e0:	461a      	mov	r2, r3
 80080e2:	6879      	ldr	r1, [r7, #4]
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 ffad 	bl	8009044 <USBD_CtlContinueRx>
 80080ea:	e030      	b.n	800814e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00a      	beq.n	800810e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80080fe:	2b03      	cmp	r3, #3
 8008100:	d105      	bne.n	800810e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f000 ffa9 	bl	8009066 <USBD_CtlSendStatus>
 8008114:	e01b      	b.n	800814e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d013      	beq.n	800814a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008128:	2b03      	cmp	r3, #3
 800812a:	d10e      	bne.n	800814a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	7afa      	ldrb	r2, [r7, #11]
 8008136:	4611      	mov	r1, r2
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	4798      	blx	r3
 800813c:	4603      	mov	r3, r0
 800813e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008140:	7dfb      	ldrb	r3, [r7, #23]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d003      	beq.n	800814e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008146:	7dfb      	ldrb	r3, [r7, #23]
 8008148:	e002      	b.n	8008150 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800814a:	2303      	movs	r3, #3
 800814c:	e000      	b.n	8008150 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3718      	adds	r7, #24
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	460b      	mov	r3, r1
 8008162:	607a      	str	r2, [r7, #4]
 8008164:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008166:	7afb      	ldrb	r3, [r7, #11]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d16a      	bne.n	8008242 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	3314      	adds	r3, #20
 8008170:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008178:	2b02      	cmp	r3, #2
 800817a:	d155      	bne.n	8008228 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	689a      	ldr	r2, [r3, #8]
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	429a      	cmp	r2, r3
 8008186:	d914      	bls.n	80081b2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	689a      	ldr	r2, [r3, #8]
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	1ad2      	subs	r2, r2, r3
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	461a      	mov	r2, r3
 800819c:	6879      	ldr	r1, [r7, #4]
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 ff22 	bl	8008fe8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081a4:	2300      	movs	r3, #0
 80081a6:	2200      	movs	r2, #0
 80081a8:	2100      	movs	r1, #0
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f001 fc2c 	bl	8009a08 <USBD_LL_PrepareReceive>
 80081b0:	e03a      	b.n	8008228 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	68da      	ldr	r2, [r3, #12]
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d11c      	bne.n	80081f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	685a      	ldr	r2, [r3, #4]
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d316      	bcc.n	80081f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	685a      	ldr	r2, [r3, #4]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d20f      	bcs.n	80081f8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80081d8:	2200      	movs	r2, #0
 80081da:	2100      	movs	r1, #0
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f000 ff03 	bl	8008fe8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081ea:	2300      	movs	r3, #0
 80081ec:	2200      	movs	r2, #0
 80081ee:	2100      	movs	r1, #0
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f001 fc09 	bl	8009a08 <USBD_LL_PrepareReceive>
 80081f6:	e017      	b.n	8008228 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00a      	beq.n	800821a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800820a:	2b03      	cmp	r3, #3
 800820c:	d105      	bne.n	800821a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800821a:	2180      	movs	r1, #128	; 0x80
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f001 fb49 	bl	80098b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f000 ff32 	bl	800908c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800822e:	2b01      	cmp	r3, #1
 8008230:	d123      	bne.n	800827a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f7ff fe9b 	bl	8007f6e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008240:	e01b      	b.n	800827a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d013      	beq.n	8008276 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008254:	2b03      	cmp	r3, #3
 8008256:	d10e      	bne.n	8008276 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800825e:	695b      	ldr	r3, [r3, #20]
 8008260:	7afa      	ldrb	r2, [r7, #11]
 8008262:	4611      	mov	r1, r2
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	4798      	blx	r3
 8008268:	4603      	mov	r3, r0
 800826a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800826c:	7dfb      	ldrb	r3, [r7, #23]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d003      	beq.n	800827a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008272:	7dfb      	ldrb	r3, [r7, #23]
 8008274:	e002      	b.n	800827c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008276:	2303      	movs	r3, #3
 8008278:	e000      	b.n	800827c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3718      	adds	r7, #24
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d009      	beq.n	80082c8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	6852      	ldr	r2, [r2, #4]
 80082c0:	b2d2      	uxtb	r2, r2
 80082c2:	4611      	mov	r1, r2
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082c8:	2340      	movs	r3, #64	; 0x40
 80082ca:	2200      	movs	r2, #0
 80082cc:	2100      	movs	r1, #0
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f001 faab 	bl	800982a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2240      	movs	r2, #64	; 0x40
 80082e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082e4:	2340      	movs	r3, #64	; 0x40
 80082e6:	2200      	movs	r2, #0
 80082e8:	2180      	movs	r1, #128	; 0x80
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f001 fa9d 	bl	800982a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2240      	movs	r2, #64	; 0x40
 80082fa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008306:	b480      	push	{r7}
 8008308:	b083      	sub	sp, #12
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
 800830e:	460b      	mov	r3, r1
 8008310:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	78fa      	ldrb	r2, [r7, #3]
 8008316:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008326:	b480      	push	{r7}
 8008328:	b083      	sub	sp, #12
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2204      	movs	r2, #4
 800833e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800835e:	2b04      	cmp	r3, #4
 8008360:	d105      	bne.n	800836e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800838a:	2b03      	cmp	r3, #3
 800838c:	d10b      	bne.n	80083a6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d005      	beq.n	80083a6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a0:	69db      	ldr	r3, [r3, #28]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	460b      	mov	r3, r1
 80083ba:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b083      	sub	sp, #12
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	460b      	mov	r3, r1
 80083d4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b082      	sub	sp, #8
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008410:	2b00      	cmp	r3, #0
 8008412:	d009      	beq.n	8008428 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	6852      	ldr	r2, [r2, #4]
 8008420:	b2d2      	uxtb	r2, r2
 8008422:	4611      	mov	r1, r2
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	4798      	blx	r3
  }

  return USBD_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008432:	b480      	push	{r7}
 8008434:	b087      	sub	sp, #28
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	3301      	adds	r3, #1
 8008448:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008450:	8a3b      	ldrh	r3, [r7, #16]
 8008452:	021b      	lsls	r3, r3, #8
 8008454:	b21a      	sxth	r2, r3
 8008456:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800845a:	4313      	orrs	r3, r2
 800845c:	b21b      	sxth	r3, r3
 800845e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008460:	89fb      	ldrh	r3, [r7, #14]
}
 8008462:	4618      	mov	r0, r3
 8008464:	371c      	adds	r7, #28
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
	...

08008470 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008486:	2b20      	cmp	r3, #32
 8008488:	d004      	beq.n	8008494 <USBD_StdDevReq+0x24>
 800848a:	2b40      	cmp	r3, #64	; 0x40
 800848c:	d002      	beq.n	8008494 <USBD_StdDevReq+0x24>
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00a      	beq.n	80084a8 <USBD_StdDevReq+0x38>
 8008492:	e050      	b.n	8008536 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	6839      	ldr	r1, [r7, #0]
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	4798      	blx	r3
 80084a2:	4603      	mov	r3, r0
 80084a4:	73fb      	strb	r3, [r7, #15]
    break;
 80084a6:	e04b      	b.n	8008540 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	785b      	ldrb	r3, [r3, #1]
 80084ac:	2b09      	cmp	r3, #9
 80084ae:	d83c      	bhi.n	800852a <USBD_StdDevReq+0xba>
 80084b0:	a201      	add	r2, pc, #4	; (adr r2, 80084b8 <USBD_StdDevReq+0x48>)
 80084b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b6:	bf00      	nop
 80084b8:	0800850d 	.word	0x0800850d
 80084bc:	08008521 	.word	0x08008521
 80084c0:	0800852b 	.word	0x0800852b
 80084c4:	08008517 	.word	0x08008517
 80084c8:	0800852b 	.word	0x0800852b
 80084cc:	080084eb 	.word	0x080084eb
 80084d0:	080084e1 	.word	0x080084e1
 80084d4:	0800852b 	.word	0x0800852b
 80084d8:	08008503 	.word	0x08008503
 80084dc:	080084f5 	.word	0x080084f5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f9ce 	bl	8008884 <USBD_GetDescriptor>
      break;
 80084e8:	e024      	b.n	8008534 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fb33 	bl	8008b58 <USBD_SetAddress>
      break;
 80084f2:	e01f      	b.n	8008534 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fb70 	bl	8008bdc <USBD_SetConfig>
 80084fc:	4603      	mov	r3, r0
 80084fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008500:	e018      	b.n	8008534 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fc0d 	bl	8008d24 <USBD_GetConfig>
      break;
 800850a:	e013      	b.n	8008534 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fc3c 	bl	8008d8c <USBD_GetStatus>
      break;
 8008514:	e00e      	b.n	8008534 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008516:	6839      	ldr	r1, [r7, #0]
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fc6a 	bl	8008df2 <USBD_SetFeature>
      break;
 800851e:	e009      	b.n	8008534 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fc79 	bl	8008e1a <USBD_ClrFeature>
      break;
 8008528:	e004      	b.n	8008534 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800852a:	6839      	ldr	r1, [r7, #0]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fccf 	bl	8008ed0 <USBD_CtlError>
      break;
 8008532:	bf00      	nop
    }
    break;
 8008534:	e004      	b.n	8008540 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fcc9 	bl	8008ed0 <USBD_CtlError>
    break;
 800853e:	bf00      	nop
  }

  return ret;
 8008540:	7bfb      	ldrb	r3, [r7, #15]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop

0800854c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008562:	2b20      	cmp	r3, #32
 8008564:	d003      	beq.n	800856e <USBD_StdItfReq+0x22>
 8008566:	2b40      	cmp	r3, #64	; 0x40
 8008568:	d001      	beq.n	800856e <USBD_StdItfReq+0x22>
 800856a:	2b00      	cmp	r3, #0
 800856c:	d12a      	bne.n	80085c4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008574:	3b01      	subs	r3, #1
 8008576:	2b02      	cmp	r3, #2
 8008578:	d81d      	bhi.n	80085b6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	889b      	ldrh	r3, [r3, #4]
 800857e:	b2db      	uxtb	r3, r3
 8008580:	2b01      	cmp	r3, #1
 8008582:	d813      	bhi.n	80085ac <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	4798      	blx	r3
 8008592:	4603      	mov	r3, r0
 8008594:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	88db      	ldrh	r3, [r3, #6]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d110      	bne.n	80085c0 <USBD_StdItfReq+0x74>
 800859e:	7bfb      	ldrb	r3, [r7, #15]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10d      	bne.n	80085c0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fd5e 	bl	8009066 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80085aa:	e009      	b.n	80085c0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80085ac:	6839      	ldr	r1, [r7, #0]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fc8e 	bl	8008ed0 <USBD_CtlError>
      break;
 80085b4:	e004      	b.n	80085c0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fc89 	bl	8008ed0 <USBD_CtlError>
      break;
 80085be:	e000      	b.n	80085c2 <USBD_StdItfReq+0x76>
      break;
 80085c0:	bf00      	nop
    }
    break;
 80085c2:	e004      	b.n	80085ce <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80085c4:	6839      	ldr	r1, [r7, #0]
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 fc82 	bl	8008ed0 <USBD_CtlError>
    break;
 80085cc:	bf00      	nop
  }

  return ret;
 80085ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80085e2:	2300      	movs	r3, #0
 80085e4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	889b      	ldrh	r3, [r3, #4]
 80085ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085f4:	2b20      	cmp	r3, #32
 80085f6:	d004      	beq.n	8008602 <USBD_StdEPReq+0x2a>
 80085f8:	2b40      	cmp	r3, #64	; 0x40
 80085fa:	d002      	beq.n	8008602 <USBD_StdEPReq+0x2a>
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00a      	beq.n	8008616 <USBD_StdEPReq+0x3e>
 8008600:	e135      	b.n	800886e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	4798      	blx	r3
 8008610:	4603      	mov	r3, r0
 8008612:	73fb      	strb	r3, [r7, #15]
    break;
 8008614:	e130      	b.n	8008878 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	785b      	ldrb	r3, [r3, #1]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d03e      	beq.n	800869c <USBD_StdEPReq+0xc4>
 800861e:	2b03      	cmp	r3, #3
 8008620:	d002      	beq.n	8008628 <USBD_StdEPReq+0x50>
 8008622:	2b00      	cmp	r3, #0
 8008624:	d077      	beq.n	8008716 <USBD_StdEPReq+0x13e>
 8008626:	e11c      	b.n	8008862 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800862e:	2b02      	cmp	r3, #2
 8008630:	d002      	beq.n	8008638 <USBD_StdEPReq+0x60>
 8008632:	2b03      	cmp	r3, #3
 8008634:	d015      	beq.n	8008662 <USBD_StdEPReq+0x8a>
 8008636:	e02b      	b.n	8008690 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008638:	7bbb      	ldrb	r3, [r7, #14]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00c      	beq.n	8008658 <USBD_StdEPReq+0x80>
 800863e:	7bbb      	ldrb	r3, [r7, #14]
 8008640:	2b80      	cmp	r3, #128	; 0x80
 8008642:	d009      	beq.n	8008658 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008644:	7bbb      	ldrb	r3, [r7, #14]
 8008646:	4619      	mov	r1, r3
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f001 f933 	bl	80098b4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800864e:	2180      	movs	r1, #128	; 0x80
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f001 f92f 	bl	80098b4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008656:	e020      	b.n	800869a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008658:	6839      	ldr	r1, [r7, #0]
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fc38 	bl	8008ed0 <USBD_CtlError>
        break;
 8008660:	e01b      	b.n	800869a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	885b      	ldrh	r3, [r3, #2]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10e      	bne.n	8008688 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800866a:	7bbb      	ldrb	r3, [r7, #14]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00b      	beq.n	8008688 <USBD_StdEPReq+0xb0>
 8008670:	7bbb      	ldrb	r3, [r7, #14]
 8008672:	2b80      	cmp	r3, #128	; 0x80
 8008674:	d008      	beq.n	8008688 <USBD_StdEPReq+0xb0>
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	88db      	ldrh	r3, [r3, #6]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d104      	bne.n	8008688 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800867e:	7bbb      	ldrb	r3, [r7, #14]
 8008680:	4619      	mov	r1, r3
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f001 f916 	bl	80098b4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 fcec 	bl	8009066 <USBD_CtlSendStatus>

        break;
 800868e:	e004      	b.n	800869a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fc1c 	bl	8008ed0 <USBD_CtlError>
        break;
 8008698:	bf00      	nop
      }
      break;
 800869a:	e0e7      	b.n	800886c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d002      	beq.n	80086ac <USBD_StdEPReq+0xd4>
 80086a6:	2b03      	cmp	r3, #3
 80086a8:	d015      	beq.n	80086d6 <USBD_StdEPReq+0xfe>
 80086aa:	e02d      	b.n	8008708 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086ac:	7bbb      	ldrb	r3, [r7, #14]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00c      	beq.n	80086cc <USBD_StdEPReq+0xf4>
 80086b2:	7bbb      	ldrb	r3, [r7, #14]
 80086b4:	2b80      	cmp	r3, #128	; 0x80
 80086b6:	d009      	beq.n	80086cc <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80086b8:	7bbb      	ldrb	r3, [r7, #14]
 80086ba:	4619      	mov	r1, r3
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f001 f8f9 	bl	80098b4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80086c2:	2180      	movs	r1, #128	; 0x80
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f001 f8f5 	bl	80098b4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80086ca:	e023      	b.n	8008714 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fbfe 	bl	8008ed0 <USBD_CtlError>
        break;
 80086d4:	e01e      	b.n	8008714 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	885b      	ldrh	r3, [r3, #2]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d119      	bne.n	8008712 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d004      	beq.n	80086f2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80086e8:	7bbb      	ldrb	r3, [r7, #14]
 80086ea:	4619      	mov	r1, r3
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f001 f900 	bl	80098f2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fcb7 	bl	8009066 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	4798      	blx	r3
        }
        break;
 8008706:	e004      	b.n	8008712 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fbe0 	bl	8008ed0 <USBD_CtlError>
        break;
 8008710:	e000      	b.n	8008714 <USBD_StdEPReq+0x13c>
        break;
 8008712:	bf00      	nop
      }
      break;
 8008714:	e0aa      	b.n	800886c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800871c:	2b02      	cmp	r3, #2
 800871e:	d002      	beq.n	8008726 <USBD_StdEPReq+0x14e>
 8008720:	2b03      	cmp	r3, #3
 8008722:	d032      	beq.n	800878a <USBD_StdEPReq+0x1b2>
 8008724:	e097      	b.n	8008856 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008726:	7bbb      	ldrb	r3, [r7, #14]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d007      	beq.n	800873c <USBD_StdEPReq+0x164>
 800872c:	7bbb      	ldrb	r3, [r7, #14]
 800872e:	2b80      	cmp	r3, #128	; 0x80
 8008730:	d004      	beq.n	800873c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fbcb 	bl	8008ed0 <USBD_CtlError>
          break;
 800873a:	e091      	b.n	8008860 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800873c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008740:	2b00      	cmp	r3, #0
 8008742:	da0b      	bge.n	800875c <USBD_StdEPReq+0x184>
 8008744:	7bbb      	ldrb	r3, [r7, #14]
 8008746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800874a:	4613      	mov	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	4413      	add	r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	3310      	adds	r3, #16
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	4413      	add	r3, r2
 8008758:	3304      	adds	r3, #4
 800875a:	e00b      	b.n	8008774 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800875c:	7bbb      	ldrb	r3, [r7, #14]
 800875e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008762:	4613      	mov	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	4413      	add	r3, r2
 8008772:	3304      	adds	r3, #4
 8008774:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	2200      	movs	r2, #0
 800877a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	2202      	movs	r2, #2
 8008780:	4619      	mov	r1, r3
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fc15 	bl	8008fb2 <USBD_CtlSendData>
        break;
 8008788:	e06a      	b.n	8008860 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800878a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800878e:	2b00      	cmp	r3, #0
 8008790:	da11      	bge.n	80087b6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008792:	7bbb      	ldrb	r3, [r7, #14]
 8008794:	f003 020f 	and.w	r2, r3, #15
 8008798:	6879      	ldr	r1, [r7, #4]
 800879a:	4613      	mov	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4413      	add	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	440b      	add	r3, r1
 80087a4:	3324      	adds	r3, #36	; 0x24
 80087a6:	881b      	ldrh	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d117      	bne.n	80087dc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fb8e 	bl	8008ed0 <USBD_CtlError>
            break;
 80087b4:	e054      	b.n	8008860 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087b6:	7bbb      	ldrb	r3, [r7, #14]
 80087b8:	f003 020f 	and.w	r2, r3, #15
 80087bc:	6879      	ldr	r1, [r7, #4]
 80087be:	4613      	mov	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	440b      	add	r3, r1
 80087c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087cc:	881b      	ldrh	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d104      	bne.n	80087dc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fb7b 	bl	8008ed0 <USBD_CtlError>
            break;
 80087da:	e041      	b.n	8008860 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	da0b      	bge.n	80087fc <USBD_StdEPReq+0x224>
 80087e4:	7bbb      	ldrb	r3, [r7, #14]
 80087e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087ea:	4613      	mov	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	3310      	adds	r3, #16
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	4413      	add	r3, r2
 80087f8:	3304      	adds	r3, #4
 80087fa:	e00b      	b.n	8008814 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80087fc:	7bbb      	ldrb	r3, [r7, #14]
 80087fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008802:	4613      	mov	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	4413      	add	r3, r2
 8008812:	3304      	adds	r3, #4
 8008814:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008816:	7bbb      	ldrb	r3, [r7, #14]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d002      	beq.n	8008822 <USBD_StdEPReq+0x24a>
 800881c:	7bbb      	ldrb	r3, [r7, #14]
 800881e:	2b80      	cmp	r3, #128	; 0x80
 8008820:	d103      	bne.n	800882a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2200      	movs	r2, #0
 8008826:	601a      	str	r2, [r3, #0]
 8008828:	e00e      	b.n	8008848 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800882a:	7bbb      	ldrb	r3, [r7, #14]
 800882c:	4619      	mov	r1, r3
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f001 f87e 	bl	8009930 <USBD_LL_IsStallEP>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d003      	beq.n	8008842 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	2201      	movs	r2, #1
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	e002      	b.n	8008848 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2200      	movs	r2, #0
 8008846:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	2202      	movs	r2, #2
 800884c:	4619      	mov	r1, r3
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fbaf 	bl	8008fb2 <USBD_CtlSendData>
          break;
 8008854:	e004      	b.n	8008860 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fb39 	bl	8008ed0 <USBD_CtlError>
        break;
 800885e:	bf00      	nop
      }
      break;
 8008860:	e004      	b.n	800886c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fb33 	bl	8008ed0 <USBD_CtlError>
      break;
 800886a:	bf00      	nop
    }
    break;
 800886c:	e004      	b.n	8008878 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fb2d 	bl	8008ed0 <USBD_CtlError>
    break;
 8008876:	bf00      	nop
  }

  return ret;
 8008878:	7bfb      	ldrb	r3, [r7, #15]
}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
	...

08008884 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800888e:	2300      	movs	r3, #0
 8008890:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008892:	2300      	movs	r3, #0
 8008894:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008896:	2300      	movs	r3, #0
 8008898:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	885b      	ldrh	r3, [r3, #2]
 800889e:	0a1b      	lsrs	r3, r3, #8
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	3b01      	subs	r3, #1
 80088a4:	2b06      	cmp	r3, #6
 80088a6:	f200 8128 	bhi.w	8008afa <USBD_GetDescriptor+0x276>
 80088aa:	a201      	add	r2, pc, #4	; (adr r2, 80088b0 <USBD_GetDescriptor+0x2c>)
 80088ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b0:	080088cd 	.word	0x080088cd
 80088b4:	080088e5 	.word	0x080088e5
 80088b8:	08008925 	.word	0x08008925
 80088bc:	08008afb 	.word	0x08008afb
 80088c0:	08008afb 	.word	0x08008afb
 80088c4:	08008a9b 	.word	0x08008a9b
 80088c8:	08008ac7 	.word	0x08008ac7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	7c12      	ldrb	r2, [r2, #16]
 80088d8:	f107 0108 	add.w	r1, r7, #8
 80088dc:	4610      	mov	r0, r2
 80088de:	4798      	blx	r3
 80088e0:	60f8      	str	r0, [r7, #12]
    break;
 80088e2:	e112      	b.n	8008b0a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	7c1b      	ldrb	r3, [r3, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10d      	bne.n	8008908 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f4:	f107 0208 	add.w	r2, r7, #8
 80088f8:	4610      	mov	r0, r2
 80088fa:	4798      	blx	r3
 80088fc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	3301      	adds	r3, #1
 8008902:	2202      	movs	r2, #2
 8008904:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008906:	e100      	b.n	8008b0a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800890e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008910:	f107 0208 	add.w	r2, r7, #8
 8008914:	4610      	mov	r0, r2
 8008916:	4798      	blx	r3
 8008918:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	3301      	adds	r3, #1
 800891e:	2202      	movs	r2, #2
 8008920:	701a      	strb	r2, [r3, #0]
    break;
 8008922:	e0f2      	b.n	8008b0a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	885b      	ldrh	r3, [r3, #2]
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b05      	cmp	r3, #5
 800892c:	f200 80ac 	bhi.w	8008a88 <USBD_GetDescriptor+0x204>
 8008930:	a201      	add	r2, pc, #4	; (adr r2, 8008938 <USBD_GetDescriptor+0xb4>)
 8008932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008936:	bf00      	nop
 8008938:	08008951 	.word	0x08008951
 800893c:	08008985 	.word	0x08008985
 8008940:	080089b9 	.word	0x080089b9
 8008944:	080089ed 	.word	0x080089ed
 8008948:	08008a21 	.word	0x08008a21
 800894c:	08008a55 	.word	0x08008a55
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00b      	beq.n	8008974 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	7c12      	ldrb	r2, [r2, #16]
 8008968:	f107 0108 	add.w	r1, r7, #8
 800896c:	4610      	mov	r0, r2
 800896e:	4798      	blx	r3
 8008970:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008972:	e091      	b.n	8008a98 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008974:	6839      	ldr	r1, [r7, #0]
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 faaa 	bl	8008ed0 <USBD_CtlError>
        err++;
 800897c:	7afb      	ldrb	r3, [r7, #11]
 800897e:	3301      	adds	r3, #1
 8008980:	72fb      	strb	r3, [r7, #11]
      break;
 8008982:	e089      	b.n	8008a98 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00b      	beq.n	80089a8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	7c12      	ldrb	r2, [r2, #16]
 800899c:	f107 0108 	add.w	r1, r7, #8
 80089a0:	4610      	mov	r0, r2
 80089a2:	4798      	blx	r3
 80089a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089a6:	e077      	b.n	8008a98 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fa90 	bl	8008ed0 <USBD_CtlError>
        err++;
 80089b0:	7afb      	ldrb	r3, [r7, #11]
 80089b2:	3301      	adds	r3, #1
 80089b4:	72fb      	strb	r3, [r7, #11]
      break;
 80089b6:	e06f      	b.n	8008a98 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00b      	beq.n	80089dc <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	7c12      	ldrb	r2, [r2, #16]
 80089d0:	f107 0108 	add.w	r1, r7, #8
 80089d4:	4610      	mov	r0, r2
 80089d6:	4798      	blx	r3
 80089d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089da:	e05d      	b.n	8008a98 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fa76 	bl	8008ed0 <USBD_CtlError>
        err++;
 80089e4:	7afb      	ldrb	r3, [r7, #11]
 80089e6:	3301      	adds	r3, #1
 80089e8:	72fb      	strb	r3, [r7, #11]
      break;
 80089ea:	e055      	b.n	8008a98 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00b      	beq.n	8008a10 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	7c12      	ldrb	r2, [r2, #16]
 8008a04:	f107 0108 	add.w	r1, r7, #8
 8008a08:	4610      	mov	r0, r2
 8008a0a:	4798      	blx	r3
 8008a0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a0e:	e043      	b.n	8008a98 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fa5c 	bl	8008ed0 <USBD_CtlError>
        err++;
 8008a18:	7afb      	ldrb	r3, [r7, #11]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	72fb      	strb	r3, [r7, #11]
      break;
 8008a1e:	e03b      	b.n	8008a98 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00b      	beq.n	8008a44 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	7c12      	ldrb	r2, [r2, #16]
 8008a38:	f107 0108 	add.w	r1, r7, #8
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	4798      	blx	r3
 8008a40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a42:	e029      	b.n	8008a98 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fa42 	bl	8008ed0 <USBD_CtlError>
        err++;
 8008a4c:	7afb      	ldrb	r3, [r7, #11]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	72fb      	strb	r3, [r7, #11]
      break;
 8008a52:	e021      	b.n	8008a98 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00b      	beq.n	8008a78 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a66:	699b      	ldr	r3, [r3, #24]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	7c12      	ldrb	r2, [r2, #16]
 8008a6c:	f107 0108 	add.w	r1, r7, #8
 8008a70:	4610      	mov	r0, r2
 8008a72:	4798      	blx	r3
 8008a74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a76:	e00f      	b.n	8008a98 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fa28 	bl	8008ed0 <USBD_CtlError>
        err++;
 8008a80:	7afb      	ldrb	r3, [r7, #11]
 8008a82:	3301      	adds	r3, #1
 8008a84:	72fb      	strb	r3, [r7, #11]
      break;
 8008a86:	e007      	b.n	8008a98 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008a88:	6839      	ldr	r1, [r7, #0]
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fa20 	bl	8008ed0 <USBD_CtlError>
      err++;
 8008a90:	7afb      	ldrb	r3, [r7, #11]
 8008a92:	3301      	adds	r3, #1
 8008a94:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008a96:	bf00      	nop
    }
    break;
 8008a98:	e037      	b.n	8008b0a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	7c1b      	ldrb	r3, [r3, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d109      	bne.n	8008ab6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aaa:	f107 0208 	add.w	r2, r7, #8
 8008aae:	4610      	mov	r0, r2
 8008ab0:	4798      	blx	r3
 8008ab2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008ab4:	e029      	b.n	8008b0a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fa09 	bl	8008ed0 <USBD_CtlError>
      err++;
 8008abe:	7afb      	ldrb	r3, [r7, #11]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	72fb      	strb	r3, [r7, #11]
    break;
 8008ac4:	e021      	b.n	8008b0a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	7c1b      	ldrb	r3, [r3, #16]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10d      	bne.n	8008aea <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad6:	f107 0208 	add.w	r2, r7, #8
 8008ada:	4610      	mov	r0, r2
 8008adc:	4798      	blx	r3
 8008ade:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	2207      	movs	r2, #7
 8008ae6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008ae8:	e00f      	b.n	8008b0a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f9ef 	bl	8008ed0 <USBD_CtlError>
      err++;
 8008af2:	7afb      	ldrb	r3, [r7, #11]
 8008af4:	3301      	adds	r3, #1
 8008af6:	72fb      	strb	r3, [r7, #11]
    break;
 8008af8:	e007      	b.n	8008b0a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f9e7 	bl	8008ed0 <USBD_CtlError>
    err++;
 8008b02:	7afb      	ldrb	r3, [r7, #11]
 8008b04:	3301      	adds	r3, #1
 8008b06:	72fb      	strb	r3, [r7, #11]
    break;
 8008b08:	bf00      	nop
  }

  if (err != 0U)
 8008b0a:	7afb      	ldrb	r3, [r7, #11]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d11e      	bne.n	8008b4e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	88db      	ldrh	r3, [r3, #6]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d016      	beq.n	8008b46 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008b18:	893b      	ldrh	r3, [r7, #8]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00e      	beq.n	8008b3c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	88da      	ldrh	r2, [r3, #6]
 8008b22:	893b      	ldrh	r3, [r7, #8]
 8008b24:	4293      	cmp	r3, r2
 8008b26:	bf28      	it	cs
 8008b28:	4613      	movcs	r3, r2
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b2e:	893b      	ldrh	r3, [r7, #8]
 8008b30:	461a      	mov	r2, r3
 8008b32:	68f9      	ldr	r1, [r7, #12]
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 fa3c 	bl	8008fb2 <USBD_CtlSendData>
 8008b3a:	e009      	b.n	8008b50 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f9c6 	bl	8008ed0 <USBD_CtlError>
 8008b44:	e004      	b.n	8008b50 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fa8d 	bl	8009066 <USBD_CtlSendStatus>
 8008b4c:	e000      	b.n	8008b50 <USBD_GetDescriptor+0x2cc>
    return;
 8008b4e:	bf00      	nop
    }
  }
}
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop

08008b58 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	889b      	ldrh	r3, [r3, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d130      	bne.n	8008bcc <USBD_SetAddress+0x74>
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	88db      	ldrh	r3, [r3, #6]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d12c      	bne.n	8008bcc <USBD_SetAddress+0x74>
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	885b      	ldrh	r3, [r3, #2]
 8008b76:	2b7f      	cmp	r3, #127	; 0x7f
 8008b78:	d828      	bhi.n	8008bcc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	885b      	ldrh	r3, [r3, #2]
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b8c:	2b03      	cmp	r3, #3
 8008b8e:	d104      	bne.n	8008b9a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f99c 	bl	8008ed0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b98:	e01c      	b.n	8008bd4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	7bfa      	ldrb	r2, [r7, #15]
 8008b9e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ba2:	7bfb      	ldrb	r3, [r7, #15]
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 feee 	bl	8009988 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fa5a 	bl	8009066 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008bb2:	7bfb      	ldrb	r3, [r7, #15]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d004      	beq.n	8008bc2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2202      	movs	r2, #2
 8008bbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc0:	e008      	b.n	8008bd4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bca:	e003      	b.n	8008bd4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f97e 	bl	8008ed0 <USBD_CtlError>
  }
}
 8008bd4:	bf00      	nop
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	885b      	ldrh	r3, [r3, #2]
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	4b4b      	ldr	r3, [pc, #300]	; (8008d20 <USBD_SetConfig+0x144>)
 8008bf2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bf4:	4b4a      	ldr	r3, [pc, #296]	; (8008d20 <USBD_SetConfig+0x144>)
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d905      	bls.n	8008c08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008bfc:	6839      	ldr	r1, [r7, #0]
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f966 	bl	8008ed0 <USBD_CtlError>
    return USBD_FAIL;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e087      	b.n	8008d18 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d002      	beq.n	8008c18 <USBD_SetConfig+0x3c>
 8008c12:	2b03      	cmp	r3, #3
 8008c14:	d025      	beq.n	8008c62 <USBD_SetConfig+0x86>
 8008c16:	e071      	b.n	8008cfc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008c18:	4b41      	ldr	r3, [pc, #260]	; (8008d20 <USBD_SetConfig+0x144>)
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d01c      	beq.n	8008c5a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008c20:	4b3f      	ldr	r3, [pc, #252]	; (8008d20 <USBD_SetConfig+0x144>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c2a:	4b3d      	ldr	r3, [pc, #244]	; (8008d20 <USBD_SetConfig+0x144>)
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	4619      	mov	r1, r3
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f7ff f9a7 	bl	8007f84 <USBD_SetClassConfig>
 8008c36:	4603      	mov	r3, r0
 8008c38:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008c3a:	7bfb      	ldrb	r3, [r7, #15]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d004      	beq.n	8008c4a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f944 	bl	8008ed0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008c48:	e065      	b.n	8008d16 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fa0b 	bl	8009066 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2203      	movs	r2, #3
 8008c54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008c58:	e05d      	b.n	8008d16 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fa03 	bl	8009066 <USBD_CtlSendStatus>
    break;
 8008c60:	e059      	b.n	8008d16 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008c62:	4b2f      	ldr	r3, [pc, #188]	; (8008d20 <USBD_SetConfig+0x144>)
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d112      	bne.n	8008c90 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2202      	movs	r2, #2
 8008c6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008c72:	4b2b      	ldr	r3, [pc, #172]	; (8008d20 <USBD_SetConfig+0x144>)
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c7c:	4b28      	ldr	r3, [pc, #160]	; (8008d20 <USBD_SetConfig+0x144>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	4619      	mov	r1, r3
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7ff f99a 	bl	8007fbc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f9ec 	bl	8009066 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008c8e:	e042      	b.n	8008d16 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008c90:	4b23      	ldr	r3, [pc, #140]	; (8008d20 <USBD_SetConfig+0x144>)
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	461a      	mov	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d02a      	beq.n	8008cf4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7ff f988 	bl	8007fbc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008cac:	4b1c      	ldr	r3, [pc, #112]	; (8008d20 <USBD_SetConfig+0x144>)
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cb6:	4b1a      	ldr	r3, [pc, #104]	; (8008d20 <USBD_SetConfig+0x144>)
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7ff f961 	bl	8007f84 <USBD_SetClassConfig>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00f      	beq.n	8008cec <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008ccc:	6839      	ldr	r1, [r7, #0]
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f8fe 	bl	8008ed0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	4619      	mov	r1, r3
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f7ff f96d 	bl	8007fbc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2202      	movs	r2, #2
 8008ce6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008cea:	e014      	b.n	8008d16 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f9ba 	bl	8009066 <USBD_CtlSendStatus>
    break;
 8008cf2:	e010      	b.n	8008d16 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 f9b6 	bl	8009066 <USBD_CtlSendStatus>
    break;
 8008cfa:	e00c      	b.n	8008d16 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f8e6 	bl	8008ed0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d04:	4b06      	ldr	r3, [pc, #24]	; (8008d20 <USBD_SetConfig+0x144>)
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7ff f956 	bl	8007fbc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008d10:	2303      	movs	r3, #3
 8008d12:	73fb      	strb	r3, [r7, #15]
    break;
 8008d14:	bf00      	nop
  }

  return ret;
 8008d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	2000037c 	.word	0x2000037c

08008d24 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	88db      	ldrh	r3, [r3, #6]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d004      	beq.n	8008d40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f8c9 	bl	8008ed0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008d3e:	e021      	b.n	8008d84 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	db17      	blt.n	8008d7a <USBD_GetConfig+0x56>
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	dd02      	ble.n	8008d54 <USBD_GetConfig+0x30>
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d00b      	beq.n	8008d6a <USBD_GetConfig+0x46>
 8008d52:	e012      	b.n	8008d7a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	3308      	adds	r3, #8
 8008d5e:	2201      	movs	r2, #1
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f925 	bl	8008fb2 <USBD_CtlSendData>
      break;
 8008d68:	e00c      	b.n	8008d84 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	2201      	movs	r2, #1
 8008d70:	4619      	mov	r1, r3
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f91d 	bl	8008fb2 <USBD_CtlSendData>
      break;
 8008d78:	e004      	b.n	8008d84 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f8a7 	bl	8008ed0 <USBD_CtlError>
      break;
 8008d82:	bf00      	nop
}
 8008d84:	bf00      	nop
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d81e      	bhi.n	8008de0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	88db      	ldrh	r3, [r3, #6]
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d004      	beq.n	8008db4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f88f 	bl	8008ed0 <USBD_CtlError>
      break;
 8008db2:	e01a      	b.n	8008dea <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d005      	beq.n	8008dd0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	f043 0202 	orr.w	r2, r3, #2
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	330c      	adds	r3, #12
 8008dd4:	2202      	movs	r2, #2
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f8ea 	bl	8008fb2 <USBD_CtlSendData>
    break;
 8008dde:	e004      	b.n	8008dea <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008de0:	6839      	ldr	r1, [r7, #0]
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f874 	bl	8008ed0 <USBD_CtlError>
    break;
 8008de8:	bf00      	nop
  }
}
 8008dea:	bf00      	nop
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b082      	sub	sp, #8
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	885b      	ldrh	r3, [r3, #2]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d106      	bne.n	8008e12 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f92a 	bl	8009066 <USBD_CtlSendStatus>
  }
}
 8008e12:	bf00      	nop
 8008e14:	3708      	adds	r7, #8
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b082      	sub	sp, #8
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d80b      	bhi.n	8008e48 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	885b      	ldrh	r3, [r3, #2]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d10c      	bne.n	8008e52 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f910 	bl	8009066 <USBD_CtlSendStatus>
      }
      break;
 8008e46:	e004      	b.n	8008e52 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e48:	6839      	ldr	r1, [r7, #0]
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f840 	bl	8008ed0 <USBD_CtlError>
      break;
 8008e50:	e000      	b.n	8008e54 <USBD_ClrFeature+0x3a>
      break;
 8008e52:	bf00      	nop
  }
}
 8008e54:	bf00      	nop
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	781a      	ldrb	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	3301      	adds	r3, #1
 8008e76:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	781a      	ldrb	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	3301      	adds	r3, #1
 8008e84:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f7ff fad3 	bl	8008432 <SWAPBYTE>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	461a      	mov	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	3301      	adds	r3, #1
 8008e98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f7ff fac6 	bl	8008432 <SWAPBYTE>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f7ff fab9 	bl	8008432 <SWAPBYTE>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	80da      	strh	r2, [r3, #6]
}
 8008ec8:	bf00      	nop
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008eda:	2180      	movs	r1, #128	; 0x80
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 fce9 	bl	80098b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fce5 	bl	80098b4 <USBD_LL_StallEP>
}
 8008eea:	bf00      	nop
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b086      	sub	sp, #24
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	60f8      	str	r0, [r7, #12]
 8008efa:	60b9      	str	r1, [r7, #8]
 8008efc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008efe:	2300      	movs	r3, #0
 8008f00:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d036      	beq.n	8008f76 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f0c:	6938      	ldr	r0, [r7, #16]
 8008f0e:	f000 f836 	bl	8008f7e <USBD_GetLen>
 8008f12:	4603      	mov	r3, r0
 8008f14:	3301      	adds	r3, #1
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	005b      	lsls	r3, r3, #1
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f20:	7dfb      	ldrb	r3, [r7, #23]
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	4413      	add	r3, r2
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	7812      	ldrb	r2, [r2, #0]
 8008f2a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f2c:	7dfb      	ldrb	r3, [r7, #23]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f32:	7dfb      	ldrb	r3, [r7, #23]
 8008f34:	68ba      	ldr	r2, [r7, #8]
 8008f36:	4413      	add	r3, r2
 8008f38:	2203      	movs	r2, #3
 8008f3a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f3c:	7dfb      	ldrb	r3, [r7, #23]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f42:	e013      	b.n	8008f6c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f44:	7dfb      	ldrb	r3, [r7, #23]
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	4413      	add	r3, r2
 8008f4a:	693a      	ldr	r2, [r7, #16]
 8008f4c:	7812      	ldrb	r2, [r2, #0]
 8008f4e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	3301      	adds	r3, #1
 8008f54:	613b      	str	r3, [r7, #16]
    idx++;
 8008f56:	7dfb      	ldrb	r3, [r7, #23]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f5c:	7dfb      	ldrb	r3, [r7, #23]
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	4413      	add	r3, r2
 8008f62:	2200      	movs	r2, #0
 8008f64:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f66:	7dfb      	ldrb	r3, [r7, #23]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1e7      	bne.n	8008f44 <USBD_GetString+0x52>
 8008f74:	e000      	b.n	8008f78 <USBD_GetString+0x86>
    return;
 8008f76:	bf00      	nop
  }
}
 8008f78:	3718      	adds	r7, #24
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b085      	sub	sp, #20
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f86:	2300      	movs	r3, #0
 8008f88:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f8e:	e005      	b.n	8008f9c <USBD_GetLen+0x1e>
  {
    len++;
 8008f90:	7bfb      	ldrb	r3, [r7, #15]
 8008f92:	3301      	adds	r3, #1
 8008f94:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1f5      	bne.n	8008f90 <USBD_GetLen+0x12>
  }

  return len;
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b084      	sub	sp, #16
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	60f8      	str	r0, [r7, #12]
 8008fba:	60b9      	str	r1, [r7, #8]
 8008fbc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2202      	movs	r2, #2
 8008fc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f000 fcf4 	bl	80099c6 <USBD_LL_Transmit>

  return USBD_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	2100      	movs	r1, #0
 8008ffa:	68f8      	ldr	r0, [r7, #12]
 8008ffc:	f000 fce3 	bl	80099c6 <USBD_LL_Transmit>

  return USBD_OK;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b084      	sub	sp, #16
 800900e:	af00      	add	r7, sp, #0
 8009010:	60f8      	str	r0, [r7, #12]
 8009012:	60b9      	str	r1, [r7, #8]
 8009014:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2203      	movs	r2, #3
 800901a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	2100      	movs	r1, #0
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f000 fce7 	bl	8009a08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	2100      	movs	r1, #0
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f000 fcd6 	bl	8009a08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b082      	sub	sp, #8
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2204      	movs	r2, #4
 8009072:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009076:	2300      	movs	r3, #0
 8009078:	2200      	movs	r2, #0
 800907a:	2100      	movs	r1, #0
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 fca2 	bl	80099c6 <USBD_LL_Transmit>

  return USBD_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2205      	movs	r2, #5
 8009098:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800909c:	2300      	movs	r3, #0
 800909e:	2200      	movs	r2, #0
 80090a0:	2100      	movs	r1, #0
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fcb0 	bl	8009a08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
	...

080090b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090b8:	2200      	movs	r2, #0
 80090ba:	4912      	ldr	r1, [pc, #72]	; (8009104 <MX_USB_DEVICE_Init+0x50>)
 80090bc:	4812      	ldr	r0, [pc, #72]	; (8009108 <MX_USB_DEVICE_Init+0x54>)
 80090be:	f7fe fef3 	bl	8007ea8 <USBD_Init>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090c8:	f7f8 fc94 	bl	80019f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80090cc:	490f      	ldr	r1, [pc, #60]	; (800910c <MX_USB_DEVICE_Init+0x58>)
 80090ce:	480e      	ldr	r0, [pc, #56]	; (8009108 <MX_USB_DEVICE_Init+0x54>)
 80090d0:	f7fe ff20 	bl	8007f14 <USBD_RegisterClass>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d001      	beq.n	80090de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090da:	f7f8 fc8b 	bl	80019f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80090de:	490c      	ldr	r1, [pc, #48]	; (8009110 <MX_USB_DEVICE_Init+0x5c>)
 80090e0:	4809      	ldr	r0, [pc, #36]	; (8009108 <MX_USB_DEVICE_Init+0x54>)
 80090e2:	f7fe fe45 	bl	8007d70 <USBD_CDC_RegisterInterface>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d001      	beq.n	80090f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80090ec:	f7f8 fc82 	bl	80019f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090f0:	4805      	ldr	r0, [pc, #20]	; (8009108 <MX_USB_DEVICE_Init+0x54>)
 80090f2:	f7fe ff30 	bl	8007f56 <USBD_Start>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80090fc:	f7f8 fc7a 	bl	80019f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009100:	bf00      	nop
 8009102:	bd80      	pop	{r7, pc}
 8009104:	2000013c 	.word	0x2000013c
 8009108:	200004c0 	.word	0x200004c0
 800910c:	2000001c 	.word	0x2000001c
 8009110:	20000128 	.word	0x20000128

08009114 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009118:	2200      	movs	r2, #0
 800911a:	4905      	ldr	r1, [pc, #20]	; (8009130 <CDC_Init_FS+0x1c>)
 800911c:	4805      	ldr	r0, [pc, #20]	; (8009134 <CDC_Init_FS+0x20>)
 800911e:	f7fe fe3c 	bl	8007d9a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009122:	4905      	ldr	r1, [pc, #20]	; (8009138 <CDC_Init_FS+0x24>)
 8009124:	4803      	ldr	r0, [pc, #12]	; (8009134 <CDC_Init_FS+0x20>)
 8009126:	f7fe fe51 	bl	8007dcc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800912a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800912c:	4618      	mov	r0, r3
 800912e:	bd80      	pop	{r7, pc}
 8009130:	20000f90 	.word	0x20000f90
 8009134:	200004c0 	.word	0x200004c0
 8009138:	20000790 	.word	0x20000790

0800913c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800913c:	b480      	push	{r7}
 800913e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009140:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009142:	4618      	mov	r0, r3
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	4603      	mov	r3, r0
 8009154:	6039      	str	r1, [r7, #0]
 8009156:	71fb      	strb	r3, [r7, #7]
 8009158:	4613      	mov	r3, r2
 800915a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800915c:	79fb      	ldrb	r3, [r7, #7]
 800915e:	2b23      	cmp	r3, #35	; 0x23
 8009160:	d85c      	bhi.n	800921c <CDC_Control_FS+0xd0>
 8009162:	a201      	add	r2, pc, #4	; (adr r2, 8009168 <CDC_Control_FS+0x1c>)
 8009164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009168:	0800921d 	.word	0x0800921d
 800916c:	0800921d 	.word	0x0800921d
 8009170:	0800921d 	.word	0x0800921d
 8009174:	0800921d 	.word	0x0800921d
 8009178:	0800921d 	.word	0x0800921d
 800917c:	0800921d 	.word	0x0800921d
 8009180:	0800921d 	.word	0x0800921d
 8009184:	0800921d 	.word	0x0800921d
 8009188:	0800921d 	.word	0x0800921d
 800918c:	0800921d 	.word	0x0800921d
 8009190:	0800921d 	.word	0x0800921d
 8009194:	0800921d 	.word	0x0800921d
 8009198:	0800921d 	.word	0x0800921d
 800919c:	0800921d 	.word	0x0800921d
 80091a0:	0800921d 	.word	0x0800921d
 80091a4:	0800921d 	.word	0x0800921d
 80091a8:	0800921d 	.word	0x0800921d
 80091ac:	0800921d 	.word	0x0800921d
 80091b0:	0800921d 	.word	0x0800921d
 80091b4:	0800921d 	.word	0x0800921d
 80091b8:	0800921d 	.word	0x0800921d
 80091bc:	0800921d 	.word	0x0800921d
 80091c0:	0800921d 	.word	0x0800921d
 80091c4:	0800921d 	.word	0x0800921d
 80091c8:	0800921d 	.word	0x0800921d
 80091cc:	0800921d 	.word	0x0800921d
 80091d0:	0800921d 	.word	0x0800921d
 80091d4:	0800921d 	.word	0x0800921d
 80091d8:	0800921d 	.word	0x0800921d
 80091dc:	0800921d 	.word	0x0800921d
 80091e0:	0800921d 	.word	0x0800921d
 80091e4:	0800921d 	.word	0x0800921d
 80091e8:	080091f9 	.word	0x080091f9
 80091ec:	0800920b 	.word	0x0800920b
 80091f0:	0800921d 	.word	0x0800921d
 80091f4:	0800921d 	.word	0x0800921d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        memcpy(lineCoding, pbuf, sizeof(lineCoding));
 80091f8:	4b0c      	ldr	r3, [pc, #48]	; (800922c <CDC_Control_FS+0xe0>)
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	6810      	ldr	r0, [r2, #0]
 80091fe:	6018      	str	r0, [r3, #0]
 8009200:	8891      	ldrh	r1, [r2, #4]
 8009202:	7992      	ldrb	r2, [r2, #6]
 8009204:	8099      	strh	r1, [r3, #4]
 8009206:	719a      	strb	r2, [r3, #6]
    break;
 8009208:	e009      	b.n	800921e <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
        memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	4a07      	ldr	r2, [pc, #28]	; (800922c <CDC_Control_FS+0xe0>)
 800920e:	6810      	ldr	r0, [r2, #0]
 8009210:	6018      	str	r0, [r3, #0]
 8009212:	8891      	ldrh	r1, [r2, #4]
 8009214:	7992      	ldrb	r2, [r2, #6]
 8009216:	8099      	strh	r1, [r3, #4]
 8009218:	719a      	strb	r2, [r3, #6]
    break;
 800921a:	e000      	b.n	800921e <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800921c:	bf00      	nop
  }

  return (USBD_OK);
 800921e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009220:	4618      	mov	r0, r3
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	20000120 	.word	0x20000120

08009230 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800923a:	6879      	ldr	r1, [r7, #4]
 800923c:	4805      	ldr	r0, [pc, #20]	; (8009254 <CDC_Receive_FS+0x24>)
 800923e:	f7fe fdc5 	bl	8007dcc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009242:	4804      	ldr	r0, [pc, #16]	; (8009254 <CDC_Receive_FS+0x24>)
 8009244:	f7fe fe06 	bl	8007e54 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009248:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800924a:	4618      	mov	r0, r3
 800924c:	3708      	adds	r7, #8
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	200004c0 	.word	0x200004c0

08009258 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009264:	2300      	movs	r3, #0
 8009266:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009268:	4b0d      	ldr	r3, [pc, #52]	; (80092a0 <CDC_Transmit_FS+0x48>)
 800926a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800926e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009276:	2b00      	cmp	r3, #0
 8009278:	d001      	beq.n	800927e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800927a:	2301      	movs	r3, #1
 800927c:	e00b      	b.n	8009296 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800927e:	887b      	ldrh	r3, [r7, #2]
 8009280:	461a      	mov	r2, r3
 8009282:	6879      	ldr	r1, [r7, #4]
 8009284:	4806      	ldr	r0, [pc, #24]	; (80092a0 <CDC_Transmit_FS+0x48>)
 8009286:	f7fe fd88 	bl	8007d9a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800928a:	4805      	ldr	r0, [pc, #20]	; (80092a0 <CDC_Transmit_FS+0x48>)
 800928c:	f7fe fdb2 	bl	8007df4 <USBD_CDC_TransmitPacket>
 8009290:	4603      	mov	r3, r0
 8009292:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009294:	7bfb      	ldrb	r3, [r7, #15]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	200004c0 	.word	0x200004c0

080092a4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b087      	sub	sp, #28
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	4613      	mov	r3, r2
 80092b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80092b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	371c      	adds	r7, #28
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
	...

080092c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	4603      	mov	r3, r0
 80092d0:	6039      	str	r1, [r7, #0]
 80092d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	2212      	movs	r2, #18
 80092d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80092da:	4b03      	ldr	r3, [pc, #12]	; (80092e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80092dc:	4618      	mov	r0, r3
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	20000158 	.word	0x20000158

080092ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	4603      	mov	r3, r0
 80092f4:	6039      	str	r1, [r7, #0]
 80092f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	2204      	movs	r2, #4
 80092fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80092fe:	4b03      	ldr	r3, [pc, #12]	; (800930c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009300:	4618      	mov	r0, r3
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr
 800930c:	2000016c 	.word	0x2000016c

08009310 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	4603      	mov	r3, r0
 8009318:	6039      	str	r1, [r7, #0]
 800931a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800931c:	79fb      	ldrb	r3, [r7, #7]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d105      	bne.n	800932e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009322:	683a      	ldr	r2, [r7, #0]
 8009324:	4907      	ldr	r1, [pc, #28]	; (8009344 <USBD_FS_ProductStrDescriptor+0x34>)
 8009326:	4808      	ldr	r0, [pc, #32]	; (8009348 <USBD_FS_ProductStrDescriptor+0x38>)
 8009328:	f7ff fde3 	bl	8008ef2 <USBD_GetString>
 800932c:	e004      	b.n	8009338 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	4904      	ldr	r1, [pc, #16]	; (8009344 <USBD_FS_ProductStrDescriptor+0x34>)
 8009332:	4805      	ldr	r0, [pc, #20]	; (8009348 <USBD_FS_ProductStrDescriptor+0x38>)
 8009334:	f7ff fddd 	bl	8008ef2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009338:	4b02      	ldr	r3, [pc, #8]	; (8009344 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800933a:	4618      	mov	r0, r3
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	20001790 	.word	0x20001790
 8009348:	0800bcb4 	.word	0x0800bcb4

0800934c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	4603      	mov	r3, r0
 8009354:	6039      	str	r1, [r7, #0]
 8009356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009358:	683a      	ldr	r2, [r7, #0]
 800935a:	4904      	ldr	r1, [pc, #16]	; (800936c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800935c:	4804      	ldr	r0, [pc, #16]	; (8009370 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800935e:	f7ff fdc8 	bl	8008ef2 <USBD_GetString>
  return USBD_StrDesc;
 8009362:	4b02      	ldr	r3, [pc, #8]	; (800936c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009364:	4618      	mov	r0, r3
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	20001790 	.word	0x20001790
 8009370:	0800bccc 	.word	0x0800bccc

08009374 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	4603      	mov	r3, r0
 800937c:	6039      	str	r1, [r7, #0]
 800937e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	221a      	movs	r2, #26
 8009384:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009386:	f000 f843 	bl	8009410 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800938a:	4b02      	ldr	r3, [pc, #8]	; (8009394 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800938c:	4618      	mov	r0, r3
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	20000170 	.word	0x20000170

08009398 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	4603      	mov	r3, r0
 80093a0:	6039      	str	r1, [r7, #0]
 80093a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80093a4:	79fb      	ldrb	r3, [r7, #7]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d105      	bne.n	80093b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093aa:	683a      	ldr	r2, [r7, #0]
 80093ac:	4907      	ldr	r1, [pc, #28]	; (80093cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80093ae:	4808      	ldr	r0, [pc, #32]	; (80093d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093b0:	f7ff fd9f 	bl	8008ef2 <USBD_GetString>
 80093b4:	e004      	b.n	80093c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093b6:	683a      	ldr	r2, [r7, #0]
 80093b8:	4904      	ldr	r1, [pc, #16]	; (80093cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80093ba:	4805      	ldr	r0, [pc, #20]	; (80093d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093bc:	f7ff fd99 	bl	8008ef2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093c0:	4b02      	ldr	r3, [pc, #8]	; (80093cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	20001790 	.word	0x20001790
 80093d0:	0800bce0 	.word	0x0800bce0

080093d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	4603      	mov	r3, r0
 80093dc:	6039      	str	r1, [r7, #0]
 80093de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093e0:	79fb      	ldrb	r3, [r7, #7]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d105      	bne.n	80093f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	4907      	ldr	r1, [pc, #28]	; (8009408 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80093ea:	4808      	ldr	r0, [pc, #32]	; (800940c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80093ec:	f7ff fd81 	bl	8008ef2 <USBD_GetString>
 80093f0:	e004      	b.n	80093fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	4904      	ldr	r1, [pc, #16]	; (8009408 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80093f6:	4805      	ldr	r0, [pc, #20]	; (800940c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80093f8:	f7ff fd7b 	bl	8008ef2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093fc:	4b02      	ldr	r3, [pc, #8]	; (8009408 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	20001790 	.word	0x20001790
 800940c:	0800bcec 	.word	0x0800bcec

08009410 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009416:	4b0f      	ldr	r3, [pc, #60]	; (8009454 <Get_SerialNum+0x44>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800941c:	4b0e      	ldr	r3, [pc, #56]	; (8009458 <Get_SerialNum+0x48>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009422:	4b0e      	ldr	r3, [pc, #56]	; (800945c <Get_SerialNum+0x4c>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4413      	add	r3, r2
 800942e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d009      	beq.n	800944a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009436:	2208      	movs	r2, #8
 8009438:	4909      	ldr	r1, [pc, #36]	; (8009460 <Get_SerialNum+0x50>)
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 f814 	bl	8009468 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009440:	2204      	movs	r2, #4
 8009442:	4908      	ldr	r1, [pc, #32]	; (8009464 <Get_SerialNum+0x54>)
 8009444:	68b8      	ldr	r0, [r7, #8]
 8009446:	f000 f80f 	bl	8009468 <IntToUnicode>
  }
}
 800944a:	bf00      	nop
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	1fff7a10 	.word	0x1fff7a10
 8009458:	1fff7a14 	.word	0x1fff7a14
 800945c:	1fff7a18 	.word	0x1fff7a18
 8009460:	20000172 	.word	0x20000172
 8009464:	20000182 	.word	0x20000182

08009468 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009468:	b480      	push	{r7}
 800946a:	b087      	sub	sp, #28
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	4613      	mov	r3, r2
 8009474:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009476:	2300      	movs	r3, #0
 8009478:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800947a:	2300      	movs	r3, #0
 800947c:	75fb      	strb	r3, [r7, #23]
 800947e:	e027      	b.n	80094d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	0f1b      	lsrs	r3, r3, #28
 8009484:	2b09      	cmp	r3, #9
 8009486:	d80b      	bhi.n	80094a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	0f1b      	lsrs	r3, r3, #28
 800948c:	b2da      	uxtb	r2, r3
 800948e:	7dfb      	ldrb	r3, [r7, #23]
 8009490:	005b      	lsls	r3, r3, #1
 8009492:	4619      	mov	r1, r3
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	440b      	add	r3, r1
 8009498:	3230      	adds	r2, #48	; 0x30
 800949a:	b2d2      	uxtb	r2, r2
 800949c:	701a      	strb	r2, [r3, #0]
 800949e:	e00a      	b.n	80094b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	0f1b      	lsrs	r3, r3, #28
 80094a4:	b2da      	uxtb	r2, r3
 80094a6:	7dfb      	ldrb	r3, [r7, #23]
 80094a8:	005b      	lsls	r3, r3, #1
 80094aa:	4619      	mov	r1, r3
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	440b      	add	r3, r1
 80094b0:	3237      	adds	r2, #55	; 0x37
 80094b2:	b2d2      	uxtb	r2, r2
 80094b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	011b      	lsls	r3, r3, #4
 80094ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80094bc:	7dfb      	ldrb	r3, [r7, #23]
 80094be:	005b      	lsls	r3, r3, #1
 80094c0:	3301      	adds	r3, #1
 80094c2:	68ba      	ldr	r2, [r7, #8]
 80094c4:	4413      	add	r3, r2
 80094c6:	2200      	movs	r2, #0
 80094c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80094ca:	7dfb      	ldrb	r3, [r7, #23]
 80094cc:	3301      	adds	r3, #1
 80094ce:	75fb      	strb	r3, [r7, #23]
 80094d0:	7dfa      	ldrb	r2, [r7, #23]
 80094d2:	79fb      	ldrb	r3, [r7, #7]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d3d3      	bcc.n	8009480 <IntToUnicode+0x18>
  }
}
 80094d8:	bf00      	nop
 80094da:	371c      	adds	r7, #28
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b08a      	sub	sp, #40	; 0x28
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094ec:	f107 0314 	add.w	r3, r7, #20
 80094f0:	2200      	movs	r2, #0
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	605a      	str	r2, [r3, #4]
 80094f6:	609a      	str	r2, [r3, #8]
 80094f8:	60da      	str	r2, [r3, #12]
 80094fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009504:	d13a      	bne.n	800957c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009506:	2300      	movs	r3, #0
 8009508:	613b      	str	r3, [r7, #16]
 800950a:	4b1e      	ldr	r3, [pc, #120]	; (8009584 <HAL_PCD_MspInit+0xa0>)
 800950c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950e:	4a1d      	ldr	r2, [pc, #116]	; (8009584 <HAL_PCD_MspInit+0xa0>)
 8009510:	f043 0301 	orr.w	r3, r3, #1
 8009514:	6313      	str	r3, [r2, #48]	; 0x30
 8009516:	4b1b      	ldr	r3, [pc, #108]	; (8009584 <HAL_PCD_MspInit+0xa0>)
 8009518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800951a:	f003 0301 	and.w	r3, r3, #1
 800951e:	613b      	str	r3, [r7, #16]
 8009520:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009522:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009528:	2302      	movs	r3, #2
 800952a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800952c:	2300      	movs	r3, #0
 800952e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009530:	2303      	movs	r3, #3
 8009532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009534:	230a      	movs	r3, #10
 8009536:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009538:	f107 0314 	add.w	r3, r7, #20
 800953c:	4619      	mov	r1, r3
 800953e:	4812      	ldr	r0, [pc, #72]	; (8009588 <HAL_PCD_MspInit+0xa4>)
 8009540:	f7f9 fc96 	bl	8002e70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009544:	4b0f      	ldr	r3, [pc, #60]	; (8009584 <HAL_PCD_MspInit+0xa0>)
 8009546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009548:	4a0e      	ldr	r2, [pc, #56]	; (8009584 <HAL_PCD_MspInit+0xa0>)
 800954a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800954e:	6353      	str	r3, [r2, #52]	; 0x34
 8009550:	2300      	movs	r3, #0
 8009552:	60fb      	str	r3, [r7, #12]
 8009554:	4b0b      	ldr	r3, [pc, #44]	; (8009584 <HAL_PCD_MspInit+0xa0>)
 8009556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009558:	4a0a      	ldr	r2, [pc, #40]	; (8009584 <HAL_PCD_MspInit+0xa0>)
 800955a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800955e:	6453      	str	r3, [r2, #68]	; 0x44
 8009560:	4b08      	ldr	r3, [pc, #32]	; (8009584 <HAL_PCD_MspInit+0xa0>)
 8009562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009568:	60fb      	str	r3, [r7, #12]
 800956a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800956c:	2200      	movs	r2, #0
 800956e:	2100      	movs	r1, #0
 8009570:	2043      	movs	r0, #67	; 0x43
 8009572:	f7f9 fc46 	bl	8002e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009576:	2043      	movs	r0, #67	; 0x43
 8009578:	f7f9 fc5f 	bl	8002e3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800957c:	bf00      	nop
 800957e:	3728      	adds	r7, #40	; 0x28
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	40023800 	.word	0x40023800
 8009588:	40020000 	.word	0x40020000

0800958c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80095a0:	4619      	mov	r1, r3
 80095a2:	4610      	mov	r0, r2
 80095a4:	f7fe fd22 	bl	8007fec <USBD_LL_SetupStage>
}
 80095a8:	bf00      	nop
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	460b      	mov	r3, r1
 80095ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80095c2:	78fa      	ldrb	r2, [r7, #3]
 80095c4:	6879      	ldr	r1, [r7, #4]
 80095c6:	4613      	mov	r3, r2
 80095c8:	00db      	lsls	r3, r3, #3
 80095ca:	1a9b      	subs	r3, r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	440b      	add	r3, r1
 80095d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	78fb      	ldrb	r3, [r7, #3]
 80095d8:	4619      	mov	r1, r3
 80095da:	f7fe fd5a 	bl	8008092 <USBD_LL_DataOutStage>
}
 80095de:	bf00      	nop
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095e6:	b580      	push	{r7, lr}
 80095e8:	b082      	sub	sp, #8
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
 80095ee:	460b      	mov	r3, r1
 80095f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80095f8:	78fa      	ldrb	r2, [r7, #3]
 80095fa:	6879      	ldr	r1, [r7, #4]
 80095fc:	4613      	mov	r3, r2
 80095fe:	00db      	lsls	r3, r3, #3
 8009600:	1a9b      	subs	r3, r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	440b      	add	r3, r1
 8009606:	3348      	adds	r3, #72	; 0x48
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	78fb      	ldrb	r3, [r7, #3]
 800960c:	4619      	mov	r1, r3
 800960e:	f7fe fda3 	bl	8008158 <USBD_LL_DataInStage>
}
 8009612:	bf00      	nop
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b082      	sub	sp, #8
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009628:	4618      	mov	r0, r3
 800962a:	f7fe fea7 	bl	800837c <USBD_LL_SOF>
}
 800962e:	bf00      	nop
 8009630:	3708      	adds	r7, #8
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009636:	b580      	push	{r7, lr}
 8009638:	b084      	sub	sp, #16
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800963e:	2301      	movs	r3, #1
 8009640:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	2b02      	cmp	r3, #2
 8009648:	d001      	beq.n	800964e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800964a:	f7f8 f9d3 	bl	80019f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009654:	7bfa      	ldrb	r2, [r7, #15]
 8009656:	4611      	mov	r1, r2
 8009658:	4618      	mov	r0, r3
 800965a:	f7fe fe54 	bl	8008306 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009664:	4618      	mov	r0, r3
 8009666:	f7fe fe0d 	bl	8008284 <USBD_LL_Reset>
}
 800966a:	bf00      	nop
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
	...

08009674 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009682:	4618      	mov	r0, r3
 8009684:	f7fe fe4f 	bl	8008326 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	6812      	ldr	r2, [r2, #0]
 8009696:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800969a:	f043 0301 	orr.w	r3, r3, #1
 800969e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6a1b      	ldr	r3, [r3, #32]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d005      	beq.n	80096b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096a8:	4b04      	ldr	r3, [pc, #16]	; (80096bc <HAL_PCD_SuspendCallback+0x48>)
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	4a03      	ldr	r2, [pc, #12]	; (80096bc <HAL_PCD_SuspendCallback+0x48>)
 80096ae:	f043 0306 	orr.w	r3, r3, #6
 80096b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80096b4:	bf00      	nop
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	e000ed00 	.word	0xe000ed00

080096c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7fe fe3e 	bl	8008350 <USBD_LL_Resume>
}
 80096d4:	bf00      	nop
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	460b      	mov	r3, r1
 80096e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80096ee:	78fa      	ldrb	r2, [r7, #3]
 80096f0:	4611      	mov	r1, r2
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7fe fe69 	bl	80083ca <USBD_LL_IsoOUTIncomplete>
}
 80096f8:	bf00      	nop
 80096fa:	3708      	adds	r7, #8
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	460b      	mov	r3, r1
 800970a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009712:	78fa      	ldrb	r2, [r7, #3]
 8009714:	4611      	mov	r1, r2
 8009716:	4618      	mov	r0, r3
 8009718:	f7fe fe4a 	bl	80083b0 <USBD_LL_IsoINIncomplete>
}
 800971c:	bf00      	nop
 800971e:	3708      	adds	r7, #8
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009732:	4618      	mov	r0, r3
 8009734:	f7fe fe56 	bl	80083e4 <USBD_LL_DevConnected>
}
 8009738:	bf00      	nop
 800973a:	3708      	adds	r7, #8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800974e:	4618      	mov	r0, r3
 8009750:	f7fe fe53 	bl	80083fa <USBD_LL_DevDisconnected>
}
 8009754:	bf00      	nop
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d13c      	bne.n	80097e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800976c:	4a20      	ldr	r2, [pc, #128]	; (80097f0 <USBD_LL_Init+0x94>)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a1e      	ldr	r2, [pc, #120]	; (80097f0 <USBD_LL_Init+0x94>)
 8009778:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800977c:	4b1c      	ldr	r3, [pc, #112]	; (80097f0 <USBD_LL_Init+0x94>)
 800977e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009782:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009784:	4b1a      	ldr	r3, [pc, #104]	; (80097f0 <USBD_LL_Init+0x94>)
 8009786:	2204      	movs	r2, #4
 8009788:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800978a:	4b19      	ldr	r3, [pc, #100]	; (80097f0 <USBD_LL_Init+0x94>)
 800978c:	2202      	movs	r2, #2
 800978e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009790:	4b17      	ldr	r3, [pc, #92]	; (80097f0 <USBD_LL_Init+0x94>)
 8009792:	2200      	movs	r2, #0
 8009794:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009796:	4b16      	ldr	r3, [pc, #88]	; (80097f0 <USBD_LL_Init+0x94>)
 8009798:	2202      	movs	r2, #2
 800979a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800979c:	4b14      	ldr	r3, [pc, #80]	; (80097f0 <USBD_LL_Init+0x94>)
 800979e:	2200      	movs	r2, #0
 80097a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80097a2:	4b13      	ldr	r3, [pc, #76]	; (80097f0 <USBD_LL_Init+0x94>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80097a8:	4b11      	ldr	r3, [pc, #68]	; (80097f0 <USBD_LL_Init+0x94>)
 80097aa:	2200      	movs	r2, #0
 80097ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80097ae:	4b10      	ldr	r3, [pc, #64]	; (80097f0 <USBD_LL_Init+0x94>)
 80097b0:	2200      	movs	r2, #0
 80097b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80097b4:	4b0e      	ldr	r3, [pc, #56]	; (80097f0 <USBD_LL_Init+0x94>)
 80097b6:	2200      	movs	r2, #0
 80097b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80097ba:	480d      	ldr	r0, [pc, #52]	; (80097f0 <USBD_LL_Init+0x94>)
 80097bc:	f7f9 fe44 	bl	8003448 <HAL_PCD_Init>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d001      	beq.n	80097ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80097c6:	f7f8 f915 	bl	80019f4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80097ca:	2180      	movs	r1, #128	; 0x80
 80097cc:	4808      	ldr	r0, [pc, #32]	; (80097f0 <USBD_LL_Init+0x94>)
 80097ce:	f7fa ffa2 	bl	8004716 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80097d2:	2240      	movs	r2, #64	; 0x40
 80097d4:	2100      	movs	r1, #0
 80097d6:	4806      	ldr	r0, [pc, #24]	; (80097f0 <USBD_LL_Init+0x94>)
 80097d8:	f7fa ff56 	bl	8004688 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80097dc:	2280      	movs	r2, #128	; 0x80
 80097de:	2101      	movs	r1, #1
 80097e0:	4803      	ldr	r0, [pc, #12]	; (80097f0 <USBD_LL_Init+0x94>)
 80097e2:	f7fa ff51 	bl	8004688 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	20001990 	.word	0x20001990

080097f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097fc:	2300      	movs	r3, #0
 80097fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009800:	2300      	movs	r3, #0
 8009802:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800980a:	4618      	mov	r0, r3
 800980c:	f7f9 ff39 	bl	8003682 <HAL_PCD_Start>
 8009810:	4603      	mov	r3, r0
 8009812:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009814:	7bfb      	ldrb	r3, [r7, #15]
 8009816:	4618      	mov	r0, r3
 8009818:	f000 f92a 	bl	8009a70 <USBD_Get_USB_Status>
 800981c:	4603      	mov	r3, r0
 800981e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009820:	7bbb      	ldrb	r3, [r7, #14]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b084      	sub	sp, #16
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	4608      	mov	r0, r1
 8009834:	4611      	mov	r1, r2
 8009836:	461a      	mov	r2, r3
 8009838:	4603      	mov	r3, r0
 800983a:	70fb      	strb	r3, [r7, #3]
 800983c:	460b      	mov	r3, r1
 800983e:	70bb      	strb	r3, [r7, #2]
 8009840:	4613      	mov	r3, r2
 8009842:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009844:	2300      	movs	r3, #0
 8009846:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009848:	2300      	movs	r3, #0
 800984a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009852:	78bb      	ldrb	r3, [r7, #2]
 8009854:	883a      	ldrh	r2, [r7, #0]
 8009856:	78f9      	ldrb	r1, [r7, #3]
 8009858:	f7fa fb1d 	bl	8003e96 <HAL_PCD_EP_Open>
 800985c:	4603      	mov	r3, r0
 800985e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009860:	7bfb      	ldrb	r3, [r7, #15]
 8009862:	4618      	mov	r0, r3
 8009864:	f000 f904 	bl	8009a70 <USBD_Get_USB_Status>
 8009868:	4603      	mov	r3, r0
 800986a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800986c:	7bbb      	ldrb	r3, [r7, #14]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b084      	sub	sp, #16
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	460b      	mov	r3, r1
 8009880:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009890:	78fa      	ldrb	r2, [r7, #3]
 8009892:	4611      	mov	r1, r2
 8009894:	4618      	mov	r0, r3
 8009896:	f7fa fb66 	bl	8003f66 <HAL_PCD_EP_Close>
 800989a:	4603      	mov	r3, r0
 800989c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800989e:	7bfb      	ldrb	r3, [r7, #15]
 80098a0:	4618      	mov	r0, r3
 80098a2:	f000 f8e5 	bl	8009a70 <USBD_Get_USB_Status>
 80098a6:	4603      	mov	r3, r0
 80098a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	460b      	mov	r3, r1
 80098be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098c0:	2300      	movs	r3, #0
 80098c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098ce:	78fa      	ldrb	r2, [r7, #3]
 80098d0:	4611      	mov	r1, r2
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7fa fc3e 	bl	8004154 <HAL_PCD_EP_SetStall>
 80098d8:	4603      	mov	r3, r0
 80098da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098dc:	7bfb      	ldrb	r3, [r7, #15]
 80098de:	4618      	mov	r0, r3
 80098e0:	f000 f8c6 	bl	8009a70 <USBD_Get_USB_Status>
 80098e4:	4603      	mov	r3, r0
 80098e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b084      	sub	sp, #16
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
 80098fa:	460b      	mov	r3, r1
 80098fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098fe:	2300      	movs	r3, #0
 8009900:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009902:	2300      	movs	r3, #0
 8009904:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800990c:	78fa      	ldrb	r2, [r7, #3]
 800990e:	4611      	mov	r1, r2
 8009910:	4618      	mov	r0, r3
 8009912:	f7fa fc83 	bl	800421c <HAL_PCD_EP_ClrStall>
 8009916:	4603      	mov	r3, r0
 8009918:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800991a:	7bfb      	ldrb	r3, [r7, #15]
 800991c:	4618      	mov	r0, r3
 800991e:	f000 f8a7 	bl	8009a70 <USBD_Get_USB_Status>
 8009922:	4603      	mov	r3, r0
 8009924:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009926:	7bbb      	ldrb	r3, [r7, #14]
}
 8009928:	4618      	mov	r0, r3
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009930:	b480      	push	{r7}
 8009932:	b085      	sub	sp, #20
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	460b      	mov	r3, r1
 800993a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009942:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009944:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009948:	2b00      	cmp	r3, #0
 800994a:	da0b      	bge.n	8009964 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800994c:	78fb      	ldrb	r3, [r7, #3]
 800994e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009952:	68f9      	ldr	r1, [r7, #12]
 8009954:	4613      	mov	r3, r2
 8009956:	00db      	lsls	r3, r3, #3
 8009958:	1a9b      	subs	r3, r3, r2
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	440b      	add	r3, r1
 800995e:	333e      	adds	r3, #62	; 0x3e
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	e00b      	b.n	800997c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009964:	78fb      	ldrb	r3, [r7, #3]
 8009966:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800996a:	68f9      	ldr	r1, [r7, #12]
 800996c:	4613      	mov	r3, r2
 800996e:	00db      	lsls	r3, r3, #3
 8009970:	1a9b      	subs	r3, r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	440b      	add	r3, r1
 8009976:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800997a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800997c:	4618      	mov	r0, r3
 800997e:	3714      	adds	r7, #20
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	460b      	mov	r3, r1
 8009992:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009994:	2300      	movs	r3, #0
 8009996:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009998:	2300      	movs	r3, #0
 800999a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099a2:	78fa      	ldrb	r2, [r7, #3]
 80099a4:	4611      	mov	r1, r2
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7fa fa50 	bl	8003e4c <HAL_PCD_SetAddress>
 80099ac:	4603      	mov	r3, r0
 80099ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099b0:	7bfb      	ldrb	r3, [r7, #15]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f000 f85c 	bl	8009a70 <USBD_Get_USB_Status>
 80099b8:	4603      	mov	r3, r0
 80099ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}

080099c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b086      	sub	sp, #24
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	60f8      	str	r0, [r7, #12]
 80099ce:	607a      	str	r2, [r7, #4]
 80099d0:	603b      	str	r3, [r7, #0]
 80099d2:	460b      	mov	r3, r1
 80099d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099d6:	2300      	movs	r3, #0
 80099d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099da:	2300      	movs	r3, #0
 80099dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099e4:	7af9      	ldrb	r1, [r7, #11]
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	f7fa fb69 	bl	80040c0 <HAL_PCD_EP_Transmit>
 80099ee:	4603      	mov	r3, r0
 80099f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099f2:	7dfb      	ldrb	r3, [r7, #23]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f000 f83b 	bl	8009a70 <USBD_Get_USB_Status>
 80099fa:	4603      	mov	r3, r0
 80099fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3718      	adds	r7, #24
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b086      	sub	sp, #24
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	607a      	str	r2, [r7, #4]
 8009a12:	603b      	str	r3, [r7, #0]
 8009a14:	460b      	mov	r3, r1
 8009a16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a26:	7af9      	ldrb	r1, [r7, #11]
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	f7fa fae5 	bl	8003ffa <HAL_PCD_EP_Receive>
 8009a30:	4603      	mov	r3, r0
 8009a32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a34:	7dfb      	ldrb	r3, [r7, #23]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 f81a 	bl	8009a70 <USBD_Get_USB_Status>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a40:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3718      	adds	r7, #24
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b082      	sub	sp, #8
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	460b      	mov	r3, r1
 8009a54:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a5c:	78fa      	ldrb	r2, [r7, #3]
 8009a5e:	4611      	mov	r1, r2
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7fa fb15 	bl	8004090 <HAL_PCD_EP_GetRxCount>
 8009a66:	4603      	mov	r3, r0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3708      	adds	r7, #8
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	4603      	mov	r3, r0
 8009a78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a7e:	79fb      	ldrb	r3, [r7, #7]
 8009a80:	2b03      	cmp	r3, #3
 8009a82:	d817      	bhi.n	8009ab4 <USBD_Get_USB_Status+0x44>
 8009a84:	a201      	add	r2, pc, #4	; (adr r2, 8009a8c <USBD_Get_USB_Status+0x1c>)
 8009a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8a:	bf00      	nop
 8009a8c:	08009a9d 	.word	0x08009a9d
 8009a90:	08009aa3 	.word	0x08009aa3
 8009a94:	08009aa9 	.word	0x08009aa9
 8009a98:	08009aaf 	.word	0x08009aaf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009aa0:	e00b      	b.n	8009aba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	73fb      	strb	r3, [r7, #15]
    break;
 8009aa6:	e008      	b.n	8009aba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	73fb      	strb	r3, [r7, #15]
    break;
 8009aac:	e005      	b.n	8009aba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ab2:	e002      	b.n	8009aba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ab8:	bf00      	nop
  }
  return usb_status;
 8009aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3714      	adds	r7, #20
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <__errno>:
 8009ac8:	4b01      	ldr	r3, [pc, #4]	; (8009ad0 <__errno+0x8>)
 8009aca:	6818      	ldr	r0, [r3, #0]
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	2000018c 	.word	0x2000018c

08009ad4 <__libc_init_array>:
 8009ad4:	b570      	push	{r4, r5, r6, lr}
 8009ad6:	4e0d      	ldr	r6, [pc, #52]	; (8009b0c <__libc_init_array+0x38>)
 8009ad8:	4c0d      	ldr	r4, [pc, #52]	; (8009b10 <__libc_init_array+0x3c>)
 8009ada:	1ba4      	subs	r4, r4, r6
 8009adc:	10a4      	asrs	r4, r4, #2
 8009ade:	2500      	movs	r5, #0
 8009ae0:	42a5      	cmp	r5, r4
 8009ae2:	d109      	bne.n	8009af8 <__libc_init_array+0x24>
 8009ae4:	4e0b      	ldr	r6, [pc, #44]	; (8009b14 <__libc_init_array+0x40>)
 8009ae6:	4c0c      	ldr	r4, [pc, #48]	; (8009b18 <__libc_init_array+0x44>)
 8009ae8:	f002 f87a 	bl	800bbe0 <_init>
 8009aec:	1ba4      	subs	r4, r4, r6
 8009aee:	10a4      	asrs	r4, r4, #2
 8009af0:	2500      	movs	r5, #0
 8009af2:	42a5      	cmp	r5, r4
 8009af4:	d105      	bne.n	8009b02 <__libc_init_array+0x2e>
 8009af6:	bd70      	pop	{r4, r5, r6, pc}
 8009af8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009afc:	4798      	blx	r3
 8009afe:	3501      	adds	r5, #1
 8009b00:	e7ee      	b.n	8009ae0 <__libc_init_array+0xc>
 8009b02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b06:	4798      	blx	r3
 8009b08:	3501      	adds	r5, #1
 8009b0a:	e7f2      	b.n	8009af2 <__libc_init_array+0x1e>
 8009b0c:	0800bfd8 	.word	0x0800bfd8
 8009b10:	0800bfd8 	.word	0x0800bfd8
 8009b14:	0800bfd8 	.word	0x0800bfd8
 8009b18:	0800bfdc 	.word	0x0800bfdc

08009b1c <malloc>:
 8009b1c:	4b02      	ldr	r3, [pc, #8]	; (8009b28 <malloc+0xc>)
 8009b1e:	4601      	mov	r1, r0
 8009b20:	6818      	ldr	r0, [r3, #0]
 8009b22:	f000 b861 	b.w	8009be8 <_malloc_r>
 8009b26:	bf00      	nop
 8009b28:	2000018c 	.word	0x2000018c

08009b2c <free>:
 8009b2c:	4b02      	ldr	r3, [pc, #8]	; (8009b38 <free+0xc>)
 8009b2e:	4601      	mov	r1, r0
 8009b30:	6818      	ldr	r0, [r3, #0]
 8009b32:	f000 b80b 	b.w	8009b4c <_free_r>
 8009b36:	bf00      	nop
 8009b38:	2000018c 	.word	0x2000018c

08009b3c <memset>:
 8009b3c:	4402      	add	r2, r0
 8009b3e:	4603      	mov	r3, r0
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d100      	bne.n	8009b46 <memset+0xa>
 8009b44:	4770      	bx	lr
 8009b46:	f803 1b01 	strb.w	r1, [r3], #1
 8009b4a:	e7f9      	b.n	8009b40 <memset+0x4>

08009b4c <_free_r>:
 8009b4c:	b538      	push	{r3, r4, r5, lr}
 8009b4e:	4605      	mov	r5, r0
 8009b50:	2900      	cmp	r1, #0
 8009b52:	d045      	beq.n	8009be0 <_free_r+0x94>
 8009b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b58:	1f0c      	subs	r4, r1, #4
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	bfb8      	it	lt
 8009b5e:	18e4      	addlt	r4, r4, r3
 8009b60:	f001 fb9b 	bl	800b29a <__malloc_lock>
 8009b64:	4a1f      	ldr	r2, [pc, #124]	; (8009be4 <_free_r+0x98>)
 8009b66:	6813      	ldr	r3, [r2, #0]
 8009b68:	4610      	mov	r0, r2
 8009b6a:	b933      	cbnz	r3, 8009b7a <_free_r+0x2e>
 8009b6c:	6063      	str	r3, [r4, #4]
 8009b6e:	6014      	str	r4, [r2, #0]
 8009b70:	4628      	mov	r0, r5
 8009b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b76:	f001 bb91 	b.w	800b29c <__malloc_unlock>
 8009b7a:	42a3      	cmp	r3, r4
 8009b7c:	d90c      	bls.n	8009b98 <_free_r+0x4c>
 8009b7e:	6821      	ldr	r1, [r4, #0]
 8009b80:	1862      	adds	r2, r4, r1
 8009b82:	4293      	cmp	r3, r2
 8009b84:	bf04      	itt	eq
 8009b86:	681a      	ldreq	r2, [r3, #0]
 8009b88:	685b      	ldreq	r3, [r3, #4]
 8009b8a:	6063      	str	r3, [r4, #4]
 8009b8c:	bf04      	itt	eq
 8009b8e:	1852      	addeq	r2, r2, r1
 8009b90:	6022      	streq	r2, [r4, #0]
 8009b92:	6004      	str	r4, [r0, #0]
 8009b94:	e7ec      	b.n	8009b70 <_free_r+0x24>
 8009b96:	4613      	mov	r3, r2
 8009b98:	685a      	ldr	r2, [r3, #4]
 8009b9a:	b10a      	cbz	r2, 8009ba0 <_free_r+0x54>
 8009b9c:	42a2      	cmp	r2, r4
 8009b9e:	d9fa      	bls.n	8009b96 <_free_r+0x4a>
 8009ba0:	6819      	ldr	r1, [r3, #0]
 8009ba2:	1858      	adds	r0, r3, r1
 8009ba4:	42a0      	cmp	r0, r4
 8009ba6:	d10b      	bne.n	8009bc0 <_free_r+0x74>
 8009ba8:	6820      	ldr	r0, [r4, #0]
 8009baa:	4401      	add	r1, r0
 8009bac:	1858      	adds	r0, r3, r1
 8009bae:	4282      	cmp	r2, r0
 8009bb0:	6019      	str	r1, [r3, #0]
 8009bb2:	d1dd      	bne.n	8009b70 <_free_r+0x24>
 8009bb4:	6810      	ldr	r0, [r2, #0]
 8009bb6:	6852      	ldr	r2, [r2, #4]
 8009bb8:	605a      	str	r2, [r3, #4]
 8009bba:	4401      	add	r1, r0
 8009bbc:	6019      	str	r1, [r3, #0]
 8009bbe:	e7d7      	b.n	8009b70 <_free_r+0x24>
 8009bc0:	d902      	bls.n	8009bc8 <_free_r+0x7c>
 8009bc2:	230c      	movs	r3, #12
 8009bc4:	602b      	str	r3, [r5, #0]
 8009bc6:	e7d3      	b.n	8009b70 <_free_r+0x24>
 8009bc8:	6820      	ldr	r0, [r4, #0]
 8009bca:	1821      	adds	r1, r4, r0
 8009bcc:	428a      	cmp	r2, r1
 8009bce:	bf04      	itt	eq
 8009bd0:	6811      	ldreq	r1, [r2, #0]
 8009bd2:	6852      	ldreq	r2, [r2, #4]
 8009bd4:	6062      	str	r2, [r4, #4]
 8009bd6:	bf04      	itt	eq
 8009bd8:	1809      	addeq	r1, r1, r0
 8009bda:	6021      	streq	r1, [r4, #0]
 8009bdc:	605c      	str	r4, [r3, #4]
 8009bde:	e7c7      	b.n	8009b70 <_free_r+0x24>
 8009be0:	bd38      	pop	{r3, r4, r5, pc}
 8009be2:	bf00      	nop
 8009be4:	20000380 	.word	0x20000380

08009be8 <_malloc_r>:
 8009be8:	b570      	push	{r4, r5, r6, lr}
 8009bea:	1ccd      	adds	r5, r1, #3
 8009bec:	f025 0503 	bic.w	r5, r5, #3
 8009bf0:	3508      	adds	r5, #8
 8009bf2:	2d0c      	cmp	r5, #12
 8009bf4:	bf38      	it	cc
 8009bf6:	250c      	movcc	r5, #12
 8009bf8:	2d00      	cmp	r5, #0
 8009bfa:	4606      	mov	r6, r0
 8009bfc:	db01      	blt.n	8009c02 <_malloc_r+0x1a>
 8009bfe:	42a9      	cmp	r1, r5
 8009c00:	d903      	bls.n	8009c0a <_malloc_r+0x22>
 8009c02:	230c      	movs	r3, #12
 8009c04:	6033      	str	r3, [r6, #0]
 8009c06:	2000      	movs	r0, #0
 8009c08:	bd70      	pop	{r4, r5, r6, pc}
 8009c0a:	f001 fb46 	bl	800b29a <__malloc_lock>
 8009c0e:	4a21      	ldr	r2, [pc, #132]	; (8009c94 <_malloc_r+0xac>)
 8009c10:	6814      	ldr	r4, [r2, #0]
 8009c12:	4621      	mov	r1, r4
 8009c14:	b991      	cbnz	r1, 8009c3c <_malloc_r+0x54>
 8009c16:	4c20      	ldr	r4, [pc, #128]	; (8009c98 <_malloc_r+0xb0>)
 8009c18:	6823      	ldr	r3, [r4, #0]
 8009c1a:	b91b      	cbnz	r3, 8009c24 <_malloc_r+0x3c>
 8009c1c:	4630      	mov	r0, r6
 8009c1e:	f000 fc99 	bl	800a554 <_sbrk_r>
 8009c22:	6020      	str	r0, [r4, #0]
 8009c24:	4629      	mov	r1, r5
 8009c26:	4630      	mov	r0, r6
 8009c28:	f000 fc94 	bl	800a554 <_sbrk_r>
 8009c2c:	1c43      	adds	r3, r0, #1
 8009c2e:	d124      	bne.n	8009c7a <_malloc_r+0x92>
 8009c30:	230c      	movs	r3, #12
 8009c32:	6033      	str	r3, [r6, #0]
 8009c34:	4630      	mov	r0, r6
 8009c36:	f001 fb31 	bl	800b29c <__malloc_unlock>
 8009c3a:	e7e4      	b.n	8009c06 <_malloc_r+0x1e>
 8009c3c:	680b      	ldr	r3, [r1, #0]
 8009c3e:	1b5b      	subs	r3, r3, r5
 8009c40:	d418      	bmi.n	8009c74 <_malloc_r+0x8c>
 8009c42:	2b0b      	cmp	r3, #11
 8009c44:	d90f      	bls.n	8009c66 <_malloc_r+0x7e>
 8009c46:	600b      	str	r3, [r1, #0]
 8009c48:	50cd      	str	r5, [r1, r3]
 8009c4a:	18cc      	adds	r4, r1, r3
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	f001 fb25 	bl	800b29c <__malloc_unlock>
 8009c52:	f104 000b 	add.w	r0, r4, #11
 8009c56:	1d23      	adds	r3, r4, #4
 8009c58:	f020 0007 	bic.w	r0, r0, #7
 8009c5c:	1ac3      	subs	r3, r0, r3
 8009c5e:	d0d3      	beq.n	8009c08 <_malloc_r+0x20>
 8009c60:	425a      	negs	r2, r3
 8009c62:	50e2      	str	r2, [r4, r3]
 8009c64:	e7d0      	b.n	8009c08 <_malloc_r+0x20>
 8009c66:	428c      	cmp	r4, r1
 8009c68:	684b      	ldr	r3, [r1, #4]
 8009c6a:	bf16      	itet	ne
 8009c6c:	6063      	strne	r3, [r4, #4]
 8009c6e:	6013      	streq	r3, [r2, #0]
 8009c70:	460c      	movne	r4, r1
 8009c72:	e7eb      	b.n	8009c4c <_malloc_r+0x64>
 8009c74:	460c      	mov	r4, r1
 8009c76:	6849      	ldr	r1, [r1, #4]
 8009c78:	e7cc      	b.n	8009c14 <_malloc_r+0x2c>
 8009c7a:	1cc4      	adds	r4, r0, #3
 8009c7c:	f024 0403 	bic.w	r4, r4, #3
 8009c80:	42a0      	cmp	r0, r4
 8009c82:	d005      	beq.n	8009c90 <_malloc_r+0xa8>
 8009c84:	1a21      	subs	r1, r4, r0
 8009c86:	4630      	mov	r0, r6
 8009c88:	f000 fc64 	bl	800a554 <_sbrk_r>
 8009c8c:	3001      	adds	r0, #1
 8009c8e:	d0cf      	beq.n	8009c30 <_malloc_r+0x48>
 8009c90:	6025      	str	r5, [r4, #0]
 8009c92:	e7db      	b.n	8009c4c <_malloc_r+0x64>
 8009c94:	20000380 	.word	0x20000380
 8009c98:	20000384 	.word	0x20000384

08009c9c <__cvt>:
 8009c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ca0:	ec55 4b10 	vmov	r4, r5, d0
 8009ca4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009ca6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009caa:	2d00      	cmp	r5, #0
 8009cac:	460e      	mov	r6, r1
 8009cae:	4691      	mov	r9, r2
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	bfb8      	it	lt
 8009cb4:	4622      	movlt	r2, r4
 8009cb6:	462b      	mov	r3, r5
 8009cb8:	f027 0720 	bic.w	r7, r7, #32
 8009cbc:	bfbb      	ittet	lt
 8009cbe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009cc2:	461d      	movlt	r5, r3
 8009cc4:	2300      	movge	r3, #0
 8009cc6:	232d      	movlt	r3, #45	; 0x2d
 8009cc8:	bfb8      	it	lt
 8009cca:	4614      	movlt	r4, r2
 8009ccc:	2f46      	cmp	r7, #70	; 0x46
 8009cce:	700b      	strb	r3, [r1, #0]
 8009cd0:	d004      	beq.n	8009cdc <__cvt+0x40>
 8009cd2:	2f45      	cmp	r7, #69	; 0x45
 8009cd4:	d100      	bne.n	8009cd8 <__cvt+0x3c>
 8009cd6:	3601      	adds	r6, #1
 8009cd8:	2102      	movs	r1, #2
 8009cda:	e000      	b.n	8009cde <__cvt+0x42>
 8009cdc:	2103      	movs	r1, #3
 8009cde:	ab03      	add	r3, sp, #12
 8009ce0:	9301      	str	r3, [sp, #4]
 8009ce2:	ab02      	add	r3, sp, #8
 8009ce4:	9300      	str	r3, [sp, #0]
 8009ce6:	4632      	mov	r2, r6
 8009ce8:	4653      	mov	r3, sl
 8009cea:	ec45 4b10 	vmov	d0, r4, r5
 8009cee:	f000 fd03 	bl	800a6f8 <_dtoa_r>
 8009cf2:	2f47      	cmp	r7, #71	; 0x47
 8009cf4:	4680      	mov	r8, r0
 8009cf6:	d102      	bne.n	8009cfe <__cvt+0x62>
 8009cf8:	f019 0f01 	tst.w	r9, #1
 8009cfc:	d026      	beq.n	8009d4c <__cvt+0xb0>
 8009cfe:	2f46      	cmp	r7, #70	; 0x46
 8009d00:	eb08 0906 	add.w	r9, r8, r6
 8009d04:	d111      	bne.n	8009d2a <__cvt+0x8e>
 8009d06:	f898 3000 	ldrb.w	r3, [r8]
 8009d0a:	2b30      	cmp	r3, #48	; 0x30
 8009d0c:	d10a      	bne.n	8009d24 <__cvt+0x88>
 8009d0e:	2200      	movs	r2, #0
 8009d10:	2300      	movs	r3, #0
 8009d12:	4620      	mov	r0, r4
 8009d14:	4629      	mov	r1, r5
 8009d16:	f7f6 fedf 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d1a:	b918      	cbnz	r0, 8009d24 <__cvt+0x88>
 8009d1c:	f1c6 0601 	rsb	r6, r6, #1
 8009d20:	f8ca 6000 	str.w	r6, [sl]
 8009d24:	f8da 3000 	ldr.w	r3, [sl]
 8009d28:	4499      	add	r9, r3
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	4620      	mov	r0, r4
 8009d30:	4629      	mov	r1, r5
 8009d32:	f7f6 fed1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d36:	b938      	cbnz	r0, 8009d48 <__cvt+0xac>
 8009d38:	2230      	movs	r2, #48	; 0x30
 8009d3a:	9b03      	ldr	r3, [sp, #12]
 8009d3c:	454b      	cmp	r3, r9
 8009d3e:	d205      	bcs.n	8009d4c <__cvt+0xb0>
 8009d40:	1c59      	adds	r1, r3, #1
 8009d42:	9103      	str	r1, [sp, #12]
 8009d44:	701a      	strb	r2, [r3, #0]
 8009d46:	e7f8      	b.n	8009d3a <__cvt+0x9e>
 8009d48:	f8cd 900c 	str.w	r9, [sp, #12]
 8009d4c:	9b03      	ldr	r3, [sp, #12]
 8009d4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d50:	eba3 0308 	sub.w	r3, r3, r8
 8009d54:	4640      	mov	r0, r8
 8009d56:	6013      	str	r3, [r2, #0]
 8009d58:	b004      	add	sp, #16
 8009d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009d5e <__exponent>:
 8009d5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d60:	2900      	cmp	r1, #0
 8009d62:	4604      	mov	r4, r0
 8009d64:	bfba      	itte	lt
 8009d66:	4249      	neglt	r1, r1
 8009d68:	232d      	movlt	r3, #45	; 0x2d
 8009d6a:	232b      	movge	r3, #43	; 0x2b
 8009d6c:	2909      	cmp	r1, #9
 8009d6e:	f804 2b02 	strb.w	r2, [r4], #2
 8009d72:	7043      	strb	r3, [r0, #1]
 8009d74:	dd20      	ble.n	8009db8 <__exponent+0x5a>
 8009d76:	f10d 0307 	add.w	r3, sp, #7
 8009d7a:	461f      	mov	r7, r3
 8009d7c:	260a      	movs	r6, #10
 8009d7e:	fb91 f5f6 	sdiv	r5, r1, r6
 8009d82:	fb06 1115 	mls	r1, r6, r5, r1
 8009d86:	3130      	adds	r1, #48	; 0x30
 8009d88:	2d09      	cmp	r5, #9
 8009d8a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009d8e:	f103 32ff 	add.w	r2, r3, #4294967295
 8009d92:	4629      	mov	r1, r5
 8009d94:	dc09      	bgt.n	8009daa <__exponent+0x4c>
 8009d96:	3130      	adds	r1, #48	; 0x30
 8009d98:	3b02      	subs	r3, #2
 8009d9a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009d9e:	42bb      	cmp	r3, r7
 8009da0:	4622      	mov	r2, r4
 8009da2:	d304      	bcc.n	8009dae <__exponent+0x50>
 8009da4:	1a10      	subs	r0, r2, r0
 8009da6:	b003      	add	sp, #12
 8009da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009daa:	4613      	mov	r3, r2
 8009dac:	e7e7      	b.n	8009d7e <__exponent+0x20>
 8009dae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009db2:	f804 2b01 	strb.w	r2, [r4], #1
 8009db6:	e7f2      	b.n	8009d9e <__exponent+0x40>
 8009db8:	2330      	movs	r3, #48	; 0x30
 8009dba:	4419      	add	r1, r3
 8009dbc:	7083      	strb	r3, [r0, #2]
 8009dbe:	1d02      	adds	r2, r0, #4
 8009dc0:	70c1      	strb	r1, [r0, #3]
 8009dc2:	e7ef      	b.n	8009da4 <__exponent+0x46>

08009dc4 <_printf_float>:
 8009dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc8:	b08d      	sub	sp, #52	; 0x34
 8009dca:	460c      	mov	r4, r1
 8009dcc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009dd0:	4616      	mov	r6, r2
 8009dd2:	461f      	mov	r7, r3
 8009dd4:	4605      	mov	r5, r0
 8009dd6:	f001 fa47 	bl	800b268 <_localeconv_r>
 8009dda:	6803      	ldr	r3, [r0, #0]
 8009ddc:	9304      	str	r3, [sp, #16]
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7f6 f9fe 	bl	80001e0 <strlen>
 8009de4:	2300      	movs	r3, #0
 8009de6:	930a      	str	r3, [sp, #40]	; 0x28
 8009de8:	f8d8 3000 	ldr.w	r3, [r8]
 8009dec:	9005      	str	r0, [sp, #20]
 8009dee:	3307      	adds	r3, #7
 8009df0:	f023 0307 	bic.w	r3, r3, #7
 8009df4:	f103 0208 	add.w	r2, r3, #8
 8009df8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009dfc:	f8d4 b000 	ldr.w	fp, [r4]
 8009e00:	f8c8 2000 	str.w	r2, [r8]
 8009e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e08:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009e0c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009e10:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e14:	9307      	str	r3, [sp, #28]
 8009e16:	f8cd 8018 	str.w	r8, [sp, #24]
 8009e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e1e:	4ba7      	ldr	r3, [pc, #668]	; (800a0bc <_printf_float+0x2f8>)
 8009e20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e24:	f7f6 fe8a 	bl	8000b3c <__aeabi_dcmpun>
 8009e28:	bb70      	cbnz	r0, 8009e88 <_printf_float+0xc4>
 8009e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e2e:	4ba3      	ldr	r3, [pc, #652]	; (800a0bc <_printf_float+0x2f8>)
 8009e30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e34:	f7f6 fe64 	bl	8000b00 <__aeabi_dcmple>
 8009e38:	bb30      	cbnz	r0, 8009e88 <_printf_float+0xc4>
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	4640      	mov	r0, r8
 8009e40:	4649      	mov	r1, r9
 8009e42:	f7f6 fe53 	bl	8000aec <__aeabi_dcmplt>
 8009e46:	b110      	cbz	r0, 8009e4e <_printf_float+0x8a>
 8009e48:	232d      	movs	r3, #45	; 0x2d
 8009e4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e4e:	4a9c      	ldr	r2, [pc, #624]	; (800a0c0 <_printf_float+0x2fc>)
 8009e50:	4b9c      	ldr	r3, [pc, #624]	; (800a0c4 <_printf_float+0x300>)
 8009e52:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009e56:	bf8c      	ite	hi
 8009e58:	4690      	movhi	r8, r2
 8009e5a:	4698      	movls	r8, r3
 8009e5c:	2303      	movs	r3, #3
 8009e5e:	f02b 0204 	bic.w	r2, fp, #4
 8009e62:	6123      	str	r3, [r4, #16]
 8009e64:	6022      	str	r2, [r4, #0]
 8009e66:	f04f 0900 	mov.w	r9, #0
 8009e6a:	9700      	str	r7, [sp, #0]
 8009e6c:	4633      	mov	r3, r6
 8009e6e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009e70:	4621      	mov	r1, r4
 8009e72:	4628      	mov	r0, r5
 8009e74:	f000 f9e6 	bl	800a244 <_printf_common>
 8009e78:	3001      	adds	r0, #1
 8009e7a:	f040 808d 	bne.w	8009f98 <_printf_float+0x1d4>
 8009e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e82:	b00d      	add	sp, #52	; 0x34
 8009e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e88:	4642      	mov	r2, r8
 8009e8a:	464b      	mov	r3, r9
 8009e8c:	4640      	mov	r0, r8
 8009e8e:	4649      	mov	r1, r9
 8009e90:	f7f6 fe54 	bl	8000b3c <__aeabi_dcmpun>
 8009e94:	b110      	cbz	r0, 8009e9c <_printf_float+0xd8>
 8009e96:	4a8c      	ldr	r2, [pc, #560]	; (800a0c8 <_printf_float+0x304>)
 8009e98:	4b8c      	ldr	r3, [pc, #560]	; (800a0cc <_printf_float+0x308>)
 8009e9a:	e7da      	b.n	8009e52 <_printf_float+0x8e>
 8009e9c:	6861      	ldr	r1, [r4, #4]
 8009e9e:	1c4b      	adds	r3, r1, #1
 8009ea0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009ea4:	a80a      	add	r0, sp, #40	; 0x28
 8009ea6:	d13e      	bne.n	8009f26 <_printf_float+0x162>
 8009ea8:	2306      	movs	r3, #6
 8009eaa:	6063      	str	r3, [r4, #4]
 8009eac:	2300      	movs	r3, #0
 8009eae:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009eb2:	ab09      	add	r3, sp, #36	; 0x24
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	ec49 8b10 	vmov	d0, r8, r9
 8009eba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009ebe:	6022      	str	r2, [r4, #0]
 8009ec0:	f8cd a004 	str.w	sl, [sp, #4]
 8009ec4:	6861      	ldr	r1, [r4, #4]
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	f7ff fee8 	bl	8009c9c <__cvt>
 8009ecc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009ed0:	2b47      	cmp	r3, #71	; 0x47
 8009ed2:	4680      	mov	r8, r0
 8009ed4:	d109      	bne.n	8009eea <_printf_float+0x126>
 8009ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ed8:	1cd8      	adds	r0, r3, #3
 8009eda:	db02      	blt.n	8009ee2 <_printf_float+0x11e>
 8009edc:	6862      	ldr	r2, [r4, #4]
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	dd47      	ble.n	8009f72 <_printf_float+0x1ae>
 8009ee2:	f1aa 0a02 	sub.w	sl, sl, #2
 8009ee6:	fa5f fa8a 	uxtb.w	sl, sl
 8009eea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009eee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ef0:	d824      	bhi.n	8009f3c <_printf_float+0x178>
 8009ef2:	3901      	subs	r1, #1
 8009ef4:	4652      	mov	r2, sl
 8009ef6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009efa:	9109      	str	r1, [sp, #36]	; 0x24
 8009efc:	f7ff ff2f 	bl	8009d5e <__exponent>
 8009f00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f02:	1813      	adds	r3, r2, r0
 8009f04:	2a01      	cmp	r2, #1
 8009f06:	4681      	mov	r9, r0
 8009f08:	6123      	str	r3, [r4, #16]
 8009f0a:	dc02      	bgt.n	8009f12 <_printf_float+0x14e>
 8009f0c:	6822      	ldr	r2, [r4, #0]
 8009f0e:	07d1      	lsls	r1, r2, #31
 8009f10:	d501      	bpl.n	8009f16 <_printf_float+0x152>
 8009f12:	3301      	adds	r3, #1
 8009f14:	6123      	str	r3, [r4, #16]
 8009f16:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d0a5      	beq.n	8009e6a <_printf_float+0xa6>
 8009f1e:	232d      	movs	r3, #45	; 0x2d
 8009f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f24:	e7a1      	b.n	8009e6a <_printf_float+0xa6>
 8009f26:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009f2a:	f000 8177 	beq.w	800a21c <_printf_float+0x458>
 8009f2e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009f32:	d1bb      	bne.n	8009eac <_printf_float+0xe8>
 8009f34:	2900      	cmp	r1, #0
 8009f36:	d1b9      	bne.n	8009eac <_printf_float+0xe8>
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e7b6      	b.n	8009eaa <_printf_float+0xe6>
 8009f3c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009f40:	d119      	bne.n	8009f76 <_printf_float+0x1b2>
 8009f42:	2900      	cmp	r1, #0
 8009f44:	6863      	ldr	r3, [r4, #4]
 8009f46:	dd0c      	ble.n	8009f62 <_printf_float+0x19e>
 8009f48:	6121      	str	r1, [r4, #16]
 8009f4a:	b913      	cbnz	r3, 8009f52 <_printf_float+0x18e>
 8009f4c:	6822      	ldr	r2, [r4, #0]
 8009f4e:	07d2      	lsls	r2, r2, #31
 8009f50:	d502      	bpl.n	8009f58 <_printf_float+0x194>
 8009f52:	3301      	adds	r3, #1
 8009f54:	440b      	add	r3, r1
 8009f56:	6123      	str	r3, [r4, #16]
 8009f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f5a:	65a3      	str	r3, [r4, #88]	; 0x58
 8009f5c:	f04f 0900 	mov.w	r9, #0
 8009f60:	e7d9      	b.n	8009f16 <_printf_float+0x152>
 8009f62:	b913      	cbnz	r3, 8009f6a <_printf_float+0x1a6>
 8009f64:	6822      	ldr	r2, [r4, #0]
 8009f66:	07d0      	lsls	r0, r2, #31
 8009f68:	d501      	bpl.n	8009f6e <_printf_float+0x1aa>
 8009f6a:	3302      	adds	r3, #2
 8009f6c:	e7f3      	b.n	8009f56 <_printf_float+0x192>
 8009f6e:	2301      	movs	r3, #1
 8009f70:	e7f1      	b.n	8009f56 <_printf_float+0x192>
 8009f72:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009f76:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	db05      	blt.n	8009f8a <_printf_float+0x1c6>
 8009f7e:	6822      	ldr	r2, [r4, #0]
 8009f80:	6123      	str	r3, [r4, #16]
 8009f82:	07d1      	lsls	r1, r2, #31
 8009f84:	d5e8      	bpl.n	8009f58 <_printf_float+0x194>
 8009f86:	3301      	adds	r3, #1
 8009f88:	e7e5      	b.n	8009f56 <_printf_float+0x192>
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	bfd4      	ite	le
 8009f8e:	f1c3 0302 	rsble	r3, r3, #2
 8009f92:	2301      	movgt	r3, #1
 8009f94:	4413      	add	r3, r2
 8009f96:	e7de      	b.n	8009f56 <_printf_float+0x192>
 8009f98:	6823      	ldr	r3, [r4, #0]
 8009f9a:	055a      	lsls	r2, r3, #21
 8009f9c:	d407      	bmi.n	8009fae <_printf_float+0x1ea>
 8009f9e:	6923      	ldr	r3, [r4, #16]
 8009fa0:	4642      	mov	r2, r8
 8009fa2:	4631      	mov	r1, r6
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	47b8      	blx	r7
 8009fa8:	3001      	adds	r0, #1
 8009faa:	d12b      	bne.n	800a004 <_printf_float+0x240>
 8009fac:	e767      	b.n	8009e7e <_printf_float+0xba>
 8009fae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009fb2:	f240 80dc 	bls.w	800a16e <_printf_float+0x3aa>
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	2300      	movs	r3, #0
 8009fba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009fbe:	f7f6 fd8b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	d033      	beq.n	800a02e <_printf_float+0x26a>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	4a41      	ldr	r2, [pc, #260]	; (800a0d0 <_printf_float+0x30c>)
 8009fca:	4631      	mov	r1, r6
 8009fcc:	4628      	mov	r0, r5
 8009fce:	47b8      	blx	r7
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	f43f af54 	beq.w	8009e7e <_printf_float+0xba>
 8009fd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	db02      	blt.n	8009fe4 <_printf_float+0x220>
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	07d8      	lsls	r0, r3, #31
 8009fe2:	d50f      	bpl.n	800a004 <_printf_float+0x240>
 8009fe4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fe8:	4631      	mov	r1, r6
 8009fea:	4628      	mov	r0, r5
 8009fec:	47b8      	blx	r7
 8009fee:	3001      	adds	r0, #1
 8009ff0:	f43f af45 	beq.w	8009e7e <_printf_float+0xba>
 8009ff4:	f04f 0800 	mov.w	r8, #0
 8009ff8:	f104 091a 	add.w	r9, r4, #26
 8009ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ffe:	3b01      	subs	r3, #1
 800a000:	4543      	cmp	r3, r8
 800a002:	dc09      	bgt.n	800a018 <_printf_float+0x254>
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	079b      	lsls	r3, r3, #30
 800a008:	f100 8103 	bmi.w	800a212 <_printf_float+0x44e>
 800a00c:	68e0      	ldr	r0, [r4, #12]
 800a00e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a010:	4298      	cmp	r0, r3
 800a012:	bfb8      	it	lt
 800a014:	4618      	movlt	r0, r3
 800a016:	e734      	b.n	8009e82 <_printf_float+0xbe>
 800a018:	2301      	movs	r3, #1
 800a01a:	464a      	mov	r2, r9
 800a01c:	4631      	mov	r1, r6
 800a01e:	4628      	mov	r0, r5
 800a020:	47b8      	blx	r7
 800a022:	3001      	adds	r0, #1
 800a024:	f43f af2b 	beq.w	8009e7e <_printf_float+0xba>
 800a028:	f108 0801 	add.w	r8, r8, #1
 800a02c:	e7e6      	b.n	8009ffc <_printf_float+0x238>
 800a02e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a030:	2b00      	cmp	r3, #0
 800a032:	dc2b      	bgt.n	800a08c <_printf_float+0x2c8>
 800a034:	2301      	movs	r3, #1
 800a036:	4a26      	ldr	r2, [pc, #152]	; (800a0d0 <_printf_float+0x30c>)
 800a038:	4631      	mov	r1, r6
 800a03a:	4628      	mov	r0, r5
 800a03c:	47b8      	blx	r7
 800a03e:	3001      	adds	r0, #1
 800a040:	f43f af1d 	beq.w	8009e7e <_printf_float+0xba>
 800a044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a046:	b923      	cbnz	r3, 800a052 <_printf_float+0x28e>
 800a048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a04a:	b913      	cbnz	r3, 800a052 <_printf_float+0x28e>
 800a04c:	6823      	ldr	r3, [r4, #0]
 800a04e:	07d9      	lsls	r1, r3, #31
 800a050:	d5d8      	bpl.n	800a004 <_printf_float+0x240>
 800a052:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a056:	4631      	mov	r1, r6
 800a058:	4628      	mov	r0, r5
 800a05a:	47b8      	blx	r7
 800a05c:	3001      	adds	r0, #1
 800a05e:	f43f af0e 	beq.w	8009e7e <_printf_float+0xba>
 800a062:	f04f 0900 	mov.w	r9, #0
 800a066:	f104 0a1a 	add.w	sl, r4, #26
 800a06a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a06c:	425b      	negs	r3, r3
 800a06e:	454b      	cmp	r3, r9
 800a070:	dc01      	bgt.n	800a076 <_printf_float+0x2b2>
 800a072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a074:	e794      	b.n	8009fa0 <_printf_float+0x1dc>
 800a076:	2301      	movs	r3, #1
 800a078:	4652      	mov	r2, sl
 800a07a:	4631      	mov	r1, r6
 800a07c:	4628      	mov	r0, r5
 800a07e:	47b8      	blx	r7
 800a080:	3001      	adds	r0, #1
 800a082:	f43f aefc 	beq.w	8009e7e <_printf_float+0xba>
 800a086:	f109 0901 	add.w	r9, r9, #1
 800a08a:	e7ee      	b.n	800a06a <_printf_float+0x2a6>
 800a08c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a08e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a090:	429a      	cmp	r2, r3
 800a092:	bfa8      	it	ge
 800a094:	461a      	movge	r2, r3
 800a096:	2a00      	cmp	r2, #0
 800a098:	4691      	mov	r9, r2
 800a09a:	dd07      	ble.n	800a0ac <_printf_float+0x2e8>
 800a09c:	4613      	mov	r3, r2
 800a09e:	4631      	mov	r1, r6
 800a0a0:	4642      	mov	r2, r8
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	47b8      	blx	r7
 800a0a6:	3001      	adds	r0, #1
 800a0a8:	f43f aee9 	beq.w	8009e7e <_printf_float+0xba>
 800a0ac:	f104 031a 	add.w	r3, r4, #26
 800a0b0:	f04f 0b00 	mov.w	fp, #0
 800a0b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0b8:	9306      	str	r3, [sp, #24]
 800a0ba:	e015      	b.n	800a0e8 <_printf_float+0x324>
 800a0bc:	7fefffff 	.word	0x7fefffff
 800a0c0:	0800bd18 	.word	0x0800bd18
 800a0c4:	0800bd14 	.word	0x0800bd14
 800a0c8:	0800bd20 	.word	0x0800bd20
 800a0cc:	0800bd1c 	.word	0x0800bd1c
 800a0d0:	0800bd24 	.word	0x0800bd24
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	9a06      	ldr	r2, [sp, #24]
 800a0d8:	4631      	mov	r1, r6
 800a0da:	4628      	mov	r0, r5
 800a0dc:	47b8      	blx	r7
 800a0de:	3001      	adds	r0, #1
 800a0e0:	f43f aecd 	beq.w	8009e7e <_printf_float+0xba>
 800a0e4:	f10b 0b01 	add.w	fp, fp, #1
 800a0e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a0ec:	ebaa 0309 	sub.w	r3, sl, r9
 800a0f0:	455b      	cmp	r3, fp
 800a0f2:	dcef      	bgt.n	800a0d4 <_printf_float+0x310>
 800a0f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	44d0      	add	r8, sl
 800a0fc:	db15      	blt.n	800a12a <_printf_float+0x366>
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	07da      	lsls	r2, r3, #31
 800a102:	d412      	bmi.n	800a12a <_printf_float+0x366>
 800a104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a106:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a108:	eba3 020a 	sub.w	r2, r3, sl
 800a10c:	eba3 0a01 	sub.w	sl, r3, r1
 800a110:	4592      	cmp	sl, r2
 800a112:	bfa8      	it	ge
 800a114:	4692      	movge	sl, r2
 800a116:	f1ba 0f00 	cmp.w	sl, #0
 800a11a:	dc0e      	bgt.n	800a13a <_printf_float+0x376>
 800a11c:	f04f 0800 	mov.w	r8, #0
 800a120:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a124:	f104 091a 	add.w	r9, r4, #26
 800a128:	e019      	b.n	800a15e <_printf_float+0x39a>
 800a12a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a12e:	4631      	mov	r1, r6
 800a130:	4628      	mov	r0, r5
 800a132:	47b8      	blx	r7
 800a134:	3001      	adds	r0, #1
 800a136:	d1e5      	bne.n	800a104 <_printf_float+0x340>
 800a138:	e6a1      	b.n	8009e7e <_printf_float+0xba>
 800a13a:	4653      	mov	r3, sl
 800a13c:	4642      	mov	r2, r8
 800a13e:	4631      	mov	r1, r6
 800a140:	4628      	mov	r0, r5
 800a142:	47b8      	blx	r7
 800a144:	3001      	adds	r0, #1
 800a146:	d1e9      	bne.n	800a11c <_printf_float+0x358>
 800a148:	e699      	b.n	8009e7e <_printf_float+0xba>
 800a14a:	2301      	movs	r3, #1
 800a14c:	464a      	mov	r2, r9
 800a14e:	4631      	mov	r1, r6
 800a150:	4628      	mov	r0, r5
 800a152:	47b8      	blx	r7
 800a154:	3001      	adds	r0, #1
 800a156:	f43f ae92 	beq.w	8009e7e <_printf_float+0xba>
 800a15a:	f108 0801 	add.w	r8, r8, #1
 800a15e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a162:	1a9b      	subs	r3, r3, r2
 800a164:	eba3 030a 	sub.w	r3, r3, sl
 800a168:	4543      	cmp	r3, r8
 800a16a:	dcee      	bgt.n	800a14a <_printf_float+0x386>
 800a16c:	e74a      	b.n	800a004 <_printf_float+0x240>
 800a16e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a170:	2a01      	cmp	r2, #1
 800a172:	dc01      	bgt.n	800a178 <_printf_float+0x3b4>
 800a174:	07db      	lsls	r3, r3, #31
 800a176:	d53a      	bpl.n	800a1ee <_printf_float+0x42a>
 800a178:	2301      	movs	r3, #1
 800a17a:	4642      	mov	r2, r8
 800a17c:	4631      	mov	r1, r6
 800a17e:	4628      	mov	r0, r5
 800a180:	47b8      	blx	r7
 800a182:	3001      	adds	r0, #1
 800a184:	f43f ae7b 	beq.w	8009e7e <_printf_float+0xba>
 800a188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a18c:	4631      	mov	r1, r6
 800a18e:	4628      	mov	r0, r5
 800a190:	47b8      	blx	r7
 800a192:	3001      	adds	r0, #1
 800a194:	f108 0801 	add.w	r8, r8, #1
 800a198:	f43f ae71 	beq.w	8009e7e <_printf_float+0xba>
 800a19c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f103 3aff 	add.w	sl, r3, #4294967295
 800a1a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	f7f6 fc95 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1ae:	b9c8      	cbnz	r0, 800a1e4 <_printf_float+0x420>
 800a1b0:	4653      	mov	r3, sl
 800a1b2:	4642      	mov	r2, r8
 800a1b4:	4631      	mov	r1, r6
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	47b8      	blx	r7
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	d10e      	bne.n	800a1dc <_printf_float+0x418>
 800a1be:	e65e      	b.n	8009e7e <_printf_float+0xba>
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	4652      	mov	r2, sl
 800a1c4:	4631      	mov	r1, r6
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	47b8      	blx	r7
 800a1ca:	3001      	adds	r0, #1
 800a1cc:	f43f ae57 	beq.w	8009e7e <_printf_float+0xba>
 800a1d0:	f108 0801 	add.w	r8, r8, #1
 800a1d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	4543      	cmp	r3, r8
 800a1da:	dcf1      	bgt.n	800a1c0 <_printf_float+0x3fc>
 800a1dc:	464b      	mov	r3, r9
 800a1de:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a1e2:	e6de      	b.n	8009fa2 <_printf_float+0x1de>
 800a1e4:	f04f 0800 	mov.w	r8, #0
 800a1e8:	f104 0a1a 	add.w	sl, r4, #26
 800a1ec:	e7f2      	b.n	800a1d4 <_printf_float+0x410>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e7df      	b.n	800a1b2 <_printf_float+0x3ee>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	464a      	mov	r2, r9
 800a1f6:	4631      	mov	r1, r6
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	47b8      	blx	r7
 800a1fc:	3001      	adds	r0, #1
 800a1fe:	f43f ae3e 	beq.w	8009e7e <_printf_float+0xba>
 800a202:	f108 0801 	add.w	r8, r8, #1
 800a206:	68e3      	ldr	r3, [r4, #12]
 800a208:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a20a:	1a9b      	subs	r3, r3, r2
 800a20c:	4543      	cmp	r3, r8
 800a20e:	dcf0      	bgt.n	800a1f2 <_printf_float+0x42e>
 800a210:	e6fc      	b.n	800a00c <_printf_float+0x248>
 800a212:	f04f 0800 	mov.w	r8, #0
 800a216:	f104 0919 	add.w	r9, r4, #25
 800a21a:	e7f4      	b.n	800a206 <_printf_float+0x442>
 800a21c:	2900      	cmp	r1, #0
 800a21e:	f43f ae8b 	beq.w	8009f38 <_printf_float+0x174>
 800a222:	2300      	movs	r3, #0
 800a224:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a228:	ab09      	add	r3, sp, #36	; 0x24
 800a22a:	9300      	str	r3, [sp, #0]
 800a22c:	ec49 8b10 	vmov	d0, r8, r9
 800a230:	6022      	str	r2, [r4, #0]
 800a232:	f8cd a004 	str.w	sl, [sp, #4]
 800a236:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a23a:	4628      	mov	r0, r5
 800a23c:	f7ff fd2e 	bl	8009c9c <__cvt>
 800a240:	4680      	mov	r8, r0
 800a242:	e648      	b.n	8009ed6 <_printf_float+0x112>

0800a244 <_printf_common>:
 800a244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a248:	4691      	mov	r9, r2
 800a24a:	461f      	mov	r7, r3
 800a24c:	688a      	ldr	r2, [r1, #8]
 800a24e:	690b      	ldr	r3, [r1, #16]
 800a250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a254:	4293      	cmp	r3, r2
 800a256:	bfb8      	it	lt
 800a258:	4613      	movlt	r3, r2
 800a25a:	f8c9 3000 	str.w	r3, [r9]
 800a25e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a262:	4606      	mov	r6, r0
 800a264:	460c      	mov	r4, r1
 800a266:	b112      	cbz	r2, 800a26e <_printf_common+0x2a>
 800a268:	3301      	adds	r3, #1
 800a26a:	f8c9 3000 	str.w	r3, [r9]
 800a26e:	6823      	ldr	r3, [r4, #0]
 800a270:	0699      	lsls	r1, r3, #26
 800a272:	bf42      	ittt	mi
 800a274:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a278:	3302      	addmi	r3, #2
 800a27a:	f8c9 3000 	strmi.w	r3, [r9]
 800a27e:	6825      	ldr	r5, [r4, #0]
 800a280:	f015 0506 	ands.w	r5, r5, #6
 800a284:	d107      	bne.n	800a296 <_printf_common+0x52>
 800a286:	f104 0a19 	add.w	sl, r4, #25
 800a28a:	68e3      	ldr	r3, [r4, #12]
 800a28c:	f8d9 2000 	ldr.w	r2, [r9]
 800a290:	1a9b      	subs	r3, r3, r2
 800a292:	42ab      	cmp	r3, r5
 800a294:	dc28      	bgt.n	800a2e8 <_printf_common+0xa4>
 800a296:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a29a:	6822      	ldr	r2, [r4, #0]
 800a29c:	3300      	adds	r3, #0
 800a29e:	bf18      	it	ne
 800a2a0:	2301      	movne	r3, #1
 800a2a2:	0692      	lsls	r2, r2, #26
 800a2a4:	d42d      	bmi.n	800a302 <_printf_common+0xbe>
 800a2a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2aa:	4639      	mov	r1, r7
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	47c0      	blx	r8
 800a2b0:	3001      	adds	r0, #1
 800a2b2:	d020      	beq.n	800a2f6 <_printf_common+0xb2>
 800a2b4:	6823      	ldr	r3, [r4, #0]
 800a2b6:	68e5      	ldr	r5, [r4, #12]
 800a2b8:	f8d9 2000 	ldr.w	r2, [r9]
 800a2bc:	f003 0306 	and.w	r3, r3, #6
 800a2c0:	2b04      	cmp	r3, #4
 800a2c2:	bf08      	it	eq
 800a2c4:	1aad      	subeq	r5, r5, r2
 800a2c6:	68a3      	ldr	r3, [r4, #8]
 800a2c8:	6922      	ldr	r2, [r4, #16]
 800a2ca:	bf0c      	ite	eq
 800a2cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2d0:	2500      	movne	r5, #0
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	bfc4      	itt	gt
 800a2d6:	1a9b      	subgt	r3, r3, r2
 800a2d8:	18ed      	addgt	r5, r5, r3
 800a2da:	f04f 0900 	mov.w	r9, #0
 800a2de:	341a      	adds	r4, #26
 800a2e0:	454d      	cmp	r5, r9
 800a2e2:	d11a      	bne.n	800a31a <_printf_common+0xd6>
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	e008      	b.n	800a2fa <_printf_common+0xb6>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	4652      	mov	r2, sl
 800a2ec:	4639      	mov	r1, r7
 800a2ee:	4630      	mov	r0, r6
 800a2f0:	47c0      	blx	r8
 800a2f2:	3001      	adds	r0, #1
 800a2f4:	d103      	bne.n	800a2fe <_printf_common+0xba>
 800a2f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2fe:	3501      	adds	r5, #1
 800a300:	e7c3      	b.n	800a28a <_printf_common+0x46>
 800a302:	18e1      	adds	r1, r4, r3
 800a304:	1c5a      	adds	r2, r3, #1
 800a306:	2030      	movs	r0, #48	; 0x30
 800a308:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a30c:	4422      	add	r2, r4
 800a30e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a312:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a316:	3302      	adds	r3, #2
 800a318:	e7c5      	b.n	800a2a6 <_printf_common+0x62>
 800a31a:	2301      	movs	r3, #1
 800a31c:	4622      	mov	r2, r4
 800a31e:	4639      	mov	r1, r7
 800a320:	4630      	mov	r0, r6
 800a322:	47c0      	blx	r8
 800a324:	3001      	adds	r0, #1
 800a326:	d0e6      	beq.n	800a2f6 <_printf_common+0xb2>
 800a328:	f109 0901 	add.w	r9, r9, #1
 800a32c:	e7d8      	b.n	800a2e0 <_printf_common+0x9c>
	...

0800a330 <_printf_i>:
 800a330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a334:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a338:	460c      	mov	r4, r1
 800a33a:	7e09      	ldrb	r1, [r1, #24]
 800a33c:	b085      	sub	sp, #20
 800a33e:	296e      	cmp	r1, #110	; 0x6e
 800a340:	4617      	mov	r7, r2
 800a342:	4606      	mov	r6, r0
 800a344:	4698      	mov	r8, r3
 800a346:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a348:	f000 80b3 	beq.w	800a4b2 <_printf_i+0x182>
 800a34c:	d822      	bhi.n	800a394 <_printf_i+0x64>
 800a34e:	2963      	cmp	r1, #99	; 0x63
 800a350:	d036      	beq.n	800a3c0 <_printf_i+0x90>
 800a352:	d80a      	bhi.n	800a36a <_printf_i+0x3a>
 800a354:	2900      	cmp	r1, #0
 800a356:	f000 80b9 	beq.w	800a4cc <_printf_i+0x19c>
 800a35a:	2958      	cmp	r1, #88	; 0x58
 800a35c:	f000 8083 	beq.w	800a466 <_printf_i+0x136>
 800a360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a364:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a368:	e032      	b.n	800a3d0 <_printf_i+0xa0>
 800a36a:	2964      	cmp	r1, #100	; 0x64
 800a36c:	d001      	beq.n	800a372 <_printf_i+0x42>
 800a36e:	2969      	cmp	r1, #105	; 0x69
 800a370:	d1f6      	bne.n	800a360 <_printf_i+0x30>
 800a372:	6820      	ldr	r0, [r4, #0]
 800a374:	6813      	ldr	r3, [r2, #0]
 800a376:	0605      	lsls	r5, r0, #24
 800a378:	f103 0104 	add.w	r1, r3, #4
 800a37c:	d52a      	bpl.n	800a3d4 <_printf_i+0xa4>
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	6011      	str	r1, [r2, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	da03      	bge.n	800a38e <_printf_i+0x5e>
 800a386:	222d      	movs	r2, #45	; 0x2d
 800a388:	425b      	negs	r3, r3
 800a38a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a38e:	486f      	ldr	r0, [pc, #444]	; (800a54c <_printf_i+0x21c>)
 800a390:	220a      	movs	r2, #10
 800a392:	e039      	b.n	800a408 <_printf_i+0xd8>
 800a394:	2973      	cmp	r1, #115	; 0x73
 800a396:	f000 809d 	beq.w	800a4d4 <_printf_i+0x1a4>
 800a39a:	d808      	bhi.n	800a3ae <_printf_i+0x7e>
 800a39c:	296f      	cmp	r1, #111	; 0x6f
 800a39e:	d020      	beq.n	800a3e2 <_printf_i+0xb2>
 800a3a0:	2970      	cmp	r1, #112	; 0x70
 800a3a2:	d1dd      	bne.n	800a360 <_printf_i+0x30>
 800a3a4:	6823      	ldr	r3, [r4, #0]
 800a3a6:	f043 0320 	orr.w	r3, r3, #32
 800a3aa:	6023      	str	r3, [r4, #0]
 800a3ac:	e003      	b.n	800a3b6 <_printf_i+0x86>
 800a3ae:	2975      	cmp	r1, #117	; 0x75
 800a3b0:	d017      	beq.n	800a3e2 <_printf_i+0xb2>
 800a3b2:	2978      	cmp	r1, #120	; 0x78
 800a3b4:	d1d4      	bne.n	800a360 <_printf_i+0x30>
 800a3b6:	2378      	movs	r3, #120	; 0x78
 800a3b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3bc:	4864      	ldr	r0, [pc, #400]	; (800a550 <_printf_i+0x220>)
 800a3be:	e055      	b.n	800a46c <_printf_i+0x13c>
 800a3c0:	6813      	ldr	r3, [r2, #0]
 800a3c2:	1d19      	adds	r1, r3, #4
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	6011      	str	r1, [r2, #0]
 800a3c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	e08c      	b.n	800a4ee <_printf_i+0x1be>
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	6011      	str	r1, [r2, #0]
 800a3d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3dc:	bf18      	it	ne
 800a3de:	b21b      	sxthne	r3, r3
 800a3e0:	e7cf      	b.n	800a382 <_printf_i+0x52>
 800a3e2:	6813      	ldr	r3, [r2, #0]
 800a3e4:	6825      	ldr	r5, [r4, #0]
 800a3e6:	1d18      	adds	r0, r3, #4
 800a3e8:	6010      	str	r0, [r2, #0]
 800a3ea:	0628      	lsls	r0, r5, #24
 800a3ec:	d501      	bpl.n	800a3f2 <_printf_i+0xc2>
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	e002      	b.n	800a3f8 <_printf_i+0xc8>
 800a3f2:	0668      	lsls	r0, r5, #25
 800a3f4:	d5fb      	bpl.n	800a3ee <_printf_i+0xbe>
 800a3f6:	881b      	ldrh	r3, [r3, #0]
 800a3f8:	4854      	ldr	r0, [pc, #336]	; (800a54c <_printf_i+0x21c>)
 800a3fa:	296f      	cmp	r1, #111	; 0x6f
 800a3fc:	bf14      	ite	ne
 800a3fe:	220a      	movne	r2, #10
 800a400:	2208      	moveq	r2, #8
 800a402:	2100      	movs	r1, #0
 800a404:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a408:	6865      	ldr	r5, [r4, #4]
 800a40a:	60a5      	str	r5, [r4, #8]
 800a40c:	2d00      	cmp	r5, #0
 800a40e:	f2c0 8095 	blt.w	800a53c <_printf_i+0x20c>
 800a412:	6821      	ldr	r1, [r4, #0]
 800a414:	f021 0104 	bic.w	r1, r1, #4
 800a418:	6021      	str	r1, [r4, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d13d      	bne.n	800a49a <_printf_i+0x16a>
 800a41e:	2d00      	cmp	r5, #0
 800a420:	f040 808e 	bne.w	800a540 <_printf_i+0x210>
 800a424:	4665      	mov	r5, ip
 800a426:	2a08      	cmp	r2, #8
 800a428:	d10b      	bne.n	800a442 <_printf_i+0x112>
 800a42a:	6823      	ldr	r3, [r4, #0]
 800a42c:	07db      	lsls	r3, r3, #31
 800a42e:	d508      	bpl.n	800a442 <_printf_i+0x112>
 800a430:	6923      	ldr	r3, [r4, #16]
 800a432:	6862      	ldr	r2, [r4, #4]
 800a434:	429a      	cmp	r2, r3
 800a436:	bfde      	ittt	le
 800a438:	2330      	movle	r3, #48	; 0x30
 800a43a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a43e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a442:	ebac 0305 	sub.w	r3, ip, r5
 800a446:	6123      	str	r3, [r4, #16]
 800a448:	f8cd 8000 	str.w	r8, [sp]
 800a44c:	463b      	mov	r3, r7
 800a44e:	aa03      	add	r2, sp, #12
 800a450:	4621      	mov	r1, r4
 800a452:	4630      	mov	r0, r6
 800a454:	f7ff fef6 	bl	800a244 <_printf_common>
 800a458:	3001      	adds	r0, #1
 800a45a:	d14d      	bne.n	800a4f8 <_printf_i+0x1c8>
 800a45c:	f04f 30ff 	mov.w	r0, #4294967295
 800a460:	b005      	add	sp, #20
 800a462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a466:	4839      	ldr	r0, [pc, #228]	; (800a54c <_printf_i+0x21c>)
 800a468:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a46c:	6813      	ldr	r3, [r2, #0]
 800a46e:	6821      	ldr	r1, [r4, #0]
 800a470:	1d1d      	adds	r5, r3, #4
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	6015      	str	r5, [r2, #0]
 800a476:	060a      	lsls	r2, r1, #24
 800a478:	d50b      	bpl.n	800a492 <_printf_i+0x162>
 800a47a:	07ca      	lsls	r2, r1, #31
 800a47c:	bf44      	itt	mi
 800a47e:	f041 0120 	orrmi.w	r1, r1, #32
 800a482:	6021      	strmi	r1, [r4, #0]
 800a484:	b91b      	cbnz	r3, 800a48e <_printf_i+0x15e>
 800a486:	6822      	ldr	r2, [r4, #0]
 800a488:	f022 0220 	bic.w	r2, r2, #32
 800a48c:	6022      	str	r2, [r4, #0]
 800a48e:	2210      	movs	r2, #16
 800a490:	e7b7      	b.n	800a402 <_printf_i+0xd2>
 800a492:	064d      	lsls	r5, r1, #25
 800a494:	bf48      	it	mi
 800a496:	b29b      	uxthmi	r3, r3
 800a498:	e7ef      	b.n	800a47a <_printf_i+0x14a>
 800a49a:	4665      	mov	r5, ip
 800a49c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4a0:	fb02 3311 	mls	r3, r2, r1, r3
 800a4a4:	5cc3      	ldrb	r3, [r0, r3]
 800a4a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	2900      	cmp	r1, #0
 800a4ae:	d1f5      	bne.n	800a49c <_printf_i+0x16c>
 800a4b0:	e7b9      	b.n	800a426 <_printf_i+0xf6>
 800a4b2:	6813      	ldr	r3, [r2, #0]
 800a4b4:	6825      	ldr	r5, [r4, #0]
 800a4b6:	6961      	ldr	r1, [r4, #20]
 800a4b8:	1d18      	adds	r0, r3, #4
 800a4ba:	6010      	str	r0, [r2, #0]
 800a4bc:	0628      	lsls	r0, r5, #24
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	d501      	bpl.n	800a4c6 <_printf_i+0x196>
 800a4c2:	6019      	str	r1, [r3, #0]
 800a4c4:	e002      	b.n	800a4cc <_printf_i+0x19c>
 800a4c6:	066a      	lsls	r2, r5, #25
 800a4c8:	d5fb      	bpl.n	800a4c2 <_printf_i+0x192>
 800a4ca:	8019      	strh	r1, [r3, #0]
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	6123      	str	r3, [r4, #16]
 800a4d0:	4665      	mov	r5, ip
 800a4d2:	e7b9      	b.n	800a448 <_printf_i+0x118>
 800a4d4:	6813      	ldr	r3, [r2, #0]
 800a4d6:	1d19      	adds	r1, r3, #4
 800a4d8:	6011      	str	r1, [r2, #0]
 800a4da:	681d      	ldr	r5, [r3, #0]
 800a4dc:	6862      	ldr	r2, [r4, #4]
 800a4de:	2100      	movs	r1, #0
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	f7f5 fe85 	bl	80001f0 <memchr>
 800a4e6:	b108      	cbz	r0, 800a4ec <_printf_i+0x1bc>
 800a4e8:	1b40      	subs	r0, r0, r5
 800a4ea:	6060      	str	r0, [r4, #4]
 800a4ec:	6863      	ldr	r3, [r4, #4]
 800a4ee:	6123      	str	r3, [r4, #16]
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4f6:	e7a7      	b.n	800a448 <_printf_i+0x118>
 800a4f8:	6923      	ldr	r3, [r4, #16]
 800a4fa:	462a      	mov	r2, r5
 800a4fc:	4639      	mov	r1, r7
 800a4fe:	4630      	mov	r0, r6
 800a500:	47c0      	blx	r8
 800a502:	3001      	adds	r0, #1
 800a504:	d0aa      	beq.n	800a45c <_printf_i+0x12c>
 800a506:	6823      	ldr	r3, [r4, #0]
 800a508:	079b      	lsls	r3, r3, #30
 800a50a:	d413      	bmi.n	800a534 <_printf_i+0x204>
 800a50c:	68e0      	ldr	r0, [r4, #12]
 800a50e:	9b03      	ldr	r3, [sp, #12]
 800a510:	4298      	cmp	r0, r3
 800a512:	bfb8      	it	lt
 800a514:	4618      	movlt	r0, r3
 800a516:	e7a3      	b.n	800a460 <_printf_i+0x130>
 800a518:	2301      	movs	r3, #1
 800a51a:	464a      	mov	r2, r9
 800a51c:	4639      	mov	r1, r7
 800a51e:	4630      	mov	r0, r6
 800a520:	47c0      	blx	r8
 800a522:	3001      	adds	r0, #1
 800a524:	d09a      	beq.n	800a45c <_printf_i+0x12c>
 800a526:	3501      	adds	r5, #1
 800a528:	68e3      	ldr	r3, [r4, #12]
 800a52a:	9a03      	ldr	r2, [sp, #12]
 800a52c:	1a9b      	subs	r3, r3, r2
 800a52e:	42ab      	cmp	r3, r5
 800a530:	dcf2      	bgt.n	800a518 <_printf_i+0x1e8>
 800a532:	e7eb      	b.n	800a50c <_printf_i+0x1dc>
 800a534:	2500      	movs	r5, #0
 800a536:	f104 0919 	add.w	r9, r4, #25
 800a53a:	e7f5      	b.n	800a528 <_printf_i+0x1f8>
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d1ac      	bne.n	800a49a <_printf_i+0x16a>
 800a540:	7803      	ldrb	r3, [r0, #0]
 800a542:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a546:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a54a:	e76c      	b.n	800a426 <_printf_i+0xf6>
 800a54c:	0800bd26 	.word	0x0800bd26
 800a550:	0800bd37 	.word	0x0800bd37

0800a554 <_sbrk_r>:
 800a554:	b538      	push	{r3, r4, r5, lr}
 800a556:	4c06      	ldr	r4, [pc, #24]	; (800a570 <_sbrk_r+0x1c>)
 800a558:	2300      	movs	r3, #0
 800a55a:	4605      	mov	r5, r0
 800a55c:	4608      	mov	r0, r1
 800a55e:	6023      	str	r3, [r4, #0]
 800a560:	f7f7 fed2 	bl	8002308 <_sbrk>
 800a564:	1c43      	adds	r3, r0, #1
 800a566:	d102      	bne.n	800a56e <_sbrk_r+0x1a>
 800a568:	6823      	ldr	r3, [r4, #0]
 800a56a:	b103      	cbz	r3, 800a56e <_sbrk_r+0x1a>
 800a56c:	602b      	str	r3, [r5, #0]
 800a56e:	bd38      	pop	{r3, r4, r5, pc}
 800a570:	20001d98 	.word	0x20001d98

0800a574 <sniprintf>:
 800a574:	b40c      	push	{r2, r3}
 800a576:	b530      	push	{r4, r5, lr}
 800a578:	4b17      	ldr	r3, [pc, #92]	; (800a5d8 <sniprintf+0x64>)
 800a57a:	1e0c      	subs	r4, r1, #0
 800a57c:	b09d      	sub	sp, #116	; 0x74
 800a57e:	681d      	ldr	r5, [r3, #0]
 800a580:	da08      	bge.n	800a594 <sniprintf+0x20>
 800a582:	238b      	movs	r3, #139	; 0x8b
 800a584:	602b      	str	r3, [r5, #0]
 800a586:	f04f 30ff 	mov.w	r0, #4294967295
 800a58a:	b01d      	add	sp, #116	; 0x74
 800a58c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a590:	b002      	add	sp, #8
 800a592:	4770      	bx	lr
 800a594:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a598:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a59c:	bf14      	ite	ne
 800a59e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a5a2:	4623      	moveq	r3, r4
 800a5a4:	9304      	str	r3, [sp, #16]
 800a5a6:	9307      	str	r3, [sp, #28]
 800a5a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a5ac:	9002      	str	r0, [sp, #8]
 800a5ae:	9006      	str	r0, [sp, #24]
 800a5b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a5b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a5b6:	ab21      	add	r3, sp, #132	; 0x84
 800a5b8:	a902      	add	r1, sp, #8
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	9301      	str	r3, [sp, #4]
 800a5be:	f001 f9b1 	bl	800b924 <_svfiprintf_r>
 800a5c2:	1c43      	adds	r3, r0, #1
 800a5c4:	bfbc      	itt	lt
 800a5c6:	238b      	movlt	r3, #139	; 0x8b
 800a5c8:	602b      	strlt	r3, [r5, #0]
 800a5ca:	2c00      	cmp	r4, #0
 800a5cc:	d0dd      	beq.n	800a58a <sniprintf+0x16>
 800a5ce:	9b02      	ldr	r3, [sp, #8]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	701a      	strb	r2, [r3, #0]
 800a5d4:	e7d9      	b.n	800a58a <sniprintf+0x16>
 800a5d6:	bf00      	nop
 800a5d8:	2000018c 	.word	0x2000018c

0800a5dc <quorem>:
 800a5dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e0:	6903      	ldr	r3, [r0, #16]
 800a5e2:	690c      	ldr	r4, [r1, #16]
 800a5e4:	42a3      	cmp	r3, r4
 800a5e6:	4680      	mov	r8, r0
 800a5e8:	f2c0 8082 	blt.w	800a6f0 <quorem+0x114>
 800a5ec:	3c01      	subs	r4, #1
 800a5ee:	f101 0714 	add.w	r7, r1, #20
 800a5f2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a5f6:	f100 0614 	add.w	r6, r0, #20
 800a5fa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a5fe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a602:	eb06 030c 	add.w	r3, r6, ip
 800a606:	3501      	adds	r5, #1
 800a608:	eb07 090c 	add.w	r9, r7, ip
 800a60c:	9301      	str	r3, [sp, #4]
 800a60e:	fbb0 f5f5 	udiv	r5, r0, r5
 800a612:	b395      	cbz	r5, 800a67a <quorem+0x9e>
 800a614:	f04f 0a00 	mov.w	sl, #0
 800a618:	4638      	mov	r0, r7
 800a61a:	46b6      	mov	lr, r6
 800a61c:	46d3      	mov	fp, sl
 800a61e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a622:	b293      	uxth	r3, r2
 800a624:	fb05 a303 	mla	r3, r5, r3, sl
 800a628:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	ebab 0303 	sub.w	r3, fp, r3
 800a632:	0c12      	lsrs	r2, r2, #16
 800a634:	f8de b000 	ldr.w	fp, [lr]
 800a638:	fb05 a202 	mla	r2, r5, r2, sl
 800a63c:	fa13 f38b 	uxtah	r3, r3, fp
 800a640:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a644:	fa1f fb82 	uxth.w	fp, r2
 800a648:	f8de 2000 	ldr.w	r2, [lr]
 800a64c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a650:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a654:	b29b      	uxth	r3, r3
 800a656:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a65a:	4581      	cmp	r9, r0
 800a65c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a660:	f84e 3b04 	str.w	r3, [lr], #4
 800a664:	d2db      	bcs.n	800a61e <quorem+0x42>
 800a666:	f856 300c 	ldr.w	r3, [r6, ip]
 800a66a:	b933      	cbnz	r3, 800a67a <quorem+0x9e>
 800a66c:	9b01      	ldr	r3, [sp, #4]
 800a66e:	3b04      	subs	r3, #4
 800a670:	429e      	cmp	r6, r3
 800a672:	461a      	mov	r2, r3
 800a674:	d330      	bcc.n	800a6d8 <quorem+0xfc>
 800a676:	f8c8 4010 	str.w	r4, [r8, #16]
 800a67a:	4640      	mov	r0, r8
 800a67c:	f001 f824 	bl	800b6c8 <__mcmp>
 800a680:	2800      	cmp	r0, #0
 800a682:	db25      	blt.n	800a6d0 <quorem+0xf4>
 800a684:	3501      	adds	r5, #1
 800a686:	4630      	mov	r0, r6
 800a688:	f04f 0c00 	mov.w	ip, #0
 800a68c:	f857 2b04 	ldr.w	r2, [r7], #4
 800a690:	f8d0 e000 	ldr.w	lr, [r0]
 800a694:	b293      	uxth	r3, r2
 800a696:	ebac 0303 	sub.w	r3, ip, r3
 800a69a:	0c12      	lsrs	r2, r2, #16
 800a69c:	fa13 f38e 	uxtah	r3, r3, lr
 800a6a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a6a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6ae:	45b9      	cmp	r9, r7
 800a6b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a6b4:	f840 3b04 	str.w	r3, [r0], #4
 800a6b8:	d2e8      	bcs.n	800a68c <quorem+0xb0>
 800a6ba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a6be:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a6c2:	b92a      	cbnz	r2, 800a6d0 <quorem+0xf4>
 800a6c4:	3b04      	subs	r3, #4
 800a6c6:	429e      	cmp	r6, r3
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	d30b      	bcc.n	800a6e4 <quorem+0x108>
 800a6cc:	f8c8 4010 	str.w	r4, [r8, #16]
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	b003      	add	sp, #12
 800a6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d8:	6812      	ldr	r2, [r2, #0]
 800a6da:	3b04      	subs	r3, #4
 800a6dc:	2a00      	cmp	r2, #0
 800a6de:	d1ca      	bne.n	800a676 <quorem+0x9a>
 800a6e0:	3c01      	subs	r4, #1
 800a6e2:	e7c5      	b.n	800a670 <quorem+0x94>
 800a6e4:	6812      	ldr	r2, [r2, #0]
 800a6e6:	3b04      	subs	r3, #4
 800a6e8:	2a00      	cmp	r2, #0
 800a6ea:	d1ef      	bne.n	800a6cc <quorem+0xf0>
 800a6ec:	3c01      	subs	r4, #1
 800a6ee:	e7ea      	b.n	800a6c6 <quorem+0xea>
 800a6f0:	2000      	movs	r0, #0
 800a6f2:	e7ee      	b.n	800a6d2 <quorem+0xf6>
 800a6f4:	0000      	movs	r0, r0
	...

0800a6f8 <_dtoa_r>:
 800a6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6fc:	ec57 6b10 	vmov	r6, r7, d0
 800a700:	b097      	sub	sp, #92	; 0x5c
 800a702:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a704:	9106      	str	r1, [sp, #24]
 800a706:	4604      	mov	r4, r0
 800a708:	920b      	str	r2, [sp, #44]	; 0x2c
 800a70a:	9312      	str	r3, [sp, #72]	; 0x48
 800a70c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a710:	e9cd 6700 	strd	r6, r7, [sp]
 800a714:	b93d      	cbnz	r5, 800a726 <_dtoa_r+0x2e>
 800a716:	2010      	movs	r0, #16
 800a718:	f7ff fa00 	bl	8009b1c <malloc>
 800a71c:	6260      	str	r0, [r4, #36]	; 0x24
 800a71e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a722:	6005      	str	r5, [r0, #0]
 800a724:	60c5      	str	r5, [r0, #12]
 800a726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a728:	6819      	ldr	r1, [r3, #0]
 800a72a:	b151      	cbz	r1, 800a742 <_dtoa_r+0x4a>
 800a72c:	685a      	ldr	r2, [r3, #4]
 800a72e:	604a      	str	r2, [r1, #4]
 800a730:	2301      	movs	r3, #1
 800a732:	4093      	lsls	r3, r2
 800a734:	608b      	str	r3, [r1, #8]
 800a736:	4620      	mov	r0, r4
 800a738:	f000 fde5 	bl	800b306 <_Bfree>
 800a73c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a73e:	2200      	movs	r2, #0
 800a740:	601a      	str	r2, [r3, #0]
 800a742:	1e3b      	subs	r3, r7, #0
 800a744:	bfbb      	ittet	lt
 800a746:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a74a:	9301      	strlt	r3, [sp, #4]
 800a74c:	2300      	movge	r3, #0
 800a74e:	2201      	movlt	r2, #1
 800a750:	bfac      	ite	ge
 800a752:	f8c8 3000 	strge.w	r3, [r8]
 800a756:	f8c8 2000 	strlt.w	r2, [r8]
 800a75a:	4baf      	ldr	r3, [pc, #700]	; (800aa18 <_dtoa_r+0x320>)
 800a75c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a760:	ea33 0308 	bics.w	r3, r3, r8
 800a764:	d114      	bne.n	800a790 <_dtoa_r+0x98>
 800a766:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a768:	f242 730f 	movw	r3, #9999	; 0x270f
 800a76c:	6013      	str	r3, [r2, #0]
 800a76e:	9b00      	ldr	r3, [sp, #0]
 800a770:	b923      	cbnz	r3, 800a77c <_dtoa_r+0x84>
 800a772:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a776:	2800      	cmp	r0, #0
 800a778:	f000 8542 	beq.w	800b200 <_dtoa_r+0xb08>
 800a77c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a77e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800aa2c <_dtoa_r+0x334>
 800a782:	2b00      	cmp	r3, #0
 800a784:	f000 8544 	beq.w	800b210 <_dtoa_r+0xb18>
 800a788:	f10b 0303 	add.w	r3, fp, #3
 800a78c:	f000 bd3e 	b.w	800b20c <_dtoa_r+0xb14>
 800a790:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a794:	2200      	movs	r2, #0
 800a796:	2300      	movs	r3, #0
 800a798:	4630      	mov	r0, r6
 800a79a:	4639      	mov	r1, r7
 800a79c:	f7f6 f99c 	bl	8000ad8 <__aeabi_dcmpeq>
 800a7a0:	4681      	mov	r9, r0
 800a7a2:	b168      	cbz	r0, 800a7c0 <_dtoa_r+0xc8>
 800a7a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	6013      	str	r3, [r2, #0]
 800a7aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f000 8524 	beq.w	800b1fa <_dtoa_r+0xb02>
 800a7b2:	4b9a      	ldr	r3, [pc, #616]	; (800aa1c <_dtoa_r+0x324>)
 800a7b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a7b6:	f103 3bff 	add.w	fp, r3, #4294967295
 800a7ba:	6013      	str	r3, [r2, #0]
 800a7bc:	f000 bd28 	b.w	800b210 <_dtoa_r+0xb18>
 800a7c0:	aa14      	add	r2, sp, #80	; 0x50
 800a7c2:	a915      	add	r1, sp, #84	; 0x54
 800a7c4:	ec47 6b10 	vmov	d0, r6, r7
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f000 fff4 	bl	800b7b6 <__d2b>
 800a7ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a7d2:	9004      	str	r0, [sp, #16]
 800a7d4:	2d00      	cmp	r5, #0
 800a7d6:	d07c      	beq.n	800a8d2 <_dtoa_r+0x1da>
 800a7d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a7dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a7e0:	46b2      	mov	sl, r6
 800a7e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a7e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a7ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	4b8b      	ldr	r3, [pc, #556]	; (800aa20 <_dtoa_r+0x328>)
 800a7f2:	4650      	mov	r0, sl
 800a7f4:	4659      	mov	r1, fp
 800a7f6:	f7f5 fd4f 	bl	8000298 <__aeabi_dsub>
 800a7fa:	a381      	add	r3, pc, #516	; (adr r3, 800aa00 <_dtoa_r+0x308>)
 800a7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a800:	f7f5 ff02 	bl	8000608 <__aeabi_dmul>
 800a804:	a380      	add	r3, pc, #512	; (adr r3, 800aa08 <_dtoa_r+0x310>)
 800a806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80a:	f7f5 fd47 	bl	800029c <__adddf3>
 800a80e:	4606      	mov	r6, r0
 800a810:	4628      	mov	r0, r5
 800a812:	460f      	mov	r7, r1
 800a814:	f7f5 fe8e 	bl	8000534 <__aeabi_i2d>
 800a818:	a37d      	add	r3, pc, #500	; (adr r3, 800aa10 <_dtoa_r+0x318>)
 800a81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81e:	f7f5 fef3 	bl	8000608 <__aeabi_dmul>
 800a822:	4602      	mov	r2, r0
 800a824:	460b      	mov	r3, r1
 800a826:	4630      	mov	r0, r6
 800a828:	4639      	mov	r1, r7
 800a82a:	f7f5 fd37 	bl	800029c <__adddf3>
 800a82e:	4606      	mov	r6, r0
 800a830:	460f      	mov	r7, r1
 800a832:	f7f6 f999 	bl	8000b68 <__aeabi_d2iz>
 800a836:	2200      	movs	r2, #0
 800a838:	4682      	mov	sl, r0
 800a83a:	2300      	movs	r3, #0
 800a83c:	4630      	mov	r0, r6
 800a83e:	4639      	mov	r1, r7
 800a840:	f7f6 f954 	bl	8000aec <__aeabi_dcmplt>
 800a844:	b148      	cbz	r0, 800a85a <_dtoa_r+0x162>
 800a846:	4650      	mov	r0, sl
 800a848:	f7f5 fe74 	bl	8000534 <__aeabi_i2d>
 800a84c:	4632      	mov	r2, r6
 800a84e:	463b      	mov	r3, r7
 800a850:	f7f6 f942 	bl	8000ad8 <__aeabi_dcmpeq>
 800a854:	b908      	cbnz	r0, 800a85a <_dtoa_r+0x162>
 800a856:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a85a:	f1ba 0f16 	cmp.w	sl, #22
 800a85e:	d859      	bhi.n	800a914 <_dtoa_r+0x21c>
 800a860:	4970      	ldr	r1, [pc, #448]	; (800aa24 <_dtoa_r+0x32c>)
 800a862:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a866:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a86a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a86e:	f7f6 f95b 	bl	8000b28 <__aeabi_dcmpgt>
 800a872:	2800      	cmp	r0, #0
 800a874:	d050      	beq.n	800a918 <_dtoa_r+0x220>
 800a876:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a87a:	2300      	movs	r3, #0
 800a87c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a87e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a880:	1b5d      	subs	r5, r3, r5
 800a882:	f1b5 0801 	subs.w	r8, r5, #1
 800a886:	bf49      	itett	mi
 800a888:	f1c5 0301 	rsbmi	r3, r5, #1
 800a88c:	2300      	movpl	r3, #0
 800a88e:	9305      	strmi	r3, [sp, #20]
 800a890:	f04f 0800 	movmi.w	r8, #0
 800a894:	bf58      	it	pl
 800a896:	9305      	strpl	r3, [sp, #20]
 800a898:	f1ba 0f00 	cmp.w	sl, #0
 800a89c:	db3e      	blt.n	800a91c <_dtoa_r+0x224>
 800a89e:	2300      	movs	r3, #0
 800a8a0:	44d0      	add	r8, sl
 800a8a2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a8a6:	9307      	str	r3, [sp, #28]
 800a8a8:	9b06      	ldr	r3, [sp, #24]
 800a8aa:	2b09      	cmp	r3, #9
 800a8ac:	f200 8090 	bhi.w	800a9d0 <_dtoa_r+0x2d8>
 800a8b0:	2b05      	cmp	r3, #5
 800a8b2:	bfc4      	itt	gt
 800a8b4:	3b04      	subgt	r3, #4
 800a8b6:	9306      	strgt	r3, [sp, #24]
 800a8b8:	9b06      	ldr	r3, [sp, #24]
 800a8ba:	f1a3 0302 	sub.w	r3, r3, #2
 800a8be:	bfcc      	ite	gt
 800a8c0:	2500      	movgt	r5, #0
 800a8c2:	2501      	movle	r5, #1
 800a8c4:	2b03      	cmp	r3, #3
 800a8c6:	f200 808f 	bhi.w	800a9e8 <_dtoa_r+0x2f0>
 800a8ca:	e8df f003 	tbb	[pc, r3]
 800a8ce:	7f7d      	.short	0x7f7d
 800a8d0:	7131      	.short	0x7131
 800a8d2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a8d6:	441d      	add	r5, r3
 800a8d8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a8dc:	2820      	cmp	r0, #32
 800a8de:	dd13      	ble.n	800a908 <_dtoa_r+0x210>
 800a8e0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a8e4:	9b00      	ldr	r3, [sp, #0]
 800a8e6:	fa08 f800 	lsl.w	r8, r8, r0
 800a8ea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a8ee:	fa23 f000 	lsr.w	r0, r3, r0
 800a8f2:	ea48 0000 	orr.w	r0, r8, r0
 800a8f6:	f7f5 fe0d 	bl	8000514 <__aeabi_ui2d>
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	4682      	mov	sl, r0
 800a8fe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a902:	3d01      	subs	r5, #1
 800a904:	9313      	str	r3, [sp, #76]	; 0x4c
 800a906:	e772      	b.n	800a7ee <_dtoa_r+0xf6>
 800a908:	9b00      	ldr	r3, [sp, #0]
 800a90a:	f1c0 0020 	rsb	r0, r0, #32
 800a90e:	fa03 f000 	lsl.w	r0, r3, r0
 800a912:	e7f0      	b.n	800a8f6 <_dtoa_r+0x1fe>
 800a914:	2301      	movs	r3, #1
 800a916:	e7b1      	b.n	800a87c <_dtoa_r+0x184>
 800a918:	900f      	str	r0, [sp, #60]	; 0x3c
 800a91a:	e7b0      	b.n	800a87e <_dtoa_r+0x186>
 800a91c:	9b05      	ldr	r3, [sp, #20]
 800a91e:	eba3 030a 	sub.w	r3, r3, sl
 800a922:	9305      	str	r3, [sp, #20]
 800a924:	f1ca 0300 	rsb	r3, sl, #0
 800a928:	9307      	str	r3, [sp, #28]
 800a92a:	2300      	movs	r3, #0
 800a92c:	930e      	str	r3, [sp, #56]	; 0x38
 800a92e:	e7bb      	b.n	800a8a8 <_dtoa_r+0x1b0>
 800a930:	2301      	movs	r3, #1
 800a932:	930a      	str	r3, [sp, #40]	; 0x28
 800a934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a936:	2b00      	cmp	r3, #0
 800a938:	dd59      	ble.n	800a9ee <_dtoa_r+0x2f6>
 800a93a:	9302      	str	r3, [sp, #8]
 800a93c:	4699      	mov	r9, r3
 800a93e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a940:	2200      	movs	r2, #0
 800a942:	6072      	str	r2, [r6, #4]
 800a944:	2204      	movs	r2, #4
 800a946:	f102 0014 	add.w	r0, r2, #20
 800a94a:	4298      	cmp	r0, r3
 800a94c:	6871      	ldr	r1, [r6, #4]
 800a94e:	d953      	bls.n	800a9f8 <_dtoa_r+0x300>
 800a950:	4620      	mov	r0, r4
 800a952:	f000 fca4 	bl	800b29e <_Balloc>
 800a956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a958:	6030      	str	r0, [r6, #0]
 800a95a:	f1b9 0f0e 	cmp.w	r9, #14
 800a95e:	f8d3 b000 	ldr.w	fp, [r3]
 800a962:	f200 80e6 	bhi.w	800ab32 <_dtoa_r+0x43a>
 800a966:	2d00      	cmp	r5, #0
 800a968:	f000 80e3 	beq.w	800ab32 <_dtoa_r+0x43a>
 800a96c:	ed9d 7b00 	vldr	d7, [sp]
 800a970:	f1ba 0f00 	cmp.w	sl, #0
 800a974:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a978:	dd74      	ble.n	800aa64 <_dtoa_r+0x36c>
 800a97a:	4a2a      	ldr	r2, [pc, #168]	; (800aa24 <_dtoa_r+0x32c>)
 800a97c:	f00a 030f 	and.w	r3, sl, #15
 800a980:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a984:	ed93 7b00 	vldr	d7, [r3]
 800a988:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a98c:	06f0      	lsls	r0, r6, #27
 800a98e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a992:	d565      	bpl.n	800aa60 <_dtoa_r+0x368>
 800a994:	4b24      	ldr	r3, [pc, #144]	; (800aa28 <_dtoa_r+0x330>)
 800a996:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a99a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a99e:	f7f5 ff5d 	bl	800085c <__aeabi_ddiv>
 800a9a2:	e9cd 0100 	strd	r0, r1, [sp]
 800a9a6:	f006 060f 	and.w	r6, r6, #15
 800a9aa:	2503      	movs	r5, #3
 800a9ac:	4f1e      	ldr	r7, [pc, #120]	; (800aa28 <_dtoa_r+0x330>)
 800a9ae:	e04c      	b.n	800aa4a <_dtoa_r+0x352>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	930a      	str	r3, [sp, #40]	; 0x28
 800a9b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9b6:	4453      	add	r3, sl
 800a9b8:	f103 0901 	add.w	r9, r3, #1
 800a9bc:	9302      	str	r3, [sp, #8]
 800a9be:	464b      	mov	r3, r9
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	bfb8      	it	lt
 800a9c4:	2301      	movlt	r3, #1
 800a9c6:	e7ba      	b.n	800a93e <_dtoa_r+0x246>
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	e7b2      	b.n	800a932 <_dtoa_r+0x23a>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	e7f0      	b.n	800a9b2 <_dtoa_r+0x2ba>
 800a9d0:	2501      	movs	r5, #1
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	9306      	str	r3, [sp, #24]
 800a9d6:	950a      	str	r5, [sp, #40]	; 0x28
 800a9d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a9dc:	9302      	str	r3, [sp, #8]
 800a9de:	4699      	mov	r9, r3
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	2312      	movs	r3, #18
 800a9e4:	920b      	str	r2, [sp, #44]	; 0x2c
 800a9e6:	e7aa      	b.n	800a93e <_dtoa_r+0x246>
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	930a      	str	r3, [sp, #40]	; 0x28
 800a9ec:	e7f4      	b.n	800a9d8 <_dtoa_r+0x2e0>
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	9302      	str	r3, [sp, #8]
 800a9f2:	4699      	mov	r9, r3
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	e7f5      	b.n	800a9e4 <_dtoa_r+0x2ec>
 800a9f8:	3101      	adds	r1, #1
 800a9fa:	6071      	str	r1, [r6, #4]
 800a9fc:	0052      	lsls	r2, r2, #1
 800a9fe:	e7a2      	b.n	800a946 <_dtoa_r+0x24e>
 800aa00:	636f4361 	.word	0x636f4361
 800aa04:	3fd287a7 	.word	0x3fd287a7
 800aa08:	8b60c8b3 	.word	0x8b60c8b3
 800aa0c:	3fc68a28 	.word	0x3fc68a28
 800aa10:	509f79fb 	.word	0x509f79fb
 800aa14:	3fd34413 	.word	0x3fd34413
 800aa18:	7ff00000 	.word	0x7ff00000
 800aa1c:	0800bd25 	.word	0x0800bd25
 800aa20:	3ff80000 	.word	0x3ff80000
 800aa24:	0800bde0 	.word	0x0800bde0
 800aa28:	0800bdb8 	.word	0x0800bdb8
 800aa2c:	0800bd51 	.word	0x0800bd51
 800aa30:	07f1      	lsls	r1, r6, #31
 800aa32:	d508      	bpl.n	800aa46 <_dtoa_r+0x34e>
 800aa34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aa38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa3c:	f7f5 fde4 	bl	8000608 <__aeabi_dmul>
 800aa40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aa44:	3501      	adds	r5, #1
 800aa46:	1076      	asrs	r6, r6, #1
 800aa48:	3708      	adds	r7, #8
 800aa4a:	2e00      	cmp	r6, #0
 800aa4c:	d1f0      	bne.n	800aa30 <_dtoa_r+0x338>
 800aa4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aa52:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa56:	f7f5 ff01 	bl	800085c <__aeabi_ddiv>
 800aa5a:	e9cd 0100 	strd	r0, r1, [sp]
 800aa5e:	e01a      	b.n	800aa96 <_dtoa_r+0x39e>
 800aa60:	2502      	movs	r5, #2
 800aa62:	e7a3      	b.n	800a9ac <_dtoa_r+0x2b4>
 800aa64:	f000 80a0 	beq.w	800aba8 <_dtoa_r+0x4b0>
 800aa68:	f1ca 0600 	rsb	r6, sl, #0
 800aa6c:	4b9f      	ldr	r3, [pc, #636]	; (800acec <_dtoa_r+0x5f4>)
 800aa6e:	4fa0      	ldr	r7, [pc, #640]	; (800acf0 <_dtoa_r+0x5f8>)
 800aa70:	f006 020f 	and.w	r2, r6, #15
 800aa74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa80:	f7f5 fdc2 	bl	8000608 <__aeabi_dmul>
 800aa84:	e9cd 0100 	strd	r0, r1, [sp]
 800aa88:	1136      	asrs	r6, r6, #4
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	2502      	movs	r5, #2
 800aa8e:	2e00      	cmp	r6, #0
 800aa90:	d17f      	bne.n	800ab92 <_dtoa_r+0x49a>
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d1e1      	bne.n	800aa5a <_dtoa_r+0x362>
 800aa96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	f000 8087 	beq.w	800abac <_dtoa_r+0x4b4>
 800aa9e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	4b93      	ldr	r3, [pc, #588]	; (800acf4 <_dtoa_r+0x5fc>)
 800aaa6:	4630      	mov	r0, r6
 800aaa8:	4639      	mov	r1, r7
 800aaaa:	f7f6 f81f 	bl	8000aec <__aeabi_dcmplt>
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d07c      	beq.n	800abac <_dtoa_r+0x4b4>
 800aab2:	f1b9 0f00 	cmp.w	r9, #0
 800aab6:	d079      	beq.n	800abac <_dtoa_r+0x4b4>
 800aab8:	9b02      	ldr	r3, [sp, #8]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	dd35      	ble.n	800ab2a <_dtoa_r+0x432>
 800aabe:	f10a 33ff 	add.w	r3, sl, #4294967295
 800aac2:	9308      	str	r3, [sp, #32]
 800aac4:	4639      	mov	r1, r7
 800aac6:	2200      	movs	r2, #0
 800aac8:	4b8b      	ldr	r3, [pc, #556]	; (800acf8 <_dtoa_r+0x600>)
 800aaca:	4630      	mov	r0, r6
 800aacc:	f7f5 fd9c 	bl	8000608 <__aeabi_dmul>
 800aad0:	e9cd 0100 	strd	r0, r1, [sp]
 800aad4:	9f02      	ldr	r7, [sp, #8]
 800aad6:	3501      	adds	r5, #1
 800aad8:	4628      	mov	r0, r5
 800aada:	f7f5 fd2b 	bl	8000534 <__aeabi_i2d>
 800aade:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aae2:	f7f5 fd91 	bl	8000608 <__aeabi_dmul>
 800aae6:	2200      	movs	r2, #0
 800aae8:	4b84      	ldr	r3, [pc, #528]	; (800acfc <_dtoa_r+0x604>)
 800aaea:	f7f5 fbd7 	bl	800029c <__adddf3>
 800aaee:	4605      	mov	r5, r0
 800aaf0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800aaf4:	2f00      	cmp	r7, #0
 800aaf6:	d15d      	bne.n	800abb4 <_dtoa_r+0x4bc>
 800aaf8:	2200      	movs	r2, #0
 800aafa:	4b81      	ldr	r3, [pc, #516]	; (800ad00 <_dtoa_r+0x608>)
 800aafc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab00:	f7f5 fbca 	bl	8000298 <__aeabi_dsub>
 800ab04:	462a      	mov	r2, r5
 800ab06:	4633      	mov	r3, r6
 800ab08:	e9cd 0100 	strd	r0, r1, [sp]
 800ab0c:	f7f6 f80c 	bl	8000b28 <__aeabi_dcmpgt>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	f040 8288 	bne.w	800b026 <_dtoa_r+0x92e>
 800ab16:	462a      	mov	r2, r5
 800ab18:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ab1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab20:	f7f5 ffe4 	bl	8000aec <__aeabi_dcmplt>
 800ab24:	2800      	cmp	r0, #0
 800ab26:	f040 827c 	bne.w	800b022 <_dtoa_r+0x92a>
 800ab2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab2e:	e9cd 2300 	strd	r2, r3, [sp]
 800ab32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f2c0 8150 	blt.w	800adda <_dtoa_r+0x6e2>
 800ab3a:	f1ba 0f0e 	cmp.w	sl, #14
 800ab3e:	f300 814c 	bgt.w	800adda <_dtoa_r+0x6e2>
 800ab42:	4b6a      	ldr	r3, [pc, #424]	; (800acec <_dtoa_r+0x5f4>)
 800ab44:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ab48:	ed93 7b00 	vldr	d7, [r3]
 800ab4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab54:	f280 80d8 	bge.w	800ad08 <_dtoa_r+0x610>
 800ab58:	f1b9 0f00 	cmp.w	r9, #0
 800ab5c:	f300 80d4 	bgt.w	800ad08 <_dtoa_r+0x610>
 800ab60:	f040 825e 	bne.w	800b020 <_dtoa_r+0x928>
 800ab64:	2200      	movs	r2, #0
 800ab66:	4b66      	ldr	r3, [pc, #408]	; (800ad00 <_dtoa_r+0x608>)
 800ab68:	ec51 0b17 	vmov	r0, r1, d7
 800ab6c:	f7f5 fd4c 	bl	8000608 <__aeabi_dmul>
 800ab70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab74:	f7f5 ffce 	bl	8000b14 <__aeabi_dcmpge>
 800ab78:	464f      	mov	r7, r9
 800ab7a:	464e      	mov	r6, r9
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	f040 8234 	bne.w	800afea <_dtoa_r+0x8f2>
 800ab82:	2331      	movs	r3, #49	; 0x31
 800ab84:	f10b 0501 	add.w	r5, fp, #1
 800ab88:	f88b 3000 	strb.w	r3, [fp]
 800ab8c:	f10a 0a01 	add.w	sl, sl, #1
 800ab90:	e22f      	b.n	800aff2 <_dtoa_r+0x8fa>
 800ab92:	07f2      	lsls	r2, r6, #31
 800ab94:	d505      	bpl.n	800aba2 <_dtoa_r+0x4aa>
 800ab96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab9a:	f7f5 fd35 	bl	8000608 <__aeabi_dmul>
 800ab9e:	3501      	adds	r5, #1
 800aba0:	2301      	movs	r3, #1
 800aba2:	1076      	asrs	r6, r6, #1
 800aba4:	3708      	adds	r7, #8
 800aba6:	e772      	b.n	800aa8e <_dtoa_r+0x396>
 800aba8:	2502      	movs	r5, #2
 800abaa:	e774      	b.n	800aa96 <_dtoa_r+0x39e>
 800abac:	f8cd a020 	str.w	sl, [sp, #32]
 800abb0:	464f      	mov	r7, r9
 800abb2:	e791      	b.n	800aad8 <_dtoa_r+0x3e0>
 800abb4:	4b4d      	ldr	r3, [pc, #308]	; (800acec <_dtoa_r+0x5f4>)
 800abb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800abba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800abbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d047      	beq.n	800ac54 <_dtoa_r+0x55c>
 800abc4:	4602      	mov	r2, r0
 800abc6:	460b      	mov	r3, r1
 800abc8:	2000      	movs	r0, #0
 800abca:	494e      	ldr	r1, [pc, #312]	; (800ad04 <_dtoa_r+0x60c>)
 800abcc:	f7f5 fe46 	bl	800085c <__aeabi_ddiv>
 800abd0:	462a      	mov	r2, r5
 800abd2:	4633      	mov	r3, r6
 800abd4:	f7f5 fb60 	bl	8000298 <__aeabi_dsub>
 800abd8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800abdc:	465d      	mov	r5, fp
 800abde:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abe2:	f7f5 ffc1 	bl	8000b68 <__aeabi_d2iz>
 800abe6:	4606      	mov	r6, r0
 800abe8:	f7f5 fca4 	bl	8000534 <__aeabi_i2d>
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abf4:	f7f5 fb50 	bl	8000298 <__aeabi_dsub>
 800abf8:	3630      	adds	r6, #48	; 0x30
 800abfa:	f805 6b01 	strb.w	r6, [r5], #1
 800abfe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ac02:	e9cd 0100 	strd	r0, r1, [sp]
 800ac06:	f7f5 ff71 	bl	8000aec <__aeabi_dcmplt>
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	d163      	bne.n	800acd6 <_dtoa_r+0x5de>
 800ac0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac12:	2000      	movs	r0, #0
 800ac14:	4937      	ldr	r1, [pc, #220]	; (800acf4 <_dtoa_r+0x5fc>)
 800ac16:	f7f5 fb3f 	bl	8000298 <__aeabi_dsub>
 800ac1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ac1e:	f7f5 ff65 	bl	8000aec <__aeabi_dcmplt>
 800ac22:	2800      	cmp	r0, #0
 800ac24:	f040 80b7 	bne.w	800ad96 <_dtoa_r+0x69e>
 800ac28:	eba5 030b 	sub.w	r3, r5, fp
 800ac2c:	429f      	cmp	r7, r3
 800ac2e:	f77f af7c 	ble.w	800ab2a <_dtoa_r+0x432>
 800ac32:	2200      	movs	r2, #0
 800ac34:	4b30      	ldr	r3, [pc, #192]	; (800acf8 <_dtoa_r+0x600>)
 800ac36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac3a:	f7f5 fce5 	bl	8000608 <__aeabi_dmul>
 800ac3e:	2200      	movs	r2, #0
 800ac40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ac44:	4b2c      	ldr	r3, [pc, #176]	; (800acf8 <_dtoa_r+0x600>)
 800ac46:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac4a:	f7f5 fcdd 	bl	8000608 <__aeabi_dmul>
 800ac4e:	e9cd 0100 	strd	r0, r1, [sp]
 800ac52:	e7c4      	b.n	800abde <_dtoa_r+0x4e6>
 800ac54:	462a      	mov	r2, r5
 800ac56:	4633      	mov	r3, r6
 800ac58:	f7f5 fcd6 	bl	8000608 <__aeabi_dmul>
 800ac5c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ac60:	eb0b 0507 	add.w	r5, fp, r7
 800ac64:	465e      	mov	r6, fp
 800ac66:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac6a:	f7f5 ff7d 	bl	8000b68 <__aeabi_d2iz>
 800ac6e:	4607      	mov	r7, r0
 800ac70:	f7f5 fc60 	bl	8000534 <__aeabi_i2d>
 800ac74:	3730      	adds	r7, #48	; 0x30
 800ac76:	4602      	mov	r2, r0
 800ac78:	460b      	mov	r3, r1
 800ac7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac7e:	f7f5 fb0b 	bl	8000298 <__aeabi_dsub>
 800ac82:	f806 7b01 	strb.w	r7, [r6], #1
 800ac86:	42ae      	cmp	r6, r5
 800ac88:	e9cd 0100 	strd	r0, r1, [sp]
 800ac8c:	f04f 0200 	mov.w	r2, #0
 800ac90:	d126      	bne.n	800ace0 <_dtoa_r+0x5e8>
 800ac92:	4b1c      	ldr	r3, [pc, #112]	; (800ad04 <_dtoa_r+0x60c>)
 800ac94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac98:	f7f5 fb00 	bl	800029c <__adddf3>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	460b      	mov	r3, r1
 800aca0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aca4:	f7f5 ff40 	bl	8000b28 <__aeabi_dcmpgt>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	d174      	bne.n	800ad96 <_dtoa_r+0x69e>
 800acac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800acb0:	2000      	movs	r0, #0
 800acb2:	4914      	ldr	r1, [pc, #80]	; (800ad04 <_dtoa_r+0x60c>)
 800acb4:	f7f5 faf0 	bl	8000298 <__aeabi_dsub>
 800acb8:	4602      	mov	r2, r0
 800acba:	460b      	mov	r3, r1
 800acbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800acc0:	f7f5 ff14 	bl	8000aec <__aeabi_dcmplt>
 800acc4:	2800      	cmp	r0, #0
 800acc6:	f43f af30 	beq.w	800ab2a <_dtoa_r+0x432>
 800acca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800acce:	2b30      	cmp	r3, #48	; 0x30
 800acd0:	f105 32ff 	add.w	r2, r5, #4294967295
 800acd4:	d002      	beq.n	800acdc <_dtoa_r+0x5e4>
 800acd6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800acda:	e04a      	b.n	800ad72 <_dtoa_r+0x67a>
 800acdc:	4615      	mov	r5, r2
 800acde:	e7f4      	b.n	800acca <_dtoa_r+0x5d2>
 800ace0:	4b05      	ldr	r3, [pc, #20]	; (800acf8 <_dtoa_r+0x600>)
 800ace2:	f7f5 fc91 	bl	8000608 <__aeabi_dmul>
 800ace6:	e9cd 0100 	strd	r0, r1, [sp]
 800acea:	e7bc      	b.n	800ac66 <_dtoa_r+0x56e>
 800acec:	0800bde0 	.word	0x0800bde0
 800acf0:	0800bdb8 	.word	0x0800bdb8
 800acf4:	3ff00000 	.word	0x3ff00000
 800acf8:	40240000 	.word	0x40240000
 800acfc:	401c0000 	.word	0x401c0000
 800ad00:	40140000 	.word	0x40140000
 800ad04:	3fe00000 	.word	0x3fe00000
 800ad08:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ad0c:	465d      	mov	r5, fp
 800ad0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad12:	4630      	mov	r0, r6
 800ad14:	4639      	mov	r1, r7
 800ad16:	f7f5 fda1 	bl	800085c <__aeabi_ddiv>
 800ad1a:	f7f5 ff25 	bl	8000b68 <__aeabi_d2iz>
 800ad1e:	4680      	mov	r8, r0
 800ad20:	f7f5 fc08 	bl	8000534 <__aeabi_i2d>
 800ad24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad28:	f7f5 fc6e 	bl	8000608 <__aeabi_dmul>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	460b      	mov	r3, r1
 800ad30:	4630      	mov	r0, r6
 800ad32:	4639      	mov	r1, r7
 800ad34:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800ad38:	f7f5 faae 	bl	8000298 <__aeabi_dsub>
 800ad3c:	f805 6b01 	strb.w	r6, [r5], #1
 800ad40:	eba5 060b 	sub.w	r6, r5, fp
 800ad44:	45b1      	cmp	r9, r6
 800ad46:	4602      	mov	r2, r0
 800ad48:	460b      	mov	r3, r1
 800ad4a:	d139      	bne.n	800adc0 <_dtoa_r+0x6c8>
 800ad4c:	f7f5 faa6 	bl	800029c <__adddf3>
 800ad50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad54:	4606      	mov	r6, r0
 800ad56:	460f      	mov	r7, r1
 800ad58:	f7f5 fee6 	bl	8000b28 <__aeabi_dcmpgt>
 800ad5c:	b9c8      	cbnz	r0, 800ad92 <_dtoa_r+0x69a>
 800ad5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad62:	4630      	mov	r0, r6
 800ad64:	4639      	mov	r1, r7
 800ad66:	f7f5 feb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad6a:	b110      	cbz	r0, 800ad72 <_dtoa_r+0x67a>
 800ad6c:	f018 0f01 	tst.w	r8, #1
 800ad70:	d10f      	bne.n	800ad92 <_dtoa_r+0x69a>
 800ad72:	9904      	ldr	r1, [sp, #16]
 800ad74:	4620      	mov	r0, r4
 800ad76:	f000 fac6 	bl	800b306 <_Bfree>
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ad7e:	702b      	strb	r3, [r5, #0]
 800ad80:	f10a 0301 	add.w	r3, sl, #1
 800ad84:	6013      	str	r3, [r2, #0]
 800ad86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f000 8241 	beq.w	800b210 <_dtoa_r+0xb18>
 800ad8e:	601d      	str	r5, [r3, #0]
 800ad90:	e23e      	b.n	800b210 <_dtoa_r+0xb18>
 800ad92:	f8cd a020 	str.w	sl, [sp, #32]
 800ad96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad9a:	2a39      	cmp	r2, #57	; 0x39
 800ad9c:	f105 33ff 	add.w	r3, r5, #4294967295
 800ada0:	d108      	bne.n	800adb4 <_dtoa_r+0x6bc>
 800ada2:	459b      	cmp	fp, r3
 800ada4:	d10a      	bne.n	800adbc <_dtoa_r+0x6c4>
 800ada6:	9b08      	ldr	r3, [sp, #32]
 800ada8:	3301      	adds	r3, #1
 800adaa:	9308      	str	r3, [sp, #32]
 800adac:	2330      	movs	r3, #48	; 0x30
 800adae:	f88b 3000 	strb.w	r3, [fp]
 800adb2:	465b      	mov	r3, fp
 800adb4:	781a      	ldrb	r2, [r3, #0]
 800adb6:	3201      	adds	r2, #1
 800adb8:	701a      	strb	r2, [r3, #0]
 800adba:	e78c      	b.n	800acd6 <_dtoa_r+0x5de>
 800adbc:	461d      	mov	r5, r3
 800adbe:	e7ea      	b.n	800ad96 <_dtoa_r+0x69e>
 800adc0:	2200      	movs	r2, #0
 800adc2:	4b9b      	ldr	r3, [pc, #620]	; (800b030 <_dtoa_r+0x938>)
 800adc4:	f7f5 fc20 	bl	8000608 <__aeabi_dmul>
 800adc8:	2200      	movs	r2, #0
 800adca:	2300      	movs	r3, #0
 800adcc:	4606      	mov	r6, r0
 800adce:	460f      	mov	r7, r1
 800add0:	f7f5 fe82 	bl	8000ad8 <__aeabi_dcmpeq>
 800add4:	2800      	cmp	r0, #0
 800add6:	d09a      	beq.n	800ad0e <_dtoa_r+0x616>
 800add8:	e7cb      	b.n	800ad72 <_dtoa_r+0x67a>
 800adda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800addc:	2a00      	cmp	r2, #0
 800adde:	f000 808b 	beq.w	800aef8 <_dtoa_r+0x800>
 800ade2:	9a06      	ldr	r2, [sp, #24]
 800ade4:	2a01      	cmp	r2, #1
 800ade6:	dc6e      	bgt.n	800aec6 <_dtoa_r+0x7ce>
 800ade8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800adea:	2a00      	cmp	r2, #0
 800adec:	d067      	beq.n	800aebe <_dtoa_r+0x7c6>
 800adee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800adf2:	9f07      	ldr	r7, [sp, #28]
 800adf4:	9d05      	ldr	r5, [sp, #20]
 800adf6:	9a05      	ldr	r2, [sp, #20]
 800adf8:	2101      	movs	r1, #1
 800adfa:	441a      	add	r2, r3
 800adfc:	4620      	mov	r0, r4
 800adfe:	9205      	str	r2, [sp, #20]
 800ae00:	4498      	add	r8, r3
 800ae02:	f000 fb20 	bl	800b446 <__i2b>
 800ae06:	4606      	mov	r6, r0
 800ae08:	2d00      	cmp	r5, #0
 800ae0a:	dd0c      	ble.n	800ae26 <_dtoa_r+0x72e>
 800ae0c:	f1b8 0f00 	cmp.w	r8, #0
 800ae10:	dd09      	ble.n	800ae26 <_dtoa_r+0x72e>
 800ae12:	4545      	cmp	r5, r8
 800ae14:	9a05      	ldr	r2, [sp, #20]
 800ae16:	462b      	mov	r3, r5
 800ae18:	bfa8      	it	ge
 800ae1a:	4643      	movge	r3, r8
 800ae1c:	1ad2      	subs	r2, r2, r3
 800ae1e:	9205      	str	r2, [sp, #20]
 800ae20:	1aed      	subs	r5, r5, r3
 800ae22:	eba8 0803 	sub.w	r8, r8, r3
 800ae26:	9b07      	ldr	r3, [sp, #28]
 800ae28:	b1eb      	cbz	r3, 800ae66 <_dtoa_r+0x76e>
 800ae2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d067      	beq.n	800af00 <_dtoa_r+0x808>
 800ae30:	b18f      	cbz	r7, 800ae56 <_dtoa_r+0x75e>
 800ae32:	4631      	mov	r1, r6
 800ae34:	463a      	mov	r2, r7
 800ae36:	4620      	mov	r0, r4
 800ae38:	f000 fba4 	bl	800b584 <__pow5mult>
 800ae3c:	9a04      	ldr	r2, [sp, #16]
 800ae3e:	4601      	mov	r1, r0
 800ae40:	4606      	mov	r6, r0
 800ae42:	4620      	mov	r0, r4
 800ae44:	f000 fb08 	bl	800b458 <__multiply>
 800ae48:	9904      	ldr	r1, [sp, #16]
 800ae4a:	9008      	str	r0, [sp, #32]
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	f000 fa5a 	bl	800b306 <_Bfree>
 800ae52:	9b08      	ldr	r3, [sp, #32]
 800ae54:	9304      	str	r3, [sp, #16]
 800ae56:	9b07      	ldr	r3, [sp, #28]
 800ae58:	1bda      	subs	r2, r3, r7
 800ae5a:	d004      	beq.n	800ae66 <_dtoa_r+0x76e>
 800ae5c:	9904      	ldr	r1, [sp, #16]
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f000 fb90 	bl	800b584 <__pow5mult>
 800ae64:	9004      	str	r0, [sp, #16]
 800ae66:	2101      	movs	r1, #1
 800ae68:	4620      	mov	r0, r4
 800ae6a:	f000 faec 	bl	800b446 <__i2b>
 800ae6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae70:	4607      	mov	r7, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	f000 81d0 	beq.w	800b218 <_dtoa_r+0xb20>
 800ae78:	461a      	mov	r2, r3
 800ae7a:	4601      	mov	r1, r0
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f000 fb81 	bl	800b584 <__pow5mult>
 800ae82:	9b06      	ldr	r3, [sp, #24]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	4607      	mov	r7, r0
 800ae88:	dc40      	bgt.n	800af0c <_dtoa_r+0x814>
 800ae8a:	9b00      	ldr	r3, [sp, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d139      	bne.n	800af04 <_dtoa_r+0x80c>
 800ae90:	9b01      	ldr	r3, [sp, #4]
 800ae92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d136      	bne.n	800af08 <_dtoa_r+0x810>
 800ae9a:	9b01      	ldr	r3, [sp, #4]
 800ae9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aea0:	0d1b      	lsrs	r3, r3, #20
 800aea2:	051b      	lsls	r3, r3, #20
 800aea4:	b12b      	cbz	r3, 800aeb2 <_dtoa_r+0x7ba>
 800aea6:	9b05      	ldr	r3, [sp, #20]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	9305      	str	r3, [sp, #20]
 800aeac:	f108 0801 	add.w	r8, r8, #1
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	9307      	str	r3, [sp, #28]
 800aeb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d12a      	bne.n	800af10 <_dtoa_r+0x818>
 800aeba:	2001      	movs	r0, #1
 800aebc:	e030      	b.n	800af20 <_dtoa_r+0x828>
 800aebe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aec0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aec4:	e795      	b.n	800adf2 <_dtoa_r+0x6fa>
 800aec6:	9b07      	ldr	r3, [sp, #28]
 800aec8:	f109 37ff 	add.w	r7, r9, #4294967295
 800aecc:	42bb      	cmp	r3, r7
 800aece:	bfbf      	itttt	lt
 800aed0:	9b07      	ldrlt	r3, [sp, #28]
 800aed2:	9707      	strlt	r7, [sp, #28]
 800aed4:	1afa      	sublt	r2, r7, r3
 800aed6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800aed8:	bfbb      	ittet	lt
 800aeda:	189b      	addlt	r3, r3, r2
 800aedc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800aede:	1bdf      	subge	r7, r3, r7
 800aee0:	2700      	movlt	r7, #0
 800aee2:	f1b9 0f00 	cmp.w	r9, #0
 800aee6:	bfb5      	itete	lt
 800aee8:	9b05      	ldrlt	r3, [sp, #20]
 800aeea:	9d05      	ldrge	r5, [sp, #20]
 800aeec:	eba3 0509 	sublt.w	r5, r3, r9
 800aef0:	464b      	movge	r3, r9
 800aef2:	bfb8      	it	lt
 800aef4:	2300      	movlt	r3, #0
 800aef6:	e77e      	b.n	800adf6 <_dtoa_r+0x6fe>
 800aef8:	9f07      	ldr	r7, [sp, #28]
 800aefa:	9d05      	ldr	r5, [sp, #20]
 800aefc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800aefe:	e783      	b.n	800ae08 <_dtoa_r+0x710>
 800af00:	9a07      	ldr	r2, [sp, #28]
 800af02:	e7ab      	b.n	800ae5c <_dtoa_r+0x764>
 800af04:	2300      	movs	r3, #0
 800af06:	e7d4      	b.n	800aeb2 <_dtoa_r+0x7ba>
 800af08:	9b00      	ldr	r3, [sp, #0]
 800af0a:	e7d2      	b.n	800aeb2 <_dtoa_r+0x7ba>
 800af0c:	2300      	movs	r3, #0
 800af0e:	9307      	str	r3, [sp, #28]
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800af16:	6918      	ldr	r0, [r3, #16]
 800af18:	f000 fa47 	bl	800b3aa <__hi0bits>
 800af1c:	f1c0 0020 	rsb	r0, r0, #32
 800af20:	4440      	add	r0, r8
 800af22:	f010 001f 	ands.w	r0, r0, #31
 800af26:	d047      	beq.n	800afb8 <_dtoa_r+0x8c0>
 800af28:	f1c0 0320 	rsb	r3, r0, #32
 800af2c:	2b04      	cmp	r3, #4
 800af2e:	dd3b      	ble.n	800afa8 <_dtoa_r+0x8b0>
 800af30:	9b05      	ldr	r3, [sp, #20]
 800af32:	f1c0 001c 	rsb	r0, r0, #28
 800af36:	4403      	add	r3, r0
 800af38:	9305      	str	r3, [sp, #20]
 800af3a:	4405      	add	r5, r0
 800af3c:	4480      	add	r8, r0
 800af3e:	9b05      	ldr	r3, [sp, #20]
 800af40:	2b00      	cmp	r3, #0
 800af42:	dd05      	ble.n	800af50 <_dtoa_r+0x858>
 800af44:	461a      	mov	r2, r3
 800af46:	9904      	ldr	r1, [sp, #16]
 800af48:	4620      	mov	r0, r4
 800af4a:	f000 fb69 	bl	800b620 <__lshift>
 800af4e:	9004      	str	r0, [sp, #16]
 800af50:	f1b8 0f00 	cmp.w	r8, #0
 800af54:	dd05      	ble.n	800af62 <_dtoa_r+0x86a>
 800af56:	4639      	mov	r1, r7
 800af58:	4642      	mov	r2, r8
 800af5a:	4620      	mov	r0, r4
 800af5c:	f000 fb60 	bl	800b620 <__lshift>
 800af60:	4607      	mov	r7, r0
 800af62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af64:	b353      	cbz	r3, 800afbc <_dtoa_r+0x8c4>
 800af66:	4639      	mov	r1, r7
 800af68:	9804      	ldr	r0, [sp, #16]
 800af6a:	f000 fbad 	bl	800b6c8 <__mcmp>
 800af6e:	2800      	cmp	r0, #0
 800af70:	da24      	bge.n	800afbc <_dtoa_r+0x8c4>
 800af72:	2300      	movs	r3, #0
 800af74:	220a      	movs	r2, #10
 800af76:	9904      	ldr	r1, [sp, #16]
 800af78:	4620      	mov	r0, r4
 800af7a:	f000 f9db 	bl	800b334 <__multadd>
 800af7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af80:	9004      	str	r0, [sp, #16]
 800af82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af86:	2b00      	cmp	r3, #0
 800af88:	f000 814d 	beq.w	800b226 <_dtoa_r+0xb2e>
 800af8c:	2300      	movs	r3, #0
 800af8e:	4631      	mov	r1, r6
 800af90:	220a      	movs	r2, #10
 800af92:	4620      	mov	r0, r4
 800af94:	f000 f9ce 	bl	800b334 <__multadd>
 800af98:	9b02      	ldr	r3, [sp, #8]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	4606      	mov	r6, r0
 800af9e:	dc4f      	bgt.n	800b040 <_dtoa_r+0x948>
 800afa0:	9b06      	ldr	r3, [sp, #24]
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	dd4c      	ble.n	800b040 <_dtoa_r+0x948>
 800afa6:	e011      	b.n	800afcc <_dtoa_r+0x8d4>
 800afa8:	d0c9      	beq.n	800af3e <_dtoa_r+0x846>
 800afaa:	9a05      	ldr	r2, [sp, #20]
 800afac:	331c      	adds	r3, #28
 800afae:	441a      	add	r2, r3
 800afb0:	9205      	str	r2, [sp, #20]
 800afb2:	441d      	add	r5, r3
 800afb4:	4498      	add	r8, r3
 800afb6:	e7c2      	b.n	800af3e <_dtoa_r+0x846>
 800afb8:	4603      	mov	r3, r0
 800afba:	e7f6      	b.n	800afaa <_dtoa_r+0x8b2>
 800afbc:	f1b9 0f00 	cmp.w	r9, #0
 800afc0:	dc38      	bgt.n	800b034 <_dtoa_r+0x93c>
 800afc2:	9b06      	ldr	r3, [sp, #24]
 800afc4:	2b02      	cmp	r3, #2
 800afc6:	dd35      	ble.n	800b034 <_dtoa_r+0x93c>
 800afc8:	f8cd 9008 	str.w	r9, [sp, #8]
 800afcc:	9b02      	ldr	r3, [sp, #8]
 800afce:	b963      	cbnz	r3, 800afea <_dtoa_r+0x8f2>
 800afd0:	4639      	mov	r1, r7
 800afd2:	2205      	movs	r2, #5
 800afd4:	4620      	mov	r0, r4
 800afd6:	f000 f9ad 	bl	800b334 <__multadd>
 800afda:	4601      	mov	r1, r0
 800afdc:	4607      	mov	r7, r0
 800afde:	9804      	ldr	r0, [sp, #16]
 800afe0:	f000 fb72 	bl	800b6c8 <__mcmp>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	f73f adcc 	bgt.w	800ab82 <_dtoa_r+0x48a>
 800afea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afec:	465d      	mov	r5, fp
 800afee:	ea6f 0a03 	mvn.w	sl, r3
 800aff2:	f04f 0900 	mov.w	r9, #0
 800aff6:	4639      	mov	r1, r7
 800aff8:	4620      	mov	r0, r4
 800affa:	f000 f984 	bl	800b306 <_Bfree>
 800affe:	2e00      	cmp	r6, #0
 800b000:	f43f aeb7 	beq.w	800ad72 <_dtoa_r+0x67a>
 800b004:	f1b9 0f00 	cmp.w	r9, #0
 800b008:	d005      	beq.n	800b016 <_dtoa_r+0x91e>
 800b00a:	45b1      	cmp	r9, r6
 800b00c:	d003      	beq.n	800b016 <_dtoa_r+0x91e>
 800b00e:	4649      	mov	r1, r9
 800b010:	4620      	mov	r0, r4
 800b012:	f000 f978 	bl	800b306 <_Bfree>
 800b016:	4631      	mov	r1, r6
 800b018:	4620      	mov	r0, r4
 800b01a:	f000 f974 	bl	800b306 <_Bfree>
 800b01e:	e6a8      	b.n	800ad72 <_dtoa_r+0x67a>
 800b020:	2700      	movs	r7, #0
 800b022:	463e      	mov	r6, r7
 800b024:	e7e1      	b.n	800afea <_dtoa_r+0x8f2>
 800b026:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b02a:	463e      	mov	r6, r7
 800b02c:	e5a9      	b.n	800ab82 <_dtoa_r+0x48a>
 800b02e:	bf00      	nop
 800b030:	40240000 	.word	0x40240000
 800b034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b036:	f8cd 9008 	str.w	r9, [sp, #8]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	f000 80fa 	beq.w	800b234 <_dtoa_r+0xb3c>
 800b040:	2d00      	cmp	r5, #0
 800b042:	dd05      	ble.n	800b050 <_dtoa_r+0x958>
 800b044:	4631      	mov	r1, r6
 800b046:	462a      	mov	r2, r5
 800b048:	4620      	mov	r0, r4
 800b04a:	f000 fae9 	bl	800b620 <__lshift>
 800b04e:	4606      	mov	r6, r0
 800b050:	9b07      	ldr	r3, [sp, #28]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d04c      	beq.n	800b0f0 <_dtoa_r+0x9f8>
 800b056:	6871      	ldr	r1, [r6, #4]
 800b058:	4620      	mov	r0, r4
 800b05a:	f000 f920 	bl	800b29e <_Balloc>
 800b05e:	6932      	ldr	r2, [r6, #16]
 800b060:	3202      	adds	r2, #2
 800b062:	4605      	mov	r5, r0
 800b064:	0092      	lsls	r2, r2, #2
 800b066:	f106 010c 	add.w	r1, r6, #12
 800b06a:	300c      	adds	r0, #12
 800b06c:	f000 f90a 	bl	800b284 <memcpy>
 800b070:	2201      	movs	r2, #1
 800b072:	4629      	mov	r1, r5
 800b074:	4620      	mov	r0, r4
 800b076:	f000 fad3 	bl	800b620 <__lshift>
 800b07a:	9b00      	ldr	r3, [sp, #0]
 800b07c:	f8cd b014 	str.w	fp, [sp, #20]
 800b080:	f003 0301 	and.w	r3, r3, #1
 800b084:	46b1      	mov	r9, r6
 800b086:	9307      	str	r3, [sp, #28]
 800b088:	4606      	mov	r6, r0
 800b08a:	4639      	mov	r1, r7
 800b08c:	9804      	ldr	r0, [sp, #16]
 800b08e:	f7ff faa5 	bl	800a5dc <quorem>
 800b092:	4649      	mov	r1, r9
 800b094:	4605      	mov	r5, r0
 800b096:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b09a:	9804      	ldr	r0, [sp, #16]
 800b09c:	f000 fb14 	bl	800b6c8 <__mcmp>
 800b0a0:	4632      	mov	r2, r6
 800b0a2:	9000      	str	r0, [sp, #0]
 800b0a4:	4639      	mov	r1, r7
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f000 fb28 	bl	800b6fc <__mdiff>
 800b0ac:	68c3      	ldr	r3, [r0, #12]
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	bb03      	cbnz	r3, 800b0f4 <_dtoa_r+0x9fc>
 800b0b2:	4601      	mov	r1, r0
 800b0b4:	9008      	str	r0, [sp, #32]
 800b0b6:	9804      	ldr	r0, [sp, #16]
 800b0b8:	f000 fb06 	bl	800b6c8 <__mcmp>
 800b0bc:	9a08      	ldr	r2, [sp, #32]
 800b0be:	4603      	mov	r3, r0
 800b0c0:	4611      	mov	r1, r2
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	9308      	str	r3, [sp, #32]
 800b0c6:	f000 f91e 	bl	800b306 <_Bfree>
 800b0ca:	9b08      	ldr	r3, [sp, #32]
 800b0cc:	b9a3      	cbnz	r3, 800b0f8 <_dtoa_r+0xa00>
 800b0ce:	9a06      	ldr	r2, [sp, #24]
 800b0d0:	b992      	cbnz	r2, 800b0f8 <_dtoa_r+0xa00>
 800b0d2:	9a07      	ldr	r2, [sp, #28]
 800b0d4:	b982      	cbnz	r2, 800b0f8 <_dtoa_r+0xa00>
 800b0d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b0da:	d029      	beq.n	800b130 <_dtoa_r+0xa38>
 800b0dc:	9b00      	ldr	r3, [sp, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	dd01      	ble.n	800b0e6 <_dtoa_r+0x9ee>
 800b0e2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b0e6:	9b05      	ldr	r3, [sp, #20]
 800b0e8:	1c5d      	adds	r5, r3, #1
 800b0ea:	f883 8000 	strb.w	r8, [r3]
 800b0ee:	e782      	b.n	800aff6 <_dtoa_r+0x8fe>
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	e7c2      	b.n	800b07a <_dtoa_r+0x982>
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e7e3      	b.n	800b0c0 <_dtoa_r+0x9c8>
 800b0f8:	9a00      	ldr	r2, [sp, #0]
 800b0fa:	2a00      	cmp	r2, #0
 800b0fc:	db04      	blt.n	800b108 <_dtoa_r+0xa10>
 800b0fe:	d125      	bne.n	800b14c <_dtoa_r+0xa54>
 800b100:	9a06      	ldr	r2, [sp, #24]
 800b102:	bb1a      	cbnz	r2, 800b14c <_dtoa_r+0xa54>
 800b104:	9a07      	ldr	r2, [sp, #28]
 800b106:	bb0a      	cbnz	r2, 800b14c <_dtoa_r+0xa54>
 800b108:	2b00      	cmp	r3, #0
 800b10a:	ddec      	ble.n	800b0e6 <_dtoa_r+0x9ee>
 800b10c:	2201      	movs	r2, #1
 800b10e:	9904      	ldr	r1, [sp, #16]
 800b110:	4620      	mov	r0, r4
 800b112:	f000 fa85 	bl	800b620 <__lshift>
 800b116:	4639      	mov	r1, r7
 800b118:	9004      	str	r0, [sp, #16]
 800b11a:	f000 fad5 	bl	800b6c8 <__mcmp>
 800b11e:	2800      	cmp	r0, #0
 800b120:	dc03      	bgt.n	800b12a <_dtoa_r+0xa32>
 800b122:	d1e0      	bne.n	800b0e6 <_dtoa_r+0x9ee>
 800b124:	f018 0f01 	tst.w	r8, #1
 800b128:	d0dd      	beq.n	800b0e6 <_dtoa_r+0x9ee>
 800b12a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b12e:	d1d8      	bne.n	800b0e2 <_dtoa_r+0x9ea>
 800b130:	9b05      	ldr	r3, [sp, #20]
 800b132:	9a05      	ldr	r2, [sp, #20]
 800b134:	1c5d      	adds	r5, r3, #1
 800b136:	2339      	movs	r3, #57	; 0x39
 800b138:	7013      	strb	r3, [r2, #0]
 800b13a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b13e:	2b39      	cmp	r3, #57	; 0x39
 800b140:	f105 32ff 	add.w	r2, r5, #4294967295
 800b144:	d04f      	beq.n	800b1e6 <_dtoa_r+0xaee>
 800b146:	3301      	adds	r3, #1
 800b148:	7013      	strb	r3, [r2, #0]
 800b14a:	e754      	b.n	800aff6 <_dtoa_r+0x8fe>
 800b14c:	9a05      	ldr	r2, [sp, #20]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f102 0501 	add.w	r5, r2, #1
 800b154:	dd06      	ble.n	800b164 <_dtoa_r+0xa6c>
 800b156:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b15a:	d0e9      	beq.n	800b130 <_dtoa_r+0xa38>
 800b15c:	f108 0801 	add.w	r8, r8, #1
 800b160:	9b05      	ldr	r3, [sp, #20]
 800b162:	e7c2      	b.n	800b0ea <_dtoa_r+0x9f2>
 800b164:	9a02      	ldr	r2, [sp, #8]
 800b166:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b16a:	eba5 030b 	sub.w	r3, r5, fp
 800b16e:	4293      	cmp	r3, r2
 800b170:	d021      	beq.n	800b1b6 <_dtoa_r+0xabe>
 800b172:	2300      	movs	r3, #0
 800b174:	220a      	movs	r2, #10
 800b176:	9904      	ldr	r1, [sp, #16]
 800b178:	4620      	mov	r0, r4
 800b17a:	f000 f8db 	bl	800b334 <__multadd>
 800b17e:	45b1      	cmp	r9, r6
 800b180:	9004      	str	r0, [sp, #16]
 800b182:	f04f 0300 	mov.w	r3, #0
 800b186:	f04f 020a 	mov.w	r2, #10
 800b18a:	4649      	mov	r1, r9
 800b18c:	4620      	mov	r0, r4
 800b18e:	d105      	bne.n	800b19c <_dtoa_r+0xaa4>
 800b190:	f000 f8d0 	bl	800b334 <__multadd>
 800b194:	4681      	mov	r9, r0
 800b196:	4606      	mov	r6, r0
 800b198:	9505      	str	r5, [sp, #20]
 800b19a:	e776      	b.n	800b08a <_dtoa_r+0x992>
 800b19c:	f000 f8ca 	bl	800b334 <__multadd>
 800b1a0:	4631      	mov	r1, r6
 800b1a2:	4681      	mov	r9, r0
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	220a      	movs	r2, #10
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	f000 f8c3 	bl	800b334 <__multadd>
 800b1ae:	4606      	mov	r6, r0
 800b1b0:	e7f2      	b.n	800b198 <_dtoa_r+0xaa0>
 800b1b2:	f04f 0900 	mov.w	r9, #0
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	9904      	ldr	r1, [sp, #16]
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f000 fa30 	bl	800b620 <__lshift>
 800b1c0:	4639      	mov	r1, r7
 800b1c2:	9004      	str	r0, [sp, #16]
 800b1c4:	f000 fa80 	bl	800b6c8 <__mcmp>
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	dcb6      	bgt.n	800b13a <_dtoa_r+0xa42>
 800b1cc:	d102      	bne.n	800b1d4 <_dtoa_r+0xadc>
 800b1ce:	f018 0f01 	tst.w	r8, #1
 800b1d2:	d1b2      	bne.n	800b13a <_dtoa_r+0xa42>
 800b1d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b1d8:	2b30      	cmp	r3, #48	; 0x30
 800b1da:	f105 32ff 	add.w	r2, r5, #4294967295
 800b1de:	f47f af0a 	bne.w	800aff6 <_dtoa_r+0x8fe>
 800b1e2:	4615      	mov	r5, r2
 800b1e4:	e7f6      	b.n	800b1d4 <_dtoa_r+0xadc>
 800b1e6:	4593      	cmp	fp, r2
 800b1e8:	d105      	bne.n	800b1f6 <_dtoa_r+0xafe>
 800b1ea:	2331      	movs	r3, #49	; 0x31
 800b1ec:	f10a 0a01 	add.w	sl, sl, #1
 800b1f0:	f88b 3000 	strb.w	r3, [fp]
 800b1f4:	e6ff      	b.n	800aff6 <_dtoa_r+0x8fe>
 800b1f6:	4615      	mov	r5, r2
 800b1f8:	e79f      	b.n	800b13a <_dtoa_r+0xa42>
 800b1fa:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b260 <_dtoa_r+0xb68>
 800b1fe:	e007      	b.n	800b210 <_dtoa_r+0xb18>
 800b200:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b202:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b264 <_dtoa_r+0xb6c>
 800b206:	b11b      	cbz	r3, 800b210 <_dtoa_r+0xb18>
 800b208:	f10b 0308 	add.w	r3, fp, #8
 800b20c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b20e:	6013      	str	r3, [r2, #0]
 800b210:	4658      	mov	r0, fp
 800b212:	b017      	add	sp, #92	; 0x5c
 800b214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b218:	9b06      	ldr	r3, [sp, #24]
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	f77f ae35 	ble.w	800ae8a <_dtoa_r+0x792>
 800b220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b222:	9307      	str	r3, [sp, #28]
 800b224:	e649      	b.n	800aeba <_dtoa_r+0x7c2>
 800b226:	9b02      	ldr	r3, [sp, #8]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	dc03      	bgt.n	800b234 <_dtoa_r+0xb3c>
 800b22c:	9b06      	ldr	r3, [sp, #24]
 800b22e:	2b02      	cmp	r3, #2
 800b230:	f73f aecc 	bgt.w	800afcc <_dtoa_r+0x8d4>
 800b234:	465d      	mov	r5, fp
 800b236:	4639      	mov	r1, r7
 800b238:	9804      	ldr	r0, [sp, #16]
 800b23a:	f7ff f9cf 	bl	800a5dc <quorem>
 800b23e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b242:	f805 8b01 	strb.w	r8, [r5], #1
 800b246:	9a02      	ldr	r2, [sp, #8]
 800b248:	eba5 030b 	sub.w	r3, r5, fp
 800b24c:	429a      	cmp	r2, r3
 800b24e:	ddb0      	ble.n	800b1b2 <_dtoa_r+0xaba>
 800b250:	2300      	movs	r3, #0
 800b252:	220a      	movs	r2, #10
 800b254:	9904      	ldr	r1, [sp, #16]
 800b256:	4620      	mov	r0, r4
 800b258:	f000 f86c 	bl	800b334 <__multadd>
 800b25c:	9004      	str	r0, [sp, #16]
 800b25e:	e7ea      	b.n	800b236 <_dtoa_r+0xb3e>
 800b260:	0800bd24 	.word	0x0800bd24
 800b264:	0800bd48 	.word	0x0800bd48

0800b268 <_localeconv_r>:
 800b268:	4b04      	ldr	r3, [pc, #16]	; (800b27c <_localeconv_r+0x14>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	6a18      	ldr	r0, [r3, #32]
 800b26e:	4b04      	ldr	r3, [pc, #16]	; (800b280 <_localeconv_r+0x18>)
 800b270:	2800      	cmp	r0, #0
 800b272:	bf08      	it	eq
 800b274:	4618      	moveq	r0, r3
 800b276:	30f0      	adds	r0, #240	; 0xf0
 800b278:	4770      	bx	lr
 800b27a:	bf00      	nop
 800b27c:	2000018c 	.word	0x2000018c
 800b280:	200001f0 	.word	0x200001f0

0800b284 <memcpy>:
 800b284:	b510      	push	{r4, lr}
 800b286:	1e43      	subs	r3, r0, #1
 800b288:	440a      	add	r2, r1
 800b28a:	4291      	cmp	r1, r2
 800b28c:	d100      	bne.n	800b290 <memcpy+0xc>
 800b28e:	bd10      	pop	{r4, pc}
 800b290:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b294:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b298:	e7f7      	b.n	800b28a <memcpy+0x6>

0800b29a <__malloc_lock>:
 800b29a:	4770      	bx	lr

0800b29c <__malloc_unlock>:
 800b29c:	4770      	bx	lr

0800b29e <_Balloc>:
 800b29e:	b570      	push	{r4, r5, r6, lr}
 800b2a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	460e      	mov	r6, r1
 800b2a6:	b93d      	cbnz	r5, 800b2b8 <_Balloc+0x1a>
 800b2a8:	2010      	movs	r0, #16
 800b2aa:	f7fe fc37 	bl	8009b1c <malloc>
 800b2ae:	6260      	str	r0, [r4, #36]	; 0x24
 800b2b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b2b4:	6005      	str	r5, [r0, #0]
 800b2b6:	60c5      	str	r5, [r0, #12]
 800b2b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b2ba:	68eb      	ldr	r3, [r5, #12]
 800b2bc:	b183      	cbz	r3, 800b2e0 <_Balloc+0x42>
 800b2be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b2c6:	b9b8      	cbnz	r0, 800b2f8 <_Balloc+0x5a>
 800b2c8:	2101      	movs	r1, #1
 800b2ca:	fa01 f506 	lsl.w	r5, r1, r6
 800b2ce:	1d6a      	adds	r2, r5, #5
 800b2d0:	0092      	lsls	r2, r2, #2
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f000 fabe 	bl	800b854 <_calloc_r>
 800b2d8:	b160      	cbz	r0, 800b2f4 <_Balloc+0x56>
 800b2da:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b2de:	e00e      	b.n	800b2fe <_Balloc+0x60>
 800b2e0:	2221      	movs	r2, #33	; 0x21
 800b2e2:	2104      	movs	r1, #4
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	f000 fab5 	bl	800b854 <_calloc_r>
 800b2ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2ec:	60e8      	str	r0, [r5, #12]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d1e4      	bne.n	800b2be <_Balloc+0x20>
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	bd70      	pop	{r4, r5, r6, pc}
 800b2f8:	6802      	ldr	r2, [r0, #0]
 800b2fa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b2fe:	2300      	movs	r3, #0
 800b300:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b304:	e7f7      	b.n	800b2f6 <_Balloc+0x58>

0800b306 <_Bfree>:
 800b306:	b570      	push	{r4, r5, r6, lr}
 800b308:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b30a:	4606      	mov	r6, r0
 800b30c:	460d      	mov	r5, r1
 800b30e:	b93c      	cbnz	r4, 800b320 <_Bfree+0x1a>
 800b310:	2010      	movs	r0, #16
 800b312:	f7fe fc03 	bl	8009b1c <malloc>
 800b316:	6270      	str	r0, [r6, #36]	; 0x24
 800b318:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b31c:	6004      	str	r4, [r0, #0]
 800b31e:	60c4      	str	r4, [r0, #12]
 800b320:	b13d      	cbz	r5, 800b332 <_Bfree+0x2c>
 800b322:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b324:	686a      	ldr	r2, [r5, #4]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b32c:	6029      	str	r1, [r5, #0]
 800b32e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b332:	bd70      	pop	{r4, r5, r6, pc}

0800b334 <__multadd>:
 800b334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b338:	690d      	ldr	r5, [r1, #16]
 800b33a:	461f      	mov	r7, r3
 800b33c:	4606      	mov	r6, r0
 800b33e:	460c      	mov	r4, r1
 800b340:	f101 0c14 	add.w	ip, r1, #20
 800b344:	2300      	movs	r3, #0
 800b346:	f8dc 0000 	ldr.w	r0, [ip]
 800b34a:	b281      	uxth	r1, r0
 800b34c:	fb02 7101 	mla	r1, r2, r1, r7
 800b350:	0c0f      	lsrs	r7, r1, #16
 800b352:	0c00      	lsrs	r0, r0, #16
 800b354:	fb02 7000 	mla	r0, r2, r0, r7
 800b358:	b289      	uxth	r1, r1
 800b35a:	3301      	adds	r3, #1
 800b35c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b360:	429d      	cmp	r5, r3
 800b362:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b366:	f84c 1b04 	str.w	r1, [ip], #4
 800b36a:	dcec      	bgt.n	800b346 <__multadd+0x12>
 800b36c:	b1d7      	cbz	r7, 800b3a4 <__multadd+0x70>
 800b36e:	68a3      	ldr	r3, [r4, #8]
 800b370:	42ab      	cmp	r3, r5
 800b372:	dc12      	bgt.n	800b39a <__multadd+0x66>
 800b374:	6861      	ldr	r1, [r4, #4]
 800b376:	4630      	mov	r0, r6
 800b378:	3101      	adds	r1, #1
 800b37a:	f7ff ff90 	bl	800b29e <_Balloc>
 800b37e:	6922      	ldr	r2, [r4, #16]
 800b380:	3202      	adds	r2, #2
 800b382:	f104 010c 	add.w	r1, r4, #12
 800b386:	4680      	mov	r8, r0
 800b388:	0092      	lsls	r2, r2, #2
 800b38a:	300c      	adds	r0, #12
 800b38c:	f7ff ff7a 	bl	800b284 <memcpy>
 800b390:	4621      	mov	r1, r4
 800b392:	4630      	mov	r0, r6
 800b394:	f7ff ffb7 	bl	800b306 <_Bfree>
 800b398:	4644      	mov	r4, r8
 800b39a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b39e:	3501      	adds	r5, #1
 800b3a0:	615f      	str	r7, [r3, #20]
 800b3a2:	6125      	str	r5, [r4, #16]
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b3aa <__hi0bits>:
 800b3aa:	0c02      	lsrs	r2, r0, #16
 800b3ac:	0412      	lsls	r2, r2, #16
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	b9b2      	cbnz	r2, 800b3e0 <__hi0bits+0x36>
 800b3b2:	0403      	lsls	r3, r0, #16
 800b3b4:	2010      	movs	r0, #16
 800b3b6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b3ba:	bf04      	itt	eq
 800b3bc:	021b      	lsleq	r3, r3, #8
 800b3be:	3008      	addeq	r0, #8
 800b3c0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b3c4:	bf04      	itt	eq
 800b3c6:	011b      	lsleq	r3, r3, #4
 800b3c8:	3004      	addeq	r0, #4
 800b3ca:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b3ce:	bf04      	itt	eq
 800b3d0:	009b      	lsleq	r3, r3, #2
 800b3d2:	3002      	addeq	r0, #2
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	db06      	blt.n	800b3e6 <__hi0bits+0x3c>
 800b3d8:	005b      	lsls	r3, r3, #1
 800b3da:	d503      	bpl.n	800b3e4 <__hi0bits+0x3a>
 800b3dc:	3001      	adds	r0, #1
 800b3de:	4770      	bx	lr
 800b3e0:	2000      	movs	r0, #0
 800b3e2:	e7e8      	b.n	800b3b6 <__hi0bits+0xc>
 800b3e4:	2020      	movs	r0, #32
 800b3e6:	4770      	bx	lr

0800b3e8 <__lo0bits>:
 800b3e8:	6803      	ldr	r3, [r0, #0]
 800b3ea:	f013 0207 	ands.w	r2, r3, #7
 800b3ee:	4601      	mov	r1, r0
 800b3f0:	d00b      	beq.n	800b40a <__lo0bits+0x22>
 800b3f2:	07da      	lsls	r2, r3, #31
 800b3f4:	d423      	bmi.n	800b43e <__lo0bits+0x56>
 800b3f6:	0798      	lsls	r0, r3, #30
 800b3f8:	bf49      	itett	mi
 800b3fa:	085b      	lsrmi	r3, r3, #1
 800b3fc:	089b      	lsrpl	r3, r3, #2
 800b3fe:	2001      	movmi	r0, #1
 800b400:	600b      	strmi	r3, [r1, #0]
 800b402:	bf5c      	itt	pl
 800b404:	600b      	strpl	r3, [r1, #0]
 800b406:	2002      	movpl	r0, #2
 800b408:	4770      	bx	lr
 800b40a:	b298      	uxth	r0, r3
 800b40c:	b9a8      	cbnz	r0, 800b43a <__lo0bits+0x52>
 800b40e:	0c1b      	lsrs	r3, r3, #16
 800b410:	2010      	movs	r0, #16
 800b412:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b416:	bf04      	itt	eq
 800b418:	0a1b      	lsreq	r3, r3, #8
 800b41a:	3008      	addeq	r0, #8
 800b41c:	071a      	lsls	r2, r3, #28
 800b41e:	bf04      	itt	eq
 800b420:	091b      	lsreq	r3, r3, #4
 800b422:	3004      	addeq	r0, #4
 800b424:	079a      	lsls	r2, r3, #30
 800b426:	bf04      	itt	eq
 800b428:	089b      	lsreq	r3, r3, #2
 800b42a:	3002      	addeq	r0, #2
 800b42c:	07da      	lsls	r2, r3, #31
 800b42e:	d402      	bmi.n	800b436 <__lo0bits+0x4e>
 800b430:	085b      	lsrs	r3, r3, #1
 800b432:	d006      	beq.n	800b442 <__lo0bits+0x5a>
 800b434:	3001      	adds	r0, #1
 800b436:	600b      	str	r3, [r1, #0]
 800b438:	4770      	bx	lr
 800b43a:	4610      	mov	r0, r2
 800b43c:	e7e9      	b.n	800b412 <__lo0bits+0x2a>
 800b43e:	2000      	movs	r0, #0
 800b440:	4770      	bx	lr
 800b442:	2020      	movs	r0, #32
 800b444:	4770      	bx	lr

0800b446 <__i2b>:
 800b446:	b510      	push	{r4, lr}
 800b448:	460c      	mov	r4, r1
 800b44a:	2101      	movs	r1, #1
 800b44c:	f7ff ff27 	bl	800b29e <_Balloc>
 800b450:	2201      	movs	r2, #1
 800b452:	6144      	str	r4, [r0, #20]
 800b454:	6102      	str	r2, [r0, #16]
 800b456:	bd10      	pop	{r4, pc}

0800b458 <__multiply>:
 800b458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b45c:	4614      	mov	r4, r2
 800b45e:	690a      	ldr	r2, [r1, #16]
 800b460:	6923      	ldr	r3, [r4, #16]
 800b462:	429a      	cmp	r2, r3
 800b464:	bfb8      	it	lt
 800b466:	460b      	movlt	r3, r1
 800b468:	4688      	mov	r8, r1
 800b46a:	bfbc      	itt	lt
 800b46c:	46a0      	movlt	r8, r4
 800b46e:	461c      	movlt	r4, r3
 800b470:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b474:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b478:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b47c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b480:	eb07 0609 	add.w	r6, r7, r9
 800b484:	42b3      	cmp	r3, r6
 800b486:	bfb8      	it	lt
 800b488:	3101      	addlt	r1, #1
 800b48a:	f7ff ff08 	bl	800b29e <_Balloc>
 800b48e:	f100 0514 	add.w	r5, r0, #20
 800b492:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b496:	462b      	mov	r3, r5
 800b498:	2200      	movs	r2, #0
 800b49a:	4573      	cmp	r3, lr
 800b49c:	d316      	bcc.n	800b4cc <__multiply+0x74>
 800b49e:	f104 0214 	add.w	r2, r4, #20
 800b4a2:	f108 0114 	add.w	r1, r8, #20
 800b4a6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b4aa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b4ae:	9300      	str	r3, [sp, #0]
 800b4b0:	9b00      	ldr	r3, [sp, #0]
 800b4b2:	9201      	str	r2, [sp, #4]
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d80c      	bhi.n	800b4d2 <__multiply+0x7a>
 800b4b8:	2e00      	cmp	r6, #0
 800b4ba:	dd03      	ble.n	800b4c4 <__multiply+0x6c>
 800b4bc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d05d      	beq.n	800b580 <__multiply+0x128>
 800b4c4:	6106      	str	r6, [r0, #16]
 800b4c6:	b003      	add	sp, #12
 800b4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4cc:	f843 2b04 	str.w	r2, [r3], #4
 800b4d0:	e7e3      	b.n	800b49a <__multiply+0x42>
 800b4d2:	f8b2 b000 	ldrh.w	fp, [r2]
 800b4d6:	f1bb 0f00 	cmp.w	fp, #0
 800b4da:	d023      	beq.n	800b524 <__multiply+0xcc>
 800b4dc:	4689      	mov	r9, r1
 800b4de:	46ac      	mov	ip, r5
 800b4e0:	f04f 0800 	mov.w	r8, #0
 800b4e4:	f859 4b04 	ldr.w	r4, [r9], #4
 800b4e8:	f8dc a000 	ldr.w	sl, [ip]
 800b4ec:	b2a3      	uxth	r3, r4
 800b4ee:	fa1f fa8a 	uxth.w	sl, sl
 800b4f2:	fb0b a303 	mla	r3, fp, r3, sl
 800b4f6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b4fa:	f8dc 4000 	ldr.w	r4, [ip]
 800b4fe:	4443      	add	r3, r8
 800b500:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b504:	fb0b 840a 	mla	r4, fp, sl, r8
 800b508:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b50c:	46e2      	mov	sl, ip
 800b50e:	b29b      	uxth	r3, r3
 800b510:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b514:	454f      	cmp	r7, r9
 800b516:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b51a:	f84a 3b04 	str.w	r3, [sl], #4
 800b51e:	d82b      	bhi.n	800b578 <__multiply+0x120>
 800b520:	f8cc 8004 	str.w	r8, [ip, #4]
 800b524:	9b01      	ldr	r3, [sp, #4]
 800b526:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b52a:	3204      	adds	r2, #4
 800b52c:	f1ba 0f00 	cmp.w	sl, #0
 800b530:	d020      	beq.n	800b574 <__multiply+0x11c>
 800b532:	682b      	ldr	r3, [r5, #0]
 800b534:	4689      	mov	r9, r1
 800b536:	46a8      	mov	r8, r5
 800b538:	f04f 0b00 	mov.w	fp, #0
 800b53c:	f8b9 c000 	ldrh.w	ip, [r9]
 800b540:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b544:	fb0a 440c 	mla	r4, sl, ip, r4
 800b548:	445c      	add	r4, fp
 800b54a:	46c4      	mov	ip, r8
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b552:	f84c 3b04 	str.w	r3, [ip], #4
 800b556:	f859 3b04 	ldr.w	r3, [r9], #4
 800b55a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b55e:	0c1b      	lsrs	r3, r3, #16
 800b560:	fb0a b303 	mla	r3, sl, r3, fp
 800b564:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b568:	454f      	cmp	r7, r9
 800b56a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b56e:	d805      	bhi.n	800b57c <__multiply+0x124>
 800b570:	f8c8 3004 	str.w	r3, [r8, #4]
 800b574:	3504      	adds	r5, #4
 800b576:	e79b      	b.n	800b4b0 <__multiply+0x58>
 800b578:	46d4      	mov	ip, sl
 800b57a:	e7b3      	b.n	800b4e4 <__multiply+0x8c>
 800b57c:	46e0      	mov	r8, ip
 800b57e:	e7dd      	b.n	800b53c <__multiply+0xe4>
 800b580:	3e01      	subs	r6, #1
 800b582:	e799      	b.n	800b4b8 <__multiply+0x60>

0800b584 <__pow5mult>:
 800b584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b588:	4615      	mov	r5, r2
 800b58a:	f012 0203 	ands.w	r2, r2, #3
 800b58e:	4606      	mov	r6, r0
 800b590:	460f      	mov	r7, r1
 800b592:	d007      	beq.n	800b5a4 <__pow5mult+0x20>
 800b594:	3a01      	subs	r2, #1
 800b596:	4c21      	ldr	r4, [pc, #132]	; (800b61c <__pow5mult+0x98>)
 800b598:	2300      	movs	r3, #0
 800b59a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b59e:	f7ff fec9 	bl	800b334 <__multadd>
 800b5a2:	4607      	mov	r7, r0
 800b5a4:	10ad      	asrs	r5, r5, #2
 800b5a6:	d035      	beq.n	800b614 <__pow5mult+0x90>
 800b5a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b5aa:	b93c      	cbnz	r4, 800b5bc <__pow5mult+0x38>
 800b5ac:	2010      	movs	r0, #16
 800b5ae:	f7fe fab5 	bl	8009b1c <malloc>
 800b5b2:	6270      	str	r0, [r6, #36]	; 0x24
 800b5b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5b8:	6004      	str	r4, [r0, #0]
 800b5ba:	60c4      	str	r4, [r0, #12]
 800b5bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b5c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b5c4:	b94c      	cbnz	r4, 800b5da <__pow5mult+0x56>
 800b5c6:	f240 2171 	movw	r1, #625	; 0x271
 800b5ca:	4630      	mov	r0, r6
 800b5cc:	f7ff ff3b 	bl	800b446 <__i2b>
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5d6:	4604      	mov	r4, r0
 800b5d8:	6003      	str	r3, [r0, #0]
 800b5da:	f04f 0800 	mov.w	r8, #0
 800b5de:	07eb      	lsls	r3, r5, #31
 800b5e0:	d50a      	bpl.n	800b5f8 <__pow5mult+0x74>
 800b5e2:	4639      	mov	r1, r7
 800b5e4:	4622      	mov	r2, r4
 800b5e6:	4630      	mov	r0, r6
 800b5e8:	f7ff ff36 	bl	800b458 <__multiply>
 800b5ec:	4639      	mov	r1, r7
 800b5ee:	4681      	mov	r9, r0
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	f7ff fe88 	bl	800b306 <_Bfree>
 800b5f6:	464f      	mov	r7, r9
 800b5f8:	106d      	asrs	r5, r5, #1
 800b5fa:	d00b      	beq.n	800b614 <__pow5mult+0x90>
 800b5fc:	6820      	ldr	r0, [r4, #0]
 800b5fe:	b938      	cbnz	r0, 800b610 <__pow5mult+0x8c>
 800b600:	4622      	mov	r2, r4
 800b602:	4621      	mov	r1, r4
 800b604:	4630      	mov	r0, r6
 800b606:	f7ff ff27 	bl	800b458 <__multiply>
 800b60a:	6020      	str	r0, [r4, #0]
 800b60c:	f8c0 8000 	str.w	r8, [r0]
 800b610:	4604      	mov	r4, r0
 800b612:	e7e4      	b.n	800b5de <__pow5mult+0x5a>
 800b614:	4638      	mov	r0, r7
 800b616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b61a:	bf00      	nop
 800b61c:	0800bea8 	.word	0x0800bea8

0800b620 <__lshift>:
 800b620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b624:	460c      	mov	r4, r1
 800b626:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b62a:	6923      	ldr	r3, [r4, #16]
 800b62c:	6849      	ldr	r1, [r1, #4]
 800b62e:	eb0a 0903 	add.w	r9, sl, r3
 800b632:	68a3      	ldr	r3, [r4, #8]
 800b634:	4607      	mov	r7, r0
 800b636:	4616      	mov	r6, r2
 800b638:	f109 0501 	add.w	r5, r9, #1
 800b63c:	42ab      	cmp	r3, r5
 800b63e:	db32      	blt.n	800b6a6 <__lshift+0x86>
 800b640:	4638      	mov	r0, r7
 800b642:	f7ff fe2c 	bl	800b29e <_Balloc>
 800b646:	2300      	movs	r3, #0
 800b648:	4680      	mov	r8, r0
 800b64a:	f100 0114 	add.w	r1, r0, #20
 800b64e:	461a      	mov	r2, r3
 800b650:	4553      	cmp	r3, sl
 800b652:	db2b      	blt.n	800b6ac <__lshift+0x8c>
 800b654:	6920      	ldr	r0, [r4, #16]
 800b656:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b65a:	f104 0314 	add.w	r3, r4, #20
 800b65e:	f016 021f 	ands.w	r2, r6, #31
 800b662:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b666:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b66a:	d025      	beq.n	800b6b8 <__lshift+0x98>
 800b66c:	f1c2 0e20 	rsb	lr, r2, #32
 800b670:	2000      	movs	r0, #0
 800b672:	681e      	ldr	r6, [r3, #0]
 800b674:	468a      	mov	sl, r1
 800b676:	4096      	lsls	r6, r2
 800b678:	4330      	orrs	r0, r6
 800b67a:	f84a 0b04 	str.w	r0, [sl], #4
 800b67e:	f853 0b04 	ldr.w	r0, [r3], #4
 800b682:	459c      	cmp	ip, r3
 800b684:	fa20 f00e 	lsr.w	r0, r0, lr
 800b688:	d814      	bhi.n	800b6b4 <__lshift+0x94>
 800b68a:	6048      	str	r0, [r1, #4]
 800b68c:	b108      	cbz	r0, 800b692 <__lshift+0x72>
 800b68e:	f109 0502 	add.w	r5, r9, #2
 800b692:	3d01      	subs	r5, #1
 800b694:	4638      	mov	r0, r7
 800b696:	f8c8 5010 	str.w	r5, [r8, #16]
 800b69a:	4621      	mov	r1, r4
 800b69c:	f7ff fe33 	bl	800b306 <_Bfree>
 800b6a0:	4640      	mov	r0, r8
 800b6a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6a6:	3101      	adds	r1, #1
 800b6a8:	005b      	lsls	r3, r3, #1
 800b6aa:	e7c7      	b.n	800b63c <__lshift+0x1c>
 800b6ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	e7cd      	b.n	800b650 <__lshift+0x30>
 800b6b4:	4651      	mov	r1, sl
 800b6b6:	e7dc      	b.n	800b672 <__lshift+0x52>
 800b6b8:	3904      	subs	r1, #4
 800b6ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6be:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6c2:	459c      	cmp	ip, r3
 800b6c4:	d8f9      	bhi.n	800b6ba <__lshift+0x9a>
 800b6c6:	e7e4      	b.n	800b692 <__lshift+0x72>

0800b6c8 <__mcmp>:
 800b6c8:	6903      	ldr	r3, [r0, #16]
 800b6ca:	690a      	ldr	r2, [r1, #16]
 800b6cc:	1a9b      	subs	r3, r3, r2
 800b6ce:	b530      	push	{r4, r5, lr}
 800b6d0:	d10c      	bne.n	800b6ec <__mcmp+0x24>
 800b6d2:	0092      	lsls	r2, r2, #2
 800b6d4:	3014      	adds	r0, #20
 800b6d6:	3114      	adds	r1, #20
 800b6d8:	1884      	adds	r4, r0, r2
 800b6da:	4411      	add	r1, r2
 800b6dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b6e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b6e4:	4295      	cmp	r5, r2
 800b6e6:	d003      	beq.n	800b6f0 <__mcmp+0x28>
 800b6e8:	d305      	bcc.n	800b6f6 <__mcmp+0x2e>
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	bd30      	pop	{r4, r5, pc}
 800b6f0:	42a0      	cmp	r0, r4
 800b6f2:	d3f3      	bcc.n	800b6dc <__mcmp+0x14>
 800b6f4:	e7fa      	b.n	800b6ec <__mcmp+0x24>
 800b6f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b6fa:	e7f7      	b.n	800b6ec <__mcmp+0x24>

0800b6fc <__mdiff>:
 800b6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b700:	460d      	mov	r5, r1
 800b702:	4607      	mov	r7, r0
 800b704:	4611      	mov	r1, r2
 800b706:	4628      	mov	r0, r5
 800b708:	4614      	mov	r4, r2
 800b70a:	f7ff ffdd 	bl	800b6c8 <__mcmp>
 800b70e:	1e06      	subs	r6, r0, #0
 800b710:	d108      	bne.n	800b724 <__mdiff+0x28>
 800b712:	4631      	mov	r1, r6
 800b714:	4638      	mov	r0, r7
 800b716:	f7ff fdc2 	bl	800b29e <_Balloc>
 800b71a:	2301      	movs	r3, #1
 800b71c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b724:	bfa4      	itt	ge
 800b726:	4623      	movge	r3, r4
 800b728:	462c      	movge	r4, r5
 800b72a:	4638      	mov	r0, r7
 800b72c:	6861      	ldr	r1, [r4, #4]
 800b72e:	bfa6      	itte	ge
 800b730:	461d      	movge	r5, r3
 800b732:	2600      	movge	r6, #0
 800b734:	2601      	movlt	r6, #1
 800b736:	f7ff fdb2 	bl	800b29e <_Balloc>
 800b73a:	692b      	ldr	r3, [r5, #16]
 800b73c:	60c6      	str	r6, [r0, #12]
 800b73e:	6926      	ldr	r6, [r4, #16]
 800b740:	f105 0914 	add.w	r9, r5, #20
 800b744:	f104 0214 	add.w	r2, r4, #20
 800b748:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b74c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b750:	f100 0514 	add.w	r5, r0, #20
 800b754:	f04f 0e00 	mov.w	lr, #0
 800b758:	f852 ab04 	ldr.w	sl, [r2], #4
 800b75c:	f859 4b04 	ldr.w	r4, [r9], #4
 800b760:	fa1e f18a 	uxtah	r1, lr, sl
 800b764:	b2a3      	uxth	r3, r4
 800b766:	1ac9      	subs	r1, r1, r3
 800b768:	0c23      	lsrs	r3, r4, #16
 800b76a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b76e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b772:	b289      	uxth	r1, r1
 800b774:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b778:	45c8      	cmp	r8, r9
 800b77a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b77e:	4694      	mov	ip, r2
 800b780:	f845 3b04 	str.w	r3, [r5], #4
 800b784:	d8e8      	bhi.n	800b758 <__mdiff+0x5c>
 800b786:	45bc      	cmp	ip, r7
 800b788:	d304      	bcc.n	800b794 <__mdiff+0x98>
 800b78a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b78e:	b183      	cbz	r3, 800b7b2 <__mdiff+0xb6>
 800b790:	6106      	str	r6, [r0, #16]
 800b792:	e7c5      	b.n	800b720 <__mdiff+0x24>
 800b794:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b798:	fa1e f381 	uxtah	r3, lr, r1
 800b79c:	141a      	asrs	r2, r3, #16
 800b79e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7a8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b7ac:	f845 3b04 	str.w	r3, [r5], #4
 800b7b0:	e7e9      	b.n	800b786 <__mdiff+0x8a>
 800b7b2:	3e01      	subs	r6, #1
 800b7b4:	e7e9      	b.n	800b78a <__mdiff+0x8e>

0800b7b6 <__d2b>:
 800b7b6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b7ba:	460e      	mov	r6, r1
 800b7bc:	2101      	movs	r1, #1
 800b7be:	ec59 8b10 	vmov	r8, r9, d0
 800b7c2:	4615      	mov	r5, r2
 800b7c4:	f7ff fd6b 	bl	800b29e <_Balloc>
 800b7c8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b7cc:	4607      	mov	r7, r0
 800b7ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b7d2:	bb34      	cbnz	r4, 800b822 <__d2b+0x6c>
 800b7d4:	9301      	str	r3, [sp, #4]
 800b7d6:	f1b8 0300 	subs.w	r3, r8, #0
 800b7da:	d027      	beq.n	800b82c <__d2b+0x76>
 800b7dc:	a802      	add	r0, sp, #8
 800b7de:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b7e2:	f7ff fe01 	bl	800b3e8 <__lo0bits>
 800b7e6:	9900      	ldr	r1, [sp, #0]
 800b7e8:	b1f0      	cbz	r0, 800b828 <__d2b+0x72>
 800b7ea:	9a01      	ldr	r2, [sp, #4]
 800b7ec:	f1c0 0320 	rsb	r3, r0, #32
 800b7f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b7f4:	430b      	orrs	r3, r1
 800b7f6:	40c2      	lsrs	r2, r0
 800b7f8:	617b      	str	r3, [r7, #20]
 800b7fa:	9201      	str	r2, [sp, #4]
 800b7fc:	9b01      	ldr	r3, [sp, #4]
 800b7fe:	61bb      	str	r3, [r7, #24]
 800b800:	2b00      	cmp	r3, #0
 800b802:	bf14      	ite	ne
 800b804:	2102      	movne	r1, #2
 800b806:	2101      	moveq	r1, #1
 800b808:	6139      	str	r1, [r7, #16]
 800b80a:	b1c4      	cbz	r4, 800b83e <__d2b+0x88>
 800b80c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b810:	4404      	add	r4, r0
 800b812:	6034      	str	r4, [r6, #0]
 800b814:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b818:	6028      	str	r0, [r5, #0]
 800b81a:	4638      	mov	r0, r7
 800b81c:	b003      	add	sp, #12
 800b81e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b826:	e7d5      	b.n	800b7d4 <__d2b+0x1e>
 800b828:	6179      	str	r1, [r7, #20]
 800b82a:	e7e7      	b.n	800b7fc <__d2b+0x46>
 800b82c:	a801      	add	r0, sp, #4
 800b82e:	f7ff fddb 	bl	800b3e8 <__lo0bits>
 800b832:	9b01      	ldr	r3, [sp, #4]
 800b834:	617b      	str	r3, [r7, #20]
 800b836:	2101      	movs	r1, #1
 800b838:	6139      	str	r1, [r7, #16]
 800b83a:	3020      	adds	r0, #32
 800b83c:	e7e5      	b.n	800b80a <__d2b+0x54>
 800b83e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b842:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b846:	6030      	str	r0, [r6, #0]
 800b848:	6918      	ldr	r0, [r3, #16]
 800b84a:	f7ff fdae 	bl	800b3aa <__hi0bits>
 800b84e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b852:	e7e1      	b.n	800b818 <__d2b+0x62>

0800b854 <_calloc_r>:
 800b854:	b538      	push	{r3, r4, r5, lr}
 800b856:	fb02 f401 	mul.w	r4, r2, r1
 800b85a:	4621      	mov	r1, r4
 800b85c:	f7fe f9c4 	bl	8009be8 <_malloc_r>
 800b860:	4605      	mov	r5, r0
 800b862:	b118      	cbz	r0, 800b86c <_calloc_r+0x18>
 800b864:	4622      	mov	r2, r4
 800b866:	2100      	movs	r1, #0
 800b868:	f7fe f968 	bl	8009b3c <memset>
 800b86c:	4628      	mov	r0, r5
 800b86e:	bd38      	pop	{r3, r4, r5, pc}

0800b870 <__ssputs_r>:
 800b870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b874:	688e      	ldr	r6, [r1, #8]
 800b876:	429e      	cmp	r6, r3
 800b878:	4682      	mov	sl, r0
 800b87a:	460c      	mov	r4, r1
 800b87c:	4690      	mov	r8, r2
 800b87e:	4699      	mov	r9, r3
 800b880:	d837      	bhi.n	800b8f2 <__ssputs_r+0x82>
 800b882:	898a      	ldrh	r2, [r1, #12]
 800b884:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b888:	d031      	beq.n	800b8ee <__ssputs_r+0x7e>
 800b88a:	6825      	ldr	r5, [r4, #0]
 800b88c:	6909      	ldr	r1, [r1, #16]
 800b88e:	1a6f      	subs	r7, r5, r1
 800b890:	6965      	ldr	r5, [r4, #20]
 800b892:	2302      	movs	r3, #2
 800b894:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b898:	fb95 f5f3 	sdiv	r5, r5, r3
 800b89c:	f109 0301 	add.w	r3, r9, #1
 800b8a0:	443b      	add	r3, r7
 800b8a2:	429d      	cmp	r5, r3
 800b8a4:	bf38      	it	cc
 800b8a6:	461d      	movcc	r5, r3
 800b8a8:	0553      	lsls	r3, r2, #21
 800b8aa:	d530      	bpl.n	800b90e <__ssputs_r+0x9e>
 800b8ac:	4629      	mov	r1, r5
 800b8ae:	f7fe f99b 	bl	8009be8 <_malloc_r>
 800b8b2:	4606      	mov	r6, r0
 800b8b4:	b950      	cbnz	r0, 800b8cc <__ssputs_r+0x5c>
 800b8b6:	230c      	movs	r3, #12
 800b8b8:	f8ca 3000 	str.w	r3, [sl]
 800b8bc:	89a3      	ldrh	r3, [r4, #12]
 800b8be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8c2:	81a3      	strh	r3, [r4, #12]
 800b8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8cc:	463a      	mov	r2, r7
 800b8ce:	6921      	ldr	r1, [r4, #16]
 800b8d0:	f7ff fcd8 	bl	800b284 <memcpy>
 800b8d4:	89a3      	ldrh	r3, [r4, #12]
 800b8d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b8da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8de:	81a3      	strh	r3, [r4, #12]
 800b8e0:	6126      	str	r6, [r4, #16]
 800b8e2:	6165      	str	r5, [r4, #20]
 800b8e4:	443e      	add	r6, r7
 800b8e6:	1bed      	subs	r5, r5, r7
 800b8e8:	6026      	str	r6, [r4, #0]
 800b8ea:	60a5      	str	r5, [r4, #8]
 800b8ec:	464e      	mov	r6, r9
 800b8ee:	454e      	cmp	r6, r9
 800b8f0:	d900      	bls.n	800b8f4 <__ssputs_r+0x84>
 800b8f2:	464e      	mov	r6, r9
 800b8f4:	4632      	mov	r2, r6
 800b8f6:	4641      	mov	r1, r8
 800b8f8:	6820      	ldr	r0, [r4, #0]
 800b8fa:	f000 f91d 	bl	800bb38 <memmove>
 800b8fe:	68a3      	ldr	r3, [r4, #8]
 800b900:	1b9b      	subs	r3, r3, r6
 800b902:	60a3      	str	r3, [r4, #8]
 800b904:	6823      	ldr	r3, [r4, #0]
 800b906:	441e      	add	r6, r3
 800b908:	6026      	str	r6, [r4, #0]
 800b90a:	2000      	movs	r0, #0
 800b90c:	e7dc      	b.n	800b8c8 <__ssputs_r+0x58>
 800b90e:	462a      	mov	r2, r5
 800b910:	f000 f92b 	bl	800bb6a <_realloc_r>
 800b914:	4606      	mov	r6, r0
 800b916:	2800      	cmp	r0, #0
 800b918:	d1e2      	bne.n	800b8e0 <__ssputs_r+0x70>
 800b91a:	6921      	ldr	r1, [r4, #16]
 800b91c:	4650      	mov	r0, sl
 800b91e:	f7fe f915 	bl	8009b4c <_free_r>
 800b922:	e7c8      	b.n	800b8b6 <__ssputs_r+0x46>

0800b924 <_svfiprintf_r>:
 800b924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b928:	461d      	mov	r5, r3
 800b92a:	898b      	ldrh	r3, [r1, #12]
 800b92c:	061f      	lsls	r7, r3, #24
 800b92e:	b09d      	sub	sp, #116	; 0x74
 800b930:	4680      	mov	r8, r0
 800b932:	460c      	mov	r4, r1
 800b934:	4616      	mov	r6, r2
 800b936:	d50f      	bpl.n	800b958 <_svfiprintf_r+0x34>
 800b938:	690b      	ldr	r3, [r1, #16]
 800b93a:	b96b      	cbnz	r3, 800b958 <_svfiprintf_r+0x34>
 800b93c:	2140      	movs	r1, #64	; 0x40
 800b93e:	f7fe f953 	bl	8009be8 <_malloc_r>
 800b942:	6020      	str	r0, [r4, #0]
 800b944:	6120      	str	r0, [r4, #16]
 800b946:	b928      	cbnz	r0, 800b954 <_svfiprintf_r+0x30>
 800b948:	230c      	movs	r3, #12
 800b94a:	f8c8 3000 	str.w	r3, [r8]
 800b94e:	f04f 30ff 	mov.w	r0, #4294967295
 800b952:	e0c8      	b.n	800bae6 <_svfiprintf_r+0x1c2>
 800b954:	2340      	movs	r3, #64	; 0x40
 800b956:	6163      	str	r3, [r4, #20]
 800b958:	2300      	movs	r3, #0
 800b95a:	9309      	str	r3, [sp, #36]	; 0x24
 800b95c:	2320      	movs	r3, #32
 800b95e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b962:	2330      	movs	r3, #48	; 0x30
 800b964:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b968:	9503      	str	r5, [sp, #12]
 800b96a:	f04f 0b01 	mov.w	fp, #1
 800b96e:	4637      	mov	r7, r6
 800b970:	463d      	mov	r5, r7
 800b972:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b976:	b10b      	cbz	r3, 800b97c <_svfiprintf_r+0x58>
 800b978:	2b25      	cmp	r3, #37	; 0x25
 800b97a:	d13e      	bne.n	800b9fa <_svfiprintf_r+0xd6>
 800b97c:	ebb7 0a06 	subs.w	sl, r7, r6
 800b980:	d00b      	beq.n	800b99a <_svfiprintf_r+0x76>
 800b982:	4653      	mov	r3, sl
 800b984:	4632      	mov	r2, r6
 800b986:	4621      	mov	r1, r4
 800b988:	4640      	mov	r0, r8
 800b98a:	f7ff ff71 	bl	800b870 <__ssputs_r>
 800b98e:	3001      	adds	r0, #1
 800b990:	f000 80a4 	beq.w	800badc <_svfiprintf_r+0x1b8>
 800b994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b996:	4453      	add	r3, sl
 800b998:	9309      	str	r3, [sp, #36]	; 0x24
 800b99a:	783b      	ldrb	r3, [r7, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	f000 809d 	beq.w	800badc <_svfiprintf_r+0x1b8>
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9ac:	9304      	str	r3, [sp, #16]
 800b9ae:	9307      	str	r3, [sp, #28]
 800b9b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9b4:	931a      	str	r3, [sp, #104]	; 0x68
 800b9b6:	462f      	mov	r7, r5
 800b9b8:	2205      	movs	r2, #5
 800b9ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b9be:	4850      	ldr	r0, [pc, #320]	; (800bb00 <_svfiprintf_r+0x1dc>)
 800b9c0:	f7f4 fc16 	bl	80001f0 <memchr>
 800b9c4:	9b04      	ldr	r3, [sp, #16]
 800b9c6:	b9d0      	cbnz	r0, 800b9fe <_svfiprintf_r+0xda>
 800b9c8:	06d9      	lsls	r1, r3, #27
 800b9ca:	bf44      	itt	mi
 800b9cc:	2220      	movmi	r2, #32
 800b9ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b9d2:	071a      	lsls	r2, r3, #28
 800b9d4:	bf44      	itt	mi
 800b9d6:	222b      	movmi	r2, #43	; 0x2b
 800b9d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b9dc:	782a      	ldrb	r2, [r5, #0]
 800b9de:	2a2a      	cmp	r2, #42	; 0x2a
 800b9e0:	d015      	beq.n	800ba0e <_svfiprintf_r+0xea>
 800b9e2:	9a07      	ldr	r2, [sp, #28]
 800b9e4:	462f      	mov	r7, r5
 800b9e6:	2000      	movs	r0, #0
 800b9e8:	250a      	movs	r5, #10
 800b9ea:	4639      	mov	r1, r7
 800b9ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9f0:	3b30      	subs	r3, #48	; 0x30
 800b9f2:	2b09      	cmp	r3, #9
 800b9f4:	d94d      	bls.n	800ba92 <_svfiprintf_r+0x16e>
 800b9f6:	b1b8      	cbz	r0, 800ba28 <_svfiprintf_r+0x104>
 800b9f8:	e00f      	b.n	800ba1a <_svfiprintf_r+0xf6>
 800b9fa:	462f      	mov	r7, r5
 800b9fc:	e7b8      	b.n	800b970 <_svfiprintf_r+0x4c>
 800b9fe:	4a40      	ldr	r2, [pc, #256]	; (800bb00 <_svfiprintf_r+0x1dc>)
 800ba00:	1a80      	subs	r0, r0, r2
 800ba02:	fa0b f000 	lsl.w	r0, fp, r0
 800ba06:	4318      	orrs	r0, r3
 800ba08:	9004      	str	r0, [sp, #16]
 800ba0a:	463d      	mov	r5, r7
 800ba0c:	e7d3      	b.n	800b9b6 <_svfiprintf_r+0x92>
 800ba0e:	9a03      	ldr	r2, [sp, #12]
 800ba10:	1d11      	adds	r1, r2, #4
 800ba12:	6812      	ldr	r2, [r2, #0]
 800ba14:	9103      	str	r1, [sp, #12]
 800ba16:	2a00      	cmp	r2, #0
 800ba18:	db01      	blt.n	800ba1e <_svfiprintf_r+0xfa>
 800ba1a:	9207      	str	r2, [sp, #28]
 800ba1c:	e004      	b.n	800ba28 <_svfiprintf_r+0x104>
 800ba1e:	4252      	negs	r2, r2
 800ba20:	f043 0302 	orr.w	r3, r3, #2
 800ba24:	9207      	str	r2, [sp, #28]
 800ba26:	9304      	str	r3, [sp, #16]
 800ba28:	783b      	ldrb	r3, [r7, #0]
 800ba2a:	2b2e      	cmp	r3, #46	; 0x2e
 800ba2c:	d10c      	bne.n	800ba48 <_svfiprintf_r+0x124>
 800ba2e:	787b      	ldrb	r3, [r7, #1]
 800ba30:	2b2a      	cmp	r3, #42	; 0x2a
 800ba32:	d133      	bne.n	800ba9c <_svfiprintf_r+0x178>
 800ba34:	9b03      	ldr	r3, [sp, #12]
 800ba36:	1d1a      	adds	r2, r3, #4
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	9203      	str	r2, [sp, #12]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	bfb8      	it	lt
 800ba40:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba44:	3702      	adds	r7, #2
 800ba46:	9305      	str	r3, [sp, #20]
 800ba48:	4d2e      	ldr	r5, [pc, #184]	; (800bb04 <_svfiprintf_r+0x1e0>)
 800ba4a:	7839      	ldrb	r1, [r7, #0]
 800ba4c:	2203      	movs	r2, #3
 800ba4e:	4628      	mov	r0, r5
 800ba50:	f7f4 fbce 	bl	80001f0 <memchr>
 800ba54:	b138      	cbz	r0, 800ba66 <_svfiprintf_r+0x142>
 800ba56:	2340      	movs	r3, #64	; 0x40
 800ba58:	1b40      	subs	r0, r0, r5
 800ba5a:	fa03 f000 	lsl.w	r0, r3, r0
 800ba5e:	9b04      	ldr	r3, [sp, #16]
 800ba60:	4303      	orrs	r3, r0
 800ba62:	3701      	adds	r7, #1
 800ba64:	9304      	str	r3, [sp, #16]
 800ba66:	7839      	ldrb	r1, [r7, #0]
 800ba68:	4827      	ldr	r0, [pc, #156]	; (800bb08 <_svfiprintf_r+0x1e4>)
 800ba6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba6e:	2206      	movs	r2, #6
 800ba70:	1c7e      	adds	r6, r7, #1
 800ba72:	f7f4 fbbd 	bl	80001f0 <memchr>
 800ba76:	2800      	cmp	r0, #0
 800ba78:	d038      	beq.n	800baec <_svfiprintf_r+0x1c8>
 800ba7a:	4b24      	ldr	r3, [pc, #144]	; (800bb0c <_svfiprintf_r+0x1e8>)
 800ba7c:	bb13      	cbnz	r3, 800bac4 <_svfiprintf_r+0x1a0>
 800ba7e:	9b03      	ldr	r3, [sp, #12]
 800ba80:	3307      	adds	r3, #7
 800ba82:	f023 0307 	bic.w	r3, r3, #7
 800ba86:	3308      	adds	r3, #8
 800ba88:	9303      	str	r3, [sp, #12]
 800ba8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba8c:	444b      	add	r3, r9
 800ba8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba90:	e76d      	b.n	800b96e <_svfiprintf_r+0x4a>
 800ba92:	fb05 3202 	mla	r2, r5, r2, r3
 800ba96:	2001      	movs	r0, #1
 800ba98:	460f      	mov	r7, r1
 800ba9a:	e7a6      	b.n	800b9ea <_svfiprintf_r+0xc6>
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	3701      	adds	r7, #1
 800baa0:	9305      	str	r3, [sp, #20]
 800baa2:	4619      	mov	r1, r3
 800baa4:	250a      	movs	r5, #10
 800baa6:	4638      	mov	r0, r7
 800baa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baac:	3a30      	subs	r2, #48	; 0x30
 800baae:	2a09      	cmp	r2, #9
 800bab0:	d903      	bls.n	800baba <_svfiprintf_r+0x196>
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d0c8      	beq.n	800ba48 <_svfiprintf_r+0x124>
 800bab6:	9105      	str	r1, [sp, #20]
 800bab8:	e7c6      	b.n	800ba48 <_svfiprintf_r+0x124>
 800baba:	fb05 2101 	mla	r1, r5, r1, r2
 800babe:	2301      	movs	r3, #1
 800bac0:	4607      	mov	r7, r0
 800bac2:	e7f0      	b.n	800baa6 <_svfiprintf_r+0x182>
 800bac4:	ab03      	add	r3, sp, #12
 800bac6:	9300      	str	r3, [sp, #0]
 800bac8:	4622      	mov	r2, r4
 800baca:	4b11      	ldr	r3, [pc, #68]	; (800bb10 <_svfiprintf_r+0x1ec>)
 800bacc:	a904      	add	r1, sp, #16
 800bace:	4640      	mov	r0, r8
 800bad0:	f7fe f978 	bl	8009dc4 <_printf_float>
 800bad4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bad8:	4681      	mov	r9, r0
 800bada:	d1d6      	bne.n	800ba8a <_svfiprintf_r+0x166>
 800badc:	89a3      	ldrh	r3, [r4, #12]
 800bade:	065b      	lsls	r3, r3, #25
 800bae0:	f53f af35 	bmi.w	800b94e <_svfiprintf_r+0x2a>
 800bae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bae6:	b01d      	add	sp, #116	; 0x74
 800bae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baec:	ab03      	add	r3, sp, #12
 800baee:	9300      	str	r3, [sp, #0]
 800baf0:	4622      	mov	r2, r4
 800baf2:	4b07      	ldr	r3, [pc, #28]	; (800bb10 <_svfiprintf_r+0x1ec>)
 800baf4:	a904      	add	r1, sp, #16
 800baf6:	4640      	mov	r0, r8
 800baf8:	f7fe fc1a 	bl	800a330 <_printf_i>
 800bafc:	e7ea      	b.n	800bad4 <_svfiprintf_r+0x1b0>
 800bafe:	bf00      	nop
 800bb00:	0800beb4 	.word	0x0800beb4
 800bb04:	0800beba 	.word	0x0800beba
 800bb08:	0800bebe 	.word	0x0800bebe
 800bb0c:	08009dc5 	.word	0x08009dc5
 800bb10:	0800b871 	.word	0x0800b871

0800bb14 <__ascii_mbtowc>:
 800bb14:	b082      	sub	sp, #8
 800bb16:	b901      	cbnz	r1, 800bb1a <__ascii_mbtowc+0x6>
 800bb18:	a901      	add	r1, sp, #4
 800bb1a:	b142      	cbz	r2, 800bb2e <__ascii_mbtowc+0x1a>
 800bb1c:	b14b      	cbz	r3, 800bb32 <__ascii_mbtowc+0x1e>
 800bb1e:	7813      	ldrb	r3, [r2, #0]
 800bb20:	600b      	str	r3, [r1, #0]
 800bb22:	7812      	ldrb	r2, [r2, #0]
 800bb24:	1c10      	adds	r0, r2, #0
 800bb26:	bf18      	it	ne
 800bb28:	2001      	movne	r0, #1
 800bb2a:	b002      	add	sp, #8
 800bb2c:	4770      	bx	lr
 800bb2e:	4610      	mov	r0, r2
 800bb30:	e7fb      	b.n	800bb2a <__ascii_mbtowc+0x16>
 800bb32:	f06f 0001 	mvn.w	r0, #1
 800bb36:	e7f8      	b.n	800bb2a <__ascii_mbtowc+0x16>

0800bb38 <memmove>:
 800bb38:	4288      	cmp	r0, r1
 800bb3a:	b510      	push	{r4, lr}
 800bb3c:	eb01 0302 	add.w	r3, r1, r2
 800bb40:	d807      	bhi.n	800bb52 <memmove+0x1a>
 800bb42:	1e42      	subs	r2, r0, #1
 800bb44:	4299      	cmp	r1, r3
 800bb46:	d00a      	beq.n	800bb5e <memmove+0x26>
 800bb48:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb4c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bb50:	e7f8      	b.n	800bb44 <memmove+0xc>
 800bb52:	4283      	cmp	r3, r0
 800bb54:	d9f5      	bls.n	800bb42 <memmove+0xa>
 800bb56:	1881      	adds	r1, r0, r2
 800bb58:	1ad2      	subs	r2, r2, r3
 800bb5a:	42d3      	cmn	r3, r2
 800bb5c:	d100      	bne.n	800bb60 <memmove+0x28>
 800bb5e:	bd10      	pop	{r4, pc}
 800bb60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb64:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bb68:	e7f7      	b.n	800bb5a <memmove+0x22>

0800bb6a <_realloc_r>:
 800bb6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb6c:	4607      	mov	r7, r0
 800bb6e:	4614      	mov	r4, r2
 800bb70:	460e      	mov	r6, r1
 800bb72:	b921      	cbnz	r1, 800bb7e <_realloc_r+0x14>
 800bb74:	4611      	mov	r1, r2
 800bb76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bb7a:	f7fe b835 	b.w	8009be8 <_malloc_r>
 800bb7e:	b922      	cbnz	r2, 800bb8a <_realloc_r+0x20>
 800bb80:	f7fd ffe4 	bl	8009b4c <_free_r>
 800bb84:	4625      	mov	r5, r4
 800bb86:	4628      	mov	r0, r5
 800bb88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb8a:	f000 f821 	bl	800bbd0 <_malloc_usable_size_r>
 800bb8e:	42a0      	cmp	r0, r4
 800bb90:	d20f      	bcs.n	800bbb2 <_realloc_r+0x48>
 800bb92:	4621      	mov	r1, r4
 800bb94:	4638      	mov	r0, r7
 800bb96:	f7fe f827 	bl	8009be8 <_malloc_r>
 800bb9a:	4605      	mov	r5, r0
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	d0f2      	beq.n	800bb86 <_realloc_r+0x1c>
 800bba0:	4631      	mov	r1, r6
 800bba2:	4622      	mov	r2, r4
 800bba4:	f7ff fb6e 	bl	800b284 <memcpy>
 800bba8:	4631      	mov	r1, r6
 800bbaa:	4638      	mov	r0, r7
 800bbac:	f7fd ffce 	bl	8009b4c <_free_r>
 800bbb0:	e7e9      	b.n	800bb86 <_realloc_r+0x1c>
 800bbb2:	4635      	mov	r5, r6
 800bbb4:	e7e7      	b.n	800bb86 <_realloc_r+0x1c>

0800bbb6 <__ascii_wctomb>:
 800bbb6:	b149      	cbz	r1, 800bbcc <__ascii_wctomb+0x16>
 800bbb8:	2aff      	cmp	r2, #255	; 0xff
 800bbba:	bf85      	ittet	hi
 800bbbc:	238a      	movhi	r3, #138	; 0x8a
 800bbbe:	6003      	strhi	r3, [r0, #0]
 800bbc0:	700a      	strbls	r2, [r1, #0]
 800bbc2:	f04f 30ff 	movhi.w	r0, #4294967295
 800bbc6:	bf98      	it	ls
 800bbc8:	2001      	movls	r0, #1
 800bbca:	4770      	bx	lr
 800bbcc:	4608      	mov	r0, r1
 800bbce:	4770      	bx	lr

0800bbd0 <_malloc_usable_size_r>:
 800bbd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbd4:	1f18      	subs	r0, r3, #4
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	bfbc      	itt	lt
 800bbda:	580b      	ldrlt	r3, [r1, r0]
 800bbdc:	18c0      	addlt	r0, r0, r3
 800bbde:	4770      	bx	lr

0800bbe0 <_init>:
 800bbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbe2:	bf00      	nop
 800bbe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbe6:	bc08      	pop	{r3}
 800bbe8:	469e      	mov	lr, r3
 800bbea:	4770      	bx	lr

0800bbec <_fini>:
 800bbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbee:	bf00      	nop
 800bbf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbf2:	bc08      	pop	{r3}
 800bbf4:	469e      	mov	lr, r3
 800bbf6:	4770      	bx	lr
