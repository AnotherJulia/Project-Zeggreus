
Ground station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b80c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800b9b0  0800b9b0  0001b9b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be74  0800be74  00020358  2**0
                  CONTENTS
  4 .ARM          00000008  0800be74  0800be74  0001be74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be7c  0800be7c  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be7c  0800be7c  0001be7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be80  0800be80  0001be80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0800be84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a8c  20000358  0800c1dc  00020358  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001de4  0800c1dc  00021de4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   000203db  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000416c  00000000  00000000  00040763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f0  00000000  00000000  000448d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001760  00000000  00000000  000461c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bd03  00000000  00000000  00047920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c2d1  00000000  00000000  00063623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b00a  00000000  00000000  0007f8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011a8fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bf4  00000000  00000000  0011a954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000358 	.word	0x20000358
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b994 	.word	0x0800b994

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000035c 	.word	0x2000035c
 80001dc:	0800b994 	.word	0x0800b994

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b0a0      	sub	sp, #128	; 0x80
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb6:	f000 fd93 	bl	80019e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eba:	f000 f82f 	bl	8000f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebe:	f000 f9d9 	bl	8001274 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ec2:	f000 f893 	bl	8000fec <MX_ADC1_Init>
  MX_I2C1_Init();
 8000ec6:	f000 f8e3 	bl	8001090 <MX_I2C1_Init>
  MX_SPI3_Init();
 8000eca:	f000 f90f 	bl	80010ec <MX_SPI3_Init>
  MX_TIM2_Init();
 8000ece:	f000 f943 	bl	8001158 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000ed2:	f000 f9a5 	bl	8001220 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000ed6:	f007 f983 	bl	80081e0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  //loraTesting(0);

  HAL_Delay(200);
 8000eda:	20c8      	movs	r0, #200	; 0xc8
 8000edc:	f000 fdf2 	bl	8001ac4 <HAL_Delay>
  char printBuffer[128];
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(printBuffer,"/*Project Zeggreus,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10*/");
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	490c      	ldr	r1, [pc, #48]	; (8000f14 <main+0x64>)
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f008 fbed 	bl	80096c4 <siprintf>
	  CDC_Transmit_FS((uint8_t*) printBuffer, strlen(printBuffer));
 8000eea:	463b      	mov	r3, r7
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff f977 	bl	80001e0 <strlen>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	4611      	mov	r1, r2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f007 fa42 	bl	8008384 <CDC_Transmit_FS>
	  HAL_Delay(500);
 8000f00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f04:	f000 fdde 	bl	8001ac4 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000f08:	2101      	movs	r1, #1
 8000f0a:	4803      	ldr	r0, [pc, #12]	; (8000f18 <main+0x68>)
 8000f0c:	f001 fb1f 	bl	800254e <HAL_GPIO_TogglePin>
	  sprintf(printBuffer,"/*Project Zeggreus,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10*/");
 8000f10:	e7e6      	b.n	8000ee0 <main+0x30>
 8000f12:	bf00      	nop
 8000f14:	0800b9e4 	.word	0x0800b9e4
 8000f18:	40020000 	.word	0x40020000

08000f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b094      	sub	sp, #80	; 0x50
 8000f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f22:	f107 0320 	add.w	r3, r7, #32
 8000f26:	2230      	movs	r2, #48	; 0x30
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f007 fe9e 	bl	8008c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	4b27      	ldr	r3, [pc, #156]	; (8000fe4 <SystemClock_Config+0xc8>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	4a26      	ldr	r2, [pc, #152]	; (8000fe4 <SystemClock_Config+0xc8>)
 8000f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f50:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <SystemClock_Config+0xc8>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <SystemClock_Config+0xcc>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a20      	ldr	r2, [pc, #128]	; (8000fe8 <SystemClock_Config+0xcc>)
 8000f66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <SystemClock_Config+0xcc>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f82:	2302      	movs	r3, #2
 8000f84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f90:	2348      	movs	r3, #72	; 0x48
 8000f92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f94:	2302      	movs	r3, #2
 8000f96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9c:	f107 0320 	add.w	r3, r7, #32
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f002 fdb7 	bl	8003b14 <HAL_RCC_OscConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fac:	f000 fa1c 	bl	80013e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb0:	230f      	movs	r3, #15
 8000fb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	2102      	movs	r1, #2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f003 f811 	bl	8003ff4 <HAL_RCC_ClockConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fd8:	f000 fa06 	bl	80013e8 <Error_Handler>
  }
}
 8000fdc:	bf00      	nop
 8000fde:	3750      	adds	r7, #80	; 0x50
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40007000 	.word	0x40007000

08000fec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ffe:	4b21      	ldr	r3, [pc, #132]	; (8001084 <MX_ADC1_Init+0x98>)
 8001000:	4a21      	ldr	r2, [pc, #132]	; (8001088 <MX_ADC1_Init+0x9c>)
 8001002:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001004:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <MX_ADC1_Init+0x98>)
 8001006:	2200      	movs	r2, #0
 8001008:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800100a:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <MX_ADC1_Init+0x98>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001010:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <MX_ADC1_Init+0x98>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001016:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_ADC1_Init+0x98>)
 8001018:	2200      	movs	r2, #0
 800101a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800101c:	4b19      	ldr	r3, [pc, #100]	; (8001084 <MX_ADC1_Init+0x98>)
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_ADC1_Init+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800102a:	4b16      	ldr	r3, [pc, #88]	; (8001084 <MX_ADC1_Init+0x98>)
 800102c:	4a17      	ldr	r2, [pc, #92]	; (800108c <MX_ADC1_Init+0xa0>)
 800102e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_ADC1_Init+0x98>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <MX_ADC1_Init+0x98>)
 8001038:	2201      	movs	r2, #1
 800103a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_ADC1_Init+0x98>)
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_ADC1_Init+0x98>)
 8001046:	2201      	movs	r2, #1
 8001048:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800104a:	480e      	ldr	r0, [pc, #56]	; (8001084 <MX_ADC1_Init+0x98>)
 800104c:	f000 fd5e 	bl	8001b0c <HAL_ADC_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001056:	f000 f9c7 	bl	80013e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800105a:	230a      	movs	r3, #10
 800105c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800105e:	2301      	movs	r3, #1
 8001060:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001066:	463b      	mov	r3, r7
 8001068:	4619      	mov	r1, r3
 800106a:	4806      	ldr	r0, [pc, #24]	; (8001084 <MX_ADC1_Init+0x98>)
 800106c:	f000 fd92 	bl	8001b94 <HAL_ADC_ConfigChannel>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001076:	f000 f9b7 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000430 	.word	0x20000430
 8001088:	40012000 	.word	0x40012000
 800108c:	0f000001 	.word	0x0f000001

08001090 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <MX_I2C1_Init+0x50>)
 8001096:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <MX_I2C1_Init+0x54>)
 8001098:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_I2C1_Init+0x50>)
 800109c:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <MX_I2C1_Init+0x58>)
 800109e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010cc:	4804      	ldr	r0, [pc, #16]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010ce:	f001 fa59 	bl	8002584 <HAL_I2C_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010d8:	f000 f986 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000384 	.word	0x20000384
 80010e4:	40005400 	.word	0x40005400
 80010e8:	000186a0 	.word	0x000186a0

080010ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80010f0:	4b17      	ldr	r3, [pc, #92]	; (8001150 <MX_SPI3_Init+0x64>)
 80010f2:	4a18      	ldr	r2, [pc, #96]	; (8001154 <MX_SPI3_Init+0x68>)
 80010f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <MX_SPI3_Init+0x64>)
 80010f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_SPI3_Init+0x64>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <MX_SPI3_Init+0x64>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_SPI3_Init+0x64>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_SPI3_Init+0x64>)
 8001112:	2200      	movs	r2, #0
 8001114:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_SPI3_Init+0x64>)
 8001118:	f44f 7200 	mov.w	r2, #512	; 0x200
 800111c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_SPI3_Init+0x64>)
 8001120:	2200      	movs	r2, #0
 8001122:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <MX_SPI3_Init+0x64>)
 8001126:	2200      	movs	r2, #0
 8001128:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_SPI3_Init+0x64>)
 800112c:	2200      	movs	r2, #0
 800112e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <MX_SPI3_Init+0x64>)
 8001132:	2200      	movs	r2, #0
 8001134:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_SPI3_Init+0x64>)
 8001138:	220a      	movs	r2, #10
 800113a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <MX_SPI3_Init+0x64>)
 800113e:	f003 f955 	bl	80043ec <HAL_SPI_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001148:	f000 f94e 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200003d8 	.word	0x200003d8
 8001154:	40003c00 	.word	0x40003c00

08001158 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115e:	f107 0320 	add.w	r3, r7, #32
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]
 8001176:	615a      	str	r2, [r3, #20]
 8001178:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800117a:	4b28      	ldr	r3, [pc, #160]	; (800121c <MX_TIM2_Init+0xc4>)
 800117c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001180:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001182:	4b26      	ldr	r3, [pc, #152]	; (800121c <MX_TIM2_Init+0xc4>)
 8001184:	2200      	movs	r2, #0
 8001186:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <MX_TIM2_Init+0xc4>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800118e:	4b23      	ldr	r3, [pc, #140]	; (800121c <MX_TIM2_Init+0xc4>)
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001196:	4b21      	ldr	r3, [pc, #132]	; (800121c <MX_TIM2_Init+0xc4>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119c:	4b1f      	ldr	r3, [pc, #124]	; (800121c <MX_TIM2_Init+0xc4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011a2:	481e      	ldr	r0, [pc, #120]	; (800121c <MX_TIM2_Init+0xc4>)
 80011a4:	f003 f986 	bl	80044b4 <HAL_TIM_PWM_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80011ae:	f000 f91b 	bl	80013e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ba:	f107 0320 	add.w	r3, r7, #32
 80011be:	4619      	mov	r1, r3
 80011c0:	4816      	ldr	r0, [pc, #88]	; (800121c <MX_TIM2_Init+0xc4>)
 80011c2:	f003 fc75 	bl	8004ab0 <HAL_TIMEx_MasterConfigSynchronization>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80011cc:	f000 f90c 	bl	80013e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d0:	2360      	movs	r3, #96	; 0x60
 80011d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2204      	movs	r2, #4
 80011e4:	4619      	mov	r1, r3
 80011e6:	480d      	ldr	r0, [pc, #52]	; (800121c <MX_TIM2_Init+0xc4>)
 80011e8:	f003 f990 	bl	800450c <HAL_TIM_PWM_ConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80011f2:	f000 f8f9 	bl	80013e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2208      	movs	r2, #8
 80011fa:	4619      	mov	r1, r3
 80011fc:	4807      	ldr	r0, [pc, #28]	; (800121c <MX_TIM2_Init+0xc4>)
 80011fe:	f003 f985 	bl	800450c <HAL_TIM_PWM_ConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001208:	f000 f8ee 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800120c:	4803      	ldr	r0, [pc, #12]	; (800121c <MX_TIM2_Init+0xc4>)
 800120e:	f000 fa0d 	bl	800162c <HAL_TIM_MspPostInit>

}
 8001212:	bf00      	nop
 8001214:	3728      	adds	r7, #40	; 0x28
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000478 	.word	0x20000478

08001220 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <MX_USART2_UART_Init+0x50>)
 8001228:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <MX_USART2_UART_Init+0x4c>)
 800122c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001230:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_USART2_UART_Init+0x4c>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001246:	220c      	movs	r2, #12
 8001248:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <MX_USART2_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001258:	f003 fc98 	bl	8004b8c <HAL_UART_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001262:	f000 f8c1 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200004b8 	.word	0x200004b8
 8001270:	40004400 	.word	0x40004400

08001274 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	4b51      	ldr	r3, [pc, #324]	; (80013d4 <MX_GPIO_Init+0x160>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a50      	ldr	r2, [pc, #320]	; (80013d4 <MX_GPIO_Init+0x160>)
 8001294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b4e      	ldr	r3, [pc, #312]	; (80013d4 <MX_GPIO_Init+0x160>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b4a      	ldr	r3, [pc, #296]	; (80013d4 <MX_GPIO_Init+0x160>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a49      	ldr	r2, [pc, #292]	; (80013d4 <MX_GPIO_Init+0x160>)
 80012b0:	f043 0304 	orr.w	r3, r3, #4
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <MX_GPIO_Init+0x160>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	4b43      	ldr	r3, [pc, #268]	; (80013d4 <MX_GPIO_Init+0x160>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a42      	ldr	r2, [pc, #264]	; (80013d4 <MX_GPIO_Init+0x160>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b40      	ldr	r3, [pc, #256]	; (80013d4 <MX_GPIO_Init+0x160>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	4b3c      	ldr	r3, [pc, #240]	; (80013d4 <MX_GPIO_Init+0x160>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a3b      	ldr	r2, [pc, #236]	; (80013d4 <MX_GPIO_Init+0x160>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b39      	ldr	r3, [pc, #228]	; (80013d4 <MX_GPIO_Init+0x160>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	4b35      	ldr	r3, [pc, #212]	; (80013d4 <MX_GPIO_Init+0x160>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a34      	ldr	r2, [pc, #208]	; (80013d4 <MX_GPIO_Init+0x160>)
 8001304:	f043 0308 	orr.w	r3, r3, #8
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b32      	ldr	r3, [pc, #200]	; (80013d4 <MX_GPIO_Init+0x160>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|RXEN_Pin|TXEN_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f248 6101 	movw	r1, #34305	; 0x8601
 800131c:	482e      	ldr	r0, [pc, #184]	; (80013d8 <MX_GPIO_Init+0x164>)
 800131e:	f001 f8fd 	bl	800251c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SWANT_GPIO_Port, SWANT_Pin, GPIO_PIN_SET);
 8001322:	2201      	movs	r2, #1
 8001324:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001328:	482c      	ldr	r0, [pc, #176]	; (80013dc <MX_GPIO_Init+0x168>)
 800132a:	f001 f8f7 	bl	800251c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001334:	4828      	ldr	r0, [pc, #160]	; (80013d8 <MX_GPIO_Init+0x164>)
 8001336:	f001 f8f1 	bl	800251c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2180      	movs	r1, #128	; 0x80
 800133e:	4828      	ldr	r0, [pc, #160]	; (80013e0 <MX_GPIO_Init+0x16c>)
 8001340:	f001 f8ec 	bl	800251c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin MODE_Pin RXEN_Pin TXEN_Pin
                           LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|MODE_Pin|RXEN_Pin|TXEN_Pin
 8001344:	f248 7301 	movw	r3, #34561	; 0x8701
 8001348:	617b      	str	r3, [r7, #20]
                          |LORA_NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	481e      	ldr	r0, [pc, #120]	; (80013d8 <MX_GPIO_Init+0x164>)
 800135e:	f000 ff59 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWANT_Pin */
  GPIO_InitStruct.Pin = SWANT_Pin;
 8001362:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SWANT_GPIO_Port, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	4818      	ldr	r0, [pc, #96]	; (80013dc <MX_GPIO_Init+0x168>)
 800137c:	f000 ff4a 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO3_Pin */
  GPIO_InitStruct.Pin = DIO3_Pin;
 8001380:	2304      	movs	r3, #4
 8001382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO3_GPIO_Port, &GPIO_InitStruct);
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4619      	mov	r1, r3
 8001392:	4814      	ldr	r0, [pc, #80]	; (80013e4 <MX_GPIO_Init+0x170>)
 8001394:	f000 ff3e 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO2_Pin LORA_DIO1_Pin LORA_BUSY_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin|LORA_DIO1_Pin|LORA_BUSY_Pin;
 8001398:	2370      	movs	r3, #112	; 0x70
 800139a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	480d      	ldr	r0, [pc, #52]	; (80013e0 <MX_GPIO_Init+0x16c>)
 80013ac:	f000 ff32 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RESET_Pin */
  GPIO_InitStruct.Pin = LORA_RESET_Pin;
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LORA_RESET_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	; (80013e0 <MX_GPIO_Init+0x16c>)
 80013c8:	f000 ff24 	bl	8002214 <HAL_GPIO_Init>

}
 80013cc:	bf00      	nop
 80013ce:	3728      	adds	r7, #40	; 0x28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020800 	.word	0x40020800
 80013e0:	40020400 	.word	0x40020400
 80013e4:	40020c00 	.word	0x40020c00

080013e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ec:	b672      	cpsid	i
}
 80013ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <Error_Handler+0x8>
	...

080013f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <HAL_MspInit+0x4c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	4a0f      	ldr	r2, [pc, #60]	; (8001440 <HAL_MspInit+0x4c>)
 8001404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001408:	6453      	str	r3, [r2, #68]	; 0x44
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <HAL_MspInit+0x4c>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_MspInit+0x4c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	4a08      	ldr	r2, [pc, #32]	; (8001440 <HAL_MspInit+0x4c>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001424:	6413      	str	r3, [r2, #64]	; 0x40
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_MspInit+0x4c>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800

08001444 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a17      	ldr	r2, [pc, #92]	; (80014c0 <HAL_ADC_MspInit+0x7c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d127      	bne.n	80014b6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <HAL_ADC_MspInit+0x80>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	4a15      	ldr	r2, [pc, #84]	; (80014c4 <HAL_ADC_MspInit+0x80>)
 8001470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001474:	6453      	str	r3, [r2, #68]	; 0x44
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <HAL_ADC_MspInit+0x80>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <HAL_ADC_MspInit+0x80>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <HAL_ADC_MspInit+0x80>)
 800148c:	f043 0304 	orr.w	r3, r3, #4
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <HAL_ADC_MspInit+0x80>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0304 	and.w	r3, r3, #4
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = PDET_Pin;
 800149e:	2301      	movs	r3, #1
 80014a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a2:	2303      	movs	r3, #3
 80014a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PDET_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	4805      	ldr	r0, [pc, #20]	; (80014c8 <HAL_ADC_MspInit+0x84>)
 80014b2:	f000 feaf 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014b6:	bf00      	nop
 80014b8:	3728      	adds	r7, #40	; 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40012000 	.word	0x40012000
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020800 	.word	0x40020800

080014cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a19      	ldr	r2, [pc, #100]	; (8001550 <HAL_I2C_MspInit+0x84>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d12c      	bne.n	8001548 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_I2C_MspInit+0x88>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a17      	ldr	r2, [pc, #92]	; (8001554 <HAL_I2C_MspInit+0x88>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_I2C_MspInit+0x88>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800150a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800150e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001510:	2312      	movs	r3, #18
 8001512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001514:	2301      	movs	r3, #1
 8001516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800151c:	2304      	movs	r3, #4
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	4619      	mov	r1, r3
 8001526:	480c      	ldr	r0, [pc, #48]	; (8001558 <HAL_I2C_MspInit+0x8c>)
 8001528:	f000 fe74 	bl	8002214 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <HAL_I2C_MspInit+0x88>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	4a07      	ldr	r2, [pc, #28]	; (8001554 <HAL_I2C_MspInit+0x88>)
 8001536:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800153a:	6413      	str	r3, [r2, #64]	; 0x40
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_I2C_MspInit+0x88>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	; 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40005400 	.word	0x40005400
 8001554:	40023800 	.word	0x40023800
 8001558:	40020400 	.word	0x40020400

0800155c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a19      	ldr	r2, [pc, #100]	; (80015e0 <HAL_SPI_MspInit+0x84>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d12c      	bne.n	80015d8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <HAL_SPI_MspInit+0x88>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <HAL_SPI_MspInit+0x88>)
 8001588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800158c:	6413      	str	r3, [r2, #64]	; 0x40
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_SPI_MspInit+0x88>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <HAL_SPI_MspInit+0x88>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a10      	ldr	r2, [pc, #64]	; (80015e4 <HAL_SPI_MspInit+0x88>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <HAL_SPI_MspInit+0x88>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80015b6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015c8:	2306      	movs	r3, #6
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <HAL_SPI_MspInit+0x8c>)
 80015d4:	f000 fe1e 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015d8:	bf00      	nop
 80015da:	3728      	adds	r7, #40	; 0x28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40003c00 	.word	0x40003c00
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020800 	.word	0x40020800

080015ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015fc:	d10d      	bne.n	800161a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_TIM_PWM_MspInit+0x3c>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	4a08      	ldr	r2, [pc, #32]	; (8001628 <HAL_TIM_PWM_MspInit+0x3c>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6413      	str	r3, [r2, #64]	; 0x40
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_TIM_PWM_MspInit+0x3c>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800161a:	bf00      	nop
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800

0800162c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800164c:	d13c      	bne.n	80016c8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <HAL_TIM_MspPostInit+0xa4>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <HAL_TIM_MspPostInit+0xa4>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <HAL_TIM_MspPostInit+0xa4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_TIM_MspPostInit+0xa4>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a17      	ldr	r2, [pc, #92]	; (80016d0 <HAL_TIM_MspPostInit+0xa4>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_TIM_MspPostInit+0xa4>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = LED2_Pin;
 8001686:	2302      	movs	r3, #2
 8001688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001696:	2301      	movs	r3, #1
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	480c      	ldr	r0, [pc, #48]	; (80016d4 <HAL_TIM_MspPostInit+0xa8>)
 80016a2:	f000 fdb7 	bl	8002214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016b8:	2301      	movs	r3, #1
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4619      	mov	r1, r3
 80016c2:	4805      	ldr	r0, [pc, #20]	; (80016d8 <HAL_TIM_MspPostInit+0xac>)
 80016c4:	f000 fda6 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80016c8:	bf00      	nop
 80016ca:	3728      	adds	r7, #40	; 0x28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020000 	.word	0x40020000
 80016d8:	40020400 	.word	0x40020400

080016dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a19      	ldr	r2, [pc, #100]	; (8001760 <HAL_UART_MspInit+0x84>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d12b      	bne.n	8001756 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <HAL_UART_MspInit+0x88>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	4a17      	ldr	r2, [pc, #92]	; (8001764 <HAL_UART_MspInit+0x88>)
 8001708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170c:	6413      	str	r3, [r2, #64]	; 0x40
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_UART_MspInit+0x88>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <HAL_UART_MspInit+0x88>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a10      	ldr	r2, [pc, #64]	; (8001764 <HAL_UART_MspInit+0x88>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_UART_MspInit+0x88>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001736:	230c      	movs	r3, #12
 8001738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001742:	2303      	movs	r3, #3
 8001744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001746:	2307      	movs	r3, #7
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	4805      	ldr	r0, [pc, #20]	; (8001768 <HAL_UART_MspInit+0x8c>)
 8001752:	f000 fd5f 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001756:	bf00      	nop
 8001758:	3728      	adds	r7, #40	; 0x28
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40004400 	.word	0x40004400
 8001764:	40023800 	.word	0x40023800
 8001768:	40020000 	.word	0x40020000

0800176c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <NMI_Handler+0x4>

08001772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001776:	e7fe      	b.n	8001776 <HardFault_Handler+0x4>

08001778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800177c:	e7fe      	b.n	800177c <MemManage_Handler+0x4>

0800177e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001782:	e7fe      	b.n	8001782 <BusFault_Handler+0x4>

08001784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <UsageFault_Handler+0x4>

0800178a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b8:	f000 f964 	bl	8001a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}

080017c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <OTG_FS_IRQHandler+0x10>)
 80017c6:	f001 f971 	bl	8002aac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200019cc 	.word	0x200019cc

080017d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
	return 1;
 80017d8:	2301      	movs	r3, #1
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <_kill>:

int _kill(int pid, int sig)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017ee:	f007 fa03 	bl	8008bf8 <__errno>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2216      	movs	r2, #22
 80017f6:	601a      	str	r2, [r3, #0]
	return -1;
 80017f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <_exit>:

void _exit (int status)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800180c:	f04f 31ff 	mov.w	r1, #4294967295
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ffe7 	bl	80017e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001816:	e7fe      	b.n	8001816 <_exit+0x12>

08001818 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	e00a      	b.n	8001840 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800182a:	f3af 8000 	nop.w
 800182e:	4601      	mov	r1, r0
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	1c5a      	adds	r2, r3, #1
 8001834:	60ba      	str	r2, [r7, #8]
 8001836:	b2ca      	uxtb	r2, r1
 8001838:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	3301      	adds	r3, #1
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	429a      	cmp	r2, r3
 8001846:	dbf0      	blt.n	800182a <_read+0x12>
	}

return len;
 8001848:	687b      	ldr	r3, [r7, #4]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	e009      	b.n	8001878 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	60ba      	str	r2, [r7, #8]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	3301      	adds	r3, #1
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	429a      	cmp	r2, r3
 800187e:	dbf1      	blt.n	8001864 <_write+0x12>
	}
	return len;
 8001880:	687b      	ldr	r3, [r7, #4]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <_close>:

int _close(int file)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
	return -1;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018b2:	605a      	str	r2, [r3, #4]
	return 0;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <_isatty>:

int _isatty(int file)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
	return 1;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
	return 0;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018fc:	4a14      	ldr	r2, [pc, #80]	; (8001950 <_sbrk+0x5c>)
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <_sbrk+0x60>)
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001908:	4b13      	ldr	r3, [pc, #76]	; (8001958 <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d102      	bne.n	8001916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001910:	4b11      	ldr	r3, [pc, #68]	; (8001958 <_sbrk+0x64>)
 8001912:	4a12      	ldr	r2, [pc, #72]	; (800195c <_sbrk+0x68>)
 8001914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <_sbrk+0x64>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	429a      	cmp	r2, r3
 8001922:	d207      	bcs.n	8001934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001924:	f007 f968 	bl	8008bf8 <__errno>
 8001928:	4603      	mov	r3, r0
 800192a:	220c      	movs	r2, #12
 800192c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
 8001932:	e009      	b.n	8001948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	4a05      	ldr	r2, [pc, #20]	; (8001958 <_sbrk+0x64>)
 8001944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001946:	68fb      	ldr	r3, [r7, #12]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20020000 	.word	0x20020000
 8001954:	00000400 	.word	0x00000400
 8001958:	20000374 	.word	0x20000374
 800195c:	20001de8 	.word	0x20001de8

08001960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <SystemInit+0x28>)
 8001966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800196a:	4a07      	ldr	r2, [pc, #28]	; (8001988 <SystemInit+0x28>)
 800196c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <SystemInit+0x28>)
 8001976:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800197a:	609a      	str	r2, [r3, #8]
#endif
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800198c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001990:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001992:	e003      	b.n	800199c <LoopCopyDataInit>

08001994 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001996:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001998:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800199a:	3104      	adds	r1, #4

0800199c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800199c:	480b      	ldr	r0, [pc, #44]	; (80019cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019a4:	d3f6      	bcc.n	8001994 <CopyDataInit>
  ldr  r2, =_sbss
 80019a6:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019a8:	e002      	b.n	80019b0 <LoopFillZerobss>

080019aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019ac:	f842 3b04 	str.w	r3, [r2], #4

080019b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019b4:	d3f9      	bcc.n	80019aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019b6:	f7ff ffd3 	bl	8001960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ba:	f007 f923 	bl	8008c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019be:	f7ff fa77 	bl	8000eb0 <main>
  bx  lr    
 80019c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80019c8:	0800be84 	.word	0x0800be84
  ldr  r0, =_sdata
 80019cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019d0:	20000358 	.word	0x20000358
  ldr  r2, =_sbss
 80019d4:	20000358 	.word	0x20000358
  ldr  r3, = _ebss
 80019d8:	20001de4 	.word	0x20001de4

080019dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019dc:	e7fe      	b.n	80019dc <ADC_IRQHandler>
	...

080019e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019e4:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <HAL_Init+0x40>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0d      	ldr	r2, [pc, #52]	; (8001a20 <HAL_Init+0x40>)
 80019ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_Init+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <HAL_Init+0x40>)
 80019f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <HAL_Init+0x40>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <HAL_Init+0x40>)
 8001a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a08:	2003      	movs	r0, #3
 8001a0a:	f000 fbc1 	bl	8002190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f000 f808 	bl	8001a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a14:	f7ff fcee 	bl	80013f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023c00 	.word	0x40023c00

08001a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_InitTick+0x54>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_InitTick+0x58>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	4619      	mov	r1, r3
 8001a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 fbd9 	bl	80021fa <HAL_SYSTICK_Config>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00e      	b.n	8001a70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b0f      	cmp	r3, #15
 8001a56:	d80a      	bhi.n	8001a6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a60:	f000 fba1 	bl	80021a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a64:	4a06      	ldr	r2, [pc, #24]	; (8001a80 <HAL_InitTick+0x5c>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e000      	b.n	8001a70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	20000004 	.word	0x20000004

08001a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_IncTick+0x20>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_IncTick+0x24>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4413      	add	r3, r2
 8001a94:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <HAL_IncTick+0x24>)
 8001a96:	6013      	str	r3, [r2, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20000008 	.word	0x20000008
 8001aa8:	200004f8 	.word	0x200004f8

08001aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <HAL_GetTick+0x14>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	200004f8 	.word	0x200004f8

08001ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001acc:	f7ff ffee 	bl	8001aac <HAL_GetTick>
 8001ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001adc:	d005      	beq.n	8001aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <HAL_Delay+0x44>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aea:	bf00      	nop
 8001aec:	f7ff ffde 	bl	8001aac <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d8f7      	bhi.n	8001aec <HAL_Delay+0x28>
  {
  }
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000008 	.word	0x20000008

08001b0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e033      	b.n	8001b8a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d109      	bne.n	8001b3e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff fc8a 	bl	8001444 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d118      	bne.n	8001b7c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b52:	f023 0302 	bic.w	r3, r3, #2
 8001b56:	f043 0202 	orr.w	r2, r3, #2
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f94a 	bl	8001df8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f023 0303 	bic.w	r3, r3, #3
 8001b72:	f043 0201 	orr.w	r2, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	641a      	str	r2, [r3, #64]	; 0x40
 8001b7a:	e001      	b.n	8001b80 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x1c>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e113      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x244>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b09      	cmp	r3, #9
 8001bbe:	d925      	bls.n	8001c0c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68d9      	ldr	r1, [r3, #12]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4613      	mov	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3b1e      	subs	r3, #30
 8001bd6:	2207      	movs	r2, #7
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43da      	mvns	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	400a      	ands	r2, r1
 8001be4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68d9      	ldr	r1, [r3, #12]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4403      	add	r3, r0
 8001bfe:	3b1e      	subs	r3, #30
 8001c00:	409a      	lsls	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	e022      	b.n	8001c52 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6919      	ldr	r1, [r3, #16]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	2207      	movs	r2, #7
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6919      	ldr	r1, [r3, #16]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	4618      	mov	r0, r3
 8001c42:	4603      	mov	r3, r0
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4403      	add	r3, r0
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b06      	cmp	r3, #6
 8001c58:	d824      	bhi.n	8001ca4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	3b05      	subs	r3, #5
 8001c6c:	221f      	movs	r2, #31
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43da      	mvns	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	400a      	ands	r2, r1
 8001c7a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	4618      	mov	r0, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	3b05      	subs	r3, #5
 8001c96:	fa00 f203 	lsl.w	r2, r0, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ca2:	e04c      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b0c      	cmp	r3, #12
 8001caa:	d824      	bhi.n	8001cf6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	3b23      	subs	r3, #35	; 0x23
 8001cbe:	221f      	movs	r2, #31
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43da      	mvns	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	400a      	ands	r2, r1
 8001ccc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3b23      	subs	r3, #35	; 0x23
 8001ce8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	631a      	str	r2, [r3, #48]	; 0x30
 8001cf4:	e023      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	3b41      	subs	r3, #65	; 0x41
 8001d08:	221f      	movs	r2, #31
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	400a      	ands	r2, r1
 8001d16:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	4618      	mov	r0, r3
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	3b41      	subs	r3, #65	; 0x41
 8001d32:	fa00 f203 	lsl.w	r2, r0, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d3e:	4b29      	ldr	r3, [pc, #164]	; (8001de4 <HAL_ADC_ConfigChannel+0x250>)
 8001d40:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a28      	ldr	r2, [pc, #160]	; (8001de8 <HAL_ADC_ConfigChannel+0x254>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d10f      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x1d8>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b12      	cmp	r3, #18
 8001d52:	d10b      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a1d      	ldr	r2, [pc, #116]	; (8001de8 <HAL_ADC_ConfigChannel+0x254>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d12b      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x23a>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a1c      	ldr	r2, [pc, #112]	; (8001dec <HAL_ADC_ConfigChannel+0x258>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d003      	beq.n	8001d88 <HAL_ADC_ConfigChannel+0x1f4>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b11      	cmp	r3, #17
 8001d86:	d122      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a11      	ldr	r2, [pc, #68]	; (8001dec <HAL_ADC_ConfigChannel+0x258>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d111      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_ADC_ConfigChannel+0x25c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a11      	ldr	r2, [pc, #68]	; (8001df4 <HAL_ADC_ConfigChannel+0x260>)
 8001db0:	fba2 2303 	umull	r2, r3, r2, r3
 8001db4:	0c9a      	lsrs	r2, r3, #18
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001dc0:	e002      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f9      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	40012300 	.word	0x40012300
 8001de8:	40012000 	.word	0x40012000
 8001dec:	10000012 	.word	0x10000012
 8001df0:	20000000 	.word	0x20000000
 8001df4:	431bde83 	.word	0x431bde83

08001df8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e00:	4b79      	ldr	r3, [pc, #484]	; (8001fe8 <ADC_Init+0x1f0>)
 8001e02:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6859      	ldr	r1, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	021a      	lsls	r2, r3, #8
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6859      	ldr	r1, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6899      	ldr	r1, [r3, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8a:	4a58      	ldr	r2, [pc, #352]	; (8001fec <ADC_Init+0x1f4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d022      	beq.n	8001ed6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6899      	ldr	r1, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ec0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6899      	ldr	r1, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	e00f      	b.n	8001ef6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ee4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ef4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0202 	bic.w	r2, r2, #2
 8001f04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6899      	ldr	r1, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	7e1b      	ldrb	r3, [r3, #24]
 8001f10:	005a      	lsls	r2, r3, #1
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01b      	beq.n	8001f5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6859      	ldr	r1, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	035a      	lsls	r2, r3, #13
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	e007      	b.n	8001f6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	051a      	lsls	r2, r3, #20
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6899      	ldr	r1, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fae:	025a      	lsls	r2, r3, #9
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6899      	ldr	r1, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	029a      	lsls	r2, r3, #10
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	609a      	str	r2, [r3, #8]
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	40012300 	.word	0x40012300
 8001fec:	0f000001 	.word	0x0f000001

08001ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800200c:	4013      	ands	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800201c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002022:	4a04      	ldr	r2, [pc, #16]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	60d3      	str	r3, [r2, #12]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <__NVIC_GetPriorityGrouping+0x18>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	f003 0307 	and.w	r3, r3, #7
}
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	2b00      	cmp	r3, #0
 8002064:	db0b      	blt.n	800207e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	f003 021f 	and.w	r2, r3, #31
 800206c:	4907      	ldr	r1, [pc, #28]	; (800208c <__NVIC_EnableIRQ+0x38>)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	2001      	movs	r0, #1
 8002076:	fa00 f202 	lsl.w	r2, r0, r2
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000e100 	.word	0xe000e100

08002090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	db0a      	blt.n	80020ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	490c      	ldr	r1, [pc, #48]	; (80020dc <__NVIC_SetPriority+0x4c>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	440b      	add	r3, r1
 80020b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b8:	e00a      	b.n	80020d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4908      	ldr	r1, [pc, #32]	; (80020e0 <__NVIC_SetPriority+0x50>)
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	3b04      	subs	r3, #4
 80020c8:	0112      	lsls	r2, r2, #4
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	440b      	add	r3, r1
 80020ce:	761a      	strb	r2, [r3, #24]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000e100 	.word	0xe000e100
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f1c3 0307 	rsb	r3, r3, #7
 80020fe:	2b04      	cmp	r3, #4
 8002100:	bf28      	it	cs
 8002102:	2304      	movcs	r3, #4
 8002104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3304      	adds	r3, #4
 800210a:	2b06      	cmp	r3, #6
 800210c:	d902      	bls.n	8002114 <NVIC_EncodePriority+0x30>
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3b03      	subs	r3, #3
 8002112:	e000      	b.n	8002116 <NVIC_EncodePriority+0x32>
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	f04f 32ff 	mov.w	r2, #4294967295
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43da      	mvns	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	401a      	ands	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800212c:	f04f 31ff 	mov.w	r1, #4294967295
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	43d9      	mvns	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	4313      	orrs	r3, r2
         );
}
 800213e:	4618      	mov	r0, r3
 8002140:	3724      	adds	r7, #36	; 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3b01      	subs	r3, #1
 8002158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800215c:	d301      	bcc.n	8002162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215e:	2301      	movs	r3, #1
 8002160:	e00f      	b.n	8002182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <SysTick_Config+0x40>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3b01      	subs	r3, #1
 8002168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800216a:	210f      	movs	r1, #15
 800216c:	f04f 30ff 	mov.w	r0, #4294967295
 8002170:	f7ff ff8e 	bl	8002090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <SysTick_Config+0x40>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800217a:	4b04      	ldr	r3, [pc, #16]	; (800218c <SysTick_Config+0x40>)
 800217c:	2207      	movs	r2, #7
 800217e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	e000e010 	.word	0xe000e010

08002190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ff29 	bl	8001ff0 <__NVIC_SetPriorityGrouping>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
 80021b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b8:	f7ff ff3e 	bl	8002038 <__NVIC_GetPriorityGrouping>
 80021bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	6978      	ldr	r0, [r7, #20]
 80021c4:	f7ff ff8e 	bl	80020e4 <NVIC_EncodePriority>
 80021c8:	4602      	mov	r2, r0
 80021ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff5d 	bl	8002090 <__NVIC_SetPriority>
}
 80021d6:	bf00      	nop
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff31 	bl	8002054 <__NVIC_EnableIRQ>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff ffa2 	bl	800214c <SysTick_Config>
 8002208:	4603      	mov	r3, r0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	; 0x24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002226:	2300      	movs	r3, #0
 8002228:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	e159      	b.n	80024e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002230:	2201      	movs	r2, #1
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	429a      	cmp	r2, r3
 800224a:	f040 8148 	bne.w	80024de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d00b      	beq.n	800226e <HAL_GPIO_Init+0x5a>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d007      	beq.n	800226e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002262:	2b11      	cmp	r3, #17
 8002264:	d003      	beq.n	800226e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b12      	cmp	r3, #18
 800226c:	d130      	bne.n	80022d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	2203      	movs	r2, #3
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a4:	2201      	movs	r2, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 0201 	and.w	r2, r3, #1
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0xfc>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b12      	cmp	r3, #18
 800230e:	d123      	bne.n	8002358 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	08da      	lsrs	r2, r3, #3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3208      	adds	r2, #8
 8002318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	220f      	movs	r2, #15
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	08da      	lsrs	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3208      	adds	r2, #8
 8002352:	69b9      	ldr	r1, [r7, #24]
 8002354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	2203      	movs	r2, #3
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0203 	and.w	r2, r3, #3
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80a2 	beq.w	80024de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	4b57      	ldr	r3, [pc, #348]	; (80024fc <HAL_GPIO_Init+0x2e8>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a56      	ldr	r2, [pc, #344]	; (80024fc <HAL_GPIO_Init+0x2e8>)
 80023a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b54      	ldr	r3, [pc, #336]	; (80024fc <HAL_GPIO_Init+0x2e8>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023b6:	4a52      	ldr	r2, [pc, #328]	; (8002500 <HAL_GPIO_Init+0x2ec>)
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	3302      	adds	r3, #2
 80023be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	220f      	movs	r2, #15
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a49      	ldr	r2, [pc, #292]	; (8002504 <HAL_GPIO_Init+0x2f0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d019      	beq.n	8002416 <HAL_GPIO_Init+0x202>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a48      	ldr	r2, [pc, #288]	; (8002508 <HAL_GPIO_Init+0x2f4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d013      	beq.n	8002412 <HAL_GPIO_Init+0x1fe>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a47      	ldr	r2, [pc, #284]	; (800250c <HAL_GPIO_Init+0x2f8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00d      	beq.n	800240e <HAL_GPIO_Init+0x1fa>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a46      	ldr	r2, [pc, #280]	; (8002510 <HAL_GPIO_Init+0x2fc>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d007      	beq.n	800240a <HAL_GPIO_Init+0x1f6>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a45      	ldr	r2, [pc, #276]	; (8002514 <HAL_GPIO_Init+0x300>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d101      	bne.n	8002406 <HAL_GPIO_Init+0x1f2>
 8002402:	2304      	movs	r3, #4
 8002404:	e008      	b.n	8002418 <HAL_GPIO_Init+0x204>
 8002406:	2307      	movs	r3, #7
 8002408:	e006      	b.n	8002418 <HAL_GPIO_Init+0x204>
 800240a:	2303      	movs	r3, #3
 800240c:	e004      	b.n	8002418 <HAL_GPIO_Init+0x204>
 800240e:	2302      	movs	r3, #2
 8002410:	e002      	b.n	8002418 <HAL_GPIO_Init+0x204>
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <HAL_GPIO_Init+0x204>
 8002416:	2300      	movs	r3, #0
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	f002 0203 	and.w	r2, r2, #3
 800241e:	0092      	lsls	r2, r2, #2
 8002420:	4093      	lsls	r3, r2
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002428:	4935      	ldr	r1, [pc, #212]	; (8002500 <HAL_GPIO_Init+0x2ec>)
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	089b      	lsrs	r3, r3, #2
 800242e:	3302      	adds	r3, #2
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002436:	4b38      	ldr	r3, [pc, #224]	; (8002518 <HAL_GPIO_Init+0x304>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800245a:	4a2f      	ldr	r2, [pc, #188]	; (8002518 <HAL_GPIO_Init+0x304>)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002460:	4b2d      	ldr	r3, [pc, #180]	; (8002518 <HAL_GPIO_Init+0x304>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002484:	4a24      	ldr	r2, [pc, #144]	; (8002518 <HAL_GPIO_Init+0x304>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800248a:	4b23      	ldr	r3, [pc, #140]	; (8002518 <HAL_GPIO_Init+0x304>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ae:	4a1a      	ldr	r2, [pc, #104]	; (8002518 <HAL_GPIO_Init+0x304>)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b4:	4b18      	ldr	r3, [pc, #96]	; (8002518 <HAL_GPIO_Init+0x304>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024d8:	4a0f      	ldr	r2, [pc, #60]	; (8002518 <HAL_GPIO_Init+0x304>)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3301      	adds	r3, #1
 80024e2:	61fb      	str	r3, [r7, #28]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	2b0f      	cmp	r3, #15
 80024e8:	f67f aea2 	bls.w	8002230 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	3724      	adds	r7, #36	; 0x24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800
 8002500:	40013800 	.word	0x40013800
 8002504:	40020000 	.word	0x40020000
 8002508:	40020400 	.word	0x40020400
 800250c:	40020800 	.word	0x40020800
 8002510:	40020c00 	.word	0x40020c00
 8002514:	40021000 	.word	0x40021000
 8002518:	40013c00 	.word	0x40013c00

0800251c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	807b      	strh	r3, [r7, #2]
 8002528:	4613      	mov	r3, r2
 800252a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800252c:	787b      	ldrb	r3, [r7, #1]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002532:	887a      	ldrh	r2, [r7, #2]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002538:	e003      	b.n	8002542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800253a:	887b      	ldrh	r3, [r7, #2]
 800253c:	041a      	lsls	r2, r3, #16
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	619a      	str	r2, [r3, #24]
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	460b      	mov	r3, r1
 8002558:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695a      	ldr	r2, [r3, #20]
 800255e:	887b      	ldrh	r3, [r7, #2]
 8002560:	401a      	ands	r2, r3
 8002562:	887b      	ldrh	r3, [r7, #2]
 8002564:	429a      	cmp	r2, r3
 8002566:	d104      	bne.n	8002572 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002568:	887b      	ldrh	r3, [r7, #2]
 800256a:	041a      	lsls	r2, r3, #16
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002570:	e002      	b.n	8002578 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002572:	887a      	ldrh	r2, [r7, #2]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	619a      	str	r2, [r3, #24]
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e12b      	b.n	80027ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7fe ff8e 	bl	80014cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2224      	movs	r2, #36	; 0x24
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0201 	bic.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025e8:	f001 fed8 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 80025ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4a81      	ldr	r2, [pc, #516]	; (80027f8 <HAL_I2C_Init+0x274>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d807      	bhi.n	8002608 <HAL_I2C_Init+0x84>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4a80      	ldr	r2, [pc, #512]	; (80027fc <HAL_I2C_Init+0x278>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	bf94      	ite	ls
 8002600:	2301      	movls	r3, #1
 8002602:	2300      	movhi	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	e006      	b.n	8002616 <HAL_I2C_Init+0x92>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4a7d      	ldr	r2, [pc, #500]	; (8002800 <HAL_I2C_Init+0x27c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	bf94      	ite	ls
 8002610:	2301      	movls	r3, #1
 8002612:	2300      	movhi	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e0e7      	b.n	80027ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4a78      	ldr	r2, [pc, #480]	; (8002804 <HAL_I2C_Init+0x280>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	0c9b      	lsrs	r3, r3, #18
 8002628:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	430a      	orrs	r2, r1
 800263c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	4a6a      	ldr	r2, [pc, #424]	; (80027f8 <HAL_I2C_Init+0x274>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d802      	bhi.n	8002658 <HAL_I2C_Init+0xd4>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	3301      	adds	r3, #1
 8002656:	e009      	b.n	800266c <HAL_I2C_Init+0xe8>
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800265e:	fb02 f303 	mul.w	r3, r2, r3
 8002662:	4a69      	ldr	r2, [pc, #420]	; (8002808 <HAL_I2C_Init+0x284>)
 8002664:	fba2 2303 	umull	r2, r3, r2, r3
 8002668:	099b      	lsrs	r3, r3, #6
 800266a:	3301      	adds	r3, #1
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	430b      	orrs	r3, r1
 8002672:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800267e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	495c      	ldr	r1, [pc, #368]	; (80027f8 <HAL_I2C_Init+0x274>)
 8002688:	428b      	cmp	r3, r1
 800268a:	d819      	bhi.n	80026c0 <HAL_I2C_Init+0x13c>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1e59      	subs	r1, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	fbb1 f3f3 	udiv	r3, r1, r3
 800269a:	1c59      	adds	r1, r3, #1
 800269c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026a0:	400b      	ands	r3, r1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HAL_I2C_Init+0x138>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1e59      	subs	r1, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026b4:	3301      	adds	r3, #1
 80026b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ba:	e051      	b.n	8002760 <HAL_I2C_Init+0x1dc>
 80026bc:	2304      	movs	r3, #4
 80026be:	e04f      	b.n	8002760 <HAL_I2C_Init+0x1dc>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d111      	bne.n	80026ec <HAL_I2C_Init+0x168>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1e58      	subs	r0, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6859      	ldr	r1, [r3, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	440b      	add	r3, r1
 80026d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026da:	3301      	adds	r3, #1
 80026dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	bf0c      	ite	eq
 80026e4:	2301      	moveq	r3, #1
 80026e6:	2300      	movne	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	e012      	b.n	8002712 <HAL_I2C_Init+0x18e>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1e58      	subs	r0, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6859      	ldr	r1, [r3, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	0099      	lsls	r1, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002702:	3301      	adds	r3, #1
 8002704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf0c      	ite	eq
 800270c:	2301      	moveq	r3, #1
 800270e:	2300      	movne	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_I2C_Init+0x196>
 8002716:	2301      	movs	r3, #1
 8002718:	e022      	b.n	8002760 <HAL_I2C_Init+0x1dc>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10e      	bne.n	8002740 <HAL_I2C_Init+0x1bc>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1e58      	subs	r0, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6859      	ldr	r1, [r3, #4]
 800272a:	460b      	mov	r3, r1
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	440b      	add	r3, r1
 8002730:	fbb0 f3f3 	udiv	r3, r0, r3
 8002734:	3301      	adds	r3, #1
 8002736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800273a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800273e:	e00f      	b.n	8002760 <HAL_I2C_Init+0x1dc>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1e58      	subs	r0, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	0099      	lsls	r1, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	fbb0 f3f3 	udiv	r3, r0, r3
 8002756:	3301      	adds	r3, #1
 8002758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800275c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	6809      	ldr	r1, [r1, #0]
 8002764:	4313      	orrs	r3, r2
 8002766:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69da      	ldr	r2, [r3, #28]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800278e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6911      	ldr	r1, [r2, #16]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68d2      	ldr	r2, [r2, #12]
 800279a:	4311      	orrs	r1, r2
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	430b      	orrs	r3, r1
 80027a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0201 	orr.w	r2, r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	000186a0 	.word	0x000186a0
 80027fc:	001e847f 	.word	0x001e847f
 8002800:	003d08ff 	.word	0x003d08ff
 8002804:	431bde83 	.word	0x431bde83
 8002808:	10624dd3 	.word	0x10624dd3

0800280c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800280c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800280e:	b08f      	sub	sp, #60	; 0x3c
 8002810:	af0a      	add	r7, sp, #40	; 0x28
 8002812:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e10f      	b.n	8002a3e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d106      	bne.n	800283e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f005 feeb 	bl	8008614 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2203      	movs	r2, #3
 8002842:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d102      	bne.n	8002858 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f002 fe94 	bl	800558a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	687e      	ldr	r6, [r7, #4]
 800286a:	466d      	mov	r5, sp
 800286c:	f106 0410 	add.w	r4, r6, #16
 8002870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002878:	e894 0003 	ldmia.w	r4, {r0, r1}
 800287c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002880:	1d33      	adds	r3, r6, #4
 8002882:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002884:	6838      	ldr	r0, [r7, #0]
 8002886:	f002 fd6b 	bl	8005360 <USB_CoreInit>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0d0      	b.n	8002a3e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f002 fe82 	bl	80055ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	73fb      	strb	r3, [r7, #15]
 80028ac:	e04a      	b.n	8002944 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028ae:	7bfa      	ldrb	r2, [r7, #15]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	1a9b      	subs	r3, r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	333d      	adds	r3, #61	; 0x3d
 80028be:	2201      	movs	r2, #1
 80028c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028c2:	7bfa      	ldrb	r2, [r7, #15]
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	1a9b      	subs	r3, r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	440b      	add	r3, r1
 80028d0:	333c      	adds	r3, #60	; 0x3c
 80028d2:	7bfa      	ldrb	r2, [r7, #15]
 80028d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028d6:	7bfa      	ldrb	r2, [r7, #15]
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	b298      	uxth	r0, r3
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	3342      	adds	r3, #66	; 0x42
 80028ea:	4602      	mov	r2, r0
 80028ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028ee:	7bfa      	ldrb	r2, [r7, #15]
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	1a9b      	subs	r3, r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	440b      	add	r3, r1
 80028fc:	333f      	adds	r3, #63	; 0x3f
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002902:	7bfa      	ldrb	r2, [r7, #15]
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	1a9b      	subs	r3, r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	3344      	adds	r3, #68	; 0x44
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002916:	7bfa      	ldrb	r2, [r7, #15]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	3348      	adds	r3, #72	; 0x48
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	3350      	adds	r3, #80	; 0x50
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	3301      	adds	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	429a      	cmp	r2, r3
 800294c:	d3af      	bcc.n	80028ae <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800294e:	2300      	movs	r3, #0
 8002950:	73fb      	strb	r3, [r7, #15]
 8002952:	e044      	b.n	80029de <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002954:	7bfa      	ldrb	r2, [r7, #15]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	1a9b      	subs	r3, r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800296a:	7bfa      	ldrb	r2, [r7, #15]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800297c:	7bfa      	ldrb	r2, [r7, #15]
 800297e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002980:	7bfa      	ldrb	r2, [r7, #15]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	440b      	add	r3, r1
 80029a4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029c2:	7bfa      	ldrb	r2, [r7, #15]
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	1a9b      	subs	r3, r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	3301      	adds	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
 80029de:	7bfa      	ldrb	r2, [r7, #15]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d3b5      	bcc.n	8002954 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	603b      	str	r3, [r7, #0]
 80029ee:	687e      	ldr	r6, [r7, #4]
 80029f0:	466d      	mov	r5, sp
 80029f2:	f106 0410 	add.w	r4, r6, #16
 80029f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a02:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a06:	1d33      	adds	r3, r6, #4
 8002a08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a0a:	6838      	ldr	r0, [r7, #0]
 8002a0c:	f002 fdf8 	bl	8005600 <USB_DevInit>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d005      	beq.n	8002a22 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e00d      	b.n	8002a3e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f003 fe40 	bl	80066bc <USB_DevDisconnect>

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a46 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b084      	sub	sp, #16
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_PCD_Start+0x1c>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e020      	b.n	8002aa4 <HAL_PCD_Start+0x5e>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d109      	bne.n	8002a86 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d005      	beq.n	8002a86 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f002 fd6c 	bl	8005568 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f003 fdf0 	bl	800667a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b08d      	sub	sp, #52	; 0x34
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f003 feae 	bl	8006824 <USB_GetMode>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f040 839d 	bne.w	800320a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f003 fe12 	bl	80066fe <USB_ReadInterrupts>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8393 	beq.w	8003208 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f003 fe09 	bl	80066fe <USB_ReadInterrupts>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d107      	bne.n	8002b06 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695a      	ldr	r2, [r3, #20]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f002 0202 	and.w	r2, r2, #2
 8002b04:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f003 fdf7 	bl	80066fe <USB_ReadInterrupts>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2b10      	cmp	r3, #16
 8002b18:	d161      	bne.n	8002bde <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699a      	ldr	r2, [r3, #24]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0210 	bic.w	r2, r2, #16
 8002b28:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	f003 020f 	and.w	r2, r3, #15
 8002b36:	4613      	mov	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	1a9b      	subs	r3, r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	3304      	adds	r3, #4
 8002b48:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	0c5b      	lsrs	r3, r3, #17
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d124      	bne.n	8002ba0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d035      	beq.n	8002bce <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	461a      	mov	r2, r3
 8002b74:	6a38      	ldr	r0, [r7, #32]
 8002b76:	f003 fc5d 	bl	8006434 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b86:	441a      	add	r2, r3
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	699a      	ldr	r2, [r3, #24]
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	091b      	lsrs	r3, r3, #4
 8002b94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b98:	441a      	add	r2, r3
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	619a      	str	r2, [r3, #24]
 8002b9e:	e016      	b.n	8002bce <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	0c5b      	lsrs	r3, r3, #17
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	2b06      	cmp	r3, #6
 8002baa:	d110      	bne.n	8002bce <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bb2:	2208      	movs	r2, #8
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	6a38      	ldr	r0, [r7, #32]
 8002bb8:	f003 fc3c 	bl	8006434 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	699a      	ldr	r2, [r3, #24]
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	091b      	lsrs	r3, r3, #4
 8002bc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bc8:	441a      	add	r2, r3
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	699a      	ldr	r2, [r3, #24]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0210 	orr.w	r2, r2, #16
 8002bdc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f003 fd8b 	bl	80066fe <USB_ReadInterrupts>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bf2:	d16e      	bne.n	8002cd2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f003 fd91 	bl	8006724 <USB_ReadDevAllOutEpInterrupt>
 8002c02:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002c04:	e062      	b.n	8002ccc <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d057      	beq.n	8002cc0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f003 fdb6 	bl	800678c <USB_ReadDevOutEPInterrupt>
 8002c20:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00c      	beq.n	8002c46 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fdb1 	bl	80037a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	f003 0308 	and.w	r3, r3, #8
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00c      	beq.n	8002c6a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	2308      	movs	r3, #8
 8002c60:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 feab 	bl	80039c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c80:	461a      	mov	r2, r3
 8002c82:	2310      	movs	r3, #16
 8002c84:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	2320      	movs	r3, #32
 8002ca0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d009      	beq.n	8002cc0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb8:	461a      	mov	r2, r3
 8002cba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cbe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	085b      	lsrs	r3, r3, #1
 8002cca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d199      	bne.n	8002c06 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f003 fd11 	bl	80066fe <USB_ReadInterrupts>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ce6:	f040 80c0 	bne.w	8002e6a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f003 fd32 	bl	8006758 <USB_ReadDevAllInEpInterrupt>
 8002cf4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002cfa:	e0b2      	b.n	8002e62 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 80a7 	beq.w	8002e56 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	4611      	mov	r1, r2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f003 fd58 	bl	80067c8 <USB_ReadDevInEPInterrupt>
 8002d18:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d057      	beq.n	8002dd4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69f9      	ldr	r1, [r7, #28]
 8002d40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d44:	4013      	ands	r3, r2
 8002d46:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d54:	461a      	mov	r2, r3
 8002d56:	2301      	movs	r3, #1
 8002d58:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d132      	bne.n	8002dc8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d66:	4613      	mov	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	1a9b      	subs	r3, r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	3348      	adds	r3, #72	; 0x48
 8002d72:	6819      	ldr	r1, [r3, #0]
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d78:	4613      	mov	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4403      	add	r3, r0
 8002d82:	3344      	adds	r3, #68	; 0x44
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4419      	add	r1, r3
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4403      	add	r3, r0
 8002d96:	3348      	adds	r3, #72	; 0x48
 8002d98:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d113      	bne.n	8002dc8 <HAL_PCD_IRQHandler+0x31c>
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da4:	4613      	mov	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	1a9b      	subs	r3, r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	3350      	adds	r3, #80	; 0x50
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d108      	bne.n	8002dc8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	f003 fd60 	bl	8006888 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	4619      	mov	r1, r3
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f005 fca1 	bl	8008716 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d008      	beq.n	8002df0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dea:	461a      	mov	r2, r3
 8002dec:	2308      	movs	r3, #8
 8002dee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d008      	beq.n	8002e0c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e06:	461a      	mov	r2, r3
 8002e08:	2310      	movs	r3, #16
 8002e0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d008      	beq.n	8002e28 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e22:	461a      	mov	r2, r3
 8002e24:	2340      	movs	r3, #64	; 0x40
 8002e26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e3e:	461a      	mov	r2, r3
 8002e40:	2302      	movs	r3, #2
 8002e42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fc1b 	bl	800368c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	3301      	adds	r3, #1
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5e:	085b      	lsrs	r3, r3, #1
 8002e60:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f47f af49 	bne.w	8002cfc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f003 fc45 	bl	80066fe <USB_ReadInterrupts>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e7e:	d122      	bne.n	8002ec6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e8e:	f023 0301 	bic.w	r3, r3, #1
 8002e92:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d108      	bne.n	8002eb0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fe27 	bl	8003afc <HAL_PCDEx_LPM_Callback>
 8002eae:	e002      	b.n	8002eb6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f005 fc9d 	bl	80087f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695a      	ldr	r2, [r3, #20]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ec4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f003 fc17 	bl	80066fe <USB_ReadInterrupts>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eda:	d112      	bne.n	8002f02 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d102      	bne.n	8002ef2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f005 fc59 	bl	80087a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695a      	ldr	r2, [r3, #20]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002f00:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f003 fbf9 	bl	80066fe <USB_ReadInterrupts>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f16:	f040 80c7 	bne.w	80030a8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	69fa      	ldr	r2, [r7, #28]
 8002f24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f28:	f023 0301 	bic.w	r3, r3, #1
 8002f2c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2110      	movs	r1, #16
 8002f34:	4618      	mov	r0, r3
 8002f36:	f002 fcc7 	bl	80058c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f3e:	e056      	b.n	8002fee <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f52:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f64:	0151      	lsls	r1, r2, #5
 8002f66:	69fa      	ldr	r2, [r7, #28]
 8002f68:	440a      	add	r2, r1
 8002f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f72:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f84:	0151      	lsls	r1, r2, #5
 8002f86:	69fa      	ldr	r2, [r7, #28]
 8002f88:	440a      	add	r2, r1
 8002f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f92:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fa6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fb8:	0151      	lsls	r1, r2, #5
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	440a      	add	r2, r1
 8002fbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002fc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fc6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fd8:	0151      	lsls	r1, r2, #5
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	440a      	add	r2, r1
 8002fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002fe2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002fe6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fea:	3301      	adds	r3, #1
 8002fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d3a3      	bcc.n	8002f40 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	69fa      	ldr	r2, [r7, #28]
 8003002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003006:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800300a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003010:	2b00      	cmp	r3, #0
 8003012:	d016      	beq.n	8003042 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800301a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003024:	f043 030b 	orr.w	r3, r3, #11
 8003028:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003034:	69fa      	ldr	r2, [r7, #28]
 8003036:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800303a:	f043 030b 	orr.w	r3, r3, #11
 800303e:	6453      	str	r3, [r2, #68]	; 0x44
 8003040:	e015      	b.n	800306e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	69fa      	ldr	r2, [r7, #28]
 800304c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003050:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003054:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003058:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003068:	f043 030b 	orr.w	r3, r3, #11
 800306c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800307c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003080:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003092:	461a      	mov	r2, r3
 8003094:	f003 fbf8 	bl	8006888 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80030a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f003 fb26 	bl	80066fe <USB_ReadInterrupts>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030bc:	d124      	bne.n	8003108 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f003 fbbc 	bl	8006840 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f002 fc5c 	bl	800598a <USB_GetDevSpeed>
 80030d2:	4603      	mov	r3, r0
 80030d4:	461a      	mov	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681c      	ldr	r4, [r3, #0]
 80030de:	f001 f951 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 80030e2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	461a      	mov	r2, r3
 80030ec:	4620      	mov	r0, r4
 80030ee:	f002 f999 	bl	8005424 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f005 fb37 	bl	8008766 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003106:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f003 faf6 	bl	80066fe <USB_ReadInterrupts>
 8003112:	4603      	mov	r3, r0
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b08      	cmp	r3, #8
 800311a:	d10a      	bne.n	8003132 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f005 fb14 	bl	800874a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695a      	ldr	r2, [r3, #20]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f002 0208 	and.w	r2, r2, #8
 8003130:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f003 fae1 	bl	80066fe <USB_ReadInterrupts>
 800313c:	4603      	mov	r3, r0
 800313e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003146:	d10f      	bne.n	8003168 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	b2db      	uxtb	r3, r3
 8003150:	4619      	mov	r1, r3
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f005 fb6c 	bl	8008830 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003166:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f003 fac6 	bl	80066fe <USB_ReadInterrupts>
 8003172:	4603      	mov	r3, r0
 8003174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003178:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800317c:	d10f      	bne.n	800319e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	b2db      	uxtb	r3, r3
 8003186:	4619      	mov	r1, r3
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f005 fb3f 	bl	800880c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695a      	ldr	r2, [r3, #20]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800319c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f003 faab 	bl	80066fe <USB_ReadInterrupts>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b2:	d10a      	bne.n	80031ca <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f005 fb4d 	bl	8008854 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695a      	ldr	r2, [r3, #20]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80031c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f003 fa95 	bl	80066fe <USB_ReadInterrupts>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d115      	bne.n	800320a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f005 fb3d 	bl	8008870 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	430a      	orrs	r2, r1
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	e000      	b.n	800320a <HAL_PCD_IRQHandler+0x75e>
      return;
 8003208:	bf00      	nop
    }
  }
}
 800320a:	3734      	adds	r7, #52	; 0x34
 800320c:	46bd      	mov	sp, r7
 800320e:	bd90      	pop	{r4, r7, pc}

08003210 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <HAL_PCD_SetAddress+0x1a>
 8003226:	2302      	movs	r3, #2
 8003228:	e013      	b.n	8003252 <HAL_PCD_SetAddress+0x42>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	4611      	mov	r1, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f003 f9f3 	bl	800662e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	4608      	mov	r0, r1
 8003264:	4611      	mov	r1, r2
 8003266:	461a      	mov	r2, r3
 8003268:	4603      	mov	r3, r0
 800326a:	70fb      	strb	r3, [r7, #3]
 800326c:	460b      	mov	r3, r1
 800326e:	803b      	strh	r3, [r7, #0]
 8003270:	4613      	mov	r3, r2
 8003272:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800327c:	2b00      	cmp	r3, #0
 800327e:	da0f      	bge.n	80032a0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	f003 020f 	and.w	r2, r3, #15
 8003286:	4613      	mov	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	3338      	adds	r3, #56	; 0x38
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	4413      	add	r3, r2
 8003294:	3304      	adds	r3, #4
 8003296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	705a      	strb	r2, [r3, #1]
 800329e:	e00f      	b.n	80032c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	f003 020f 	and.w	r2, r3, #15
 80032a6:	4613      	mov	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4413      	add	r3, r2
 80032b6:	3304      	adds	r3, #4
 80032b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80032cc:	883a      	ldrh	r2, [r7, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	78ba      	ldrb	r2, [r7, #2]
 80032d6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	785b      	ldrb	r3, [r3, #1]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d004      	beq.n	80032ea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032ea:	78bb      	ldrb	r3, [r7, #2]
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d102      	bne.n	80032f6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_PCD_EP_Open+0xaa>
 8003300:	2302      	movs	r3, #2
 8003302:	e00e      	b.n	8003322 <HAL_PCD_EP_Open+0xc8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68f9      	ldr	r1, [r7, #12]
 8003312:	4618      	mov	r0, r3
 8003314:	f002 fb5e 	bl	80059d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003320:	7afb      	ldrb	r3, [r7, #11]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	460b      	mov	r3, r1
 8003334:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003336:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800333a:	2b00      	cmp	r3, #0
 800333c:	da0f      	bge.n	800335e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800333e:	78fb      	ldrb	r3, [r7, #3]
 8003340:	f003 020f 	and.w	r2, r3, #15
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	3338      	adds	r3, #56	; 0x38
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	3304      	adds	r3, #4
 8003354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2201      	movs	r2, #1
 800335a:	705a      	strb	r2, [r3, #1]
 800335c:	e00f      	b.n	800337e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	f003 020f 	and.w	r2, r3, #15
 8003364:	4613      	mov	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	4413      	add	r3, r2
 8003374:	3304      	adds	r3, #4
 8003376:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800337e:	78fb      	ldrb	r3, [r7, #3]
 8003380:	f003 030f 	and.w	r3, r3, #15
 8003384:	b2da      	uxtb	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <HAL_PCD_EP_Close+0x6e>
 8003394:	2302      	movs	r3, #2
 8003396:	e00e      	b.n	80033b6 <HAL_PCD_EP_Close+0x8c>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68f9      	ldr	r1, [r7, #12]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f002 fb9c 	bl	8005ae4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b086      	sub	sp, #24
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	607a      	str	r2, [r7, #4]
 80033c8:	603b      	str	r3, [r7, #0]
 80033ca:	460b      	mov	r3, r1
 80033cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033ce:	7afb      	ldrb	r3, [r7, #11]
 80033d0:	f003 020f 	and.w	r2, r3, #15
 80033d4:	4613      	mov	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	3304      	adds	r3, #4
 80033e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2200      	movs	r2, #0
 80033f8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2200      	movs	r2, #0
 80033fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003400:	7afb      	ldrb	r3, [r7, #11]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	b2da      	uxtb	r2, r3
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d102      	bne.n	800341a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800341a:	7afb      	ldrb	r3, [r7, #11]
 800341c:	f003 030f 	and.w	r3, r3, #15
 8003420:	2b00      	cmp	r3, #0
 8003422:	d109      	bne.n	8003438 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6818      	ldr	r0, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	461a      	mov	r2, r3
 8003430:	6979      	ldr	r1, [r7, #20]
 8003432:	f002 fe77 	bl	8006124 <USB_EP0StartXfer>
 8003436:	e008      	b.n	800344a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	461a      	mov	r2, r3
 8003444:	6979      	ldr	r1, [r7, #20]
 8003446:	f002 fc29 	bl	8005c9c <USB_EPStartXfer>
  }

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	460b      	mov	r3, r1
 800345e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	f003 020f 	and.w	r2, r3, #15
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003476:	681b      	ldr	r3, [r3, #0]
}
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	460b      	mov	r3, r1
 8003492:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003494:	7afb      	ldrb	r3, [r7, #11]
 8003496:	f003 020f 	and.w	r2, r3, #15
 800349a:	4613      	mov	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	3338      	adds	r3, #56	; 0x38
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4413      	add	r3, r2
 80034a8:	3304      	adds	r3, #4
 80034aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2200      	movs	r2, #0
 80034bc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2201      	movs	r2, #1
 80034c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034c4:	7afb      	ldrb	r3, [r7, #11]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d102      	bne.n	80034de <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034de:	7afb      	ldrb	r3, [r7, #11]
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d109      	bne.n	80034fc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	6979      	ldr	r1, [r7, #20]
 80034f6:	f002 fe15 	bl	8006124 <USB_EP0StartXfer>
 80034fa:	e008      	b.n	800350e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	6979      	ldr	r1, [r7, #20]
 800350a:	f002 fbc7 	bl	8005c9c <USB_EPStartXfer>
  }

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	f003 020f 	and.w	r2, r3, #15
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	429a      	cmp	r2, r3
 8003530:	d901      	bls.n	8003536 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e050      	b.n	80035d8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003536:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800353a:	2b00      	cmp	r3, #0
 800353c:	da0f      	bge.n	800355e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800353e:	78fb      	ldrb	r3, [r7, #3]
 8003540:	f003 020f 	and.w	r2, r3, #15
 8003544:	4613      	mov	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	1a9b      	subs	r3, r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	3338      	adds	r3, #56	; 0x38
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	3304      	adds	r3, #4
 8003554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	705a      	strb	r2, [r3, #1]
 800355c:	e00d      	b.n	800357a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	4613      	mov	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	4413      	add	r3, r2
 8003570:	3304      	adds	r3, #4
 8003572:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003580:	78fb      	ldrb	r3, [r7, #3]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	b2da      	uxtb	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_PCD_EP_SetStall+0x82>
 8003596:	2302      	movs	r3, #2
 8003598:	e01e      	b.n	80035d8 <HAL_PCD_EP_SetStall+0xc0>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68f9      	ldr	r1, [r7, #12]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f002 ff6c 	bl	8006486 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10a      	bne.n	80035ce <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6818      	ldr	r0, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	b2d9      	uxtb	r1, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035c8:	461a      	mov	r2, r3
 80035ca:	f003 f95d 	bl	8006888 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	f003 020f 	and.w	r2, r3, #15
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d901      	bls.n	80035fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e042      	b.n	8003684 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003602:	2b00      	cmp	r3, #0
 8003604:	da0f      	bge.n	8003626 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003606:	78fb      	ldrb	r3, [r7, #3]
 8003608:	f003 020f 	and.w	r2, r3, #15
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	3338      	adds	r3, #56	; 0x38
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	3304      	adds	r3, #4
 800361c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2201      	movs	r2, #1
 8003622:	705a      	strb	r2, [r3, #1]
 8003624:	e00f      	b.n	8003646 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003626:	78fb      	ldrb	r3, [r7, #3]
 8003628:	f003 020f 	and.w	r2, r3, #15
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	4413      	add	r3, r2
 800363c:	3304      	adds	r3, #4
 800363e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	b2da      	uxtb	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_PCD_EP_ClrStall+0x86>
 8003662:	2302      	movs	r3, #2
 8003664:	e00e      	b.n	8003684 <HAL_PCD_EP_ClrStall+0xa4>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68f9      	ldr	r1, [r7, #12]
 8003674:	4618      	mov	r0, r3
 8003676:	f002 ff74 	bl	8006562 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	; 0x28
 8003690:	af02      	add	r7, sp, #8
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	4613      	mov	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	1a9b      	subs	r3, r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	3338      	adds	r3, #56	; 0x38
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	4413      	add	r3, r2
 80036b0:	3304      	adds	r3, #4
 80036b2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	699a      	ldr	r2, [r3, #24]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d901      	bls.n	80036c4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e06c      	b.n	800379e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	695a      	ldr	r2, [r3, #20]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d902      	bls.n	80036e0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	3303      	adds	r3, #3
 80036e4:	089b      	lsrs	r3, r3, #2
 80036e6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036e8:	e02b      	b.n	8003742 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	695a      	ldr	r2, [r3, #20]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d902      	bls.n	8003706 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	3303      	adds	r3, #3
 800370a:	089b      	lsrs	r3, r3, #2
 800370c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	68d9      	ldr	r1, [r3, #12]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	b2da      	uxtb	r2, r3
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800371e:	b2db      	uxtb	r3, r3
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	4603      	mov	r3, r0
 8003724:	6978      	ldr	r0, [r7, #20]
 8003726:	f002 fe50 	bl	80063ca <USB_WritePacket>

    ep->xfer_buff  += len;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	441a      	add	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	441a      	add	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	015a      	lsls	r2, r3, #5
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	4413      	add	r3, r2
 800374a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	b29b      	uxth	r3, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	429a      	cmp	r2, r3
 8003756:	d809      	bhi.n	800376c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	699a      	ldr	r2, [r3, #24]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003760:	429a      	cmp	r2, r3
 8003762:	d203      	bcs.n	800376c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1be      	bne.n	80036ea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	695a      	ldr	r2, [r3, #20]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	429a      	cmp	r2, r3
 8003776:	d811      	bhi.n	800379c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	2201      	movs	r2, #1
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800378c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	43db      	mvns	r3, r3
 8003792:	6939      	ldr	r1, [r7, #16]
 8003794:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003798:	4013      	ands	r3, r2
 800379a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3720      	adds	r7, #32
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	333c      	adds	r3, #60	; 0x3c
 80037c0:	3304      	adds	r3, #4
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	f040 80a0 	bne.w	8003920 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d015      	beq.n	8003816 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4a72      	ldr	r2, [pc, #456]	; (80039b8 <PCD_EP_OutXfrComplete_int+0x210>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	f240 80dd 	bls.w	80039ae <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 80d7 	beq.w	80039ae <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800380c:	461a      	mov	r2, r3
 800380e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003812:	6093      	str	r3, [r2, #8]
 8003814:	e0cb      	b.n	80039ae <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	2b00      	cmp	r3, #0
 800381e:	d009      	beq.n	8003834 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4413      	add	r3, r2
 8003828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800382c:	461a      	mov	r2, r3
 800382e:	2320      	movs	r3, #32
 8003830:	6093      	str	r3, [r2, #8]
 8003832:	e0bc      	b.n	80039ae <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800383a:	2b00      	cmp	r3, #0
 800383c:	f040 80b7 	bne.w	80039ae <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4a5d      	ldr	r2, [pc, #372]	; (80039b8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d90f      	bls.n	8003868 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385e:	461a      	mov	r2, r3
 8003860:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003864:	6093      	str	r3, [r2, #8]
 8003866:	e0a2      	b.n	80039ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	1a9b      	subs	r3, r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800387a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	0159      	lsls	r1, r3, #5
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	440b      	add	r3, r1
 8003884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800388e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4403      	add	r3, r0
 800389e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80038a2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	4613      	mov	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	1a9b      	subs	r3, r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038b6:	6819      	ldr	r1, [r3, #0]
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	4613      	mov	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	1a9b      	subs	r3, r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4403      	add	r3, r0
 80038c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4419      	add	r1, r3
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	4613      	mov	r3, r2
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	1a9b      	subs	r3, r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4403      	add	r3, r0
 80038dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038e0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d114      	bne.n	8003912 <PCD_EP_OutXfrComplete_int+0x16a>
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	4613      	mov	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	1a9b      	subs	r3, r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d108      	bne.n	8003912 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800390a:	461a      	mov	r2, r3
 800390c:	2101      	movs	r1, #1
 800390e:	f002 ffbb 	bl	8006888 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	4619      	mov	r1, r3
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f004 fee1 	bl	80086e0 <HAL_PCD_DataOutStageCallback>
 800391e:	e046      	b.n	80039ae <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4a26      	ldr	r2, [pc, #152]	; (80039bc <PCD_EP_OutXfrComplete_int+0x214>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d124      	bne.n	8003972 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393e:	461a      	mov	r2, r3
 8003940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003944:	6093      	str	r3, [r2, #8]
 8003946:	e032      	b.n	80039ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b00      	cmp	r3, #0
 8003950:	d008      	beq.n	8003964 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4413      	add	r3, r2
 800395a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395e:	461a      	mov	r2, r3
 8003960:	2320      	movs	r3, #32
 8003962:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	b2db      	uxtb	r3, r3
 8003968:	4619      	mov	r1, r3
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f004 feb8 	bl	80086e0 <HAL_PCD_DataOutStageCallback>
 8003970:	e01d      	b.n	80039ae <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d114      	bne.n	80039a2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	4613      	mov	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d108      	bne.n	80039a2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6818      	ldr	r0, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800399a:	461a      	mov	r2, r3
 800399c:	2100      	movs	r1, #0
 800399e:	f002 ff73 	bl	8006888 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	4619      	mov	r1, r3
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f004 fe99 	bl	80086e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	4f54300a 	.word	0x4f54300a
 80039bc:	4f54310a 	.word	0x4f54310a

080039c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	333c      	adds	r3, #60	; 0x3c
 80039d8:	3304      	adds	r3, #4
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4a15      	ldr	r2, [pc, #84]	; (8003a48 <PCD_EP_OutSetupPacket_int+0x88>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d90e      	bls.n	8003a14 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d009      	beq.n	8003a14 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a12:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f004 fe51 	bl	80086bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d90c      	bls.n	8003a3c <PCD_EP_OutSetupPacket_int+0x7c>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d108      	bne.n	8003a3c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a34:	461a      	mov	r2, r3
 8003a36:	2101      	movs	r1, #1
 8003a38:	f002 ff26 	bl	8006888 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	4f54300a 	.word	0x4f54300a

08003a4c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	70fb      	strb	r3, [r7, #3]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d107      	bne.n	8003a7a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a6a:	883b      	ldrh	r3, [r7, #0]
 8003a6c:	0419      	lsls	r1, r3, #16
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28
 8003a78:	e028      	b.n	8003acc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	0c1b      	lsrs	r3, r3, #16
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	4413      	add	r3, r2
 8003a86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a88:	2300      	movs	r3, #0
 8003a8a:	73fb      	strb	r3, [r7, #15]
 8003a8c:	e00d      	b.n	8003aaa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	3340      	adds	r3, #64	; 0x40
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	0c1b      	lsrs	r3, r3, #16
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	73fb      	strb	r3, [r7, #15]
 8003aaa:	7bfa      	ldrb	r2, [r7, #15]
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d3ec      	bcc.n	8003a8e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ab4:	883b      	ldrh	r3, [r7, #0]
 8003ab6:	0418      	lsls	r0, r3, #16
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6819      	ldr	r1, [r3, #0]
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	4302      	orrs	r2, r0
 8003ac4:	3340      	adds	r3, #64	; 0x40
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	887a      	ldrh	r2, [r7, #2]
 8003aec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e25b      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d075      	beq.n	8003c1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b32:	4ba3      	ldr	r3, [pc, #652]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d00c      	beq.n	8003b58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b3e:	4ba0      	ldr	r3, [pc, #640]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d112      	bne.n	8003b70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b4a:	4b9d      	ldr	r3, [pc, #628]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b56:	d10b      	bne.n	8003b70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b58:	4b99      	ldr	r3, [pc, #612]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d05b      	beq.n	8003c1c <HAL_RCC_OscConfig+0x108>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d157      	bne.n	8003c1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e236      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b78:	d106      	bne.n	8003b88 <HAL_RCC_OscConfig+0x74>
 8003b7a:	4b91      	ldr	r3, [pc, #580]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a90      	ldr	r2, [pc, #576]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	e01d      	b.n	8003bc4 <HAL_RCC_OscConfig+0xb0>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b90:	d10c      	bne.n	8003bac <HAL_RCC_OscConfig+0x98>
 8003b92:	4b8b      	ldr	r3, [pc, #556]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a8a      	ldr	r2, [pc, #552]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	4b88      	ldr	r3, [pc, #544]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a87      	ldr	r2, [pc, #540]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	e00b      	b.n	8003bc4 <HAL_RCC_OscConfig+0xb0>
 8003bac:	4b84      	ldr	r3, [pc, #528]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a83      	ldr	r2, [pc, #524]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb6:	6013      	str	r3, [r2, #0]
 8003bb8:	4b81      	ldr	r3, [pc, #516]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a80      	ldr	r2, [pc, #512]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d013      	beq.n	8003bf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bcc:	f7fd ff6e 	bl	8001aac <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bd4:	f7fd ff6a 	bl	8001aac <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b64      	cmp	r3, #100	; 0x64
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e1fb      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be6:	4b76      	ldr	r3, [pc, #472]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0xc0>
 8003bf2:	e014      	b.n	8003c1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf4:	f7fd ff5a 	bl	8001aac <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bfc:	f7fd ff56 	bl	8001aac <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b64      	cmp	r3, #100	; 0x64
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e1e7      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c0e:	4b6c      	ldr	r3, [pc, #432]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCC_OscConfig+0xe8>
 8003c1a:	e000      	b.n	8003c1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d063      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c2a:	4b65      	ldr	r3, [pc, #404]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 030c 	and.w	r3, r3, #12
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00b      	beq.n	8003c4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c36:	4b62      	ldr	r3, [pc, #392]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c3e:	2b08      	cmp	r3, #8
 8003c40:	d11c      	bne.n	8003c7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c42:	4b5f      	ldr	r3, [pc, #380]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d116      	bne.n	8003c7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c4e:	4b5c      	ldr	r3, [pc, #368]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d005      	beq.n	8003c66 <HAL_RCC_OscConfig+0x152>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d001      	beq.n	8003c66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e1bb      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c66:	4b56      	ldr	r3, [pc, #344]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	4952      	ldr	r1, [pc, #328]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7a:	e03a      	b.n	8003cf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d020      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c84:	4b4f      	ldr	r3, [pc, #316]	; (8003dc4 <HAL_RCC_OscConfig+0x2b0>)
 8003c86:	2201      	movs	r2, #1
 8003c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8a:	f7fd ff0f 	bl	8001aac <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c92:	f7fd ff0b 	bl	8001aac <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e19c      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca4:	4b46      	ldr	r3, [pc, #280]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0f0      	beq.n	8003c92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb0:	4b43      	ldr	r3, [pc, #268]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	4940      	ldr	r1, [pc, #256]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	600b      	str	r3, [r1, #0]
 8003cc4:	e015      	b.n	8003cf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cc6:	4b3f      	ldr	r3, [pc, #252]	; (8003dc4 <HAL_RCC_OscConfig+0x2b0>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ccc:	f7fd feee 	bl	8001aac <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cd4:	f7fd feea 	bl	8001aac <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e17b      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce6:	4b36      	ldr	r3, [pc, #216]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d030      	beq.n	8003d60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d016      	beq.n	8003d34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d06:	4b30      	ldr	r3, [pc, #192]	; (8003dc8 <HAL_RCC_OscConfig+0x2b4>)
 8003d08:	2201      	movs	r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0c:	f7fd fece 	bl	8001aac <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d14:	f7fd feca 	bl	8001aac <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e15b      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d26:	4b26      	ldr	r3, [pc, #152]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0x200>
 8003d32:	e015      	b.n	8003d60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d34:	4b24      	ldr	r3, [pc, #144]	; (8003dc8 <HAL_RCC_OscConfig+0x2b4>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3a:	f7fd feb7 	bl	8001aac <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d42:	f7fd feb3 	bl	8001aac <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e144      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d54:	4b1a      	ldr	r3, [pc, #104]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f0      	bne.n	8003d42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 80a0 	beq.w	8003eae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d72:	4b13      	ldr	r3, [pc, #76]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10f      	bne.n	8003d9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60bb      	str	r3, [r7, #8]
 8003d82:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	4a0e      	ldr	r2, [pc, #56]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d8e:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d96:	60bb      	str	r3, [r7, #8]
 8003d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d9e:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <HAL_RCC_OscConfig+0x2b8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d121      	bne.n	8003dee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003daa:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <HAL_RCC_OscConfig+0x2b8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a07      	ldr	r2, [pc, #28]	; (8003dcc <HAL_RCC_OscConfig+0x2b8>)
 8003db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003db6:	f7fd fe79 	bl	8001aac <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dbc:	e011      	b.n	8003de2 <HAL_RCC_OscConfig+0x2ce>
 8003dbe:	bf00      	nop
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	42470000 	.word	0x42470000
 8003dc8:	42470e80 	.word	0x42470e80
 8003dcc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd0:	f7fd fe6c 	bl	8001aac <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e0fd      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de2:	4b81      	ldr	r3, [pc, #516]	; (8003fe8 <HAL_RCC_OscConfig+0x4d4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d106      	bne.n	8003e04 <HAL_RCC_OscConfig+0x2f0>
 8003df6:	4b7d      	ldr	r3, [pc, #500]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfa:	4a7c      	ldr	r2, [pc, #496]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	6713      	str	r3, [r2, #112]	; 0x70
 8003e02:	e01c      	b.n	8003e3e <HAL_RCC_OscConfig+0x32a>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b05      	cmp	r3, #5
 8003e0a:	d10c      	bne.n	8003e26 <HAL_RCC_OscConfig+0x312>
 8003e0c:	4b77      	ldr	r3, [pc, #476]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e10:	4a76      	ldr	r2, [pc, #472]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003e12:	f043 0304 	orr.w	r3, r3, #4
 8003e16:	6713      	str	r3, [r2, #112]	; 0x70
 8003e18:	4b74      	ldr	r3, [pc, #464]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	4a73      	ldr	r2, [pc, #460]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	6713      	str	r3, [r2, #112]	; 0x70
 8003e24:	e00b      	b.n	8003e3e <HAL_RCC_OscConfig+0x32a>
 8003e26:	4b71      	ldr	r3, [pc, #452]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2a:	4a70      	ldr	r2, [pc, #448]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	6713      	str	r3, [r2, #112]	; 0x70
 8003e32:	4b6e      	ldr	r3, [pc, #440]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e36:	4a6d      	ldr	r2, [pc, #436]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003e38:	f023 0304 	bic.w	r3, r3, #4
 8003e3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d015      	beq.n	8003e72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e46:	f7fd fe31 	bl	8001aac <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e4c:	e00a      	b.n	8003e64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e4e:	f7fd fe2d 	bl	8001aac <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e0bc      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e64:	4b61      	ldr	r3, [pc, #388]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0ee      	beq.n	8003e4e <HAL_RCC_OscConfig+0x33a>
 8003e70:	e014      	b.n	8003e9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e72:	f7fd fe1b 	bl	8001aac <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e78:	e00a      	b.n	8003e90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7fd fe17 	bl	8001aac <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e0a6      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e90:	4b56      	ldr	r3, [pc, #344]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1ee      	bne.n	8003e7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e9c:	7dfb      	ldrb	r3, [r7, #23]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d105      	bne.n	8003eae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea2:	4b52      	ldr	r3, [pc, #328]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	4a51      	ldr	r2, [pc, #324]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 8092 	beq.w	8003fdc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eb8:	4b4c      	ldr	r3, [pc, #304]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 030c 	and.w	r3, r3, #12
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d05c      	beq.n	8003f7e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d141      	bne.n	8003f50 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ecc:	4b48      	ldr	r3, [pc, #288]	; (8003ff0 <HAL_RCC_OscConfig+0x4dc>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed2:	f7fd fdeb 	bl	8001aac <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eda:	f7fd fde7 	bl	8001aac <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e078      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eec:	4b3f      	ldr	r3, [pc, #252]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f0      	bne.n	8003eda <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69da      	ldr	r2, [r3, #28]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	019b      	lsls	r3, r3, #6
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	3b01      	subs	r3, #1
 8003f12:	041b      	lsls	r3, r3, #16
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	061b      	lsls	r3, r3, #24
 8003f1c:	4933      	ldr	r1, [pc, #204]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f22:	4b33      	ldr	r3, [pc, #204]	; (8003ff0 <HAL_RCC_OscConfig+0x4dc>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f28:	f7fd fdc0 	bl	8001aac <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f30:	f7fd fdbc 	bl	8001aac <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e04d      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f42:	4b2a      	ldr	r3, [pc, #168]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCC_OscConfig+0x41c>
 8003f4e:	e045      	b.n	8003fdc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f50:	4b27      	ldr	r3, [pc, #156]	; (8003ff0 <HAL_RCC_OscConfig+0x4dc>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f56:	f7fd fda9 	bl	8001aac <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5e:	f7fd fda5 	bl	8001aac <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e036      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f70:	4b1e      	ldr	r3, [pc, #120]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1f0      	bne.n	8003f5e <HAL_RCC_OscConfig+0x44a>
 8003f7c:	e02e      	b.n	8003fdc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e029      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f8a:	4b18      	ldr	r3, [pc, #96]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d11c      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d115      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d10d      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d106      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d001      	beq.n	8003fdc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40007000 	.word	0x40007000
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	42470060 	.word	0x42470060

08003ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0cc      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004008:	4b68      	ldr	r3, [pc, #416]	; (80041ac <HAL_RCC_ClockConfig+0x1b8>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 030f 	and.w	r3, r3, #15
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d90c      	bls.n	8004030 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004016:	4b65      	ldr	r3, [pc, #404]	; (80041ac <HAL_RCC_ClockConfig+0x1b8>)
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800401e:	4b63      	ldr	r3, [pc, #396]	; (80041ac <HAL_RCC_ClockConfig+0x1b8>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	429a      	cmp	r2, r3
 800402a:	d001      	beq.n	8004030 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e0b8      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d020      	beq.n	800407e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004048:	4b59      	ldr	r3, [pc, #356]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	4a58      	ldr	r2, [pc, #352]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004052:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004060:	4b53      	ldr	r3, [pc, #332]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	4a52      	ldr	r2, [pc, #328]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800406a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800406c:	4b50      	ldr	r3, [pc, #320]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	494d      	ldr	r1, [pc, #308]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	4313      	orrs	r3, r2
 800407c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d044      	beq.n	8004114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d107      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004092:	4b47      	ldr	r3, [pc, #284]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d119      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e07f      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d003      	beq.n	80040b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d107      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b2:	4b3f      	ldr	r3, [pc, #252]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d109      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e06f      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c2:	4b3b      	ldr	r3, [pc, #236]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e067      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040d2:	4b37      	ldr	r3, [pc, #220]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f023 0203 	bic.w	r2, r3, #3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	4934      	ldr	r1, [pc, #208]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040e4:	f7fd fce2 	bl	8001aac <HAL_GetTick>
 80040e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ea:	e00a      	b.n	8004102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ec:	f7fd fcde 	bl	8001aac <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e04f      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004102:	4b2b      	ldr	r3, [pc, #172]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 020c 	and.w	r2, r3, #12
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	429a      	cmp	r2, r3
 8004112:	d1eb      	bne.n	80040ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004114:	4b25      	ldr	r3, [pc, #148]	; (80041ac <HAL_RCC_ClockConfig+0x1b8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d20c      	bcs.n	800413c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004122:	4b22      	ldr	r3, [pc, #136]	; (80041ac <HAL_RCC_ClockConfig+0x1b8>)
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800412a:	4b20      	ldr	r3, [pc, #128]	; (80041ac <HAL_RCC_ClockConfig+0x1b8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d001      	beq.n	800413c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e032      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004148:	4b19      	ldr	r3, [pc, #100]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	4916      	ldr	r1, [pc, #88]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	4313      	orrs	r3, r2
 8004158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b00      	cmp	r3, #0
 8004164:	d009      	beq.n	800417a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004166:	4b12      	ldr	r3, [pc, #72]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	490e      	ldr	r1, [pc, #56]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	4313      	orrs	r3, r2
 8004178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800417a:	f000 f821 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 800417e:	4602      	mov	r2, r0
 8004180:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	091b      	lsrs	r3, r3, #4
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	490a      	ldr	r1, [pc, #40]	; (80041b4 <HAL_RCC_ClockConfig+0x1c0>)
 800418c:	5ccb      	ldrb	r3, [r1, r3]
 800418e:	fa22 f303 	lsr.w	r3, r2, r3
 8004192:	4a09      	ldr	r2, [pc, #36]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004196:	4b09      	ldr	r3, [pc, #36]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f7fd fc42 	bl	8001a24 <HAL_InitTick>

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40023c00 	.word	0x40023c00
 80041b0:	40023800 	.word	0x40023800
 80041b4:	0800ba7c 	.word	0x0800ba7c
 80041b8:	20000000 	.word	0x20000000
 80041bc:	20000004 	.word	0x20000004

080041c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	607b      	str	r3, [r7, #4]
 80041cc:	2300      	movs	r3, #0
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	2300      	movs	r3, #0
 80041d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041d8:	4b67      	ldr	r3, [pc, #412]	; (8004378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 030c 	and.w	r3, r3, #12
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d00d      	beq.n	8004200 <HAL_RCC_GetSysClockFreq+0x40>
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	f200 80bd 	bhi.w	8004364 <HAL_RCC_GetSysClockFreq+0x1a4>
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <HAL_RCC_GetSysClockFreq+0x34>
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d003      	beq.n	80041fa <HAL_RCC_GetSysClockFreq+0x3a>
 80041f2:	e0b7      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041f4:	4b61      	ldr	r3, [pc, #388]	; (800437c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80041f6:	60bb      	str	r3, [r7, #8]
       break;
 80041f8:	e0b7      	b.n	800436a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041fa:	4b61      	ldr	r3, [pc, #388]	; (8004380 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80041fc:	60bb      	str	r3, [r7, #8]
      break;
 80041fe:	e0b4      	b.n	800436a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004200:	4b5d      	ldr	r3, [pc, #372]	; (8004378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004208:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800420a:	4b5b      	ldr	r3, [pc, #364]	; (8004378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d04d      	beq.n	80042b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004216:	4b58      	ldr	r3, [pc, #352]	; (8004378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	099b      	lsrs	r3, r3, #6
 800421c:	461a      	mov	r2, r3
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004226:	f04f 0100 	mov.w	r1, #0
 800422a:	ea02 0800 	and.w	r8, r2, r0
 800422e:	ea03 0901 	and.w	r9, r3, r1
 8004232:	4640      	mov	r0, r8
 8004234:	4649      	mov	r1, r9
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	014b      	lsls	r3, r1, #5
 8004240:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004244:	0142      	lsls	r2, r0, #5
 8004246:	4610      	mov	r0, r2
 8004248:	4619      	mov	r1, r3
 800424a:	ebb0 0008 	subs.w	r0, r0, r8
 800424e:	eb61 0109 	sbc.w	r1, r1, r9
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	f04f 0300 	mov.w	r3, #0
 800425a:	018b      	lsls	r3, r1, #6
 800425c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004260:	0182      	lsls	r2, r0, #6
 8004262:	1a12      	subs	r2, r2, r0
 8004264:	eb63 0301 	sbc.w	r3, r3, r1
 8004268:	f04f 0000 	mov.w	r0, #0
 800426c:	f04f 0100 	mov.w	r1, #0
 8004270:	00d9      	lsls	r1, r3, #3
 8004272:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004276:	00d0      	lsls	r0, r2, #3
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	eb12 0208 	adds.w	r2, r2, r8
 8004280:	eb43 0309 	adc.w	r3, r3, r9
 8004284:	f04f 0000 	mov.w	r0, #0
 8004288:	f04f 0100 	mov.w	r1, #0
 800428c:	0259      	lsls	r1, r3, #9
 800428e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004292:	0250      	lsls	r0, r2, #9
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4610      	mov	r0, r2
 800429a:	4619      	mov	r1, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	461a      	mov	r2, r3
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	f7fc fc88 	bl	8000bb8 <__aeabi_uldivmod>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4613      	mov	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	e04a      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042b2:	4b31      	ldr	r3, [pc, #196]	; (8004378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	099b      	lsrs	r3, r3, #6
 80042b8:	461a      	mov	r2, r3
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042c2:	f04f 0100 	mov.w	r1, #0
 80042c6:	ea02 0400 	and.w	r4, r2, r0
 80042ca:	ea03 0501 	and.w	r5, r3, r1
 80042ce:	4620      	mov	r0, r4
 80042d0:	4629      	mov	r1, r5
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	014b      	lsls	r3, r1, #5
 80042dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042e0:	0142      	lsls	r2, r0, #5
 80042e2:	4610      	mov	r0, r2
 80042e4:	4619      	mov	r1, r3
 80042e6:	1b00      	subs	r0, r0, r4
 80042e8:	eb61 0105 	sbc.w	r1, r1, r5
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	018b      	lsls	r3, r1, #6
 80042f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042fa:	0182      	lsls	r2, r0, #6
 80042fc:	1a12      	subs	r2, r2, r0
 80042fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004302:	f04f 0000 	mov.w	r0, #0
 8004306:	f04f 0100 	mov.w	r1, #0
 800430a:	00d9      	lsls	r1, r3, #3
 800430c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004310:	00d0      	lsls	r0, r2, #3
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	1912      	adds	r2, r2, r4
 8004318:	eb45 0303 	adc.w	r3, r5, r3
 800431c:	f04f 0000 	mov.w	r0, #0
 8004320:	f04f 0100 	mov.w	r1, #0
 8004324:	0299      	lsls	r1, r3, #10
 8004326:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800432a:	0290      	lsls	r0, r2, #10
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4610      	mov	r0, r2
 8004332:	4619      	mov	r1, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	461a      	mov	r2, r3
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	f7fc fc3c 	bl	8000bb8 <__aeabi_uldivmod>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4613      	mov	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004348:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	0c1b      	lsrs	r3, r3, #16
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	3301      	adds	r3, #1
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004360:	60bb      	str	r3, [r7, #8]
      break;
 8004362:	e002      	b.n	800436a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004364:	4b05      	ldr	r3, [pc, #20]	; (800437c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004366:	60bb      	str	r3, [r7, #8]
      break;
 8004368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800436a:	68bb      	ldr	r3, [r7, #8]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004376:	bf00      	nop
 8004378:	40023800 	.word	0x40023800
 800437c:	00f42400 	.word	0x00f42400
 8004380:	007a1200 	.word	0x007a1200

08004384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004388:	4b03      	ldr	r3, [pc, #12]	; (8004398 <HAL_RCC_GetHCLKFreq+0x14>)
 800438a:	681b      	ldr	r3, [r3, #0]
}
 800438c:	4618      	mov	r0, r3
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	20000000 	.word	0x20000000

0800439c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043a0:	f7ff fff0 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 80043a4:	4602      	mov	r2, r0
 80043a6:	4b05      	ldr	r3, [pc, #20]	; (80043bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	0a9b      	lsrs	r3, r3, #10
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	4903      	ldr	r1, [pc, #12]	; (80043c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043b2:	5ccb      	ldrb	r3, [r1, r3]
 80043b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40023800 	.word	0x40023800
 80043c0:	0800ba8c 	.word	0x0800ba8c

080043c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043c8:	f7ff ffdc 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 80043cc:	4602      	mov	r2, r0
 80043ce:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	0b5b      	lsrs	r3, r3, #13
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	4903      	ldr	r1, [pc, #12]	; (80043e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043da:	5ccb      	ldrb	r3, [r1, r3]
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40023800 	.word	0x40023800
 80043e8:	0800ba8c 	.word	0x0800ba8c

080043ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e056      	b.n	80044ac <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d106      	bne.n	800441e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7fd f89f 	bl	800155c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2202      	movs	r2, #2
 8004422:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004434:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	ea42 0103 	orr.w	r1, r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	0c1b      	lsrs	r3, r3, #16
 800447c:	f003 0104 	and.w	r1, r3, #4
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69da      	ldr	r2, [r3, #28]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800449a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e01d      	b.n	8004502 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7fd f886 	bl	80015ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3304      	adds	r3, #4
 80044f0:	4619      	mov	r1, r3
 80044f2:	4610      	mov	r0, r2
 80044f4:	f000 f8d0 	bl	8004698 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800451e:	2b01      	cmp	r3, #1
 8004520:	d101      	bne.n	8004526 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004522:	2302      	movs	r3, #2
 8004524:	e0b4      	b.n	8004690 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2202      	movs	r2, #2
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b0c      	cmp	r3, #12
 800453a:	f200 809f 	bhi.w	800467c <HAL_TIM_PWM_ConfigChannel+0x170>
 800453e:	a201      	add	r2, pc, #4	; (adr r2, 8004544 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004544:	08004579 	.word	0x08004579
 8004548:	0800467d 	.word	0x0800467d
 800454c:	0800467d 	.word	0x0800467d
 8004550:	0800467d 	.word	0x0800467d
 8004554:	080045b9 	.word	0x080045b9
 8004558:	0800467d 	.word	0x0800467d
 800455c:	0800467d 	.word	0x0800467d
 8004560:	0800467d 	.word	0x0800467d
 8004564:	080045fb 	.word	0x080045fb
 8004568:	0800467d 	.word	0x0800467d
 800456c:	0800467d 	.word	0x0800467d
 8004570:	0800467d 	.word	0x0800467d
 8004574:	0800463b 	.word	0x0800463b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68b9      	ldr	r1, [r7, #8]
 800457e:	4618      	mov	r0, r3
 8004580:	f000 f90a 	bl	8004798 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0208 	orr.w	r2, r2, #8
 8004592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699a      	ldr	r2, [r3, #24]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0204 	bic.w	r2, r2, #4
 80045a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6999      	ldr	r1, [r3, #24]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	691a      	ldr	r2, [r3, #16]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	619a      	str	r2, [r3, #24]
      break;
 80045b6:	e062      	b.n	800467e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 f950 	bl	8004864 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699a      	ldr	r2, [r3, #24]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6999      	ldr	r1, [r3, #24]
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	021a      	lsls	r2, r3, #8
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	619a      	str	r2, [r3, #24]
      break;
 80045f8:	e041      	b.n	800467e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68b9      	ldr	r1, [r7, #8]
 8004600:	4618      	mov	r0, r3
 8004602:	f000 f99b 	bl	800493c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69da      	ldr	r2, [r3, #28]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 0208 	orr.w	r2, r2, #8
 8004614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	69da      	ldr	r2, [r3, #28]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0204 	bic.w	r2, r2, #4
 8004624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69d9      	ldr	r1, [r3, #28]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	61da      	str	r2, [r3, #28]
      break;
 8004638:	e021      	b.n	800467e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68b9      	ldr	r1, [r7, #8]
 8004640:	4618      	mov	r0, r3
 8004642:	f000 f9e5 	bl	8004a10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69da      	ldr	r2, [r3, #28]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	69da      	ldr	r2, [r3, #28]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69d9      	ldr	r1, [r3, #28]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	021a      	lsls	r2, r3, #8
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	61da      	str	r2, [r3, #28]
      break;
 800467a:	e000      	b.n	800467e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800467c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a34      	ldr	r2, [pc, #208]	; (800477c <TIM_Base_SetConfig+0xe4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00f      	beq.n	80046d0 <TIM_Base_SetConfig+0x38>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b6:	d00b      	beq.n	80046d0 <TIM_Base_SetConfig+0x38>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a31      	ldr	r2, [pc, #196]	; (8004780 <TIM_Base_SetConfig+0xe8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d007      	beq.n	80046d0 <TIM_Base_SetConfig+0x38>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a30      	ldr	r2, [pc, #192]	; (8004784 <TIM_Base_SetConfig+0xec>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d003      	beq.n	80046d0 <TIM_Base_SetConfig+0x38>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a2f      	ldr	r2, [pc, #188]	; (8004788 <TIM_Base_SetConfig+0xf0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d108      	bne.n	80046e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a25      	ldr	r2, [pc, #148]	; (800477c <TIM_Base_SetConfig+0xe4>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d01b      	beq.n	8004722 <TIM_Base_SetConfig+0x8a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f0:	d017      	beq.n	8004722 <TIM_Base_SetConfig+0x8a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a22      	ldr	r2, [pc, #136]	; (8004780 <TIM_Base_SetConfig+0xe8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d013      	beq.n	8004722 <TIM_Base_SetConfig+0x8a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a21      	ldr	r2, [pc, #132]	; (8004784 <TIM_Base_SetConfig+0xec>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00f      	beq.n	8004722 <TIM_Base_SetConfig+0x8a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a20      	ldr	r2, [pc, #128]	; (8004788 <TIM_Base_SetConfig+0xf0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d00b      	beq.n	8004722 <TIM_Base_SetConfig+0x8a>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a1f      	ldr	r2, [pc, #124]	; (800478c <TIM_Base_SetConfig+0xf4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d007      	beq.n	8004722 <TIM_Base_SetConfig+0x8a>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a1e      	ldr	r2, [pc, #120]	; (8004790 <TIM_Base_SetConfig+0xf8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d003      	beq.n	8004722 <TIM_Base_SetConfig+0x8a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a1d      	ldr	r2, [pc, #116]	; (8004794 <TIM_Base_SetConfig+0xfc>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d108      	bne.n	8004734 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4313      	orrs	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a08      	ldr	r2, [pc, #32]	; (800477c <TIM_Base_SetConfig+0xe4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d103      	bne.n	8004768 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	615a      	str	r2, [r3, #20]
}
 800476e:	bf00      	nop
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40010000 	.word	0x40010000
 8004780:	40000400 	.word	0x40000400
 8004784:	40000800 	.word	0x40000800
 8004788:	40000c00 	.word	0x40000c00
 800478c:	40014000 	.word	0x40014000
 8004790:	40014400 	.word	0x40014400
 8004794:	40014800 	.word	0x40014800

08004798 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	f023 0201 	bic.w	r2, r3, #1
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 0303 	bic.w	r3, r3, #3
 80047ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f023 0302 	bic.w	r3, r3, #2
 80047e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a1c      	ldr	r2, [pc, #112]	; (8004860 <TIM_OC1_SetConfig+0xc8>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d10c      	bne.n	800480e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f023 0308 	bic.w	r3, r3, #8
 80047fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	4313      	orrs	r3, r2
 8004804:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f023 0304 	bic.w	r3, r3, #4
 800480c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a13      	ldr	r2, [pc, #76]	; (8004860 <TIM_OC1_SetConfig+0xc8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d111      	bne.n	800483a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800481c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	4313      	orrs	r3, r2
 800482e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4313      	orrs	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	621a      	str	r2, [r3, #32]
}
 8004854:	bf00      	nop
 8004856:	371c      	adds	r7, #28
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	40010000 	.word	0x40010000

08004864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	f023 0210 	bic.w	r2, r3, #16
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800489a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	021b      	lsls	r3, r3, #8
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f023 0320 	bic.w	r3, r3, #32
 80048ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a1e      	ldr	r2, [pc, #120]	; (8004938 <TIM_OC2_SetConfig+0xd4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d10d      	bne.n	80048e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a15      	ldr	r2, [pc, #84]	; (8004938 <TIM_OC2_SetConfig+0xd4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d113      	bne.n	8004910 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	621a      	str	r2, [r3, #32]
}
 800492a:	bf00      	nop
 800492c:	371c      	adds	r7, #28
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40010000 	.word	0x40010000

0800493c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0303 	bic.w	r3, r3, #3
 8004972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	021b      	lsls	r3, r3, #8
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	4313      	orrs	r3, r2
 8004990:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a1d      	ldr	r2, [pc, #116]	; (8004a0c <TIM_OC3_SetConfig+0xd0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d10d      	bne.n	80049b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	021b      	lsls	r3, r3, #8
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a14      	ldr	r2, [pc, #80]	; (8004a0c <TIM_OC3_SetConfig+0xd0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d113      	bne.n	80049e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	621a      	str	r2, [r3, #32]
}
 8004a00:	bf00      	nop
 8004a02:	371c      	adds	r7, #28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	40010000 	.word	0x40010000

08004a10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	031b      	lsls	r3, r3, #12
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a10      	ldr	r2, [pc, #64]	; (8004aac <TIM_OC4_SetConfig+0x9c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d109      	bne.n	8004a84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	019b      	lsls	r3, r3, #6
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	621a      	str	r2, [r3, #32]
}
 8004a9e:	bf00      	nop
 8004aa0:	371c      	adds	r7, #28
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40010000 	.word	0x40010000

08004ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e050      	b.n	8004b6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1c      	ldr	r2, [pc, #112]	; (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d018      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b14:	d013      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a18      	ldr	r2, [pc, #96]	; (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00e      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a16      	ldr	r2, [pc, #88]	; (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d009      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a15      	ldr	r2, [pc, #84]	; (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d004      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a13      	ldr	r2, [pc, #76]	; (8004b88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d10c      	bne.n	8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40010000 	.word	0x40010000
 8004b7c:	40000400 	.word	0x40000400
 8004b80:	40000800 	.word	0x40000800
 8004b84:	40000c00 	.word	0x40000c00
 8004b88:	40014000 	.word	0x40014000

08004b8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e03f      	b.n	8004c1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d106      	bne.n	8004bb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7fc fd92 	bl	80016dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2224      	movs	r2, #36	; 0x24
 8004bbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68da      	ldr	r2, [r3, #12]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f829 	bl	8004c28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	691a      	ldr	r2, [r3, #16]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004be4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695a      	ldr	r2, [r3, #20]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68da      	ldr	r2, [r3, #12]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c2c:	b0bd      	sub	sp, #244	; 0xf4
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c44:	68d9      	ldr	r1, [r3, #12]
 8004c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	ea40 0301 	orr.w	r3, r0, r1
 8004c50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c56:	689a      	ldr	r2, [r3, #8]
 8004c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8004c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c80:	f021 010c 	bic.w	r1, r1, #12
 8004c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004c8e:	430b      	orrs	r3, r1
 8004c90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca2:	6999      	ldr	r1, [r3, #24]
 8004ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	ea40 0301 	orr.w	r3, r0, r1
 8004cae:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cba:	f040 81a5 	bne.w	8005008 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4bcd      	ldr	r3, [pc, #820]	; (8004ffc <UART_SetConfig+0x3d4>)
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d006      	beq.n	8004cd8 <UART_SetConfig+0xb0>
 8004cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	4bcb      	ldr	r3, [pc, #812]	; (8005000 <UART_SetConfig+0x3d8>)
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	f040 80cb 	bne.w	8004e6e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cd8:	f7ff fb74 	bl	80043c4 <HAL_RCC_GetPCLK2Freq>
 8004cdc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ce0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ce4:	461c      	mov	r4, r3
 8004ce6:	f04f 0500 	mov.w	r5, #0
 8004cea:	4622      	mov	r2, r4
 8004cec:	462b      	mov	r3, r5
 8004cee:	1891      	adds	r1, r2, r2
 8004cf0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004cf4:	415b      	adcs	r3, r3
 8004cf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004cfa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004cfe:	1912      	adds	r2, r2, r4
 8004d00:	eb45 0303 	adc.w	r3, r5, r3
 8004d04:	f04f 0000 	mov.w	r0, #0
 8004d08:	f04f 0100 	mov.w	r1, #0
 8004d0c:	00d9      	lsls	r1, r3, #3
 8004d0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d12:	00d0      	lsls	r0, r2, #3
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	1911      	adds	r1, r2, r4
 8004d1a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8004d1e:	416b      	adcs	r3, r5
 8004d20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	1891      	adds	r1, r2, r2
 8004d32:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8004d36:	415b      	adcs	r3, r3
 8004d38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d3c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004d40:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004d44:	f7fb ff38 	bl	8000bb8 <__aeabi_uldivmod>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4bad      	ldr	r3, [pc, #692]	; (8005004 <UART_SetConfig+0x3dc>)
 8004d4e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	011e      	lsls	r6, r3, #4
 8004d56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004d5a:	461c      	mov	r4, r3
 8004d5c:	f04f 0500 	mov.w	r5, #0
 8004d60:	4622      	mov	r2, r4
 8004d62:	462b      	mov	r3, r5
 8004d64:	1891      	adds	r1, r2, r2
 8004d66:	67b9      	str	r1, [r7, #120]	; 0x78
 8004d68:	415b      	adcs	r3, r3
 8004d6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d6c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004d70:	1912      	adds	r2, r2, r4
 8004d72:	eb45 0303 	adc.w	r3, r5, r3
 8004d76:	f04f 0000 	mov.w	r0, #0
 8004d7a:	f04f 0100 	mov.w	r1, #0
 8004d7e:	00d9      	lsls	r1, r3, #3
 8004d80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d84:	00d0      	lsls	r0, r2, #3
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	1911      	adds	r1, r2, r4
 8004d8c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004d90:	416b      	adcs	r3, r5
 8004d92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	1891      	adds	r1, r2, r2
 8004da4:	6739      	str	r1, [r7, #112]	; 0x70
 8004da6:	415b      	adcs	r3, r3
 8004da8:	677b      	str	r3, [r7, #116]	; 0x74
 8004daa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004dae:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004db2:	f7fb ff01 	bl	8000bb8 <__aeabi_uldivmod>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4b92      	ldr	r3, [pc, #584]	; (8005004 <UART_SetConfig+0x3dc>)
 8004dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc0:	095b      	lsrs	r3, r3, #5
 8004dc2:	2164      	movs	r1, #100	; 0x64
 8004dc4:	fb01 f303 	mul.w	r3, r1, r3
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	3332      	adds	r3, #50	; 0x32
 8004dce:	4a8d      	ldr	r2, [pc, #564]	; (8005004 <UART_SetConfig+0x3dc>)
 8004dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ddc:	441e      	add	r6, r3
 8004dde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004de2:	4618      	mov	r0, r3
 8004de4:	f04f 0100 	mov.w	r1, #0
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	1894      	adds	r4, r2, r2
 8004dee:	66bc      	str	r4, [r7, #104]	; 0x68
 8004df0:	415b      	adcs	r3, r3
 8004df2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004df4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004df8:	1812      	adds	r2, r2, r0
 8004dfa:	eb41 0303 	adc.w	r3, r1, r3
 8004dfe:	f04f 0400 	mov.w	r4, #0
 8004e02:	f04f 0500 	mov.w	r5, #0
 8004e06:	00dd      	lsls	r5, r3, #3
 8004e08:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e0c:	00d4      	lsls	r4, r2, #3
 8004e0e:	4622      	mov	r2, r4
 8004e10:	462b      	mov	r3, r5
 8004e12:	1814      	adds	r4, r2, r0
 8004e14:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8004e18:	414b      	adcs	r3, r1
 8004e1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	461a      	mov	r2, r3
 8004e26:	f04f 0300 	mov.w	r3, #0
 8004e2a:	1891      	adds	r1, r2, r2
 8004e2c:	6639      	str	r1, [r7, #96]	; 0x60
 8004e2e:	415b      	adcs	r3, r3
 8004e30:	667b      	str	r3, [r7, #100]	; 0x64
 8004e32:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004e36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e3a:	f7fb febd 	bl	8000bb8 <__aeabi_uldivmod>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	460b      	mov	r3, r1
 8004e42:	4b70      	ldr	r3, [pc, #448]	; (8005004 <UART_SetConfig+0x3dc>)
 8004e44:	fba3 1302 	umull	r1, r3, r3, r2
 8004e48:	095b      	lsrs	r3, r3, #5
 8004e4a:	2164      	movs	r1, #100	; 0x64
 8004e4c:	fb01 f303 	mul.w	r3, r1, r3
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	3332      	adds	r3, #50	; 0x32
 8004e56:	4a6b      	ldr	r2, [pc, #428]	; (8005004 <UART_SetConfig+0x3dc>)
 8004e58:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5c:	095b      	lsrs	r3, r3, #5
 8004e5e:	f003 0207 	and.w	r2, r3, #7
 8004e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4432      	add	r2, r6
 8004e6a:	609a      	str	r2, [r3, #8]
 8004e6c:	e26d      	b.n	800534a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e6e:	f7ff fa95 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 8004e72:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e7a:	461c      	mov	r4, r3
 8004e7c:	f04f 0500 	mov.w	r5, #0
 8004e80:	4622      	mov	r2, r4
 8004e82:	462b      	mov	r3, r5
 8004e84:	1891      	adds	r1, r2, r2
 8004e86:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e88:	415b      	adcs	r3, r3
 8004e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e8c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e90:	1912      	adds	r2, r2, r4
 8004e92:	eb45 0303 	adc.w	r3, r5, r3
 8004e96:	f04f 0000 	mov.w	r0, #0
 8004e9a:	f04f 0100 	mov.w	r1, #0
 8004e9e:	00d9      	lsls	r1, r3, #3
 8004ea0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ea4:	00d0      	lsls	r0, r2, #3
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	1911      	adds	r1, r2, r4
 8004eac:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8004eb0:	416b      	adcs	r3, r5
 8004eb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	f04f 0300 	mov.w	r3, #0
 8004ec2:	1891      	adds	r1, r2, r2
 8004ec4:	6539      	str	r1, [r7, #80]	; 0x50
 8004ec6:	415b      	adcs	r3, r3
 8004ec8:	657b      	str	r3, [r7, #84]	; 0x54
 8004eca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ece:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004ed2:	f7fb fe71 	bl	8000bb8 <__aeabi_uldivmod>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4b4a      	ldr	r3, [pc, #296]	; (8005004 <UART_SetConfig+0x3dc>)
 8004edc:	fba3 2302 	umull	r2, r3, r3, r2
 8004ee0:	095b      	lsrs	r3, r3, #5
 8004ee2:	011e      	lsls	r6, r3, #4
 8004ee4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ee8:	461c      	mov	r4, r3
 8004eea:	f04f 0500 	mov.w	r5, #0
 8004eee:	4622      	mov	r2, r4
 8004ef0:	462b      	mov	r3, r5
 8004ef2:	1891      	adds	r1, r2, r2
 8004ef4:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ef6:	415b      	adcs	r3, r3
 8004ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004efa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004efe:	1912      	adds	r2, r2, r4
 8004f00:	eb45 0303 	adc.w	r3, r5, r3
 8004f04:	f04f 0000 	mov.w	r0, #0
 8004f08:	f04f 0100 	mov.w	r1, #0
 8004f0c:	00d9      	lsls	r1, r3, #3
 8004f0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f12:	00d0      	lsls	r0, r2, #3
 8004f14:	4602      	mov	r2, r0
 8004f16:	460b      	mov	r3, r1
 8004f18:	1911      	adds	r1, r2, r4
 8004f1a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004f1e:	416b      	adcs	r3, r5
 8004f20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	1891      	adds	r1, r2, r2
 8004f32:	6439      	str	r1, [r7, #64]	; 0x40
 8004f34:	415b      	adcs	r3, r3
 8004f36:	647b      	str	r3, [r7, #68]	; 0x44
 8004f38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f3c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004f40:	f7fb fe3a 	bl	8000bb8 <__aeabi_uldivmod>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4b2e      	ldr	r3, [pc, #184]	; (8005004 <UART_SetConfig+0x3dc>)
 8004f4a:	fba3 1302 	umull	r1, r3, r3, r2
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	2164      	movs	r1, #100	; 0x64
 8004f52:	fb01 f303 	mul.w	r3, r1, r3
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	00db      	lsls	r3, r3, #3
 8004f5a:	3332      	adds	r3, #50	; 0x32
 8004f5c:	4a29      	ldr	r2, [pc, #164]	; (8005004 <UART_SetConfig+0x3dc>)
 8004f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f6a:	441e      	add	r6, r3
 8004f6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004f70:	4618      	mov	r0, r3
 8004f72:	f04f 0100 	mov.w	r1, #0
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	1894      	adds	r4, r2, r2
 8004f7c:	63bc      	str	r4, [r7, #56]	; 0x38
 8004f7e:	415b      	adcs	r3, r3
 8004f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f82:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f86:	1812      	adds	r2, r2, r0
 8004f88:	eb41 0303 	adc.w	r3, r1, r3
 8004f8c:	f04f 0400 	mov.w	r4, #0
 8004f90:	f04f 0500 	mov.w	r5, #0
 8004f94:	00dd      	lsls	r5, r3, #3
 8004f96:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f9a:	00d4      	lsls	r4, r2, #3
 8004f9c:	4622      	mov	r2, r4
 8004f9e:	462b      	mov	r3, r5
 8004fa0:	1814      	adds	r4, r2, r0
 8004fa2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8004fa6:	414b      	adcs	r3, r1
 8004fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f04f 0300 	mov.w	r3, #0
 8004fb8:	1891      	adds	r1, r2, r2
 8004fba:	6339      	str	r1, [r7, #48]	; 0x30
 8004fbc:	415b      	adcs	r3, r3
 8004fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8004fc0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004fc4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004fc8:	f7fb fdf6 	bl	8000bb8 <__aeabi_uldivmod>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4b0c      	ldr	r3, [pc, #48]	; (8005004 <UART_SetConfig+0x3dc>)
 8004fd2:	fba3 1302 	umull	r1, r3, r3, r2
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	2164      	movs	r1, #100	; 0x64
 8004fda:	fb01 f303 	mul.w	r3, r1, r3
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	3332      	adds	r3, #50	; 0x32
 8004fe4:	4a07      	ldr	r2, [pc, #28]	; (8005004 <UART_SetConfig+0x3dc>)
 8004fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fea:	095b      	lsrs	r3, r3, #5
 8004fec:	f003 0207 	and.w	r2, r3, #7
 8004ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4432      	add	r2, r6
 8004ff8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004ffa:	e1a6      	b.n	800534a <UART_SetConfig+0x722>
 8004ffc:	40011000 	.word	0x40011000
 8005000:	40011400 	.word	0x40011400
 8005004:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	4bd1      	ldr	r3, [pc, #836]	; (8005354 <UART_SetConfig+0x72c>)
 8005010:	429a      	cmp	r2, r3
 8005012:	d006      	beq.n	8005022 <UART_SetConfig+0x3fa>
 8005014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	4bcf      	ldr	r3, [pc, #828]	; (8005358 <UART_SetConfig+0x730>)
 800501c:	429a      	cmp	r2, r3
 800501e:	f040 80ca 	bne.w	80051b6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005022:	f7ff f9cf 	bl	80043c4 <HAL_RCC_GetPCLK2Freq>
 8005026:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800502a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800502e:	461c      	mov	r4, r3
 8005030:	f04f 0500 	mov.w	r5, #0
 8005034:	4622      	mov	r2, r4
 8005036:	462b      	mov	r3, r5
 8005038:	1891      	adds	r1, r2, r2
 800503a:	62b9      	str	r1, [r7, #40]	; 0x28
 800503c:	415b      	adcs	r3, r3
 800503e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005040:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005044:	1912      	adds	r2, r2, r4
 8005046:	eb45 0303 	adc.w	r3, r5, r3
 800504a:	f04f 0000 	mov.w	r0, #0
 800504e:	f04f 0100 	mov.w	r1, #0
 8005052:	00d9      	lsls	r1, r3, #3
 8005054:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005058:	00d0      	lsls	r0, r2, #3
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	eb12 0a04 	adds.w	sl, r2, r4
 8005062:	eb43 0b05 	adc.w	fp, r3, r5
 8005066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	4618      	mov	r0, r3
 800506e:	f04f 0100 	mov.w	r1, #0
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	008b      	lsls	r3, r1, #2
 800507c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005080:	0082      	lsls	r2, r0, #2
 8005082:	4650      	mov	r0, sl
 8005084:	4659      	mov	r1, fp
 8005086:	f7fb fd97 	bl	8000bb8 <__aeabi_uldivmod>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	4bb3      	ldr	r3, [pc, #716]	; (800535c <UART_SetConfig+0x734>)
 8005090:	fba3 2302 	umull	r2, r3, r3, r2
 8005094:	095b      	lsrs	r3, r3, #5
 8005096:	011e      	lsls	r6, r3, #4
 8005098:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800509c:	4618      	mov	r0, r3
 800509e:	f04f 0100 	mov.w	r1, #0
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	1894      	adds	r4, r2, r2
 80050a8:	623c      	str	r4, [r7, #32]
 80050aa:	415b      	adcs	r3, r3
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
 80050ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050b2:	1812      	adds	r2, r2, r0
 80050b4:	eb41 0303 	adc.w	r3, r1, r3
 80050b8:	f04f 0400 	mov.w	r4, #0
 80050bc:	f04f 0500 	mov.w	r5, #0
 80050c0:	00dd      	lsls	r5, r3, #3
 80050c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80050c6:	00d4      	lsls	r4, r2, #3
 80050c8:	4622      	mov	r2, r4
 80050ca:	462b      	mov	r3, r5
 80050cc:	1814      	adds	r4, r2, r0
 80050ce:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80050d2:	414b      	adcs	r3, r1
 80050d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	4618      	mov	r0, r3
 80050e0:	f04f 0100 	mov.w	r1, #0
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	008b      	lsls	r3, r1, #2
 80050ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80050f2:	0082      	lsls	r2, r0, #2
 80050f4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80050f8:	f7fb fd5e 	bl	8000bb8 <__aeabi_uldivmod>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4b96      	ldr	r3, [pc, #600]	; (800535c <UART_SetConfig+0x734>)
 8005102:	fba3 1302 	umull	r1, r3, r3, r2
 8005106:	095b      	lsrs	r3, r3, #5
 8005108:	2164      	movs	r1, #100	; 0x64
 800510a:	fb01 f303 	mul.w	r3, r1, r3
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	011b      	lsls	r3, r3, #4
 8005112:	3332      	adds	r3, #50	; 0x32
 8005114:	4a91      	ldr	r2, [pc, #580]	; (800535c <UART_SetConfig+0x734>)
 8005116:	fba2 2303 	umull	r2, r3, r2, r3
 800511a:	095b      	lsrs	r3, r3, #5
 800511c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005120:	441e      	add	r6, r3
 8005122:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005126:	4618      	mov	r0, r3
 8005128:	f04f 0100 	mov.w	r1, #0
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	1894      	adds	r4, r2, r2
 8005132:	61bc      	str	r4, [r7, #24]
 8005134:	415b      	adcs	r3, r3
 8005136:	61fb      	str	r3, [r7, #28]
 8005138:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800513c:	1812      	adds	r2, r2, r0
 800513e:	eb41 0303 	adc.w	r3, r1, r3
 8005142:	f04f 0400 	mov.w	r4, #0
 8005146:	f04f 0500 	mov.w	r5, #0
 800514a:	00dd      	lsls	r5, r3, #3
 800514c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005150:	00d4      	lsls	r4, r2, #3
 8005152:	4622      	mov	r2, r4
 8005154:	462b      	mov	r3, r5
 8005156:	1814      	adds	r4, r2, r0
 8005158:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800515c:	414b      	adcs	r3, r1
 800515e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	4618      	mov	r0, r3
 800516a:	f04f 0100 	mov.w	r1, #0
 800516e:	f04f 0200 	mov.w	r2, #0
 8005172:	f04f 0300 	mov.w	r3, #0
 8005176:	008b      	lsls	r3, r1, #2
 8005178:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800517c:	0082      	lsls	r2, r0, #2
 800517e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005182:	f7fb fd19 	bl	8000bb8 <__aeabi_uldivmod>
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	4b74      	ldr	r3, [pc, #464]	; (800535c <UART_SetConfig+0x734>)
 800518c:	fba3 1302 	umull	r1, r3, r3, r2
 8005190:	095b      	lsrs	r3, r3, #5
 8005192:	2164      	movs	r1, #100	; 0x64
 8005194:	fb01 f303 	mul.w	r3, r1, r3
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	3332      	adds	r3, #50	; 0x32
 800519e:	4a6f      	ldr	r2, [pc, #444]	; (800535c <UART_SetConfig+0x734>)
 80051a0:	fba2 2303 	umull	r2, r3, r2, r3
 80051a4:	095b      	lsrs	r3, r3, #5
 80051a6:	f003 020f 	and.w	r2, r3, #15
 80051aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4432      	add	r2, r6
 80051b2:	609a      	str	r2, [r3, #8]
 80051b4:	e0c9      	b.n	800534a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80051b6:	f7ff f8f1 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 80051ba:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051c2:	461c      	mov	r4, r3
 80051c4:	f04f 0500 	mov.w	r5, #0
 80051c8:	4622      	mov	r2, r4
 80051ca:	462b      	mov	r3, r5
 80051cc:	1891      	adds	r1, r2, r2
 80051ce:	6139      	str	r1, [r7, #16]
 80051d0:	415b      	adcs	r3, r3
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051d8:	1912      	adds	r2, r2, r4
 80051da:	eb45 0303 	adc.w	r3, r5, r3
 80051de:	f04f 0000 	mov.w	r0, #0
 80051e2:	f04f 0100 	mov.w	r1, #0
 80051e6:	00d9      	lsls	r1, r3, #3
 80051e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051ec:	00d0      	lsls	r0, r2, #3
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	eb12 0804 	adds.w	r8, r2, r4
 80051f6:	eb43 0905 	adc.w	r9, r3, r5
 80051fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	4618      	mov	r0, r3
 8005202:	f04f 0100 	mov.w	r1, #0
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	f04f 0300 	mov.w	r3, #0
 800520e:	008b      	lsls	r3, r1, #2
 8005210:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005214:	0082      	lsls	r2, r0, #2
 8005216:	4640      	mov	r0, r8
 8005218:	4649      	mov	r1, r9
 800521a:	f7fb fccd 	bl	8000bb8 <__aeabi_uldivmod>
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	4b4e      	ldr	r3, [pc, #312]	; (800535c <UART_SetConfig+0x734>)
 8005224:	fba3 2302 	umull	r2, r3, r3, r2
 8005228:	095b      	lsrs	r3, r3, #5
 800522a:	011e      	lsls	r6, r3, #4
 800522c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005230:	4618      	mov	r0, r3
 8005232:	f04f 0100 	mov.w	r1, #0
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	1894      	adds	r4, r2, r2
 800523c:	60bc      	str	r4, [r7, #8]
 800523e:	415b      	adcs	r3, r3
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005246:	1812      	adds	r2, r2, r0
 8005248:	eb41 0303 	adc.w	r3, r1, r3
 800524c:	f04f 0400 	mov.w	r4, #0
 8005250:	f04f 0500 	mov.w	r5, #0
 8005254:	00dd      	lsls	r5, r3, #3
 8005256:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800525a:	00d4      	lsls	r4, r2, #3
 800525c:	4622      	mov	r2, r4
 800525e:	462b      	mov	r3, r5
 8005260:	1814      	adds	r4, r2, r0
 8005262:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8005266:	414b      	adcs	r3, r1
 8005268:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800526c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	4618      	mov	r0, r3
 8005274:	f04f 0100 	mov.w	r1, #0
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	008b      	lsls	r3, r1, #2
 8005282:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005286:	0082      	lsls	r2, r0, #2
 8005288:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800528c:	f7fb fc94 	bl	8000bb8 <__aeabi_uldivmod>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4b31      	ldr	r3, [pc, #196]	; (800535c <UART_SetConfig+0x734>)
 8005296:	fba3 1302 	umull	r1, r3, r3, r2
 800529a:	095b      	lsrs	r3, r3, #5
 800529c:	2164      	movs	r1, #100	; 0x64
 800529e:	fb01 f303 	mul.w	r3, r1, r3
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	3332      	adds	r3, #50	; 0x32
 80052a8:	4a2c      	ldr	r2, [pc, #176]	; (800535c <UART_SetConfig+0x734>)
 80052aa:	fba2 2303 	umull	r2, r3, r2, r3
 80052ae:	095b      	lsrs	r3, r3, #5
 80052b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052b4:	441e      	add	r6, r3
 80052b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80052ba:	4618      	mov	r0, r3
 80052bc:	f04f 0100 	mov.w	r1, #0
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	1894      	adds	r4, r2, r2
 80052c6:	603c      	str	r4, [r7, #0]
 80052c8:	415b      	adcs	r3, r3
 80052ca:	607b      	str	r3, [r7, #4]
 80052cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052d0:	1812      	adds	r2, r2, r0
 80052d2:	eb41 0303 	adc.w	r3, r1, r3
 80052d6:	f04f 0400 	mov.w	r4, #0
 80052da:	f04f 0500 	mov.w	r5, #0
 80052de:	00dd      	lsls	r5, r3, #3
 80052e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052e4:	00d4      	lsls	r4, r2, #3
 80052e6:	4622      	mov	r2, r4
 80052e8:	462b      	mov	r3, r5
 80052ea:	1814      	adds	r4, r2, r0
 80052ec:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80052f0:	414b      	adcs	r3, r1
 80052f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80052f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f04f 0100 	mov.w	r1, #0
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	008b      	lsls	r3, r1, #2
 800530c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005310:	0082      	lsls	r2, r0, #2
 8005312:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005316:	f7fb fc4f 	bl	8000bb8 <__aeabi_uldivmod>
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	4b0f      	ldr	r3, [pc, #60]	; (800535c <UART_SetConfig+0x734>)
 8005320:	fba3 1302 	umull	r1, r3, r3, r2
 8005324:	095b      	lsrs	r3, r3, #5
 8005326:	2164      	movs	r1, #100	; 0x64
 8005328:	fb01 f303 	mul.w	r3, r1, r3
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	3332      	adds	r3, #50	; 0x32
 8005332:	4a0a      	ldr	r2, [pc, #40]	; (800535c <UART_SetConfig+0x734>)
 8005334:	fba2 2303 	umull	r2, r3, r2, r3
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	f003 020f 	and.w	r2, r3, #15
 800533e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4432      	add	r2, r6
 8005346:	609a      	str	r2, [r3, #8]
}
 8005348:	e7ff      	b.n	800534a <UART_SetConfig+0x722>
 800534a:	bf00      	nop
 800534c:	37f4      	adds	r7, #244	; 0xf4
 800534e:	46bd      	mov	sp, r7
 8005350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005354:	40011000 	.word	0x40011000
 8005358:	40011400 	.word	0x40011400
 800535c:	51eb851f 	.word	0x51eb851f

08005360 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005360:	b084      	sub	sp, #16
 8005362:	b580      	push	{r7, lr}
 8005364:	b084      	sub	sp, #16
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	f107 001c 	add.w	r0, r7, #28
 800536e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	2b01      	cmp	r3, #1
 8005376:	d122      	bne.n	80053be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800538c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d105      	bne.n	80053b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f001 fac6 	bl	8006944 <USB_CoreReset>
 80053b8:	4603      	mov	r3, r0
 80053ba:	73fb      	strb	r3, [r7, #15]
 80053bc:	e01a      	b.n	80053f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f001 faba 	bl	8006944 <USB_CoreReset>
 80053d0:	4603      	mov	r3, r0
 80053d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	639a      	str	r2, [r3, #56]	; 0x38
 80053e6:	e005      	b.n	80053f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80053f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d10b      	bne.n	8005412 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f043 0206 	orr.w	r2, r3, #6
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f043 0220 	orr.w	r2, r3, #32
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005412:	7bfb      	ldrb	r3, [r7, #15]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800541e:	b004      	add	sp, #16
 8005420:	4770      	bx	lr
	...

08005424 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	4613      	mov	r3, r2
 8005430:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005432:	79fb      	ldrb	r3, [r7, #7]
 8005434:	2b02      	cmp	r3, #2
 8005436:	d165      	bne.n	8005504 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4a41      	ldr	r2, [pc, #260]	; (8005540 <USB_SetTurnaroundTime+0x11c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d906      	bls.n	800544e <USB_SetTurnaroundTime+0x2a>
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4a40      	ldr	r2, [pc, #256]	; (8005544 <USB_SetTurnaroundTime+0x120>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d202      	bcs.n	800544e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005448:	230f      	movs	r3, #15
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	e062      	b.n	8005514 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	4a3c      	ldr	r2, [pc, #240]	; (8005544 <USB_SetTurnaroundTime+0x120>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d306      	bcc.n	8005464 <USB_SetTurnaroundTime+0x40>
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	4a3b      	ldr	r2, [pc, #236]	; (8005548 <USB_SetTurnaroundTime+0x124>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d202      	bcs.n	8005464 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800545e:	230e      	movs	r3, #14
 8005460:	617b      	str	r3, [r7, #20]
 8005462:	e057      	b.n	8005514 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	4a38      	ldr	r2, [pc, #224]	; (8005548 <USB_SetTurnaroundTime+0x124>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d306      	bcc.n	800547a <USB_SetTurnaroundTime+0x56>
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4a37      	ldr	r2, [pc, #220]	; (800554c <USB_SetTurnaroundTime+0x128>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d202      	bcs.n	800547a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005474:	230d      	movs	r3, #13
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	e04c      	b.n	8005514 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	4a33      	ldr	r2, [pc, #204]	; (800554c <USB_SetTurnaroundTime+0x128>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d306      	bcc.n	8005490 <USB_SetTurnaroundTime+0x6c>
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	4a32      	ldr	r2, [pc, #200]	; (8005550 <USB_SetTurnaroundTime+0x12c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d802      	bhi.n	8005490 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800548a:	230c      	movs	r3, #12
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	e041      	b.n	8005514 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	4a2f      	ldr	r2, [pc, #188]	; (8005550 <USB_SetTurnaroundTime+0x12c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d906      	bls.n	80054a6 <USB_SetTurnaroundTime+0x82>
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4a2e      	ldr	r2, [pc, #184]	; (8005554 <USB_SetTurnaroundTime+0x130>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d802      	bhi.n	80054a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80054a0:	230b      	movs	r3, #11
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	e036      	b.n	8005514 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	4a2a      	ldr	r2, [pc, #168]	; (8005554 <USB_SetTurnaroundTime+0x130>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d906      	bls.n	80054bc <USB_SetTurnaroundTime+0x98>
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	4a29      	ldr	r2, [pc, #164]	; (8005558 <USB_SetTurnaroundTime+0x134>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d802      	bhi.n	80054bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80054b6:	230a      	movs	r3, #10
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	e02b      	b.n	8005514 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4a26      	ldr	r2, [pc, #152]	; (8005558 <USB_SetTurnaroundTime+0x134>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d906      	bls.n	80054d2 <USB_SetTurnaroundTime+0xae>
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4a25      	ldr	r2, [pc, #148]	; (800555c <USB_SetTurnaroundTime+0x138>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d202      	bcs.n	80054d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80054cc:	2309      	movs	r3, #9
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	e020      	b.n	8005514 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	4a21      	ldr	r2, [pc, #132]	; (800555c <USB_SetTurnaroundTime+0x138>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d306      	bcc.n	80054e8 <USB_SetTurnaroundTime+0xc4>
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	4a20      	ldr	r2, [pc, #128]	; (8005560 <USB_SetTurnaroundTime+0x13c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d802      	bhi.n	80054e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80054e2:	2308      	movs	r3, #8
 80054e4:	617b      	str	r3, [r7, #20]
 80054e6:	e015      	b.n	8005514 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4a1d      	ldr	r2, [pc, #116]	; (8005560 <USB_SetTurnaroundTime+0x13c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d906      	bls.n	80054fe <USB_SetTurnaroundTime+0xda>
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4a1c      	ldr	r2, [pc, #112]	; (8005564 <USB_SetTurnaroundTime+0x140>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d202      	bcs.n	80054fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80054f8:	2307      	movs	r3, #7
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	e00a      	b.n	8005514 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80054fe:	2306      	movs	r3, #6
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	e007      	b.n	8005514 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d102      	bne.n	8005510 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800550a:	2309      	movs	r3, #9
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	e001      	b.n	8005514 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005510:	2309      	movs	r3, #9
 8005512:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	029b      	lsls	r3, r3, #10
 8005528:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800552c:	431a      	orrs	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	371c      	adds	r7, #28
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	00d8acbf 	.word	0x00d8acbf
 8005544:	00e4e1c0 	.word	0x00e4e1c0
 8005548:	00f42400 	.word	0x00f42400
 800554c:	01067380 	.word	0x01067380
 8005550:	011a499f 	.word	0x011a499f
 8005554:	01312cff 	.word	0x01312cff
 8005558:	014ca43f 	.word	0x014ca43f
 800555c:	016e3600 	.word	0x016e3600
 8005560:	01a6ab1f 	.word	0x01a6ab1f
 8005564:	01e84800 	.word	0x01e84800

08005568 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f043 0201 	orr.w	r2, r3, #1
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f023 0201 	bic.w	r2, r3, #1
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	460b      	mov	r3, r1
 80055b6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055c4:	78fb      	ldrb	r3, [r7, #3]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d106      	bne.n	80055d8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	60da      	str	r2, [r3, #12]
 80055d6:	e00b      	b.n	80055f0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80055d8:	78fb      	ldrb	r3, [r7, #3]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	60da      	str	r2, [r3, #12]
 80055ea:	e001      	b.n	80055f0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e003      	b.n	80055f8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80055f0:	2032      	movs	r0, #50	; 0x32
 80055f2:	f7fc fa67 	bl	8001ac4 <HAL_Delay>

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005600:	b084      	sub	sp, #16
 8005602:	b580      	push	{r7, lr}
 8005604:	b086      	sub	sp, #24
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800560e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800561a:	2300      	movs	r3, #0
 800561c:	613b      	str	r3, [r7, #16]
 800561e:	e009      	b.n	8005634 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	3340      	adds	r3, #64	; 0x40
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	2200      	movs	r2, #0
 800562c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	3301      	adds	r3, #1
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	2b0e      	cmp	r3, #14
 8005638:	d9f2      	bls.n	8005620 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800563a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800563c:	2b00      	cmp	r3, #0
 800563e:	d11c      	bne.n	800567a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800564e:	f043 0302 	orr.w	r3, r3, #2
 8005652:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005658:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005664:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005670:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	639a      	str	r2, [r3, #56]	; 0x38
 8005678:	e00b      	b.n	8005692 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005698:	461a      	mov	r2, r3
 800569a:	2300      	movs	r3, #0
 800569c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a4:	4619      	mov	r1, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ac:	461a      	mov	r2, r3
 80056ae:	680b      	ldr	r3, [r1, #0]
 80056b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d10c      	bne.n	80056d2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80056b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d104      	bne.n	80056c8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80056be:	2100      	movs	r1, #0
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f949 	bl	8005958 <USB_SetDevSpeed>
 80056c6:	e008      	b.n	80056da <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80056c8:	2101      	movs	r1, #1
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f944 	bl	8005958 <USB_SetDevSpeed>
 80056d0:	e003      	b.n	80056da <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056d2:	2103      	movs	r1, #3
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f93f 	bl	8005958 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056da:	2110      	movs	r1, #16
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f8f3 	bl	80058c8 <USB_FlushTxFifo>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f911 	bl	8005914 <USB_FlushRxFifo>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005702:	461a      	mov	r2, r3
 8005704:	2300      	movs	r3, #0
 8005706:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570e:	461a      	mov	r2, r3
 8005710:	2300      	movs	r3, #0
 8005712:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571a:	461a      	mov	r2, r3
 800571c:	2300      	movs	r3, #0
 800571e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005720:	2300      	movs	r3, #0
 8005722:	613b      	str	r3, [r7, #16]
 8005724:	e043      	b.n	80057ae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800573c:	d118      	bne.n	8005770 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10a      	bne.n	800575a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005750:	461a      	mov	r2, r3
 8005752:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	e013      	b.n	8005782 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4413      	add	r3, r2
 8005762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005766:	461a      	mov	r2, r3
 8005768:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	e008      	b.n	8005782 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577c:	461a      	mov	r2, r3
 800577e:	2300      	movs	r3, #0
 8005780:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578e:	461a      	mov	r2, r3
 8005790:	2300      	movs	r3, #0
 8005792:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a0:	461a      	mov	r2, r3
 80057a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	3301      	adds	r3, #1
 80057ac:	613b      	str	r3, [r7, #16]
 80057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d3b7      	bcc.n	8005726 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057b6:	2300      	movs	r3, #0
 80057b8:	613b      	str	r3, [r7, #16]
 80057ba:	e043      	b.n	8005844 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057d2:	d118      	bne.n	8005806 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10a      	bne.n	80057f0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e6:	461a      	mov	r2, r3
 80057e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	e013      	b.n	8005818 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fc:	461a      	mov	r2, r3
 80057fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	e008      	b.n	8005818 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005812:	461a      	mov	r2, r3
 8005814:	2300      	movs	r3, #0
 8005816:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4413      	add	r3, r2
 8005820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005824:	461a      	mov	r2, r3
 8005826:	2300      	movs	r3, #0
 8005828:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4413      	add	r3, r2
 8005832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005836:	461a      	mov	r2, r3
 8005838:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800583c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	3301      	adds	r3, #1
 8005842:	613b      	str	r3, [r7, #16]
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	429a      	cmp	r2, r3
 800584a:	d3b7      	bcc.n	80057bc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800585a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800585e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800586c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	2b00      	cmp	r3, #0
 8005872:	d105      	bne.n	8005880 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	f043 0210 	orr.w	r2, r3, #16
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	699a      	ldr	r2, [r3, #24]
 8005884:	4b0f      	ldr	r3, [pc, #60]	; (80058c4 <USB_DevInit+0x2c4>)
 8005886:	4313      	orrs	r3, r2
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800588c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800588e:	2b00      	cmp	r3, #0
 8005890:	d005      	beq.n	800589e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	f043 0208 	orr.w	r2, r3, #8
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800589e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d107      	bne.n	80058b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058ac:	f043 0304 	orr.w	r3, r3, #4
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058c0:	b004      	add	sp, #16
 80058c2:	4770      	bx	lr
 80058c4:	803c3800 	.word	0x803c3800

080058c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	019b      	lsls	r3, r3, #6
 80058da:	f043 0220 	orr.w	r2, r3, #32
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	3301      	adds	r3, #1
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4a09      	ldr	r2, [pc, #36]	; (8005910 <USB_FlushTxFifo+0x48>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d901      	bls.n	80058f4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e006      	b.n	8005902 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	f003 0320 	and.w	r3, r3, #32
 80058fc:	2b20      	cmp	r3, #32
 80058fe:	d0f0      	beq.n	80058e2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	00030d40 	.word	0x00030d40

08005914 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800591c:	2300      	movs	r3, #0
 800591e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2210      	movs	r2, #16
 8005924:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	3301      	adds	r3, #1
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4a09      	ldr	r2, [pc, #36]	; (8005954 <USB_FlushRxFifo+0x40>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d901      	bls.n	8005938 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e006      	b.n	8005946 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	f003 0310 	and.w	r3, r3, #16
 8005940:	2b10      	cmp	r3, #16
 8005942:	d0f0      	beq.n	8005926 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	00030d40 	.word	0x00030d40

08005958 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	460b      	mov	r3, r1
 8005962:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	78fb      	ldrb	r3, [r7, #3]
 8005972:	68f9      	ldr	r1, [r7, #12]
 8005974:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005978:	4313      	orrs	r3, r2
 800597a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800598a:	b480      	push	{r7}
 800598c:	b087      	sub	sp, #28
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f003 0306 	and.w	r3, r3, #6
 80059a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d102      	bne.n	80059b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80059aa:	2300      	movs	r3, #0
 80059ac:	75fb      	strb	r3, [r7, #23]
 80059ae:	e00a      	b.n	80059c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d002      	beq.n	80059bc <USB_GetDevSpeed+0x32>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b06      	cmp	r3, #6
 80059ba:	d102      	bne.n	80059c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80059bc:	2302      	movs	r3, #2
 80059be:	75fb      	strb	r3, [r7, #23]
 80059c0:	e001      	b.n	80059c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80059c2:	230f      	movs	r3, #15
 80059c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80059c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	371c      	adds	r7, #28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	785b      	ldrb	r3, [r3, #1]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d13a      	bne.n	8005a66 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f6:	69da      	ldr	r2, [r3, #28]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	f003 030f 	and.w	r3, r3, #15
 8005a00:	2101      	movs	r1, #1
 8005a02:	fa01 f303 	lsl.w	r3, r1, r3
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	68f9      	ldr	r1, [r7, #12]
 8005a0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d155      	bne.n	8005ad4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	78db      	ldrb	r3, [r3, #3]
 8005a42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	059b      	lsls	r3, r3, #22
 8005a4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	0151      	lsls	r1, r2, #5
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	440a      	add	r2, r1
 8005a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a62:	6013      	str	r3, [r2, #0]
 8005a64:	e036      	b.n	8005ad4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6c:	69da      	ldr	r2, [r3, #28]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	2101      	movs	r1, #1
 8005a78:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7c:	041b      	lsls	r3, r3, #16
 8005a7e:	68f9      	ldr	r1, [r7, #12]
 8005a80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a84:	4313      	orrs	r3, r2
 8005a86:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d11a      	bne.n	8005ad4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	78db      	ldrb	r3, [r3, #3]
 8005ab8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005aba:	430b      	orrs	r3, r1
 8005abc:	4313      	orrs	r3, r2
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	0151      	lsls	r1, r2, #5
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
	...

08005ae4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	785b      	ldrb	r3, [r3, #1]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d161      	bne.n	8005bc4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b16:	d11f      	bne.n	8005b58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	f003 030f 	and.w	r3, r3, #15
 8005b68:	2101      	movs	r1, #1
 8005b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	43db      	mvns	r3, r3
 8005b72:	68f9      	ldr	r1, [r7, #12]
 8005b74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b78:	4013      	ands	r3, r2
 8005b7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b82:	69da      	ldr	r2, [r3, #28]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	f003 030f 	and.w	r3, r3, #15
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	43db      	mvns	r3, r3
 8005b96:	68f9      	ldr	r1, [r7, #12]
 8005b98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	0159      	lsls	r1, r3, #5
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	440b      	add	r3, r1
 8005bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bba:	4619      	mov	r1, r3
 8005bbc:	4b35      	ldr	r3, [pc, #212]	; (8005c94 <USB_DeactivateEndpoint+0x1b0>)
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	600b      	str	r3, [r1, #0]
 8005bc2:	e060      	b.n	8005c86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bda:	d11f      	bne.n	8005c1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	0151      	lsls	r1, r2, #5
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	440a      	add	r2, r1
 8005bf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bfa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	0151      	lsls	r1, r2, #5
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	440a      	add	r2, r1
 8005c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	f003 030f 	and.w	r3, r3, #15
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c32:	041b      	lsls	r3, r3, #16
 8005c34:	43db      	mvns	r3, r3
 8005c36:	68f9      	ldr	r1, [r7, #12]
 8005c38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c46:	69da      	ldr	r2, [r3, #28]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	2101      	movs	r1, #1
 8005c52:	fa01 f303 	lsl.w	r3, r1, r3
 8005c56:	041b      	lsls	r3, r3, #16
 8005c58:	43db      	mvns	r3, r3
 8005c5a:	68f9      	ldr	r1, [r7, #12]
 8005c5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c60:	4013      	ands	r3, r2
 8005c62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	0159      	lsls	r1, r3, #5
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	440b      	add	r3, r1
 8005c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4b05      	ldr	r3, [pc, #20]	; (8005c98 <USB_DeactivateEndpoint+0x1b4>)
 8005c82:	4013      	ands	r3, r2
 8005c84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	ec337800 	.word	0xec337800
 8005c98:	eff37800 	.word	0xeff37800

08005c9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b08a      	sub	sp, #40	; 0x28
 8005ca0:	af02      	add	r7, sp, #8
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	785b      	ldrb	r3, [r3, #1]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	f040 815c 	bne.w	8005f76 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d132      	bne.n	8005d2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	0151      	lsls	r1, r2, #5
 8005cd8:	69fa      	ldr	r2, [r7, #28]
 8005cda:	440a      	add	r2, r1
 8005cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ce0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ce4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ce8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	0151      	lsls	r1, r2, #5
 8005cfc:	69fa      	ldr	r2, [r7, #28]
 8005cfe:	440a      	add	r2, r1
 8005d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	0151      	lsls	r1, r2, #5
 8005d1c:	69fa      	ldr	r2, [r7, #28]
 8005d1e:	440a      	add	r2, r1
 8005d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d24:	0cdb      	lsrs	r3, r3, #19
 8005d26:	04db      	lsls	r3, r3, #19
 8005d28:	6113      	str	r3, [r2, #16]
 8005d2a:	e074      	b.n	8005e16 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d46:	0cdb      	lsrs	r3, r3, #19
 8005d48:	04db      	lsls	r3, r3, #19
 8005d4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	0151      	lsls	r1, r2, #5
 8005d5e:	69fa      	ldr	r2, [r7, #28]
 8005d60:	440a      	add	r2, r1
 8005d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7c:	691a      	ldr	r2, [r3, #16]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	6959      	ldr	r1, [r3, #20]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	440b      	add	r3, r1
 8005d88:	1e59      	subs	r1, r3, #1
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d92:	04d9      	lsls	r1, r3, #19
 8005d94:	4b9d      	ldr	r3, [pc, #628]	; (800600c <USB_EPStartXfer+0x370>)
 8005d96:	400b      	ands	r3, r1
 8005d98:	69b9      	ldr	r1, [r7, #24]
 8005d9a:	0148      	lsls	r0, r1, #5
 8005d9c:	69f9      	ldr	r1, [r7, #28]
 8005d9e:	4401      	add	r1, r0
 8005da0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005da4:	4313      	orrs	r3, r2
 8005da6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db4:	691a      	ldr	r2, [r3, #16]
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dbe:	69b9      	ldr	r1, [r7, #24]
 8005dc0:	0148      	lsls	r0, r1, #5
 8005dc2:	69f9      	ldr	r1, [r7, #28]
 8005dc4:	4401      	add	r1, r0
 8005dc6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	78db      	ldrb	r3, [r3, #3]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d11f      	bne.n	8005e16 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	0151      	lsls	r1, r2, #5
 8005de8:	69fa      	ldr	r2, [r7, #28]
 8005dea:	440a      	add	r2, r1
 8005dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005df4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	0151      	lsls	r1, r2, #5
 8005e08:	69fa      	ldr	r2, [r7, #28]
 8005e0a:	440a      	add	r2, r1
 8005e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e14:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005e16:	79fb      	ldrb	r3, [r7, #7]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d14b      	bne.n	8005eb4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d009      	beq.n	8005e38 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e30:	461a      	mov	r2, r3
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	78db      	ldrb	r3, [r3, #3]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d128      	bne.n	8005e92 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d110      	bne.n	8005e72 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	0151      	lsls	r1, r2, #5
 8005e62:	69fa      	ldr	r2, [r7, #28]
 8005e64:	440a      	add	r2, r1
 8005e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	e00f      	b.n	8005e92 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	0151      	lsls	r1, r2, #5
 8005e84:	69fa      	ldr	r2, [r7, #28]
 8005e86:	440a      	add	r2, r1
 8005e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e90:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	0151      	lsls	r1, r2, #5
 8005ea4:	69fa      	ldr	r2, [r7, #28]
 8005ea6:	440a      	add	r2, r1
 8005ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	e12f      	b.n	8006114 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	0151      	lsls	r1, r2, #5
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	440a      	add	r2, r1
 8005eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ece:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ed2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	78db      	ldrb	r3, [r3, #3]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d015      	beq.n	8005f08 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 8117 	beq.w	8006114 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	f003 030f 	and.w	r3, r3, #15
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8005efc:	69f9      	ldr	r1, [r7, #28]
 8005efe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f02:	4313      	orrs	r3, r2
 8005f04:	634b      	str	r3, [r1, #52]	; 0x34
 8005f06:	e105      	b.n	8006114 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d110      	bne.n	8005f3a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	0151      	lsls	r1, r2, #5
 8005f2a:	69fa      	ldr	r2, [r7, #28]
 8005f2c:	440a      	add	r2, r1
 8005f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	e00f      	b.n	8005f5a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	0151      	lsls	r1, r2, #5
 8005f4c:	69fa      	ldr	r2, [r7, #28]
 8005f4e:	440a      	add	r2, r1
 8005f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f58:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	68d9      	ldr	r1, [r3, #12]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	781a      	ldrb	r2, [r3, #0]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	b298      	uxth	r0, r3
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 fa2b 	bl	80063ca <USB_WritePacket>
 8005f74:	e0ce      	b.n	8006114 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	0151      	lsls	r1, r2, #5
 8005f88:	69fa      	ldr	r2, [r7, #28]
 8005f8a:	440a      	add	r2, r1
 8005f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f90:	0cdb      	lsrs	r3, r3, #19
 8005f92:	04db      	lsls	r3, r3, #19
 8005f94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	0151      	lsls	r1, r2, #5
 8005fa8:	69fa      	ldr	r2, [r7, #28]
 8005faa:	440a      	add	r2, r1
 8005fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fb8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d126      	bne.n	8006010 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fce:	691a      	ldr	r2, [r3, #16]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fd8:	69b9      	ldr	r1, [r7, #24]
 8005fda:	0148      	lsls	r0, r1, #5
 8005fdc:	69f9      	ldr	r1, [r7, #28]
 8005fde:	4401      	add	r1, r0
 8005fe0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	0151      	lsls	r1, r2, #5
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006002:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006006:	6113      	str	r3, [r2, #16]
 8006008:	e036      	b.n	8006078 <USB_EPStartXfer+0x3dc>
 800600a:	bf00      	nop
 800600c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	695a      	ldr	r2, [r3, #20]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	4413      	add	r3, r2
 800601a:	1e5a      	subs	r2, r3, #1
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	fbb2 f3f3 	udiv	r3, r2, r3
 8006024:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	015a      	lsls	r2, r3, #5
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	4413      	add	r3, r2
 800602e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	8afb      	ldrh	r3, [r7, #22]
 8006036:	04d9      	lsls	r1, r3, #19
 8006038:	4b39      	ldr	r3, [pc, #228]	; (8006120 <USB_EPStartXfer+0x484>)
 800603a:	400b      	ands	r3, r1
 800603c:	69b9      	ldr	r1, [r7, #24]
 800603e:	0148      	lsls	r0, r1, #5
 8006040:	69f9      	ldr	r1, [r7, #28]
 8006042:	4401      	add	r1, r0
 8006044:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006048:	4313      	orrs	r3, r2
 800604a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006058:	691a      	ldr	r2, [r3, #16]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	8af9      	ldrh	r1, [r7, #22]
 8006060:	fb01 f303 	mul.w	r3, r1, r3
 8006064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006068:	69b9      	ldr	r1, [r7, #24]
 800606a:	0148      	lsls	r0, r1, #5
 800606c:	69f9      	ldr	r1, [r7, #28]
 800606e:	4401      	add	r1, r0
 8006070:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006074:	4313      	orrs	r3, r2
 8006076:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006078:	79fb      	ldrb	r3, [r7, #7]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d10d      	bne.n	800609a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d009      	beq.n	800609a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	68d9      	ldr	r1, [r3, #12]
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	4413      	add	r3, r2
 8006092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006096:	460a      	mov	r2, r1
 8006098:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	78db      	ldrb	r3, [r3, #3]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d128      	bne.n	80060f4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d110      	bne.n	80060d4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	0151      	lsls	r1, r2, #5
 80060c4:	69fa      	ldr	r2, [r7, #28]
 80060c6:	440a      	add	r2, r1
 80060c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060d0:	6013      	str	r3, [r2, #0]
 80060d2:	e00f      	b.n	80060f4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	69fa      	ldr	r2, [r7, #28]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	0151      	lsls	r1, r2, #5
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	440a      	add	r2, r1
 800610a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800610e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006112:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3720      	adds	r7, #32
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	1ff80000 	.word	0x1ff80000

08006124 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	4613      	mov	r3, r2
 8006130:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	785b      	ldrb	r3, [r3, #1]
 8006140:	2b01      	cmp	r3, #1
 8006142:	f040 80cd 	bne.w	80062e0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d132      	bne.n	80061b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	4413      	add	r3, r2
 8006156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	0151      	lsls	r1, r2, #5
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	440a      	add	r2, r1
 8006164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006168:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800616c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006170:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	4413      	add	r3, r2
 800617a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	0151      	lsls	r1, r2, #5
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	440a      	add	r2, r1
 8006188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800618c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006190:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	4413      	add	r3, r2
 800619a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	0151      	lsls	r1, r2, #5
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	440a      	add	r2, r1
 80061a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ac:	0cdb      	lsrs	r3, r3, #19
 80061ae:	04db      	lsls	r3, r3, #19
 80061b0:	6113      	str	r3, [r2, #16]
 80061b2:	e04e      	b.n	8006252 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	0151      	lsls	r1, r2, #5
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	440a      	add	r2, r1
 80061ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ce:	0cdb      	lsrs	r3, r3, #19
 80061d0:	04db      	lsls	r3, r3, #19
 80061d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	0151      	lsls	r1, r2, #5
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	440a      	add	r2, r1
 80061ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	695a      	ldr	r2, [r3, #20]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	429a      	cmp	r2, r3
 8006202:	d903      	bls.n	800620c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	0151      	lsls	r1, r2, #5
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	440a      	add	r2, r1
 8006222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006226:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800622a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006238:	691a      	ldr	r2, [r3, #16]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006242:	6939      	ldr	r1, [r7, #16]
 8006244:	0148      	lsls	r0, r1, #5
 8006246:	6979      	ldr	r1, [r7, #20]
 8006248:	4401      	add	r1, r0
 800624a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800624e:	4313      	orrs	r3, r2
 8006250:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006252:	79fb      	ldrb	r3, [r7, #7]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d11e      	bne.n	8006296 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d009      	beq.n	8006274 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626c:	461a      	mov	r2, r3
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	0151      	lsls	r1, r2, #5
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	440a      	add	r2, r1
 800628a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800628e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006292:	6013      	str	r3, [r2, #0]
 8006294:	e092      	b.n	80063bc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	0151      	lsls	r1, r2, #5
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	440a      	add	r2, r1
 80062ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d07e      	beq.n	80063bc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	f003 030f 	and.w	r3, r3, #15
 80062ce:	2101      	movs	r1, #1
 80062d0:	fa01 f303 	lsl.w	r3, r1, r3
 80062d4:	6979      	ldr	r1, [r7, #20]
 80062d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062da:	4313      	orrs	r3, r2
 80062dc:	634b      	str	r3, [r1, #52]	; 0x34
 80062de:	e06d      	b.n	80063bc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	0151      	lsls	r1, r2, #5
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	440a      	add	r2, r1
 80062f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062fa:	0cdb      	lsrs	r3, r3, #19
 80062fc:	04db      	lsls	r3, r3, #19
 80062fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	0151      	lsls	r1, r2, #5
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	440a      	add	r2, r1
 8006316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800631a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800631e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006322:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	0151      	lsls	r1, r2, #5
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	440a      	add	r2, r1
 800634a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800634e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006352:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006360:	691a      	ldr	r2, [r3, #16]
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800636a:	6939      	ldr	r1, [r7, #16]
 800636c:	0148      	lsls	r0, r1, #5
 800636e:	6979      	ldr	r1, [r7, #20]
 8006370:	4401      	add	r1, r0
 8006372:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006376:	4313      	orrs	r3, r2
 8006378:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800637a:	79fb      	ldrb	r3, [r7, #7]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d10d      	bne.n	800639c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d009      	beq.n	800639c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	68d9      	ldr	r1, [r3, #12]
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	4413      	add	r3, r2
 8006394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006398:	460a      	mov	r2, r1
 800639a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	0151      	lsls	r1, r2, #5
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	440a      	add	r2, r1
 80063b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	371c      	adds	r7, #28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b089      	sub	sp, #36	; 0x24
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	60f8      	str	r0, [r7, #12]
 80063d2:	60b9      	str	r1, [r7, #8]
 80063d4:	4611      	mov	r1, r2
 80063d6:	461a      	mov	r2, r3
 80063d8:	460b      	mov	r3, r1
 80063da:	71fb      	strb	r3, [r7, #7]
 80063dc:	4613      	mov	r3, r2
 80063de:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80063e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d11a      	bne.n	8006426 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80063f0:	88bb      	ldrh	r3, [r7, #4]
 80063f2:	3303      	adds	r3, #3
 80063f4:	089b      	lsrs	r3, r3, #2
 80063f6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80063f8:	2300      	movs	r3, #0
 80063fa:	61bb      	str	r3, [r7, #24]
 80063fc:	e00f      	b.n	800641e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80063fe:	79fb      	ldrb	r3, [r7, #7]
 8006400:	031a      	lsls	r2, r3, #12
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	4413      	add	r3, r2
 8006406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800640a:	461a      	mov	r2, r3
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	3304      	adds	r3, #4
 8006416:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	3301      	adds	r3, #1
 800641c:	61bb      	str	r3, [r7, #24]
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	429a      	cmp	r2, r3
 8006424:	d3eb      	bcc.n	80063fe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3724      	adds	r7, #36	; 0x24
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006434:	b480      	push	{r7}
 8006436:	b089      	sub	sp, #36	; 0x24
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	4613      	mov	r3, r2
 8006440:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800644a:	88fb      	ldrh	r3, [r7, #6]
 800644c:	3303      	adds	r3, #3
 800644e:	089b      	lsrs	r3, r3, #2
 8006450:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006452:	2300      	movs	r3, #0
 8006454:	61bb      	str	r3, [r7, #24]
 8006456:	e00b      	b.n	8006470 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	601a      	str	r2, [r3, #0]
    pDest++;
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	3304      	adds	r3, #4
 8006468:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	3301      	adds	r3, #1
 800646e:	61bb      	str	r3, [r7, #24]
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	429a      	cmp	r2, r3
 8006476:	d3ef      	bcc.n	8006458 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006478:	69fb      	ldr	r3, [r7, #28]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3724      	adds	r7, #36	; 0x24
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006486:	b480      	push	{r7}
 8006488:	b085      	sub	sp, #20
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	785b      	ldrb	r3, [r3, #1]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d12c      	bne.n	80064fc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	db12      	blt.n	80064da <USB_EPSetStall+0x54>
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00f      	beq.n	80064da <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	0151      	lsls	r1, r2, #5
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	440a      	add	r2, r1
 80064d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064d8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	0151      	lsls	r1, r2, #5
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	440a      	add	r2, r1
 80064f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	e02b      	b.n	8006554 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	db12      	blt.n	8006534 <USB_EPSetStall+0xae>
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00f      	beq.n	8006534 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	0151      	lsls	r1, r2, #5
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	440a      	add	r2, r1
 800652a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800652e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006532:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	0151      	lsls	r1, r2, #5
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	440a      	add	r2, r1
 800654a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800654e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006552:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006562:	b480      	push	{r7}
 8006564:	b085      	sub	sp, #20
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	785b      	ldrb	r3, [r3, #1]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d128      	bne.n	80065d0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	0151      	lsls	r1, r2, #5
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	440a      	add	r2, r1
 8006594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006598:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800659c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	78db      	ldrb	r3, [r3, #3]
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d003      	beq.n	80065ae <USB_EPClearStall+0x4c>
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	78db      	ldrb	r3, [r3, #3]
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d138      	bne.n	8006620 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	0151      	lsls	r1, r2, #5
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	440a      	add	r2, r1
 80065c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065cc:	6013      	str	r3, [r2, #0]
 80065ce:	e027      	b.n	8006620 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	0151      	lsls	r1, r2, #5
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	440a      	add	r2, r1
 80065e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	78db      	ldrb	r3, [r3, #3]
 80065f4:	2b03      	cmp	r3, #3
 80065f6:	d003      	beq.n	8006600 <USB_EPClearStall+0x9e>
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	78db      	ldrb	r3, [r3, #3]
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d10f      	bne.n	8006620 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	0151      	lsls	r1, r2, #5
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	440a      	add	r2, r1
 8006616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800661a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800661e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800662e:	b480      	push	{r7}
 8006630:	b085      	sub	sp, #20
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
 8006636:	460b      	mov	r3, r1
 8006638:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800664c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006650:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	78fb      	ldrb	r3, [r7, #3]
 800665c:	011b      	lsls	r3, r3, #4
 800665e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006662:	68f9      	ldr	r1, [r7, #12]
 8006664:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006668:	4313      	orrs	r3, r2
 800666a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800667a:	b480      	push	{r7}
 800667c:	b085      	sub	sp, #20
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006694:	f023 0303 	bic.w	r3, r3, #3
 8006698:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066a8:	f023 0302 	bic.w	r3, r3, #2
 80066ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80066d6:	f023 0303 	bic.w	r3, r3, #3
 80066da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066ea:	f043 0302 	orr.w	r3, r3, #2
 80066ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80066fe:	b480      	push	{r7}
 8006700:	b085      	sub	sp, #20
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	4013      	ands	r3, r2
 8006714:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006716:	68fb      	ldr	r3, [r7, #12]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	4013      	ands	r3, r2
 8006746:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	0c1b      	lsrs	r3, r3, #16
}
 800674c:	4618      	mov	r0, r3
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	4013      	ands	r3, r2
 800677a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	b29b      	uxth	r3, r3
}
 8006780:	4618      	mov	r0, r3
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	460b      	mov	r3, r1
 8006796:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800679c:	78fb      	ldrb	r3, [r7, #3]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	4013      	ands	r3, r2
 80067b8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067ba:	68bb      	ldr	r3, [r7, #8]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	460b      	mov	r3, r1
 80067d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ea:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80067ec:	78fb      	ldrb	r3, [r7, #3]
 80067ee:	f003 030f 	and.w	r3, r3, #15
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	fa22 f303 	lsr.w	r3, r2, r3
 80067f8:	01db      	lsls	r3, r3, #7
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006802:	78fb      	ldrb	r3, [r7, #3]
 8006804:	015a      	lsls	r2, r3, #5
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	4413      	add	r3, r2
 800680a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4013      	ands	r3, r2
 8006814:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006816:	68bb      	ldr	r3, [r7, #8]
}
 8006818:	4618      	mov	r0, r3
 800681a:	371c      	adds	r7, #28
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	f003 0301 	and.w	r3, r3, #1
}
 8006834:	4618      	mov	r0, r3
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800685a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800685e:	f023 0307 	bic.w	r3, r3, #7
 8006862:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006876:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
	...

08006888 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006888:	b480      	push	{r7}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	460b      	mov	r3, r1
 8006892:	607a      	str	r2, [r7, #4]
 8006894:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	333c      	adds	r3, #60	; 0x3c
 800689e:	3304      	adds	r3, #4
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	4a26      	ldr	r2, [pc, #152]	; (8006940 <USB_EP0_OutStart+0xb8>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d90a      	bls.n	80068c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068bc:	d101      	bne.n	80068c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	e037      	b.n	8006932 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c8:	461a      	mov	r2, r3
 80068ca:	2300      	movs	r3, #0
 80068cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068f0:	f043 0318 	orr.w	r3, r3, #24
 80068f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006904:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006908:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800690a:	7afb      	ldrb	r3, [r7, #11]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d10f      	bne.n	8006930 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006916:	461a      	mov	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800692a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800692e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	371c      	adds	r7, #28
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	4f54300a 	.word	0x4f54300a

08006944 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	3301      	adds	r3, #1
 8006954:	60fb      	str	r3, [r7, #12]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	4a13      	ldr	r2, [pc, #76]	; (80069a8 <USB_CoreReset+0x64>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d901      	bls.n	8006962 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e01b      	b.n	800699a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	2b00      	cmp	r3, #0
 8006968:	daf2      	bge.n	8006950 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	f043 0201 	orr.w	r2, r3, #1
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	3301      	adds	r3, #1
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4a09      	ldr	r2, [pc, #36]	; (80069a8 <USB_CoreReset+0x64>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d901      	bls.n	800698c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e006      	b.n	800699a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b01      	cmp	r3, #1
 8006996:	d0f0      	beq.n	800697a <USB_CoreReset+0x36>

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	00030d40 	.word	0x00030d40

080069ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	460b      	mov	r3, r1
 80069b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80069b8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80069bc:	f002 f946 	bl	8008c4c <malloc>
 80069c0:	4603      	mov	r3, r0
 80069c2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d105      	bne.n	80069d6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80069d2:	2302      	movs	r3, #2
 80069d4:	e066      	b.n	8006aa4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	7c1b      	ldrb	r3, [r3, #16]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d119      	bne.n	8006a1a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80069e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069ea:	2202      	movs	r2, #2
 80069ec:	2181      	movs	r1, #129	; 0x81
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f001 ffb3 	bl	800895a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80069fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069fe:	2202      	movs	r2, #2
 8006a00:	2101      	movs	r1, #1
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f001 ffa9 	bl	800895a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2210      	movs	r2, #16
 8006a14:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006a18:	e016      	b.n	8006a48 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a1a:	2340      	movs	r3, #64	; 0x40
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	2181      	movs	r1, #129	; 0x81
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f001 ff9a 	bl	800895a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a2c:	2340      	movs	r3, #64	; 0x40
 8006a2e:	2202      	movs	r2, #2
 8006a30:	2101      	movs	r1, #1
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f001 ff91 	bl	800895a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2210      	movs	r2, #16
 8006a44:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006a48:	2308      	movs	r3, #8
 8006a4a:	2203      	movs	r2, #3
 8006a4c:	2182      	movs	r1, #130	; 0x82
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f001 ff83 	bl	800895a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	7c1b      	ldrb	r3, [r3, #16]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d109      	bne.n	8006a92 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a88:	2101      	movs	r1, #1
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f002 f854 	bl	8008b38 <USBD_LL_PrepareReceive>
 8006a90:	e007      	b.n	8006aa2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a98:	2340      	movs	r3, #64	; 0x40
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f002 f84b 	bl	8008b38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006abc:	2181      	movs	r1, #129	; 0x81
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f001 ff71 	bl	80089a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006aca:	2101      	movs	r1, #1
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f001 ff6a 	bl	80089a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006ada:	2182      	movs	r1, #130	; 0x82
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f001 ff62 	bl	80089a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00e      	beq.n	8006b1a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f002 f8a5 	bl	8008c5c <free>
    pdev->pClassData = NULL;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b34:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d03a      	beq.n	8006bc4 <USBD_CDC_Setup+0xa0>
 8006b4e:	2b20      	cmp	r3, #32
 8006b50:	f040 8097 	bne.w	8006c82 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	88db      	ldrh	r3, [r3, #6]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d029      	beq.n	8006bb0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	b25b      	sxtb	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	da11      	bge.n	8006b8a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006b72:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b74:	683a      	ldr	r2, [r7, #0]
 8006b76:	88d2      	ldrh	r2, [r2, #6]
 8006b78:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006b7a:	6939      	ldr	r1, [r7, #16]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	88db      	ldrh	r3, [r3, #6]
 8006b80:	461a      	mov	r2, r3
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f001 faac 	bl	80080e0 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006b88:	e082      	b.n	8006c90 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	785a      	ldrb	r2, [r3, #1]
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	88db      	ldrh	r3, [r3, #6]
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006ba0:	6939      	ldr	r1, [r7, #16]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	88db      	ldrh	r3, [r3, #6]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f001 fac5 	bl	8008138 <USBD_CtlPrepareRx>
    break;
 8006bae:	e06f      	b.n	8006c90 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	7850      	ldrb	r0, [r2, #1]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	4798      	blx	r3
    break;
 8006bc2:	e065      	b.n	8006c90 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	785b      	ldrb	r3, [r3, #1]
 8006bc8:	2b0b      	cmp	r3, #11
 8006bca:	d84f      	bhi.n	8006c6c <USBD_CDC_Setup+0x148>
 8006bcc:	a201      	add	r2, pc, #4	; (adr r2, 8006bd4 <USBD_CDC_Setup+0xb0>)
 8006bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd2:	bf00      	nop
 8006bd4:	08006c05 	.word	0x08006c05
 8006bd8:	08006c7b 	.word	0x08006c7b
 8006bdc:	08006c6d 	.word	0x08006c6d
 8006be0:	08006c6d 	.word	0x08006c6d
 8006be4:	08006c6d 	.word	0x08006c6d
 8006be8:	08006c6d 	.word	0x08006c6d
 8006bec:	08006c6d 	.word	0x08006c6d
 8006bf0:	08006c6d 	.word	0x08006c6d
 8006bf4:	08006c6d 	.word	0x08006c6d
 8006bf8:	08006c6d 	.word	0x08006c6d
 8006bfc:	08006c2d 	.word	0x08006c2d
 8006c00:	08006c55 	.word	0x08006c55
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c0a:	2b03      	cmp	r3, #3
 8006c0c:	d107      	bne.n	8006c1e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006c0e:	f107 030c 	add.w	r3, r7, #12
 8006c12:	2202      	movs	r2, #2
 8006c14:	4619      	mov	r1, r3
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f001 fa62 	bl	80080e0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006c1c:	e030      	b.n	8006c80 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 f9ec 	bl	8007ffe <USBD_CtlError>
        ret = USBD_FAIL;
 8006c26:	2303      	movs	r3, #3
 8006c28:	75fb      	strb	r3, [r7, #23]
      break;
 8006c2a:	e029      	b.n	8006c80 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d107      	bne.n	8006c46 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006c36:	f107 030f 	add.w	r3, r7, #15
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f001 fa4e 	bl	80080e0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006c44:	e01c      	b.n	8006c80 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f001 f9d8 	bl	8007ffe <USBD_CtlError>
        ret = USBD_FAIL;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	75fb      	strb	r3, [r7, #23]
      break;
 8006c52:	e015      	b.n	8006c80 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d00f      	beq.n	8006c7e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006c5e:	6839      	ldr	r1, [r7, #0]
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f001 f9cc 	bl	8007ffe <USBD_CtlError>
        ret = USBD_FAIL;
 8006c66:	2303      	movs	r3, #3
 8006c68:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006c6a:	e008      	b.n	8006c7e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f001 f9c5 	bl	8007ffe <USBD_CtlError>
      ret = USBD_FAIL;
 8006c74:	2303      	movs	r3, #3
 8006c76:	75fb      	strb	r3, [r7, #23]
      break;
 8006c78:	e002      	b.n	8006c80 <USBD_CDC_Setup+0x15c>
      break;
 8006c7a:	bf00      	nop
 8006c7c:	e008      	b.n	8006c90 <USBD_CDC_Setup+0x16c>
      break;
 8006c7e:	bf00      	nop
    }
    break;
 8006c80:	e006      	b.n	8006c90 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 f9ba 	bl	8007ffe <USBD_CtlError>
    ret = USBD_FAIL;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	75fb      	strb	r3, [r7, #23]
    break;
 8006c8e:	bf00      	nop
  }

  return (uint8_t)ret;
 8006c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop

08006c9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006cae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e049      	b.n	8006d52 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cc4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006cc6:	78fa      	ldrb	r2, [r7, #3]
 8006cc8:	6879      	ldr	r1, [r7, #4]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	440b      	add	r3, r1
 8006cd4:	3318      	adds	r3, #24
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d029      	beq.n	8006d30 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006cdc:	78fa      	ldrb	r2, [r7, #3]
 8006cde:	6879      	ldr	r1, [r7, #4]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	440b      	add	r3, r1
 8006cea:	3318      	adds	r3, #24
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	78f9      	ldrb	r1, [r7, #3]
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	00db      	lsls	r3, r3, #3
 8006cf6:	1a5b      	subs	r3, r3, r1
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4403      	add	r3, r0
 8006cfc:	3344      	adds	r3, #68	; 0x44
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	fbb2 f1f3 	udiv	r1, r2, r3
 8006d04:	fb03 f301 	mul.w	r3, r3, r1
 8006d08:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d110      	bne.n	8006d30 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006d0e:	78fa      	ldrb	r2, [r7, #3]
 8006d10:	6879      	ldr	r1, [r7, #4]
 8006d12:	4613      	mov	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	440b      	add	r3, r1
 8006d1c:	3318      	adds	r3, #24
 8006d1e:	2200      	movs	r2, #0
 8006d20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006d22:	78f9      	ldrb	r1, [r7, #3]
 8006d24:	2300      	movs	r3, #0
 8006d26:	2200      	movs	r2, #0
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f001 fee4 	bl	8008af6 <USBD_LL_Transmit>
 8006d2e:	e00f      	b.n	8006d50 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006d4c:	78fa      	ldrb	r2, [r7, #3]
 8006d4e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	460b      	mov	r3, r1
 8006d64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d6c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e015      	b.n	8006da8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006d7c:	78fb      	ldrb	r3, [r7, #3]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f001 fefa 	bl	8008b7a <USBD_LL_GetRxDataSize>
 8006d86:	4602      	mov	r2, r0
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006da2:	4611      	mov	r1, r2
 8006da4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dbe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d015      	beq.n	8006df6 <USBD_CDC_EP0_RxReady+0x46>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006dd0:	2bff      	cmp	r3, #255	; 0xff
 8006dd2:	d010      	beq.n	8006df6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006de2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006dea:	b292      	uxth	r2, r2
 8006dec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	22ff      	movs	r2, #255	; 0xff
 8006df2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2243      	movs	r2, #67	; 0x43
 8006e0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006e0e:	4b03      	ldr	r3, [pc, #12]	; (8006e1c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	20000094 	.word	0x20000094

08006e20 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2243      	movs	r2, #67	; 0x43
 8006e2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006e2e:	4b03      	ldr	r3, [pc, #12]	; (8006e3c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	20000050 	.word	0x20000050

08006e40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2243      	movs	r2, #67	; 0x43
 8006e4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006e4e:	4b03      	ldr	r3, [pc, #12]	; (8006e5c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	200000d8 	.word	0x200000d8

08006e60 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	220a      	movs	r2, #10
 8006e6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006e6e:	4b03      	ldr	r3, [pc, #12]	; (8006e7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	2000000c 	.word	0x2000000c

08006e80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e004      	b.n	8006e9e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b087      	sub	sp, #28
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	60f8      	str	r0, [r7, #12]
 8006eb2:	60b9      	str	r1, [r7, #8]
 8006eb4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ebc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	371c      	adds	r7, #28
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eec:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	683a      	ldr	r2, [r7, #0]
 8006ef2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3714      	adds	r7, #20
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f12:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006f14:	2301      	movs	r3, #1
 8006f16:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e01a      	b.n	8006f5c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d114      	bne.n	8006f5a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006f4e:	2181      	movs	r1, #129	; 0x81
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f001 fdd0 	bl	8008af6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f72:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e016      	b.n	8006fb0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	7c1b      	ldrb	r3, [r3, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d109      	bne.n	8006f9e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f94:	2101      	movs	r1, #1
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f001 fdce 	bl	8008b38 <USBD_LL_PrepareReceive>
 8006f9c:	e007      	b.n	8006fae <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fa4:	2340      	movs	r3, #64	; 0x40
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f001 fdc5 	bl	8008b38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e025      	b.n	800701c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d003      	beq.n	8006ff4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	79fa      	ldrb	r2, [r7, #7]
 800700e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f001 fc3b 	bl	800888c <USBD_LL_Init>
 8007016:	4603      	mov	r3, r0
 8007018:	75fb      	strb	r3, [r7, #23]

  return ret;
 800701a:	7dfb      	ldrb	r3, [r7, #23]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3718      	adds	r7, #24
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007038:	2303      	movs	r3, #3
 800703a:	e010      	b.n	800705e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800704a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704c:	f107 020e 	add.w	r2, r7, #14
 8007050:	4610      	mov	r0, r2
 8007052:	4798      	blx	r3
 8007054:	4602      	mov	r2, r0
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b082      	sub	sp, #8
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f001 fc58 	bl	8008924 <USBD_LL_Start>
 8007074:	4603      	mov	r3, r0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800707e:	b480      	push	{r7}
 8007080:	b083      	sub	sp, #12
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	460b      	mov	r3, r1
 800709e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80070a0:	2303      	movs	r3, #3
 80070a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d009      	beq.n	80070c2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	78fa      	ldrb	r2, [r7, #3]
 80070b8:	4611      	mov	r1, r2
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	4798      	blx	r3
 80070be:	4603      	mov	r3, r0
 80070c0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80070c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	460b      	mov	r3, r1
 80070d6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d007      	beq.n	80070f2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	78fa      	ldrb	r2, [r7, #3]
 80070ec:	4611      	mov	r1, r2
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	4798      	blx	r3
  }

  return USBD_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	4618      	mov	r0, r3
 8007110:	f000 ff3b 	bl	8007f8a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007122:	461a      	mov	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007130:	f003 031f 	and.w	r3, r3, #31
 8007134:	2b02      	cmp	r3, #2
 8007136:	d01a      	beq.n	800716e <USBD_LL_SetupStage+0x72>
 8007138:	2b02      	cmp	r3, #2
 800713a:	d822      	bhi.n	8007182 <USBD_LL_SetupStage+0x86>
 800713c:	2b00      	cmp	r3, #0
 800713e:	d002      	beq.n	8007146 <USBD_LL_SetupStage+0x4a>
 8007140:	2b01      	cmp	r3, #1
 8007142:	d00a      	beq.n	800715a <USBD_LL_SetupStage+0x5e>
 8007144:	e01d      	b.n	8007182 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fa18 	bl	8007584 <USBD_StdDevReq>
 8007154:	4603      	mov	r3, r0
 8007156:	73fb      	strb	r3, [r7, #15]
      break;
 8007158:	e020      	b.n	800719c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fa7c 	bl	8007660 <USBD_StdItfReq>
 8007168:	4603      	mov	r3, r0
 800716a:	73fb      	strb	r3, [r7, #15]
      break;
 800716c:	e016      	b.n	800719c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007174:	4619      	mov	r1, r3
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 faba 	bl	80076f0 <USBD_StdEPReq>
 800717c:	4603      	mov	r3, r0
 800717e:	73fb      	strb	r3, [r7, #15]
      break;
 8007180:	e00c      	b.n	800719c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007188:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800718c:	b2db      	uxtb	r3, r3
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f001 fc27 	bl	80089e4 <USBD_LL_StallEP>
 8007196:	4603      	mov	r3, r0
 8007198:	73fb      	strb	r3, [r7, #15]
      break;
 800719a:	bf00      	nop
  }

  return ret;
 800719c:	7bfb      	ldrb	r3, [r7, #15]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b086      	sub	sp, #24
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	460b      	mov	r3, r1
 80071b0:	607a      	str	r2, [r7, #4]
 80071b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80071b4:	7afb      	ldrb	r3, [r7, #11]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d137      	bne.n	800722a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80071c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071c8:	2b03      	cmp	r3, #3
 80071ca:	d14a      	bne.n	8007262 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	689a      	ldr	r2, [r3, #8]
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d913      	bls.n	8007200 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	689a      	ldr	r2, [r3, #8]
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	1ad2      	subs	r2, r2, r3
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	68da      	ldr	r2, [r3, #12]
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	4293      	cmp	r3, r2
 80071f0:	bf28      	it	cs
 80071f2:	4613      	movcs	r3, r2
 80071f4:	461a      	mov	r2, r3
 80071f6:	6879      	ldr	r1, [r7, #4]
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 ffba 	bl	8008172 <USBD_CtlContinueRx>
 80071fe:	e030      	b.n	8007262 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00a      	beq.n	8007222 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007212:	2b03      	cmp	r3, #3
 8007214:	d105      	bne.n	8007222 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f000 ffb6 	bl	8008194 <USBD_CtlSendStatus>
 8007228:	e01b      	b.n	8007262 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d013      	beq.n	800725e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800723c:	2b03      	cmp	r3, #3
 800723e:	d10e      	bne.n	800725e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	7afa      	ldrb	r2, [r7, #11]
 800724a:	4611      	mov	r1, r2
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	4798      	blx	r3
 8007250:	4603      	mov	r3, r0
 8007252:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007254:	7dfb      	ldrb	r3, [r7, #23]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d003      	beq.n	8007262 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800725a:	7dfb      	ldrb	r3, [r7, #23]
 800725c:	e002      	b.n	8007264 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800725e:	2303      	movs	r3, #3
 8007260:	e000      	b.n	8007264 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3718      	adds	r7, #24
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	460b      	mov	r3, r1
 8007276:	607a      	str	r2, [r7, #4]
 8007278:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800727a:	7afb      	ldrb	r3, [r7, #11]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d16a      	bne.n	8007356 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	3314      	adds	r3, #20
 8007284:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800728c:	2b02      	cmp	r3, #2
 800728e:	d155      	bne.n	800733c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	689a      	ldr	r2, [r3, #8]
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	429a      	cmp	r2, r3
 800729a:	d914      	bls.n	80072c6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	689a      	ldr	r2, [r3, #8]
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	1ad2      	subs	r2, r2, r3
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	461a      	mov	r2, r3
 80072b0:	6879      	ldr	r1, [r7, #4]
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 ff2f 	bl	8008116 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072b8:	2300      	movs	r3, #0
 80072ba:	2200      	movs	r2, #0
 80072bc:	2100      	movs	r1, #0
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f001 fc3a 	bl	8008b38 <USBD_LL_PrepareReceive>
 80072c4:	e03a      	b.n	800733c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	68da      	ldr	r2, [r3, #12]
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d11c      	bne.n	800730c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80072da:	429a      	cmp	r2, r3
 80072dc:	d316      	bcc.n	800730c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d20f      	bcs.n	800730c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80072ec:	2200      	movs	r2, #0
 80072ee:	2100      	movs	r1, #0
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 ff10 	bl	8008116 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072fe:	2300      	movs	r3, #0
 8007300:	2200      	movs	r2, #0
 8007302:	2100      	movs	r1, #0
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f001 fc17 	bl	8008b38 <USBD_LL_PrepareReceive>
 800730a:	e017      	b.n	800733c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00a      	beq.n	800732e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800731e:	2b03      	cmp	r3, #3
 8007320:	d105      	bne.n	800732e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800732e:	2180      	movs	r1, #128	; 0x80
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f001 fb57 	bl	80089e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f000 ff3f 	bl	80081ba <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007342:	2b01      	cmp	r3, #1
 8007344:	d123      	bne.n	800738e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f7ff fe99 	bl	800707e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007354:	e01b      	b.n	800738e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d013      	beq.n	800738a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007368:	2b03      	cmp	r3, #3
 800736a:	d10e      	bne.n	800738a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	7afa      	ldrb	r2, [r7, #11]
 8007376:	4611      	mov	r1, r2
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	4798      	blx	r3
 800737c:	4603      	mov	r3, r0
 800737e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007380:	7dfb      	ldrb	r3, [r7, #23]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007386:	7dfb      	ldrb	r3, [r7, #23]
 8007388:	e002      	b.n	8007390 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800738a:	2303      	movs	r3, #3
 800738c:	e000      	b.n	8007390 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3718      	adds	r7, #24
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d009      	beq.n	80073dc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	6852      	ldr	r2, [r2, #4]
 80073d4:	b2d2      	uxtb	r2, r2
 80073d6:	4611      	mov	r1, r2
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073dc:	2340      	movs	r3, #64	; 0x40
 80073de:	2200      	movs	r2, #0
 80073e0:	2100      	movs	r1, #0
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f001 fab9 	bl	800895a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2240      	movs	r2, #64	; 0x40
 80073f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073f8:	2340      	movs	r3, #64	; 0x40
 80073fa:	2200      	movs	r2, #0
 80073fc:	2180      	movs	r1, #128	; 0x80
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f001 faab 	bl	800895a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2240      	movs	r2, #64	; 0x40
 800740e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800741a:	b480      	push	{r7}
 800741c:	b083      	sub	sp, #12
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	460b      	mov	r3, r1
 8007424:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	78fa      	ldrb	r2, [r7, #3]
 800742a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800743a:	b480      	push	{r7}
 800743c:	b083      	sub	sp, #12
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2204      	movs	r2, #4
 8007452:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007472:	2b04      	cmp	r3, #4
 8007474:	d105      	bne.n	8007482 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d10b      	bne.n	80074ba <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d005      	beq.n	80074ba <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	460b      	mov	r3, r1
 80074ce:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80074de:	b480      	push	{r7}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	460b      	mov	r3, r1
 80074e8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b082      	sub	sp, #8
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007524:	2b00      	cmp	r3, #0
 8007526:	d009      	beq.n	800753c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6852      	ldr	r2, [r2, #4]
 8007534:	b2d2      	uxtb	r2, r2
 8007536:	4611      	mov	r1, r2
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	4798      	blx	r3
  }

  return USBD_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007546:	b480      	push	{r7}
 8007548:	b087      	sub	sp, #28
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	3301      	adds	r3, #1
 800755c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007564:	8a3b      	ldrh	r3, [r7, #16]
 8007566:	021b      	lsls	r3, r3, #8
 8007568:	b21a      	sxth	r2, r3
 800756a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800756e:	4313      	orrs	r3, r2
 8007570:	b21b      	sxth	r3, r3
 8007572:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007574:	89fb      	ldrh	r3, [r7, #14]
}
 8007576:	4618      	mov	r0, r3
 8007578:	371c      	adds	r7, #28
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
	...

08007584 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800759a:	2b40      	cmp	r3, #64	; 0x40
 800759c:	d005      	beq.n	80075aa <USBD_StdDevReq+0x26>
 800759e:	2b40      	cmp	r3, #64	; 0x40
 80075a0:	d853      	bhi.n	800764a <USBD_StdDevReq+0xc6>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00b      	beq.n	80075be <USBD_StdDevReq+0x3a>
 80075a6:	2b20      	cmp	r3, #32
 80075a8:	d14f      	bne.n	800764a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	4798      	blx	r3
 80075b8:	4603      	mov	r3, r0
 80075ba:	73fb      	strb	r3, [r7, #15]
    break;
 80075bc:	e04a      	b.n	8007654 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	785b      	ldrb	r3, [r3, #1]
 80075c2:	2b09      	cmp	r3, #9
 80075c4:	d83b      	bhi.n	800763e <USBD_StdDevReq+0xba>
 80075c6:	a201      	add	r2, pc, #4	; (adr r2, 80075cc <USBD_StdDevReq+0x48>)
 80075c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075cc:	08007621 	.word	0x08007621
 80075d0:	08007635 	.word	0x08007635
 80075d4:	0800763f 	.word	0x0800763f
 80075d8:	0800762b 	.word	0x0800762b
 80075dc:	0800763f 	.word	0x0800763f
 80075e0:	080075ff 	.word	0x080075ff
 80075e4:	080075f5 	.word	0x080075f5
 80075e8:	0800763f 	.word	0x0800763f
 80075ec:	08007617 	.word	0x08007617
 80075f0:	08007609 	.word	0x08007609
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f9d8 	bl	80079ac <USBD_GetDescriptor>
      break;
 80075fc:	e024      	b.n	8007648 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80075fe:	6839      	ldr	r1, [r7, #0]
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fb3d 	bl	8007c80 <USBD_SetAddress>
      break;
 8007606:	e01f      	b.n	8007648 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fb7c 	bl	8007d08 <USBD_SetConfig>
 8007610:	4603      	mov	r3, r0
 8007612:	73fb      	strb	r3, [r7, #15]
      break;
 8007614:	e018      	b.n	8007648 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007616:	6839      	ldr	r1, [r7, #0]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fc19 	bl	8007e50 <USBD_GetConfig>
      break;
 800761e:	e013      	b.n	8007648 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fc49 	bl	8007eba <USBD_GetStatus>
      break;
 8007628:	e00e      	b.n	8007648 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800762a:	6839      	ldr	r1, [r7, #0]
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fc77 	bl	8007f20 <USBD_SetFeature>
      break;
 8007632:	e009      	b.n	8007648 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fc86 	bl	8007f48 <USBD_ClrFeature>
      break;
 800763c:	e004      	b.n	8007648 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800763e:	6839      	ldr	r1, [r7, #0]
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fcdc 	bl	8007ffe <USBD_CtlError>
      break;
 8007646:	bf00      	nop
    }
    break;
 8007648:	e004      	b.n	8007654 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fcd6 	bl	8007ffe <USBD_CtlError>
    break;
 8007652:	bf00      	nop
  }

  return ret;
 8007654:	7bfb      	ldrb	r3, [r7, #15]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop

08007660 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007676:	2b40      	cmp	r3, #64	; 0x40
 8007678:	d005      	beq.n	8007686 <USBD_StdItfReq+0x26>
 800767a:	2b40      	cmp	r3, #64	; 0x40
 800767c:	d82e      	bhi.n	80076dc <USBD_StdItfReq+0x7c>
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <USBD_StdItfReq+0x26>
 8007682:	2b20      	cmp	r3, #32
 8007684:	d12a      	bne.n	80076dc <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800768c:	3b01      	subs	r3, #1
 800768e:	2b02      	cmp	r3, #2
 8007690:	d81d      	bhi.n	80076ce <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	889b      	ldrh	r3, [r3, #4]
 8007696:	b2db      	uxtb	r3, r3
 8007698:	2b01      	cmp	r3, #1
 800769a:	d813      	bhi.n	80076c4 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	6839      	ldr	r1, [r7, #0]
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	4798      	blx	r3
 80076aa:	4603      	mov	r3, r0
 80076ac:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	88db      	ldrh	r3, [r3, #6]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d110      	bne.n	80076d8 <USBD_StdItfReq+0x78>
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10d      	bne.n	80076d8 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fd69 	bl	8008194 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80076c2:	e009      	b.n	80076d8 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fc99 	bl	8007ffe <USBD_CtlError>
      break;
 80076cc:	e004      	b.n	80076d8 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fc94 	bl	8007ffe <USBD_CtlError>
      break;
 80076d6:	e000      	b.n	80076da <USBD_StdItfReq+0x7a>
      break;
 80076d8:	bf00      	nop
    }
    break;
 80076da:	e004      	b.n	80076e6 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fc8d 	bl	8007ffe <USBD_CtlError>
    break;
 80076e4:	bf00      	nop
  }

  return ret;
 80076e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	889b      	ldrh	r3, [r3, #4]
 8007702:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800770c:	2b40      	cmp	r3, #64	; 0x40
 800770e:	d007      	beq.n	8007720 <USBD_StdEPReq+0x30>
 8007710:	2b40      	cmp	r3, #64	; 0x40
 8007712:	f200 8140 	bhi.w	8007996 <USBD_StdEPReq+0x2a6>
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00c      	beq.n	8007734 <USBD_StdEPReq+0x44>
 800771a:	2b20      	cmp	r3, #32
 800771c:	f040 813b 	bne.w	8007996 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	6839      	ldr	r1, [r7, #0]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	4798      	blx	r3
 800772e:	4603      	mov	r3, r0
 8007730:	73fb      	strb	r3, [r7, #15]
    break;
 8007732:	e135      	b.n	80079a0 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	785b      	ldrb	r3, [r3, #1]
 8007738:	2b03      	cmp	r3, #3
 800773a:	d007      	beq.n	800774c <USBD_StdEPReq+0x5c>
 800773c:	2b03      	cmp	r3, #3
 800773e:	f300 8124 	bgt.w	800798a <USBD_StdEPReq+0x29a>
 8007742:	2b00      	cmp	r3, #0
 8007744:	d07b      	beq.n	800783e <USBD_StdEPReq+0x14e>
 8007746:	2b01      	cmp	r3, #1
 8007748:	d03b      	beq.n	80077c2 <USBD_StdEPReq+0xd2>
 800774a:	e11e      	b.n	800798a <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007752:	2b02      	cmp	r3, #2
 8007754:	d002      	beq.n	800775c <USBD_StdEPReq+0x6c>
 8007756:	2b03      	cmp	r3, #3
 8007758:	d016      	beq.n	8007788 <USBD_StdEPReq+0x98>
 800775a:	e02c      	b.n	80077b6 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800775c:	7bbb      	ldrb	r3, [r7, #14]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00d      	beq.n	800777e <USBD_StdEPReq+0x8e>
 8007762:	7bbb      	ldrb	r3, [r7, #14]
 8007764:	2b80      	cmp	r3, #128	; 0x80
 8007766:	d00a      	beq.n	800777e <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007768:	7bbb      	ldrb	r3, [r7, #14]
 800776a:	4619      	mov	r1, r3
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f001 f939 	bl	80089e4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007772:	2180      	movs	r1, #128	; 0x80
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f001 f935 	bl	80089e4 <USBD_LL_StallEP>
 800777a:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800777c:	e020      	b.n	80077c0 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fc3c 	bl	8007ffe <USBD_CtlError>
        break;
 8007786:	e01b      	b.n	80077c0 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	885b      	ldrh	r3, [r3, #2]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10e      	bne.n	80077ae <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007790:	7bbb      	ldrb	r3, [r7, #14]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00b      	beq.n	80077ae <USBD_StdEPReq+0xbe>
 8007796:	7bbb      	ldrb	r3, [r7, #14]
 8007798:	2b80      	cmp	r3, #128	; 0x80
 800779a:	d008      	beq.n	80077ae <USBD_StdEPReq+0xbe>
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	88db      	ldrh	r3, [r3, #6]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d104      	bne.n	80077ae <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80077a4:	7bbb      	ldrb	r3, [r7, #14]
 80077a6:	4619      	mov	r1, r3
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f001 f91b 	bl	80089e4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fcf0 	bl	8008194 <USBD_CtlSendStatus>

        break;
 80077b4:	e004      	b.n	80077c0 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fc20 	bl	8007ffe <USBD_CtlError>
        break;
 80077be:	bf00      	nop
      }
      break;
 80077c0:	e0e8      	b.n	8007994 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d002      	beq.n	80077d2 <USBD_StdEPReq+0xe2>
 80077cc:	2b03      	cmp	r3, #3
 80077ce:	d016      	beq.n	80077fe <USBD_StdEPReq+0x10e>
 80077d0:	e02e      	b.n	8007830 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077d2:	7bbb      	ldrb	r3, [r7, #14]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00d      	beq.n	80077f4 <USBD_StdEPReq+0x104>
 80077d8:	7bbb      	ldrb	r3, [r7, #14]
 80077da:	2b80      	cmp	r3, #128	; 0x80
 80077dc:	d00a      	beq.n	80077f4 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80077de:	7bbb      	ldrb	r3, [r7, #14]
 80077e0:	4619      	mov	r1, r3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f001 f8fe 	bl	80089e4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80077e8:	2180      	movs	r1, #128	; 0x80
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f001 f8fa 	bl	80089e4 <USBD_LL_StallEP>
 80077f0:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80077f2:	e023      	b.n	800783c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 80077f4:	6839      	ldr	r1, [r7, #0]
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fc01 	bl	8007ffe <USBD_CtlError>
        break;
 80077fc:	e01e      	b.n	800783c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	885b      	ldrh	r3, [r3, #2]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d119      	bne.n	800783a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800780c:	2b00      	cmp	r3, #0
 800780e:	d004      	beq.n	800781a <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007810:	7bbb      	ldrb	r3, [r7, #14]
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f001 f904 	bl	8008a22 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fcba 	bl	8008194 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	4798      	blx	r3
        }
        break;
 800782e:	e004      	b.n	800783a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fbe3 	bl	8007ffe <USBD_CtlError>
        break;
 8007838:	e000      	b.n	800783c <USBD_StdEPReq+0x14c>
        break;
 800783a:	bf00      	nop
      }
      break;
 800783c:	e0aa      	b.n	8007994 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007844:	2b02      	cmp	r3, #2
 8007846:	d002      	beq.n	800784e <USBD_StdEPReq+0x15e>
 8007848:	2b03      	cmp	r3, #3
 800784a:	d032      	beq.n	80078b2 <USBD_StdEPReq+0x1c2>
 800784c:	e097      	b.n	800797e <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d007      	beq.n	8007864 <USBD_StdEPReq+0x174>
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	2b80      	cmp	r3, #128	; 0x80
 8007858:	d004      	beq.n	8007864 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fbce 	bl	8007ffe <USBD_CtlError>
          break;
 8007862:	e091      	b.n	8007988 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007864:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007868:	2b00      	cmp	r3, #0
 800786a:	da0b      	bge.n	8007884 <USBD_StdEPReq+0x194>
 800786c:	7bbb      	ldrb	r3, [r7, #14]
 800786e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007872:	4613      	mov	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	3310      	adds	r3, #16
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	4413      	add	r3, r2
 8007880:	3304      	adds	r3, #4
 8007882:	e00b      	b.n	800789c <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007884:	7bbb      	ldrb	r3, [r7, #14]
 8007886:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800788a:	4613      	mov	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4413      	add	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	4413      	add	r3, r2
 800789a:	3304      	adds	r3, #4
 800789c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2200      	movs	r2, #0
 80078a2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2202      	movs	r2, #2
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fc18 	bl	80080e0 <USBD_CtlSendData>
        break;
 80078b0:	e06a      	b.n	8007988 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80078b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	da11      	bge.n	80078de <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	f003 020f 	and.w	r2, r3, #15
 80078c0:	6879      	ldr	r1, [r7, #4]
 80078c2:	4613      	mov	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	440b      	add	r3, r1
 80078cc:	3324      	adds	r3, #36	; 0x24
 80078ce:	881b      	ldrh	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d117      	bne.n	8007904 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fb91 	bl	8007ffe <USBD_CtlError>
            break;
 80078dc:	e054      	b.n	8007988 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	f003 020f 	and.w	r2, r3, #15
 80078e4:	6879      	ldr	r1, [r7, #4]
 80078e6:	4613      	mov	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	440b      	add	r3, r1
 80078f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d104      	bne.n	8007904 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fb7e 	bl	8007ffe <USBD_CtlError>
            break;
 8007902:	e041      	b.n	8007988 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007904:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007908:	2b00      	cmp	r3, #0
 800790a:	da0b      	bge.n	8007924 <USBD_StdEPReq+0x234>
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007912:	4613      	mov	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	3310      	adds	r3, #16
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	4413      	add	r3, r2
 8007920:	3304      	adds	r3, #4
 8007922:	e00b      	b.n	800793c <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007924:	7bbb      	ldrb	r3, [r7, #14]
 8007926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800792a:	4613      	mov	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	4413      	add	r3, r2
 800793a:	3304      	adds	r3, #4
 800793c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <USBD_StdEPReq+0x25a>
 8007944:	7bbb      	ldrb	r3, [r7, #14]
 8007946:	2b80      	cmp	r3, #128	; 0x80
 8007948:	d103      	bne.n	8007952 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	2200      	movs	r2, #0
 800794e:	601a      	str	r2, [r3, #0]
 8007950:	e00e      	b.n	8007970 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007952:	7bbb      	ldrb	r3, [r7, #14]
 8007954:	4619      	mov	r1, r3
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f001 f882 	bl	8008a60 <USBD_LL_IsStallEP>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d003      	beq.n	800796a <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	2201      	movs	r2, #1
 8007966:	601a      	str	r2, [r3, #0]
 8007968:	e002      	b.n	8007970 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2200      	movs	r2, #0
 800796e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2202      	movs	r2, #2
 8007974:	4619      	mov	r1, r3
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fbb2 	bl	80080e0 <USBD_CtlSendData>
          break;
 800797c:	e004      	b.n	8007988 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 800797e:	6839      	ldr	r1, [r7, #0]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fb3c 	bl	8007ffe <USBD_CtlError>
        break;
 8007986:	bf00      	nop
      }
      break;
 8007988:	e004      	b.n	8007994 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 800798a:	6839      	ldr	r1, [r7, #0]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fb36 	bl	8007ffe <USBD_CtlError>
      break;
 8007992:	bf00      	nop
    }
    break;
 8007994:	e004      	b.n	80079a0 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8007996:	6839      	ldr	r1, [r7, #0]
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fb30 	bl	8007ffe <USBD_CtlError>
    break;
 800799e:	bf00      	nop
  }

  return ret;
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
	...

080079ac <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079b6:	2300      	movs	r3, #0
 80079b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80079ba:	2300      	movs	r3, #0
 80079bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	885b      	ldrh	r3, [r3, #2]
 80079c6:	0a1b      	lsrs	r3, r3, #8
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	3b01      	subs	r3, #1
 80079cc:	2b06      	cmp	r3, #6
 80079ce:	f200 8128 	bhi.w	8007c22 <USBD_GetDescriptor+0x276>
 80079d2:	a201      	add	r2, pc, #4	; (adr r2, 80079d8 <USBD_GetDescriptor+0x2c>)
 80079d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d8:	080079f5 	.word	0x080079f5
 80079dc:	08007a0d 	.word	0x08007a0d
 80079e0:	08007a4d 	.word	0x08007a4d
 80079e4:	08007c23 	.word	0x08007c23
 80079e8:	08007c23 	.word	0x08007c23
 80079ec:	08007bc3 	.word	0x08007bc3
 80079f0:	08007bef 	.word	0x08007bef
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	7c12      	ldrb	r2, [r2, #16]
 8007a00:	f107 0108 	add.w	r1, r7, #8
 8007a04:	4610      	mov	r0, r2
 8007a06:	4798      	blx	r3
 8007a08:	60f8      	str	r0, [r7, #12]
    break;
 8007a0a:	e112      	b.n	8007c32 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	7c1b      	ldrb	r3, [r3, #16]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10d      	bne.n	8007a30 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1c:	f107 0208 	add.w	r2, r7, #8
 8007a20:	4610      	mov	r0, r2
 8007a22:	4798      	blx	r3
 8007a24:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007a2e:	e100      	b.n	8007c32 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a38:	f107 0208 	add.w	r2, r7, #8
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	4798      	blx	r3
 8007a40:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	3301      	adds	r3, #1
 8007a46:	2202      	movs	r2, #2
 8007a48:	701a      	strb	r2, [r3, #0]
    break;
 8007a4a:	e0f2      	b.n	8007c32 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	885b      	ldrh	r3, [r3, #2]
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b05      	cmp	r3, #5
 8007a54:	f200 80ac 	bhi.w	8007bb0 <USBD_GetDescriptor+0x204>
 8007a58:	a201      	add	r2, pc, #4	; (adr r2, 8007a60 <USBD_GetDescriptor+0xb4>)
 8007a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5e:	bf00      	nop
 8007a60:	08007a79 	.word	0x08007a79
 8007a64:	08007aad 	.word	0x08007aad
 8007a68:	08007ae1 	.word	0x08007ae1
 8007a6c:	08007b15 	.word	0x08007b15
 8007a70:	08007b49 	.word	0x08007b49
 8007a74:	08007b7d 	.word	0x08007b7d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00b      	beq.n	8007a9c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	7c12      	ldrb	r2, [r2, #16]
 8007a90:	f107 0108 	add.w	r1, r7, #8
 8007a94:	4610      	mov	r0, r2
 8007a96:	4798      	blx	r3
 8007a98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a9a:	e091      	b.n	8007bc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 faad 	bl	8007ffe <USBD_CtlError>
        err++;
 8007aa4:	7afb      	ldrb	r3, [r7, #11]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	72fb      	strb	r3, [r7, #11]
      break;
 8007aaa:	e089      	b.n	8007bc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00b      	beq.n	8007ad0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	7c12      	ldrb	r2, [r2, #16]
 8007ac4:	f107 0108 	add.w	r1, r7, #8
 8007ac8:	4610      	mov	r0, r2
 8007aca:	4798      	blx	r3
 8007acc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ace:	e077      	b.n	8007bc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007ad0:	6839      	ldr	r1, [r7, #0]
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fa93 	bl	8007ffe <USBD_CtlError>
        err++;
 8007ad8:	7afb      	ldrb	r3, [r7, #11]
 8007ada:	3301      	adds	r3, #1
 8007adc:	72fb      	strb	r3, [r7, #11]
      break;
 8007ade:	e06f      	b.n	8007bc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00b      	beq.n	8007b04 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	7c12      	ldrb	r2, [r2, #16]
 8007af8:	f107 0108 	add.w	r1, r7, #8
 8007afc:	4610      	mov	r0, r2
 8007afe:	4798      	blx	r3
 8007b00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b02:	e05d      	b.n	8007bc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fa79 	bl	8007ffe <USBD_CtlError>
        err++;
 8007b0c:	7afb      	ldrb	r3, [r7, #11]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	72fb      	strb	r3, [r7, #11]
      break;
 8007b12:	e055      	b.n	8007bc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00b      	beq.n	8007b38 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	7c12      	ldrb	r2, [r2, #16]
 8007b2c:	f107 0108 	add.w	r1, r7, #8
 8007b30:	4610      	mov	r0, r2
 8007b32:	4798      	blx	r3
 8007b34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b36:	e043      	b.n	8007bc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fa5f 	bl	8007ffe <USBD_CtlError>
        err++;
 8007b40:	7afb      	ldrb	r3, [r7, #11]
 8007b42:	3301      	adds	r3, #1
 8007b44:	72fb      	strb	r3, [r7, #11]
      break;
 8007b46:	e03b      	b.n	8007bc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00b      	beq.n	8007b6c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	7c12      	ldrb	r2, [r2, #16]
 8007b60:	f107 0108 	add.w	r1, r7, #8
 8007b64:	4610      	mov	r0, r2
 8007b66:	4798      	blx	r3
 8007b68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b6a:	e029      	b.n	8007bc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007b6c:	6839      	ldr	r1, [r7, #0]
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fa45 	bl	8007ffe <USBD_CtlError>
        err++;
 8007b74:	7afb      	ldrb	r3, [r7, #11]
 8007b76:	3301      	adds	r3, #1
 8007b78:	72fb      	strb	r3, [r7, #11]
      break;
 8007b7a:	e021      	b.n	8007bc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00b      	beq.n	8007ba0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	7c12      	ldrb	r2, [r2, #16]
 8007b94:	f107 0108 	add.w	r1, r7, #8
 8007b98:	4610      	mov	r0, r2
 8007b9a:	4798      	blx	r3
 8007b9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b9e:	e00f      	b.n	8007bc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fa2b 	bl	8007ffe <USBD_CtlError>
        err++;
 8007ba8:	7afb      	ldrb	r3, [r7, #11]
 8007baa:	3301      	adds	r3, #1
 8007bac:	72fb      	strb	r3, [r7, #11]
      break;
 8007bae:	e007      	b.n	8007bc0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fa23 	bl	8007ffe <USBD_CtlError>
      err++;
 8007bb8:	7afb      	ldrb	r3, [r7, #11]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007bbe:	bf00      	nop
    }
    break;
 8007bc0:	e037      	b.n	8007c32 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	7c1b      	ldrb	r3, [r3, #16]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d109      	bne.n	8007bde <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd2:	f107 0208 	add.w	r2, r7, #8
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	4798      	blx	r3
 8007bda:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007bdc:	e029      	b.n	8007c32 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fa0c 	bl	8007ffe <USBD_CtlError>
      err++;
 8007be6:	7afb      	ldrb	r3, [r7, #11]
 8007be8:	3301      	adds	r3, #1
 8007bea:	72fb      	strb	r3, [r7, #11]
    break;
 8007bec:	e021      	b.n	8007c32 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	7c1b      	ldrb	r3, [r3, #16]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10d      	bne.n	8007c12 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfe:	f107 0208 	add.w	r2, r7, #8
 8007c02:	4610      	mov	r0, r2
 8007c04:	4798      	blx	r3
 8007c06:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	2207      	movs	r2, #7
 8007c0e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007c10:	e00f      	b.n	8007c32 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007c12:	6839      	ldr	r1, [r7, #0]
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f9f2 	bl	8007ffe <USBD_CtlError>
      err++;
 8007c1a:	7afb      	ldrb	r3, [r7, #11]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	72fb      	strb	r3, [r7, #11]
    break;
 8007c20:	e007      	b.n	8007c32 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f9ea 	bl	8007ffe <USBD_CtlError>
    err++;
 8007c2a:	7afb      	ldrb	r3, [r7, #11]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	72fb      	strb	r3, [r7, #11]
    break;
 8007c30:	bf00      	nop
  }

  if (err != 0U)
 8007c32:	7afb      	ldrb	r3, [r7, #11]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d11e      	bne.n	8007c76 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	88db      	ldrh	r3, [r3, #6]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d016      	beq.n	8007c6e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007c40:	893b      	ldrh	r3, [r7, #8]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00e      	beq.n	8007c64 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	88da      	ldrh	r2, [r3, #6]
 8007c4a:	893b      	ldrh	r3, [r7, #8]
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	bf28      	it	cs
 8007c50:	4613      	movcs	r3, r2
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c56:	893b      	ldrh	r3, [r7, #8]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	68f9      	ldr	r1, [r7, #12]
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fa3f 	bl	80080e0 <USBD_CtlSendData>
 8007c62:	e009      	b.n	8007c78 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f9c9 	bl	8007ffe <USBD_CtlError>
 8007c6c:	e004      	b.n	8007c78 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fa90 	bl	8008194 <USBD_CtlSendStatus>
 8007c74:	e000      	b.n	8007c78 <USBD_GetDescriptor+0x2cc>
    return;
 8007c76:	bf00      	nop
    }
  }
}
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop

08007c80 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	889b      	ldrh	r3, [r3, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d130      	bne.n	8007cf4 <USBD_SetAddress+0x74>
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	88db      	ldrh	r3, [r3, #6]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d12c      	bne.n	8007cf4 <USBD_SetAddress+0x74>
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	885b      	ldrh	r3, [r3, #2]
 8007c9e:	2b7f      	cmp	r3, #127	; 0x7f
 8007ca0:	d828      	bhi.n	8007cf4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	885b      	ldrh	r3, [r3, #2]
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb4:	2b03      	cmp	r3, #3
 8007cb6:	d104      	bne.n	8007cc2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f99f 	bl	8007ffe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cc0:	e01d      	b.n	8007cfe <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	7bfa      	ldrb	r2, [r7, #15]
 8007cc6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fef2 	bl	8008ab8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fa5d 	bl	8008194 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d004      	beq.n	8007cea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ce8:	e009      	b.n	8007cfe <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf2:	e004      	b.n	8007cfe <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f981 	bl	8007ffe <USBD_CtlError>
  }
}
 8007cfc:	bf00      	nop
 8007cfe:	bf00      	nop
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
	...

08007d08 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	885b      	ldrh	r3, [r3, #2]
 8007d1a:	b2da      	uxtb	r2, r3
 8007d1c:	4b4b      	ldr	r3, [pc, #300]	; (8007e4c <USBD_SetConfig+0x144>)
 8007d1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d20:	4b4a      	ldr	r3, [pc, #296]	; (8007e4c <USBD_SetConfig+0x144>)
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d905      	bls.n	8007d34 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f967 	bl	8007ffe <USBD_CtlError>
    return USBD_FAIL;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e087      	b.n	8007e44 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d002      	beq.n	8007d44 <USBD_SetConfig+0x3c>
 8007d3e:	2b03      	cmp	r3, #3
 8007d40:	d025      	beq.n	8007d8e <USBD_SetConfig+0x86>
 8007d42:	e071      	b.n	8007e28 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007d44:	4b41      	ldr	r3, [pc, #260]	; (8007e4c <USBD_SetConfig+0x144>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d01c      	beq.n	8007d86 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007d4c:	4b3f      	ldr	r3, [pc, #252]	; (8007e4c <USBD_SetConfig+0x144>)
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	461a      	mov	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d56:	4b3d      	ldr	r3, [pc, #244]	; (8007e4c <USBD_SetConfig+0x144>)
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f7ff f999 	bl	8007094 <USBD_SetClassConfig>
 8007d62:	4603      	mov	r3, r0
 8007d64:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007d66:	7bfb      	ldrb	r3, [r7, #15]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d004      	beq.n	8007d76 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f945 	bl	8007ffe <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007d74:	e065      	b.n	8007e42 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fa0c 	bl	8008194 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2203      	movs	r2, #3
 8007d80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007d84:	e05d      	b.n	8007e42 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fa04 	bl	8008194 <USBD_CtlSendStatus>
    break;
 8007d8c:	e059      	b.n	8007e42 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007d8e:	4b2f      	ldr	r3, [pc, #188]	; (8007e4c <USBD_SetConfig+0x144>)
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d112      	bne.n	8007dbc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2202      	movs	r2, #2
 8007d9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007d9e:	4b2b      	ldr	r3, [pc, #172]	; (8007e4c <USBD_SetConfig+0x144>)
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	461a      	mov	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007da8:	4b28      	ldr	r3, [pc, #160]	; (8007e4c <USBD_SetConfig+0x144>)
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	4619      	mov	r1, r3
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f7ff f98c 	bl	80070cc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f9ed 	bl	8008194 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007dba:	e042      	b.n	8007e42 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007dbc:	4b23      	ldr	r3, [pc, #140]	; (8007e4c <USBD_SetConfig+0x144>)
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d02a      	beq.n	8007e20 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7ff f97a 	bl	80070cc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007dd8:	4b1c      	ldr	r3, [pc, #112]	; (8007e4c <USBD_SetConfig+0x144>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	461a      	mov	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007de2:	4b1a      	ldr	r3, [pc, #104]	; (8007e4c <USBD_SetConfig+0x144>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	4619      	mov	r1, r3
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff f953 	bl	8007094 <USBD_SetClassConfig>
 8007dee:	4603      	mov	r3, r0
 8007df0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00f      	beq.n	8007e18 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 f8ff 	bl	8007ffe <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	4619      	mov	r1, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7ff f95f 	bl	80070cc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2202      	movs	r2, #2
 8007e12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007e16:	e014      	b.n	8007e42 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f9bb 	bl	8008194 <USBD_CtlSendStatus>
    break;
 8007e1e:	e010      	b.n	8007e42 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 f9b7 	bl	8008194 <USBD_CtlSendStatus>
    break;
 8007e26:	e00c      	b.n	8007e42 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007e28:	6839      	ldr	r1, [r7, #0]
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f8e7 	bl	8007ffe <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e30:	4b06      	ldr	r3, [pc, #24]	; (8007e4c <USBD_SetConfig+0x144>)
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	4619      	mov	r1, r3
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7ff f948 	bl	80070cc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e40:	bf00      	nop
  }

  return ret;
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	20000378 	.word	0x20000378

08007e50 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	88db      	ldrh	r3, [r3, #6]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d004      	beq.n	8007e6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e62:	6839      	ldr	r1, [r7, #0]
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 f8ca 	bl	8007ffe <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007e6a:	e022      	b.n	8007eb2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	dc02      	bgt.n	8007e7c <USBD_GetConfig+0x2c>
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	dc03      	bgt.n	8007e82 <USBD_GetConfig+0x32>
 8007e7a:	e015      	b.n	8007ea8 <USBD_GetConfig+0x58>
 8007e7c:	2b03      	cmp	r3, #3
 8007e7e:	d00b      	beq.n	8007e98 <USBD_GetConfig+0x48>
 8007e80:	e012      	b.n	8007ea8 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3308      	adds	r3, #8
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f925 	bl	80080e0 <USBD_CtlSendData>
      break;
 8007e96:	e00c      	b.n	8007eb2 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f91d 	bl	80080e0 <USBD_CtlSendData>
      break;
 8007ea6:	e004      	b.n	8007eb2 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f8a7 	bl	8007ffe <USBD_CtlError>
      break;
 8007eb0:	bf00      	nop
}
 8007eb2:	bf00      	nop
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d81e      	bhi.n	8007f0e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	88db      	ldrh	r3, [r3, #6]
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d004      	beq.n	8007ee2 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f88f 	bl	8007ffe <USBD_CtlError>
      break;
 8007ee0:	e01a      	b.n	8007f18 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d005      	beq.n	8007efe <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	f043 0202 	orr.w	r2, r3, #2
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	330c      	adds	r3, #12
 8007f02:	2202      	movs	r2, #2
 8007f04:	4619      	mov	r1, r3
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f8ea 	bl	80080e0 <USBD_CtlSendData>
    break;
 8007f0c:	e004      	b.n	8007f18 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007f0e:	6839      	ldr	r1, [r7, #0]
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f874 	bl	8007ffe <USBD_CtlError>
    break;
 8007f16:	bf00      	nop
  }
}
 8007f18:	bf00      	nop
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	885b      	ldrh	r3, [r3, #2]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d106      	bne.n	8007f40 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f92a 	bl	8008194 <USBD_CtlSendStatus>
  }
}
 8007f40:	bf00      	nop
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d80b      	bhi.n	8007f76 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	885b      	ldrh	r3, [r3, #2]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d10c      	bne.n	8007f80 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f910 	bl	8008194 <USBD_CtlSendStatus>
      }
      break;
 8007f74:	e004      	b.n	8007f80 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f840 	bl	8007ffe <USBD_CtlError>
      break;
 8007f7e:	e000      	b.n	8007f82 <USBD_ClrFeature+0x3a>
      break;
 8007f80:	bf00      	nop
  }
}
 8007f82:	bf00      	nop
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b084      	sub	sp, #16
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	781a      	ldrb	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	781a      	ldrb	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f7ff fac6 	bl	8007546 <SWAPBYTE>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f7ff fab9 	bl	8007546 <SWAPBYTE>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f7ff faac 	bl	8007546 <SWAPBYTE>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	80da      	strh	r2, [r3, #6]
}
 8007ff6:	bf00      	nop
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b082      	sub	sp, #8
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008008:	2180      	movs	r1, #128	; 0x80
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fcea 	bl	80089e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008010:	2100      	movs	r1, #0
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fce6 	bl	80089e4 <USBD_LL_StallEP>
}
 8008018:	bf00      	nop
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800802c:	2300      	movs	r3, #0
 800802e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d036      	beq.n	80080a4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800803a:	6938      	ldr	r0, [r7, #16]
 800803c:	f000 f836 	bl	80080ac <USBD_GetLen>
 8008040:	4603      	mov	r3, r0
 8008042:	3301      	adds	r3, #1
 8008044:	b29b      	uxth	r3, r3
 8008046:	005b      	lsls	r3, r3, #1
 8008048:	b29a      	uxth	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800804e:	7dfb      	ldrb	r3, [r7, #23]
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	4413      	add	r3, r2
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	7812      	ldrb	r2, [r2, #0]
 8008058:	701a      	strb	r2, [r3, #0]
  idx++;
 800805a:	7dfb      	ldrb	r3, [r7, #23]
 800805c:	3301      	adds	r3, #1
 800805e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008060:	7dfb      	ldrb	r3, [r7, #23]
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	4413      	add	r3, r2
 8008066:	2203      	movs	r2, #3
 8008068:	701a      	strb	r2, [r3, #0]
  idx++;
 800806a:	7dfb      	ldrb	r3, [r7, #23]
 800806c:	3301      	adds	r3, #1
 800806e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008070:	e013      	b.n	800809a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008072:	7dfb      	ldrb	r3, [r7, #23]
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	4413      	add	r3, r2
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	7812      	ldrb	r2, [r2, #0]
 800807c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	3301      	adds	r3, #1
 8008082:	613b      	str	r3, [r7, #16]
    idx++;
 8008084:	7dfb      	ldrb	r3, [r7, #23]
 8008086:	3301      	adds	r3, #1
 8008088:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800808a:	7dfb      	ldrb	r3, [r7, #23]
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	4413      	add	r3, r2
 8008090:	2200      	movs	r2, #0
 8008092:	701a      	strb	r2, [r3, #0]
    idx++;
 8008094:	7dfb      	ldrb	r3, [r7, #23]
 8008096:	3301      	adds	r3, #1
 8008098:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1e7      	bne.n	8008072 <USBD_GetString+0x52>
 80080a2:	e000      	b.n	80080a6 <USBD_GetString+0x86>
    return;
 80080a4:	bf00      	nop
  }
}
 80080a6:	3718      	adds	r7, #24
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80080b4:	2300      	movs	r3, #0
 80080b6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80080bc:	e005      	b.n	80080ca <USBD_GetLen+0x1e>
  {
    len++;
 80080be:	7bfb      	ldrb	r3, [r7, #15]
 80080c0:	3301      	adds	r3, #1
 80080c2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	3301      	adds	r3, #1
 80080c8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1f5      	bne.n	80080be <USBD_GetLen+0x12>
  }

  return len;
 80080d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2202      	movs	r2, #2
 80080f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	2100      	movs	r1, #0
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f000 fcf5 	bl	8008af6 <USBD_LL_Transmit>

  return USBD_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b084      	sub	sp, #16
 800811a:	af00      	add	r7, sp, #0
 800811c:	60f8      	str	r0, [r7, #12]
 800811e:	60b9      	str	r1, [r7, #8]
 8008120:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	2100      	movs	r1, #0
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 fce4 	bl	8008af6 <USBD_LL_Transmit>

  return USBD_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2203      	movs	r2, #3
 8008148:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	2100      	movs	r1, #0
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 fce8 	bl	8008b38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b084      	sub	sp, #16
 8008176:	af00      	add	r7, sp, #0
 8008178:	60f8      	str	r0, [r7, #12]
 800817a:	60b9      	str	r1, [r7, #8]
 800817c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	2100      	movs	r1, #0
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f000 fcd7 	bl	8008b38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2204      	movs	r2, #4
 80081a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80081a4:	2300      	movs	r3, #0
 80081a6:	2200      	movs	r2, #0
 80081a8:	2100      	movs	r1, #0
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fca3 	bl	8008af6 <USBD_LL_Transmit>

  return USBD_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b082      	sub	sp, #8
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2205      	movs	r2, #5
 80081c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081ca:	2300      	movs	r3, #0
 80081cc:	2200      	movs	r2, #0
 80081ce:	2100      	movs	r1, #0
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fcb1 	bl	8008b38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80081e4:	2200      	movs	r2, #0
 80081e6:	4912      	ldr	r1, [pc, #72]	; (8008230 <MX_USB_DEVICE_Init+0x50>)
 80081e8:	4812      	ldr	r0, [pc, #72]	; (8008234 <MX_USB_DEVICE_Init+0x54>)
 80081ea:	f7fe fee5 	bl	8006fb8 <USBD_Init>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d001      	beq.n	80081f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80081f4:	f7f9 f8f8 	bl	80013e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80081f8:	490f      	ldr	r1, [pc, #60]	; (8008238 <MX_USB_DEVICE_Init+0x58>)
 80081fa:	480e      	ldr	r0, [pc, #56]	; (8008234 <MX_USB_DEVICE_Init+0x54>)
 80081fc:	f7fe ff12 	bl	8007024 <USBD_RegisterClass>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d001      	beq.n	800820a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008206:	f7f9 f8ef 	bl	80013e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800820a:	490c      	ldr	r1, [pc, #48]	; (800823c <MX_USB_DEVICE_Init+0x5c>)
 800820c:	4809      	ldr	r0, [pc, #36]	; (8008234 <MX_USB_DEVICE_Init+0x54>)
 800820e:	f7fe fe37 	bl	8006e80 <USBD_CDC_RegisterInterface>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d001      	beq.n	800821c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008218:	f7f9 f8e6 	bl	80013e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800821c:	4805      	ldr	r0, [pc, #20]	; (8008234 <MX_USB_DEVICE_Init+0x54>)
 800821e:	f7fe ff22 	bl	8007066 <USBD_Start>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d001      	beq.n	800822c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008228:	f7f9 f8de 	bl	80013e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800822c:	bf00      	nop
 800822e:	bd80      	pop	{r7, pc}
 8008230:	20000138 	.word	0x20000138
 8008234:	200004fc 	.word	0x200004fc
 8008238:	20000018 	.word	0x20000018
 800823c:	20000124 	.word	0x20000124

08008240 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008244:	2200      	movs	r2, #0
 8008246:	4905      	ldr	r1, [pc, #20]	; (800825c <CDC_Init_FS+0x1c>)
 8008248:	4805      	ldr	r0, [pc, #20]	; (8008260 <CDC_Init_FS+0x20>)
 800824a:	f7fe fe2e 	bl	8006eaa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800824e:	4905      	ldr	r1, [pc, #20]	; (8008264 <CDC_Init_FS+0x24>)
 8008250:	4803      	ldr	r0, [pc, #12]	; (8008260 <CDC_Init_FS+0x20>)
 8008252:	f7fe fe43 	bl	8006edc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008256:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008258:	4618      	mov	r0, r3
 800825a:	bd80      	pop	{r7, pc}
 800825c:	20000fcc 	.word	0x20000fcc
 8008260:	200004fc 	.word	0x200004fc
 8008264:	200007cc 	.word	0x200007cc

08008268 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008268:	b480      	push	{r7}
 800826a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800826c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800826e:	4618      	mov	r0, r3
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	4603      	mov	r3, r0
 8008280:	6039      	str	r1, [r7, #0]
 8008282:	71fb      	strb	r3, [r7, #7]
 8008284:	4613      	mov	r3, r2
 8008286:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008288:	79fb      	ldrb	r3, [r7, #7]
 800828a:	2b23      	cmp	r3, #35	; 0x23
 800828c:	d85c      	bhi.n	8008348 <CDC_Control_FS+0xd0>
 800828e:	a201      	add	r2, pc, #4	; (adr r2, 8008294 <CDC_Control_FS+0x1c>)
 8008290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008294:	08008349 	.word	0x08008349
 8008298:	08008349 	.word	0x08008349
 800829c:	08008349 	.word	0x08008349
 80082a0:	08008349 	.word	0x08008349
 80082a4:	08008349 	.word	0x08008349
 80082a8:	08008349 	.word	0x08008349
 80082ac:	08008349 	.word	0x08008349
 80082b0:	08008349 	.word	0x08008349
 80082b4:	08008349 	.word	0x08008349
 80082b8:	08008349 	.word	0x08008349
 80082bc:	08008349 	.word	0x08008349
 80082c0:	08008349 	.word	0x08008349
 80082c4:	08008349 	.word	0x08008349
 80082c8:	08008349 	.word	0x08008349
 80082cc:	08008349 	.word	0x08008349
 80082d0:	08008349 	.word	0x08008349
 80082d4:	08008349 	.word	0x08008349
 80082d8:	08008349 	.word	0x08008349
 80082dc:	08008349 	.word	0x08008349
 80082e0:	08008349 	.word	0x08008349
 80082e4:	08008349 	.word	0x08008349
 80082e8:	08008349 	.word	0x08008349
 80082ec:	08008349 	.word	0x08008349
 80082f0:	08008349 	.word	0x08008349
 80082f4:	08008349 	.word	0x08008349
 80082f8:	08008349 	.word	0x08008349
 80082fc:	08008349 	.word	0x08008349
 8008300:	08008349 	.word	0x08008349
 8008304:	08008349 	.word	0x08008349
 8008308:	08008349 	.word	0x08008349
 800830c:	08008349 	.word	0x08008349
 8008310:	08008349 	.word	0x08008349
 8008314:	08008325 	.word	0x08008325
 8008318:	08008337 	.word	0x08008337
 800831c:	08008349 	.word	0x08008349
 8008320:	08008349 	.word	0x08008349
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8008324:	4b0c      	ldr	r3, [pc, #48]	; (8008358 <CDC_Control_FS+0xe0>)
 8008326:	683a      	ldr	r2, [r7, #0]
 8008328:	6810      	ldr	r0, [r2, #0]
 800832a:	6018      	str	r0, [r3, #0]
 800832c:	8891      	ldrh	r1, [r2, #4]
 800832e:	7992      	ldrb	r2, [r2, #6]
 8008330:	8099      	strh	r1, [r3, #4]
 8008332:	719a      	strb	r2, [r3, #6]
    break;
 8008334:	e009      	b.n	800834a <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
        memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	4a07      	ldr	r2, [pc, #28]	; (8008358 <CDC_Control_FS+0xe0>)
 800833a:	6810      	ldr	r0, [r2, #0]
 800833c:	6018      	str	r0, [r3, #0]
 800833e:	8891      	ldrh	r1, [r2, #4]
 8008340:	7992      	ldrb	r2, [r2, #6]
 8008342:	8099      	strh	r1, [r3, #4]
 8008344:	719a      	strb	r2, [r3, #6]
    break;
 8008346:	e000      	b.n	800834a <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008348:	bf00      	nop
  }

  return (USBD_OK);
 800834a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800834c:	4618      	mov	r0, r3
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr
 8008358:	2000011c 	.word	0x2000011c

0800835c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008366:	6879      	ldr	r1, [r7, #4]
 8008368:	4805      	ldr	r0, [pc, #20]	; (8008380 <CDC_Receive_FS+0x24>)
 800836a:	f7fe fdb7 	bl	8006edc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800836e:	4804      	ldr	r0, [pc, #16]	; (8008380 <CDC_Receive_FS+0x24>)
 8008370:	f7fe fdf8 	bl	8006f64 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008374:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008376:	4618      	mov	r0, r3
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	200004fc 	.word	0x200004fc

08008384 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	460b      	mov	r3, r1
 800838e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008394:	4b0d      	ldr	r3, [pc, #52]	; (80083cc <CDC_Transmit_FS+0x48>)
 8008396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800839a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d001      	beq.n	80083aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e00b      	b.n	80083c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80083aa:	887b      	ldrh	r3, [r7, #2]
 80083ac:	461a      	mov	r2, r3
 80083ae:	6879      	ldr	r1, [r7, #4]
 80083b0:	4806      	ldr	r0, [pc, #24]	; (80083cc <CDC_Transmit_FS+0x48>)
 80083b2:	f7fe fd7a 	bl	8006eaa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80083b6:	4805      	ldr	r0, [pc, #20]	; (80083cc <CDC_Transmit_FS+0x48>)
 80083b8:	f7fe fda4 	bl	8006f04 <USBD_CDC_TransmitPacket>
 80083bc:	4603      	mov	r3, r0
 80083be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80083c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	200004fc 	.word	0x200004fc

080083d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b087      	sub	sp, #28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	4613      	mov	r3, r2
 80083dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80083e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	371c      	adds	r7, #28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
	...

080083f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	4603      	mov	r3, r0
 80083fc:	6039      	str	r1, [r7, #0]
 80083fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	2212      	movs	r2, #18
 8008404:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008406:	4b03      	ldr	r3, [pc, #12]	; (8008414 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008408:	4618      	mov	r0, r3
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	20000154 	.word	0x20000154

08008418 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	4603      	mov	r3, r0
 8008420:	6039      	str	r1, [r7, #0]
 8008422:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	2204      	movs	r2, #4
 8008428:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800842a:	4b03      	ldr	r3, [pc, #12]	; (8008438 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800842c:	4618      	mov	r0, r3
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr
 8008438:	20000168 	.word	0x20000168

0800843c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	4603      	mov	r3, r0
 8008444:	6039      	str	r1, [r7, #0]
 8008446:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008448:	79fb      	ldrb	r3, [r7, #7]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d105      	bne.n	800845a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	4907      	ldr	r1, [pc, #28]	; (8008470 <USBD_FS_ProductStrDescriptor+0x34>)
 8008452:	4808      	ldr	r0, [pc, #32]	; (8008474 <USBD_FS_ProductStrDescriptor+0x38>)
 8008454:	f7ff fde4 	bl	8008020 <USBD_GetString>
 8008458:	e004      	b.n	8008464 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	4904      	ldr	r1, [pc, #16]	; (8008470 <USBD_FS_ProductStrDescriptor+0x34>)
 800845e:	4805      	ldr	r0, [pc, #20]	; (8008474 <USBD_FS_ProductStrDescriptor+0x38>)
 8008460:	f7ff fdde 	bl	8008020 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008464:	4b02      	ldr	r3, [pc, #8]	; (8008470 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008466:	4618      	mov	r0, r3
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	200017cc 	.word	0x200017cc
 8008474:	0800ba34 	.word	0x0800ba34

08008478 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	4603      	mov	r3, r0
 8008480:	6039      	str	r1, [r7, #0]
 8008482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	4904      	ldr	r1, [pc, #16]	; (8008498 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008488:	4804      	ldr	r0, [pc, #16]	; (800849c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800848a:	f7ff fdc9 	bl	8008020 <USBD_GetString>
  return USBD_StrDesc;
 800848e:	4b02      	ldr	r3, [pc, #8]	; (8008498 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008490:	4618      	mov	r0, r3
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	200017cc 	.word	0x200017cc
 800849c:	0800ba4c 	.word	0x0800ba4c

080084a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	4603      	mov	r3, r0
 80084a8:	6039      	str	r1, [r7, #0]
 80084aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	221a      	movs	r2, #26
 80084b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80084b2:	f000 f843 	bl	800853c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80084b6:	4b02      	ldr	r3, [pc, #8]	; (80084c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	2000016c 	.word	0x2000016c

080084c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	4603      	mov	r3, r0
 80084cc:	6039      	str	r1, [r7, #0]
 80084ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80084d0:	79fb      	ldrb	r3, [r7, #7]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d105      	bne.n	80084e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	4907      	ldr	r1, [pc, #28]	; (80084f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084da:	4808      	ldr	r0, [pc, #32]	; (80084fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80084dc:	f7ff fda0 	bl	8008020 <USBD_GetString>
 80084e0:	e004      	b.n	80084ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084e2:	683a      	ldr	r2, [r7, #0]
 80084e4:	4904      	ldr	r1, [pc, #16]	; (80084f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084e6:	4805      	ldr	r0, [pc, #20]	; (80084fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80084e8:	f7ff fd9a 	bl	8008020 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084ec:	4b02      	ldr	r3, [pc, #8]	; (80084f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	200017cc 	.word	0x200017cc
 80084fc:	0800ba60 	.word	0x0800ba60

08008500 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	4603      	mov	r3, r0
 8008508:	6039      	str	r1, [r7, #0]
 800850a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800850c:	79fb      	ldrb	r3, [r7, #7]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d105      	bne.n	800851e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	4907      	ldr	r1, [pc, #28]	; (8008534 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008516:	4808      	ldr	r0, [pc, #32]	; (8008538 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008518:	f7ff fd82 	bl	8008020 <USBD_GetString>
 800851c:	e004      	b.n	8008528 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	4904      	ldr	r1, [pc, #16]	; (8008534 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008522:	4805      	ldr	r0, [pc, #20]	; (8008538 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008524:	f7ff fd7c 	bl	8008020 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008528:	4b02      	ldr	r3, [pc, #8]	; (8008534 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800852a:	4618      	mov	r0, r3
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	200017cc 	.word	0x200017cc
 8008538:	0800ba6c 	.word	0x0800ba6c

0800853c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008542:	4b0f      	ldr	r3, [pc, #60]	; (8008580 <Get_SerialNum+0x44>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008548:	4b0e      	ldr	r3, [pc, #56]	; (8008584 <Get_SerialNum+0x48>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800854e:	4b0e      	ldr	r3, [pc, #56]	; (8008588 <Get_SerialNum+0x4c>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4413      	add	r3, r2
 800855a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d009      	beq.n	8008576 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008562:	2208      	movs	r2, #8
 8008564:	4909      	ldr	r1, [pc, #36]	; (800858c <Get_SerialNum+0x50>)
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f000 f814 	bl	8008594 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800856c:	2204      	movs	r2, #4
 800856e:	4908      	ldr	r1, [pc, #32]	; (8008590 <Get_SerialNum+0x54>)
 8008570:	68b8      	ldr	r0, [r7, #8]
 8008572:	f000 f80f 	bl	8008594 <IntToUnicode>
  }
}
 8008576:	bf00      	nop
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	1fff7a10 	.word	0x1fff7a10
 8008584:	1fff7a14 	.word	0x1fff7a14
 8008588:	1fff7a18 	.word	0x1fff7a18
 800858c:	2000016e 	.word	0x2000016e
 8008590:	2000017e 	.word	0x2000017e

08008594 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008594:	b480      	push	{r7}
 8008596:	b087      	sub	sp, #28
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	4613      	mov	r3, r2
 80085a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80085a2:	2300      	movs	r3, #0
 80085a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80085a6:	2300      	movs	r3, #0
 80085a8:	75fb      	strb	r3, [r7, #23]
 80085aa:	e027      	b.n	80085fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	0f1b      	lsrs	r3, r3, #28
 80085b0:	2b09      	cmp	r3, #9
 80085b2:	d80b      	bhi.n	80085cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	0f1b      	lsrs	r3, r3, #28
 80085b8:	b2da      	uxtb	r2, r3
 80085ba:	7dfb      	ldrb	r3, [r7, #23]
 80085bc:	005b      	lsls	r3, r3, #1
 80085be:	4619      	mov	r1, r3
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	440b      	add	r3, r1
 80085c4:	3230      	adds	r2, #48	; 0x30
 80085c6:	b2d2      	uxtb	r2, r2
 80085c8:	701a      	strb	r2, [r3, #0]
 80085ca:	e00a      	b.n	80085e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	0f1b      	lsrs	r3, r3, #28
 80085d0:	b2da      	uxtb	r2, r3
 80085d2:	7dfb      	ldrb	r3, [r7, #23]
 80085d4:	005b      	lsls	r3, r3, #1
 80085d6:	4619      	mov	r1, r3
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	440b      	add	r3, r1
 80085dc:	3237      	adds	r2, #55	; 0x37
 80085de:	b2d2      	uxtb	r2, r2
 80085e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	011b      	lsls	r3, r3, #4
 80085e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80085e8:	7dfb      	ldrb	r3, [r7, #23]
 80085ea:	005b      	lsls	r3, r3, #1
 80085ec:	3301      	adds	r3, #1
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	4413      	add	r3, r2
 80085f2:	2200      	movs	r2, #0
 80085f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80085f6:	7dfb      	ldrb	r3, [r7, #23]
 80085f8:	3301      	adds	r3, #1
 80085fa:	75fb      	strb	r3, [r7, #23]
 80085fc:	7dfa      	ldrb	r2, [r7, #23]
 80085fe:	79fb      	ldrb	r3, [r7, #7]
 8008600:	429a      	cmp	r2, r3
 8008602:	d3d3      	bcc.n	80085ac <IntToUnicode+0x18>
  }
}
 8008604:	bf00      	nop
 8008606:	bf00      	nop
 8008608:	371c      	adds	r7, #28
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
	...

08008614 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b08a      	sub	sp, #40	; 0x28
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800861c:	f107 0314 	add.w	r3, r7, #20
 8008620:	2200      	movs	r2, #0
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	605a      	str	r2, [r3, #4]
 8008626:	609a      	str	r2, [r3, #8]
 8008628:	60da      	str	r2, [r3, #12]
 800862a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008634:	d13a      	bne.n	80086ac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008636:	2300      	movs	r3, #0
 8008638:	613b      	str	r3, [r7, #16]
 800863a:	4b1e      	ldr	r3, [pc, #120]	; (80086b4 <HAL_PCD_MspInit+0xa0>)
 800863c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863e:	4a1d      	ldr	r2, [pc, #116]	; (80086b4 <HAL_PCD_MspInit+0xa0>)
 8008640:	f043 0301 	orr.w	r3, r3, #1
 8008644:	6313      	str	r3, [r2, #48]	; 0x30
 8008646:	4b1b      	ldr	r3, [pc, #108]	; (80086b4 <HAL_PCD_MspInit+0xa0>)
 8008648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864a:	f003 0301 	and.w	r3, r3, #1
 800864e:	613b      	str	r3, [r7, #16]
 8008650:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008652:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008658:	2302      	movs	r3, #2
 800865a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800865c:	2300      	movs	r3, #0
 800865e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008660:	2303      	movs	r3, #3
 8008662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008664:	230a      	movs	r3, #10
 8008666:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008668:	f107 0314 	add.w	r3, r7, #20
 800866c:	4619      	mov	r1, r3
 800866e:	4812      	ldr	r0, [pc, #72]	; (80086b8 <HAL_PCD_MspInit+0xa4>)
 8008670:	f7f9 fdd0 	bl	8002214 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008674:	4b0f      	ldr	r3, [pc, #60]	; (80086b4 <HAL_PCD_MspInit+0xa0>)
 8008676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008678:	4a0e      	ldr	r2, [pc, #56]	; (80086b4 <HAL_PCD_MspInit+0xa0>)
 800867a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800867e:	6353      	str	r3, [r2, #52]	; 0x34
 8008680:	2300      	movs	r3, #0
 8008682:	60fb      	str	r3, [r7, #12]
 8008684:	4b0b      	ldr	r3, [pc, #44]	; (80086b4 <HAL_PCD_MspInit+0xa0>)
 8008686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008688:	4a0a      	ldr	r2, [pc, #40]	; (80086b4 <HAL_PCD_MspInit+0xa0>)
 800868a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800868e:	6453      	str	r3, [r2, #68]	; 0x44
 8008690:	4b08      	ldr	r3, [pc, #32]	; (80086b4 <HAL_PCD_MspInit+0xa0>)
 8008692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008698:	60fb      	str	r3, [r7, #12]
 800869a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800869c:	2200      	movs	r2, #0
 800869e:	2100      	movs	r1, #0
 80086a0:	2043      	movs	r0, #67	; 0x43
 80086a2:	f7f9 fd80 	bl	80021a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80086a6:	2043      	movs	r0, #67	; 0x43
 80086a8:	f7f9 fd99 	bl	80021de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80086ac:	bf00      	nop
 80086ae:	3728      	adds	r7, #40	; 0x28
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	40023800 	.word	0x40023800
 80086b8:	40020000 	.word	0x40020000

080086bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80086d0:	4619      	mov	r1, r3
 80086d2:	4610      	mov	r0, r2
 80086d4:	f7fe fd12 	bl	80070fc <USBD_LL_SetupStage>
}
 80086d8:	bf00      	nop
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80086f2:	78fa      	ldrb	r2, [r7, #3]
 80086f4:	6879      	ldr	r1, [r7, #4]
 80086f6:	4613      	mov	r3, r2
 80086f8:	00db      	lsls	r3, r3, #3
 80086fa:	1a9b      	subs	r3, r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	440b      	add	r3, r1
 8008700:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	78fb      	ldrb	r3, [r7, #3]
 8008708:	4619      	mov	r1, r3
 800870a:	f7fe fd4c 	bl	80071a6 <USBD_LL_DataOutStage>
}
 800870e:	bf00      	nop
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b082      	sub	sp, #8
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	460b      	mov	r3, r1
 8008720:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008728:	78fa      	ldrb	r2, [r7, #3]
 800872a:	6879      	ldr	r1, [r7, #4]
 800872c:	4613      	mov	r3, r2
 800872e:	00db      	lsls	r3, r3, #3
 8008730:	1a9b      	subs	r3, r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	440b      	add	r3, r1
 8008736:	3348      	adds	r3, #72	; 0x48
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	78fb      	ldrb	r3, [r7, #3]
 800873c:	4619      	mov	r1, r3
 800873e:	f7fe fd95 	bl	800726c <USBD_LL_DataInStage>
}
 8008742:	bf00      	nop
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008758:	4618      	mov	r0, r3
 800875a:	f7fe fe99 	bl	8007490 <USBD_LL_SOF>
}
 800875e:	bf00      	nop
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b084      	sub	sp, #16
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800876e:	2301      	movs	r3, #1
 8008770:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	2b02      	cmp	r3, #2
 8008778:	d001      	beq.n	800877e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800877a:	f7f8 fe35 	bl	80013e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008784:	7bfa      	ldrb	r2, [r7, #15]
 8008786:	4611      	mov	r1, r2
 8008788:	4618      	mov	r0, r3
 800878a:	f7fe fe46 	bl	800741a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008794:	4618      	mov	r0, r3
 8008796:	f7fe fdff 	bl	8007398 <USBD_LL_Reset>
}
 800879a:	bf00      	nop
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
	...

080087a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fe fe41 	bl	800743a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	6812      	ldr	r2, [r2, #0]
 80087c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80087ca:	f043 0301 	orr.w	r3, r3, #1
 80087ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a1b      	ldr	r3, [r3, #32]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d005      	beq.n	80087e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80087d8:	4b04      	ldr	r3, [pc, #16]	; (80087ec <HAL_PCD_SuspendCallback+0x48>)
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	4a03      	ldr	r2, [pc, #12]	; (80087ec <HAL_PCD_SuspendCallback+0x48>)
 80087de:	f043 0306 	orr.w	r3, r3, #6
 80087e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80087e4:	bf00      	nop
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	e000ed00 	.word	0xe000ed00

080087f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fe fe30 	bl	8007464 <USBD_LL_Resume>
}
 8008804:	bf00      	nop
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	460b      	mov	r3, r1
 8008816:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800881e:	78fa      	ldrb	r2, [r7, #3]
 8008820:	4611      	mov	r1, r2
 8008822:	4618      	mov	r0, r3
 8008824:	f7fe fe5b 	bl	80074de <USBD_LL_IsoOUTIncomplete>
}
 8008828:	bf00      	nop
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	460b      	mov	r3, r1
 800883a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008842:	78fa      	ldrb	r2, [r7, #3]
 8008844:	4611      	mov	r1, r2
 8008846:	4618      	mov	r0, r3
 8008848:	f7fe fe3c 	bl	80074c4 <USBD_LL_IsoINIncomplete>
}
 800884c:	bf00      	nop
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008862:	4618      	mov	r0, r3
 8008864:	f7fe fe48 	bl	80074f8 <USBD_LL_DevConnected>
}
 8008868:	bf00      	nop
 800886a:	3708      	adds	r7, #8
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800887e:	4618      	mov	r0, r3
 8008880:	f7fe fe45 	bl	800750e <USBD_LL_DevDisconnected>
}
 8008884:	bf00      	nop
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d13c      	bne.n	8008916 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800889c:	4a20      	ldr	r2, [pc, #128]	; (8008920 <USBD_LL_Init+0x94>)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a1e      	ldr	r2, [pc, #120]	; (8008920 <USBD_LL_Init+0x94>)
 80088a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80088ac:	4b1c      	ldr	r3, [pc, #112]	; (8008920 <USBD_LL_Init+0x94>)
 80088ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80088b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80088b4:	4b1a      	ldr	r3, [pc, #104]	; (8008920 <USBD_LL_Init+0x94>)
 80088b6:	2204      	movs	r2, #4
 80088b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80088ba:	4b19      	ldr	r3, [pc, #100]	; (8008920 <USBD_LL_Init+0x94>)
 80088bc:	2202      	movs	r2, #2
 80088be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80088c0:	4b17      	ldr	r3, [pc, #92]	; (8008920 <USBD_LL_Init+0x94>)
 80088c2:	2200      	movs	r2, #0
 80088c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80088c6:	4b16      	ldr	r3, [pc, #88]	; (8008920 <USBD_LL_Init+0x94>)
 80088c8:	2202      	movs	r2, #2
 80088ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80088cc:	4b14      	ldr	r3, [pc, #80]	; (8008920 <USBD_LL_Init+0x94>)
 80088ce:	2200      	movs	r2, #0
 80088d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80088d2:	4b13      	ldr	r3, [pc, #76]	; (8008920 <USBD_LL_Init+0x94>)
 80088d4:	2200      	movs	r2, #0
 80088d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80088d8:	4b11      	ldr	r3, [pc, #68]	; (8008920 <USBD_LL_Init+0x94>)
 80088da:	2200      	movs	r2, #0
 80088dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80088de:	4b10      	ldr	r3, [pc, #64]	; (8008920 <USBD_LL_Init+0x94>)
 80088e0:	2200      	movs	r2, #0
 80088e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80088e4:	4b0e      	ldr	r3, [pc, #56]	; (8008920 <USBD_LL_Init+0x94>)
 80088e6:	2200      	movs	r2, #0
 80088e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80088ea:	480d      	ldr	r0, [pc, #52]	; (8008920 <USBD_LL_Init+0x94>)
 80088ec:	f7f9 ff8e 	bl	800280c <HAL_PCD_Init>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d001      	beq.n	80088fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80088f6:	f7f8 fd77 	bl	80013e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80088fa:	2180      	movs	r1, #128	; 0x80
 80088fc:	4808      	ldr	r0, [pc, #32]	; (8008920 <USBD_LL_Init+0x94>)
 80088fe:	f7fb f8ec 	bl	8003ada <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008902:	2240      	movs	r2, #64	; 0x40
 8008904:	2100      	movs	r1, #0
 8008906:	4806      	ldr	r0, [pc, #24]	; (8008920 <USBD_LL_Init+0x94>)
 8008908:	f7fb f8a0 	bl	8003a4c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800890c:	2280      	movs	r2, #128	; 0x80
 800890e:	2101      	movs	r1, #1
 8008910:	4803      	ldr	r0, [pc, #12]	; (8008920 <USBD_LL_Init+0x94>)
 8008912:	f7fb f89b 	bl	8003a4c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	200019cc 	.word	0x200019cc

08008924 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800893a:	4618      	mov	r0, r3
 800893c:	f7fa f883 	bl	8002a46 <HAL_PCD_Start>
 8008940:	4603      	mov	r3, r0
 8008942:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008944:	7bfb      	ldrb	r3, [r7, #15]
 8008946:	4618      	mov	r0, r3
 8008948:	f000 f92a 	bl	8008ba0 <USBD_Get_USB_Status>
 800894c:	4603      	mov	r3, r0
 800894e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008950:	7bbb      	ldrb	r3, [r7, #14]
}
 8008952:	4618      	mov	r0, r3
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b084      	sub	sp, #16
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
 8008962:	4608      	mov	r0, r1
 8008964:	4611      	mov	r1, r2
 8008966:	461a      	mov	r2, r3
 8008968:	4603      	mov	r3, r0
 800896a:	70fb      	strb	r3, [r7, #3]
 800896c:	460b      	mov	r3, r1
 800896e:	70bb      	strb	r3, [r7, #2]
 8008970:	4613      	mov	r3, r2
 8008972:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008974:	2300      	movs	r3, #0
 8008976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008982:	78bb      	ldrb	r3, [r7, #2]
 8008984:	883a      	ldrh	r2, [r7, #0]
 8008986:	78f9      	ldrb	r1, [r7, #3]
 8008988:	f7fa fc67 	bl	800325a <HAL_PCD_EP_Open>
 800898c:	4603      	mov	r3, r0
 800898e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008990:	7bfb      	ldrb	r3, [r7, #15]
 8008992:	4618      	mov	r0, r3
 8008994:	f000 f904 	bl	8008ba0 <USBD_Get_USB_Status>
 8008998:	4603      	mov	r3, r0
 800899a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800899c:	7bbb      	ldrb	r3, [r7, #14]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b084      	sub	sp, #16
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
 80089ae:	460b      	mov	r3, r1
 80089b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089b2:	2300      	movs	r3, #0
 80089b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089b6:	2300      	movs	r3, #0
 80089b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089c0:	78fa      	ldrb	r2, [r7, #3]
 80089c2:	4611      	mov	r1, r2
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7fa fcb0 	bl	800332a <HAL_PCD_EP_Close>
 80089ca:	4603      	mov	r3, r0
 80089cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
 80089d0:	4618      	mov	r0, r3
 80089d2:	f000 f8e5 	bl	8008ba0 <USBD_Get_USB_Status>
 80089d6:	4603      	mov	r3, r0
 80089d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089da:	7bbb      	ldrb	r3, [r7, #14]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3710      	adds	r7, #16
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	460b      	mov	r3, r1
 80089ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089fe:	78fa      	ldrb	r2, [r7, #3]
 8008a00:	4611      	mov	r1, r2
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fa fd88 	bl	8003518 <HAL_PCD_EP_SetStall>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 f8c6 	bl	8008ba0 <USBD_Get_USB_Status>
 8008a14:	4603      	mov	r3, r0
 8008a16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a3c:	78fa      	ldrb	r2, [r7, #3]
 8008a3e:	4611      	mov	r1, r2
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7fa fdcd 	bl	80035e0 <HAL_PCD_EP_ClrStall>
 8008a46:	4603      	mov	r3, r0
 8008a48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 f8a7 	bl	8008ba0 <USBD_Get_USB_Status>
 8008a52:	4603      	mov	r3, r0
 8008a54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a56:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008a74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	da0b      	bge.n	8008a94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008a7c:	78fb      	ldrb	r3, [r7, #3]
 8008a7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a82:	68f9      	ldr	r1, [r7, #12]
 8008a84:	4613      	mov	r3, r2
 8008a86:	00db      	lsls	r3, r3, #3
 8008a88:	1a9b      	subs	r3, r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	440b      	add	r3, r1
 8008a8e:	333e      	adds	r3, #62	; 0x3e
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	e00b      	b.n	8008aac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008a94:	78fb      	ldrb	r3, [r7, #3]
 8008a96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a9a:	68f9      	ldr	r1, [r7, #12]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	00db      	lsls	r3, r3, #3
 8008aa0:	1a9b      	subs	r3, r3, r2
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	440b      	add	r3, r1
 8008aa6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008aaa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ad2:	78fa      	ldrb	r2, [r7, #3]
 8008ad4:	4611      	mov	r1, r2
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fa fb9a 	bl	8003210 <HAL_PCD_SetAddress>
 8008adc:	4603      	mov	r3, r0
 8008ade:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 f85c 	bl	8008ba0 <USBD_Get_USB_Status>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aec:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b086      	sub	sp, #24
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	60f8      	str	r0, [r7, #12]
 8008afe:	607a      	str	r2, [r7, #4]
 8008b00:	603b      	str	r3, [r7, #0]
 8008b02:	460b      	mov	r3, r1
 8008b04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b06:	2300      	movs	r3, #0
 8008b08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008b14:	7af9      	ldrb	r1, [r7, #11]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	f7fa fcb3 	bl	8003484 <HAL_PCD_EP_Transmit>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b22:	7dfb      	ldrb	r3, [r7, #23]
 8008b24:	4618      	mov	r0, r3
 8008b26:	f000 f83b 	bl	8008ba0 <USBD_Get_USB_Status>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b2e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3718      	adds	r7, #24
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b086      	sub	sp, #24
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	607a      	str	r2, [r7, #4]
 8008b42:	603b      	str	r3, [r7, #0]
 8008b44:	460b      	mov	r3, r1
 8008b46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008b56:	7af9      	ldrb	r1, [r7, #11]
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	f7fa fc2f 	bl	80033be <HAL_PCD_EP_Receive>
 8008b60:	4603      	mov	r3, r0
 8008b62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 f81a 	bl	8008ba0 <USBD_Get_USB_Status>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b70:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3718      	adds	r7, #24
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b082      	sub	sp, #8
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	460b      	mov	r3, r1
 8008b84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b8c:	78fa      	ldrb	r2, [r7, #3]
 8008b8e:	4611      	mov	r1, r2
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7fa fc5f 	bl	8003454 <HAL_PCD_EP_GetRxCount>
 8008b96:	4603      	mov	r3, r0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008baa:	2300      	movs	r3, #0
 8008bac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008bae:	79fb      	ldrb	r3, [r7, #7]
 8008bb0:	2b03      	cmp	r3, #3
 8008bb2:	d817      	bhi.n	8008be4 <USBD_Get_USB_Status+0x44>
 8008bb4:	a201      	add	r2, pc, #4	; (adr r2, 8008bbc <USBD_Get_USB_Status+0x1c>)
 8008bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bba:	bf00      	nop
 8008bbc:	08008bcd 	.word	0x08008bcd
 8008bc0:	08008bd3 	.word	0x08008bd3
 8008bc4:	08008bd9 	.word	0x08008bd9
 8008bc8:	08008bdf 	.word	0x08008bdf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	73fb      	strb	r3, [r7, #15]
    break;
 8008bd0:	e00b      	b.n	8008bea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	73fb      	strb	r3, [r7, #15]
    break;
 8008bd6:	e008      	b.n	8008bea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	73fb      	strb	r3, [r7, #15]
    break;
 8008bdc:	e005      	b.n	8008bea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008bde:	2303      	movs	r3, #3
 8008be0:	73fb      	strb	r3, [r7, #15]
    break;
 8008be2:	e002      	b.n	8008bea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008be4:	2303      	movs	r3, #3
 8008be6:	73fb      	strb	r3, [r7, #15]
    break;
 8008be8:	bf00      	nop
  }
  return usb_status;
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <__errno>:
 8008bf8:	4b01      	ldr	r3, [pc, #4]	; (8008c00 <__errno+0x8>)
 8008bfa:	6818      	ldr	r0, [r3, #0]
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	20000188 	.word	0x20000188

08008c04 <__libc_init_array>:
 8008c04:	b570      	push	{r4, r5, r6, lr}
 8008c06:	4d0d      	ldr	r5, [pc, #52]	; (8008c3c <__libc_init_array+0x38>)
 8008c08:	4c0d      	ldr	r4, [pc, #52]	; (8008c40 <__libc_init_array+0x3c>)
 8008c0a:	1b64      	subs	r4, r4, r5
 8008c0c:	10a4      	asrs	r4, r4, #2
 8008c0e:	2600      	movs	r6, #0
 8008c10:	42a6      	cmp	r6, r4
 8008c12:	d109      	bne.n	8008c28 <__libc_init_array+0x24>
 8008c14:	4d0b      	ldr	r5, [pc, #44]	; (8008c44 <__libc_init_array+0x40>)
 8008c16:	4c0c      	ldr	r4, [pc, #48]	; (8008c48 <__libc_init_array+0x44>)
 8008c18:	f002 febc 	bl	800b994 <_init>
 8008c1c:	1b64      	subs	r4, r4, r5
 8008c1e:	10a4      	asrs	r4, r4, #2
 8008c20:	2600      	movs	r6, #0
 8008c22:	42a6      	cmp	r6, r4
 8008c24:	d105      	bne.n	8008c32 <__libc_init_array+0x2e>
 8008c26:	bd70      	pop	{r4, r5, r6, pc}
 8008c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c2c:	4798      	blx	r3
 8008c2e:	3601      	adds	r6, #1
 8008c30:	e7ee      	b.n	8008c10 <__libc_init_array+0xc>
 8008c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c36:	4798      	blx	r3
 8008c38:	3601      	adds	r6, #1
 8008c3a:	e7f2      	b.n	8008c22 <__libc_init_array+0x1e>
 8008c3c:	0800be7c 	.word	0x0800be7c
 8008c40:	0800be7c 	.word	0x0800be7c
 8008c44:	0800be7c 	.word	0x0800be7c
 8008c48:	0800be80 	.word	0x0800be80

08008c4c <malloc>:
 8008c4c:	4b02      	ldr	r3, [pc, #8]	; (8008c58 <malloc+0xc>)
 8008c4e:	4601      	mov	r1, r0
 8008c50:	6818      	ldr	r0, [r3, #0]
 8008c52:	f000 b863 	b.w	8008d1c <_malloc_r>
 8008c56:	bf00      	nop
 8008c58:	20000188 	.word	0x20000188

08008c5c <free>:
 8008c5c:	4b02      	ldr	r3, [pc, #8]	; (8008c68 <free+0xc>)
 8008c5e:	4601      	mov	r1, r0
 8008c60:	6818      	ldr	r0, [r3, #0]
 8008c62:	f000 b80b 	b.w	8008c7c <_free_r>
 8008c66:	bf00      	nop
 8008c68:	20000188 	.word	0x20000188

08008c6c <memset>:
 8008c6c:	4402      	add	r2, r0
 8008c6e:	4603      	mov	r3, r0
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d100      	bne.n	8008c76 <memset+0xa>
 8008c74:	4770      	bx	lr
 8008c76:	f803 1b01 	strb.w	r1, [r3], #1
 8008c7a:	e7f9      	b.n	8008c70 <memset+0x4>

08008c7c <_free_r>:
 8008c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c7e:	2900      	cmp	r1, #0
 8008c80:	d048      	beq.n	8008d14 <_free_r+0x98>
 8008c82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c86:	9001      	str	r0, [sp, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f1a1 0404 	sub.w	r4, r1, #4
 8008c8e:	bfb8      	it	lt
 8008c90:	18e4      	addlt	r4, r4, r3
 8008c92:	f001 fbc3 	bl	800a41c <__malloc_lock>
 8008c96:	4a20      	ldr	r2, [pc, #128]	; (8008d18 <_free_r+0x9c>)
 8008c98:	9801      	ldr	r0, [sp, #4]
 8008c9a:	6813      	ldr	r3, [r2, #0]
 8008c9c:	4615      	mov	r5, r2
 8008c9e:	b933      	cbnz	r3, 8008cae <_free_r+0x32>
 8008ca0:	6063      	str	r3, [r4, #4]
 8008ca2:	6014      	str	r4, [r2, #0]
 8008ca4:	b003      	add	sp, #12
 8008ca6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008caa:	f001 bbbd 	b.w	800a428 <__malloc_unlock>
 8008cae:	42a3      	cmp	r3, r4
 8008cb0:	d90b      	bls.n	8008cca <_free_r+0x4e>
 8008cb2:	6821      	ldr	r1, [r4, #0]
 8008cb4:	1862      	adds	r2, r4, r1
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	bf04      	itt	eq
 8008cba:	681a      	ldreq	r2, [r3, #0]
 8008cbc:	685b      	ldreq	r3, [r3, #4]
 8008cbe:	6063      	str	r3, [r4, #4]
 8008cc0:	bf04      	itt	eq
 8008cc2:	1852      	addeq	r2, r2, r1
 8008cc4:	6022      	streq	r2, [r4, #0]
 8008cc6:	602c      	str	r4, [r5, #0]
 8008cc8:	e7ec      	b.n	8008ca4 <_free_r+0x28>
 8008cca:	461a      	mov	r2, r3
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	b10b      	cbz	r3, 8008cd4 <_free_r+0x58>
 8008cd0:	42a3      	cmp	r3, r4
 8008cd2:	d9fa      	bls.n	8008cca <_free_r+0x4e>
 8008cd4:	6811      	ldr	r1, [r2, #0]
 8008cd6:	1855      	adds	r5, r2, r1
 8008cd8:	42a5      	cmp	r5, r4
 8008cda:	d10b      	bne.n	8008cf4 <_free_r+0x78>
 8008cdc:	6824      	ldr	r4, [r4, #0]
 8008cde:	4421      	add	r1, r4
 8008ce0:	1854      	adds	r4, r2, r1
 8008ce2:	42a3      	cmp	r3, r4
 8008ce4:	6011      	str	r1, [r2, #0]
 8008ce6:	d1dd      	bne.n	8008ca4 <_free_r+0x28>
 8008ce8:	681c      	ldr	r4, [r3, #0]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	6053      	str	r3, [r2, #4]
 8008cee:	4421      	add	r1, r4
 8008cf0:	6011      	str	r1, [r2, #0]
 8008cf2:	e7d7      	b.n	8008ca4 <_free_r+0x28>
 8008cf4:	d902      	bls.n	8008cfc <_free_r+0x80>
 8008cf6:	230c      	movs	r3, #12
 8008cf8:	6003      	str	r3, [r0, #0]
 8008cfa:	e7d3      	b.n	8008ca4 <_free_r+0x28>
 8008cfc:	6825      	ldr	r5, [r4, #0]
 8008cfe:	1961      	adds	r1, r4, r5
 8008d00:	428b      	cmp	r3, r1
 8008d02:	bf04      	itt	eq
 8008d04:	6819      	ldreq	r1, [r3, #0]
 8008d06:	685b      	ldreq	r3, [r3, #4]
 8008d08:	6063      	str	r3, [r4, #4]
 8008d0a:	bf04      	itt	eq
 8008d0c:	1949      	addeq	r1, r1, r5
 8008d0e:	6021      	streq	r1, [r4, #0]
 8008d10:	6054      	str	r4, [r2, #4]
 8008d12:	e7c7      	b.n	8008ca4 <_free_r+0x28>
 8008d14:	b003      	add	sp, #12
 8008d16:	bd30      	pop	{r4, r5, pc}
 8008d18:	2000037c 	.word	0x2000037c

08008d1c <_malloc_r>:
 8008d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1e:	1ccd      	adds	r5, r1, #3
 8008d20:	f025 0503 	bic.w	r5, r5, #3
 8008d24:	3508      	adds	r5, #8
 8008d26:	2d0c      	cmp	r5, #12
 8008d28:	bf38      	it	cc
 8008d2a:	250c      	movcc	r5, #12
 8008d2c:	2d00      	cmp	r5, #0
 8008d2e:	4606      	mov	r6, r0
 8008d30:	db01      	blt.n	8008d36 <_malloc_r+0x1a>
 8008d32:	42a9      	cmp	r1, r5
 8008d34:	d903      	bls.n	8008d3e <_malloc_r+0x22>
 8008d36:	230c      	movs	r3, #12
 8008d38:	6033      	str	r3, [r6, #0]
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d3e:	f001 fb6d 	bl	800a41c <__malloc_lock>
 8008d42:	4921      	ldr	r1, [pc, #132]	; (8008dc8 <_malloc_r+0xac>)
 8008d44:	680a      	ldr	r2, [r1, #0]
 8008d46:	4614      	mov	r4, r2
 8008d48:	b99c      	cbnz	r4, 8008d72 <_malloc_r+0x56>
 8008d4a:	4f20      	ldr	r7, [pc, #128]	; (8008dcc <_malloc_r+0xb0>)
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	b923      	cbnz	r3, 8008d5a <_malloc_r+0x3e>
 8008d50:	4621      	mov	r1, r4
 8008d52:	4630      	mov	r0, r6
 8008d54:	f000 fca6 	bl	80096a4 <_sbrk_r>
 8008d58:	6038      	str	r0, [r7, #0]
 8008d5a:	4629      	mov	r1, r5
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	f000 fca1 	bl	80096a4 <_sbrk_r>
 8008d62:	1c43      	adds	r3, r0, #1
 8008d64:	d123      	bne.n	8008dae <_malloc_r+0x92>
 8008d66:	230c      	movs	r3, #12
 8008d68:	6033      	str	r3, [r6, #0]
 8008d6a:	4630      	mov	r0, r6
 8008d6c:	f001 fb5c 	bl	800a428 <__malloc_unlock>
 8008d70:	e7e3      	b.n	8008d3a <_malloc_r+0x1e>
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	1b5b      	subs	r3, r3, r5
 8008d76:	d417      	bmi.n	8008da8 <_malloc_r+0x8c>
 8008d78:	2b0b      	cmp	r3, #11
 8008d7a:	d903      	bls.n	8008d84 <_malloc_r+0x68>
 8008d7c:	6023      	str	r3, [r4, #0]
 8008d7e:	441c      	add	r4, r3
 8008d80:	6025      	str	r5, [r4, #0]
 8008d82:	e004      	b.n	8008d8e <_malloc_r+0x72>
 8008d84:	6863      	ldr	r3, [r4, #4]
 8008d86:	42a2      	cmp	r2, r4
 8008d88:	bf0c      	ite	eq
 8008d8a:	600b      	streq	r3, [r1, #0]
 8008d8c:	6053      	strne	r3, [r2, #4]
 8008d8e:	4630      	mov	r0, r6
 8008d90:	f001 fb4a 	bl	800a428 <__malloc_unlock>
 8008d94:	f104 000b 	add.w	r0, r4, #11
 8008d98:	1d23      	adds	r3, r4, #4
 8008d9a:	f020 0007 	bic.w	r0, r0, #7
 8008d9e:	1ac2      	subs	r2, r0, r3
 8008da0:	d0cc      	beq.n	8008d3c <_malloc_r+0x20>
 8008da2:	1a1b      	subs	r3, r3, r0
 8008da4:	50a3      	str	r3, [r4, r2]
 8008da6:	e7c9      	b.n	8008d3c <_malloc_r+0x20>
 8008da8:	4622      	mov	r2, r4
 8008daa:	6864      	ldr	r4, [r4, #4]
 8008dac:	e7cc      	b.n	8008d48 <_malloc_r+0x2c>
 8008dae:	1cc4      	adds	r4, r0, #3
 8008db0:	f024 0403 	bic.w	r4, r4, #3
 8008db4:	42a0      	cmp	r0, r4
 8008db6:	d0e3      	beq.n	8008d80 <_malloc_r+0x64>
 8008db8:	1a21      	subs	r1, r4, r0
 8008dba:	4630      	mov	r0, r6
 8008dbc:	f000 fc72 	bl	80096a4 <_sbrk_r>
 8008dc0:	3001      	adds	r0, #1
 8008dc2:	d1dd      	bne.n	8008d80 <_malloc_r+0x64>
 8008dc4:	e7cf      	b.n	8008d66 <_malloc_r+0x4a>
 8008dc6:	bf00      	nop
 8008dc8:	2000037c 	.word	0x2000037c
 8008dcc:	20000380 	.word	0x20000380

08008dd0 <__cvt>:
 8008dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd4:	ec55 4b10 	vmov	r4, r5, d0
 8008dd8:	2d00      	cmp	r5, #0
 8008dda:	460e      	mov	r6, r1
 8008ddc:	4619      	mov	r1, r3
 8008dde:	462b      	mov	r3, r5
 8008de0:	bfbb      	ittet	lt
 8008de2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008de6:	461d      	movlt	r5, r3
 8008de8:	2300      	movge	r3, #0
 8008dea:	232d      	movlt	r3, #45	; 0x2d
 8008dec:	700b      	strb	r3, [r1, #0]
 8008dee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008df0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008df4:	4691      	mov	r9, r2
 8008df6:	f023 0820 	bic.w	r8, r3, #32
 8008dfa:	bfbc      	itt	lt
 8008dfc:	4622      	movlt	r2, r4
 8008dfe:	4614      	movlt	r4, r2
 8008e00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e04:	d005      	beq.n	8008e12 <__cvt+0x42>
 8008e06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008e0a:	d100      	bne.n	8008e0e <__cvt+0x3e>
 8008e0c:	3601      	adds	r6, #1
 8008e0e:	2102      	movs	r1, #2
 8008e10:	e000      	b.n	8008e14 <__cvt+0x44>
 8008e12:	2103      	movs	r1, #3
 8008e14:	ab03      	add	r3, sp, #12
 8008e16:	9301      	str	r3, [sp, #4]
 8008e18:	ab02      	add	r3, sp, #8
 8008e1a:	9300      	str	r3, [sp, #0]
 8008e1c:	ec45 4b10 	vmov	d0, r4, r5
 8008e20:	4653      	mov	r3, sl
 8008e22:	4632      	mov	r2, r6
 8008e24:	f000 fcfc 	bl	8009820 <_dtoa_r>
 8008e28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008e2c:	4607      	mov	r7, r0
 8008e2e:	d102      	bne.n	8008e36 <__cvt+0x66>
 8008e30:	f019 0f01 	tst.w	r9, #1
 8008e34:	d022      	beq.n	8008e7c <__cvt+0xac>
 8008e36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e3a:	eb07 0906 	add.w	r9, r7, r6
 8008e3e:	d110      	bne.n	8008e62 <__cvt+0x92>
 8008e40:	783b      	ldrb	r3, [r7, #0]
 8008e42:	2b30      	cmp	r3, #48	; 0x30
 8008e44:	d10a      	bne.n	8008e5c <__cvt+0x8c>
 8008e46:	2200      	movs	r2, #0
 8008e48:	2300      	movs	r3, #0
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	f7f7 fe43 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e52:	b918      	cbnz	r0, 8008e5c <__cvt+0x8c>
 8008e54:	f1c6 0601 	rsb	r6, r6, #1
 8008e58:	f8ca 6000 	str.w	r6, [sl]
 8008e5c:	f8da 3000 	ldr.w	r3, [sl]
 8008e60:	4499      	add	r9, r3
 8008e62:	2200      	movs	r2, #0
 8008e64:	2300      	movs	r3, #0
 8008e66:	4620      	mov	r0, r4
 8008e68:	4629      	mov	r1, r5
 8008e6a:	f7f7 fe35 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e6e:	b108      	cbz	r0, 8008e74 <__cvt+0xa4>
 8008e70:	f8cd 900c 	str.w	r9, [sp, #12]
 8008e74:	2230      	movs	r2, #48	; 0x30
 8008e76:	9b03      	ldr	r3, [sp, #12]
 8008e78:	454b      	cmp	r3, r9
 8008e7a:	d307      	bcc.n	8008e8c <__cvt+0xbc>
 8008e7c:	9b03      	ldr	r3, [sp, #12]
 8008e7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e80:	1bdb      	subs	r3, r3, r7
 8008e82:	4638      	mov	r0, r7
 8008e84:	6013      	str	r3, [r2, #0]
 8008e86:	b004      	add	sp, #16
 8008e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e8c:	1c59      	adds	r1, r3, #1
 8008e8e:	9103      	str	r1, [sp, #12]
 8008e90:	701a      	strb	r2, [r3, #0]
 8008e92:	e7f0      	b.n	8008e76 <__cvt+0xa6>

08008e94 <__exponent>:
 8008e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e96:	4603      	mov	r3, r0
 8008e98:	2900      	cmp	r1, #0
 8008e9a:	bfb8      	it	lt
 8008e9c:	4249      	neglt	r1, r1
 8008e9e:	f803 2b02 	strb.w	r2, [r3], #2
 8008ea2:	bfb4      	ite	lt
 8008ea4:	222d      	movlt	r2, #45	; 0x2d
 8008ea6:	222b      	movge	r2, #43	; 0x2b
 8008ea8:	2909      	cmp	r1, #9
 8008eaa:	7042      	strb	r2, [r0, #1]
 8008eac:	dd2a      	ble.n	8008f04 <__exponent+0x70>
 8008eae:	f10d 0407 	add.w	r4, sp, #7
 8008eb2:	46a4      	mov	ip, r4
 8008eb4:	270a      	movs	r7, #10
 8008eb6:	46a6      	mov	lr, r4
 8008eb8:	460a      	mov	r2, r1
 8008eba:	fb91 f6f7 	sdiv	r6, r1, r7
 8008ebe:	fb07 1516 	mls	r5, r7, r6, r1
 8008ec2:	3530      	adds	r5, #48	; 0x30
 8008ec4:	2a63      	cmp	r2, #99	; 0x63
 8008ec6:	f104 34ff 	add.w	r4, r4, #4294967295
 8008eca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008ece:	4631      	mov	r1, r6
 8008ed0:	dcf1      	bgt.n	8008eb6 <__exponent+0x22>
 8008ed2:	3130      	adds	r1, #48	; 0x30
 8008ed4:	f1ae 0502 	sub.w	r5, lr, #2
 8008ed8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008edc:	1c44      	adds	r4, r0, #1
 8008ede:	4629      	mov	r1, r5
 8008ee0:	4561      	cmp	r1, ip
 8008ee2:	d30a      	bcc.n	8008efa <__exponent+0x66>
 8008ee4:	f10d 0209 	add.w	r2, sp, #9
 8008ee8:	eba2 020e 	sub.w	r2, r2, lr
 8008eec:	4565      	cmp	r5, ip
 8008eee:	bf88      	it	hi
 8008ef0:	2200      	movhi	r2, #0
 8008ef2:	4413      	add	r3, r2
 8008ef4:	1a18      	subs	r0, r3, r0
 8008ef6:	b003      	add	sp, #12
 8008ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008efe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008f02:	e7ed      	b.n	8008ee0 <__exponent+0x4c>
 8008f04:	2330      	movs	r3, #48	; 0x30
 8008f06:	3130      	adds	r1, #48	; 0x30
 8008f08:	7083      	strb	r3, [r0, #2]
 8008f0a:	70c1      	strb	r1, [r0, #3]
 8008f0c:	1d03      	adds	r3, r0, #4
 8008f0e:	e7f1      	b.n	8008ef4 <__exponent+0x60>

08008f10 <_printf_float>:
 8008f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f14:	ed2d 8b02 	vpush	{d8}
 8008f18:	b08d      	sub	sp, #52	; 0x34
 8008f1a:	460c      	mov	r4, r1
 8008f1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008f20:	4616      	mov	r6, r2
 8008f22:	461f      	mov	r7, r3
 8008f24:	4605      	mov	r5, r0
 8008f26:	f001 fa67 	bl	800a3f8 <_localeconv_r>
 8008f2a:	f8d0 a000 	ldr.w	sl, [r0]
 8008f2e:	4650      	mov	r0, sl
 8008f30:	f7f7 f956 	bl	80001e0 <strlen>
 8008f34:	2300      	movs	r3, #0
 8008f36:	930a      	str	r3, [sp, #40]	; 0x28
 8008f38:	6823      	ldr	r3, [r4, #0]
 8008f3a:	9305      	str	r3, [sp, #20]
 8008f3c:	f8d8 3000 	ldr.w	r3, [r8]
 8008f40:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008f44:	3307      	adds	r3, #7
 8008f46:	f023 0307 	bic.w	r3, r3, #7
 8008f4a:	f103 0208 	add.w	r2, r3, #8
 8008f4e:	f8c8 2000 	str.w	r2, [r8]
 8008f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008f5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008f5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f62:	9307      	str	r3, [sp, #28]
 8008f64:	f8cd 8018 	str.w	r8, [sp, #24]
 8008f68:	ee08 0a10 	vmov	s16, r0
 8008f6c:	4b9f      	ldr	r3, [pc, #636]	; (80091ec <_printf_float+0x2dc>)
 8008f6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f72:	f04f 32ff 	mov.w	r2, #4294967295
 8008f76:	f7f7 fde1 	bl	8000b3c <__aeabi_dcmpun>
 8008f7a:	bb88      	cbnz	r0, 8008fe0 <_printf_float+0xd0>
 8008f7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f80:	4b9a      	ldr	r3, [pc, #616]	; (80091ec <_printf_float+0x2dc>)
 8008f82:	f04f 32ff 	mov.w	r2, #4294967295
 8008f86:	f7f7 fdbb 	bl	8000b00 <__aeabi_dcmple>
 8008f8a:	bb48      	cbnz	r0, 8008fe0 <_printf_float+0xd0>
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	2300      	movs	r3, #0
 8008f90:	4640      	mov	r0, r8
 8008f92:	4649      	mov	r1, r9
 8008f94:	f7f7 fdaa 	bl	8000aec <__aeabi_dcmplt>
 8008f98:	b110      	cbz	r0, 8008fa0 <_printf_float+0x90>
 8008f9a:	232d      	movs	r3, #45	; 0x2d
 8008f9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fa0:	4b93      	ldr	r3, [pc, #588]	; (80091f0 <_printf_float+0x2e0>)
 8008fa2:	4894      	ldr	r0, [pc, #592]	; (80091f4 <_printf_float+0x2e4>)
 8008fa4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008fa8:	bf94      	ite	ls
 8008faa:	4698      	movls	r8, r3
 8008fac:	4680      	movhi	r8, r0
 8008fae:	2303      	movs	r3, #3
 8008fb0:	6123      	str	r3, [r4, #16]
 8008fb2:	9b05      	ldr	r3, [sp, #20]
 8008fb4:	f023 0204 	bic.w	r2, r3, #4
 8008fb8:	6022      	str	r2, [r4, #0]
 8008fba:	f04f 0900 	mov.w	r9, #0
 8008fbe:	9700      	str	r7, [sp, #0]
 8008fc0:	4633      	mov	r3, r6
 8008fc2:	aa0b      	add	r2, sp, #44	; 0x2c
 8008fc4:	4621      	mov	r1, r4
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	f000 f9d8 	bl	800937c <_printf_common>
 8008fcc:	3001      	adds	r0, #1
 8008fce:	f040 8090 	bne.w	80090f2 <_printf_float+0x1e2>
 8008fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd6:	b00d      	add	sp, #52	; 0x34
 8008fd8:	ecbd 8b02 	vpop	{d8}
 8008fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe0:	4642      	mov	r2, r8
 8008fe2:	464b      	mov	r3, r9
 8008fe4:	4640      	mov	r0, r8
 8008fe6:	4649      	mov	r1, r9
 8008fe8:	f7f7 fda8 	bl	8000b3c <__aeabi_dcmpun>
 8008fec:	b140      	cbz	r0, 8009000 <_printf_float+0xf0>
 8008fee:	464b      	mov	r3, r9
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	bfbc      	itt	lt
 8008ff4:	232d      	movlt	r3, #45	; 0x2d
 8008ff6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008ffa:	487f      	ldr	r0, [pc, #508]	; (80091f8 <_printf_float+0x2e8>)
 8008ffc:	4b7f      	ldr	r3, [pc, #508]	; (80091fc <_printf_float+0x2ec>)
 8008ffe:	e7d1      	b.n	8008fa4 <_printf_float+0x94>
 8009000:	6863      	ldr	r3, [r4, #4]
 8009002:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009006:	9206      	str	r2, [sp, #24]
 8009008:	1c5a      	adds	r2, r3, #1
 800900a:	d13f      	bne.n	800908c <_printf_float+0x17c>
 800900c:	2306      	movs	r3, #6
 800900e:	6063      	str	r3, [r4, #4]
 8009010:	9b05      	ldr	r3, [sp, #20]
 8009012:	6861      	ldr	r1, [r4, #4]
 8009014:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009018:	2300      	movs	r3, #0
 800901a:	9303      	str	r3, [sp, #12]
 800901c:	ab0a      	add	r3, sp, #40	; 0x28
 800901e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009022:	ab09      	add	r3, sp, #36	; 0x24
 8009024:	ec49 8b10 	vmov	d0, r8, r9
 8009028:	9300      	str	r3, [sp, #0]
 800902a:	6022      	str	r2, [r4, #0]
 800902c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009030:	4628      	mov	r0, r5
 8009032:	f7ff fecd 	bl	8008dd0 <__cvt>
 8009036:	9b06      	ldr	r3, [sp, #24]
 8009038:	9909      	ldr	r1, [sp, #36]	; 0x24
 800903a:	2b47      	cmp	r3, #71	; 0x47
 800903c:	4680      	mov	r8, r0
 800903e:	d108      	bne.n	8009052 <_printf_float+0x142>
 8009040:	1cc8      	adds	r0, r1, #3
 8009042:	db02      	blt.n	800904a <_printf_float+0x13a>
 8009044:	6863      	ldr	r3, [r4, #4]
 8009046:	4299      	cmp	r1, r3
 8009048:	dd41      	ble.n	80090ce <_printf_float+0x1be>
 800904a:	f1ab 0b02 	sub.w	fp, fp, #2
 800904e:	fa5f fb8b 	uxtb.w	fp, fp
 8009052:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009056:	d820      	bhi.n	800909a <_printf_float+0x18a>
 8009058:	3901      	subs	r1, #1
 800905a:	465a      	mov	r2, fp
 800905c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009060:	9109      	str	r1, [sp, #36]	; 0x24
 8009062:	f7ff ff17 	bl	8008e94 <__exponent>
 8009066:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009068:	1813      	adds	r3, r2, r0
 800906a:	2a01      	cmp	r2, #1
 800906c:	4681      	mov	r9, r0
 800906e:	6123      	str	r3, [r4, #16]
 8009070:	dc02      	bgt.n	8009078 <_printf_float+0x168>
 8009072:	6822      	ldr	r2, [r4, #0]
 8009074:	07d2      	lsls	r2, r2, #31
 8009076:	d501      	bpl.n	800907c <_printf_float+0x16c>
 8009078:	3301      	adds	r3, #1
 800907a:	6123      	str	r3, [r4, #16]
 800907c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009080:	2b00      	cmp	r3, #0
 8009082:	d09c      	beq.n	8008fbe <_printf_float+0xae>
 8009084:	232d      	movs	r3, #45	; 0x2d
 8009086:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800908a:	e798      	b.n	8008fbe <_printf_float+0xae>
 800908c:	9a06      	ldr	r2, [sp, #24]
 800908e:	2a47      	cmp	r2, #71	; 0x47
 8009090:	d1be      	bne.n	8009010 <_printf_float+0x100>
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1bc      	bne.n	8009010 <_printf_float+0x100>
 8009096:	2301      	movs	r3, #1
 8009098:	e7b9      	b.n	800900e <_printf_float+0xfe>
 800909a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800909e:	d118      	bne.n	80090d2 <_printf_float+0x1c2>
 80090a0:	2900      	cmp	r1, #0
 80090a2:	6863      	ldr	r3, [r4, #4]
 80090a4:	dd0b      	ble.n	80090be <_printf_float+0x1ae>
 80090a6:	6121      	str	r1, [r4, #16]
 80090a8:	b913      	cbnz	r3, 80090b0 <_printf_float+0x1a0>
 80090aa:	6822      	ldr	r2, [r4, #0]
 80090ac:	07d0      	lsls	r0, r2, #31
 80090ae:	d502      	bpl.n	80090b6 <_printf_float+0x1a6>
 80090b0:	3301      	adds	r3, #1
 80090b2:	440b      	add	r3, r1
 80090b4:	6123      	str	r3, [r4, #16]
 80090b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80090b8:	f04f 0900 	mov.w	r9, #0
 80090bc:	e7de      	b.n	800907c <_printf_float+0x16c>
 80090be:	b913      	cbnz	r3, 80090c6 <_printf_float+0x1b6>
 80090c0:	6822      	ldr	r2, [r4, #0]
 80090c2:	07d2      	lsls	r2, r2, #31
 80090c4:	d501      	bpl.n	80090ca <_printf_float+0x1ba>
 80090c6:	3302      	adds	r3, #2
 80090c8:	e7f4      	b.n	80090b4 <_printf_float+0x1a4>
 80090ca:	2301      	movs	r3, #1
 80090cc:	e7f2      	b.n	80090b4 <_printf_float+0x1a4>
 80090ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80090d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090d4:	4299      	cmp	r1, r3
 80090d6:	db05      	blt.n	80090e4 <_printf_float+0x1d4>
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	6121      	str	r1, [r4, #16]
 80090dc:	07d8      	lsls	r0, r3, #31
 80090de:	d5ea      	bpl.n	80090b6 <_printf_float+0x1a6>
 80090e0:	1c4b      	adds	r3, r1, #1
 80090e2:	e7e7      	b.n	80090b4 <_printf_float+0x1a4>
 80090e4:	2900      	cmp	r1, #0
 80090e6:	bfd4      	ite	le
 80090e8:	f1c1 0202 	rsble	r2, r1, #2
 80090ec:	2201      	movgt	r2, #1
 80090ee:	4413      	add	r3, r2
 80090f0:	e7e0      	b.n	80090b4 <_printf_float+0x1a4>
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	055a      	lsls	r2, r3, #21
 80090f6:	d407      	bmi.n	8009108 <_printf_float+0x1f8>
 80090f8:	6923      	ldr	r3, [r4, #16]
 80090fa:	4642      	mov	r2, r8
 80090fc:	4631      	mov	r1, r6
 80090fe:	4628      	mov	r0, r5
 8009100:	47b8      	blx	r7
 8009102:	3001      	adds	r0, #1
 8009104:	d12c      	bne.n	8009160 <_printf_float+0x250>
 8009106:	e764      	b.n	8008fd2 <_printf_float+0xc2>
 8009108:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800910c:	f240 80e0 	bls.w	80092d0 <_printf_float+0x3c0>
 8009110:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009114:	2200      	movs	r2, #0
 8009116:	2300      	movs	r3, #0
 8009118:	f7f7 fcde 	bl	8000ad8 <__aeabi_dcmpeq>
 800911c:	2800      	cmp	r0, #0
 800911e:	d034      	beq.n	800918a <_printf_float+0x27a>
 8009120:	4a37      	ldr	r2, [pc, #220]	; (8009200 <_printf_float+0x2f0>)
 8009122:	2301      	movs	r3, #1
 8009124:	4631      	mov	r1, r6
 8009126:	4628      	mov	r0, r5
 8009128:	47b8      	blx	r7
 800912a:	3001      	adds	r0, #1
 800912c:	f43f af51 	beq.w	8008fd2 <_printf_float+0xc2>
 8009130:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009134:	429a      	cmp	r2, r3
 8009136:	db02      	blt.n	800913e <_printf_float+0x22e>
 8009138:	6823      	ldr	r3, [r4, #0]
 800913a:	07d8      	lsls	r0, r3, #31
 800913c:	d510      	bpl.n	8009160 <_printf_float+0x250>
 800913e:	ee18 3a10 	vmov	r3, s16
 8009142:	4652      	mov	r2, sl
 8009144:	4631      	mov	r1, r6
 8009146:	4628      	mov	r0, r5
 8009148:	47b8      	blx	r7
 800914a:	3001      	adds	r0, #1
 800914c:	f43f af41 	beq.w	8008fd2 <_printf_float+0xc2>
 8009150:	f04f 0800 	mov.w	r8, #0
 8009154:	f104 091a 	add.w	r9, r4, #26
 8009158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800915a:	3b01      	subs	r3, #1
 800915c:	4543      	cmp	r3, r8
 800915e:	dc09      	bgt.n	8009174 <_printf_float+0x264>
 8009160:	6823      	ldr	r3, [r4, #0]
 8009162:	079b      	lsls	r3, r3, #30
 8009164:	f100 8105 	bmi.w	8009372 <_printf_float+0x462>
 8009168:	68e0      	ldr	r0, [r4, #12]
 800916a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800916c:	4298      	cmp	r0, r3
 800916e:	bfb8      	it	lt
 8009170:	4618      	movlt	r0, r3
 8009172:	e730      	b.n	8008fd6 <_printf_float+0xc6>
 8009174:	2301      	movs	r3, #1
 8009176:	464a      	mov	r2, r9
 8009178:	4631      	mov	r1, r6
 800917a:	4628      	mov	r0, r5
 800917c:	47b8      	blx	r7
 800917e:	3001      	adds	r0, #1
 8009180:	f43f af27 	beq.w	8008fd2 <_printf_float+0xc2>
 8009184:	f108 0801 	add.w	r8, r8, #1
 8009188:	e7e6      	b.n	8009158 <_printf_float+0x248>
 800918a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800918c:	2b00      	cmp	r3, #0
 800918e:	dc39      	bgt.n	8009204 <_printf_float+0x2f4>
 8009190:	4a1b      	ldr	r2, [pc, #108]	; (8009200 <_printf_float+0x2f0>)
 8009192:	2301      	movs	r3, #1
 8009194:	4631      	mov	r1, r6
 8009196:	4628      	mov	r0, r5
 8009198:	47b8      	blx	r7
 800919a:	3001      	adds	r0, #1
 800919c:	f43f af19 	beq.w	8008fd2 <_printf_float+0xc2>
 80091a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091a4:	4313      	orrs	r3, r2
 80091a6:	d102      	bne.n	80091ae <_printf_float+0x29e>
 80091a8:	6823      	ldr	r3, [r4, #0]
 80091aa:	07d9      	lsls	r1, r3, #31
 80091ac:	d5d8      	bpl.n	8009160 <_printf_float+0x250>
 80091ae:	ee18 3a10 	vmov	r3, s16
 80091b2:	4652      	mov	r2, sl
 80091b4:	4631      	mov	r1, r6
 80091b6:	4628      	mov	r0, r5
 80091b8:	47b8      	blx	r7
 80091ba:	3001      	adds	r0, #1
 80091bc:	f43f af09 	beq.w	8008fd2 <_printf_float+0xc2>
 80091c0:	f04f 0900 	mov.w	r9, #0
 80091c4:	f104 0a1a 	add.w	sl, r4, #26
 80091c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ca:	425b      	negs	r3, r3
 80091cc:	454b      	cmp	r3, r9
 80091ce:	dc01      	bgt.n	80091d4 <_printf_float+0x2c4>
 80091d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091d2:	e792      	b.n	80090fa <_printf_float+0x1ea>
 80091d4:	2301      	movs	r3, #1
 80091d6:	4652      	mov	r2, sl
 80091d8:	4631      	mov	r1, r6
 80091da:	4628      	mov	r0, r5
 80091dc:	47b8      	blx	r7
 80091de:	3001      	adds	r0, #1
 80091e0:	f43f aef7 	beq.w	8008fd2 <_printf_float+0xc2>
 80091e4:	f109 0901 	add.w	r9, r9, #1
 80091e8:	e7ee      	b.n	80091c8 <_printf_float+0x2b8>
 80091ea:	bf00      	nop
 80091ec:	7fefffff 	.word	0x7fefffff
 80091f0:	0800ba98 	.word	0x0800ba98
 80091f4:	0800ba9c 	.word	0x0800ba9c
 80091f8:	0800baa4 	.word	0x0800baa4
 80091fc:	0800baa0 	.word	0x0800baa0
 8009200:	0800baa8 	.word	0x0800baa8
 8009204:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009206:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009208:	429a      	cmp	r2, r3
 800920a:	bfa8      	it	ge
 800920c:	461a      	movge	r2, r3
 800920e:	2a00      	cmp	r2, #0
 8009210:	4691      	mov	r9, r2
 8009212:	dc37      	bgt.n	8009284 <_printf_float+0x374>
 8009214:	f04f 0b00 	mov.w	fp, #0
 8009218:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800921c:	f104 021a 	add.w	r2, r4, #26
 8009220:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009222:	9305      	str	r3, [sp, #20]
 8009224:	eba3 0309 	sub.w	r3, r3, r9
 8009228:	455b      	cmp	r3, fp
 800922a:	dc33      	bgt.n	8009294 <_printf_float+0x384>
 800922c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009230:	429a      	cmp	r2, r3
 8009232:	db3b      	blt.n	80092ac <_printf_float+0x39c>
 8009234:	6823      	ldr	r3, [r4, #0]
 8009236:	07da      	lsls	r2, r3, #31
 8009238:	d438      	bmi.n	80092ac <_printf_float+0x39c>
 800923a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800923c:	9b05      	ldr	r3, [sp, #20]
 800923e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	eba2 0901 	sub.w	r9, r2, r1
 8009246:	4599      	cmp	r9, r3
 8009248:	bfa8      	it	ge
 800924a:	4699      	movge	r9, r3
 800924c:	f1b9 0f00 	cmp.w	r9, #0
 8009250:	dc35      	bgt.n	80092be <_printf_float+0x3ae>
 8009252:	f04f 0800 	mov.w	r8, #0
 8009256:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800925a:	f104 0a1a 	add.w	sl, r4, #26
 800925e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009262:	1a9b      	subs	r3, r3, r2
 8009264:	eba3 0309 	sub.w	r3, r3, r9
 8009268:	4543      	cmp	r3, r8
 800926a:	f77f af79 	ble.w	8009160 <_printf_float+0x250>
 800926e:	2301      	movs	r3, #1
 8009270:	4652      	mov	r2, sl
 8009272:	4631      	mov	r1, r6
 8009274:	4628      	mov	r0, r5
 8009276:	47b8      	blx	r7
 8009278:	3001      	adds	r0, #1
 800927a:	f43f aeaa 	beq.w	8008fd2 <_printf_float+0xc2>
 800927e:	f108 0801 	add.w	r8, r8, #1
 8009282:	e7ec      	b.n	800925e <_printf_float+0x34e>
 8009284:	4613      	mov	r3, r2
 8009286:	4631      	mov	r1, r6
 8009288:	4642      	mov	r2, r8
 800928a:	4628      	mov	r0, r5
 800928c:	47b8      	blx	r7
 800928e:	3001      	adds	r0, #1
 8009290:	d1c0      	bne.n	8009214 <_printf_float+0x304>
 8009292:	e69e      	b.n	8008fd2 <_printf_float+0xc2>
 8009294:	2301      	movs	r3, #1
 8009296:	4631      	mov	r1, r6
 8009298:	4628      	mov	r0, r5
 800929a:	9205      	str	r2, [sp, #20]
 800929c:	47b8      	blx	r7
 800929e:	3001      	adds	r0, #1
 80092a0:	f43f ae97 	beq.w	8008fd2 <_printf_float+0xc2>
 80092a4:	9a05      	ldr	r2, [sp, #20]
 80092a6:	f10b 0b01 	add.w	fp, fp, #1
 80092aa:	e7b9      	b.n	8009220 <_printf_float+0x310>
 80092ac:	ee18 3a10 	vmov	r3, s16
 80092b0:	4652      	mov	r2, sl
 80092b2:	4631      	mov	r1, r6
 80092b4:	4628      	mov	r0, r5
 80092b6:	47b8      	blx	r7
 80092b8:	3001      	adds	r0, #1
 80092ba:	d1be      	bne.n	800923a <_printf_float+0x32a>
 80092bc:	e689      	b.n	8008fd2 <_printf_float+0xc2>
 80092be:	9a05      	ldr	r2, [sp, #20]
 80092c0:	464b      	mov	r3, r9
 80092c2:	4442      	add	r2, r8
 80092c4:	4631      	mov	r1, r6
 80092c6:	4628      	mov	r0, r5
 80092c8:	47b8      	blx	r7
 80092ca:	3001      	adds	r0, #1
 80092cc:	d1c1      	bne.n	8009252 <_printf_float+0x342>
 80092ce:	e680      	b.n	8008fd2 <_printf_float+0xc2>
 80092d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092d2:	2a01      	cmp	r2, #1
 80092d4:	dc01      	bgt.n	80092da <_printf_float+0x3ca>
 80092d6:	07db      	lsls	r3, r3, #31
 80092d8:	d538      	bpl.n	800934c <_printf_float+0x43c>
 80092da:	2301      	movs	r3, #1
 80092dc:	4642      	mov	r2, r8
 80092de:	4631      	mov	r1, r6
 80092e0:	4628      	mov	r0, r5
 80092e2:	47b8      	blx	r7
 80092e4:	3001      	adds	r0, #1
 80092e6:	f43f ae74 	beq.w	8008fd2 <_printf_float+0xc2>
 80092ea:	ee18 3a10 	vmov	r3, s16
 80092ee:	4652      	mov	r2, sl
 80092f0:	4631      	mov	r1, r6
 80092f2:	4628      	mov	r0, r5
 80092f4:	47b8      	blx	r7
 80092f6:	3001      	adds	r0, #1
 80092f8:	f43f ae6b 	beq.w	8008fd2 <_printf_float+0xc2>
 80092fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009300:	2200      	movs	r2, #0
 8009302:	2300      	movs	r3, #0
 8009304:	f7f7 fbe8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009308:	b9d8      	cbnz	r0, 8009342 <_printf_float+0x432>
 800930a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800930c:	f108 0201 	add.w	r2, r8, #1
 8009310:	3b01      	subs	r3, #1
 8009312:	4631      	mov	r1, r6
 8009314:	4628      	mov	r0, r5
 8009316:	47b8      	blx	r7
 8009318:	3001      	adds	r0, #1
 800931a:	d10e      	bne.n	800933a <_printf_float+0x42a>
 800931c:	e659      	b.n	8008fd2 <_printf_float+0xc2>
 800931e:	2301      	movs	r3, #1
 8009320:	4652      	mov	r2, sl
 8009322:	4631      	mov	r1, r6
 8009324:	4628      	mov	r0, r5
 8009326:	47b8      	blx	r7
 8009328:	3001      	adds	r0, #1
 800932a:	f43f ae52 	beq.w	8008fd2 <_printf_float+0xc2>
 800932e:	f108 0801 	add.w	r8, r8, #1
 8009332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009334:	3b01      	subs	r3, #1
 8009336:	4543      	cmp	r3, r8
 8009338:	dcf1      	bgt.n	800931e <_printf_float+0x40e>
 800933a:	464b      	mov	r3, r9
 800933c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009340:	e6dc      	b.n	80090fc <_printf_float+0x1ec>
 8009342:	f04f 0800 	mov.w	r8, #0
 8009346:	f104 0a1a 	add.w	sl, r4, #26
 800934a:	e7f2      	b.n	8009332 <_printf_float+0x422>
 800934c:	2301      	movs	r3, #1
 800934e:	4642      	mov	r2, r8
 8009350:	e7df      	b.n	8009312 <_printf_float+0x402>
 8009352:	2301      	movs	r3, #1
 8009354:	464a      	mov	r2, r9
 8009356:	4631      	mov	r1, r6
 8009358:	4628      	mov	r0, r5
 800935a:	47b8      	blx	r7
 800935c:	3001      	adds	r0, #1
 800935e:	f43f ae38 	beq.w	8008fd2 <_printf_float+0xc2>
 8009362:	f108 0801 	add.w	r8, r8, #1
 8009366:	68e3      	ldr	r3, [r4, #12]
 8009368:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800936a:	1a5b      	subs	r3, r3, r1
 800936c:	4543      	cmp	r3, r8
 800936e:	dcf0      	bgt.n	8009352 <_printf_float+0x442>
 8009370:	e6fa      	b.n	8009168 <_printf_float+0x258>
 8009372:	f04f 0800 	mov.w	r8, #0
 8009376:	f104 0919 	add.w	r9, r4, #25
 800937a:	e7f4      	b.n	8009366 <_printf_float+0x456>

0800937c <_printf_common>:
 800937c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009380:	4616      	mov	r6, r2
 8009382:	4699      	mov	r9, r3
 8009384:	688a      	ldr	r2, [r1, #8]
 8009386:	690b      	ldr	r3, [r1, #16]
 8009388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800938c:	4293      	cmp	r3, r2
 800938e:	bfb8      	it	lt
 8009390:	4613      	movlt	r3, r2
 8009392:	6033      	str	r3, [r6, #0]
 8009394:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009398:	4607      	mov	r7, r0
 800939a:	460c      	mov	r4, r1
 800939c:	b10a      	cbz	r2, 80093a2 <_printf_common+0x26>
 800939e:	3301      	adds	r3, #1
 80093a0:	6033      	str	r3, [r6, #0]
 80093a2:	6823      	ldr	r3, [r4, #0]
 80093a4:	0699      	lsls	r1, r3, #26
 80093a6:	bf42      	ittt	mi
 80093a8:	6833      	ldrmi	r3, [r6, #0]
 80093aa:	3302      	addmi	r3, #2
 80093ac:	6033      	strmi	r3, [r6, #0]
 80093ae:	6825      	ldr	r5, [r4, #0]
 80093b0:	f015 0506 	ands.w	r5, r5, #6
 80093b4:	d106      	bne.n	80093c4 <_printf_common+0x48>
 80093b6:	f104 0a19 	add.w	sl, r4, #25
 80093ba:	68e3      	ldr	r3, [r4, #12]
 80093bc:	6832      	ldr	r2, [r6, #0]
 80093be:	1a9b      	subs	r3, r3, r2
 80093c0:	42ab      	cmp	r3, r5
 80093c2:	dc26      	bgt.n	8009412 <_printf_common+0x96>
 80093c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093c8:	1e13      	subs	r3, r2, #0
 80093ca:	6822      	ldr	r2, [r4, #0]
 80093cc:	bf18      	it	ne
 80093ce:	2301      	movne	r3, #1
 80093d0:	0692      	lsls	r2, r2, #26
 80093d2:	d42b      	bmi.n	800942c <_printf_common+0xb0>
 80093d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093d8:	4649      	mov	r1, r9
 80093da:	4638      	mov	r0, r7
 80093dc:	47c0      	blx	r8
 80093de:	3001      	adds	r0, #1
 80093e0:	d01e      	beq.n	8009420 <_printf_common+0xa4>
 80093e2:	6823      	ldr	r3, [r4, #0]
 80093e4:	68e5      	ldr	r5, [r4, #12]
 80093e6:	6832      	ldr	r2, [r6, #0]
 80093e8:	f003 0306 	and.w	r3, r3, #6
 80093ec:	2b04      	cmp	r3, #4
 80093ee:	bf08      	it	eq
 80093f0:	1aad      	subeq	r5, r5, r2
 80093f2:	68a3      	ldr	r3, [r4, #8]
 80093f4:	6922      	ldr	r2, [r4, #16]
 80093f6:	bf0c      	ite	eq
 80093f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093fc:	2500      	movne	r5, #0
 80093fe:	4293      	cmp	r3, r2
 8009400:	bfc4      	itt	gt
 8009402:	1a9b      	subgt	r3, r3, r2
 8009404:	18ed      	addgt	r5, r5, r3
 8009406:	2600      	movs	r6, #0
 8009408:	341a      	adds	r4, #26
 800940a:	42b5      	cmp	r5, r6
 800940c:	d11a      	bne.n	8009444 <_printf_common+0xc8>
 800940e:	2000      	movs	r0, #0
 8009410:	e008      	b.n	8009424 <_printf_common+0xa8>
 8009412:	2301      	movs	r3, #1
 8009414:	4652      	mov	r2, sl
 8009416:	4649      	mov	r1, r9
 8009418:	4638      	mov	r0, r7
 800941a:	47c0      	blx	r8
 800941c:	3001      	adds	r0, #1
 800941e:	d103      	bne.n	8009428 <_printf_common+0xac>
 8009420:	f04f 30ff 	mov.w	r0, #4294967295
 8009424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009428:	3501      	adds	r5, #1
 800942a:	e7c6      	b.n	80093ba <_printf_common+0x3e>
 800942c:	18e1      	adds	r1, r4, r3
 800942e:	1c5a      	adds	r2, r3, #1
 8009430:	2030      	movs	r0, #48	; 0x30
 8009432:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009436:	4422      	add	r2, r4
 8009438:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800943c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009440:	3302      	adds	r3, #2
 8009442:	e7c7      	b.n	80093d4 <_printf_common+0x58>
 8009444:	2301      	movs	r3, #1
 8009446:	4622      	mov	r2, r4
 8009448:	4649      	mov	r1, r9
 800944a:	4638      	mov	r0, r7
 800944c:	47c0      	blx	r8
 800944e:	3001      	adds	r0, #1
 8009450:	d0e6      	beq.n	8009420 <_printf_common+0xa4>
 8009452:	3601      	adds	r6, #1
 8009454:	e7d9      	b.n	800940a <_printf_common+0x8e>
	...

08009458 <_printf_i>:
 8009458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800945c:	460c      	mov	r4, r1
 800945e:	4691      	mov	r9, r2
 8009460:	7e27      	ldrb	r7, [r4, #24]
 8009462:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009464:	2f78      	cmp	r7, #120	; 0x78
 8009466:	4680      	mov	r8, r0
 8009468:	469a      	mov	sl, r3
 800946a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800946e:	d807      	bhi.n	8009480 <_printf_i+0x28>
 8009470:	2f62      	cmp	r7, #98	; 0x62
 8009472:	d80a      	bhi.n	800948a <_printf_i+0x32>
 8009474:	2f00      	cmp	r7, #0
 8009476:	f000 80d8 	beq.w	800962a <_printf_i+0x1d2>
 800947a:	2f58      	cmp	r7, #88	; 0x58
 800947c:	f000 80a3 	beq.w	80095c6 <_printf_i+0x16e>
 8009480:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009484:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009488:	e03a      	b.n	8009500 <_printf_i+0xa8>
 800948a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800948e:	2b15      	cmp	r3, #21
 8009490:	d8f6      	bhi.n	8009480 <_printf_i+0x28>
 8009492:	a001      	add	r0, pc, #4	; (adr r0, 8009498 <_printf_i+0x40>)
 8009494:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009498:	080094f1 	.word	0x080094f1
 800949c:	08009505 	.word	0x08009505
 80094a0:	08009481 	.word	0x08009481
 80094a4:	08009481 	.word	0x08009481
 80094a8:	08009481 	.word	0x08009481
 80094ac:	08009481 	.word	0x08009481
 80094b0:	08009505 	.word	0x08009505
 80094b4:	08009481 	.word	0x08009481
 80094b8:	08009481 	.word	0x08009481
 80094bc:	08009481 	.word	0x08009481
 80094c0:	08009481 	.word	0x08009481
 80094c4:	08009611 	.word	0x08009611
 80094c8:	08009535 	.word	0x08009535
 80094cc:	080095f3 	.word	0x080095f3
 80094d0:	08009481 	.word	0x08009481
 80094d4:	08009481 	.word	0x08009481
 80094d8:	08009633 	.word	0x08009633
 80094dc:	08009481 	.word	0x08009481
 80094e0:	08009535 	.word	0x08009535
 80094e4:	08009481 	.word	0x08009481
 80094e8:	08009481 	.word	0x08009481
 80094ec:	080095fb 	.word	0x080095fb
 80094f0:	680b      	ldr	r3, [r1, #0]
 80094f2:	1d1a      	adds	r2, r3, #4
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	600a      	str	r2, [r1, #0]
 80094f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80094fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009500:	2301      	movs	r3, #1
 8009502:	e0a3      	b.n	800964c <_printf_i+0x1f4>
 8009504:	6825      	ldr	r5, [r4, #0]
 8009506:	6808      	ldr	r0, [r1, #0]
 8009508:	062e      	lsls	r6, r5, #24
 800950a:	f100 0304 	add.w	r3, r0, #4
 800950e:	d50a      	bpl.n	8009526 <_printf_i+0xce>
 8009510:	6805      	ldr	r5, [r0, #0]
 8009512:	600b      	str	r3, [r1, #0]
 8009514:	2d00      	cmp	r5, #0
 8009516:	da03      	bge.n	8009520 <_printf_i+0xc8>
 8009518:	232d      	movs	r3, #45	; 0x2d
 800951a:	426d      	negs	r5, r5
 800951c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009520:	485e      	ldr	r0, [pc, #376]	; (800969c <_printf_i+0x244>)
 8009522:	230a      	movs	r3, #10
 8009524:	e019      	b.n	800955a <_printf_i+0x102>
 8009526:	f015 0f40 	tst.w	r5, #64	; 0x40
 800952a:	6805      	ldr	r5, [r0, #0]
 800952c:	600b      	str	r3, [r1, #0]
 800952e:	bf18      	it	ne
 8009530:	b22d      	sxthne	r5, r5
 8009532:	e7ef      	b.n	8009514 <_printf_i+0xbc>
 8009534:	680b      	ldr	r3, [r1, #0]
 8009536:	6825      	ldr	r5, [r4, #0]
 8009538:	1d18      	adds	r0, r3, #4
 800953a:	6008      	str	r0, [r1, #0]
 800953c:	0628      	lsls	r0, r5, #24
 800953e:	d501      	bpl.n	8009544 <_printf_i+0xec>
 8009540:	681d      	ldr	r5, [r3, #0]
 8009542:	e002      	b.n	800954a <_printf_i+0xf2>
 8009544:	0669      	lsls	r1, r5, #25
 8009546:	d5fb      	bpl.n	8009540 <_printf_i+0xe8>
 8009548:	881d      	ldrh	r5, [r3, #0]
 800954a:	4854      	ldr	r0, [pc, #336]	; (800969c <_printf_i+0x244>)
 800954c:	2f6f      	cmp	r7, #111	; 0x6f
 800954e:	bf0c      	ite	eq
 8009550:	2308      	moveq	r3, #8
 8009552:	230a      	movne	r3, #10
 8009554:	2100      	movs	r1, #0
 8009556:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800955a:	6866      	ldr	r6, [r4, #4]
 800955c:	60a6      	str	r6, [r4, #8]
 800955e:	2e00      	cmp	r6, #0
 8009560:	bfa2      	ittt	ge
 8009562:	6821      	ldrge	r1, [r4, #0]
 8009564:	f021 0104 	bicge.w	r1, r1, #4
 8009568:	6021      	strge	r1, [r4, #0]
 800956a:	b90d      	cbnz	r5, 8009570 <_printf_i+0x118>
 800956c:	2e00      	cmp	r6, #0
 800956e:	d04d      	beq.n	800960c <_printf_i+0x1b4>
 8009570:	4616      	mov	r6, r2
 8009572:	fbb5 f1f3 	udiv	r1, r5, r3
 8009576:	fb03 5711 	mls	r7, r3, r1, r5
 800957a:	5dc7      	ldrb	r7, [r0, r7]
 800957c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009580:	462f      	mov	r7, r5
 8009582:	42bb      	cmp	r3, r7
 8009584:	460d      	mov	r5, r1
 8009586:	d9f4      	bls.n	8009572 <_printf_i+0x11a>
 8009588:	2b08      	cmp	r3, #8
 800958a:	d10b      	bne.n	80095a4 <_printf_i+0x14c>
 800958c:	6823      	ldr	r3, [r4, #0]
 800958e:	07df      	lsls	r7, r3, #31
 8009590:	d508      	bpl.n	80095a4 <_printf_i+0x14c>
 8009592:	6923      	ldr	r3, [r4, #16]
 8009594:	6861      	ldr	r1, [r4, #4]
 8009596:	4299      	cmp	r1, r3
 8009598:	bfde      	ittt	le
 800959a:	2330      	movle	r3, #48	; 0x30
 800959c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80095a4:	1b92      	subs	r2, r2, r6
 80095a6:	6122      	str	r2, [r4, #16]
 80095a8:	f8cd a000 	str.w	sl, [sp]
 80095ac:	464b      	mov	r3, r9
 80095ae:	aa03      	add	r2, sp, #12
 80095b0:	4621      	mov	r1, r4
 80095b2:	4640      	mov	r0, r8
 80095b4:	f7ff fee2 	bl	800937c <_printf_common>
 80095b8:	3001      	adds	r0, #1
 80095ba:	d14c      	bne.n	8009656 <_printf_i+0x1fe>
 80095bc:	f04f 30ff 	mov.w	r0, #4294967295
 80095c0:	b004      	add	sp, #16
 80095c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095c6:	4835      	ldr	r0, [pc, #212]	; (800969c <_printf_i+0x244>)
 80095c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80095cc:	6823      	ldr	r3, [r4, #0]
 80095ce:	680e      	ldr	r6, [r1, #0]
 80095d0:	061f      	lsls	r7, r3, #24
 80095d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80095d6:	600e      	str	r6, [r1, #0]
 80095d8:	d514      	bpl.n	8009604 <_printf_i+0x1ac>
 80095da:	07d9      	lsls	r1, r3, #31
 80095dc:	bf44      	itt	mi
 80095de:	f043 0320 	orrmi.w	r3, r3, #32
 80095e2:	6023      	strmi	r3, [r4, #0]
 80095e4:	b91d      	cbnz	r5, 80095ee <_printf_i+0x196>
 80095e6:	6823      	ldr	r3, [r4, #0]
 80095e8:	f023 0320 	bic.w	r3, r3, #32
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	2310      	movs	r3, #16
 80095f0:	e7b0      	b.n	8009554 <_printf_i+0xfc>
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	f043 0320 	orr.w	r3, r3, #32
 80095f8:	6023      	str	r3, [r4, #0]
 80095fa:	2378      	movs	r3, #120	; 0x78
 80095fc:	4828      	ldr	r0, [pc, #160]	; (80096a0 <_printf_i+0x248>)
 80095fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009602:	e7e3      	b.n	80095cc <_printf_i+0x174>
 8009604:	065e      	lsls	r6, r3, #25
 8009606:	bf48      	it	mi
 8009608:	b2ad      	uxthmi	r5, r5
 800960a:	e7e6      	b.n	80095da <_printf_i+0x182>
 800960c:	4616      	mov	r6, r2
 800960e:	e7bb      	b.n	8009588 <_printf_i+0x130>
 8009610:	680b      	ldr	r3, [r1, #0]
 8009612:	6826      	ldr	r6, [r4, #0]
 8009614:	6960      	ldr	r0, [r4, #20]
 8009616:	1d1d      	adds	r5, r3, #4
 8009618:	600d      	str	r5, [r1, #0]
 800961a:	0635      	lsls	r5, r6, #24
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	d501      	bpl.n	8009624 <_printf_i+0x1cc>
 8009620:	6018      	str	r0, [r3, #0]
 8009622:	e002      	b.n	800962a <_printf_i+0x1d2>
 8009624:	0671      	lsls	r1, r6, #25
 8009626:	d5fb      	bpl.n	8009620 <_printf_i+0x1c8>
 8009628:	8018      	strh	r0, [r3, #0]
 800962a:	2300      	movs	r3, #0
 800962c:	6123      	str	r3, [r4, #16]
 800962e:	4616      	mov	r6, r2
 8009630:	e7ba      	b.n	80095a8 <_printf_i+0x150>
 8009632:	680b      	ldr	r3, [r1, #0]
 8009634:	1d1a      	adds	r2, r3, #4
 8009636:	600a      	str	r2, [r1, #0]
 8009638:	681e      	ldr	r6, [r3, #0]
 800963a:	6862      	ldr	r2, [r4, #4]
 800963c:	2100      	movs	r1, #0
 800963e:	4630      	mov	r0, r6
 8009640:	f7f6 fdd6 	bl	80001f0 <memchr>
 8009644:	b108      	cbz	r0, 800964a <_printf_i+0x1f2>
 8009646:	1b80      	subs	r0, r0, r6
 8009648:	6060      	str	r0, [r4, #4]
 800964a:	6863      	ldr	r3, [r4, #4]
 800964c:	6123      	str	r3, [r4, #16]
 800964e:	2300      	movs	r3, #0
 8009650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009654:	e7a8      	b.n	80095a8 <_printf_i+0x150>
 8009656:	6923      	ldr	r3, [r4, #16]
 8009658:	4632      	mov	r2, r6
 800965a:	4649      	mov	r1, r9
 800965c:	4640      	mov	r0, r8
 800965e:	47d0      	blx	sl
 8009660:	3001      	adds	r0, #1
 8009662:	d0ab      	beq.n	80095bc <_printf_i+0x164>
 8009664:	6823      	ldr	r3, [r4, #0]
 8009666:	079b      	lsls	r3, r3, #30
 8009668:	d413      	bmi.n	8009692 <_printf_i+0x23a>
 800966a:	68e0      	ldr	r0, [r4, #12]
 800966c:	9b03      	ldr	r3, [sp, #12]
 800966e:	4298      	cmp	r0, r3
 8009670:	bfb8      	it	lt
 8009672:	4618      	movlt	r0, r3
 8009674:	e7a4      	b.n	80095c0 <_printf_i+0x168>
 8009676:	2301      	movs	r3, #1
 8009678:	4632      	mov	r2, r6
 800967a:	4649      	mov	r1, r9
 800967c:	4640      	mov	r0, r8
 800967e:	47d0      	blx	sl
 8009680:	3001      	adds	r0, #1
 8009682:	d09b      	beq.n	80095bc <_printf_i+0x164>
 8009684:	3501      	adds	r5, #1
 8009686:	68e3      	ldr	r3, [r4, #12]
 8009688:	9903      	ldr	r1, [sp, #12]
 800968a:	1a5b      	subs	r3, r3, r1
 800968c:	42ab      	cmp	r3, r5
 800968e:	dcf2      	bgt.n	8009676 <_printf_i+0x21e>
 8009690:	e7eb      	b.n	800966a <_printf_i+0x212>
 8009692:	2500      	movs	r5, #0
 8009694:	f104 0619 	add.w	r6, r4, #25
 8009698:	e7f5      	b.n	8009686 <_printf_i+0x22e>
 800969a:	bf00      	nop
 800969c:	0800baaa 	.word	0x0800baaa
 80096a0:	0800babb 	.word	0x0800babb

080096a4 <_sbrk_r>:
 80096a4:	b538      	push	{r3, r4, r5, lr}
 80096a6:	4d06      	ldr	r5, [pc, #24]	; (80096c0 <_sbrk_r+0x1c>)
 80096a8:	2300      	movs	r3, #0
 80096aa:	4604      	mov	r4, r0
 80096ac:	4608      	mov	r0, r1
 80096ae:	602b      	str	r3, [r5, #0]
 80096b0:	f7f8 f920 	bl	80018f4 <_sbrk>
 80096b4:	1c43      	adds	r3, r0, #1
 80096b6:	d102      	bne.n	80096be <_sbrk_r+0x1a>
 80096b8:	682b      	ldr	r3, [r5, #0]
 80096ba:	b103      	cbz	r3, 80096be <_sbrk_r+0x1a>
 80096bc:	6023      	str	r3, [r4, #0]
 80096be:	bd38      	pop	{r3, r4, r5, pc}
 80096c0:	20001dd4 	.word	0x20001dd4

080096c4 <siprintf>:
 80096c4:	b40e      	push	{r1, r2, r3}
 80096c6:	b500      	push	{lr}
 80096c8:	b09c      	sub	sp, #112	; 0x70
 80096ca:	ab1d      	add	r3, sp, #116	; 0x74
 80096cc:	9002      	str	r0, [sp, #8]
 80096ce:	9006      	str	r0, [sp, #24]
 80096d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096d4:	4809      	ldr	r0, [pc, #36]	; (80096fc <siprintf+0x38>)
 80096d6:	9107      	str	r1, [sp, #28]
 80096d8:	9104      	str	r1, [sp, #16]
 80096da:	4909      	ldr	r1, [pc, #36]	; (8009700 <siprintf+0x3c>)
 80096dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80096e0:	9105      	str	r1, [sp, #20]
 80096e2:	6800      	ldr	r0, [r0, #0]
 80096e4:	9301      	str	r3, [sp, #4]
 80096e6:	a902      	add	r1, sp, #8
 80096e8:	f001 fa8c 	bl	800ac04 <_svfiprintf_r>
 80096ec:	9b02      	ldr	r3, [sp, #8]
 80096ee:	2200      	movs	r2, #0
 80096f0:	701a      	strb	r2, [r3, #0]
 80096f2:	b01c      	add	sp, #112	; 0x70
 80096f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80096f8:	b003      	add	sp, #12
 80096fa:	4770      	bx	lr
 80096fc:	20000188 	.word	0x20000188
 8009700:	ffff0208 	.word	0xffff0208

08009704 <quorem>:
 8009704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009708:	6903      	ldr	r3, [r0, #16]
 800970a:	690c      	ldr	r4, [r1, #16]
 800970c:	42a3      	cmp	r3, r4
 800970e:	4607      	mov	r7, r0
 8009710:	f2c0 8081 	blt.w	8009816 <quorem+0x112>
 8009714:	3c01      	subs	r4, #1
 8009716:	f101 0814 	add.w	r8, r1, #20
 800971a:	f100 0514 	add.w	r5, r0, #20
 800971e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009722:	9301      	str	r3, [sp, #4]
 8009724:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009728:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800972c:	3301      	adds	r3, #1
 800972e:	429a      	cmp	r2, r3
 8009730:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009734:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009738:	fbb2 f6f3 	udiv	r6, r2, r3
 800973c:	d331      	bcc.n	80097a2 <quorem+0x9e>
 800973e:	f04f 0e00 	mov.w	lr, #0
 8009742:	4640      	mov	r0, r8
 8009744:	46ac      	mov	ip, r5
 8009746:	46f2      	mov	sl, lr
 8009748:	f850 2b04 	ldr.w	r2, [r0], #4
 800974c:	b293      	uxth	r3, r2
 800974e:	fb06 e303 	mla	r3, r6, r3, lr
 8009752:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009756:	b29b      	uxth	r3, r3
 8009758:	ebaa 0303 	sub.w	r3, sl, r3
 800975c:	0c12      	lsrs	r2, r2, #16
 800975e:	f8dc a000 	ldr.w	sl, [ip]
 8009762:	fb06 e202 	mla	r2, r6, r2, lr
 8009766:	fa13 f38a 	uxtah	r3, r3, sl
 800976a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800976e:	fa1f fa82 	uxth.w	sl, r2
 8009772:	f8dc 2000 	ldr.w	r2, [ip]
 8009776:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800977a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800977e:	b29b      	uxth	r3, r3
 8009780:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009784:	4581      	cmp	r9, r0
 8009786:	f84c 3b04 	str.w	r3, [ip], #4
 800978a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800978e:	d2db      	bcs.n	8009748 <quorem+0x44>
 8009790:	f855 300b 	ldr.w	r3, [r5, fp]
 8009794:	b92b      	cbnz	r3, 80097a2 <quorem+0x9e>
 8009796:	9b01      	ldr	r3, [sp, #4]
 8009798:	3b04      	subs	r3, #4
 800979a:	429d      	cmp	r5, r3
 800979c:	461a      	mov	r2, r3
 800979e:	d32e      	bcc.n	80097fe <quorem+0xfa>
 80097a0:	613c      	str	r4, [r7, #16]
 80097a2:	4638      	mov	r0, r7
 80097a4:	f001 f8c4 	bl	800a930 <__mcmp>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	db24      	blt.n	80097f6 <quorem+0xf2>
 80097ac:	3601      	adds	r6, #1
 80097ae:	4628      	mov	r0, r5
 80097b0:	f04f 0c00 	mov.w	ip, #0
 80097b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80097b8:	f8d0 e000 	ldr.w	lr, [r0]
 80097bc:	b293      	uxth	r3, r2
 80097be:	ebac 0303 	sub.w	r3, ip, r3
 80097c2:	0c12      	lsrs	r2, r2, #16
 80097c4:	fa13 f38e 	uxtah	r3, r3, lr
 80097c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80097cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097d6:	45c1      	cmp	r9, r8
 80097d8:	f840 3b04 	str.w	r3, [r0], #4
 80097dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097e0:	d2e8      	bcs.n	80097b4 <quorem+0xb0>
 80097e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097ea:	b922      	cbnz	r2, 80097f6 <quorem+0xf2>
 80097ec:	3b04      	subs	r3, #4
 80097ee:	429d      	cmp	r5, r3
 80097f0:	461a      	mov	r2, r3
 80097f2:	d30a      	bcc.n	800980a <quorem+0x106>
 80097f4:	613c      	str	r4, [r7, #16]
 80097f6:	4630      	mov	r0, r6
 80097f8:	b003      	add	sp, #12
 80097fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097fe:	6812      	ldr	r2, [r2, #0]
 8009800:	3b04      	subs	r3, #4
 8009802:	2a00      	cmp	r2, #0
 8009804:	d1cc      	bne.n	80097a0 <quorem+0x9c>
 8009806:	3c01      	subs	r4, #1
 8009808:	e7c7      	b.n	800979a <quorem+0x96>
 800980a:	6812      	ldr	r2, [r2, #0]
 800980c:	3b04      	subs	r3, #4
 800980e:	2a00      	cmp	r2, #0
 8009810:	d1f0      	bne.n	80097f4 <quorem+0xf0>
 8009812:	3c01      	subs	r4, #1
 8009814:	e7eb      	b.n	80097ee <quorem+0xea>
 8009816:	2000      	movs	r0, #0
 8009818:	e7ee      	b.n	80097f8 <quorem+0xf4>
 800981a:	0000      	movs	r0, r0
 800981c:	0000      	movs	r0, r0
	...

08009820 <_dtoa_r>:
 8009820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009824:	ed2d 8b02 	vpush	{d8}
 8009828:	ec57 6b10 	vmov	r6, r7, d0
 800982c:	b095      	sub	sp, #84	; 0x54
 800982e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009830:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009834:	9105      	str	r1, [sp, #20]
 8009836:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800983a:	4604      	mov	r4, r0
 800983c:	9209      	str	r2, [sp, #36]	; 0x24
 800983e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009840:	b975      	cbnz	r5, 8009860 <_dtoa_r+0x40>
 8009842:	2010      	movs	r0, #16
 8009844:	f7ff fa02 	bl	8008c4c <malloc>
 8009848:	4602      	mov	r2, r0
 800984a:	6260      	str	r0, [r4, #36]	; 0x24
 800984c:	b920      	cbnz	r0, 8009858 <_dtoa_r+0x38>
 800984e:	4bb2      	ldr	r3, [pc, #712]	; (8009b18 <_dtoa_r+0x2f8>)
 8009850:	21ea      	movs	r1, #234	; 0xea
 8009852:	48b2      	ldr	r0, [pc, #712]	; (8009b1c <_dtoa_r+0x2fc>)
 8009854:	f001 fad6 	bl	800ae04 <__assert_func>
 8009858:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800985c:	6005      	str	r5, [r0, #0]
 800985e:	60c5      	str	r5, [r0, #12]
 8009860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009862:	6819      	ldr	r1, [r3, #0]
 8009864:	b151      	cbz	r1, 800987c <_dtoa_r+0x5c>
 8009866:	685a      	ldr	r2, [r3, #4]
 8009868:	604a      	str	r2, [r1, #4]
 800986a:	2301      	movs	r3, #1
 800986c:	4093      	lsls	r3, r2
 800986e:	608b      	str	r3, [r1, #8]
 8009870:	4620      	mov	r0, r4
 8009872:	f000 fe1f 	bl	800a4b4 <_Bfree>
 8009876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009878:	2200      	movs	r2, #0
 800987a:	601a      	str	r2, [r3, #0]
 800987c:	1e3b      	subs	r3, r7, #0
 800987e:	bfb9      	ittee	lt
 8009880:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009884:	9303      	strlt	r3, [sp, #12]
 8009886:	2300      	movge	r3, #0
 8009888:	f8c8 3000 	strge.w	r3, [r8]
 800988c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009890:	4ba3      	ldr	r3, [pc, #652]	; (8009b20 <_dtoa_r+0x300>)
 8009892:	bfbc      	itt	lt
 8009894:	2201      	movlt	r2, #1
 8009896:	f8c8 2000 	strlt.w	r2, [r8]
 800989a:	ea33 0309 	bics.w	r3, r3, r9
 800989e:	d11b      	bne.n	80098d8 <_dtoa_r+0xb8>
 80098a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80098a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80098a6:	6013      	str	r3, [r2, #0]
 80098a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098ac:	4333      	orrs	r3, r6
 80098ae:	f000 857a 	beq.w	800a3a6 <_dtoa_r+0xb86>
 80098b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098b4:	b963      	cbnz	r3, 80098d0 <_dtoa_r+0xb0>
 80098b6:	4b9b      	ldr	r3, [pc, #620]	; (8009b24 <_dtoa_r+0x304>)
 80098b8:	e024      	b.n	8009904 <_dtoa_r+0xe4>
 80098ba:	4b9b      	ldr	r3, [pc, #620]	; (8009b28 <_dtoa_r+0x308>)
 80098bc:	9300      	str	r3, [sp, #0]
 80098be:	3308      	adds	r3, #8
 80098c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80098c2:	6013      	str	r3, [r2, #0]
 80098c4:	9800      	ldr	r0, [sp, #0]
 80098c6:	b015      	add	sp, #84	; 0x54
 80098c8:	ecbd 8b02 	vpop	{d8}
 80098cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d0:	4b94      	ldr	r3, [pc, #592]	; (8009b24 <_dtoa_r+0x304>)
 80098d2:	9300      	str	r3, [sp, #0]
 80098d4:	3303      	adds	r3, #3
 80098d6:	e7f3      	b.n	80098c0 <_dtoa_r+0xa0>
 80098d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098dc:	2200      	movs	r2, #0
 80098de:	ec51 0b17 	vmov	r0, r1, d7
 80098e2:	2300      	movs	r3, #0
 80098e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80098e8:	f7f7 f8f6 	bl	8000ad8 <__aeabi_dcmpeq>
 80098ec:	4680      	mov	r8, r0
 80098ee:	b158      	cbz	r0, 8009908 <_dtoa_r+0xe8>
 80098f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80098f2:	2301      	movs	r3, #1
 80098f4:	6013      	str	r3, [r2, #0]
 80098f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 8551 	beq.w	800a3a0 <_dtoa_r+0xb80>
 80098fe:	488b      	ldr	r0, [pc, #556]	; (8009b2c <_dtoa_r+0x30c>)
 8009900:	6018      	str	r0, [r3, #0]
 8009902:	1e43      	subs	r3, r0, #1
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	e7dd      	b.n	80098c4 <_dtoa_r+0xa4>
 8009908:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800990c:	aa12      	add	r2, sp, #72	; 0x48
 800990e:	a913      	add	r1, sp, #76	; 0x4c
 8009910:	4620      	mov	r0, r4
 8009912:	f001 f8b1 	bl	800aa78 <__d2b>
 8009916:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800991a:	4683      	mov	fp, r0
 800991c:	2d00      	cmp	r5, #0
 800991e:	d07c      	beq.n	8009a1a <_dtoa_r+0x1fa>
 8009920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009922:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009926:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800992a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800992e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009932:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009936:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800993a:	4b7d      	ldr	r3, [pc, #500]	; (8009b30 <_dtoa_r+0x310>)
 800993c:	2200      	movs	r2, #0
 800993e:	4630      	mov	r0, r6
 8009940:	4639      	mov	r1, r7
 8009942:	f7f6 fca9 	bl	8000298 <__aeabi_dsub>
 8009946:	a36e      	add	r3, pc, #440	; (adr r3, 8009b00 <_dtoa_r+0x2e0>)
 8009948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994c:	f7f6 fe5c 	bl	8000608 <__aeabi_dmul>
 8009950:	a36d      	add	r3, pc, #436	; (adr r3, 8009b08 <_dtoa_r+0x2e8>)
 8009952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009956:	f7f6 fca1 	bl	800029c <__adddf3>
 800995a:	4606      	mov	r6, r0
 800995c:	4628      	mov	r0, r5
 800995e:	460f      	mov	r7, r1
 8009960:	f7f6 fde8 	bl	8000534 <__aeabi_i2d>
 8009964:	a36a      	add	r3, pc, #424	; (adr r3, 8009b10 <_dtoa_r+0x2f0>)
 8009966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996a:	f7f6 fe4d 	bl	8000608 <__aeabi_dmul>
 800996e:	4602      	mov	r2, r0
 8009970:	460b      	mov	r3, r1
 8009972:	4630      	mov	r0, r6
 8009974:	4639      	mov	r1, r7
 8009976:	f7f6 fc91 	bl	800029c <__adddf3>
 800997a:	4606      	mov	r6, r0
 800997c:	460f      	mov	r7, r1
 800997e:	f7f7 f8f3 	bl	8000b68 <__aeabi_d2iz>
 8009982:	2200      	movs	r2, #0
 8009984:	4682      	mov	sl, r0
 8009986:	2300      	movs	r3, #0
 8009988:	4630      	mov	r0, r6
 800998a:	4639      	mov	r1, r7
 800998c:	f7f7 f8ae 	bl	8000aec <__aeabi_dcmplt>
 8009990:	b148      	cbz	r0, 80099a6 <_dtoa_r+0x186>
 8009992:	4650      	mov	r0, sl
 8009994:	f7f6 fdce 	bl	8000534 <__aeabi_i2d>
 8009998:	4632      	mov	r2, r6
 800999a:	463b      	mov	r3, r7
 800999c:	f7f7 f89c 	bl	8000ad8 <__aeabi_dcmpeq>
 80099a0:	b908      	cbnz	r0, 80099a6 <_dtoa_r+0x186>
 80099a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099a6:	f1ba 0f16 	cmp.w	sl, #22
 80099aa:	d854      	bhi.n	8009a56 <_dtoa_r+0x236>
 80099ac:	4b61      	ldr	r3, [pc, #388]	; (8009b34 <_dtoa_r+0x314>)
 80099ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80099b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80099ba:	f7f7 f897 	bl	8000aec <__aeabi_dcmplt>
 80099be:	2800      	cmp	r0, #0
 80099c0:	d04b      	beq.n	8009a5a <_dtoa_r+0x23a>
 80099c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099c6:	2300      	movs	r3, #0
 80099c8:	930e      	str	r3, [sp, #56]	; 0x38
 80099ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099cc:	1b5d      	subs	r5, r3, r5
 80099ce:	1e6b      	subs	r3, r5, #1
 80099d0:	9304      	str	r3, [sp, #16]
 80099d2:	bf43      	ittte	mi
 80099d4:	2300      	movmi	r3, #0
 80099d6:	f1c5 0801 	rsbmi	r8, r5, #1
 80099da:	9304      	strmi	r3, [sp, #16]
 80099dc:	f04f 0800 	movpl.w	r8, #0
 80099e0:	f1ba 0f00 	cmp.w	sl, #0
 80099e4:	db3b      	blt.n	8009a5e <_dtoa_r+0x23e>
 80099e6:	9b04      	ldr	r3, [sp, #16]
 80099e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80099ec:	4453      	add	r3, sl
 80099ee:	9304      	str	r3, [sp, #16]
 80099f0:	2300      	movs	r3, #0
 80099f2:	9306      	str	r3, [sp, #24]
 80099f4:	9b05      	ldr	r3, [sp, #20]
 80099f6:	2b09      	cmp	r3, #9
 80099f8:	d869      	bhi.n	8009ace <_dtoa_r+0x2ae>
 80099fa:	2b05      	cmp	r3, #5
 80099fc:	bfc4      	itt	gt
 80099fe:	3b04      	subgt	r3, #4
 8009a00:	9305      	strgt	r3, [sp, #20]
 8009a02:	9b05      	ldr	r3, [sp, #20]
 8009a04:	f1a3 0302 	sub.w	r3, r3, #2
 8009a08:	bfcc      	ite	gt
 8009a0a:	2500      	movgt	r5, #0
 8009a0c:	2501      	movle	r5, #1
 8009a0e:	2b03      	cmp	r3, #3
 8009a10:	d869      	bhi.n	8009ae6 <_dtoa_r+0x2c6>
 8009a12:	e8df f003 	tbb	[pc, r3]
 8009a16:	4e2c      	.short	0x4e2c
 8009a18:	5a4c      	.short	0x5a4c
 8009a1a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009a1e:	441d      	add	r5, r3
 8009a20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009a24:	2b20      	cmp	r3, #32
 8009a26:	bfc1      	itttt	gt
 8009a28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a2c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009a30:	fa09 f303 	lslgt.w	r3, r9, r3
 8009a34:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a38:	bfda      	itte	le
 8009a3a:	f1c3 0320 	rsble	r3, r3, #32
 8009a3e:	fa06 f003 	lslle.w	r0, r6, r3
 8009a42:	4318      	orrgt	r0, r3
 8009a44:	f7f6 fd66 	bl	8000514 <__aeabi_ui2d>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	4606      	mov	r6, r0
 8009a4c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009a50:	3d01      	subs	r5, #1
 8009a52:	9310      	str	r3, [sp, #64]	; 0x40
 8009a54:	e771      	b.n	800993a <_dtoa_r+0x11a>
 8009a56:	2301      	movs	r3, #1
 8009a58:	e7b6      	b.n	80099c8 <_dtoa_r+0x1a8>
 8009a5a:	900e      	str	r0, [sp, #56]	; 0x38
 8009a5c:	e7b5      	b.n	80099ca <_dtoa_r+0x1aa>
 8009a5e:	f1ca 0300 	rsb	r3, sl, #0
 8009a62:	9306      	str	r3, [sp, #24]
 8009a64:	2300      	movs	r3, #0
 8009a66:	eba8 080a 	sub.w	r8, r8, sl
 8009a6a:	930d      	str	r3, [sp, #52]	; 0x34
 8009a6c:	e7c2      	b.n	80099f4 <_dtoa_r+0x1d4>
 8009a6e:	2300      	movs	r3, #0
 8009a70:	9308      	str	r3, [sp, #32]
 8009a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	dc39      	bgt.n	8009aec <_dtoa_r+0x2cc>
 8009a78:	f04f 0901 	mov.w	r9, #1
 8009a7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a80:	464b      	mov	r3, r9
 8009a82:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009a86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009a88:	2200      	movs	r2, #0
 8009a8a:	6042      	str	r2, [r0, #4]
 8009a8c:	2204      	movs	r2, #4
 8009a8e:	f102 0614 	add.w	r6, r2, #20
 8009a92:	429e      	cmp	r6, r3
 8009a94:	6841      	ldr	r1, [r0, #4]
 8009a96:	d92f      	bls.n	8009af8 <_dtoa_r+0x2d8>
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f000 fccb 	bl	800a434 <_Balloc>
 8009a9e:	9000      	str	r0, [sp, #0]
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	d14b      	bne.n	8009b3c <_dtoa_r+0x31c>
 8009aa4:	4b24      	ldr	r3, [pc, #144]	; (8009b38 <_dtoa_r+0x318>)
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009aac:	e6d1      	b.n	8009852 <_dtoa_r+0x32>
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e7de      	b.n	8009a70 <_dtoa_r+0x250>
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	9308      	str	r3, [sp, #32]
 8009ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ab8:	eb0a 0903 	add.w	r9, sl, r3
 8009abc:	f109 0301 	add.w	r3, r9, #1
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	9301      	str	r3, [sp, #4]
 8009ac4:	bfb8      	it	lt
 8009ac6:	2301      	movlt	r3, #1
 8009ac8:	e7dd      	b.n	8009a86 <_dtoa_r+0x266>
 8009aca:	2301      	movs	r3, #1
 8009acc:	e7f2      	b.n	8009ab4 <_dtoa_r+0x294>
 8009ace:	2501      	movs	r5, #1
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	9305      	str	r3, [sp, #20]
 8009ad4:	9508      	str	r5, [sp, #32]
 8009ad6:	f04f 39ff 	mov.w	r9, #4294967295
 8009ada:	2200      	movs	r2, #0
 8009adc:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ae0:	2312      	movs	r3, #18
 8009ae2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ae4:	e7cf      	b.n	8009a86 <_dtoa_r+0x266>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	9308      	str	r3, [sp, #32]
 8009aea:	e7f4      	b.n	8009ad6 <_dtoa_r+0x2b6>
 8009aec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009af0:	f8cd 9004 	str.w	r9, [sp, #4]
 8009af4:	464b      	mov	r3, r9
 8009af6:	e7c6      	b.n	8009a86 <_dtoa_r+0x266>
 8009af8:	3101      	adds	r1, #1
 8009afa:	6041      	str	r1, [r0, #4]
 8009afc:	0052      	lsls	r2, r2, #1
 8009afe:	e7c6      	b.n	8009a8e <_dtoa_r+0x26e>
 8009b00:	636f4361 	.word	0x636f4361
 8009b04:	3fd287a7 	.word	0x3fd287a7
 8009b08:	8b60c8b3 	.word	0x8b60c8b3
 8009b0c:	3fc68a28 	.word	0x3fc68a28
 8009b10:	509f79fb 	.word	0x509f79fb
 8009b14:	3fd34413 	.word	0x3fd34413
 8009b18:	0800bad9 	.word	0x0800bad9
 8009b1c:	0800baf0 	.word	0x0800baf0
 8009b20:	7ff00000 	.word	0x7ff00000
 8009b24:	0800bad5 	.word	0x0800bad5
 8009b28:	0800bacc 	.word	0x0800bacc
 8009b2c:	0800baa9 	.word	0x0800baa9
 8009b30:	3ff80000 	.word	0x3ff80000
 8009b34:	0800bbe8 	.word	0x0800bbe8
 8009b38:	0800bb4f 	.word	0x0800bb4f
 8009b3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b3e:	9a00      	ldr	r2, [sp, #0]
 8009b40:	601a      	str	r2, [r3, #0]
 8009b42:	9b01      	ldr	r3, [sp, #4]
 8009b44:	2b0e      	cmp	r3, #14
 8009b46:	f200 80ad 	bhi.w	8009ca4 <_dtoa_r+0x484>
 8009b4a:	2d00      	cmp	r5, #0
 8009b4c:	f000 80aa 	beq.w	8009ca4 <_dtoa_r+0x484>
 8009b50:	f1ba 0f00 	cmp.w	sl, #0
 8009b54:	dd36      	ble.n	8009bc4 <_dtoa_r+0x3a4>
 8009b56:	4ac3      	ldr	r2, [pc, #780]	; (8009e64 <_dtoa_r+0x644>)
 8009b58:	f00a 030f 	and.w	r3, sl, #15
 8009b5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b60:	ed93 7b00 	vldr	d7, [r3]
 8009b64:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009b68:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009b6c:	eeb0 8a47 	vmov.f32	s16, s14
 8009b70:	eef0 8a67 	vmov.f32	s17, s15
 8009b74:	d016      	beq.n	8009ba4 <_dtoa_r+0x384>
 8009b76:	4bbc      	ldr	r3, [pc, #752]	; (8009e68 <_dtoa_r+0x648>)
 8009b78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b80:	f7f6 fe6c 	bl	800085c <__aeabi_ddiv>
 8009b84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b88:	f007 070f 	and.w	r7, r7, #15
 8009b8c:	2503      	movs	r5, #3
 8009b8e:	4eb6      	ldr	r6, [pc, #728]	; (8009e68 <_dtoa_r+0x648>)
 8009b90:	b957      	cbnz	r7, 8009ba8 <_dtoa_r+0x388>
 8009b92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b96:	ec53 2b18 	vmov	r2, r3, d8
 8009b9a:	f7f6 fe5f 	bl	800085c <__aeabi_ddiv>
 8009b9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ba2:	e029      	b.n	8009bf8 <_dtoa_r+0x3d8>
 8009ba4:	2502      	movs	r5, #2
 8009ba6:	e7f2      	b.n	8009b8e <_dtoa_r+0x36e>
 8009ba8:	07f9      	lsls	r1, r7, #31
 8009baa:	d508      	bpl.n	8009bbe <_dtoa_r+0x39e>
 8009bac:	ec51 0b18 	vmov	r0, r1, d8
 8009bb0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009bb4:	f7f6 fd28 	bl	8000608 <__aeabi_dmul>
 8009bb8:	ec41 0b18 	vmov	d8, r0, r1
 8009bbc:	3501      	adds	r5, #1
 8009bbe:	107f      	asrs	r7, r7, #1
 8009bc0:	3608      	adds	r6, #8
 8009bc2:	e7e5      	b.n	8009b90 <_dtoa_r+0x370>
 8009bc4:	f000 80a6 	beq.w	8009d14 <_dtoa_r+0x4f4>
 8009bc8:	f1ca 0600 	rsb	r6, sl, #0
 8009bcc:	4ba5      	ldr	r3, [pc, #660]	; (8009e64 <_dtoa_r+0x644>)
 8009bce:	4fa6      	ldr	r7, [pc, #664]	; (8009e68 <_dtoa_r+0x648>)
 8009bd0:	f006 020f 	and.w	r2, r6, #15
 8009bd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bdc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009be0:	f7f6 fd12 	bl	8000608 <__aeabi_dmul>
 8009be4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009be8:	1136      	asrs	r6, r6, #4
 8009bea:	2300      	movs	r3, #0
 8009bec:	2502      	movs	r5, #2
 8009bee:	2e00      	cmp	r6, #0
 8009bf0:	f040 8085 	bne.w	8009cfe <_dtoa_r+0x4de>
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d1d2      	bne.n	8009b9e <_dtoa_r+0x37e>
 8009bf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f000 808c 	beq.w	8009d18 <_dtoa_r+0x4f8>
 8009c00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c04:	4b99      	ldr	r3, [pc, #612]	; (8009e6c <_dtoa_r+0x64c>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	4630      	mov	r0, r6
 8009c0a:	4639      	mov	r1, r7
 8009c0c:	f7f6 ff6e 	bl	8000aec <__aeabi_dcmplt>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	f000 8081 	beq.w	8009d18 <_dtoa_r+0x4f8>
 8009c16:	9b01      	ldr	r3, [sp, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d07d      	beq.n	8009d18 <_dtoa_r+0x4f8>
 8009c1c:	f1b9 0f00 	cmp.w	r9, #0
 8009c20:	dd3c      	ble.n	8009c9c <_dtoa_r+0x47c>
 8009c22:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009c26:	9307      	str	r3, [sp, #28]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	4b91      	ldr	r3, [pc, #580]	; (8009e70 <_dtoa_r+0x650>)
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	4639      	mov	r1, r7
 8009c30:	f7f6 fcea 	bl	8000608 <__aeabi_dmul>
 8009c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c38:	3501      	adds	r5, #1
 8009c3a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009c3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c42:	4628      	mov	r0, r5
 8009c44:	f7f6 fc76 	bl	8000534 <__aeabi_i2d>
 8009c48:	4632      	mov	r2, r6
 8009c4a:	463b      	mov	r3, r7
 8009c4c:	f7f6 fcdc 	bl	8000608 <__aeabi_dmul>
 8009c50:	4b88      	ldr	r3, [pc, #544]	; (8009e74 <_dtoa_r+0x654>)
 8009c52:	2200      	movs	r2, #0
 8009c54:	f7f6 fb22 	bl	800029c <__adddf3>
 8009c58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c60:	9303      	str	r3, [sp, #12]
 8009c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d15c      	bne.n	8009d22 <_dtoa_r+0x502>
 8009c68:	4b83      	ldr	r3, [pc, #524]	; (8009e78 <_dtoa_r+0x658>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	4639      	mov	r1, r7
 8009c70:	f7f6 fb12 	bl	8000298 <__aeabi_dsub>
 8009c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c78:	4606      	mov	r6, r0
 8009c7a:	460f      	mov	r7, r1
 8009c7c:	f7f6 ff54 	bl	8000b28 <__aeabi_dcmpgt>
 8009c80:	2800      	cmp	r0, #0
 8009c82:	f040 8296 	bne.w	800a1b2 <_dtoa_r+0x992>
 8009c86:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c90:	4639      	mov	r1, r7
 8009c92:	f7f6 ff2b 	bl	8000aec <__aeabi_dcmplt>
 8009c96:	2800      	cmp	r0, #0
 8009c98:	f040 8288 	bne.w	800a1ac <_dtoa_r+0x98c>
 8009c9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009ca0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ca4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f2c0 8158 	blt.w	8009f5c <_dtoa_r+0x73c>
 8009cac:	f1ba 0f0e 	cmp.w	sl, #14
 8009cb0:	f300 8154 	bgt.w	8009f5c <_dtoa_r+0x73c>
 8009cb4:	4b6b      	ldr	r3, [pc, #428]	; (8009e64 <_dtoa_r+0x644>)
 8009cb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009cba:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f280 80e3 	bge.w	8009e8c <_dtoa_r+0x66c>
 8009cc6:	9b01      	ldr	r3, [sp, #4]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f300 80df 	bgt.w	8009e8c <_dtoa_r+0x66c>
 8009cce:	f040 826d 	bne.w	800a1ac <_dtoa_r+0x98c>
 8009cd2:	4b69      	ldr	r3, [pc, #420]	; (8009e78 <_dtoa_r+0x658>)
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	4640      	mov	r0, r8
 8009cd8:	4649      	mov	r1, r9
 8009cda:	f7f6 fc95 	bl	8000608 <__aeabi_dmul>
 8009cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ce2:	f7f6 ff17 	bl	8000b14 <__aeabi_dcmpge>
 8009ce6:	9e01      	ldr	r6, [sp, #4]
 8009ce8:	4637      	mov	r7, r6
 8009cea:	2800      	cmp	r0, #0
 8009cec:	f040 8243 	bne.w	800a176 <_dtoa_r+0x956>
 8009cf0:	9d00      	ldr	r5, [sp, #0]
 8009cf2:	2331      	movs	r3, #49	; 0x31
 8009cf4:	f805 3b01 	strb.w	r3, [r5], #1
 8009cf8:	f10a 0a01 	add.w	sl, sl, #1
 8009cfc:	e23f      	b.n	800a17e <_dtoa_r+0x95e>
 8009cfe:	07f2      	lsls	r2, r6, #31
 8009d00:	d505      	bpl.n	8009d0e <_dtoa_r+0x4ee>
 8009d02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d06:	f7f6 fc7f 	bl	8000608 <__aeabi_dmul>
 8009d0a:	3501      	adds	r5, #1
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	1076      	asrs	r6, r6, #1
 8009d10:	3708      	adds	r7, #8
 8009d12:	e76c      	b.n	8009bee <_dtoa_r+0x3ce>
 8009d14:	2502      	movs	r5, #2
 8009d16:	e76f      	b.n	8009bf8 <_dtoa_r+0x3d8>
 8009d18:	9b01      	ldr	r3, [sp, #4]
 8009d1a:	f8cd a01c 	str.w	sl, [sp, #28]
 8009d1e:	930c      	str	r3, [sp, #48]	; 0x30
 8009d20:	e78d      	b.n	8009c3e <_dtoa_r+0x41e>
 8009d22:	9900      	ldr	r1, [sp, #0]
 8009d24:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009d26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d28:	4b4e      	ldr	r3, [pc, #312]	; (8009e64 <_dtoa_r+0x644>)
 8009d2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d2e:	4401      	add	r1, r0
 8009d30:	9102      	str	r1, [sp, #8]
 8009d32:	9908      	ldr	r1, [sp, #32]
 8009d34:	eeb0 8a47 	vmov.f32	s16, s14
 8009d38:	eef0 8a67 	vmov.f32	s17, s15
 8009d3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d44:	2900      	cmp	r1, #0
 8009d46:	d045      	beq.n	8009dd4 <_dtoa_r+0x5b4>
 8009d48:	494c      	ldr	r1, [pc, #304]	; (8009e7c <_dtoa_r+0x65c>)
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	f7f6 fd86 	bl	800085c <__aeabi_ddiv>
 8009d50:	ec53 2b18 	vmov	r2, r3, d8
 8009d54:	f7f6 faa0 	bl	8000298 <__aeabi_dsub>
 8009d58:	9d00      	ldr	r5, [sp, #0]
 8009d5a:	ec41 0b18 	vmov	d8, r0, r1
 8009d5e:	4639      	mov	r1, r7
 8009d60:	4630      	mov	r0, r6
 8009d62:	f7f6 ff01 	bl	8000b68 <__aeabi_d2iz>
 8009d66:	900c      	str	r0, [sp, #48]	; 0x30
 8009d68:	f7f6 fbe4 	bl	8000534 <__aeabi_i2d>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	460b      	mov	r3, r1
 8009d70:	4630      	mov	r0, r6
 8009d72:	4639      	mov	r1, r7
 8009d74:	f7f6 fa90 	bl	8000298 <__aeabi_dsub>
 8009d78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d7a:	3330      	adds	r3, #48	; 0x30
 8009d7c:	f805 3b01 	strb.w	r3, [r5], #1
 8009d80:	ec53 2b18 	vmov	r2, r3, d8
 8009d84:	4606      	mov	r6, r0
 8009d86:	460f      	mov	r7, r1
 8009d88:	f7f6 feb0 	bl	8000aec <__aeabi_dcmplt>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	d165      	bne.n	8009e5c <_dtoa_r+0x63c>
 8009d90:	4632      	mov	r2, r6
 8009d92:	463b      	mov	r3, r7
 8009d94:	4935      	ldr	r1, [pc, #212]	; (8009e6c <_dtoa_r+0x64c>)
 8009d96:	2000      	movs	r0, #0
 8009d98:	f7f6 fa7e 	bl	8000298 <__aeabi_dsub>
 8009d9c:	ec53 2b18 	vmov	r2, r3, d8
 8009da0:	f7f6 fea4 	bl	8000aec <__aeabi_dcmplt>
 8009da4:	2800      	cmp	r0, #0
 8009da6:	f040 80b9 	bne.w	8009f1c <_dtoa_r+0x6fc>
 8009daa:	9b02      	ldr	r3, [sp, #8]
 8009dac:	429d      	cmp	r5, r3
 8009dae:	f43f af75 	beq.w	8009c9c <_dtoa_r+0x47c>
 8009db2:	4b2f      	ldr	r3, [pc, #188]	; (8009e70 <_dtoa_r+0x650>)
 8009db4:	ec51 0b18 	vmov	r0, r1, d8
 8009db8:	2200      	movs	r2, #0
 8009dba:	f7f6 fc25 	bl	8000608 <__aeabi_dmul>
 8009dbe:	4b2c      	ldr	r3, [pc, #176]	; (8009e70 <_dtoa_r+0x650>)
 8009dc0:	ec41 0b18 	vmov	d8, r0, r1
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	4639      	mov	r1, r7
 8009dca:	f7f6 fc1d 	bl	8000608 <__aeabi_dmul>
 8009dce:	4606      	mov	r6, r0
 8009dd0:	460f      	mov	r7, r1
 8009dd2:	e7c4      	b.n	8009d5e <_dtoa_r+0x53e>
 8009dd4:	ec51 0b17 	vmov	r0, r1, d7
 8009dd8:	f7f6 fc16 	bl	8000608 <__aeabi_dmul>
 8009ddc:	9b02      	ldr	r3, [sp, #8]
 8009dde:	9d00      	ldr	r5, [sp, #0]
 8009de0:	930c      	str	r3, [sp, #48]	; 0x30
 8009de2:	ec41 0b18 	vmov	d8, r0, r1
 8009de6:	4639      	mov	r1, r7
 8009de8:	4630      	mov	r0, r6
 8009dea:	f7f6 febd 	bl	8000b68 <__aeabi_d2iz>
 8009dee:	9011      	str	r0, [sp, #68]	; 0x44
 8009df0:	f7f6 fba0 	bl	8000534 <__aeabi_i2d>
 8009df4:	4602      	mov	r2, r0
 8009df6:	460b      	mov	r3, r1
 8009df8:	4630      	mov	r0, r6
 8009dfa:	4639      	mov	r1, r7
 8009dfc:	f7f6 fa4c 	bl	8000298 <__aeabi_dsub>
 8009e00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e02:	3330      	adds	r3, #48	; 0x30
 8009e04:	f805 3b01 	strb.w	r3, [r5], #1
 8009e08:	9b02      	ldr	r3, [sp, #8]
 8009e0a:	429d      	cmp	r5, r3
 8009e0c:	4606      	mov	r6, r0
 8009e0e:	460f      	mov	r7, r1
 8009e10:	f04f 0200 	mov.w	r2, #0
 8009e14:	d134      	bne.n	8009e80 <_dtoa_r+0x660>
 8009e16:	4b19      	ldr	r3, [pc, #100]	; (8009e7c <_dtoa_r+0x65c>)
 8009e18:	ec51 0b18 	vmov	r0, r1, d8
 8009e1c:	f7f6 fa3e 	bl	800029c <__adddf3>
 8009e20:	4602      	mov	r2, r0
 8009e22:	460b      	mov	r3, r1
 8009e24:	4630      	mov	r0, r6
 8009e26:	4639      	mov	r1, r7
 8009e28:	f7f6 fe7e 	bl	8000b28 <__aeabi_dcmpgt>
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	d175      	bne.n	8009f1c <_dtoa_r+0x6fc>
 8009e30:	ec53 2b18 	vmov	r2, r3, d8
 8009e34:	4911      	ldr	r1, [pc, #68]	; (8009e7c <_dtoa_r+0x65c>)
 8009e36:	2000      	movs	r0, #0
 8009e38:	f7f6 fa2e 	bl	8000298 <__aeabi_dsub>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	460b      	mov	r3, r1
 8009e40:	4630      	mov	r0, r6
 8009e42:	4639      	mov	r1, r7
 8009e44:	f7f6 fe52 	bl	8000aec <__aeabi_dcmplt>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	f43f af27 	beq.w	8009c9c <_dtoa_r+0x47c>
 8009e4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e50:	1e6b      	subs	r3, r5, #1
 8009e52:	930c      	str	r3, [sp, #48]	; 0x30
 8009e54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e58:	2b30      	cmp	r3, #48	; 0x30
 8009e5a:	d0f8      	beq.n	8009e4e <_dtoa_r+0x62e>
 8009e5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009e60:	e04a      	b.n	8009ef8 <_dtoa_r+0x6d8>
 8009e62:	bf00      	nop
 8009e64:	0800bbe8 	.word	0x0800bbe8
 8009e68:	0800bbc0 	.word	0x0800bbc0
 8009e6c:	3ff00000 	.word	0x3ff00000
 8009e70:	40240000 	.word	0x40240000
 8009e74:	401c0000 	.word	0x401c0000
 8009e78:	40140000 	.word	0x40140000
 8009e7c:	3fe00000 	.word	0x3fe00000
 8009e80:	4baf      	ldr	r3, [pc, #700]	; (800a140 <_dtoa_r+0x920>)
 8009e82:	f7f6 fbc1 	bl	8000608 <__aeabi_dmul>
 8009e86:	4606      	mov	r6, r0
 8009e88:	460f      	mov	r7, r1
 8009e8a:	e7ac      	b.n	8009de6 <_dtoa_r+0x5c6>
 8009e8c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e90:	9d00      	ldr	r5, [sp, #0]
 8009e92:	4642      	mov	r2, r8
 8009e94:	464b      	mov	r3, r9
 8009e96:	4630      	mov	r0, r6
 8009e98:	4639      	mov	r1, r7
 8009e9a:	f7f6 fcdf 	bl	800085c <__aeabi_ddiv>
 8009e9e:	f7f6 fe63 	bl	8000b68 <__aeabi_d2iz>
 8009ea2:	9002      	str	r0, [sp, #8]
 8009ea4:	f7f6 fb46 	bl	8000534 <__aeabi_i2d>
 8009ea8:	4642      	mov	r2, r8
 8009eaa:	464b      	mov	r3, r9
 8009eac:	f7f6 fbac 	bl	8000608 <__aeabi_dmul>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	4630      	mov	r0, r6
 8009eb6:	4639      	mov	r1, r7
 8009eb8:	f7f6 f9ee 	bl	8000298 <__aeabi_dsub>
 8009ebc:	9e02      	ldr	r6, [sp, #8]
 8009ebe:	9f01      	ldr	r7, [sp, #4]
 8009ec0:	3630      	adds	r6, #48	; 0x30
 8009ec2:	f805 6b01 	strb.w	r6, [r5], #1
 8009ec6:	9e00      	ldr	r6, [sp, #0]
 8009ec8:	1bae      	subs	r6, r5, r6
 8009eca:	42b7      	cmp	r7, r6
 8009ecc:	4602      	mov	r2, r0
 8009ece:	460b      	mov	r3, r1
 8009ed0:	d137      	bne.n	8009f42 <_dtoa_r+0x722>
 8009ed2:	f7f6 f9e3 	bl	800029c <__adddf3>
 8009ed6:	4642      	mov	r2, r8
 8009ed8:	464b      	mov	r3, r9
 8009eda:	4606      	mov	r6, r0
 8009edc:	460f      	mov	r7, r1
 8009ede:	f7f6 fe23 	bl	8000b28 <__aeabi_dcmpgt>
 8009ee2:	b9c8      	cbnz	r0, 8009f18 <_dtoa_r+0x6f8>
 8009ee4:	4642      	mov	r2, r8
 8009ee6:	464b      	mov	r3, r9
 8009ee8:	4630      	mov	r0, r6
 8009eea:	4639      	mov	r1, r7
 8009eec:	f7f6 fdf4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ef0:	b110      	cbz	r0, 8009ef8 <_dtoa_r+0x6d8>
 8009ef2:	9b02      	ldr	r3, [sp, #8]
 8009ef4:	07d9      	lsls	r1, r3, #31
 8009ef6:	d40f      	bmi.n	8009f18 <_dtoa_r+0x6f8>
 8009ef8:	4620      	mov	r0, r4
 8009efa:	4659      	mov	r1, fp
 8009efc:	f000 fada 	bl	800a4b4 <_Bfree>
 8009f00:	2300      	movs	r3, #0
 8009f02:	702b      	strb	r3, [r5, #0]
 8009f04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f06:	f10a 0001 	add.w	r0, sl, #1
 8009f0a:	6018      	str	r0, [r3, #0]
 8009f0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f43f acd8 	beq.w	80098c4 <_dtoa_r+0xa4>
 8009f14:	601d      	str	r5, [r3, #0]
 8009f16:	e4d5      	b.n	80098c4 <_dtoa_r+0xa4>
 8009f18:	f8cd a01c 	str.w	sl, [sp, #28]
 8009f1c:	462b      	mov	r3, r5
 8009f1e:	461d      	mov	r5, r3
 8009f20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f24:	2a39      	cmp	r2, #57	; 0x39
 8009f26:	d108      	bne.n	8009f3a <_dtoa_r+0x71a>
 8009f28:	9a00      	ldr	r2, [sp, #0]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d1f7      	bne.n	8009f1e <_dtoa_r+0x6fe>
 8009f2e:	9a07      	ldr	r2, [sp, #28]
 8009f30:	9900      	ldr	r1, [sp, #0]
 8009f32:	3201      	adds	r2, #1
 8009f34:	9207      	str	r2, [sp, #28]
 8009f36:	2230      	movs	r2, #48	; 0x30
 8009f38:	700a      	strb	r2, [r1, #0]
 8009f3a:	781a      	ldrb	r2, [r3, #0]
 8009f3c:	3201      	adds	r2, #1
 8009f3e:	701a      	strb	r2, [r3, #0]
 8009f40:	e78c      	b.n	8009e5c <_dtoa_r+0x63c>
 8009f42:	4b7f      	ldr	r3, [pc, #508]	; (800a140 <_dtoa_r+0x920>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	f7f6 fb5f 	bl	8000608 <__aeabi_dmul>
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	4606      	mov	r6, r0
 8009f50:	460f      	mov	r7, r1
 8009f52:	f7f6 fdc1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f56:	2800      	cmp	r0, #0
 8009f58:	d09b      	beq.n	8009e92 <_dtoa_r+0x672>
 8009f5a:	e7cd      	b.n	8009ef8 <_dtoa_r+0x6d8>
 8009f5c:	9a08      	ldr	r2, [sp, #32]
 8009f5e:	2a00      	cmp	r2, #0
 8009f60:	f000 80c4 	beq.w	800a0ec <_dtoa_r+0x8cc>
 8009f64:	9a05      	ldr	r2, [sp, #20]
 8009f66:	2a01      	cmp	r2, #1
 8009f68:	f300 80a8 	bgt.w	800a0bc <_dtoa_r+0x89c>
 8009f6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f6e:	2a00      	cmp	r2, #0
 8009f70:	f000 80a0 	beq.w	800a0b4 <_dtoa_r+0x894>
 8009f74:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f78:	9e06      	ldr	r6, [sp, #24]
 8009f7a:	4645      	mov	r5, r8
 8009f7c:	9a04      	ldr	r2, [sp, #16]
 8009f7e:	2101      	movs	r1, #1
 8009f80:	441a      	add	r2, r3
 8009f82:	4620      	mov	r0, r4
 8009f84:	4498      	add	r8, r3
 8009f86:	9204      	str	r2, [sp, #16]
 8009f88:	f000 fb50 	bl	800a62c <__i2b>
 8009f8c:	4607      	mov	r7, r0
 8009f8e:	2d00      	cmp	r5, #0
 8009f90:	dd0b      	ble.n	8009faa <_dtoa_r+0x78a>
 8009f92:	9b04      	ldr	r3, [sp, #16]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	dd08      	ble.n	8009faa <_dtoa_r+0x78a>
 8009f98:	42ab      	cmp	r3, r5
 8009f9a:	9a04      	ldr	r2, [sp, #16]
 8009f9c:	bfa8      	it	ge
 8009f9e:	462b      	movge	r3, r5
 8009fa0:	eba8 0803 	sub.w	r8, r8, r3
 8009fa4:	1aed      	subs	r5, r5, r3
 8009fa6:	1ad3      	subs	r3, r2, r3
 8009fa8:	9304      	str	r3, [sp, #16]
 8009faa:	9b06      	ldr	r3, [sp, #24]
 8009fac:	b1fb      	cbz	r3, 8009fee <_dtoa_r+0x7ce>
 8009fae:	9b08      	ldr	r3, [sp, #32]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f000 809f 	beq.w	800a0f4 <_dtoa_r+0x8d4>
 8009fb6:	2e00      	cmp	r6, #0
 8009fb8:	dd11      	ble.n	8009fde <_dtoa_r+0x7be>
 8009fba:	4639      	mov	r1, r7
 8009fbc:	4632      	mov	r2, r6
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f000 fbf0 	bl	800a7a4 <__pow5mult>
 8009fc4:	465a      	mov	r2, fp
 8009fc6:	4601      	mov	r1, r0
 8009fc8:	4607      	mov	r7, r0
 8009fca:	4620      	mov	r0, r4
 8009fcc:	f000 fb44 	bl	800a658 <__multiply>
 8009fd0:	4659      	mov	r1, fp
 8009fd2:	9007      	str	r0, [sp, #28]
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	f000 fa6d 	bl	800a4b4 <_Bfree>
 8009fda:	9b07      	ldr	r3, [sp, #28]
 8009fdc:	469b      	mov	fp, r3
 8009fde:	9b06      	ldr	r3, [sp, #24]
 8009fe0:	1b9a      	subs	r2, r3, r6
 8009fe2:	d004      	beq.n	8009fee <_dtoa_r+0x7ce>
 8009fe4:	4659      	mov	r1, fp
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f000 fbdc 	bl	800a7a4 <__pow5mult>
 8009fec:	4683      	mov	fp, r0
 8009fee:	2101      	movs	r1, #1
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f000 fb1b 	bl	800a62c <__i2b>
 8009ff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	4606      	mov	r6, r0
 8009ffc:	dd7c      	ble.n	800a0f8 <_dtoa_r+0x8d8>
 8009ffe:	461a      	mov	r2, r3
 800a000:	4601      	mov	r1, r0
 800a002:	4620      	mov	r0, r4
 800a004:	f000 fbce 	bl	800a7a4 <__pow5mult>
 800a008:	9b05      	ldr	r3, [sp, #20]
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	4606      	mov	r6, r0
 800a00e:	dd76      	ble.n	800a0fe <_dtoa_r+0x8de>
 800a010:	2300      	movs	r3, #0
 800a012:	9306      	str	r3, [sp, #24]
 800a014:	6933      	ldr	r3, [r6, #16]
 800a016:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a01a:	6918      	ldr	r0, [r3, #16]
 800a01c:	f000 fab6 	bl	800a58c <__hi0bits>
 800a020:	f1c0 0020 	rsb	r0, r0, #32
 800a024:	9b04      	ldr	r3, [sp, #16]
 800a026:	4418      	add	r0, r3
 800a028:	f010 001f 	ands.w	r0, r0, #31
 800a02c:	f000 8086 	beq.w	800a13c <_dtoa_r+0x91c>
 800a030:	f1c0 0320 	rsb	r3, r0, #32
 800a034:	2b04      	cmp	r3, #4
 800a036:	dd7f      	ble.n	800a138 <_dtoa_r+0x918>
 800a038:	f1c0 001c 	rsb	r0, r0, #28
 800a03c:	9b04      	ldr	r3, [sp, #16]
 800a03e:	4403      	add	r3, r0
 800a040:	4480      	add	r8, r0
 800a042:	4405      	add	r5, r0
 800a044:	9304      	str	r3, [sp, #16]
 800a046:	f1b8 0f00 	cmp.w	r8, #0
 800a04a:	dd05      	ble.n	800a058 <_dtoa_r+0x838>
 800a04c:	4659      	mov	r1, fp
 800a04e:	4642      	mov	r2, r8
 800a050:	4620      	mov	r0, r4
 800a052:	f000 fc01 	bl	800a858 <__lshift>
 800a056:	4683      	mov	fp, r0
 800a058:	9b04      	ldr	r3, [sp, #16]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	dd05      	ble.n	800a06a <_dtoa_r+0x84a>
 800a05e:	4631      	mov	r1, r6
 800a060:	461a      	mov	r2, r3
 800a062:	4620      	mov	r0, r4
 800a064:	f000 fbf8 	bl	800a858 <__lshift>
 800a068:	4606      	mov	r6, r0
 800a06a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d069      	beq.n	800a144 <_dtoa_r+0x924>
 800a070:	4631      	mov	r1, r6
 800a072:	4658      	mov	r0, fp
 800a074:	f000 fc5c 	bl	800a930 <__mcmp>
 800a078:	2800      	cmp	r0, #0
 800a07a:	da63      	bge.n	800a144 <_dtoa_r+0x924>
 800a07c:	2300      	movs	r3, #0
 800a07e:	4659      	mov	r1, fp
 800a080:	220a      	movs	r2, #10
 800a082:	4620      	mov	r0, r4
 800a084:	f000 fa38 	bl	800a4f8 <__multadd>
 800a088:	9b08      	ldr	r3, [sp, #32]
 800a08a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a08e:	4683      	mov	fp, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	f000 818f 	beq.w	800a3b4 <_dtoa_r+0xb94>
 800a096:	4639      	mov	r1, r7
 800a098:	2300      	movs	r3, #0
 800a09a:	220a      	movs	r2, #10
 800a09c:	4620      	mov	r0, r4
 800a09e:	f000 fa2b 	bl	800a4f8 <__multadd>
 800a0a2:	f1b9 0f00 	cmp.w	r9, #0
 800a0a6:	4607      	mov	r7, r0
 800a0a8:	f300 808e 	bgt.w	800a1c8 <_dtoa_r+0x9a8>
 800a0ac:	9b05      	ldr	r3, [sp, #20]
 800a0ae:	2b02      	cmp	r3, #2
 800a0b0:	dc50      	bgt.n	800a154 <_dtoa_r+0x934>
 800a0b2:	e089      	b.n	800a1c8 <_dtoa_r+0x9a8>
 800a0b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a0ba:	e75d      	b.n	8009f78 <_dtoa_r+0x758>
 800a0bc:	9b01      	ldr	r3, [sp, #4]
 800a0be:	1e5e      	subs	r6, r3, #1
 800a0c0:	9b06      	ldr	r3, [sp, #24]
 800a0c2:	42b3      	cmp	r3, r6
 800a0c4:	bfbf      	itttt	lt
 800a0c6:	9b06      	ldrlt	r3, [sp, #24]
 800a0c8:	9606      	strlt	r6, [sp, #24]
 800a0ca:	1af2      	sublt	r2, r6, r3
 800a0cc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a0ce:	bfb6      	itet	lt
 800a0d0:	189b      	addlt	r3, r3, r2
 800a0d2:	1b9e      	subge	r6, r3, r6
 800a0d4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a0d6:	9b01      	ldr	r3, [sp, #4]
 800a0d8:	bfb8      	it	lt
 800a0da:	2600      	movlt	r6, #0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	bfb5      	itete	lt
 800a0e0:	eba8 0503 	sublt.w	r5, r8, r3
 800a0e4:	9b01      	ldrge	r3, [sp, #4]
 800a0e6:	2300      	movlt	r3, #0
 800a0e8:	4645      	movge	r5, r8
 800a0ea:	e747      	b.n	8009f7c <_dtoa_r+0x75c>
 800a0ec:	9e06      	ldr	r6, [sp, #24]
 800a0ee:	9f08      	ldr	r7, [sp, #32]
 800a0f0:	4645      	mov	r5, r8
 800a0f2:	e74c      	b.n	8009f8e <_dtoa_r+0x76e>
 800a0f4:	9a06      	ldr	r2, [sp, #24]
 800a0f6:	e775      	b.n	8009fe4 <_dtoa_r+0x7c4>
 800a0f8:	9b05      	ldr	r3, [sp, #20]
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	dc18      	bgt.n	800a130 <_dtoa_r+0x910>
 800a0fe:	9b02      	ldr	r3, [sp, #8]
 800a100:	b9b3      	cbnz	r3, 800a130 <_dtoa_r+0x910>
 800a102:	9b03      	ldr	r3, [sp, #12]
 800a104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a108:	b9a3      	cbnz	r3, 800a134 <_dtoa_r+0x914>
 800a10a:	9b03      	ldr	r3, [sp, #12]
 800a10c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a110:	0d1b      	lsrs	r3, r3, #20
 800a112:	051b      	lsls	r3, r3, #20
 800a114:	b12b      	cbz	r3, 800a122 <_dtoa_r+0x902>
 800a116:	9b04      	ldr	r3, [sp, #16]
 800a118:	3301      	adds	r3, #1
 800a11a:	9304      	str	r3, [sp, #16]
 800a11c:	f108 0801 	add.w	r8, r8, #1
 800a120:	2301      	movs	r3, #1
 800a122:	9306      	str	r3, [sp, #24]
 800a124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a126:	2b00      	cmp	r3, #0
 800a128:	f47f af74 	bne.w	800a014 <_dtoa_r+0x7f4>
 800a12c:	2001      	movs	r0, #1
 800a12e:	e779      	b.n	800a024 <_dtoa_r+0x804>
 800a130:	2300      	movs	r3, #0
 800a132:	e7f6      	b.n	800a122 <_dtoa_r+0x902>
 800a134:	9b02      	ldr	r3, [sp, #8]
 800a136:	e7f4      	b.n	800a122 <_dtoa_r+0x902>
 800a138:	d085      	beq.n	800a046 <_dtoa_r+0x826>
 800a13a:	4618      	mov	r0, r3
 800a13c:	301c      	adds	r0, #28
 800a13e:	e77d      	b.n	800a03c <_dtoa_r+0x81c>
 800a140:	40240000 	.word	0x40240000
 800a144:	9b01      	ldr	r3, [sp, #4]
 800a146:	2b00      	cmp	r3, #0
 800a148:	dc38      	bgt.n	800a1bc <_dtoa_r+0x99c>
 800a14a:	9b05      	ldr	r3, [sp, #20]
 800a14c:	2b02      	cmp	r3, #2
 800a14e:	dd35      	ble.n	800a1bc <_dtoa_r+0x99c>
 800a150:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a154:	f1b9 0f00 	cmp.w	r9, #0
 800a158:	d10d      	bne.n	800a176 <_dtoa_r+0x956>
 800a15a:	4631      	mov	r1, r6
 800a15c:	464b      	mov	r3, r9
 800a15e:	2205      	movs	r2, #5
 800a160:	4620      	mov	r0, r4
 800a162:	f000 f9c9 	bl	800a4f8 <__multadd>
 800a166:	4601      	mov	r1, r0
 800a168:	4606      	mov	r6, r0
 800a16a:	4658      	mov	r0, fp
 800a16c:	f000 fbe0 	bl	800a930 <__mcmp>
 800a170:	2800      	cmp	r0, #0
 800a172:	f73f adbd 	bgt.w	8009cf0 <_dtoa_r+0x4d0>
 800a176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a178:	9d00      	ldr	r5, [sp, #0]
 800a17a:	ea6f 0a03 	mvn.w	sl, r3
 800a17e:	f04f 0800 	mov.w	r8, #0
 800a182:	4631      	mov	r1, r6
 800a184:	4620      	mov	r0, r4
 800a186:	f000 f995 	bl	800a4b4 <_Bfree>
 800a18a:	2f00      	cmp	r7, #0
 800a18c:	f43f aeb4 	beq.w	8009ef8 <_dtoa_r+0x6d8>
 800a190:	f1b8 0f00 	cmp.w	r8, #0
 800a194:	d005      	beq.n	800a1a2 <_dtoa_r+0x982>
 800a196:	45b8      	cmp	r8, r7
 800a198:	d003      	beq.n	800a1a2 <_dtoa_r+0x982>
 800a19a:	4641      	mov	r1, r8
 800a19c:	4620      	mov	r0, r4
 800a19e:	f000 f989 	bl	800a4b4 <_Bfree>
 800a1a2:	4639      	mov	r1, r7
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f000 f985 	bl	800a4b4 <_Bfree>
 800a1aa:	e6a5      	b.n	8009ef8 <_dtoa_r+0x6d8>
 800a1ac:	2600      	movs	r6, #0
 800a1ae:	4637      	mov	r7, r6
 800a1b0:	e7e1      	b.n	800a176 <_dtoa_r+0x956>
 800a1b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a1b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a1b8:	4637      	mov	r7, r6
 800a1ba:	e599      	b.n	8009cf0 <_dtoa_r+0x4d0>
 800a1bc:	9b08      	ldr	r3, [sp, #32]
 800a1be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f000 80fd 	beq.w	800a3c2 <_dtoa_r+0xba2>
 800a1c8:	2d00      	cmp	r5, #0
 800a1ca:	dd05      	ble.n	800a1d8 <_dtoa_r+0x9b8>
 800a1cc:	4639      	mov	r1, r7
 800a1ce:	462a      	mov	r2, r5
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f000 fb41 	bl	800a858 <__lshift>
 800a1d6:	4607      	mov	r7, r0
 800a1d8:	9b06      	ldr	r3, [sp, #24]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d05c      	beq.n	800a298 <_dtoa_r+0xa78>
 800a1de:	6879      	ldr	r1, [r7, #4]
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f000 f927 	bl	800a434 <_Balloc>
 800a1e6:	4605      	mov	r5, r0
 800a1e8:	b928      	cbnz	r0, 800a1f6 <_dtoa_r+0x9d6>
 800a1ea:	4b80      	ldr	r3, [pc, #512]	; (800a3ec <_dtoa_r+0xbcc>)
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a1f2:	f7ff bb2e 	b.w	8009852 <_dtoa_r+0x32>
 800a1f6:	693a      	ldr	r2, [r7, #16]
 800a1f8:	3202      	adds	r2, #2
 800a1fa:	0092      	lsls	r2, r2, #2
 800a1fc:	f107 010c 	add.w	r1, r7, #12
 800a200:	300c      	adds	r0, #12
 800a202:	f000 f8fd 	bl	800a400 <memcpy>
 800a206:	2201      	movs	r2, #1
 800a208:	4629      	mov	r1, r5
 800a20a:	4620      	mov	r0, r4
 800a20c:	f000 fb24 	bl	800a858 <__lshift>
 800a210:	9b00      	ldr	r3, [sp, #0]
 800a212:	3301      	adds	r3, #1
 800a214:	9301      	str	r3, [sp, #4]
 800a216:	9b00      	ldr	r3, [sp, #0]
 800a218:	444b      	add	r3, r9
 800a21a:	9307      	str	r3, [sp, #28]
 800a21c:	9b02      	ldr	r3, [sp, #8]
 800a21e:	f003 0301 	and.w	r3, r3, #1
 800a222:	46b8      	mov	r8, r7
 800a224:	9306      	str	r3, [sp, #24]
 800a226:	4607      	mov	r7, r0
 800a228:	9b01      	ldr	r3, [sp, #4]
 800a22a:	4631      	mov	r1, r6
 800a22c:	3b01      	subs	r3, #1
 800a22e:	4658      	mov	r0, fp
 800a230:	9302      	str	r3, [sp, #8]
 800a232:	f7ff fa67 	bl	8009704 <quorem>
 800a236:	4603      	mov	r3, r0
 800a238:	3330      	adds	r3, #48	; 0x30
 800a23a:	9004      	str	r0, [sp, #16]
 800a23c:	4641      	mov	r1, r8
 800a23e:	4658      	mov	r0, fp
 800a240:	9308      	str	r3, [sp, #32]
 800a242:	f000 fb75 	bl	800a930 <__mcmp>
 800a246:	463a      	mov	r2, r7
 800a248:	4681      	mov	r9, r0
 800a24a:	4631      	mov	r1, r6
 800a24c:	4620      	mov	r0, r4
 800a24e:	f000 fb8b 	bl	800a968 <__mdiff>
 800a252:	68c2      	ldr	r2, [r0, #12]
 800a254:	9b08      	ldr	r3, [sp, #32]
 800a256:	4605      	mov	r5, r0
 800a258:	bb02      	cbnz	r2, 800a29c <_dtoa_r+0xa7c>
 800a25a:	4601      	mov	r1, r0
 800a25c:	4658      	mov	r0, fp
 800a25e:	f000 fb67 	bl	800a930 <__mcmp>
 800a262:	9b08      	ldr	r3, [sp, #32]
 800a264:	4602      	mov	r2, r0
 800a266:	4629      	mov	r1, r5
 800a268:	4620      	mov	r0, r4
 800a26a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a26e:	f000 f921 	bl	800a4b4 <_Bfree>
 800a272:	9b05      	ldr	r3, [sp, #20]
 800a274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a276:	9d01      	ldr	r5, [sp, #4]
 800a278:	ea43 0102 	orr.w	r1, r3, r2
 800a27c:	9b06      	ldr	r3, [sp, #24]
 800a27e:	430b      	orrs	r3, r1
 800a280:	9b08      	ldr	r3, [sp, #32]
 800a282:	d10d      	bne.n	800a2a0 <_dtoa_r+0xa80>
 800a284:	2b39      	cmp	r3, #57	; 0x39
 800a286:	d029      	beq.n	800a2dc <_dtoa_r+0xabc>
 800a288:	f1b9 0f00 	cmp.w	r9, #0
 800a28c:	dd01      	ble.n	800a292 <_dtoa_r+0xa72>
 800a28e:	9b04      	ldr	r3, [sp, #16]
 800a290:	3331      	adds	r3, #49	; 0x31
 800a292:	9a02      	ldr	r2, [sp, #8]
 800a294:	7013      	strb	r3, [r2, #0]
 800a296:	e774      	b.n	800a182 <_dtoa_r+0x962>
 800a298:	4638      	mov	r0, r7
 800a29a:	e7b9      	b.n	800a210 <_dtoa_r+0x9f0>
 800a29c:	2201      	movs	r2, #1
 800a29e:	e7e2      	b.n	800a266 <_dtoa_r+0xa46>
 800a2a0:	f1b9 0f00 	cmp.w	r9, #0
 800a2a4:	db06      	blt.n	800a2b4 <_dtoa_r+0xa94>
 800a2a6:	9905      	ldr	r1, [sp, #20]
 800a2a8:	ea41 0909 	orr.w	r9, r1, r9
 800a2ac:	9906      	ldr	r1, [sp, #24]
 800a2ae:	ea59 0101 	orrs.w	r1, r9, r1
 800a2b2:	d120      	bne.n	800a2f6 <_dtoa_r+0xad6>
 800a2b4:	2a00      	cmp	r2, #0
 800a2b6:	ddec      	ble.n	800a292 <_dtoa_r+0xa72>
 800a2b8:	4659      	mov	r1, fp
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	4620      	mov	r0, r4
 800a2be:	9301      	str	r3, [sp, #4]
 800a2c0:	f000 faca 	bl	800a858 <__lshift>
 800a2c4:	4631      	mov	r1, r6
 800a2c6:	4683      	mov	fp, r0
 800a2c8:	f000 fb32 	bl	800a930 <__mcmp>
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	9b01      	ldr	r3, [sp, #4]
 800a2d0:	dc02      	bgt.n	800a2d8 <_dtoa_r+0xab8>
 800a2d2:	d1de      	bne.n	800a292 <_dtoa_r+0xa72>
 800a2d4:	07da      	lsls	r2, r3, #31
 800a2d6:	d5dc      	bpl.n	800a292 <_dtoa_r+0xa72>
 800a2d8:	2b39      	cmp	r3, #57	; 0x39
 800a2da:	d1d8      	bne.n	800a28e <_dtoa_r+0xa6e>
 800a2dc:	9a02      	ldr	r2, [sp, #8]
 800a2de:	2339      	movs	r3, #57	; 0x39
 800a2e0:	7013      	strb	r3, [r2, #0]
 800a2e2:	462b      	mov	r3, r5
 800a2e4:	461d      	mov	r5, r3
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a2ec:	2a39      	cmp	r2, #57	; 0x39
 800a2ee:	d050      	beq.n	800a392 <_dtoa_r+0xb72>
 800a2f0:	3201      	adds	r2, #1
 800a2f2:	701a      	strb	r2, [r3, #0]
 800a2f4:	e745      	b.n	800a182 <_dtoa_r+0x962>
 800a2f6:	2a00      	cmp	r2, #0
 800a2f8:	dd03      	ble.n	800a302 <_dtoa_r+0xae2>
 800a2fa:	2b39      	cmp	r3, #57	; 0x39
 800a2fc:	d0ee      	beq.n	800a2dc <_dtoa_r+0xabc>
 800a2fe:	3301      	adds	r3, #1
 800a300:	e7c7      	b.n	800a292 <_dtoa_r+0xa72>
 800a302:	9a01      	ldr	r2, [sp, #4]
 800a304:	9907      	ldr	r1, [sp, #28]
 800a306:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a30a:	428a      	cmp	r2, r1
 800a30c:	d02a      	beq.n	800a364 <_dtoa_r+0xb44>
 800a30e:	4659      	mov	r1, fp
 800a310:	2300      	movs	r3, #0
 800a312:	220a      	movs	r2, #10
 800a314:	4620      	mov	r0, r4
 800a316:	f000 f8ef 	bl	800a4f8 <__multadd>
 800a31a:	45b8      	cmp	r8, r7
 800a31c:	4683      	mov	fp, r0
 800a31e:	f04f 0300 	mov.w	r3, #0
 800a322:	f04f 020a 	mov.w	r2, #10
 800a326:	4641      	mov	r1, r8
 800a328:	4620      	mov	r0, r4
 800a32a:	d107      	bne.n	800a33c <_dtoa_r+0xb1c>
 800a32c:	f000 f8e4 	bl	800a4f8 <__multadd>
 800a330:	4680      	mov	r8, r0
 800a332:	4607      	mov	r7, r0
 800a334:	9b01      	ldr	r3, [sp, #4]
 800a336:	3301      	adds	r3, #1
 800a338:	9301      	str	r3, [sp, #4]
 800a33a:	e775      	b.n	800a228 <_dtoa_r+0xa08>
 800a33c:	f000 f8dc 	bl	800a4f8 <__multadd>
 800a340:	4639      	mov	r1, r7
 800a342:	4680      	mov	r8, r0
 800a344:	2300      	movs	r3, #0
 800a346:	220a      	movs	r2, #10
 800a348:	4620      	mov	r0, r4
 800a34a:	f000 f8d5 	bl	800a4f8 <__multadd>
 800a34e:	4607      	mov	r7, r0
 800a350:	e7f0      	b.n	800a334 <_dtoa_r+0xb14>
 800a352:	f1b9 0f00 	cmp.w	r9, #0
 800a356:	9a00      	ldr	r2, [sp, #0]
 800a358:	bfcc      	ite	gt
 800a35a:	464d      	movgt	r5, r9
 800a35c:	2501      	movle	r5, #1
 800a35e:	4415      	add	r5, r2
 800a360:	f04f 0800 	mov.w	r8, #0
 800a364:	4659      	mov	r1, fp
 800a366:	2201      	movs	r2, #1
 800a368:	4620      	mov	r0, r4
 800a36a:	9301      	str	r3, [sp, #4]
 800a36c:	f000 fa74 	bl	800a858 <__lshift>
 800a370:	4631      	mov	r1, r6
 800a372:	4683      	mov	fp, r0
 800a374:	f000 fadc 	bl	800a930 <__mcmp>
 800a378:	2800      	cmp	r0, #0
 800a37a:	dcb2      	bgt.n	800a2e2 <_dtoa_r+0xac2>
 800a37c:	d102      	bne.n	800a384 <_dtoa_r+0xb64>
 800a37e:	9b01      	ldr	r3, [sp, #4]
 800a380:	07db      	lsls	r3, r3, #31
 800a382:	d4ae      	bmi.n	800a2e2 <_dtoa_r+0xac2>
 800a384:	462b      	mov	r3, r5
 800a386:	461d      	mov	r5, r3
 800a388:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a38c:	2a30      	cmp	r2, #48	; 0x30
 800a38e:	d0fa      	beq.n	800a386 <_dtoa_r+0xb66>
 800a390:	e6f7      	b.n	800a182 <_dtoa_r+0x962>
 800a392:	9a00      	ldr	r2, [sp, #0]
 800a394:	429a      	cmp	r2, r3
 800a396:	d1a5      	bne.n	800a2e4 <_dtoa_r+0xac4>
 800a398:	f10a 0a01 	add.w	sl, sl, #1
 800a39c:	2331      	movs	r3, #49	; 0x31
 800a39e:	e779      	b.n	800a294 <_dtoa_r+0xa74>
 800a3a0:	4b13      	ldr	r3, [pc, #76]	; (800a3f0 <_dtoa_r+0xbd0>)
 800a3a2:	f7ff baaf 	b.w	8009904 <_dtoa_r+0xe4>
 800a3a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f47f aa86 	bne.w	80098ba <_dtoa_r+0x9a>
 800a3ae:	4b11      	ldr	r3, [pc, #68]	; (800a3f4 <_dtoa_r+0xbd4>)
 800a3b0:	f7ff baa8 	b.w	8009904 <_dtoa_r+0xe4>
 800a3b4:	f1b9 0f00 	cmp.w	r9, #0
 800a3b8:	dc03      	bgt.n	800a3c2 <_dtoa_r+0xba2>
 800a3ba:	9b05      	ldr	r3, [sp, #20]
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	f73f aec9 	bgt.w	800a154 <_dtoa_r+0x934>
 800a3c2:	9d00      	ldr	r5, [sp, #0]
 800a3c4:	4631      	mov	r1, r6
 800a3c6:	4658      	mov	r0, fp
 800a3c8:	f7ff f99c 	bl	8009704 <quorem>
 800a3cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a3d0:	f805 3b01 	strb.w	r3, [r5], #1
 800a3d4:	9a00      	ldr	r2, [sp, #0]
 800a3d6:	1aaa      	subs	r2, r5, r2
 800a3d8:	4591      	cmp	r9, r2
 800a3da:	ddba      	ble.n	800a352 <_dtoa_r+0xb32>
 800a3dc:	4659      	mov	r1, fp
 800a3de:	2300      	movs	r3, #0
 800a3e0:	220a      	movs	r2, #10
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f000 f888 	bl	800a4f8 <__multadd>
 800a3e8:	4683      	mov	fp, r0
 800a3ea:	e7eb      	b.n	800a3c4 <_dtoa_r+0xba4>
 800a3ec:	0800bb4f 	.word	0x0800bb4f
 800a3f0:	0800baa8 	.word	0x0800baa8
 800a3f4:	0800bacc 	.word	0x0800bacc

0800a3f8 <_localeconv_r>:
 800a3f8:	4800      	ldr	r0, [pc, #0]	; (800a3fc <_localeconv_r+0x4>)
 800a3fa:	4770      	bx	lr
 800a3fc:	200002dc 	.word	0x200002dc

0800a400 <memcpy>:
 800a400:	440a      	add	r2, r1
 800a402:	4291      	cmp	r1, r2
 800a404:	f100 33ff 	add.w	r3, r0, #4294967295
 800a408:	d100      	bne.n	800a40c <memcpy+0xc>
 800a40a:	4770      	bx	lr
 800a40c:	b510      	push	{r4, lr}
 800a40e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a412:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a416:	4291      	cmp	r1, r2
 800a418:	d1f9      	bne.n	800a40e <memcpy+0xe>
 800a41a:	bd10      	pop	{r4, pc}

0800a41c <__malloc_lock>:
 800a41c:	4801      	ldr	r0, [pc, #4]	; (800a424 <__malloc_lock+0x8>)
 800a41e:	f000 bd22 	b.w	800ae66 <__retarget_lock_acquire_recursive>
 800a422:	bf00      	nop
 800a424:	20001ddc 	.word	0x20001ddc

0800a428 <__malloc_unlock>:
 800a428:	4801      	ldr	r0, [pc, #4]	; (800a430 <__malloc_unlock+0x8>)
 800a42a:	f000 bd1d 	b.w	800ae68 <__retarget_lock_release_recursive>
 800a42e:	bf00      	nop
 800a430:	20001ddc 	.word	0x20001ddc

0800a434 <_Balloc>:
 800a434:	b570      	push	{r4, r5, r6, lr}
 800a436:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a438:	4604      	mov	r4, r0
 800a43a:	460d      	mov	r5, r1
 800a43c:	b976      	cbnz	r6, 800a45c <_Balloc+0x28>
 800a43e:	2010      	movs	r0, #16
 800a440:	f7fe fc04 	bl	8008c4c <malloc>
 800a444:	4602      	mov	r2, r0
 800a446:	6260      	str	r0, [r4, #36]	; 0x24
 800a448:	b920      	cbnz	r0, 800a454 <_Balloc+0x20>
 800a44a:	4b18      	ldr	r3, [pc, #96]	; (800a4ac <_Balloc+0x78>)
 800a44c:	4818      	ldr	r0, [pc, #96]	; (800a4b0 <_Balloc+0x7c>)
 800a44e:	2166      	movs	r1, #102	; 0x66
 800a450:	f000 fcd8 	bl	800ae04 <__assert_func>
 800a454:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a458:	6006      	str	r6, [r0, #0]
 800a45a:	60c6      	str	r6, [r0, #12]
 800a45c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a45e:	68f3      	ldr	r3, [r6, #12]
 800a460:	b183      	cbz	r3, 800a484 <_Balloc+0x50>
 800a462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a46a:	b9b8      	cbnz	r0, 800a49c <_Balloc+0x68>
 800a46c:	2101      	movs	r1, #1
 800a46e:	fa01 f605 	lsl.w	r6, r1, r5
 800a472:	1d72      	adds	r2, r6, #5
 800a474:	0092      	lsls	r2, r2, #2
 800a476:	4620      	mov	r0, r4
 800a478:	f000 fb5a 	bl	800ab30 <_calloc_r>
 800a47c:	b160      	cbz	r0, 800a498 <_Balloc+0x64>
 800a47e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a482:	e00e      	b.n	800a4a2 <_Balloc+0x6e>
 800a484:	2221      	movs	r2, #33	; 0x21
 800a486:	2104      	movs	r1, #4
 800a488:	4620      	mov	r0, r4
 800a48a:	f000 fb51 	bl	800ab30 <_calloc_r>
 800a48e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a490:	60f0      	str	r0, [r6, #12]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1e4      	bne.n	800a462 <_Balloc+0x2e>
 800a498:	2000      	movs	r0, #0
 800a49a:	bd70      	pop	{r4, r5, r6, pc}
 800a49c:	6802      	ldr	r2, [r0, #0]
 800a49e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4a8:	e7f7      	b.n	800a49a <_Balloc+0x66>
 800a4aa:	bf00      	nop
 800a4ac:	0800bad9 	.word	0x0800bad9
 800a4b0:	0800bb60 	.word	0x0800bb60

0800a4b4 <_Bfree>:
 800a4b4:	b570      	push	{r4, r5, r6, lr}
 800a4b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	b976      	cbnz	r6, 800a4dc <_Bfree+0x28>
 800a4be:	2010      	movs	r0, #16
 800a4c0:	f7fe fbc4 	bl	8008c4c <malloc>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	6268      	str	r0, [r5, #36]	; 0x24
 800a4c8:	b920      	cbnz	r0, 800a4d4 <_Bfree+0x20>
 800a4ca:	4b09      	ldr	r3, [pc, #36]	; (800a4f0 <_Bfree+0x3c>)
 800a4cc:	4809      	ldr	r0, [pc, #36]	; (800a4f4 <_Bfree+0x40>)
 800a4ce:	218a      	movs	r1, #138	; 0x8a
 800a4d0:	f000 fc98 	bl	800ae04 <__assert_func>
 800a4d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4d8:	6006      	str	r6, [r0, #0]
 800a4da:	60c6      	str	r6, [r0, #12]
 800a4dc:	b13c      	cbz	r4, 800a4ee <_Bfree+0x3a>
 800a4de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a4e0:	6862      	ldr	r2, [r4, #4]
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4e8:	6021      	str	r1, [r4, #0]
 800a4ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4ee:	bd70      	pop	{r4, r5, r6, pc}
 800a4f0:	0800bad9 	.word	0x0800bad9
 800a4f4:	0800bb60 	.word	0x0800bb60

0800a4f8 <__multadd>:
 800a4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4fc:	690e      	ldr	r6, [r1, #16]
 800a4fe:	4607      	mov	r7, r0
 800a500:	4698      	mov	r8, r3
 800a502:	460c      	mov	r4, r1
 800a504:	f101 0014 	add.w	r0, r1, #20
 800a508:	2300      	movs	r3, #0
 800a50a:	6805      	ldr	r5, [r0, #0]
 800a50c:	b2a9      	uxth	r1, r5
 800a50e:	fb02 8101 	mla	r1, r2, r1, r8
 800a512:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a516:	0c2d      	lsrs	r5, r5, #16
 800a518:	fb02 c505 	mla	r5, r2, r5, ip
 800a51c:	b289      	uxth	r1, r1
 800a51e:	3301      	adds	r3, #1
 800a520:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a524:	429e      	cmp	r6, r3
 800a526:	f840 1b04 	str.w	r1, [r0], #4
 800a52a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a52e:	dcec      	bgt.n	800a50a <__multadd+0x12>
 800a530:	f1b8 0f00 	cmp.w	r8, #0
 800a534:	d022      	beq.n	800a57c <__multadd+0x84>
 800a536:	68a3      	ldr	r3, [r4, #8]
 800a538:	42b3      	cmp	r3, r6
 800a53a:	dc19      	bgt.n	800a570 <__multadd+0x78>
 800a53c:	6861      	ldr	r1, [r4, #4]
 800a53e:	4638      	mov	r0, r7
 800a540:	3101      	adds	r1, #1
 800a542:	f7ff ff77 	bl	800a434 <_Balloc>
 800a546:	4605      	mov	r5, r0
 800a548:	b928      	cbnz	r0, 800a556 <__multadd+0x5e>
 800a54a:	4602      	mov	r2, r0
 800a54c:	4b0d      	ldr	r3, [pc, #52]	; (800a584 <__multadd+0x8c>)
 800a54e:	480e      	ldr	r0, [pc, #56]	; (800a588 <__multadd+0x90>)
 800a550:	21b5      	movs	r1, #181	; 0xb5
 800a552:	f000 fc57 	bl	800ae04 <__assert_func>
 800a556:	6922      	ldr	r2, [r4, #16]
 800a558:	3202      	adds	r2, #2
 800a55a:	f104 010c 	add.w	r1, r4, #12
 800a55e:	0092      	lsls	r2, r2, #2
 800a560:	300c      	adds	r0, #12
 800a562:	f7ff ff4d 	bl	800a400 <memcpy>
 800a566:	4621      	mov	r1, r4
 800a568:	4638      	mov	r0, r7
 800a56a:	f7ff ffa3 	bl	800a4b4 <_Bfree>
 800a56e:	462c      	mov	r4, r5
 800a570:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a574:	3601      	adds	r6, #1
 800a576:	f8c3 8014 	str.w	r8, [r3, #20]
 800a57a:	6126      	str	r6, [r4, #16]
 800a57c:	4620      	mov	r0, r4
 800a57e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a582:	bf00      	nop
 800a584:	0800bb4f 	.word	0x0800bb4f
 800a588:	0800bb60 	.word	0x0800bb60

0800a58c <__hi0bits>:
 800a58c:	0c03      	lsrs	r3, r0, #16
 800a58e:	041b      	lsls	r3, r3, #16
 800a590:	b9d3      	cbnz	r3, 800a5c8 <__hi0bits+0x3c>
 800a592:	0400      	lsls	r0, r0, #16
 800a594:	2310      	movs	r3, #16
 800a596:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a59a:	bf04      	itt	eq
 800a59c:	0200      	lsleq	r0, r0, #8
 800a59e:	3308      	addeq	r3, #8
 800a5a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a5a4:	bf04      	itt	eq
 800a5a6:	0100      	lsleq	r0, r0, #4
 800a5a8:	3304      	addeq	r3, #4
 800a5aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a5ae:	bf04      	itt	eq
 800a5b0:	0080      	lsleq	r0, r0, #2
 800a5b2:	3302      	addeq	r3, #2
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	db05      	blt.n	800a5c4 <__hi0bits+0x38>
 800a5b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a5bc:	f103 0301 	add.w	r3, r3, #1
 800a5c0:	bf08      	it	eq
 800a5c2:	2320      	moveq	r3, #32
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	4770      	bx	lr
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	e7e4      	b.n	800a596 <__hi0bits+0xa>

0800a5cc <__lo0bits>:
 800a5cc:	6803      	ldr	r3, [r0, #0]
 800a5ce:	f013 0207 	ands.w	r2, r3, #7
 800a5d2:	4601      	mov	r1, r0
 800a5d4:	d00b      	beq.n	800a5ee <__lo0bits+0x22>
 800a5d6:	07da      	lsls	r2, r3, #31
 800a5d8:	d424      	bmi.n	800a624 <__lo0bits+0x58>
 800a5da:	0798      	lsls	r0, r3, #30
 800a5dc:	bf49      	itett	mi
 800a5de:	085b      	lsrmi	r3, r3, #1
 800a5e0:	089b      	lsrpl	r3, r3, #2
 800a5e2:	2001      	movmi	r0, #1
 800a5e4:	600b      	strmi	r3, [r1, #0]
 800a5e6:	bf5c      	itt	pl
 800a5e8:	600b      	strpl	r3, [r1, #0]
 800a5ea:	2002      	movpl	r0, #2
 800a5ec:	4770      	bx	lr
 800a5ee:	b298      	uxth	r0, r3
 800a5f0:	b9b0      	cbnz	r0, 800a620 <__lo0bits+0x54>
 800a5f2:	0c1b      	lsrs	r3, r3, #16
 800a5f4:	2010      	movs	r0, #16
 800a5f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a5fa:	bf04      	itt	eq
 800a5fc:	0a1b      	lsreq	r3, r3, #8
 800a5fe:	3008      	addeq	r0, #8
 800a600:	071a      	lsls	r2, r3, #28
 800a602:	bf04      	itt	eq
 800a604:	091b      	lsreq	r3, r3, #4
 800a606:	3004      	addeq	r0, #4
 800a608:	079a      	lsls	r2, r3, #30
 800a60a:	bf04      	itt	eq
 800a60c:	089b      	lsreq	r3, r3, #2
 800a60e:	3002      	addeq	r0, #2
 800a610:	07da      	lsls	r2, r3, #31
 800a612:	d403      	bmi.n	800a61c <__lo0bits+0x50>
 800a614:	085b      	lsrs	r3, r3, #1
 800a616:	f100 0001 	add.w	r0, r0, #1
 800a61a:	d005      	beq.n	800a628 <__lo0bits+0x5c>
 800a61c:	600b      	str	r3, [r1, #0]
 800a61e:	4770      	bx	lr
 800a620:	4610      	mov	r0, r2
 800a622:	e7e8      	b.n	800a5f6 <__lo0bits+0x2a>
 800a624:	2000      	movs	r0, #0
 800a626:	4770      	bx	lr
 800a628:	2020      	movs	r0, #32
 800a62a:	4770      	bx	lr

0800a62c <__i2b>:
 800a62c:	b510      	push	{r4, lr}
 800a62e:	460c      	mov	r4, r1
 800a630:	2101      	movs	r1, #1
 800a632:	f7ff feff 	bl	800a434 <_Balloc>
 800a636:	4602      	mov	r2, r0
 800a638:	b928      	cbnz	r0, 800a646 <__i2b+0x1a>
 800a63a:	4b05      	ldr	r3, [pc, #20]	; (800a650 <__i2b+0x24>)
 800a63c:	4805      	ldr	r0, [pc, #20]	; (800a654 <__i2b+0x28>)
 800a63e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a642:	f000 fbdf 	bl	800ae04 <__assert_func>
 800a646:	2301      	movs	r3, #1
 800a648:	6144      	str	r4, [r0, #20]
 800a64a:	6103      	str	r3, [r0, #16]
 800a64c:	bd10      	pop	{r4, pc}
 800a64e:	bf00      	nop
 800a650:	0800bb4f 	.word	0x0800bb4f
 800a654:	0800bb60 	.word	0x0800bb60

0800a658 <__multiply>:
 800a658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a65c:	4614      	mov	r4, r2
 800a65e:	690a      	ldr	r2, [r1, #16]
 800a660:	6923      	ldr	r3, [r4, #16]
 800a662:	429a      	cmp	r2, r3
 800a664:	bfb8      	it	lt
 800a666:	460b      	movlt	r3, r1
 800a668:	460d      	mov	r5, r1
 800a66a:	bfbc      	itt	lt
 800a66c:	4625      	movlt	r5, r4
 800a66e:	461c      	movlt	r4, r3
 800a670:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a674:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a678:	68ab      	ldr	r3, [r5, #8]
 800a67a:	6869      	ldr	r1, [r5, #4]
 800a67c:	eb0a 0709 	add.w	r7, sl, r9
 800a680:	42bb      	cmp	r3, r7
 800a682:	b085      	sub	sp, #20
 800a684:	bfb8      	it	lt
 800a686:	3101      	addlt	r1, #1
 800a688:	f7ff fed4 	bl	800a434 <_Balloc>
 800a68c:	b930      	cbnz	r0, 800a69c <__multiply+0x44>
 800a68e:	4602      	mov	r2, r0
 800a690:	4b42      	ldr	r3, [pc, #264]	; (800a79c <__multiply+0x144>)
 800a692:	4843      	ldr	r0, [pc, #268]	; (800a7a0 <__multiply+0x148>)
 800a694:	f240 115d 	movw	r1, #349	; 0x15d
 800a698:	f000 fbb4 	bl	800ae04 <__assert_func>
 800a69c:	f100 0614 	add.w	r6, r0, #20
 800a6a0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a6a4:	4633      	mov	r3, r6
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	4543      	cmp	r3, r8
 800a6aa:	d31e      	bcc.n	800a6ea <__multiply+0x92>
 800a6ac:	f105 0c14 	add.w	ip, r5, #20
 800a6b0:	f104 0314 	add.w	r3, r4, #20
 800a6b4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a6b8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a6bc:	9202      	str	r2, [sp, #8]
 800a6be:	ebac 0205 	sub.w	r2, ip, r5
 800a6c2:	3a15      	subs	r2, #21
 800a6c4:	f022 0203 	bic.w	r2, r2, #3
 800a6c8:	3204      	adds	r2, #4
 800a6ca:	f105 0115 	add.w	r1, r5, #21
 800a6ce:	458c      	cmp	ip, r1
 800a6d0:	bf38      	it	cc
 800a6d2:	2204      	movcc	r2, #4
 800a6d4:	9201      	str	r2, [sp, #4]
 800a6d6:	9a02      	ldr	r2, [sp, #8]
 800a6d8:	9303      	str	r3, [sp, #12]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d808      	bhi.n	800a6f0 <__multiply+0x98>
 800a6de:	2f00      	cmp	r7, #0
 800a6e0:	dc55      	bgt.n	800a78e <__multiply+0x136>
 800a6e2:	6107      	str	r7, [r0, #16]
 800a6e4:	b005      	add	sp, #20
 800a6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ea:	f843 2b04 	str.w	r2, [r3], #4
 800a6ee:	e7db      	b.n	800a6a8 <__multiply+0x50>
 800a6f0:	f8b3 a000 	ldrh.w	sl, [r3]
 800a6f4:	f1ba 0f00 	cmp.w	sl, #0
 800a6f8:	d020      	beq.n	800a73c <__multiply+0xe4>
 800a6fa:	f105 0e14 	add.w	lr, r5, #20
 800a6fe:	46b1      	mov	r9, r6
 800a700:	2200      	movs	r2, #0
 800a702:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a706:	f8d9 b000 	ldr.w	fp, [r9]
 800a70a:	b2a1      	uxth	r1, r4
 800a70c:	fa1f fb8b 	uxth.w	fp, fp
 800a710:	fb0a b101 	mla	r1, sl, r1, fp
 800a714:	4411      	add	r1, r2
 800a716:	f8d9 2000 	ldr.w	r2, [r9]
 800a71a:	0c24      	lsrs	r4, r4, #16
 800a71c:	0c12      	lsrs	r2, r2, #16
 800a71e:	fb0a 2404 	mla	r4, sl, r4, r2
 800a722:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a726:	b289      	uxth	r1, r1
 800a728:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a72c:	45f4      	cmp	ip, lr
 800a72e:	f849 1b04 	str.w	r1, [r9], #4
 800a732:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a736:	d8e4      	bhi.n	800a702 <__multiply+0xaa>
 800a738:	9901      	ldr	r1, [sp, #4]
 800a73a:	5072      	str	r2, [r6, r1]
 800a73c:	9a03      	ldr	r2, [sp, #12]
 800a73e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a742:	3304      	adds	r3, #4
 800a744:	f1b9 0f00 	cmp.w	r9, #0
 800a748:	d01f      	beq.n	800a78a <__multiply+0x132>
 800a74a:	6834      	ldr	r4, [r6, #0]
 800a74c:	f105 0114 	add.w	r1, r5, #20
 800a750:	46b6      	mov	lr, r6
 800a752:	f04f 0a00 	mov.w	sl, #0
 800a756:	880a      	ldrh	r2, [r1, #0]
 800a758:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a75c:	fb09 b202 	mla	r2, r9, r2, fp
 800a760:	4492      	add	sl, r2
 800a762:	b2a4      	uxth	r4, r4
 800a764:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a768:	f84e 4b04 	str.w	r4, [lr], #4
 800a76c:	f851 4b04 	ldr.w	r4, [r1], #4
 800a770:	f8be 2000 	ldrh.w	r2, [lr]
 800a774:	0c24      	lsrs	r4, r4, #16
 800a776:	fb09 2404 	mla	r4, r9, r4, r2
 800a77a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a77e:	458c      	cmp	ip, r1
 800a780:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a784:	d8e7      	bhi.n	800a756 <__multiply+0xfe>
 800a786:	9a01      	ldr	r2, [sp, #4]
 800a788:	50b4      	str	r4, [r6, r2]
 800a78a:	3604      	adds	r6, #4
 800a78c:	e7a3      	b.n	800a6d6 <__multiply+0x7e>
 800a78e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a792:	2b00      	cmp	r3, #0
 800a794:	d1a5      	bne.n	800a6e2 <__multiply+0x8a>
 800a796:	3f01      	subs	r7, #1
 800a798:	e7a1      	b.n	800a6de <__multiply+0x86>
 800a79a:	bf00      	nop
 800a79c:	0800bb4f 	.word	0x0800bb4f
 800a7a0:	0800bb60 	.word	0x0800bb60

0800a7a4 <__pow5mult>:
 800a7a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7a8:	4615      	mov	r5, r2
 800a7aa:	f012 0203 	ands.w	r2, r2, #3
 800a7ae:	4606      	mov	r6, r0
 800a7b0:	460f      	mov	r7, r1
 800a7b2:	d007      	beq.n	800a7c4 <__pow5mult+0x20>
 800a7b4:	4c25      	ldr	r4, [pc, #148]	; (800a84c <__pow5mult+0xa8>)
 800a7b6:	3a01      	subs	r2, #1
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7be:	f7ff fe9b 	bl	800a4f8 <__multadd>
 800a7c2:	4607      	mov	r7, r0
 800a7c4:	10ad      	asrs	r5, r5, #2
 800a7c6:	d03d      	beq.n	800a844 <__pow5mult+0xa0>
 800a7c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a7ca:	b97c      	cbnz	r4, 800a7ec <__pow5mult+0x48>
 800a7cc:	2010      	movs	r0, #16
 800a7ce:	f7fe fa3d 	bl	8008c4c <malloc>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	6270      	str	r0, [r6, #36]	; 0x24
 800a7d6:	b928      	cbnz	r0, 800a7e4 <__pow5mult+0x40>
 800a7d8:	4b1d      	ldr	r3, [pc, #116]	; (800a850 <__pow5mult+0xac>)
 800a7da:	481e      	ldr	r0, [pc, #120]	; (800a854 <__pow5mult+0xb0>)
 800a7dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a7e0:	f000 fb10 	bl	800ae04 <__assert_func>
 800a7e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7e8:	6004      	str	r4, [r0, #0]
 800a7ea:	60c4      	str	r4, [r0, #12]
 800a7ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a7f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a7f4:	b94c      	cbnz	r4, 800a80a <__pow5mult+0x66>
 800a7f6:	f240 2171 	movw	r1, #625	; 0x271
 800a7fa:	4630      	mov	r0, r6
 800a7fc:	f7ff ff16 	bl	800a62c <__i2b>
 800a800:	2300      	movs	r3, #0
 800a802:	f8c8 0008 	str.w	r0, [r8, #8]
 800a806:	4604      	mov	r4, r0
 800a808:	6003      	str	r3, [r0, #0]
 800a80a:	f04f 0900 	mov.w	r9, #0
 800a80e:	07eb      	lsls	r3, r5, #31
 800a810:	d50a      	bpl.n	800a828 <__pow5mult+0x84>
 800a812:	4639      	mov	r1, r7
 800a814:	4622      	mov	r2, r4
 800a816:	4630      	mov	r0, r6
 800a818:	f7ff ff1e 	bl	800a658 <__multiply>
 800a81c:	4639      	mov	r1, r7
 800a81e:	4680      	mov	r8, r0
 800a820:	4630      	mov	r0, r6
 800a822:	f7ff fe47 	bl	800a4b4 <_Bfree>
 800a826:	4647      	mov	r7, r8
 800a828:	106d      	asrs	r5, r5, #1
 800a82a:	d00b      	beq.n	800a844 <__pow5mult+0xa0>
 800a82c:	6820      	ldr	r0, [r4, #0]
 800a82e:	b938      	cbnz	r0, 800a840 <__pow5mult+0x9c>
 800a830:	4622      	mov	r2, r4
 800a832:	4621      	mov	r1, r4
 800a834:	4630      	mov	r0, r6
 800a836:	f7ff ff0f 	bl	800a658 <__multiply>
 800a83a:	6020      	str	r0, [r4, #0]
 800a83c:	f8c0 9000 	str.w	r9, [r0]
 800a840:	4604      	mov	r4, r0
 800a842:	e7e4      	b.n	800a80e <__pow5mult+0x6a>
 800a844:	4638      	mov	r0, r7
 800a846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a84a:	bf00      	nop
 800a84c:	0800bcb0 	.word	0x0800bcb0
 800a850:	0800bad9 	.word	0x0800bad9
 800a854:	0800bb60 	.word	0x0800bb60

0800a858 <__lshift>:
 800a858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a85c:	460c      	mov	r4, r1
 800a85e:	6849      	ldr	r1, [r1, #4]
 800a860:	6923      	ldr	r3, [r4, #16]
 800a862:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a866:	68a3      	ldr	r3, [r4, #8]
 800a868:	4607      	mov	r7, r0
 800a86a:	4691      	mov	r9, r2
 800a86c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a870:	f108 0601 	add.w	r6, r8, #1
 800a874:	42b3      	cmp	r3, r6
 800a876:	db0b      	blt.n	800a890 <__lshift+0x38>
 800a878:	4638      	mov	r0, r7
 800a87a:	f7ff fddb 	bl	800a434 <_Balloc>
 800a87e:	4605      	mov	r5, r0
 800a880:	b948      	cbnz	r0, 800a896 <__lshift+0x3e>
 800a882:	4602      	mov	r2, r0
 800a884:	4b28      	ldr	r3, [pc, #160]	; (800a928 <__lshift+0xd0>)
 800a886:	4829      	ldr	r0, [pc, #164]	; (800a92c <__lshift+0xd4>)
 800a888:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a88c:	f000 faba 	bl	800ae04 <__assert_func>
 800a890:	3101      	adds	r1, #1
 800a892:	005b      	lsls	r3, r3, #1
 800a894:	e7ee      	b.n	800a874 <__lshift+0x1c>
 800a896:	2300      	movs	r3, #0
 800a898:	f100 0114 	add.w	r1, r0, #20
 800a89c:	f100 0210 	add.w	r2, r0, #16
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	4553      	cmp	r3, sl
 800a8a4:	db33      	blt.n	800a90e <__lshift+0xb6>
 800a8a6:	6920      	ldr	r0, [r4, #16]
 800a8a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8ac:	f104 0314 	add.w	r3, r4, #20
 800a8b0:	f019 091f 	ands.w	r9, r9, #31
 800a8b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a8bc:	d02b      	beq.n	800a916 <__lshift+0xbe>
 800a8be:	f1c9 0e20 	rsb	lr, r9, #32
 800a8c2:	468a      	mov	sl, r1
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	6818      	ldr	r0, [r3, #0]
 800a8c8:	fa00 f009 	lsl.w	r0, r0, r9
 800a8cc:	4302      	orrs	r2, r0
 800a8ce:	f84a 2b04 	str.w	r2, [sl], #4
 800a8d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8d6:	459c      	cmp	ip, r3
 800a8d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a8dc:	d8f3      	bhi.n	800a8c6 <__lshift+0x6e>
 800a8de:	ebac 0304 	sub.w	r3, ip, r4
 800a8e2:	3b15      	subs	r3, #21
 800a8e4:	f023 0303 	bic.w	r3, r3, #3
 800a8e8:	3304      	adds	r3, #4
 800a8ea:	f104 0015 	add.w	r0, r4, #21
 800a8ee:	4584      	cmp	ip, r0
 800a8f0:	bf38      	it	cc
 800a8f2:	2304      	movcc	r3, #4
 800a8f4:	50ca      	str	r2, [r1, r3]
 800a8f6:	b10a      	cbz	r2, 800a8fc <__lshift+0xa4>
 800a8f8:	f108 0602 	add.w	r6, r8, #2
 800a8fc:	3e01      	subs	r6, #1
 800a8fe:	4638      	mov	r0, r7
 800a900:	612e      	str	r6, [r5, #16]
 800a902:	4621      	mov	r1, r4
 800a904:	f7ff fdd6 	bl	800a4b4 <_Bfree>
 800a908:	4628      	mov	r0, r5
 800a90a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a90e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a912:	3301      	adds	r3, #1
 800a914:	e7c5      	b.n	800a8a2 <__lshift+0x4a>
 800a916:	3904      	subs	r1, #4
 800a918:	f853 2b04 	ldr.w	r2, [r3], #4
 800a91c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a920:	459c      	cmp	ip, r3
 800a922:	d8f9      	bhi.n	800a918 <__lshift+0xc0>
 800a924:	e7ea      	b.n	800a8fc <__lshift+0xa4>
 800a926:	bf00      	nop
 800a928:	0800bb4f 	.word	0x0800bb4f
 800a92c:	0800bb60 	.word	0x0800bb60

0800a930 <__mcmp>:
 800a930:	b530      	push	{r4, r5, lr}
 800a932:	6902      	ldr	r2, [r0, #16]
 800a934:	690c      	ldr	r4, [r1, #16]
 800a936:	1b12      	subs	r2, r2, r4
 800a938:	d10e      	bne.n	800a958 <__mcmp+0x28>
 800a93a:	f100 0314 	add.w	r3, r0, #20
 800a93e:	3114      	adds	r1, #20
 800a940:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a944:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a948:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a94c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a950:	42a5      	cmp	r5, r4
 800a952:	d003      	beq.n	800a95c <__mcmp+0x2c>
 800a954:	d305      	bcc.n	800a962 <__mcmp+0x32>
 800a956:	2201      	movs	r2, #1
 800a958:	4610      	mov	r0, r2
 800a95a:	bd30      	pop	{r4, r5, pc}
 800a95c:	4283      	cmp	r3, r0
 800a95e:	d3f3      	bcc.n	800a948 <__mcmp+0x18>
 800a960:	e7fa      	b.n	800a958 <__mcmp+0x28>
 800a962:	f04f 32ff 	mov.w	r2, #4294967295
 800a966:	e7f7      	b.n	800a958 <__mcmp+0x28>

0800a968 <__mdiff>:
 800a968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a96c:	460c      	mov	r4, r1
 800a96e:	4606      	mov	r6, r0
 800a970:	4611      	mov	r1, r2
 800a972:	4620      	mov	r0, r4
 800a974:	4617      	mov	r7, r2
 800a976:	f7ff ffdb 	bl	800a930 <__mcmp>
 800a97a:	1e05      	subs	r5, r0, #0
 800a97c:	d110      	bne.n	800a9a0 <__mdiff+0x38>
 800a97e:	4629      	mov	r1, r5
 800a980:	4630      	mov	r0, r6
 800a982:	f7ff fd57 	bl	800a434 <_Balloc>
 800a986:	b930      	cbnz	r0, 800a996 <__mdiff+0x2e>
 800a988:	4b39      	ldr	r3, [pc, #228]	; (800aa70 <__mdiff+0x108>)
 800a98a:	4602      	mov	r2, r0
 800a98c:	f240 2132 	movw	r1, #562	; 0x232
 800a990:	4838      	ldr	r0, [pc, #224]	; (800aa74 <__mdiff+0x10c>)
 800a992:	f000 fa37 	bl	800ae04 <__assert_func>
 800a996:	2301      	movs	r3, #1
 800a998:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a99c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9a0:	bfa4      	itt	ge
 800a9a2:	463b      	movge	r3, r7
 800a9a4:	4627      	movge	r7, r4
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	6879      	ldr	r1, [r7, #4]
 800a9aa:	bfa6      	itte	ge
 800a9ac:	461c      	movge	r4, r3
 800a9ae:	2500      	movge	r5, #0
 800a9b0:	2501      	movlt	r5, #1
 800a9b2:	f7ff fd3f 	bl	800a434 <_Balloc>
 800a9b6:	b920      	cbnz	r0, 800a9c2 <__mdiff+0x5a>
 800a9b8:	4b2d      	ldr	r3, [pc, #180]	; (800aa70 <__mdiff+0x108>)
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a9c0:	e7e6      	b.n	800a990 <__mdiff+0x28>
 800a9c2:	693e      	ldr	r6, [r7, #16]
 800a9c4:	60c5      	str	r5, [r0, #12]
 800a9c6:	6925      	ldr	r5, [r4, #16]
 800a9c8:	f107 0114 	add.w	r1, r7, #20
 800a9cc:	f104 0914 	add.w	r9, r4, #20
 800a9d0:	f100 0e14 	add.w	lr, r0, #20
 800a9d4:	f107 0210 	add.w	r2, r7, #16
 800a9d8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a9dc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a9e0:	46f2      	mov	sl, lr
 800a9e2:	2700      	movs	r7, #0
 800a9e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a9e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a9ec:	fa1f f883 	uxth.w	r8, r3
 800a9f0:	fa17 f78b 	uxtah	r7, r7, fp
 800a9f4:	0c1b      	lsrs	r3, r3, #16
 800a9f6:	eba7 0808 	sub.w	r8, r7, r8
 800a9fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a9fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa02:	fa1f f888 	uxth.w	r8, r8
 800aa06:	141f      	asrs	r7, r3, #16
 800aa08:	454d      	cmp	r5, r9
 800aa0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa0e:	f84a 3b04 	str.w	r3, [sl], #4
 800aa12:	d8e7      	bhi.n	800a9e4 <__mdiff+0x7c>
 800aa14:	1b2b      	subs	r3, r5, r4
 800aa16:	3b15      	subs	r3, #21
 800aa18:	f023 0303 	bic.w	r3, r3, #3
 800aa1c:	3304      	adds	r3, #4
 800aa1e:	3415      	adds	r4, #21
 800aa20:	42a5      	cmp	r5, r4
 800aa22:	bf38      	it	cc
 800aa24:	2304      	movcc	r3, #4
 800aa26:	4419      	add	r1, r3
 800aa28:	4473      	add	r3, lr
 800aa2a:	469e      	mov	lr, r3
 800aa2c:	460d      	mov	r5, r1
 800aa2e:	4565      	cmp	r5, ip
 800aa30:	d30e      	bcc.n	800aa50 <__mdiff+0xe8>
 800aa32:	f10c 0203 	add.w	r2, ip, #3
 800aa36:	1a52      	subs	r2, r2, r1
 800aa38:	f022 0203 	bic.w	r2, r2, #3
 800aa3c:	3903      	subs	r1, #3
 800aa3e:	458c      	cmp	ip, r1
 800aa40:	bf38      	it	cc
 800aa42:	2200      	movcc	r2, #0
 800aa44:	441a      	add	r2, r3
 800aa46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aa4a:	b17b      	cbz	r3, 800aa6c <__mdiff+0x104>
 800aa4c:	6106      	str	r6, [r0, #16]
 800aa4e:	e7a5      	b.n	800a99c <__mdiff+0x34>
 800aa50:	f855 8b04 	ldr.w	r8, [r5], #4
 800aa54:	fa17 f488 	uxtah	r4, r7, r8
 800aa58:	1422      	asrs	r2, r4, #16
 800aa5a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800aa5e:	b2a4      	uxth	r4, r4
 800aa60:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800aa64:	f84e 4b04 	str.w	r4, [lr], #4
 800aa68:	1417      	asrs	r7, r2, #16
 800aa6a:	e7e0      	b.n	800aa2e <__mdiff+0xc6>
 800aa6c:	3e01      	subs	r6, #1
 800aa6e:	e7ea      	b.n	800aa46 <__mdiff+0xde>
 800aa70:	0800bb4f 	.word	0x0800bb4f
 800aa74:	0800bb60 	.word	0x0800bb60

0800aa78 <__d2b>:
 800aa78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa7c:	4689      	mov	r9, r1
 800aa7e:	2101      	movs	r1, #1
 800aa80:	ec57 6b10 	vmov	r6, r7, d0
 800aa84:	4690      	mov	r8, r2
 800aa86:	f7ff fcd5 	bl	800a434 <_Balloc>
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	b930      	cbnz	r0, 800aa9c <__d2b+0x24>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	4b25      	ldr	r3, [pc, #148]	; (800ab28 <__d2b+0xb0>)
 800aa92:	4826      	ldr	r0, [pc, #152]	; (800ab2c <__d2b+0xb4>)
 800aa94:	f240 310a 	movw	r1, #778	; 0x30a
 800aa98:	f000 f9b4 	bl	800ae04 <__assert_func>
 800aa9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aaa0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aaa4:	bb35      	cbnz	r5, 800aaf4 <__d2b+0x7c>
 800aaa6:	2e00      	cmp	r6, #0
 800aaa8:	9301      	str	r3, [sp, #4]
 800aaaa:	d028      	beq.n	800aafe <__d2b+0x86>
 800aaac:	4668      	mov	r0, sp
 800aaae:	9600      	str	r6, [sp, #0]
 800aab0:	f7ff fd8c 	bl	800a5cc <__lo0bits>
 800aab4:	9900      	ldr	r1, [sp, #0]
 800aab6:	b300      	cbz	r0, 800aafa <__d2b+0x82>
 800aab8:	9a01      	ldr	r2, [sp, #4]
 800aaba:	f1c0 0320 	rsb	r3, r0, #32
 800aabe:	fa02 f303 	lsl.w	r3, r2, r3
 800aac2:	430b      	orrs	r3, r1
 800aac4:	40c2      	lsrs	r2, r0
 800aac6:	6163      	str	r3, [r4, #20]
 800aac8:	9201      	str	r2, [sp, #4]
 800aaca:	9b01      	ldr	r3, [sp, #4]
 800aacc:	61a3      	str	r3, [r4, #24]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	bf14      	ite	ne
 800aad2:	2202      	movne	r2, #2
 800aad4:	2201      	moveq	r2, #1
 800aad6:	6122      	str	r2, [r4, #16]
 800aad8:	b1d5      	cbz	r5, 800ab10 <__d2b+0x98>
 800aada:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aade:	4405      	add	r5, r0
 800aae0:	f8c9 5000 	str.w	r5, [r9]
 800aae4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aae8:	f8c8 0000 	str.w	r0, [r8]
 800aaec:	4620      	mov	r0, r4
 800aaee:	b003      	add	sp, #12
 800aaf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aaf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aaf8:	e7d5      	b.n	800aaa6 <__d2b+0x2e>
 800aafa:	6161      	str	r1, [r4, #20]
 800aafc:	e7e5      	b.n	800aaca <__d2b+0x52>
 800aafe:	a801      	add	r0, sp, #4
 800ab00:	f7ff fd64 	bl	800a5cc <__lo0bits>
 800ab04:	9b01      	ldr	r3, [sp, #4]
 800ab06:	6163      	str	r3, [r4, #20]
 800ab08:	2201      	movs	r2, #1
 800ab0a:	6122      	str	r2, [r4, #16]
 800ab0c:	3020      	adds	r0, #32
 800ab0e:	e7e3      	b.n	800aad8 <__d2b+0x60>
 800ab10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab18:	f8c9 0000 	str.w	r0, [r9]
 800ab1c:	6918      	ldr	r0, [r3, #16]
 800ab1e:	f7ff fd35 	bl	800a58c <__hi0bits>
 800ab22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab26:	e7df      	b.n	800aae8 <__d2b+0x70>
 800ab28:	0800bb4f 	.word	0x0800bb4f
 800ab2c:	0800bb60 	.word	0x0800bb60

0800ab30 <_calloc_r>:
 800ab30:	b513      	push	{r0, r1, r4, lr}
 800ab32:	434a      	muls	r2, r1
 800ab34:	4611      	mov	r1, r2
 800ab36:	9201      	str	r2, [sp, #4]
 800ab38:	f7fe f8f0 	bl	8008d1c <_malloc_r>
 800ab3c:	4604      	mov	r4, r0
 800ab3e:	b118      	cbz	r0, 800ab48 <_calloc_r+0x18>
 800ab40:	9a01      	ldr	r2, [sp, #4]
 800ab42:	2100      	movs	r1, #0
 800ab44:	f7fe f892 	bl	8008c6c <memset>
 800ab48:	4620      	mov	r0, r4
 800ab4a:	b002      	add	sp, #8
 800ab4c:	bd10      	pop	{r4, pc}

0800ab4e <__ssputs_r>:
 800ab4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab52:	688e      	ldr	r6, [r1, #8]
 800ab54:	429e      	cmp	r6, r3
 800ab56:	4682      	mov	sl, r0
 800ab58:	460c      	mov	r4, r1
 800ab5a:	4690      	mov	r8, r2
 800ab5c:	461f      	mov	r7, r3
 800ab5e:	d838      	bhi.n	800abd2 <__ssputs_r+0x84>
 800ab60:	898a      	ldrh	r2, [r1, #12]
 800ab62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab66:	d032      	beq.n	800abce <__ssputs_r+0x80>
 800ab68:	6825      	ldr	r5, [r4, #0]
 800ab6a:	6909      	ldr	r1, [r1, #16]
 800ab6c:	eba5 0901 	sub.w	r9, r5, r1
 800ab70:	6965      	ldr	r5, [r4, #20]
 800ab72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	444b      	add	r3, r9
 800ab7e:	106d      	asrs	r5, r5, #1
 800ab80:	429d      	cmp	r5, r3
 800ab82:	bf38      	it	cc
 800ab84:	461d      	movcc	r5, r3
 800ab86:	0553      	lsls	r3, r2, #21
 800ab88:	d531      	bpl.n	800abee <__ssputs_r+0xa0>
 800ab8a:	4629      	mov	r1, r5
 800ab8c:	f7fe f8c6 	bl	8008d1c <_malloc_r>
 800ab90:	4606      	mov	r6, r0
 800ab92:	b950      	cbnz	r0, 800abaa <__ssputs_r+0x5c>
 800ab94:	230c      	movs	r3, #12
 800ab96:	f8ca 3000 	str.w	r3, [sl]
 800ab9a:	89a3      	ldrh	r3, [r4, #12]
 800ab9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aba0:	81a3      	strh	r3, [r4, #12]
 800aba2:	f04f 30ff 	mov.w	r0, #4294967295
 800aba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abaa:	6921      	ldr	r1, [r4, #16]
 800abac:	464a      	mov	r2, r9
 800abae:	f7ff fc27 	bl	800a400 <memcpy>
 800abb2:	89a3      	ldrh	r3, [r4, #12]
 800abb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800abb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abbc:	81a3      	strh	r3, [r4, #12]
 800abbe:	6126      	str	r6, [r4, #16]
 800abc0:	6165      	str	r5, [r4, #20]
 800abc2:	444e      	add	r6, r9
 800abc4:	eba5 0509 	sub.w	r5, r5, r9
 800abc8:	6026      	str	r6, [r4, #0]
 800abca:	60a5      	str	r5, [r4, #8]
 800abcc:	463e      	mov	r6, r7
 800abce:	42be      	cmp	r6, r7
 800abd0:	d900      	bls.n	800abd4 <__ssputs_r+0x86>
 800abd2:	463e      	mov	r6, r7
 800abd4:	4632      	mov	r2, r6
 800abd6:	6820      	ldr	r0, [r4, #0]
 800abd8:	4641      	mov	r1, r8
 800abda:	f000 f958 	bl	800ae8e <memmove>
 800abde:	68a3      	ldr	r3, [r4, #8]
 800abe0:	6822      	ldr	r2, [r4, #0]
 800abe2:	1b9b      	subs	r3, r3, r6
 800abe4:	4432      	add	r2, r6
 800abe6:	60a3      	str	r3, [r4, #8]
 800abe8:	6022      	str	r2, [r4, #0]
 800abea:	2000      	movs	r0, #0
 800abec:	e7db      	b.n	800aba6 <__ssputs_r+0x58>
 800abee:	462a      	mov	r2, r5
 800abf0:	f000 f967 	bl	800aec2 <_realloc_r>
 800abf4:	4606      	mov	r6, r0
 800abf6:	2800      	cmp	r0, #0
 800abf8:	d1e1      	bne.n	800abbe <__ssputs_r+0x70>
 800abfa:	6921      	ldr	r1, [r4, #16]
 800abfc:	4650      	mov	r0, sl
 800abfe:	f7fe f83d 	bl	8008c7c <_free_r>
 800ac02:	e7c7      	b.n	800ab94 <__ssputs_r+0x46>

0800ac04 <_svfiprintf_r>:
 800ac04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac08:	4698      	mov	r8, r3
 800ac0a:	898b      	ldrh	r3, [r1, #12]
 800ac0c:	061b      	lsls	r3, r3, #24
 800ac0e:	b09d      	sub	sp, #116	; 0x74
 800ac10:	4607      	mov	r7, r0
 800ac12:	460d      	mov	r5, r1
 800ac14:	4614      	mov	r4, r2
 800ac16:	d50e      	bpl.n	800ac36 <_svfiprintf_r+0x32>
 800ac18:	690b      	ldr	r3, [r1, #16]
 800ac1a:	b963      	cbnz	r3, 800ac36 <_svfiprintf_r+0x32>
 800ac1c:	2140      	movs	r1, #64	; 0x40
 800ac1e:	f7fe f87d 	bl	8008d1c <_malloc_r>
 800ac22:	6028      	str	r0, [r5, #0]
 800ac24:	6128      	str	r0, [r5, #16]
 800ac26:	b920      	cbnz	r0, 800ac32 <_svfiprintf_r+0x2e>
 800ac28:	230c      	movs	r3, #12
 800ac2a:	603b      	str	r3, [r7, #0]
 800ac2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac30:	e0d1      	b.n	800add6 <_svfiprintf_r+0x1d2>
 800ac32:	2340      	movs	r3, #64	; 0x40
 800ac34:	616b      	str	r3, [r5, #20]
 800ac36:	2300      	movs	r3, #0
 800ac38:	9309      	str	r3, [sp, #36]	; 0x24
 800ac3a:	2320      	movs	r3, #32
 800ac3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac40:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac44:	2330      	movs	r3, #48	; 0x30
 800ac46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800adf0 <_svfiprintf_r+0x1ec>
 800ac4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac4e:	f04f 0901 	mov.w	r9, #1
 800ac52:	4623      	mov	r3, r4
 800ac54:	469a      	mov	sl, r3
 800ac56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac5a:	b10a      	cbz	r2, 800ac60 <_svfiprintf_r+0x5c>
 800ac5c:	2a25      	cmp	r2, #37	; 0x25
 800ac5e:	d1f9      	bne.n	800ac54 <_svfiprintf_r+0x50>
 800ac60:	ebba 0b04 	subs.w	fp, sl, r4
 800ac64:	d00b      	beq.n	800ac7e <_svfiprintf_r+0x7a>
 800ac66:	465b      	mov	r3, fp
 800ac68:	4622      	mov	r2, r4
 800ac6a:	4629      	mov	r1, r5
 800ac6c:	4638      	mov	r0, r7
 800ac6e:	f7ff ff6e 	bl	800ab4e <__ssputs_r>
 800ac72:	3001      	adds	r0, #1
 800ac74:	f000 80aa 	beq.w	800adcc <_svfiprintf_r+0x1c8>
 800ac78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac7a:	445a      	add	r2, fp
 800ac7c:	9209      	str	r2, [sp, #36]	; 0x24
 800ac7e:	f89a 3000 	ldrb.w	r3, [sl]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	f000 80a2 	beq.w	800adcc <_svfiprintf_r+0x1c8>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac92:	f10a 0a01 	add.w	sl, sl, #1
 800ac96:	9304      	str	r3, [sp, #16]
 800ac98:	9307      	str	r3, [sp, #28]
 800ac9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac9e:	931a      	str	r3, [sp, #104]	; 0x68
 800aca0:	4654      	mov	r4, sl
 800aca2:	2205      	movs	r2, #5
 800aca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aca8:	4851      	ldr	r0, [pc, #324]	; (800adf0 <_svfiprintf_r+0x1ec>)
 800acaa:	f7f5 faa1 	bl	80001f0 <memchr>
 800acae:	9a04      	ldr	r2, [sp, #16]
 800acb0:	b9d8      	cbnz	r0, 800acea <_svfiprintf_r+0xe6>
 800acb2:	06d0      	lsls	r0, r2, #27
 800acb4:	bf44      	itt	mi
 800acb6:	2320      	movmi	r3, #32
 800acb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acbc:	0711      	lsls	r1, r2, #28
 800acbe:	bf44      	itt	mi
 800acc0:	232b      	movmi	r3, #43	; 0x2b
 800acc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acc6:	f89a 3000 	ldrb.w	r3, [sl]
 800acca:	2b2a      	cmp	r3, #42	; 0x2a
 800accc:	d015      	beq.n	800acfa <_svfiprintf_r+0xf6>
 800acce:	9a07      	ldr	r2, [sp, #28]
 800acd0:	4654      	mov	r4, sl
 800acd2:	2000      	movs	r0, #0
 800acd4:	f04f 0c0a 	mov.w	ip, #10
 800acd8:	4621      	mov	r1, r4
 800acda:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acde:	3b30      	subs	r3, #48	; 0x30
 800ace0:	2b09      	cmp	r3, #9
 800ace2:	d94e      	bls.n	800ad82 <_svfiprintf_r+0x17e>
 800ace4:	b1b0      	cbz	r0, 800ad14 <_svfiprintf_r+0x110>
 800ace6:	9207      	str	r2, [sp, #28]
 800ace8:	e014      	b.n	800ad14 <_svfiprintf_r+0x110>
 800acea:	eba0 0308 	sub.w	r3, r0, r8
 800acee:	fa09 f303 	lsl.w	r3, r9, r3
 800acf2:	4313      	orrs	r3, r2
 800acf4:	9304      	str	r3, [sp, #16]
 800acf6:	46a2      	mov	sl, r4
 800acf8:	e7d2      	b.n	800aca0 <_svfiprintf_r+0x9c>
 800acfa:	9b03      	ldr	r3, [sp, #12]
 800acfc:	1d19      	adds	r1, r3, #4
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	9103      	str	r1, [sp, #12]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	bfbb      	ittet	lt
 800ad06:	425b      	neglt	r3, r3
 800ad08:	f042 0202 	orrlt.w	r2, r2, #2
 800ad0c:	9307      	strge	r3, [sp, #28]
 800ad0e:	9307      	strlt	r3, [sp, #28]
 800ad10:	bfb8      	it	lt
 800ad12:	9204      	strlt	r2, [sp, #16]
 800ad14:	7823      	ldrb	r3, [r4, #0]
 800ad16:	2b2e      	cmp	r3, #46	; 0x2e
 800ad18:	d10c      	bne.n	800ad34 <_svfiprintf_r+0x130>
 800ad1a:	7863      	ldrb	r3, [r4, #1]
 800ad1c:	2b2a      	cmp	r3, #42	; 0x2a
 800ad1e:	d135      	bne.n	800ad8c <_svfiprintf_r+0x188>
 800ad20:	9b03      	ldr	r3, [sp, #12]
 800ad22:	1d1a      	adds	r2, r3, #4
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	9203      	str	r2, [sp, #12]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	bfb8      	it	lt
 800ad2c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad30:	3402      	adds	r4, #2
 800ad32:	9305      	str	r3, [sp, #20]
 800ad34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ae00 <_svfiprintf_r+0x1fc>
 800ad38:	7821      	ldrb	r1, [r4, #0]
 800ad3a:	2203      	movs	r2, #3
 800ad3c:	4650      	mov	r0, sl
 800ad3e:	f7f5 fa57 	bl	80001f0 <memchr>
 800ad42:	b140      	cbz	r0, 800ad56 <_svfiprintf_r+0x152>
 800ad44:	2340      	movs	r3, #64	; 0x40
 800ad46:	eba0 000a 	sub.w	r0, r0, sl
 800ad4a:	fa03 f000 	lsl.w	r0, r3, r0
 800ad4e:	9b04      	ldr	r3, [sp, #16]
 800ad50:	4303      	orrs	r3, r0
 800ad52:	3401      	adds	r4, #1
 800ad54:	9304      	str	r3, [sp, #16]
 800ad56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad5a:	4826      	ldr	r0, [pc, #152]	; (800adf4 <_svfiprintf_r+0x1f0>)
 800ad5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad60:	2206      	movs	r2, #6
 800ad62:	f7f5 fa45 	bl	80001f0 <memchr>
 800ad66:	2800      	cmp	r0, #0
 800ad68:	d038      	beq.n	800addc <_svfiprintf_r+0x1d8>
 800ad6a:	4b23      	ldr	r3, [pc, #140]	; (800adf8 <_svfiprintf_r+0x1f4>)
 800ad6c:	bb1b      	cbnz	r3, 800adb6 <_svfiprintf_r+0x1b2>
 800ad6e:	9b03      	ldr	r3, [sp, #12]
 800ad70:	3307      	adds	r3, #7
 800ad72:	f023 0307 	bic.w	r3, r3, #7
 800ad76:	3308      	adds	r3, #8
 800ad78:	9303      	str	r3, [sp, #12]
 800ad7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad7c:	4433      	add	r3, r6
 800ad7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad80:	e767      	b.n	800ac52 <_svfiprintf_r+0x4e>
 800ad82:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad86:	460c      	mov	r4, r1
 800ad88:	2001      	movs	r0, #1
 800ad8a:	e7a5      	b.n	800acd8 <_svfiprintf_r+0xd4>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	3401      	adds	r4, #1
 800ad90:	9305      	str	r3, [sp, #20]
 800ad92:	4619      	mov	r1, r3
 800ad94:	f04f 0c0a 	mov.w	ip, #10
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad9e:	3a30      	subs	r2, #48	; 0x30
 800ada0:	2a09      	cmp	r2, #9
 800ada2:	d903      	bls.n	800adac <_svfiprintf_r+0x1a8>
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d0c5      	beq.n	800ad34 <_svfiprintf_r+0x130>
 800ada8:	9105      	str	r1, [sp, #20]
 800adaa:	e7c3      	b.n	800ad34 <_svfiprintf_r+0x130>
 800adac:	fb0c 2101 	mla	r1, ip, r1, r2
 800adb0:	4604      	mov	r4, r0
 800adb2:	2301      	movs	r3, #1
 800adb4:	e7f0      	b.n	800ad98 <_svfiprintf_r+0x194>
 800adb6:	ab03      	add	r3, sp, #12
 800adb8:	9300      	str	r3, [sp, #0]
 800adba:	462a      	mov	r2, r5
 800adbc:	4b0f      	ldr	r3, [pc, #60]	; (800adfc <_svfiprintf_r+0x1f8>)
 800adbe:	a904      	add	r1, sp, #16
 800adc0:	4638      	mov	r0, r7
 800adc2:	f7fe f8a5 	bl	8008f10 <_printf_float>
 800adc6:	1c42      	adds	r2, r0, #1
 800adc8:	4606      	mov	r6, r0
 800adca:	d1d6      	bne.n	800ad7a <_svfiprintf_r+0x176>
 800adcc:	89ab      	ldrh	r3, [r5, #12]
 800adce:	065b      	lsls	r3, r3, #25
 800add0:	f53f af2c 	bmi.w	800ac2c <_svfiprintf_r+0x28>
 800add4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800add6:	b01d      	add	sp, #116	; 0x74
 800add8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800addc:	ab03      	add	r3, sp, #12
 800adde:	9300      	str	r3, [sp, #0]
 800ade0:	462a      	mov	r2, r5
 800ade2:	4b06      	ldr	r3, [pc, #24]	; (800adfc <_svfiprintf_r+0x1f8>)
 800ade4:	a904      	add	r1, sp, #16
 800ade6:	4638      	mov	r0, r7
 800ade8:	f7fe fb36 	bl	8009458 <_printf_i>
 800adec:	e7eb      	b.n	800adc6 <_svfiprintf_r+0x1c2>
 800adee:	bf00      	nop
 800adf0:	0800bcbc 	.word	0x0800bcbc
 800adf4:	0800bcc6 	.word	0x0800bcc6
 800adf8:	08008f11 	.word	0x08008f11
 800adfc:	0800ab4f 	.word	0x0800ab4f
 800ae00:	0800bcc2 	.word	0x0800bcc2

0800ae04 <__assert_func>:
 800ae04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae06:	4614      	mov	r4, r2
 800ae08:	461a      	mov	r2, r3
 800ae0a:	4b09      	ldr	r3, [pc, #36]	; (800ae30 <__assert_func+0x2c>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4605      	mov	r5, r0
 800ae10:	68d8      	ldr	r0, [r3, #12]
 800ae12:	b14c      	cbz	r4, 800ae28 <__assert_func+0x24>
 800ae14:	4b07      	ldr	r3, [pc, #28]	; (800ae34 <__assert_func+0x30>)
 800ae16:	9100      	str	r1, [sp, #0]
 800ae18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae1c:	4906      	ldr	r1, [pc, #24]	; (800ae38 <__assert_func+0x34>)
 800ae1e:	462b      	mov	r3, r5
 800ae20:	f000 f80e 	bl	800ae40 <fiprintf>
 800ae24:	f000 fa9a 	bl	800b35c <abort>
 800ae28:	4b04      	ldr	r3, [pc, #16]	; (800ae3c <__assert_func+0x38>)
 800ae2a:	461c      	mov	r4, r3
 800ae2c:	e7f3      	b.n	800ae16 <__assert_func+0x12>
 800ae2e:	bf00      	nop
 800ae30:	20000188 	.word	0x20000188
 800ae34:	0800bccd 	.word	0x0800bccd
 800ae38:	0800bcda 	.word	0x0800bcda
 800ae3c:	0800bd08 	.word	0x0800bd08

0800ae40 <fiprintf>:
 800ae40:	b40e      	push	{r1, r2, r3}
 800ae42:	b503      	push	{r0, r1, lr}
 800ae44:	4601      	mov	r1, r0
 800ae46:	ab03      	add	r3, sp, #12
 800ae48:	4805      	ldr	r0, [pc, #20]	; (800ae60 <fiprintf+0x20>)
 800ae4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae4e:	6800      	ldr	r0, [r0, #0]
 800ae50:	9301      	str	r3, [sp, #4]
 800ae52:	f000 f885 	bl	800af60 <_vfiprintf_r>
 800ae56:	b002      	add	sp, #8
 800ae58:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae5c:	b003      	add	sp, #12
 800ae5e:	4770      	bx	lr
 800ae60:	20000188 	.word	0x20000188

0800ae64 <__retarget_lock_init_recursive>:
 800ae64:	4770      	bx	lr

0800ae66 <__retarget_lock_acquire_recursive>:
 800ae66:	4770      	bx	lr

0800ae68 <__retarget_lock_release_recursive>:
 800ae68:	4770      	bx	lr

0800ae6a <__ascii_mbtowc>:
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	b901      	cbnz	r1, 800ae70 <__ascii_mbtowc+0x6>
 800ae6e:	a901      	add	r1, sp, #4
 800ae70:	b142      	cbz	r2, 800ae84 <__ascii_mbtowc+0x1a>
 800ae72:	b14b      	cbz	r3, 800ae88 <__ascii_mbtowc+0x1e>
 800ae74:	7813      	ldrb	r3, [r2, #0]
 800ae76:	600b      	str	r3, [r1, #0]
 800ae78:	7812      	ldrb	r2, [r2, #0]
 800ae7a:	1e10      	subs	r0, r2, #0
 800ae7c:	bf18      	it	ne
 800ae7e:	2001      	movne	r0, #1
 800ae80:	b002      	add	sp, #8
 800ae82:	4770      	bx	lr
 800ae84:	4610      	mov	r0, r2
 800ae86:	e7fb      	b.n	800ae80 <__ascii_mbtowc+0x16>
 800ae88:	f06f 0001 	mvn.w	r0, #1
 800ae8c:	e7f8      	b.n	800ae80 <__ascii_mbtowc+0x16>

0800ae8e <memmove>:
 800ae8e:	4288      	cmp	r0, r1
 800ae90:	b510      	push	{r4, lr}
 800ae92:	eb01 0402 	add.w	r4, r1, r2
 800ae96:	d902      	bls.n	800ae9e <memmove+0x10>
 800ae98:	4284      	cmp	r4, r0
 800ae9a:	4623      	mov	r3, r4
 800ae9c:	d807      	bhi.n	800aeae <memmove+0x20>
 800ae9e:	1e43      	subs	r3, r0, #1
 800aea0:	42a1      	cmp	r1, r4
 800aea2:	d008      	beq.n	800aeb6 <memmove+0x28>
 800aea4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aea8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aeac:	e7f8      	b.n	800aea0 <memmove+0x12>
 800aeae:	4402      	add	r2, r0
 800aeb0:	4601      	mov	r1, r0
 800aeb2:	428a      	cmp	r2, r1
 800aeb4:	d100      	bne.n	800aeb8 <memmove+0x2a>
 800aeb6:	bd10      	pop	{r4, pc}
 800aeb8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aebc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aec0:	e7f7      	b.n	800aeb2 <memmove+0x24>

0800aec2 <_realloc_r>:
 800aec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec4:	4607      	mov	r7, r0
 800aec6:	4614      	mov	r4, r2
 800aec8:	460e      	mov	r6, r1
 800aeca:	b921      	cbnz	r1, 800aed6 <_realloc_r+0x14>
 800aecc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aed0:	4611      	mov	r1, r2
 800aed2:	f7fd bf23 	b.w	8008d1c <_malloc_r>
 800aed6:	b922      	cbnz	r2, 800aee2 <_realloc_r+0x20>
 800aed8:	f7fd fed0 	bl	8008c7c <_free_r>
 800aedc:	4625      	mov	r5, r4
 800aede:	4628      	mov	r0, r5
 800aee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aee2:	f000 fc5f 	bl	800b7a4 <_malloc_usable_size_r>
 800aee6:	42a0      	cmp	r0, r4
 800aee8:	d20f      	bcs.n	800af0a <_realloc_r+0x48>
 800aeea:	4621      	mov	r1, r4
 800aeec:	4638      	mov	r0, r7
 800aeee:	f7fd ff15 	bl	8008d1c <_malloc_r>
 800aef2:	4605      	mov	r5, r0
 800aef4:	2800      	cmp	r0, #0
 800aef6:	d0f2      	beq.n	800aede <_realloc_r+0x1c>
 800aef8:	4631      	mov	r1, r6
 800aefa:	4622      	mov	r2, r4
 800aefc:	f7ff fa80 	bl	800a400 <memcpy>
 800af00:	4631      	mov	r1, r6
 800af02:	4638      	mov	r0, r7
 800af04:	f7fd feba 	bl	8008c7c <_free_r>
 800af08:	e7e9      	b.n	800aede <_realloc_r+0x1c>
 800af0a:	4635      	mov	r5, r6
 800af0c:	e7e7      	b.n	800aede <_realloc_r+0x1c>

0800af0e <__sfputc_r>:
 800af0e:	6893      	ldr	r3, [r2, #8]
 800af10:	3b01      	subs	r3, #1
 800af12:	2b00      	cmp	r3, #0
 800af14:	b410      	push	{r4}
 800af16:	6093      	str	r3, [r2, #8]
 800af18:	da08      	bge.n	800af2c <__sfputc_r+0x1e>
 800af1a:	6994      	ldr	r4, [r2, #24]
 800af1c:	42a3      	cmp	r3, r4
 800af1e:	db01      	blt.n	800af24 <__sfputc_r+0x16>
 800af20:	290a      	cmp	r1, #10
 800af22:	d103      	bne.n	800af2c <__sfputc_r+0x1e>
 800af24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af28:	f000 b94a 	b.w	800b1c0 <__swbuf_r>
 800af2c:	6813      	ldr	r3, [r2, #0]
 800af2e:	1c58      	adds	r0, r3, #1
 800af30:	6010      	str	r0, [r2, #0]
 800af32:	7019      	strb	r1, [r3, #0]
 800af34:	4608      	mov	r0, r1
 800af36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <__sfputs_r>:
 800af3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af3e:	4606      	mov	r6, r0
 800af40:	460f      	mov	r7, r1
 800af42:	4614      	mov	r4, r2
 800af44:	18d5      	adds	r5, r2, r3
 800af46:	42ac      	cmp	r4, r5
 800af48:	d101      	bne.n	800af4e <__sfputs_r+0x12>
 800af4a:	2000      	movs	r0, #0
 800af4c:	e007      	b.n	800af5e <__sfputs_r+0x22>
 800af4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af52:	463a      	mov	r2, r7
 800af54:	4630      	mov	r0, r6
 800af56:	f7ff ffda 	bl	800af0e <__sfputc_r>
 800af5a:	1c43      	adds	r3, r0, #1
 800af5c:	d1f3      	bne.n	800af46 <__sfputs_r+0xa>
 800af5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800af60 <_vfiprintf_r>:
 800af60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af64:	460d      	mov	r5, r1
 800af66:	b09d      	sub	sp, #116	; 0x74
 800af68:	4614      	mov	r4, r2
 800af6a:	4698      	mov	r8, r3
 800af6c:	4606      	mov	r6, r0
 800af6e:	b118      	cbz	r0, 800af78 <_vfiprintf_r+0x18>
 800af70:	6983      	ldr	r3, [r0, #24]
 800af72:	b90b      	cbnz	r3, 800af78 <_vfiprintf_r+0x18>
 800af74:	f000 fb14 	bl	800b5a0 <__sinit>
 800af78:	4b89      	ldr	r3, [pc, #548]	; (800b1a0 <_vfiprintf_r+0x240>)
 800af7a:	429d      	cmp	r5, r3
 800af7c:	d11b      	bne.n	800afb6 <_vfiprintf_r+0x56>
 800af7e:	6875      	ldr	r5, [r6, #4]
 800af80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af82:	07d9      	lsls	r1, r3, #31
 800af84:	d405      	bmi.n	800af92 <_vfiprintf_r+0x32>
 800af86:	89ab      	ldrh	r3, [r5, #12]
 800af88:	059a      	lsls	r2, r3, #22
 800af8a:	d402      	bmi.n	800af92 <_vfiprintf_r+0x32>
 800af8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af8e:	f7ff ff6a 	bl	800ae66 <__retarget_lock_acquire_recursive>
 800af92:	89ab      	ldrh	r3, [r5, #12]
 800af94:	071b      	lsls	r3, r3, #28
 800af96:	d501      	bpl.n	800af9c <_vfiprintf_r+0x3c>
 800af98:	692b      	ldr	r3, [r5, #16]
 800af9a:	b9eb      	cbnz	r3, 800afd8 <_vfiprintf_r+0x78>
 800af9c:	4629      	mov	r1, r5
 800af9e:	4630      	mov	r0, r6
 800afa0:	f000 f96e 	bl	800b280 <__swsetup_r>
 800afa4:	b1c0      	cbz	r0, 800afd8 <_vfiprintf_r+0x78>
 800afa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afa8:	07dc      	lsls	r4, r3, #31
 800afaa:	d50e      	bpl.n	800afca <_vfiprintf_r+0x6a>
 800afac:	f04f 30ff 	mov.w	r0, #4294967295
 800afb0:	b01d      	add	sp, #116	; 0x74
 800afb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb6:	4b7b      	ldr	r3, [pc, #492]	; (800b1a4 <_vfiprintf_r+0x244>)
 800afb8:	429d      	cmp	r5, r3
 800afba:	d101      	bne.n	800afc0 <_vfiprintf_r+0x60>
 800afbc:	68b5      	ldr	r5, [r6, #8]
 800afbe:	e7df      	b.n	800af80 <_vfiprintf_r+0x20>
 800afc0:	4b79      	ldr	r3, [pc, #484]	; (800b1a8 <_vfiprintf_r+0x248>)
 800afc2:	429d      	cmp	r5, r3
 800afc4:	bf08      	it	eq
 800afc6:	68f5      	ldreq	r5, [r6, #12]
 800afc8:	e7da      	b.n	800af80 <_vfiprintf_r+0x20>
 800afca:	89ab      	ldrh	r3, [r5, #12]
 800afcc:	0598      	lsls	r0, r3, #22
 800afce:	d4ed      	bmi.n	800afac <_vfiprintf_r+0x4c>
 800afd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afd2:	f7ff ff49 	bl	800ae68 <__retarget_lock_release_recursive>
 800afd6:	e7e9      	b.n	800afac <_vfiprintf_r+0x4c>
 800afd8:	2300      	movs	r3, #0
 800afda:	9309      	str	r3, [sp, #36]	; 0x24
 800afdc:	2320      	movs	r3, #32
 800afde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afe2:	f8cd 800c 	str.w	r8, [sp, #12]
 800afe6:	2330      	movs	r3, #48	; 0x30
 800afe8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b1ac <_vfiprintf_r+0x24c>
 800afec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aff0:	f04f 0901 	mov.w	r9, #1
 800aff4:	4623      	mov	r3, r4
 800aff6:	469a      	mov	sl, r3
 800aff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800affc:	b10a      	cbz	r2, 800b002 <_vfiprintf_r+0xa2>
 800affe:	2a25      	cmp	r2, #37	; 0x25
 800b000:	d1f9      	bne.n	800aff6 <_vfiprintf_r+0x96>
 800b002:	ebba 0b04 	subs.w	fp, sl, r4
 800b006:	d00b      	beq.n	800b020 <_vfiprintf_r+0xc0>
 800b008:	465b      	mov	r3, fp
 800b00a:	4622      	mov	r2, r4
 800b00c:	4629      	mov	r1, r5
 800b00e:	4630      	mov	r0, r6
 800b010:	f7ff ff94 	bl	800af3c <__sfputs_r>
 800b014:	3001      	adds	r0, #1
 800b016:	f000 80aa 	beq.w	800b16e <_vfiprintf_r+0x20e>
 800b01a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b01c:	445a      	add	r2, fp
 800b01e:	9209      	str	r2, [sp, #36]	; 0x24
 800b020:	f89a 3000 	ldrb.w	r3, [sl]
 800b024:	2b00      	cmp	r3, #0
 800b026:	f000 80a2 	beq.w	800b16e <_vfiprintf_r+0x20e>
 800b02a:	2300      	movs	r3, #0
 800b02c:	f04f 32ff 	mov.w	r2, #4294967295
 800b030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b034:	f10a 0a01 	add.w	sl, sl, #1
 800b038:	9304      	str	r3, [sp, #16]
 800b03a:	9307      	str	r3, [sp, #28]
 800b03c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b040:	931a      	str	r3, [sp, #104]	; 0x68
 800b042:	4654      	mov	r4, sl
 800b044:	2205      	movs	r2, #5
 800b046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b04a:	4858      	ldr	r0, [pc, #352]	; (800b1ac <_vfiprintf_r+0x24c>)
 800b04c:	f7f5 f8d0 	bl	80001f0 <memchr>
 800b050:	9a04      	ldr	r2, [sp, #16]
 800b052:	b9d8      	cbnz	r0, 800b08c <_vfiprintf_r+0x12c>
 800b054:	06d1      	lsls	r1, r2, #27
 800b056:	bf44      	itt	mi
 800b058:	2320      	movmi	r3, #32
 800b05a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b05e:	0713      	lsls	r3, r2, #28
 800b060:	bf44      	itt	mi
 800b062:	232b      	movmi	r3, #43	; 0x2b
 800b064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b068:	f89a 3000 	ldrb.w	r3, [sl]
 800b06c:	2b2a      	cmp	r3, #42	; 0x2a
 800b06e:	d015      	beq.n	800b09c <_vfiprintf_r+0x13c>
 800b070:	9a07      	ldr	r2, [sp, #28]
 800b072:	4654      	mov	r4, sl
 800b074:	2000      	movs	r0, #0
 800b076:	f04f 0c0a 	mov.w	ip, #10
 800b07a:	4621      	mov	r1, r4
 800b07c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b080:	3b30      	subs	r3, #48	; 0x30
 800b082:	2b09      	cmp	r3, #9
 800b084:	d94e      	bls.n	800b124 <_vfiprintf_r+0x1c4>
 800b086:	b1b0      	cbz	r0, 800b0b6 <_vfiprintf_r+0x156>
 800b088:	9207      	str	r2, [sp, #28]
 800b08a:	e014      	b.n	800b0b6 <_vfiprintf_r+0x156>
 800b08c:	eba0 0308 	sub.w	r3, r0, r8
 800b090:	fa09 f303 	lsl.w	r3, r9, r3
 800b094:	4313      	orrs	r3, r2
 800b096:	9304      	str	r3, [sp, #16]
 800b098:	46a2      	mov	sl, r4
 800b09a:	e7d2      	b.n	800b042 <_vfiprintf_r+0xe2>
 800b09c:	9b03      	ldr	r3, [sp, #12]
 800b09e:	1d19      	adds	r1, r3, #4
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	9103      	str	r1, [sp, #12]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	bfbb      	ittet	lt
 800b0a8:	425b      	neglt	r3, r3
 800b0aa:	f042 0202 	orrlt.w	r2, r2, #2
 800b0ae:	9307      	strge	r3, [sp, #28]
 800b0b0:	9307      	strlt	r3, [sp, #28]
 800b0b2:	bfb8      	it	lt
 800b0b4:	9204      	strlt	r2, [sp, #16]
 800b0b6:	7823      	ldrb	r3, [r4, #0]
 800b0b8:	2b2e      	cmp	r3, #46	; 0x2e
 800b0ba:	d10c      	bne.n	800b0d6 <_vfiprintf_r+0x176>
 800b0bc:	7863      	ldrb	r3, [r4, #1]
 800b0be:	2b2a      	cmp	r3, #42	; 0x2a
 800b0c0:	d135      	bne.n	800b12e <_vfiprintf_r+0x1ce>
 800b0c2:	9b03      	ldr	r3, [sp, #12]
 800b0c4:	1d1a      	adds	r2, r3, #4
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	9203      	str	r2, [sp, #12]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	bfb8      	it	lt
 800b0ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0d2:	3402      	adds	r4, #2
 800b0d4:	9305      	str	r3, [sp, #20]
 800b0d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b1bc <_vfiprintf_r+0x25c>
 800b0da:	7821      	ldrb	r1, [r4, #0]
 800b0dc:	2203      	movs	r2, #3
 800b0de:	4650      	mov	r0, sl
 800b0e0:	f7f5 f886 	bl	80001f0 <memchr>
 800b0e4:	b140      	cbz	r0, 800b0f8 <_vfiprintf_r+0x198>
 800b0e6:	2340      	movs	r3, #64	; 0x40
 800b0e8:	eba0 000a 	sub.w	r0, r0, sl
 800b0ec:	fa03 f000 	lsl.w	r0, r3, r0
 800b0f0:	9b04      	ldr	r3, [sp, #16]
 800b0f2:	4303      	orrs	r3, r0
 800b0f4:	3401      	adds	r4, #1
 800b0f6:	9304      	str	r3, [sp, #16]
 800b0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0fc:	482c      	ldr	r0, [pc, #176]	; (800b1b0 <_vfiprintf_r+0x250>)
 800b0fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b102:	2206      	movs	r2, #6
 800b104:	f7f5 f874 	bl	80001f0 <memchr>
 800b108:	2800      	cmp	r0, #0
 800b10a:	d03f      	beq.n	800b18c <_vfiprintf_r+0x22c>
 800b10c:	4b29      	ldr	r3, [pc, #164]	; (800b1b4 <_vfiprintf_r+0x254>)
 800b10e:	bb1b      	cbnz	r3, 800b158 <_vfiprintf_r+0x1f8>
 800b110:	9b03      	ldr	r3, [sp, #12]
 800b112:	3307      	adds	r3, #7
 800b114:	f023 0307 	bic.w	r3, r3, #7
 800b118:	3308      	adds	r3, #8
 800b11a:	9303      	str	r3, [sp, #12]
 800b11c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b11e:	443b      	add	r3, r7
 800b120:	9309      	str	r3, [sp, #36]	; 0x24
 800b122:	e767      	b.n	800aff4 <_vfiprintf_r+0x94>
 800b124:	fb0c 3202 	mla	r2, ip, r2, r3
 800b128:	460c      	mov	r4, r1
 800b12a:	2001      	movs	r0, #1
 800b12c:	e7a5      	b.n	800b07a <_vfiprintf_r+0x11a>
 800b12e:	2300      	movs	r3, #0
 800b130:	3401      	adds	r4, #1
 800b132:	9305      	str	r3, [sp, #20]
 800b134:	4619      	mov	r1, r3
 800b136:	f04f 0c0a 	mov.w	ip, #10
 800b13a:	4620      	mov	r0, r4
 800b13c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b140:	3a30      	subs	r2, #48	; 0x30
 800b142:	2a09      	cmp	r2, #9
 800b144:	d903      	bls.n	800b14e <_vfiprintf_r+0x1ee>
 800b146:	2b00      	cmp	r3, #0
 800b148:	d0c5      	beq.n	800b0d6 <_vfiprintf_r+0x176>
 800b14a:	9105      	str	r1, [sp, #20]
 800b14c:	e7c3      	b.n	800b0d6 <_vfiprintf_r+0x176>
 800b14e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b152:	4604      	mov	r4, r0
 800b154:	2301      	movs	r3, #1
 800b156:	e7f0      	b.n	800b13a <_vfiprintf_r+0x1da>
 800b158:	ab03      	add	r3, sp, #12
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	462a      	mov	r2, r5
 800b15e:	4b16      	ldr	r3, [pc, #88]	; (800b1b8 <_vfiprintf_r+0x258>)
 800b160:	a904      	add	r1, sp, #16
 800b162:	4630      	mov	r0, r6
 800b164:	f7fd fed4 	bl	8008f10 <_printf_float>
 800b168:	4607      	mov	r7, r0
 800b16a:	1c78      	adds	r0, r7, #1
 800b16c:	d1d6      	bne.n	800b11c <_vfiprintf_r+0x1bc>
 800b16e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b170:	07d9      	lsls	r1, r3, #31
 800b172:	d405      	bmi.n	800b180 <_vfiprintf_r+0x220>
 800b174:	89ab      	ldrh	r3, [r5, #12]
 800b176:	059a      	lsls	r2, r3, #22
 800b178:	d402      	bmi.n	800b180 <_vfiprintf_r+0x220>
 800b17a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b17c:	f7ff fe74 	bl	800ae68 <__retarget_lock_release_recursive>
 800b180:	89ab      	ldrh	r3, [r5, #12]
 800b182:	065b      	lsls	r3, r3, #25
 800b184:	f53f af12 	bmi.w	800afac <_vfiprintf_r+0x4c>
 800b188:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b18a:	e711      	b.n	800afb0 <_vfiprintf_r+0x50>
 800b18c:	ab03      	add	r3, sp, #12
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	462a      	mov	r2, r5
 800b192:	4b09      	ldr	r3, [pc, #36]	; (800b1b8 <_vfiprintf_r+0x258>)
 800b194:	a904      	add	r1, sp, #16
 800b196:	4630      	mov	r0, r6
 800b198:	f7fe f95e 	bl	8009458 <_printf_i>
 800b19c:	e7e4      	b.n	800b168 <_vfiprintf_r+0x208>
 800b19e:	bf00      	nop
 800b1a0:	0800be34 	.word	0x0800be34
 800b1a4:	0800be54 	.word	0x0800be54
 800b1a8:	0800be14 	.word	0x0800be14
 800b1ac:	0800bcbc 	.word	0x0800bcbc
 800b1b0:	0800bcc6 	.word	0x0800bcc6
 800b1b4:	08008f11 	.word	0x08008f11
 800b1b8:	0800af3d 	.word	0x0800af3d
 800b1bc:	0800bcc2 	.word	0x0800bcc2

0800b1c0 <__swbuf_r>:
 800b1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c2:	460e      	mov	r6, r1
 800b1c4:	4614      	mov	r4, r2
 800b1c6:	4605      	mov	r5, r0
 800b1c8:	b118      	cbz	r0, 800b1d2 <__swbuf_r+0x12>
 800b1ca:	6983      	ldr	r3, [r0, #24]
 800b1cc:	b90b      	cbnz	r3, 800b1d2 <__swbuf_r+0x12>
 800b1ce:	f000 f9e7 	bl	800b5a0 <__sinit>
 800b1d2:	4b21      	ldr	r3, [pc, #132]	; (800b258 <__swbuf_r+0x98>)
 800b1d4:	429c      	cmp	r4, r3
 800b1d6:	d12b      	bne.n	800b230 <__swbuf_r+0x70>
 800b1d8:	686c      	ldr	r4, [r5, #4]
 800b1da:	69a3      	ldr	r3, [r4, #24]
 800b1dc:	60a3      	str	r3, [r4, #8]
 800b1de:	89a3      	ldrh	r3, [r4, #12]
 800b1e0:	071a      	lsls	r2, r3, #28
 800b1e2:	d52f      	bpl.n	800b244 <__swbuf_r+0x84>
 800b1e4:	6923      	ldr	r3, [r4, #16]
 800b1e6:	b36b      	cbz	r3, 800b244 <__swbuf_r+0x84>
 800b1e8:	6923      	ldr	r3, [r4, #16]
 800b1ea:	6820      	ldr	r0, [r4, #0]
 800b1ec:	1ac0      	subs	r0, r0, r3
 800b1ee:	6963      	ldr	r3, [r4, #20]
 800b1f0:	b2f6      	uxtb	r6, r6
 800b1f2:	4283      	cmp	r3, r0
 800b1f4:	4637      	mov	r7, r6
 800b1f6:	dc04      	bgt.n	800b202 <__swbuf_r+0x42>
 800b1f8:	4621      	mov	r1, r4
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	f000 f93c 	bl	800b478 <_fflush_r>
 800b200:	bb30      	cbnz	r0, 800b250 <__swbuf_r+0x90>
 800b202:	68a3      	ldr	r3, [r4, #8]
 800b204:	3b01      	subs	r3, #1
 800b206:	60a3      	str	r3, [r4, #8]
 800b208:	6823      	ldr	r3, [r4, #0]
 800b20a:	1c5a      	adds	r2, r3, #1
 800b20c:	6022      	str	r2, [r4, #0]
 800b20e:	701e      	strb	r6, [r3, #0]
 800b210:	6963      	ldr	r3, [r4, #20]
 800b212:	3001      	adds	r0, #1
 800b214:	4283      	cmp	r3, r0
 800b216:	d004      	beq.n	800b222 <__swbuf_r+0x62>
 800b218:	89a3      	ldrh	r3, [r4, #12]
 800b21a:	07db      	lsls	r3, r3, #31
 800b21c:	d506      	bpl.n	800b22c <__swbuf_r+0x6c>
 800b21e:	2e0a      	cmp	r6, #10
 800b220:	d104      	bne.n	800b22c <__swbuf_r+0x6c>
 800b222:	4621      	mov	r1, r4
 800b224:	4628      	mov	r0, r5
 800b226:	f000 f927 	bl	800b478 <_fflush_r>
 800b22a:	b988      	cbnz	r0, 800b250 <__swbuf_r+0x90>
 800b22c:	4638      	mov	r0, r7
 800b22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b230:	4b0a      	ldr	r3, [pc, #40]	; (800b25c <__swbuf_r+0x9c>)
 800b232:	429c      	cmp	r4, r3
 800b234:	d101      	bne.n	800b23a <__swbuf_r+0x7a>
 800b236:	68ac      	ldr	r4, [r5, #8]
 800b238:	e7cf      	b.n	800b1da <__swbuf_r+0x1a>
 800b23a:	4b09      	ldr	r3, [pc, #36]	; (800b260 <__swbuf_r+0xa0>)
 800b23c:	429c      	cmp	r4, r3
 800b23e:	bf08      	it	eq
 800b240:	68ec      	ldreq	r4, [r5, #12]
 800b242:	e7ca      	b.n	800b1da <__swbuf_r+0x1a>
 800b244:	4621      	mov	r1, r4
 800b246:	4628      	mov	r0, r5
 800b248:	f000 f81a 	bl	800b280 <__swsetup_r>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	d0cb      	beq.n	800b1e8 <__swbuf_r+0x28>
 800b250:	f04f 37ff 	mov.w	r7, #4294967295
 800b254:	e7ea      	b.n	800b22c <__swbuf_r+0x6c>
 800b256:	bf00      	nop
 800b258:	0800be34 	.word	0x0800be34
 800b25c:	0800be54 	.word	0x0800be54
 800b260:	0800be14 	.word	0x0800be14

0800b264 <__ascii_wctomb>:
 800b264:	b149      	cbz	r1, 800b27a <__ascii_wctomb+0x16>
 800b266:	2aff      	cmp	r2, #255	; 0xff
 800b268:	bf85      	ittet	hi
 800b26a:	238a      	movhi	r3, #138	; 0x8a
 800b26c:	6003      	strhi	r3, [r0, #0]
 800b26e:	700a      	strbls	r2, [r1, #0]
 800b270:	f04f 30ff 	movhi.w	r0, #4294967295
 800b274:	bf98      	it	ls
 800b276:	2001      	movls	r0, #1
 800b278:	4770      	bx	lr
 800b27a:	4608      	mov	r0, r1
 800b27c:	4770      	bx	lr
	...

0800b280 <__swsetup_r>:
 800b280:	4b32      	ldr	r3, [pc, #200]	; (800b34c <__swsetup_r+0xcc>)
 800b282:	b570      	push	{r4, r5, r6, lr}
 800b284:	681d      	ldr	r5, [r3, #0]
 800b286:	4606      	mov	r6, r0
 800b288:	460c      	mov	r4, r1
 800b28a:	b125      	cbz	r5, 800b296 <__swsetup_r+0x16>
 800b28c:	69ab      	ldr	r3, [r5, #24]
 800b28e:	b913      	cbnz	r3, 800b296 <__swsetup_r+0x16>
 800b290:	4628      	mov	r0, r5
 800b292:	f000 f985 	bl	800b5a0 <__sinit>
 800b296:	4b2e      	ldr	r3, [pc, #184]	; (800b350 <__swsetup_r+0xd0>)
 800b298:	429c      	cmp	r4, r3
 800b29a:	d10f      	bne.n	800b2bc <__swsetup_r+0x3c>
 800b29c:	686c      	ldr	r4, [r5, #4]
 800b29e:	89a3      	ldrh	r3, [r4, #12]
 800b2a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2a4:	0719      	lsls	r1, r3, #28
 800b2a6:	d42c      	bmi.n	800b302 <__swsetup_r+0x82>
 800b2a8:	06dd      	lsls	r5, r3, #27
 800b2aa:	d411      	bmi.n	800b2d0 <__swsetup_r+0x50>
 800b2ac:	2309      	movs	r3, #9
 800b2ae:	6033      	str	r3, [r6, #0]
 800b2b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b2b4:	81a3      	strh	r3, [r4, #12]
 800b2b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ba:	e03e      	b.n	800b33a <__swsetup_r+0xba>
 800b2bc:	4b25      	ldr	r3, [pc, #148]	; (800b354 <__swsetup_r+0xd4>)
 800b2be:	429c      	cmp	r4, r3
 800b2c0:	d101      	bne.n	800b2c6 <__swsetup_r+0x46>
 800b2c2:	68ac      	ldr	r4, [r5, #8]
 800b2c4:	e7eb      	b.n	800b29e <__swsetup_r+0x1e>
 800b2c6:	4b24      	ldr	r3, [pc, #144]	; (800b358 <__swsetup_r+0xd8>)
 800b2c8:	429c      	cmp	r4, r3
 800b2ca:	bf08      	it	eq
 800b2cc:	68ec      	ldreq	r4, [r5, #12]
 800b2ce:	e7e6      	b.n	800b29e <__swsetup_r+0x1e>
 800b2d0:	0758      	lsls	r0, r3, #29
 800b2d2:	d512      	bpl.n	800b2fa <__swsetup_r+0x7a>
 800b2d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2d6:	b141      	cbz	r1, 800b2ea <__swsetup_r+0x6a>
 800b2d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2dc:	4299      	cmp	r1, r3
 800b2de:	d002      	beq.n	800b2e6 <__swsetup_r+0x66>
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	f7fd fccb 	bl	8008c7c <_free_r>
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	6363      	str	r3, [r4, #52]	; 0x34
 800b2ea:	89a3      	ldrh	r3, [r4, #12]
 800b2ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b2f0:	81a3      	strh	r3, [r4, #12]
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	6063      	str	r3, [r4, #4]
 800b2f6:	6923      	ldr	r3, [r4, #16]
 800b2f8:	6023      	str	r3, [r4, #0]
 800b2fa:	89a3      	ldrh	r3, [r4, #12]
 800b2fc:	f043 0308 	orr.w	r3, r3, #8
 800b300:	81a3      	strh	r3, [r4, #12]
 800b302:	6923      	ldr	r3, [r4, #16]
 800b304:	b94b      	cbnz	r3, 800b31a <__swsetup_r+0x9a>
 800b306:	89a3      	ldrh	r3, [r4, #12]
 800b308:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b30c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b310:	d003      	beq.n	800b31a <__swsetup_r+0x9a>
 800b312:	4621      	mov	r1, r4
 800b314:	4630      	mov	r0, r6
 800b316:	f000 fa05 	bl	800b724 <__smakebuf_r>
 800b31a:	89a0      	ldrh	r0, [r4, #12]
 800b31c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b320:	f010 0301 	ands.w	r3, r0, #1
 800b324:	d00a      	beq.n	800b33c <__swsetup_r+0xbc>
 800b326:	2300      	movs	r3, #0
 800b328:	60a3      	str	r3, [r4, #8]
 800b32a:	6963      	ldr	r3, [r4, #20]
 800b32c:	425b      	negs	r3, r3
 800b32e:	61a3      	str	r3, [r4, #24]
 800b330:	6923      	ldr	r3, [r4, #16]
 800b332:	b943      	cbnz	r3, 800b346 <__swsetup_r+0xc6>
 800b334:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b338:	d1ba      	bne.n	800b2b0 <__swsetup_r+0x30>
 800b33a:	bd70      	pop	{r4, r5, r6, pc}
 800b33c:	0781      	lsls	r1, r0, #30
 800b33e:	bf58      	it	pl
 800b340:	6963      	ldrpl	r3, [r4, #20]
 800b342:	60a3      	str	r3, [r4, #8]
 800b344:	e7f4      	b.n	800b330 <__swsetup_r+0xb0>
 800b346:	2000      	movs	r0, #0
 800b348:	e7f7      	b.n	800b33a <__swsetup_r+0xba>
 800b34a:	bf00      	nop
 800b34c:	20000188 	.word	0x20000188
 800b350:	0800be34 	.word	0x0800be34
 800b354:	0800be54 	.word	0x0800be54
 800b358:	0800be14 	.word	0x0800be14

0800b35c <abort>:
 800b35c:	b508      	push	{r3, lr}
 800b35e:	2006      	movs	r0, #6
 800b360:	f000 fa50 	bl	800b804 <raise>
 800b364:	2001      	movs	r0, #1
 800b366:	f7f6 fa4d 	bl	8001804 <_exit>
	...

0800b36c <__sflush_r>:
 800b36c:	898a      	ldrh	r2, [r1, #12]
 800b36e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b372:	4605      	mov	r5, r0
 800b374:	0710      	lsls	r0, r2, #28
 800b376:	460c      	mov	r4, r1
 800b378:	d458      	bmi.n	800b42c <__sflush_r+0xc0>
 800b37a:	684b      	ldr	r3, [r1, #4]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	dc05      	bgt.n	800b38c <__sflush_r+0x20>
 800b380:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b382:	2b00      	cmp	r3, #0
 800b384:	dc02      	bgt.n	800b38c <__sflush_r+0x20>
 800b386:	2000      	movs	r0, #0
 800b388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b38c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b38e:	2e00      	cmp	r6, #0
 800b390:	d0f9      	beq.n	800b386 <__sflush_r+0x1a>
 800b392:	2300      	movs	r3, #0
 800b394:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b398:	682f      	ldr	r7, [r5, #0]
 800b39a:	602b      	str	r3, [r5, #0]
 800b39c:	d032      	beq.n	800b404 <__sflush_r+0x98>
 800b39e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b3a0:	89a3      	ldrh	r3, [r4, #12]
 800b3a2:	075a      	lsls	r2, r3, #29
 800b3a4:	d505      	bpl.n	800b3b2 <__sflush_r+0x46>
 800b3a6:	6863      	ldr	r3, [r4, #4]
 800b3a8:	1ac0      	subs	r0, r0, r3
 800b3aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3ac:	b10b      	cbz	r3, 800b3b2 <__sflush_r+0x46>
 800b3ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b3b0:	1ac0      	subs	r0, r0, r3
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3b8:	6a21      	ldr	r1, [r4, #32]
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	47b0      	blx	r6
 800b3be:	1c43      	adds	r3, r0, #1
 800b3c0:	89a3      	ldrh	r3, [r4, #12]
 800b3c2:	d106      	bne.n	800b3d2 <__sflush_r+0x66>
 800b3c4:	6829      	ldr	r1, [r5, #0]
 800b3c6:	291d      	cmp	r1, #29
 800b3c8:	d82c      	bhi.n	800b424 <__sflush_r+0xb8>
 800b3ca:	4a2a      	ldr	r2, [pc, #168]	; (800b474 <__sflush_r+0x108>)
 800b3cc:	40ca      	lsrs	r2, r1
 800b3ce:	07d6      	lsls	r6, r2, #31
 800b3d0:	d528      	bpl.n	800b424 <__sflush_r+0xb8>
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	6062      	str	r2, [r4, #4]
 800b3d6:	04d9      	lsls	r1, r3, #19
 800b3d8:	6922      	ldr	r2, [r4, #16]
 800b3da:	6022      	str	r2, [r4, #0]
 800b3dc:	d504      	bpl.n	800b3e8 <__sflush_r+0x7c>
 800b3de:	1c42      	adds	r2, r0, #1
 800b3e0:	d101      	bne.n	800b3e6 <__sflush_r+0x7a>
 800b3e2:	682b      	ldr	r3, [r5, #0]
 800b3e4:	b903      	cbnz	r3, 800b3e8 <__sflush_r+0x7c>
 800b3e6:	6560      	str	r0, [r4, #84]	; 0x54
 800b3e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3ea:	602f      	str	r7, [r5, #0]
 800b3ec:	2900      	cmp	r1, #0
 800b3ee:	d0ca      	beq.n	800b386 <__sflush_r+0x1a>
 800b3f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3f4:	4299      	cmp	r1, r3
 800b3f6:	d002      	beq.n	800b3fe <__sflush_r+0x92>
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	f7fd fc3f 	bl	8008c7c <_free_r>
 800b3fe:	2000      	movs	r0, #0
 800b400:	6360      	str	r0, [r4, #52]	; 0x34
 800b402:	e7c1      	b.n	800b388 <__sflush_r+0x1c>
 800b404:	6a21      	ldr	r1, [r4, #32]
 800b406:	2301      	movs	r3, #1
 800b408:	4628      	mov	r0, r5
 800b40a:	47b0      	blx	r6
 800b40c:	1c41      	adds	r1, r0, #1
 800b40e:	d1c7      	bne.n	800b3a0 <__sflush_r+0x34>
 800b410:	682b      	ldr	r3, [r5, #0]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d0c4      	beq.n	800b3a0 <__sflush_r+0x34>
 800b416:	2b1d      	cmp	r3, #29
 800b418:	d001      	beq.n	800b41e <__sflush_r+0xb2>
 800b41a:	2b16      	cmp	r3, #22
 800b41c:	d101      	bne.n	800b422 <__sflush_r+0xb6>
 800b41e:	602f      	str	r7, [r5, #0]
 800b420:	e7b1      	b.n	800b386 <__sflush_r+0x1a>
 800b422:	89a3      	ldrh	r3, [r4, #12]
 800b424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b428:	81a3      	strh	r3, [r4, #12]
 800b42a:	e7ad      	b.n	800b388 <__sflush_r+0x1c>
 800b42c:	690f      	ldr	r7, [r1, #16]
 800b42e:	2f00      	cmp	r7, #0
 800b430:	d0a9      	beq.n	800b386 <__sflush_r+0x1a>
 800b432:	0793      	lsls	r3, r2, #30
 800b434:	680e      	ldr	r6, [r1, #0]
 800b436:	bf08      	it	eq
 800b438:	694b      	ldreq	r3, [r1, #20]
 800b43a:	600f      	str	r7, [r1, #0]
 800b43c:	bf18      	it	ne
 800b43e:	2300      	movne	r3, #0
 800b440:	eba6 0807 	sub.w	r8, r6, r7
 800b444:	608b      	str	r3, [r1, #8]
 800b446:	f1b8 0f00 	cmp.w	r8, #0
 800b44a:	dd9c      	ble.n	800b386 <__sflush_r+0x1a>
 800b44c:	6a21      	ldr	r1, [r4, #32]
 800b44e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b450:	4643      	mov	r3, r8
 800b452:	463a      	mov	r2, r7
 800b454:	4628      	mov	r0, r5
 800b456:	47b0      	blx	r6
 800b458:	2800      	cmp	r0, #0
 800b45a:	dc06      	bgt.n	800b46a <__sflush_r+0xfe>
 800b45c:	89a3      	ldrh	r3, [r4, #12]
 800b45e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b462:	81a3      	strh	r3, [r4, #12]
 800b464:	f04f 30ff 	mov.w	r0, #4294967295
 800b468:	e78e      	b.n	800b388 <__sflush_r+0x1c>
 800b46a:	4407      	add	r7, r0
 800b46c:	eba8 0800 	sub.w	r8, r8, r0
 800b470:	e7e9      	b.n	800b446 <__sflush_r+0xda>
 800b472:	bf00      	nop
 800b474:	20400001 	.word	0x20400001

0800b478 <_fflush_r>:
 800b478:	b538      	push	{r3, r4, r5, lr}
 800b47a:	690b      	ldr	r3, [r1, #16]
 800b47c:	4605      	mov	r5, r0
 800b47e:	460c      	mov	r4, r1
 800b480:	b913      	cbnz	r3, 800b488 <_fflush_r+0x10>
 800b482:	2500      	movs	r5, #0
 800b484:	4628      	mov	r0, r5
 800b486:	bd38      	pop	{r3, r4, r5, pc}
 800b488:	b118      	cbz	r0, 800b492 <_fflush_r+0x1a>
 800b48a:	6983      	ldr	r3, [r0, #24]
 800b48c:	b90b      	cbnz	r3, 800b492 <_fflush_r+0x1a>
 800b48e:	f000 f887 	bl	800b5a0 <__sinit>
 800b492:	4b14      	ldr	r3, [pc, #80]	; (800b4e4 <_fflush_r+0x6c>)
 800b494:	429c      	cmp	r4, r3
 800b496:	d11b      	bne.n	800b4d0 <_fflush_r+0x58>
 800b498:	686c      	ldr	r4, [r5, #4]
 800b49a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d0ef      	beq.n	800b482 <_fflush_r+0xa>
 800b4a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b4a4:	07d0      	lsls	r0, r2, #31
 800b4a6:	d404      	bmi.n	800b4b2 <_fflush_r+0x3a>
 800b4a8:	0599      	lsls	r1, r3, #22
 800b4aa:	d402      	bmi.n	800b4b2 <_fflush_r+0x3a>
 800b4ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4ae:	f7ff fcda 	bl	800ae66 <__retarget_lock_acquire_recursive>
 800b4b2:	4628      	mov	r0, r5
 800b4b4:	4621      	mov	r1, r4
 800b4b6:	f7ff ff59 	bl	800b36c <__sflush_r>
 800b4ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4bc:	07da      	lsls	r2, r3, #31
 800b4be:	4605      	mov	r5, r0
 800b4c0:	d4e0      	bmi.n	800b484 <_fflush_r+0xc>
 800b4c2:	89a3      	ldrh	r3, [r4, #12]
 800b4c4:	059b      	lsls	r3, r3, #22
 800b4c6:	d4dd      	bmi.n	800b484 <_fflush_r+0xc>
 800b4c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4ca:	f7ff fccd 	bl	800ae68 <__retarget_lock_release_recursive>
 800b4ce:	e7d9      	b.n	800b484 <_fflush_r+0xc>
 800b4d0:	4b05      	ldr	r3, [pc, #20]	; (800b4e8 <_fflush_r+0x70>)
 800b4d2:	429c      	cmp	r4, r3
 800b4d4:	d101      	bne.n	800b4da <_fflush_r+0x62>
 800b4d6:	68ac      	ldr	r4, [r5, #8]
 800b4d8:	e7df      	b.n	800b49a <_fflush_r+0x22>
 800b4da:	4b04      	ldr	r3, [pc, #16]	; (800b4ec <_fflush_r+0x74>)
 800b4dc:	429c      	cmp	r4, r3
 800b4de:	bf08      	it	eq
 800b4e0:	68ec      	ldreq	r4, [r5, #12]
 800b4e2:	e7da      	b.n	800b49a <_fflush_r+0x22>
 800b4e4:	0800be34 	.word	0x0800be34
 800b4e8:	0800be54 	.word	0x0800be54
 800b4ec:	0800be14 	.word	0x0800be14

0800b4f0 <std>:
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	b510      	push	{r4, lr}
 800b4f4:	4604      	mov	r4, r0
 800b4f6:	e9c0 3300 	strd	r3, r3, [r0]
 800b4fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4fe:	6083      	str	r3, [r0, #8]
 800b500:	8181      	strh	r1, [r0, #12]
 800b502:	6643      	str	r3, [r0, #100]	; 0x64
 800b504:	81c2      	strh	r2, [r0, #14]
 800b506:	6183      	str	r3, [r0, #24]
 800b508:	4619      	mov	r1, r3
 800b50a:	2208      	movs	r2, #8
 800b50c:	305c      	adds	r0, #92	; 0x5c
 800b50e:	f7fd fbad 	bl	8008c6c <memset>
 800b512:	4b05      	ldr	r3, [pc, #20]	; (800b528 <std+0x38>)
 800b514:	6263      	str	r3, [r4, #36]	; 0x24
 800b516:	4b05      	ldr	r3, [pc, #20]	; (800b52c <std+0x3c>)
 800b518:	62a3      	str	r3, [r4, #40]	; 0x28
 800b51a:	4b05      	ldr	r3, [pc, #20]	; (800b530 <std+0x40>)
 800b51c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b51e:	4b05      	ldr	r3, [pc, #20]	; (800b534 <std+0x44>)
 800b520:	6224      	str	r4, [r4, #32]
 800b522:	6323      	str	r3, [r4, #48]	; 0x30
 800b524:	bd10      	pop	{r4, pc}
 800b526:	bf00      	nop
 800b528:	0800b83d 	.word	0x0800b83d
 800b52c:	0800b85f 	.word	0x0800b85f
 800b530:	0800b897 	.word	0x0800b897
 800b534:	0800b8bb 	.word	0x0800b8bb

0800b538 <_cleanup_r>:
 800b538:	4901      	ldr	r1, [pc, #4]	; (800b540 <_cleanup_r+0x8>)
 800b53a:	f000 b8af 	b.w	800b69c <_fwalk_reent>
 800b53e:	bf00      	nop
 800b540:	0800b479 	.word	0x0800b479

0800b544 <__sfmoreglue>:
 800b544:	b570      	push	{r4, r5, r6, lr}
 800b546:	1e4a      	subs	r2, r1, #1
 800b548:	2568      	movs	r5, #104	; 0x68
 800b54a:	4355      	muls	r5, r2
 800b54c:	460e      	mov	r6, r1
 800b54e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b552:	f7fd fbe3 	bl	8008d1c <_malloc_r>
 800b556:	4604      	mov	r4, r0
 800b558:	b140      	cbz	r0, 800b56c <__sfmoreglue+0x28>
 800b55a:	2100      	movs	r1, #0
 800b55c:	e9c0 1600 	strd	r1, r6, [r0]
 800b560:	300c      	adds	r0, #12
 800b562:	60a0      	str	r0, [r4, #8]
 800b564:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b568:	f7fd fb80 	bl	8008c6c <memset>
 800b56c:	4620      	mov	r0, r4
 800b56e:	bd70      	pop	{r4, r5, r6, pc}

0800b570 <__sfp_lock_acquire>:
 800b570:	4801      	ldr	r0, [pc, #4]	; (800b578 <__sfp_lock_acquire+0x8>)
 800b572:	f7ff bc78 	b.w	800ae66 <__retarget_lock_acquire_recursive>
 800b576:	bf00      	nop
 800b578:	20001de0 	.word	0x20001de0

0800b57c <__sfp_lock_release>:
 800b57c:	4801      	ldr	r0, [pc, #4]	; (800b584 <__sfp_lock_release+0x8>)
 800b57e:	f7ff bc73 	b.w	800ae68 <__retarget_lock_release_recursive>
 800b582:	bf00      	nop
 800b584:	20001de0 	.word	0x20001de0

0800b588 <__sinit_lock_acquire>:
 800b588:	4801      	ldr	r0, [pc, #4]	; (800b590 <__sinit_lock_acquire+0x8>)
 800b58a:	f7ff bc6c 	b.w	800ae66 <__retarget_lock_acquire_recursive>
 800b58e:	bf00      	nop
 800b590:	20001ddb 	.word	0x20001ddb

0800b594 <__sinit_lock_release>:
 800b594:	4801      	ldr	r0, [pc, #4]	; (800b59c <__sinit_lock_release+0x8>)
 800b596:	f7ff bc67 	b.w	800ae68 <__retarget_lock_release_recursive>
 800b59a:	bf00      	nop
 800b59c:	20001ddb 	.word	0x20001ddb

0800b5a0 <__sinit>:
 800b5a0:	b510      	push	{r4, lr}
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	f7ff fff0 	bl	800b588 <__sinit_lock_acquire>
 800b5a8:	69a3      	ldr	r3, [r4, #24]
 800b5aa:	b11b      	cbz	r3, 800b5b4 <__sinit+0x14>
 800b5ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5b0:	f7ff bff0 	b.w	800b594 <__sinit_lock_release>
 800b5b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b5b8:	6523      	str	r3, [r4, #80]	; 0x50
 800b5ba:	4b13      	ldr	r3, [pc, #76]	; (800b608 <__sinit+0x68>)
 800b5bc:	4a13      	ldr	r2, [pc, #76]	; (800b60c <__sinit+0x6c>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b5c2:	42a3      	cmp	r3, r4
 800b5c4:	bf04      	itt	eq
 800b5c6:	2301      	moveq	r3, #1
 800b5c8:	61a3      	streq	r3, [r4, #24]
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f000 f820 	bl	800b610 <__sfp>
 800b5d0:	6060      	str	r0, [r4, #4]
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	f000 f81c 	bl	800b610 <__sfp>
 800b5d8:	60a0      	str	r0, [r4, #8]
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f000 f818 	bl	800b610 <__sfp>
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	60e0      	str	r0, [r4, #12]
 800b5e4:	2104      	movs	r1, #4
 800b5e6:	6860      	ldr	r0, [r4, #4]
 800b5e8:	f7ff ff82 	bl	800b4f0 <std>
 800b5ec:	68a0      	ldr	r0, [r4, #8]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	2109      	movs	r1, #9
 800b5f2:	f7ff ff7d 	bl	800b4f0 <std>
 800b5f6:	68e0      	ldr	r0, [r4, #12]
 800b5f8:	2202      	movs	r2, #2
 800b5fa:	2112      	movs	r1, #18
 800b5fc:	f7ff ff78 	bl	800b4f0 <std>
 800b600:	2301      	movs	r3, #1
 800b602:	61a3      	str	r3, [r4, #24]
 800b604:	e7d2      	b.n	800b5ac <__sinit+0xc>
 800b606:	bf00      	nop
 800b608:	0800ba94 	.word	0x0800ba94
 800b60c:	0800b539 	.word	0x0800b539

0800b610 <__sfp>:
 800b610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b612:	4607      	mov	r7, r0
 800b614:	f7ff ffac 	bl	800b570 <__sfp_lock_acquire>
 800b618:	4b1e      	ldr	r3, [pc, #120]	; (800b694 <__sfp+0x84>)
 800b61a:	681e      	ldr	r6, [r3, #0]
 800b61c:	69b3      	ldr	r3, [r6, #24]
 800b61e:	b913      	cbnz	r3, 800b626 <__sfp+0x16>
 800b620:	4630      	mov	r0, r6
 800b622:	f7ff ffbd 	bl	800b5a0 <__sinit>
 800b626:	3648      	adds	r6, #72	; 0x48
 800b628:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b62c:	3b01      	subs	r3, #1
 800b62e:	d503      	bpl.n	800b638 <__sfp+0x28>
 800b630:	6833      	ldr	r3, [r6, #0]
 800b632:	b30b      	cbz	r3, 800b678 <__sfp+0x68>
 800b634:	6836      	ldr	r6, [r6, #0]
 800b636:	e7f7      	b.n	800b628 <__sfp+0x18>
 800b638:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b63c:	b9d5      	cbnz	r5, 800b674 <__sfp+0x64>
 800b63e:	4b16      	ldr	r3, [pc, #88]	; (800b698 <__sfp+0x88>)
 800b640:	60e3      	str	r3, [r4, #12]
 800b642:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b646:	6665      	str	r5, [r4, #100]	; 0x64
 800b648:	f7ff fc0c 	bl	800ae64 <__retarget_lock_init_recursive>
 800b64c:	f7ff ff96 	bl	800b57c <__sfp_lock_release>
 800b650:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b654:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b658:	6025      	str	r5, [r4, #0]
 800b65a:	61a5      	str	r5, [r4, #24]
 800b65c:	2208      	movs	r2, #8
 800b65e:	4629      	mov	r1, r5
 800b660:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b664:	f7fd fb02 	bl	8008c6c <memset>
 800b668:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b66c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b670:	4620      	mov	r0, r4
 800b672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b674:	3468      	adds	r4, #104	; 0x68
 800b676:	e7d9      	b.n	800b62c <__sfp+0x1c>
 800b678:	2104      	movs	r1, #4
 800b67a:	4638      	mov	r0, r7
 800b67c:	f7ff ff62 	bl	800b544 <__sfmoreglue>
 800b680:	4604      	mov	r4, r0
 800b682:	6030      	str	r0, [r6, #0]
 800b684:	2800      	cmp	r0, #0
 800b686:	d1d5      	bne.n	800b634 <__sfp+0x24>
 800b688:	f7ff ff78 	bl	800b57c <__sfp_lock_release>
 800b68c:	230c      	movs	r3, #12
 800b68e:	603b      	str	r3, [r7, #0]
 800b690:	e7ee      	b.n	800b670 <__sfp+0x60>
 800b692:	bf00      	nop
 800b694:	0800ba94 	.word	0x0800ba94
 800b698:	ffff0001 	.word	0xffff0001

0800b69c <_fwalk_reent>:
 800b69c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6a0:	4606      	mov	r6, r0
 800b6a2:	4688      	mov	r8, r1
 800b6a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b6a8:	2700      	movs	r7, #0
 800b6aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6ae:	f1b9 0901 	subs.w	r9, r9, #1
 800b6b2:	d505      	bpl.n	800b6c0 <_fwalk_reent+0x24>
 800b6b4:	6824      	ldr	r4, [r4, #0]
 800b6b6:	2c00      	cmp	r4, #0
 800b6b8:	d1f7      	bne.n	800b6aa <_fwalk_reent+0xe>
 800b6ba:	4638      	mov	r0, r7
 800b6bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6c0:	89ab      	ldrh	r3, [r5, #12]
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d907      	bls.n	800b6d6 <_fwalk_reent+0x3a>
 800b6c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	d003      	beq.n	800b6d6 <_fwalk_reent+0x3a>
 800b6ce:	4629      	mov	r1, r5
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	47c0      	blx	r8
 800b6d4:	4307      	orrs	r7, r0
 800b6d6:	3568      	adds	r5, #104	; 0x68
 800b6d8:	e7e9      	b.n	800b6ae <_fwalk_reent+0x12>

0800b6da <__swhatbuf_r>:
 800b6da:	b570      	push	{r4, r5, r6, lr}
 800b6dc:	460e      	mov	r6, r1
 800b6de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6e2:	2900      	cmp	r1, #0
 800b6e4:	b096      	sub	sp, #88	; 0x58
 800b6e6:	4614      	mov	r4, r2
 800b6e8:	461d      	mov	r5, r3
 800b6ea:	da07      	bge.n	800b6fc <__swhatbuf_r+0x22>
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	602b      	str	r3, [r5, #0]
 800b6f0:	89b3      	ldrh	r3, [r6, #12]
 800b6f2:	061a      	lsls	r2, r3, #24
 800b6f4:	d410      	bmi.n	800b718 <__swhatbuf_r+0x3e>
 800b6f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6fa:	e00e      	b.n	800b71a <__swhatbuf_r+0x40>
 800b6fc:	466a      	mov	r2, sp
 800b6fe:	f000 f903 	bl	800b908 <_fstat_r>
 800b702:	2800      	cmp	r0, #0
 800b704:	dbf2      	blt.n	800b6ec <__swhatbuf_r+0x12>
 800b706:	9a01      	ldr	r2, [sp, #4]
 800b708:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b70c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b710:	425a      	negs	r2, r3
 800b712:	415a      	adcs	r2, r3
 800b714:	602a      	str	r2, [r5, #0]
 800b716:	e7ee      	b.n	800b6f6 <__swhatbuf_r+0x1c>
 800b718:	2340      	movs	r3, #64	; 0x40
 800b71a:	2000      	movs	r0, #0
 800b71c:	6023      	str	r3, [r4, #0]
 800b71e:	b016      	add	sp, #88	; 0x58
 800b720:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b724 <__smakebuf_r>:
 800b724:	898b      	ldrh	r3, [r1, #12]
 800b726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b728:	079d      	lsls	r5, r3, #30
 800b72a:	4606      	mov	r6, r0
 800b72c:	460c      	mov	r4, r1
 800b72e:	d507      	bpl.n	800b740 <__smakebuf_r+0x1c>
 800b730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b734:	6023      	str	r3, [r4, #0]
 800b736:	6123      	str	r3, [r4, #16]
 800b738:	2301      	movs	r3, #1
 800b73a:	6163      	str	r3, [r4, #20]
 800b73c:	b002      	add	sp, #8
 800b73e:	bd70      	pop	{r4, r5, r6, pc}
 800b740:	ab01      	add	r3, sp, #4
 800b742:	466a      	mov	r2, sp
 800b744:	f7ff ffc9 	bl	800b6da <__swhatbuf_r>
 800b748:	9900      	ldr	r1, [sp, #0]
 800b74a:	4605      	mov	r5, r0
 800b74c:	4630      	mov	r0, r6
 800b74e:	f7fd fae5 	bl	8008d1c <_malloc_r>
 800b752:	b948      	cbnz	r0, 800b768 <__smakebuf_r+0x44>
 800b754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b758:	059a      	lsls	r2, r3, #22
 800b75a:	d4ef      	bmi.n	800b73c <__smakebuf_r+0x18>
 800b75c:	f023 0303 	bic.w	r3, r3, #3
 800b760:	f043 0302 	orr.w	r3, r3, #2
 800b764:	81a3      	strh	r3, [r4, #12]
 800b766:	e7e3      	b.n	800b730 <__smakebuf_r+0xc>
 800b768:	4b0d      	ldr	r3, [pc, #52]	; (800b7a0 <__smakebuf_r+0x7c>)
 800b76a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b76c:	89a3      	ldrh	r3, [r4, #12]
 800b76e:	6020      	str	r0, [r4, #0]
 800b770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b774:	81a3      	strh	r3, [r4, #12]
 800b776:	9b00      	ldr	r3, [sp, #0]
 800b778:	6163      	str	r3, [r4, #20]
 800b77a:	9b01      	ldr	r3, [sp, #4]
 800b77c:	6120      	str	r0, [r4, #16]
 800b77e:	b15b      	cbz	r3, 800b798 <__smakebuf_r+0x74>
 800b780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b784:	4630      	mov	r0, r6
 800b786:	f000 f8d1 	bl	800b92c <_isatty_r>
 800b78a:	b128      	cbz	r0, 800b798 <__smakebuf_r+0x74>
 800b78c:	89a3      	ldrh	r3, [r4, #12]
 800b78e:	f023 0303 	bic.w	r3, r3, #3
 800b792:	f043 0301 	orr.w	r3, r3, #1
 800b796:	81a3      	strh	r3, [r4, #12]
 800b798:	89a0      	ldrh	r0, [r4, #12]
 800b79a:	4305      	orrs	r5, r0
 800b79c:	81a5      	strh	r5, [r4, #12]
 800b79e:	e7cd      	b.n	800b73c <__smakebuf_r+0x18>
 800b7a0:	0800b539 	.word	0x0800b539

0800b7a4 <_malloc_usable_size_r>:
 800b7a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7a8:	1f18      	subs	r0, r3, #4
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	bfbc      	itt	lt
 800b7ae:	580b      	ldrlt	r3, [r1, r0]
 800b7b0:	18c0      	addlt	r0, r0, r3
 800b7b2:	4770      	bx	lr

0800b7b4 <_raise_r>:
 800b7b4:	291f      	cmp	r1, #31
 800b7b6:	b538      	push	{r3, r4, r5, lr}
 800b7b8:	4604      	mov	r4, r0
 800b7ba:	460d      	mov	r5, r1
 800b7bc:	d904      	bls.n	800b7c8 <_raise_r+0x14>
 800b7be:	2316      	movs	r3, #22
 800b7c0:	6003      	str	r3, [r0, #0]
 800b7c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c6:	bd38      	pop	{r3, r4, r5, pc}
 800b7c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b7ca:	b112      	cbz	r2, 800b7d2 <_raise_r+0x1e>
 800b7cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7d0:	b94b      	cbnz	r3, 800b7e6 <_raise_r+0x32>
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	f000 f830 	bl	800b838 <_getpid_r>
 800b7d8:	462a      	mov	r2, r5
 800b7da:	4601      	mov	r1, r0
 800b7dc:	4620      	mov	r0, r4
 800b7de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7e2:	f000 b817 	b.w	800b814 <_kill_r>
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d00a      	beq.n	800b800 <_raise_r+0x4c>
 800b7ea:	1c59      	adds	r1, r3, #1
 800b7ec:	d103      	bne.n	800b7f6 <_raise_r+0x42>
 800b7ee:	2316      	movs	r3, #22
 800b7f0:	6003      	str	r3, [r0, #0]
 800b7f2:	2001      	movs	r0, #1
 800b7f4:	e7e7      	b.n	800b7c6 <_raise_r+0x12>
 800b7f6:	2400      	movs	r4, #0
 800b7f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b7fc:	4628      	mov	r0, r5
 800b7fe:	4798      	blx	r3
 800b800:	2000      	movs	r0, #0
 800b802:	e7e0      	b.n	800b7c6 <_raise_r+0x12>

0800b804 <raise>:
 800b804:	4b02      	ldr	r3, [pc, #8]	; (800b810 <raise+0xc>)
 800b806:	4601      	mov	r1, r0
 800b808:	6818      	ldr	r0, [r3, #0]
 800b80a:	f7ff bfd3 	b.w	800b7b4 <_raise_r>
 800b80e:	bf00      	nop
 800b810:	20000188 	.word	0x20000188

0800b814 <_kill_r>:
 800b814:	b538      	push	{r3, r4, r5, lr}
 800b816:	4d07      	ldr	r5, [pc, #28]	; (800b834 <_kill_r+0x20>)
 800b818:	2300      	movs	r3, #0
 800b81a:	4604      	mov	r4, r0
 800b81c:	4608      	mov	r0, r1
 800b81e:	4611      	mov	r1, r2
 800b820:	602b      	str	r3, [r5, #0]
 800b822:	f7f5 ffdf 	bl	80017e4 <_kill>
 800b826:	1c43      	adds	r3, r0, #1
 800b828:	d102      	bne.n	800b830 <_kill_r+0x1c>
 800b82a:	682b      	ldr	r3, [r5, #0]
 800b82c:	b103      	cbz	r3, 800b830 <_kill_r+0x1c>
 800b82e:	6023      	str	r3, [r4, #0]
 800b830:	bd38      	pop	{r3, r4, r5, pc}
 800b832:	bf00      	nop
 800b834:	20001dd4 	.word	0x20001dd4

0800b838 <_getpid_r>:
 800b838:	f7f5 bfcc 	b.w	80017d4 <_getpid>

0800b83c <__sread>:
 800b83c:	b510      	push	{r4, lr}
 800b83e:	460c      	mov	r4, r1
 800b840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b844:	f000 f894 	bl	800b970 <_read_r>
 800b848:	2800      	cmp	r0, #0
 800b84a:	bfab      	itete	ge
 800b84c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b84e:	89a3      	ldrhlt	r3, [r4, #12]
 800b850:	181b      	addge	r3, r3, r0
 800b852:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b856:	bfac      	ite	ge
 800b858:	6563      	strge	r3, [r4, #84]	; 0x54
 800b85a:	81a3      	strhlt	r3, [r4, #12]
 800b85c:	bd10      	pop	{r4, pc}

0800b85e <__swrite>:
 800b85e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b862:	461f      	mov	r7, r3
 800b864:	898b      	ldrh	r3, [r1, #12]
 800b866:	05db      	lsls	r3, r3, #23
 800b868:	4605      	mov	r5, r0
 800b86a:	460c      	mov	r4, r1
 800b86c:	4616      	mov	r6, r2
 800b86e:	d505      	bpl.n	800b87c <__swrite+0x1e>
 800b870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b874:	2302      	movs	r3, #2
 800b876:	2200      	movs	r2, #0
 800b878:	f000 f868 	bl	800b94c <_lseek_r>
 800b87c:	89a3      	ldrh	r3, [r4, #12]
 800b87e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b882:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b886:	81a3      	strh	r3, [r4, #12]
 800b888:	4632      	mov	r2, r6
 800b88a:	463b      	mov	r3, r7
 800b88c:	4628      	mov	r0, r5
 800b88e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b892:	f000 b817 	b.w	800b8c4 <_write_r>

0800b896 <__sseek>:
 800b896:	b510      	push	{r4, lr}
 800b898:	460c      	mov	r4, r1
 800b89a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b89e:	f000 f855 	bl	800b94c <_lseek_r>
 800b8a2:	1c43      	adds	r3, r0, #1
 800b8a4:	89a3      	ldrh	r3, [r4, #12]
 800b8a6:	bf15      	itete	ne
 800b8a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b8aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b8ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b8b2:	81a3      	strheq	r3, [r4, #12]
 800b8b4:	bf18      	it	ne
 800b8b6:	81a3      	strhne	r3, [r4, #12]
 800b8b8:	bd10      	pop	{r4, pc}

0800b8ba <__sclose>:
 800b8ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8be:	f000 b813 	b.w	800b8e8 <_close_r>
	...

0800b8c4 <_write_r>:
 800b8c4:	b538      	push	{r3, r4, r5, lr}
 800b8c6:	4d07      	ldr	r5, [pc, #28]	; (800b8e4 <_write_r+0x20>)
 800b8c8:	4604      	mov	r4, r0
 800b8ca:	4608      	mov	r0, r1
 800b8cc:	4611      	mov	r1, r2
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	602a      	str	r2, [r5, #0]
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	f7f5 ffbd 	bl	8001852 <_write>
 800b8d8:	1c43      	adds	r3, r0, #1
 800b8da:	d102      	bne.n	800b8e2 <_write_r+0x1e>
 800b8dc:	682b      	ldr	r3, [r5, #0]
 800b8de:	b103      	cbz	r3, 800b8e2 <_write_r+0x1e>
 800b8e0:	6023      	str	r3, [r4, #0]
 800b8e2:	bd38      	pop	{r3, r4, r5, pc}
 800b8e4:	20001dd4 	.word	0x20001dd4

0800b8e8 <_close_r>:
 800b8e8:	b538      	push	{r3, r4, r5, lr}
 800b8ea:	4d06      	ldr	r5, [pc, #24]	; (800b904 <_close_r+0x1c>)
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	4608      	mov	r0, r1
 800b8f2:	602b      	str	r3, [r5, #0]
 800b8f4:	f7f5 ffc9 	bl	800188a <_close>
 800b8f8:	1c43      	adds	r3, r0, #1
 800b8fa:	d102      	bne.n	800b902 <_close_r+0x1a>
 800b8fc:	682b      	ldr	r3, [r5, #0]
 800b8fe:	b103      	cbz	r3, 800b902 <_close_r+0x1a>
 800b900:	6023      	str	r3, [r4, #0]
 800b902:	bd38      	pop	{r3, r4, r5, pc}
 800b904:	20001dd4 	.word	0x20001dd4

0800b908 <_fstat_r>:
 800b908:	b538      	push	{r3, r4, r5, lr}
 800b90a:	4d07      	ldr	r5, [pc, #28]	; (800b928 <_fstat_r+0x20>)
 800b90c:	2300      	movs	r3, #0
 800b90e:	4604      	mov	r4, r0
 800b910:	4608      	mov	r0, r1
 800b912:	4611      	mov	r1, r2
 800b914:	602b      	str	r3, [r5, #0]
 800b916:	f7f5 ffc4 	bl	80018a2 <_fstat>
 800b91a:	1c43      	adds	r3, r0, #1
 800b91c:	d102      	bne.n	800b924 <_fstat_r+0x1c>
 800b91e:	682b      	ldr	r3, [r5, #0]
 800b920:	b103      	cbz	r3, 800b924 <_fstat_r+0x1c>
 800b922:	6023      	str	r3, [r4, #0]
 800b924:	bd38      	pop	{r3, r4, r5, pc}
 800b926:	bf00      	nop
 800b928:	20001dd4 	.word	0x20001dd4

0800b92c <_isatty_r>:
 800b92c:	b538      	push	{r3, r4, r5, lr}
 800b92e:	4d06      	ldr	r5, [pc, #24]	; (800b948 <_isatty_r+0x1c>)
 800b930:	2300      	movs	r3, #0
 800b932:	4604      	mov	r4, r0
 800b934:	4608      	mov	r0, r1
 800b936:	602b      	str	r3, [r5, #0]
 800b938:	f7f5 ffc3 	bl	80018c2 <_isatty>
 800b93c:	1c43      	adds	r3, r0, #1
 800b93e:	d102      	bne.n	800b946 <_isatty_r+0x1a>
 800b940:	682b      	ldr	r3, [r5, #0]
 800b942:	b103      	cbz	r3, 800b946 <_isatty_r+0x1a>
 800b944:	6023      	str	r3, [r4, #0]
 800b946:	bd38      	pop	{r3, r4, r5, pc}
 800b948:	20001dd4 	.word	0x20001dd4

0800b94c <_lseek_r>:
 800b94c:	b538      	push	{r3, r4, r5, lr}
 800b94e:	4d07      	ldr	r5, [pc, #28]	; (800b96c <_lseek_r+0x20>)
 800b950:	4604      	mov	r4, r0
 800b952:	4608      	mov	r0, r1
 800b954:	4611      	mov	r1, r2
 800b956:	2200      	movs	r2, #0
 800b958:	602a      	str	r2, [r5, #0]
 800b95a:	461a      	mov	r2, r3
 800b95c:	f7f5 ffbc 	bl	80018d8 <_lseek>
 800b960:	1c43      	adds	r3, r0, #1
 800b962:	d102      	bne.n	800b96a <_lseek_r+0x1e>
 800b964:	682b      	ldr	r3, [r5, #0]
 800b966:	b103      	cbz	r3, 800b96a <_lseek_r+0x1e>
 800b968:	6023      	str	r3, [r4, #0]
 800b96a:	bd38      	pop	{r3, r4, r5, pc}
 800b96c:	20001dd4 	.word	0x20001dd4

0800b970 <_read_r>:
 800b970:	b538      	push	{r3, r4, r5, lr}
 800b972:	4d07      	ldr	r5, [pc, #28]	; (800b990 <_read_r+0x20>)
 800b974:	4604      	mov	r4, r0
 800b976:	4608      	mov	r0, r1
 800b978:	4611      	mov	r1, r2
 800b97a:	2200      	movs	r2, #0
 800b97c:	602a      	str	r2, [r5, #0]
 800b97e:	461a      	mov	r2, r3
 800b980:	f7f5 ff4a 	bl	8001818 <_read>
 800b984:	1c43      	adds	r3, r0, #1
 800b986:	d102      	bne.n	800b98e <_read_r+0x1e>
 800b988:	682b      	ldr	r3, [r5, #0]
 800b98a:	b103      	cbz	r3, 800b98e <_read_r+0x1e>
 800b98c:	6023      	str	r3, [r4, #0]
 800b98e:	bd38      	pop	{r3, r4, r5, pc}
 800b990:	20001dd4 	.word	0x20001dd4

0800b994 <_init>:
 800b994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b996:	bf00      	nop
 800b998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b99a:	bc08      	pop	{r3}
 800b99c:	469e      	mov	lr, r3
 800b99e:	4770      	bx	lr

0800b9a0 <_fini>:
 800b9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a2:	bf00      	nop
 800b9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9a6:	bc08      	pop	{r3}
 800b9a8:	469e      	mov	lr, r3
 800b9aa:	4770      	bx	lr
